fn filters::<impl at /home/lixiyue/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/clap-2.34.0/src/macros.rs:323:9: 323:40>::from_str(_1: &str) -> Result<FilterKind, String> {
    debug s => _1;
    let mut _0: std::result::Result<filters::FilterKind, std::string::String>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &str;
    let mut _8: bool;
    let _9: &str;
    let mut _10: filters::FilterKind;
    let mut _11: bool;
    let _12: &str;
    let mut _13: bool;
    let _14: &str;
    let mut _15: filters::FilterKind;
    let mut _16: bool;
    let _17: &str;
    let mut _18: bool;
    let _19: &str;
    let mut _20: filters::FilterKind;
    let mut _21: bool;
    let _22: &str;
    let mut _23: bool;
    let _24: &str;
    let mut _25: filters::FilterKind;
    let mut _26: std::string::String;
    let _27: std::vec::Vec<&str>;
    let mut _28: std::boxed::Box<[&str]>;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: *mut u8;
    let mut _32: std::boxed::Box<[&str; 4]>;
    let _33: &str;
    let _34: &str;
    let _35: &str;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::string::String;
    let _44: std::string::String;
    let _45: &[&str];
    let mut _46: &std::vec::Vec<&str>;
    let _47: &str;
    let mut _49: *const [&str; 4];
    let mut _50: *const ();
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: bool;
    scope 1 {
        debug v => _27;
        let _36: std::string::String;
        let mut _48: &[&str; 1];
        scope 3 {
            debug res => _36;
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "Sorted") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb8, otherwise: bb6];
    }

    bb2: {
        switchInt(move _3) -> [0: bb14, otherwise: bb12];
    }

    bb3: {
        switchInt(move _4) -> [0: bb20, otherwise: bb18];
    }

    bb4: {
        switchInt(move _5) -> [0: bb26, otherwise: bb24];
    }

    bb5: {
        _10 = FilterKind::Sorted;
        _0 = Result::<FilterKind, String>::Ok(move _10);
        goto -> bb38;
    }

    bb6: {
        _7 = const "Sorted";
        _6 = core::str::<impl str>::eq_ignore_ascii_case(_1, _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb5];
    }

    bb8: {
        _9 = const "Sorted";
        _8 = core::str::<impl str>::eq_ignore_ascii_case(_1, _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _8) -> [0: bb10, otherwise: bb5];
    }

    bb10: {
        _3 = <str as PartialEq>::eq(_1, const "Digest") -> [return: bb2, unwind continue];
    }

    bb11: {
        _15 = FilterKind::Digest;
        _0 = Result::<FilterKind, String>::Ok(move _15);
        goto -> bb38;
    }

    bb12: {
        _12 = const "Digest";
        _11 = core::str::<impl str>::eq_ignore_ascii_case(_1, _12) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _11) -> [0: bb14, otherwise: bb11];
    }

    bb14: {
        _14 = const "Digest";
        _13 = core::str::<impl str>::eq_ignore_ascii_case(_1, _14) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _13) -> [0: bb16, otherwise: bb11];
    }

    bb16: {
        _4 = <str as PartialEq>::eq(_1, const "Naive") -> [return: bb3, unwind continue];
    }

    bb17: {
        _20 = FilterKind::Naive;
        _0 = Result::<FilterKind, String>::Ok(move _20);
        goto -> bb38;
    }

    bb18: {
        _17 = const "Naive";
        _16 = core::str::<impl str>::eq_ignore_ascii_case(_1, _17) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _16) -> [0: bb20, otherwise: bb17];
    }

    bb20: {
        _19 = const "Naive";
        _18 = core::str::<impl str>::eq_ignore_ascii_case(_1, _19) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _18) -> [0: bb22, otherwise: bb17];
    }

    bb22: {
        _5 = <str as PartialEq>::eq(_1, const "Bloom") -> [return: bb4, unwind continue];
    }

    bb23: {
        _25 = FilterKind::Bloom;
        _0 = Result::<FilterKind, String>::Ok(move _25);
        goto -> bb38;
    }

    bb24: {
        _22 = const "Bloom";
        _21 = core::str::<impl str>::eq_ignore_ascii_case(_1, _22) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _21) -> [0: bb26, otherwise: bb23];
    }

    bb26: {
        _24 = const "Bloom";
        _23 = core::str::<impl str>::eq_ignore_ascii_case(_1, _24) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _23) -> [0: bb28, otherwise: bb23];
    }

    bb28: {
        _29 = SizeOf([&str; 4]);
        _30 = AlignOf([&str; 4]);
        _31 = alloc::alloc::exchange_malloc(move _29, move _30) -> [return: bb29, unwind continue];
    }

    bb29: {
        _32 = ShallowInitBox(move _31, [&str; 4]);
        _33 = const "Digest";
        _34 = const "Naive";
        _35 = const "Bloom";
        _49 = (((_32.0: std::ptr::Unique<[&str; 4]>).0: std::ptr::NonNull<[&str; 4]>).0: *const [&str; 4]);
        _50 = _49 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf([&str; 4]);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb43, unwind unreachable];
    }

    bb30: {
        _48 = const _;
        _38 = _48 as &[&str] (PointerCoercion(Unsize));
        _46 = &_27;
        _45 = <Vec<&str> as Deref>::deref(move _46) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        _47 = const ", ";
        _44 = slice::<impl [&str]>::join::<&str>(_45, _47) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        _43 = &_44;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<String>(_43) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        _41 = [move _42];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _37 = Arguments::<'_>::new_v1(move _38, move _39) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        _36 = format(move _37) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        drop(_44) -> [return: bb36, unwind: bb39];
    }

    bb36: {
        _26 = move _36;
        drop(_27) -> [return: bb37, unwind continue];
    }

    bb37: {
        _0 = Result::<FilterKind, String>::Err(move _26);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_36) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_27) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        (*_49) = [const "Sorted", _33, _34, _35];
        _28 = move _32 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _27 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _28) -> [return: bb30, unwind continue];
    }
}