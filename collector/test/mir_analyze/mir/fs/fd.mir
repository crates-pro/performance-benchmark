// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn build_app() -> App<'_, '_> {
    let mut _0: clap::App<'_, '_>;
    let _1: clap::AppSettings;
    let mut _2: bool;
    let mut _3: &std::option::Option<std::ffi::OsString>;
    let _4: std::option::Option<std::ffi::OsString>;
    let mut _6: clap::App<'_, '_>;
    let mut _7: clap::App<'_, '_>;
    let mut _8: clap::App<'_, '_>;
    let mut _9: clap::App<'_, '_>;
    let mut _10: clap::App<'_, '_>;
    let mut _11: clap::App<'_, '_>;
    let mut _12: clap::App<'_, '_>;
    let mut _13: clap::App<'_, '_>;
    let mut _14: clap::App<'_, '_>;
    let mut _15: clap::App<'_, '_>;
    let mut _16: clap::App<'_, '_>;
    let mut _17: clap::App<'_, '_>;
    let mut _18: clap::App<'_, '_>;
    let mut _19: clap::App<'_, '_>;
    let mut _20: clap::App<'_, '_>;
    let mut _21: clap::App<'_, '_>;
    let mut _22: clap::App<'_, '_>;
    let mut _23: clap::App<'_, '_>;
    let mut _24: clap::App<'_, '_>;
    let mut _25: clap::App<'_, '_>;
    let mut _26: clap::App<'_, '_>;
    let mut _27: clap::App<'_, '_>;
    let mut _28: clap::App<'_, '_>;
    let mut _29: clap::App<'_, '_>;
    let mut _30: clap::App<'_, '_>;
    let mut _31: clap::App<'_, '_>;
    let mut _32: clap::App<'_, '_>;
    let mut _33: clap::App<'_, '_>;
    let mut _34: clap::App<'_, '_>;
    let mut _35: clap::App<'_, '_>;
    let mut _36: clap::App<'_, '_>;
    let mut _37: clap::App<'_, '_>;
    let mut _38: clap::App<'_, '_>;
    let mut _39: clap::App<'_, '_>;
    let mut _40: clap::App<'_, '_>;
    let mut _41: clap::App<'_, '_>;
    let mut _42: clap::App<'_, '_>;
    let mut _43: clap::App<'_, '_>;
    let mut _44: clap::App<'_, '_>;
    let mut _45: clap::App<'_, '_>;
    let mut _46: clap::App<'_, '_>;
    let mut _47: clap::App<'_, '_>;
    let mut _48: clap::App<'_, '_>;
    let mut _49: clap::App<'_, '_>;
    let mut _50: clap::App<'_, '_>;
    let mut _51: clap::AppSettings;
    let mut _52: clap::AppSettings;
    let mut _53: clap::Arg<'_, '_>;
    let mut _54: clap::Arg<'_, '_>;
    let mut _55: clap::Arg<'_, '_>;
    let mut _56: clap::Arg<'_, '_>;
    let mut _57: clap::Arg<'_, '_>;
    let mut _58: clap::Arg<'_, '_>;
    let _59: &str;
    let _60: &str;
    let _61: &str;
    let _62: &str;
    let _63: &str;
    let mut _64: clap::Arg<'_, '_>;
    let mut _65: clap::Arg<'_, '_>;
    let mut _66: clap::Arg<'_, '_>;
    let mut _67: clap::Arg<'_, '_>;
    let mut _68: clap::Arg<'_, '_>;
    let mut _69: clap::Arg<'_, '_>;
    let _70: &str;
    let _71: &str;
    let _72: &str;
    let _73: &str;
    let _74: &str;
    let mut _75: clap::Arg<'_, '_>;
    let mut _76: clap::Arg<'_, '_>;
    let mut _77: clap::Arg<'_, '_>;
    let mut _78: clap::Arg<'_, '_>;
    let mut _79: clap::Arg<'_, '_>;
    let _80: &str;
    let _81: &str;
    let _82: &str;
    let _83: &str;
    let mut _84: clap::Arg<'_, '_>;
    let mut _85: clap::Arg<'_, '_>;
    let mut _86: clap::Arg<'_, '_>;
    let mut _87: clap::Arg<'_, '_>;
    let _88: &str;
    let _89: &str;
    let _90: &str;
    let mut _91: clap::Arg<'_, '_>;
    let mut _92: clap::Arg<'_, '_>;
    let mut _93: clap::Arg<'_, '_>;
    let mut _94: clap::Arg<'_, '_>;
    let mut _95: clap::Arg<'_, '_>;
    let mut _96: clap::Arg<'_, '_>;
    let _97: &str;
    let _98: &str;
    let _99: &str;
    let mut _100: clap::Arg<'_, '_>;
    let mut _101: clap::Arg<'_, '_>;
    let mut _102: clap::Arg<'_, '_>;
    let mut _103: clap::Arg<'_, '_>;
    let mut _104: clap::Arg<'_, '_>;
    let mut _105: clap::Arg<'_, '_>;
    let _106: &str;
    let _107: &str;
    let mut _108: &[&str];
    let _109: &str;
    let _110: &str;
    let mut _111: clap::Arg<'_, '_>;
    let mut _112: clap::Arg<'_, '_>;
    let mut _113: clap::Arg<'_, '_>;
    let mut _114: clap::Arg<'_, '_>;
    let mut _115: clap::Arg<'_, '_>;
    let mut _116: clap::Arg<'_, '_>;
    let _117: &str;
    let _118: &str;
    let mut _119: &[&str];
    let _120: &str;
    let _121: &str;
    let mut _122: clap::Arg<'_, '_>;
    let mut _123: clap::Arg<'_, '_>;
    let mut _124: clap::Arg<'_, '_>;
    let mut _125: clap::Arg<'_, '_>;
    let mut _126: clap::Arg<'_, '_>;
    let mut _127: clap::Arg<'_, '_>;
    let mut _128: clap::Arg<'_, '_>;
    let _129: &str;
    let _130: &str;
    let _131: &str;
    let _132: &str;
    let _133: &str;
    let _134: &str;
    let mut _135: clap::Arg<'_, '_>;
    let mut _136: clap::Arg<'_, '_>;
    let mut _137: clap::Arg<'_, '_>;
    let mut _138: clap::Arg<'_, '_>;
    let mut _139: clap::Arg<'_, '_>;
    let _140: &str;
    let _141: &str;
    let mut _142: &[&str];
    let _143: &str;
    let mut _144: clap::Arg<'_, '_>;
    let mut _145: clap::Arg<'_, '_>;
    let mut _146: clap::Arg<'_, '_>;
    let mut _147: clap::Arg<'_, '_>;
    let mut _148: clap::Arg<'_, '_>;
    let mut _149: clap::Arg<'_, '_>;
    let mut _150: clap::Arg<'_, '_>;
    let _151: &str;
    let _152: &str;
    let _153: &str;
    let _154: &str;
    let mut _155: clap::Arg<'_, '_>;
    let mut _156: clap::Arg<'_, '_>;
    let mut _157: clap::Arg<'_, '_>;
    let mut _158: clap::Arg<'_, '_>;
    let mut _159: clap::Arg<'_, '_>;
    let mut _160: clap::Arg<'_, '_>;
    let _161: &str;
    let _162: &str;
    let _163: &str;
    let _164: &str;
    let _165: &str;
    let mut _166: clap::Arg<'_, '_>;
    let mut _167: clap::Arg<'_, '_>;
    let mut _168: clap::Arg<'_, '_>;
    let mut _169: clap::Arg<'_, '_>;
    let mut _170: clap::Arg<'_, '_>;
    let mut _171: clap::Arg<'_, '_>;
    let _172: &str;
    let _173: &str;
    let _174: &str;
    let _175: &str;
    let _176: &str;
    let mut _177: clap::Arg<'_, '_>;
    let mut _178: clap::Arg<'_, '_>;
    let mut _179: clap::Arg<'_, '_>;
    let mut _180: clap::Arg<'_, '_>;
    let mut _181: clap::Arg<'_, '_>;
    let mut _182: clap::Arg<'_, '_>;
    let mut _183: clap::Arg<'_, '_>;
    let _184: &str;
    let _185: &str;
    let _186: &str;
    let _187: &str;
    let _188: &str;
    let mut _189: clap::Arg<'_, '_>;
    let mut _190: clap::Arg<'_, '_>;
    let mut _191: clap::Arg<'_, '_>;
    let mut _192: clap::Arg<'_, '_>;
    let mut _193: clap::Arg<'_, '_>;
    let mut _194: clap::Arg<'_, '_>;
    let _195: &str;
    let _196: &str;
    let _197: &str;
    let _198: &str;
    let _199: &str;
    let mut _200: clap::Arg<'_, '_>;
    let mut _201: clap::Arg<'_, '_>;
    let mut _202: clap::Arg<'_, '_>;
    let mut _203: clap::Arg<'_, '_>;
    let mut _204: clap::Arg<'_, '_>;
    let mut _205: clap::Arg<'_, '_>;
    let mut _206: clap::Arg<'_, '_>;
    let _207: &str;
    let _208: &str;
    let _209: &str;
    let _210: &str;
    let _211: &str;
    let _212: &str;
    let mut _213: clap::Arg<'_, '_>;
    let mut _214: clap::Arg<'_, '_>;
    let mut _215: clap::Arg<'_, '_>;
    let mut _216: clap::Arg<'_, '_>;
    let mut _217: clap::Arg<'_, '_>;
    let mut _218: clap::Arg<'_, '_>;
    let mut _219: clap::Arg<'_, '_>;
    let _220: &str;
    let _221: &str;
    let _222: &str;
    let _223: &str;
    let _224: &str;
    let mut _225: clap::Arg<'_, '_>;
    let mut _226: clap::Arg<'_, '_>;
    let mut _227: clap::Arg<'_, '_>;
    let mut _228: clap::Arg<'_, '_>;
    let _229: &str;
    let _230: &str;
    let mut _231: clap::Arg<'_, '_>;
    let mut _232: clap::Arg<'_, '_>;
    let mut _233: clap::Arg<'_, '_>;
    let mut _234: clap::Arg<'_, '_>;
    let mut _235: clap::Arg<'_, '_>;
    let mut _236: clap::Arg<'_, '_>;
    let _237: &str;
    let _238: &str;
    let _239: &str;
    let _240: &str;
    let mut _241: clap::Arg<'_, '_>;
    let mut _242: clap::Arg<'_, '_>;
    let mut _243: clap::Arg<'_, '_>;
    let mut _244: clap::Arg<'_, '_>;
    let mut _245: clap::Arg<'_, '_>;
    let mut _246: clap::Arg<'_, '_>;
    let mut _247: clap::Arg<'_, '_>;
    let _248: &str;
    let _249: &str;
    let _250: &str;
    let mut _251: &[&str];
    let _252: &str;
    let mut _253: clap::Arg<'_, '_>;
    let mut _254: clap::Arg<'_, '_>;
    let mut _255: clap::Arg<'_, '_>;
    let mut _256: clap::Arg<'_, '_>;
    let mut _257: clap::Arg<'_, '_>;
    let _258: &str;
    let _259: &str;
    let mut _260: &[&str];
    let _261: &str;
    let mut _262: clap::Arg<'_, '_>;
    let mut _263: clap::Arg<'_, '_>;
    let mut _264: clap::Arg<'_, '_>;
    let mut _265: clap::Arg<'_, '_>;
    let mut _266: clap::Arg<'_, '_>;
    let mut _267: clap::Arg<'_, '_>;
    let mut _268: clap::Arg<'_, '_>;
    let mut _269: clap::Arg<'_, '_>;
    let mut _270: clap::Arg<'_, '_>;
    let mut _271: clap::Arg<'_, '_>;
    let mut _272: clap::Arg<'_, '_>;
    let _273: &str;
    let _274: &str;
    let _275: &str;
    let mut _276: &[&str];
    let _277: &str;
    let _278: &str;
    let mut _279: clap::Arg<'_, '_>;
    let mut _280: clap::Arg<'_, '_>;
    let mut _281: clap::Arg<'_, '_>;
    let mut _282: clap::Arg<'_, '_>;
    let mut _283: clap::Arg<'_, '_>;
    let mut _284: clap::Arg<'_, '_>;
    let mut _285: clap::Arg<'_, '_>;
    let mut _286: clap::Arg<'_, '_>;
    let mut _287: clap::Arg<'_, '_>;
    let _288: &str;
    let _289: &str;
    let _290: &str;
    let _291: &str;
    let _292: &str;
    let mut _293: clap::Arg<'_, '_>;
    let mut _294: clap::Arg<'_, '_>;
    let mut _295: clap::Arg<'_, '_>;
    let mut _296: clap::Arg<'_, '_>;
    let mut _297: clap::Arg<'_, '_>;
    let mut _298: clap::Arg<'_, '_>;
    let mut _299: clap::Arg<'_, '_>;
    let mut _300: clap::Arg<'_, '_>;
    let mut _301: clap::Arg<'_, '_>;
    let mut _302: clap::Arg<'_, '_>;
    let _303: &str;
    let _304: &str;
    let _305: &str;
    let _306: &str;
    let _307: &str;
    let _308: &str;
    let _309: &str;
    let mut _310: clap::Arg<'_, '_>;
    let mut _311: clap::Arg<'_, '_>;
    let mut _312: clap::Arg<'_, '_>;
    let mut _313: clap::Arg<'_, '_>;
    let mut _314: clap::Arg<'_, '_>;
    let mut _315: clap::Arg<'_, '_>;
    let mut _316: clap::Arg<'_, '_>;
    let mut _317: clap::Arg<'_, '_>;
    let mut _318: clap::Arg<'_, '_>;
    let mut _319: clap::Arg<'_, '_>;
    let _320: &str;
    let _321: &str;
    let _322: &str;
    let _323: &str;
    let mut _324: &[&str];
    let _325: &str;
    let _326: &str;
    let mut _327: clap::Arg<'_, '_>;
    let mut _328: clap::Arg<'_, '_>;
    let mut _329: clap::Arg<'_, '_>;
    let mut _330: clap::Arg<'_, '_>;
    let mut _331: clap::Arg<'_, '_>;
    let mut _332: clap::Arg<'_, '_>;
    let mut _333: clap::Arg<'_, '_>;
    let mut _334: clap::Arg<'_, '_>;
    let mut _335: clap::Arg<'_, '_>;
    let _336: &str;
    let _337: &str;
    let _338: &str;
    let _339: &str;
    let _340: &str;
    let mut _341: clap::Arg<'_, '_>;
    let mut _342: clap::Arg<'_, '_>;
    let mut _343: clap::Arg<'_, '_>;
    let mut _344: clap::Arg<'_, '_>;
    let mut _345: clap::Arg<'_, '_>;
    let mut _346: clap::Arg<'_, '_>;
    let mut _347: clap::Arg<'_, '_>;
    let mut _348: clap::Arg<'_, '_>;
    let _349: &str;
    let _350: &str;
    let _351: &str;
    let _352: &str;
    let mut _353: clap::Arg<'_, '_>;
    let mut _354: clap::Arg<'_, '_>;
    let mut _355: clap::Arg<'_, '_>;
    let mut _356: clap::Arg<'_, '_>;
    let mut _357: clap::Arg<'_, '_>;
    let mut _358: clap::Arg<'_, '_>;
    let mut _359: clap::Arg<'_, '_>;
    let mut _360: clap::Arg<'_, '_>;
    let mut _361: clap::Arg<'_, '_>;
    let _362: &str;
    let _363: &str;
    let _364: &str;
    let mut _365: &[&str];
    let _366: &str;
    let _367: &str;
    let mut _368: clap::Arg<'_, '_>;
    let mut _369: clap::Arg<'_, '_>;
    let mut _370: clap::Arg<'_, '_>;
    let mut _371: clap::Arg<'_, '_>;
    let mut _372: clap::Arg<'_, '_>;
    let mut _373: clap::Arg<'_, '_>;
    let mut _374: clap::Arg<'_, '_>;
    let _375: &str;
    let _376: &str;
    let _377: &str;
    let _378: &str;
    let mut _379: clap::Arg<'_, '_>;
    let mut _380: clap::Arg<'_, '_>;
    let mut _381: clap::Arg<'_, '_>;
    let mut _382: clap::Arg<'_, '_>;
    let mut _383: clap::Arg<'_, '_>;
    let mut _384: clap::Arg<'_, '_>;
    let mut _385: clap::Arg<'_, '_>;
    let mut _386: clap::Arg<'_, '_>;
    let mut _387: clap::Arg<'_, '_>;
    let _388: &str;
    let _389: &str;
    let _390: &str;
    let _391: &str;
    let mut _392: clap::Arg<'_, '_>;
    let mut _393: clap::Arg<'_, '_>;
    let mut _394: clap::Arg<'_, '_>;
    let mut _395: clap::Arg<'_, '_>;
    let mut _396: clap::Arg<'_, '_>;
    let _397: &str;
    let _398: &str;
    let _399: &str;
    let mut _400: clap::Arg<'_, '_>;
    let mut _401: clap::Arg<'_, '_>;
    let mut _402: clap::Arg<'_, '_>;
    let mut _403: clap::Arg<'_, '_>;
    let mut _404: clap::Arg<'_, '_>;
    let mut _405: clap::Arg<'_, '_>;
    let mut _406: clap::Arg<'_, '_>;
    let mut _407: clap::Arg<'_, '_>;
    let mut _408: clap::Arg<'_, '_>;
    let _409: &str;
    let _410: &str;
    let _411: &str;
    let _412: &str;
    let _413: &str;
    let mut _414: clap::Arg<'_, '_>;
    let mut _415: clap::Arg<'_, '_>;
    let mut _416: clap::Arg<'_, '_>;
    let mut _417: clap::Arg<'_, '_>;
    let mut _418: clap::Arg<'_, '_>;
    let mut _419: clap::Arg<'_, '_>;
    let mut _420: clap::Arg<'_, '_>;
    let mut _421: clap::Arg<'_, '_>;
    let mut _422: clap::Arg<'_, '_>;
    let _423: &str;
    let _424: &str;
    let _425: &str;
    let _426: &str;
    let _427: &str;
    let mut _428: clap::Arg<'_, '_>;
    let mut _429: clap::Arg<'_, '_>;
    let mut _430: clap::Arg<'_, '_>;
    let mut _431: clap::Arg<'_, '_>;
    let mut _432: clap::Arg<'_, '_>;
    let mut _433: clap::Arg<'_, '_>;
    let mut _434: clap::Arg<'_, '_>;
    let _435: &str;
    let _436: &str;
    let _437: &str;
    let mut _438: &[&str];
    let _439: &str;
    let mut _440: clap::Arg<'_, '_>;
    let mut _441: clap::Arg<'_, '_>;
    let mut _442: clap::Arg<'_, '_>;
    let mut _443: clap::Arg<'_, '_>;
    let mut _444: clap::Arg<'_, '_>;
    let mut _445: clap::Arg<'_, '_>;
    let _446: &str;
    let _447: &str;
    let mut _448: &[&str];
    let _449: &str;
    let mut _450: clap::Arg<'_, '_>;
    let mut _451: clap::Arg<'_, '_>;
    let mut _452: clap::Arg<'_, '_>;
    let mut _453: clap::Arg<'_, '_>;
    let mut _454: clap::Arg<'_, '_>;
    let _455: &str;
    let _456: &str;
    let _457: &str;
    let _458: &str;
    let mut _459: clap::Arg<'_, '_>;
    let mut _460: clap::Arg<'_, '_>;
    let mut _461: clap::Arg<'_, '_>;
    let mut _462: clap::Arg<'_, '_>;
    let mut _463: clap::Arg<'_, '_>;
    let mut _464: clap::Arg<'_, '_>;
    let mut _465: clap::Arg<'_, '_>;
    let _466: &str;
    let _467: &str;
    let _468: &str;
    let _469: &str;
    let mut _470: clap::Arg<'_, '_>;
    let mut _471: clap::Arg<'_, '_>;
    let mut _472: clap::Arg<'_, '_>;
    let _473: &str;
    let _474: &str;
    let _475: &str;
    let mut _476: clap::Arg<'_, '_>;
    let mut _477: clap::Arg<'_, '_>;
    let mut _478: clap::Arg<'_, '_>;
    let mut _479: clap::Arg<'_, '_>;
    let mut _480: clap::Arg<'_, '_>;
    let mut _481: clap::Arg<'_, '_>;
    let _482: &str;
    let _483: &str;
    let _484: &str;
    let _485: &str;
    let mut _486: clap::Arg<'_, '_>;
    let mut _487: clap::Arg<'_, '_>;
    let mut _488: clap::Arg<'_, '_>;
    let mut _489: clap::Arg<'_, '_>;
    let _490: &str;
    let _491: &str;
    let _492: &str;
    let mut _493: clap::Arg<'_, '_>;
    let mut _494: clap::Arg<'_, '_>;
    let mut _495: clap::Arg<'_, '_>;
    let mut _496: clap::Arg<'_, '_>;
    let mut _497: clap::Arg<'_, '_>;
    let mut _498: clap::Arg<'_, '_>;
    let mut _499: clap::Arg<'_, '_>;
    let mut _500: clap::Arg<'_, '_>;
    let _501: &str;
    let _502: &str;
    let _503: &str;
    let _504: &str;
    let mut _505: bool;
    let mut _506: clap::App<'_, '_>;
    let mut _507: clap::App<'_, '_>;
    let mut _508: clap::Arg<'_, '_>;
    let mut _509: clap::Arg<'_, '_>;
    let mut _510: clap::Arg<'_, '_>;
    let mut _511: clap::Arg<'_, '_>;
    let mut _512: clap::Arg<'_, '_>;
    let mut _513: clap::Arg<'_, '_>;
    let mut _514: clap::Arg<'_, '_>;
    let _515: &str;
    let _516: &str;
    let _517: &str;
    let _518: &str;
    let _519: &str;
    let mut _520: bool;
    let mut _521: clap::App<'_, '_>;
    let mut _522: clap::App<'_, '_>;
    let mut _523: clap::Arg<'_, '_>;
    let mut _524: clap::Arg<'_, '_>;
    let mut _525: clap::Arg<'_, '_>;
    let mut _526: clap::Arg<'_, '_>;
    let mut _527: clap::Arg<'_, '_>;
    let _528: &str;
    let _529: &str;
    let mut _530: &[&str];
    let _531: &str;
    let mut _543: bool;
    let mut _544: bool;
    let mut _545: bool;
    let mut _546: bool;
    let mut _547: bool;
    let mut _548: bool;
    let mut _549: bool;
    let mut _550: bool;
    let mut _551: bool;
    let mut _552: bool;
    let mut _553: bool;
    let mut _554: bool;
    let mut _555: bool;
    let mut _556: bool;
    let mut _557: bool;
    let mut _558: bool;
    let mut _559: bool;
    let mut _560: bool;
    let mut _561: bool;
    let mut _562: bool;
    let mut _563: bool;
    let mut _564: bool;
    let mut _565: bool;
    let mut _566: bool;
    let mut _567: bool;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: bool;
    let mut _571: bool;
    let mut _572: bool;
    let mut _573: bool;
    let mut _574: bool;
    let mut _575: bool;
    let mut _576: bool;
    let mut _577: bool;
    let mut _578: bool;
    let mut _579: bool;
    let mut _580: bool;
    let mut _581: bool;
    let mut _582: bool;
    let mut _583: bool;
    let mut _584: bool;
    scope 1 {
        debug clap_color_setting => _1;
        let mut _5: clap::App<'_, '_>;
        let mut _533: &[&str; 3];
        let mut _534: &[&str; 3];
        let mut _535: &[&str; 3];
        let mut _536: &[&str; 2];
        let mut _537: &[&str; 14];
        let mut _538: &[&str; 2];
        let mut _539: &[&str; 2];
        let mut _540: &[&str; 2];
        let mut _541: &[&str; 2];
        let mut _542: &[&str; 2];
        scope 2 {
            debug app => _5;
            let mut _532: &[&str; 2];
        }
    }

    bb0: {
        _545 = const false;
        _546 = const false;
        _547 = const false;
        _548 = const false;
        _549 = const false;
        _550 = const false;
        _551 = const false;
        _552 = const false;
        _553 = const false;
        _554 = const false;
        _555 = const false;
        _556 = const false;
        _557 = const false;
        _558 = const false;
        _559 = const false;
        _560 = const false;
        _561 = const false;
        _562 = const false;
        _563 = const false;
        _564 = const false;
        _565 = const false;
        _566 = const false;
        _567 = const false;
        _568 = const false;
        _569 = const false;
        _570 = const false;
        _571 = const false;
        _572 = const false;
        _573 = const false;
        _574 = const false;
        _575 = const false;
        _576 = const false;
        _577 = const false;
        _578 = const false;
        _579 = const false;
        _580 = const false;
        _581 = const false;
        _582 = const false;
        _583 = const false;
        _584 = const false;
        _544 = const false;
        _543 = const false;
        _4 = var_os::<&str>(const "NO_COLOR") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _2 = Option::<OsString>::is_none(move _3) -> [return: bb2, unwind: bb342];
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _1 = ColoredHelp;
        goto -> bb7;
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb6: {
        _1 = ColorNever;
        goto -> bb7;
    }

    bb7: {
        _50 = App::<'_, '_>::new::<&str>(const "fd") -> [return: bb8, unwind continue];
    }

    bb8: {
        _49 = App::<'_, '_>::version::<&str>(move _50, const "8.2.1") -> [return: bb9, unwind continue];
    }

    bb9: {
        _48 = App::<'_, '_>::usage::<&str>(move _49, const "fd [FLAGS/OPTIONS] [<pattern>] [<path>...]") -> [return: bb10, unwind continue];
    }

    bb10: {
        _51 = _1;
        _47 = App::<'_, '_>::setting(move _48, move _51) -> [return: bb11, unwind continue];
    }

    bb11: {
        _52 = DeriveDisplayOrder;
        _46 = App::<'_, '_>::setting(move _47, move _52) -> [return: bb12, unwind continue];
    }

    bb12: {
        _45 = App::<'_, '_>::after_help::<&str>(move _46, const "Note: `fd -h` prints a short and concise overview while `fd --help` gives all details.") -> [return: bb13, unwind continue];
    }

    bb13: {
        _584 = const true;
        _59 = const "hidden";
        _58 = Arg::<'_, '_>::with_name(_59) -> [return: bb14, unwind: bb427];
    }

    bb14: {
        _60 = const "hidden";
        _57 = Arg::<'_, '_>::long(move _58, _60) -> [return: bb15, unwind: bb427];
    }

    bb15: {
        _56 = Arg::<'_, '_>::short::<&str>(move _57, const "H") -> [return: bb16, unwind: bb427];
    }

    bb16: {
        _61 = const "hidden";
        _55 = Arg::<'_, '_>::overrides_with(move _56, _61) -> [return: bb17, unwind: bb427];
    }

    bb17: {
        _62 = const "Search hidden files and directories";
        _54 = Arg::<'_, '_>::help(move _55, _62) -> [return: bb18, unwind: bb427];
    }

    bb18: {
        _63 = const "Include hidden directories and files in the search results (default: hidden files and directories are skipped). Files and directories are considered to be hidden if their name starts with a `.` sign (dot).";
        _53 = Arg::<'_, '_>::long_help(move _54, _63) -> [return: bb19, unwind: bb427];
    }

    bb19: {
        _584 = const false;
        _44 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _45, move _53) -> [return: bb20, unwind: bb427];
    }

    bb20: {
        _583 = const true;
        _584 = const false;
        _70 = const "no-ignore";
        _69 = Arg::<'_, '_>::with_name(_70) -> [return: bb21, unwind: bb425];
    }

    bb21: {
        _71 = const "no-ignore";
        _68 = Arg::<'_, '_>::long(move _69, _71) -> [return: bb22, unwind: bb425];
    }

    bb22: {
        _67 = Arg::<'_, '_>::short::<&str>(move _68, const "I") -> [return: bb23, unwind: bb425];
    }

    bb23: {
        _72 = const "no-ignore";
        _66 = Arg::<'_, '_>::overrides_with(move _67, _72) -> [return: bb24, unwind: bb425];
    }

    bb24: {
        _73 = const "Do not respect .(git|fd)ignore files";
        _65 = Arg::<'_, '_>::help(move _66, _73) -> [return: bb25, unwind: bb425];
    }

    bb25: {
        _74 = const "Show search results from files and directories that would otherwise be ignored by '.gitignore', '.ignore', '.fdignore', or the global ignore file.";
        _64 = Arg::<'_, '_>::long_help(move _65, _74) -> [return: bb26, unwind: bb425];
    }

    bb26: {
        _583 = const false;
        _43 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _44, move _64) -> [return: bb27, unwind: bb425];
    }

    bb27: {
        _582 = const true;
        _583 = const false;
        _80 = const "no-ignore-vcs";
        _79 = Arg::<'_, '_>::with_name(_80) -> [return: bb28, unwind: bb423];
    }

    bb28: {
        _81 = const "no-ignore-vcs";
        _78 = Arg::<'_, '_>::long(move _79, _81) -> [return: bb29, unwind: bb423];
    }

    bb29: {
        _82 = const "no-ignore-vcs";
        _77 = Arg::<'_, '_>::overrides_with(move _78, _82) -> [return: bb30, unwind: bb423];
    }

    bb30: {
        _76 = Arg::<'_, '_>::hidden_short_help(move _77, const true) -> [return: bb31, unwind: bb423];
    }

    bb31: {
        _83 = const "Show search results from files and directories that would otherwise be ignored by '.gitignore' files.";
        _75 = Arg::<'_, '_>::long_help(move _76, _83) -> [return: bb32, unwind: bb423];
    }

    bb32: {
        _582 = const false;
        _42 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _43, move _75) -> [return: bb33, unwind: bb423];
    }

    bb33: {
        _581 = const true;
        _582 = const false;
        _88 = const "no-global-ignore-file";
        _87 = Arg::<'_, '_>::with_name(_88) -> [return: bb34, unwind: bb421];
    }

    bb34: {
        _89 = const "no-global-ignore-file";
        _86 = Arg::<'_, '_>::long(move _87, _89) -> [return: bb35, unwind: bb421];
    }

    bb35: {
        _85 = Arg::<'_, '_>::hidden(move _86, const true) -> [return: bb36, unwind: bb421];
    }

    bb36: {
        _90 = const "Do not respect the global ignore file.";
        _84 = Arg::<'_, '_>::long_help(move _85, _90) -> [return: bb37, unwind: bb421];
    }

    bb37: {
        _581 = const false;
        _41 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _42, move _84) -> [return: bb38, unwind: bb421];
    }

    bb38: {
        _580 = const true;
        _581 = const false;
        _97 = const "rg-alias-hidden-ignore";
        _96 = Arg::<'_, '_>::with_name(_97) -> [return: bb39, unwind: bb419];
    }

    bb39: {
        _95 = Arg::<'_, '_>::short::<&str>(move _96, const "u") -> [return: bb40, unwind: bb419];
    }

    bb40: {
        _98 = const "unrestricted";
        _94 = Arg::<'_, '_>::long(move _95, _98) -> [return: bb41, unwind: bb419];
    }

    bb41: {
        _93 = Arg::<'_, '_>::multiple(move _94, const true) -> [return: bb42, unwind: bb419];
    }

    bb42: {
        _92 = Arg::<'_, '_>::hidden_short_help(move _93, const true) -> [return: bb43, unwind: bb419];
    }

    bb43: {
        _99 = const "Alias for '--no-ignore'. Can be repeated. '-uu' is an alias for '--no-ignore --hidden'.";
        _91 = Arg::<'_, '_>::long_help(move _92, _99) -> [return: bb44, unwind: bb419];
    }

    bb44: {
        _580 = const false;
        _40 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _41, move _91) -> [return: bb45, unwind: bb419];
    }

    bb45: {
        _579 = const true;
        _580 = const false;
        _106 = const "case-sensitive";
        _105 = Arg::<'_, '_>::with_name(_106) -> [return: bb46, unwind: bb417];
    }

    bb46: {
        _107 = const "case-sensitive";
        _104 = Arg::<'_, '_>::long(move _105, _107) -> [return: bb47, unwind: bb417];
    }

    bb47: {
        _103 = Arg::<'_, '_>::short::<&str>(move _104, const "s") -> [return: bb48, unwind: bb417];
    }

    bb48: {
        _542 = const _;
        _108 = _542 as &[&str] (PointerCoercion(Unsize));
        _102 = Arg::<'_, '_>::overrides_with_all(move _103, move _108) -> [return: bb49, unwind: bb417];
    }

    bb49: {
        _109 = const "Case-sensitive search (default: smart case)";
        _101 = Arg::<'_, '_>::help(move _102, _109) -> [return: bb50, unwind: bb417];
    }

    bb50: {
        _110 = const "Perform a case-sensitive search. By default, fd uses case-insensitive searches, unless the pattern contains an uppercase character (smart case).";
        _100 = Arg::<'_, '_>::long_help(move _101, _110) -> [return: bb51, unwind: bb417];
    }

    bb51: {
        _579 = const false;
        _39 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _40, move _100) -> [return: bb52, unwind: bb417];
    }

    bb52: {
        _578 = const true;
        _579 = const false;
        _117 = const "ignore-case";
        _116 = Arg::<'_, '_>::with_name(_117) -> [return: bb53, unwind: bb415];
    }

    bb53: {
        _118 = const "ignore-case";
        _115 = Arg::<'_, '_>::long(move _116, _118) -> [return: bb54, unwind: bb415];
    }

    bb54: {
        _114 = Arg::<'_, '_>::short::<&str>(move _115, const "i") -> [return: bb55, unwind: bb415];
    }

    bb55: {
        _541 = const _;
        _119 = _541 as &[&str] (PointerCoercion(Unsize));
        _113 = Arg::<'_, '_>::overrides_with_all(move _114, move _119) -> [return: bb56, unwind: bb415];
    }

    bb56: {
        _120 = const "Case-insensitive search (default: smart case)";
        _112 = Arg::<'_, '_>::help(move _113, _120) -> [return: bb57, unwind: bb415];
    }

    bb57: {
        _121 = const "Perform a case-insensitive search. By default, fd uses case-insensitive searches, unless the pattern contains an uppercase character (smart case).";
        _111 = Arg::<'_, '_>::long_help(move _112, _121) -> [return: bb58, unwind: bb415];
    }

    bb58: {
        _578 = const false;
        _38 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _39, move _111) -> [return: bb59, unwind: bb415];
    }

    bb59: {
        _577 = const true;
        _578 = const false;
        _129 = const "glob";
        _128 = Arg::<'_, '_>::with_name(_129) -> [return: bb60, unwind: bb413];
    }

    bb60: {
        _130 = const "glob";
        _127 = Arg::<'_, '_>::long(move _128, _130) -> [return: bb61, unwind: bb413];
    }

    bb61: {
        _126 = Arg::<'_, '_>::short::<&str>(move _127, const "g") -> [return: bb62, unwind: bb413];
    }

    bb62: {
        _131 = const "fixed-strings";
        _125 = Arg::<'_, '_>::conflicts_with(move _126, _131) -> [return: bb63, unwind: bb413];
    }

    bb63: {
        _132 = const "glob";
        _124 = Arg::<'_, '_>::overrides_with(move _125, _132) -> [return: bb64, unwind: bb413];
    }

    bb64: {
        _133 = const "Glob-based search (default: regular expression)";
        _123 = Arg::<'_, '_>::help(move _124, _133) -> [return: bb65, unwind: bb413];
    }

    bb65: {
        _134 = const "Perform a glob-based search instead of a regular expression search.";
        _122 = Arg::<'_, '_>::long_help(move _123, _134) -> [return: bb66, unwind: bb413];
    }

    bb66: {
        _577 = const false;
        _37 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _38, move _122) -> [return: bb67, unwind: bb413];
    }

    bb67: {
        _576 = const true;
        _577 = const false;
        _140 = const "regex";
        _139 = Arg::<'_, '_>::with_name(_140) -> [return: bb68, unwind: bb411];
    }

    bb68: {
        _141 = const "regex";
        _138 = Arg::<'_, '_>::long(move _139, _141) -> [return: bb69, unwind: bb411];
    }

    bb69: {
        _540 = const _;
        _142 = _540 as &[&str] (PointerCoercion(Unsize));
        _137 = Arg::<'_, '_>::overrides_with_all(move _138, move _142) -> [return: bb70, unwind: bb411];
    }

    bb70: {
        _136 = Arg::<'_, '_>::hidden_short_help(move _137, const true) -> [return: bb71, unwind: bb411];
    }

    bb71: {
        _143 = const "Perform a regular-expression based search (default). This can be used to override --glob.";
        _135 = Arg::<'_, '_>::long_help(move _136, _143) -> [return: bb72, unwind: bb411];
    }

    bb72: {
        _576 = const false;
        _36 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _37, move _135) -> [return: bb73, unwind: bb411];
    }

    bb73: {
        _575 = const true;
        _576 = const false;
        _151 = const "fixed-strings";
        _150 = Arg::<'_, '_>::with_name(_151) -> [return: bb74, unwind: bb409];
    }

    bb74: {
        _152 = const "fixed-strings";
        _149 = Arg::<'_, '_>::long(move _150, _152) -> [return: bb75, unwind: bb409];
    }

    bb75: {
        _148 = Arg::<'_, '_>::short::<&str>(move _149, const "F") -> [return: bb76, unwind: bb409];
    }

    bb76: {
        _147 = Arg::<'_, '_>::alias::<&str>(move _148, const "literal") -> [return: bb77, unwind: bb409];
    }

    bb77: {
        _153 = const "fixed-strings";
        _146 = Arg::<'_, '_>::overrides_with(move _147, _153) -> [return: bb78, unwind: bb409];
    }

    bb78: {
        _145 = Arg::<'_, '_>::hidden_short_help(move _146, const true) -> [return: bb79, unwind: bb409];
    }

    bb79: {
        _154 = const "Treat the pattern as a literal string instead of a regular expression. Note that this also performs substring comparison. If you want to match on an exact filename, consider using '--glob'.";
        _144 = Arg::<'_, '_>::long_help(move _145, _154) -> [return: bb80, unwind: bb409];
    }

    bb80: {
        _575 = const false;
        _35 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _36, move _144) -> [return: bb81, unwind: bb409];
    }

    bb81: {
        _574 = const true;
        _575 = const false;
        _161 = const "absolute-path";
        _160 = Arg::<'_, '_>::with_name(_161) -> [return: bb82, unwind: bb407];
    }

    bb82: {
        _162 = const "absolute-path";
        _159 = Arg::<'_, '_>::long(move _160, _162) -> [return: bb83, unwind: bb407];
    }

    bb83: {
        _158 = Arg::<'_, '_>::short::<&str>(move _159, const "a") -> [return: bb84, unwind: bb407];
    }

    bb84: {
        _163 = const "absolute-path";
        _157 = Arg::<'_, '_>::overrides_with(move _158, _163) -> [return: bb85, unwind: bb407];
    }

    bb85: {
        _164 = const "Show absolute instead of relative paths";
        _156 = Arg::<'_, '_>::help(move _157, _164) -> [return: bb86, unwind: bb407];
    }

    bb86: {
        _165 = const "Shows the full path starting from the root as opposed to relative paths.";
        _155 = Arg::<'_, '_>::long_help(move _156, _165) -> [return: bb87, unwind: bb407];
    }

    bb87: {
        _574 = const false;
        _34 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _35, move _155) -> [return: bb88, unwind: bb407];
    }

    bb88: {
        _573 = const true;
        _574 = const false;
        _172 = const "list-details";
        _171 = Arg::<'_, '_>::with_name(_172) -> [return: bb89, unwind: bb405];
    }

    bb89: {
        _173 = const "list-details";
        _170 = Arg::<'_, '_>::long(move _171, _173) -> [return: bb90, unwind: bb405];
    }

    bb90: {
        _169 = Arg::<'_, '_>::short::<&str>(move _170, const "l") -> [return: bb91, unwind: bb405];
    }

    bb91: {
        _174 = const "absolute-path";
        _168 = Arg::<'_, '_>::conflicts_with(move _169, _174) -> [return: bb92, unwind: bb405];
    }

    bb92: {
        _175 = const "Use a long listing format with file metadata";
        _167 = Arg::<'_, '_>::help(move _168, _175) -> [return: bb93, unwind: bb405];
    }

    bb93: {
        _176 = const "Use a detailed listing format like 'ls -l'. This is basically an alias for '--exec-batch ls -l' with some additional 'ls' options. This can be used to see more metadata, to show symlink targets and to achieve a deterministic sort order.";
        _166 = Arg::<'_, '_>::long_help(move _167, _176) -> [return: bb94, unwind: bb405];
    }

    bb94: {
        _573 = const false;
        _33 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _34, move _166) -> [return: bb95, unwind: bb405];
    }

    bb95: {
        _572 = const true;
        _573 = const false;
        _184 = const "follow";
        _183 = Arg::<'_, '_>::with_name(_184) -> [return: bb96, unwind: bb403];
    }

    bb96: {
        _185 = const "follow";
        _182 = Arg::<'_, '_>::long(move _183, _185) -> [return: bb97, unwind: bb403];
    }

    bb97: {
        _181 = Arg::<'_, '_>::short::<&str>(move _182, const "L") -> [return: bb98, unwind: bb403];
    }

    bb98: {
        _180 = Arg::<'_, '_>::alias::<&str>(move _181, const "dereference") -> [return: bb99, unwind: bb403];
    }

    bb99: {
        _186 = const "follow";
        _179 = Arg::<'_, '_>::overrides_with(move _180, _186) -> [return: bb100, unwind: bb403];
    }

    bb100: {
        _187 = const "Follow symbolic links";
        _178 = Arg::<'_, '_>::help(move _179, _187) -> [return: bb101, unwind: bb403];
    }

    bb101: {
        _188 = const "By default, fd does not descend into symlinked directories. Using this flag, symbolic links are also traversed.";
        _177 = Arg::<'_, '_>::long_help(move _178, _188) -> [return: bb102, unwind: bb403];
    }

    bb102: {
        _572 = const false;
        _32 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _33, move _177) -> [return: bb103, unwind: bb403];
    }

    bb103: {
        _571 = const true;
        _572 = const false;
        _195 = const "full-path";
        _194 = Arg::<'_, '_>::with_name(_195) -> [return: bb104, unwind: bb401];
    }

    bb104: {
        _196 = const "full-path";
        _193 = Arg::<'_, '_>::long(move _194, _196) -> [return: bb105, unwind: bb401];
    }

    bb105: {
        _192 = Arg::<'_, '_>::short::<&str>(move _193, const "p") -> [return: bb106, unwind: bb401];
    }

    bb106: {
        _197 = const "full-path";
        _191 = Arg::<'_, '_>::overrides_with(move _192, _197) -> [return: bb107, unwind: bb401];
    }

    bb107: {
        _198 = const "Search full path (default: file-/dirname only)";
        _190 = Arg::<'_, '_>::help(move _191, _198) -> [return: bb108, unwind: bb401];
    }

    bb108: {
        _199 = const "By default, the search pattern is only matched against the filename (or directory name). Using this flag, the pattern is matched against the full path.";
        _189 = Arg::<'_, '_>::long_help(move _190, _199) -> [return: bb109, unwind: bb401];
    }

    bb109: {
        _571 = const false;
        _31 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _32, move _189) -> [return: bb110, unwind: bb401];
    }

    bb110: {
        _570 = const true;
        _571 = const false;
        _207 = const "null_separator";
        _206 = Arg::<'_, '_>::with_name(_207) -> [return: bb111, unwind: bb399];
    }

    bb111: {
        _208 = const "print0";
        _205 = Arg::<'_, '_>::long(move _206, _208) -> [return: bb112, unwind: bb399];
    }

    bb112: {
        _204 = Arg::<'_, '_>::short::<&str>(move _205, const "0") -> [return: bb113, unwind: bb399];
    }

    bb113: {
        _209 = const "print0";
        _203 = Arg::<'_, '_>::overrides_with(move _204, _209) -> [return: bb114, unwind: bb399];
    }

    bb114: {
        _210 = const "list-details";
        _202 = Arg::<'_, '_>::conflicts_with(move _203, _210) -> [return: bb115, unwind: bb399];
    }

    bb115: {
        _211 = const "Separate results by the null character";
        _201 = Arg::<'_, '_>::help(move _202, _211) -> [return: bb116, unwind: bb399];
    }

    bb116: {
        _212 = const "Separate search results by the null character (instead of newlines). Useful for piping results to 'xargs'.";
        _200 = Arg::<'_, '_>::long_help(move _201, _212) -> [return: bb117, unwind: bb399];
    }

    bb117: {
        _570 = const false;
        _30 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _31, move _200) -> [return: bb118, unwind: bb399];
    }

    bb118: {
        _569 = const true;
        _570 = const false;
        _220 = const "max-depth";
        _219 = Arg::<'_, '_>::with_name(_220) -> [return: bb119, unwind: bb397];
    }

    bb119: {
        _221 = const "max-depth";
        _218 = Arg::<'_, '_>::long(move _219, _221) -> [return: bb120, unwind: bb397];
    }

    bb120: {
        _217 = Arg::<'_, '_>::short::<&str>(move _218, const "d") -> [return: bb121, unwind: bb397];
    }

    bb121: {
        _216 = Arg::<'_, '_>::takes_value(move _217, const true) -> [return: bb122, unwind: bb397];
    }

    bb122: {
        _222 = const "depth";
        _215 = Arg::<'_, '_>::value_name(move _216, _222) -> [return: bb123, unwind: bb397];
    }

    bb123: {
        _223 = const "Set maximum search depth (default: none)";
        _214 = Arg::<'_, '_>::help(move _215, _223) -> [return: bb124, unwind: bb397];
    }

    bb124: {
        _224 = const "Limit the directory traversal to a given depth. By default, there is no limit on the search depth.";
        _213 = Arg::<'_, '_>::long_help(move _214, _224) -> [return: bb125, unwind: bb397];
    }

    bb125: {
        _569 = const false;
        _29 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _30, move _213) -> [return: bb126, unwind: bb397];
    }

    bb126: {
        _568 = const true;
        _569 = const false;
        _229 = const "rg-depth";
        _228 = Arg::<'_, '_>::with_name(_229) -> [return: bb127, unwind: bb395];
    }

    bb127: {
        _230 = const "maxdepth";
        _227 = Arg::<'_, '_>::long(move _228, _230) -> [return: bb128, unwind: bb395];
    }

    bb128: {
        _226 = Arg::<'_, '_>::hidden(move _227, const true) -> [return: bb129, unwind: bb395];
    }

    bb129: {
        _225 = Arg::<'_, '_>::takes_value(move _226, const true) -> [return: bb130, unwind: bb395];
    }

    bb130: {
        _568 = const false;
        _28 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _29, move _225) -> [return: bb131, unwind: bb395];
    }

    bb131: {
        _567 = const true;
        _568 = const false;
        _237 = const "min-depth";
        _236 = Arg::<'_, '_>::with_name(_237) -> [return: bb132, unwind: bb393];
    }

    bb132: {
        _238 = const "min-depth";
        _235 = Arg::<'_, '_>::long(move _236, _238) -> [return: bb133, unwind: bb393];
    }

    bb133: {
        _234 = Arg::<'_, '_>::takes_value(move _235, const true) -> [return: bb134, unwind: bb393];
    }

    bb134: {
        _239 = const "depth";
        _233 = Arg::<'_, '_>::value_name(move _234, _239) -> [return: bb135, unwind: bb393];
    }

    bb135: {
        _232 = Arg::<'_, '_>::hidden_short_help(move _233, const true) -> [return: bb136, unwind: bb393];
    }

    bb136: {
        _240 = const "Only show search results starting at the given depth. See also: '--max-depth' and '--exact-depth'";
        _231 = Arg::<'_, '_>::long_help(move _232, _240) -> [return: bb137, unwind: bb393];
    }

    bb137: {
        _567 = const false;
        _27 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _28, move _231) -> [return: bb138, unwind: bb393];
    }

    bb138: {
        _566 = const true;
        _567 = const false;
        _248 = const "exact-depth";
        _247 = Arg::<'_, '_>::with_name(_248) -> [return: bb139, unwind: bb391];
    }

    bb139: {
        _249 = const "exact-depth";
        _246 = Arg::<'_, '_>::long(move _247, _249) -> [return: bb140, unwind: bb391];
    }

    bb140: {
        _245 = Arg::<'_, '_>::takes_value(move _246, const true) -> [return: bb141, unwind: bb391];
    }

    bb141: {
        _250 = const "depth";
        _244 = Arg::<'_, '_>::value_name(move _245, _250) -> [return: bb142, unwind: bb391];
    }

    bb142: {
        _243 = Arg::<'_, '_>::hidden_short_help(move _244, const true) -> [return: bb143, unwind: bb391];
    }

    bb143: {
        _539 = const _;
        _251 = _539 as &[&str] (PointerCoercion(Unsize));
        _242 = Arg::<'_, '_>::conflicts_with_all(move _243, move _251) -> [return: bb144, unwind: bb391];
    }

    bb144: {
        _252 = const "Only show search results at the exact given depth. This is an alias for '--min-depth <depth> --max-depth <depth>'.";
        _241 = Arg::<'_, '_>::long_help(move _242, _252) -> [return: bb145, unwind: bb391];
    }

    bb145: {
        _566 = const false;
        _26 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _27, move _241) -> [return: bb146, unwind: bb391];
    }

    bb146: {
        _565 = const true;
        _566 = const false;
        _258 = const "prune";
        _257 = Arg::<'_, '_>::with_name(_258) -> [return: bb147, unwind: bb389];
    }

    bb147: {
        _259 = const "prune";
        _256 = Arg::<'_, '_>::long(move _257, _259) -> [return: bb148, unwind: bb389];
    }

    bb148: {
        _538 = const _;
        _260 = _538 as &[&str] (PointerCoercion(Unsize));
        _255 = Arg::<'_, '_>::conflicts_with_all(move _256, move _260) -> [return: bb149, unwind: bb389];
    }

    bb149: {
        _254 = Arg::<'_, '_>::hidden_short_help(move _255, const true) -> [return: bb150, unwind: bb389];
    }

    bb150: {
        _261 = const "Do not traverse into matching directories.";
        _253 = Arg::<'_, '_>::long_help(move _254, _261) -> [return: bb151, unwind: bb389];
    }

    bb151: {
        _565 = const false;
        _25 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _26, move _253) -> [return: bb152, unwind: bb389];
    }

    bb152: {
        _564 = const true;
        _565 = const false;
        _273 = const "file-type";
        _272 = Arg::<'_, '_>::with_name(_273) -> [return: bb153, unwind: bb387];
    }

    bb153: {
        _274 = const "type";
        _271 = Arg::<'_, '_>::long(move _272, _274) -> [return: bb154, unwind: bb387];
    }

    bb154: {
        _270 = Arg::<'_, '_>::short::<&str>(move _271, const "t") -> [return: bb155, unwind: bb387];
    }

    bb155: {
        _269 = Arg::<'_, '_>::multiple(move _270, const true) -> [return: bb156, unwind: bb387];
    }

    bb156: {
        _268 = Arg::<'_, '_>::number_of_values(move _269, const 1_u64) -> [return: bb157, unwind: bb387];
    }

    bb157: {
        _267 = Arg::<'_, '_>::takes_value(move _268, const true) -> [return: bb158, unwind: bb387];
    }

    bb158: {
        _275 = const "filetype";
        _266 = Arg::<'_, '_>::value_name(move _267, _275) -> [return: bb159, unwind: bb387];
    }

    bb159: {
        _537 = const _;
        _276 = _537 as &[&str] (PointerCoercion(Unsize));
        _265 = Arg::<'_, '_>::possible_values(move _266, move _276) -> [return: bb160, unwind: bb387];
    }

    bb160: {
        _264 = Arg::<'_, '_>::hide_possible_values(move _265, const true) -> [return: bb161, unwind: bb387];
    }

    bb161: {
        _277 = const "Filter by type: file (f), directory (d), symlink (l),\nexecutable (x), empty (e), socket (s), pipe (p)";
        _263 = Arg::<'_, '_>::help(move _264, _277) -> [return: bb162, unwind: bb387];
    }

    bb162: {
        _278 = const "Filter the search by type (multiple allowable filetypes can be specified):\n  'f' or 'file':         regular files\n  'd' or 'directory':    directories\n  'l' or 'symlink':      symbolic links\n  'x' or 'executable':   executables\n  'e' or 'empty':        empty files or directories\n  's' or 'socket':       socket\n  'p' or 'pipe':         named pipe (FIFO)";
        _262 = Arg::<'_, '_>::long_help(move _263, _278) -> [return: bb163, unwind: bb387];
    }

    bb163: {
        _564 = const false;
        _24 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _25, move _262) -> [return: bb164, unwind: bb387];
    }

    bb164: {
        _563 = const true;
        _564 = const false;
        _288 = const "extension";
        _287 = Arg::<'_, '_>::with_name(_288) -> [return: bb165, unwind: bb385];
    }

    bb165: {
        _289 = const "extension";
        _286 = Arg::<'_, '_>::long(move _287, _289) -> [return: bb166, unwind: bb385];
    }

    bb166: {
        _285 = Arg::<'_, '_>::short::<&str>(move _286, const "e") -> [return: bb167, unwind: bb385];
    }

    bb167: {
        _284 = Arg::<'_, '_>::multiple(move _285, const true) -> [return: bb168, unwind: bb385];
    }

    bb168: {
        _283 = Arg::<'_, '_>::number_of_values(move _284, const 1_u64) -> [return: bb169, unwind: bb385];
    }

    bb169: {
        _282 = Arg::<'_, '_>::takes_value(move _283, const true) -> [return: bb170, unwind: bb385];
    }

    bb170: {
        _290 = const "ext";
        _281 = Arg::<'_, '_>::value_name(move _282, _290) -> [return: bb171, unwind: bb385];
    }

    bb171: {
        _291 = const "Filter by file extension";
        _280 = Arg::<'_, '_>::help(move _281, _291) -> [return: bb172, unwind: bb385];
    }

    bb172: {
        _292 = const "(Additionally) filter search results by their file extension. Multiple allowable file extensions can be specified.\nIf you want to search for files without extension, you can use the regex '^[^.]+$' as a normal search pattern.";
        _279 = Arg::<'_, '_>::long_help(move _280, _292) -> [return: bb173, unwind: bb385];
    }

    bb173: {
        _563 = const false;
        _23 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _24, move _279) -> [return: bb174, unwind: bb385];
    }

    bb174: {
        _562 = const true;
        _563 = const false;
        _303 = const "exec";
        _302 = Arg::<'_, '_>::with_name(_303) -> [return: bb175, unwind: bb383];
    }

    bb175: {
        _304 = const "exec";
        _301 = Arg::<'_, '_>::long(move _302, _304) -> [return: bb176, unwind: bb383];
    }

    bb176: {
        _300 = Arg::<'_, '_>::short::<&str>(move _301, const "x") -> [return: bb177, unwind: bb383];
    }

    bb177: {
        _299 = Arg::<'_, '_>::min_values(move _300, const 1_u64) -> [return: bb178, unwind: bb383];
    }

    bb178: {
        _298 = Arg::<'_, '_>::allow_hyphen_values(move _299, const true) -> [return: bb179, unwind: bb383];
    }

    bb179: {
        _305 = const ";";
        _297 = Arg::<'_, '_>::value_terminator(move _298, _305) -> [return: bb180, unwind: bb383];
    }

    bb180: {
        _306 = const "cmd";
        _296 = Arg::<'_, '_>::value_name(move _297, _306) -> [return: bb181, unwind: bb383];
    }

    bb181: {
        _307 = const "list-details";
        _295 = Arg::<'_, '_>::conflicts_with(move _296, _307) -> [return: bb182, unwind: bb383];
    }

    bb182: {
        _308 = const "Execute a command for each search result";
        _294 = Arg::<'_, '_>::help(move _295, _308) -> [return: bb183, unwind: bb383];
    }

    bb183: {
        _309 = const "Execute a command for each search result.\nAll arguments following --exec are taken to be arguments to the command until the argument ';' is encountered.\nEach occurrence of the following placeholders is substituted by a path derived from the current search result before the command is executed:\n  '{}':   path\n  '{/}':  basename\n  '{//}': parent directory\n  '{.}':  path without file extension\n  '{/.}': basename without file extension";
        _293 = Arg::<'_, '_>::long_help(move _294, _309) -> [return: bb184, unwind: bb383];
    }

    bb184: {
        _562 = const false;
        _22 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _23, move _293) -> [return: bb185, unwind: bb383];
    }

    bb185: {
        _561 = const true;
        _562 = const false;
        _320 = const "exec-batch";
        _319 = Arg::<'_, '_>::with_name(_320) -> [return: bb186, unwind: bb381];
    }

    bb186: {
        _321 = const "exec-batch";
        _318 = Arg::<'_, '_>::long(move _319, _321) -> [return: bb187, unwind: bb381];
    }

    bb187: {
        _317 = Arg::<'_, '_>::short::<&str>(move _318, const "X") -> [return: bb188, unwind: bb381];
    }

    bb188: {
        _316 = Arg::<'_, '_>::min_values(move _317, const 1_u64) -> [return: bb189, unwind: bb381];
    }

    bb189: {
        _315 = Arg::<'_, '_>::allow_hyphen_values(move _316, const true) -> [return: bb190, unwind: bb381];
    }

    bb190: {
        _322 = const ";";
        _314 = Arg::<'_, '_>::value_terminator(move _315, _322) -> [return: bb191, unwind: bb381];
    }

    bb191: {
        _323 = const "cmd";
        _313 = Arg::<'_, '_>::value_name(move _314, _323) -> [return: bb192, unwind: bb381];
    }

    bb192: {
        _536 = const _;
        _324 = _536 as &[&str] (PointerCoercion(Unsize));
        _312 = Arg::<'_, '_>::conflicts_with_all(move _313, move _324) -> [return: bb193, unwind: bb381];
    }

    bb193: {
        _325 = const "Execute a command with all search results at once";
        _311 = Arg::<'_, '_>::help(move _312, _325) -> [return: bb194, unwind: bb381];
    }

    bb194: {
        _326 = const "Execute a command with all search results at once.\nAll arguments following --exec-batch are taken to be arguments to the command until the argument ';' is encountered.\nA single occurrence of the following placeholders is authorized and substituted by the paths derived from the search results before the command is executed:\n  '{}':   path\n  '{/}':  basename\n  '{//}': parent directory\n  '{.}':  path without file extension\n  '{/.}': basename without file extension";
        _310 = Arg::<'_, '_>::long_help(move _311, _326) -> [return: bb195, unwind: bb381];
    }

    bb195: {
        _561 = const false;
        _21 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _22, move _310) -> [return: bb196, unwind: bb381];
    }

    bb196: {
        _560 = const true;
        _561 = const false;
        _336 = const "exclude";
        _335 = Arg::<'_, '_>::with_name(_336) -> [return: bb197, unwind: bb379];
    }

    bb197: {
        _337 = const "exclude";
        _334 = Arg::<'_, '_>::long(move _335, _337) -> [return: bb198, unwind: bb379];
    }

    bb198: {
        _333 = Arg::<'_, '_>::short::<&str>(move _334, const "E") -> [return: bb199, unwind: bb379];
    }

    bb199: {
        _332 = Arg::<'_, '_>::takes_value(move _333, const true) -> [return: bb200, unwind: bb379];
    }

    bb200: {
        _338 = const "pattern";
        _331 = Arg::<'_, '_>::value_name(move _332, _338) -> [return: bb201, unwind: bb379];
    }

    bb201: {
        _330 = Arg::<'_, '_>::number_of_values(move _331, const 1_u64) -> [return: bb202, unwind: bb379];
    }

    bb202: {
        _329 = Arg::<'_, '_>::multiple(move _330, const true) -> [return: bb203, unwind: bb379];
    }

    bb203: {
        _339 = const "Exclude entries that match the given glob pattern";
        _328 = Arg::<'_, '_>::help(move _329, _339) -> [return: bb204, unwind: bb379];
    }

    bb204: {
        _340 = const "Exclude files/directories that match the given glob pattern. This overrides any other ignore logic. Multiple exclude patterns can be specified.\n\nExamples:\n  --exclude '*.pyc'\n  --exclude node_modules";
        _327 = Arg::<'_, '_>::long_help(move _328, _340) -> [return: bb205, unwind: bb379];
    }

    bb205: {
        _560 = const false;
        _20 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _21, move _327) -> [return: bb206, unwind: bb379];
    }

    bb206: {
        _559 = const true;
        _560 = const false;
        _349 = const "ignore-file";
        _348 = Arg::<'_, '_>::with_name(_349) -> [return: bb207, unwind: bb377];
    }

    bb207: {
        _350 = const "ignore-file";
        _347 = Arg::<'_, '_>::long(move _348, _350) -> [return: bb208, unwind: bb377];
    }

    bb208: {
        _346 = Arg::<'_, '_>::takes_value(move _347, const true) -> [return: bb209, unwind: bb377];
    }

    bb209: {
        _351 = const "path";
        _345 = Arg::<'_, '_>::value_name(move _346, _351) -> [return: bb210, unwind: bb377];
    }

    bb210: {
        _344 = Arg::<'_, '_>::number_of_values(move _345, const 1_u64) -> [return: bb211, unwind: bb377];
    }

    bb211: {
        _343 = Arg::<'_, '_>::multiple(move _344, const true) -> [return: bb212, unwind: bb377];
    }

    bb212: {
        _342 = Arg::<'_, '_>::hidden_short_help(move _343, const true) -> [return: bb213, unwind: bb377];
    }

    bb213: {
        _352 = const "Add a custom ignore-file in '.gitignore' format. These files have a low precedence.";
        _341 = Arg::<'_, '_>::long_help(move _342, _352) -> [return: bb214, unwind: bb377];
    }

    bb214: {
        _559 = const false;
        _19 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _20, move _341) -> [return: bb215, unwind: bb377];
    }

    bb215: {
        _558 = const true;
        _559 = const false;
        _362 = const "color";
        _361 = Arg::<'_, '_>::with_name(_362) -> [return: bb216, unwind: bb375];
    }

    bb216: {
        _363 = const "color";
        _360 = Arg::<'_, '_>::long(move _361, _363) -> [return: bb217, unwind: bb375];
    }

    bb217: {
        _359 = Arg::<'_, '_>::short::<&str>(move _360, const "c") -> [return: bb218, unwind: bb375];
    }

    bb218: {
        _358 = Arg::<'_, '_>::takes_value(move _359, const true) -> [return: bb219, unwind: bb375];
    }

    bb219: {
        _364 = const "when";
        _357 = Arg::<'_, '_>::value_name(move _358, _364) -> [return: bb220, unwind: bb375];
    }

    bb220: {
        _535 = const _;
        _365 = _535 as &[&str] (PointerCoercion(Unsize));
        _356 = Arg::<'_, '_>::possible_values(move _357, move _365) -> [return: bb221, unwind: bb375];
    }

    bb221: {
        _355 = Arg::<'_, '_>::hide_possible_values(move _356, const true) -> [return: bb222, unwind: bb375];
    }

    bb222: {
        _366 = const "When to use colors: never, *auto*, always";
        _354 = Arg::<'_, '_>::help(move _355, _366) -> [return: bb223, unwind: bb375];
    }

    bb223: {
        _367 = const "Declare when to use color for the pattern match output:\n  'auto':      show colors if the output goes to an interactive console (default)\n  'never':     do not use colorized output\n  'always':    always use colorized output";
        _353 = Arg::<'_, '_>::long_help(move _354, _367) -> [return: bb224, unwind: bb375];
    }

    bb224: {
        _558 = const false;
        _18 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _19, move _353) -> [return: bb225, unwind: bb375];
    }

    bb225: {
        _557 = const true;
        _558 = const false;
        _375 = const "threads";
        _374 = Arg::<'_, '_>::with_name(_375) -> [return: bb226, unwind: bb373];
    }

    bb226: {
        _376 = const "threads";
        _373 = Arg::<'_, '_>::long(move _374, _376) -> [return: bb227, unwind: bb373];
    }

    bb227: {
        _372 = Arg::<'_, '_>::short::<&str>(move _373, const "j") -> [return: bb228, unwind: bb373];
    }

    bb228: {
        _371 = Arg::<'_, '_>::takes_value(move _372, const true) -> [return: bb229, unwind: bb373];
    }

    bb229: {
        _377 = const "num";
        _370 = Arg::<'_, '_>::value_name(move _371, _377) -> [return: bb230, unwind: bb373];
    }

    bb230: {
        _369 = Arg::<'_, '_>::hidden_short_help(move _370, const true) -> [return: bb231, unwind: bb373];
    }

    bb231: {
        _378 = const "Set number of threads to use for searching & executing (default: number of available CPU cores)";
        _368 = Arg::<'_, '_>::long_help(move _369, _378) -> [return: bb232, unwind: bb373];
    }

    bb232: {
        _557 = const false;
        _17 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _18, move _368) -> [return: bb233, unwind: bb373];
    }

    bb233: {
        _556 = const true;
        _557 = const false;
        _388 = const "size";
        _387 = Arg::<'_, '_>::with_name(_388) -> [return: bb234, unwind: bb371];
    }

    bb234: {
        _389 = const "size";
        _386 = Arg::<'_, '_>::long(move _387, _389) -> [return: bb235, unwind: bb371];
    }

    bb235: {
        _385 = Arg::<'_, '_>::short::<&str>(move _386, const "S") -> [return: bb236, unwind: bb371];
    }

    bb236: {
        _384 = Arg::<'_, '_>::takes_value(move _385, const true) -> [return: bb237, unwind: bb371];
    }

    bb237: {
        _383 = Arg::<'_, '_>::number_of_values(move _384, const 1_u64) -> [return: bb238, unwind: bb371];
    }

    bb238: {
        _382 = Arg::<'_, '_>::allow_hyphen_values(move _383, const true) -> [return: bb239, unwind: bb371];
    }

    bb239: {
        _381 = Arg::<'_, '_>::multiple(move _382, const true) -> [return: bb240, unwind: bb371];
    }

    bb240: {
        _390 = const "Limit results based on the size of files.";
        _380 = Arg::<'_, '_>::help(move _381, _390) -> [return: bb241, unwind: bb371];
    }

    bb241: {
        _391 = const "Limit results based on the size of files using the format <+-><NUM><UNIT>.\n   '+': file size must be greater than or equal to this\n   '-': file size must be less than or equal to this\nIf neither '+' nor '-' is specified, file size must be exactly equal to this.\n   'NUM':  The numeric size (e.g. 500)\n   'UNIT': The units for NUM. They are not case-sensitive.\nAllowed unit values:\n    'b':  bytes\n    'k':  kilobytes (base ten, 10^3 = 1000 bytes)\n    'm':  megabytes\n    'g':  gigabytes\n    't':  terabytes\n    'ki': kibibytes (base two, 2^10 = 1024 bytes)\n    'mi': mebibytes\n    'gi': gibibytes\n    'ti': tebibytes";
        _379 = Arg::<'_, '_>::long_help(move _380, _391) -> [return: bb242, unwind: bb371];
    }

    bb242: {
        _556 = const false;
        _16 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _17, move _379) -> [return: bb243, unwind: bb371];
    }

    bb243: {
        _555 = const true;
        _556 = const false;
        _397 = const "max-buffer-time";
        _396 = Arg::<'_, '_>::with_name(_397) -> [return: bb244, unwind: bb369];
    }

    bb244: {
        _398 = const "max-buffer-time";
        _395 = Arg::<'_, '_>::long(move _396, _398) -> [return: bb245, unwind: bb369];
    }

    bb245: {
        _394 = Arg::<'_, '_>::takes_value(move _395, const true) -> [return: bb246, unwind: bb369];
    }

    bb246: {
        _393 = Arg::<'_, '_>::hidden(move _394, const true) -> [return: bb247, unwind: bb369];
    }

    bb247: {
        _399 = const "Amount of time in milliseconds to buffer, before streaming the search results to the console.";
        _392 = Arg::<'_, '_>::long_help(move _393, _399) -> [return: bb248, unwind: bb369];
    }

    bb248: {
        _555 = const false;
        _15 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _16, move _392) -> [return: bb249, unwind: bb369];
    }

    bb249: {
        _554 = const true;
        _555 = const false;
        _409 = const "changed-within";
        _408 = Arg::<'_, '_>::with_name(_409) -> [return: bb250, unwind: bb367];
    }

    bb250: {
        _410 = const "changed-within";
        _407 = Arg::<'_, '_>::long(move _408, _410) -> [return: bb251, unwind: bb367];
    }

    bb251: {
        _406 = Arg::<'_, '_>::alias::<&str>(move _407, const "change-newer-than") -> [return: bb252, unwind: bb367];
    }

    bb252: {
        _405 = Arg::<'_, '_>::alias::<&str>(move _406, const "newer") -> [return: bb253, unwind: bb367];
    }

    bb253: {
        _404 = Arg::<'_, '_>::takes_value(move _405, const true) -> [return: bb254, unwind: bb367];
    }

    bb254: {
        _411 = const "date|dur";
        _403 = Arg::<'_, '_>::value_name(move _404, _411) -> [return: bb255, unwind: bb367];
    }

    bb255: {
        _402 = Arg::<'_, '_>::number_of_values(move _403, const 1_u64) -> [return: bb256, unwind: bb367];
    }

    bb256: {
        _412 = const "Filter by file modification time (newer than)";
        _401 = Arg::<'_, '_>::help(move _402, _412) -> [return: bb257, unwind: bb367];
    }

    bb257: {
        _413 = const "Filter results based on the file modification time. The argument can be provided as a specific point in time (YYYY-MM-DD HH:MM:SS) or as a duration (10h, 1d, 35min). '--change-newer-than' can be used as an alias.\nExamples:\n    --changed-within 2weeks\n    --change-newer-than '2018-10-27 10:00:00'";
        _400 = Arg::<'_, '_>::long_help(move _401, _413) -> [return: bb258, unwind: bb367];
    }

    bb258: {
        _554 = const false;
        _14 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _15, move _400) -> [return: bb259, unwind: bb367];
    }

    bb259: {
        _553 = const true;
        _554 = const false;
        _423 = const "changed-before";
        _422 = Arg::<'_, '_>::with_name(_423) -> [return: bb260, unwind: bb365];
    }

    bb260: {
        _424 = const "changed-before";
        _421 = Arg::<'_, '_>::long(move _422, _424) -> [return: bb261, unwind: bb365];
    }

    bb261: {
        _420 = Arg::<'_, '_>::alias::<&str>(move _421, const "change-older-than") -> [return: bb262, unwind: bb365];
    }

    bb262: {
        _419 = Arg::<'_, '_>::alias::<&str>(move _420, const "older") -> [return: bb263, unwind: bb365];
    }

    bb263: {
        _418 = Arg::<'_, '_>::takes_value(move _419, const true) -> [return: bb264, unwind: bb365];
    }

    bb264: {
        _425 = const "date|dur";
        _417 = Arg::<'_, '_>::value_name(move _418, _425) -> [return: bb265, unwind: bb365];
    }

    bb265: {
        _416 = Arg::<'_, '_>::number_of_values(move _417, const 1_u64) -> [return: bb266, unwind: bb365];
    }

    bb266: {
        _426 = const "Filter by file modification time (older than)";
        _415 = Arg::<'_, '_>::help(move _416, _426) -> [return: bb267, unwind: bb365];
    }

    bb267: {
        _427 = const "Filter results based on the file modification time. The argument can be provided as a specific point in time (YYYY-MM-DD HH:MM:SS) or as a duration (10h, 1d, 35min). '--change-older-than' can be used as an alias.\nExamples:\n    --changed-before '2018-10-27 10:00:00'\n    --change-older-than 2weeks";
        _414 = Arg::<'_, '_>::long_help(move _415, _427) -> [return: bb268, unwind: bb365];
    }

    bb268: {
        _553 = const false;
        _13 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _14, move _414) -> [return: bb269, unwind: bb365];
    }

    bb269: {
        _552 = const true;
        _553 = const false;
        _435 = const "max-results";
        _434 = Arg::<'_, '_>::with_name(_435) -> [return: bb270, unwind: bb363];
    }

    bb270: {
        _436 = const "max-results";
        _433 = Arg::<'_, '_>::long(move _434, _436) -> [return: bb271, unwind: bb363];
    }

    bb271: {
        _432 = Arg::<'_, '_>::takes_value(move _433, const true) -> [return: bb272, unwind: bb363];
    }

    bb272: {
        _437 = const "count";
        _431 = Arg::<'_, '_>::value_name(move _432, _437) -> [return: bb273, unwind: bb363];
    }

    bb273: {
        _534 = const _;
        _438 = _534 as &[&str] (PointerCoercion(Unsize));
        _430 = Arg::<'_, '_>::conflicts_with_all(move _431, move _438) -> [return: bb274, unwind: bb363];
    }

    bb274: {
        _429 = Arg::<'_, '_>::hidden_short_help(move _430, const true) -> [return: bb275, unwind: bb363];
    }

    bb275: {
        _439 = const "Limit the number of search results to 'count' and quit immediately.";
        _428 = Arg::<'_, '_>::long_help(move _429, _439) -> [return: bb276, unwind: bb363];
    }

    bb276: {
        _552 = const false;
        _12 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _13, move _428) -> [return: bb277, unwind: bb363];
    }

    bb277: {
        _551 = const true;
        _552 = const false;
        _446 = const "max-one-result";
        _445 = Arg::<'_, '_>::with_name(_446) -> [return: bb278, unwind: bb361];
    }

    bb278: {
        _444 = Arg::<'_, '_>::short::<&str>(move _445, const "1") -> [return: bb279, unwind: bb361];
    }

    bb279: {
        _443 = Arg::<'_, '_>::hidden_short_help(move _444, const true) -> [return: bb280, unwind: bb361];
    }

    bb280: {
        _447 = const "max-results";
        _442 = Arg::<'_, '_>::overrides_with(move _443, _447) -> [return: bb281, unwind: bb361];
    }

    bb281: {
        _533 = const _;
        _448 = _533 as &[&str] (PointerCoercion(Unsize));
        _441 = Arg::<'_, '_>::conflicts_with_all(move _442, move _448) -> [return: bb282, unwind: bb361];
    }

    bb282: {
        _449 = const "Limit the search to a single result and quit immediately. This is an alias for '--max-results=1'.";
        _440 = Arg::<'_, '_>::long_help(move _441, _449) -> [return: bb283, unwind: bb361];
    }

    bb283: {
        _551 = const false;
        _11 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _12, move _440) -> [return: bb284, unwind: bb361];
    }

    bb284: {
        _550 = const true;
        _551 = const false;
        _455 = const "show-errors";
        _454 = Arg::<'_, '_>::with_name(_455) -> [return: bb285, unwind: bb359];
    }

    bb285: {
        _456 = const "show-errors";
        _453 = Arg::<'_, '_>::long(move _454, _456) -> [return: bb286, unwind: bb359];
    }

    bb286: {
        _452 = Arg::<'_, '_>::hidden_short_help(move _453, const true) -> [return: bb287, unwind: bb359];
    }

    bb287: {
        _457 = const "show-errors";
        _451 = Arg::<'_, '_>::overrides_with(move _452, _457) -> [return: bb288, unwind: bb359];
    }

    bb288: {
        _458 = const "Enable the display of filesystem errors for situations such as insufficient permissions or dead symlinks.";
        _450 = Arg::<'_, '_>::long_help(move _451, _458) -> [return: bb289, unwind: bb359];
    }

    bb289: {
        _550 = const false;
        _10 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _11, move _450) -> [return: bb290, unwind: bb359];
    }

    bb290: {
        _549 = const true;
        _550 = const false;
        _466 = const "base-directory";
        _465 = Arg::<'_, '_>::with_name(_466) -> [return: bb291, unwind: bb357];
    }

    bb291: {
        _467 = const "base-directory";
        _464 = Arg::<'_, '_>::long(move _465, _467) -> [return: bb292, unwind: bb357];
    }

    bb292: {
        _463 = Arg::<'_, '_>::takes_value(move _464, const true) -> [return: bb293, unwind: bb357];
    }

    bb293: {
        _468 = const "path";
        _462 = Arg::<'_, '_>::value_name(move _463, _468) -> [return: bb294, unwind: bb357];
    }

    bb294: {
        _461 = Arg::<'_, '_>::number_of_values(move _462, const 1_u64) -> [return: bb295, unwind: bb357];
    }

    bb295: {
        _460 = Arg::<'_, '_>::hidden_short_help(move _461, const true) -> [return: bb296, unwind: bb357];
    }

    bb296: {
        _469 = const "Change the current working directory of fd to the provided path. This means that search results will be shown with respect to the given base path. Note that relative paths which are passed to fd via the positional <path> argument or the '--search-path' option will also be resolved relative to this directory.";
        _459 = Arg::<'_, '_>::long_help(move _460, _469) -> [return: bb297, unwind: bb357];
    }

    bb297: {
        _549 = const false;
        _9 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _10, move _459) -> [return: bb298, unwind: bb357];
    }

    bb298: {
        _548 = const true;
        _549 = const false;
        _473 = const "pattern";
        _472 = Arg::<'_, '_>::with_name(_473) -> [return: bb299, unwind: bb355];
    }

    bb299: {
        _474 = const "the search pattern (a regular expression, unless '--glob' is used; optional)";
        _471 = Arg::<'_, '_>::help(move _472, _474) -> [return: bb300, unwind: bb355];
    }

    bb300: {
        _475 = const "the search pattern which is either a regular expression (default) or a glob pattern (if --glob is used). If no pattern has been specified, every entry is considered a match. If your pattern starts with a dash (-), make sure to pass '--' first, or it will be considered as a flag (fd -- '-foo').";
        _470 = Arg::<'_, '_>::long_help(move _471, _475) -> [return: bb301, unwind: bb355];
    }

    bb301: {
        _548 = const false;
        _8 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _9, move _470) -> [return: bb302, unwind: bb355];
    }

    bb302: {
        _547 = const true;
        _548 = const false;
        _482 = const "path-separator";
        _481 = Arg::<'_, '_>::with_name(_482) -> [return: bb303, unwind: bb353];
    }

    bb303: {
        _480 = Arg::<'_, '_>::takes_value(move _481, const true) -> [return: bb304, unwind: bb353];
    }

    bb304: {
        _483 = const "separator";
        _479 = Arg::<'_, '_>::value_name(move _480, _483) -> [return: bb305, unwind: bb353];
    }

    bb305: {
        _484 = const "path-separator";
        _478 = Arg::<'_, '_>::long(move _479, _484) -> [return: bb306, unwind: bb353];
    }

    bb306: {
        _477 = Arg::<'_, '_>::hidden_short_help(move _478, const true) -> [return: bb307, unwind: bb353];
    }

    bb307: {
        _485 = const "Set the path separator to use when printing file paths. The default is the OS-specific separator ('/' on Unix, '\\' on Windows).";
        _476 = Arg::<'_, '_>::long_help(move _477, _485) -> [return: bb308, unwind: bb353];
    }

    bb308: {
        _547 = const false;
        _7 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _8, move _476) -> [return: bb309, unwind: bb353];
    }

    bb309: {
        _546 = const true;
        _547 = const false;
        _490 = const "path";
        _489 = Arg::<'_, '_>::with_name(_490) -> [return: bb310, unwind: bb351];
    }

    bb310: {
        _488 = Arg::<'_, '_>::multiple(move _489, const true) -> [return: bb311, unwind: bb351];
    }

    bb311: {
        _491 = const "the root directory for the filesystem search (optional)";
        _487 = Arg::<'_, '_>::help(move _488, _491) -> [return: bb312, unwind: bb351];
    }

    bb312: {
        _492 = const "The directory where the filesystem search is rooted (optional). If omitted, search the current working directory.";
        _486 = Arg::<'_, '_>::long_help(move _487, _492) -> [return: bb313, unwind: bb351];
    }

    bb313: {
        _546 = const false;
        _6 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _7, move _486) -> [return: bb314, unwind: bb351];
    }

    bb314: {
        _545 = const true;
        _546 = const false;
        _501 = const "search-path";
        _500 = Arg::<'_, '_>::with_name(_501) -> [return: bb315, unwind: bb349];
    }

    bb315: {
        _502 = const "search-path";
        _499 = Arg::<'_, '_>::long(move _500, _502) -> [return: bb316, unwind: bb349];
    }

    bb316: {
        _498 = Arg::<'_, '_>::takes_value(move _499, const true) -> [return: bb317, unwind: bb349];
    }

    bb317: {
        _503 = const "path";
        _497 = Arg::<'_, '_>::conflicts_with(move _498, _503) -> [return: bb318, unwind: bb349];
    }

    bb318: {
        _496 = Arg::<'_, '_>::multiple(move _497, const true) -> [return: bb319, unwind: bb349];
    }

    bb319: {
        _495 = Arg::<'_, '_>::hidden_short_help(move _496, const true) -> [return: bb320, unwind: bb349];
    }

    bb320: {
        _494 = Arg::<'_, '_>::number_of_values(move _495, const 1_u64) -> [return: bb321, unwind: bb349];
    }

    bb321: {
        _504 = const "Provide paths to search as an alternative to the positional <path> argument. Changes the usage to `fd [FLAGS/OPTIONS] --search-path <path> --search-path <path2> [<pattern>]`";
        _493 = Arg::<'_, '_>::long_help(move _494, _504) -> [return: bb322, unwind: bb349];
    }

    bb322: {
        _545 = const false;
        _5 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _6, move _493) -> [return: bb323, unwind: bb349];
    }

    bb323: {
        _545 = const false;
        _505 = const true;
        switchInt(move _505) -> [0: bb333, otherwise: bb324];
    }

    bb324: {
        _544 = const true;
        _507 = move _5;
        _515 = const "owner";
        _514 = Arg::<'_, '_>::with_name(_515) -> [return: bb325, unwind: bb347];
    }

    bb325: {
        _516 = const "owner";
        _513 = Arg::<'_, '_>::long(move _514, _516) -> [return: bb326, unwind: bb347];
    }

    bb326: {
        _512 = Arg::<'_, '_>::short::<&str>(move _513, const "o") -> [return: bb327, unwind: bb347];
    }

    bb327: {
        _511 = Arg::<'_, '_>::takes_value(move _512, const true) -> [return: bb328, unwind: bb347];
    }

    bb328: {
        _517 = const "user:group";
        _510 = Arg::<'_, '_>::value_name(move _511, _517) -> [return: bb329, unwind: bb347];
    }

    bb329: {
        _518 = const "Filter by owning user and/or group";
        _509 = Arg::<'_, '_>::help(move _510, _518) -> [return: bb330, unwind: bb347];
    }

    bb330: {
        _519 = const "Filter files by their user and/or group. Format: [(user|uid)][:(group|gid)]. Either side is optional. Precede either side with a '!' to exclude files instead.\nExamples:\n    --owner john\n    --owner :students\n    --owner '!john:students'";
        _508 = Arg::<'_, '_>::long_help(move _509, _519) -> [return: bb331, unwind: bb347];
    }

    bb331: {
        _544 = const false;
        _506 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _507, move _508) -> [return: bb332, unwind: bb347];
    }

    bb332: {
        _544 = const false;
        _5 = move _506;
        goto -> bb333;
    }

    bb333: {
        _520 = const true;
        switchInt(move _520) -> [0: bb341, otherwise: bb334];
    }

    bb334: {
        _543 = const true;
        _522 = move _5;
        _528 = const "one-file-system";
        _527 = Arg::<'_, '_>::with_name(_528) -> [return: bb335, unwind: bb345];
    }

    bb335: {
        _529 = const "one-file-system";
        _526 = Arg::<'_, '_>::long(move _527, _529) -> [return: bb336, unwind: bb345];
    }

    bb336: {
        _532 = const _;
        _530 = _532 as &[&str] (PointerCoercion(Unsize));
        _525 = Arg::<'_, '_>::aliases(move _526, move _530) -> [return: bb337, unwind: bb345];
    }

    bb337: {
        _524 = Arg::<'_, '_>::hidden_short_help(move _525, const true) -> [return: bb338, unwind: bb345];
    }

    bb338: {
        _531 = const "By default, fd will traverse the file system tree as far as other options dictate. With this flag, fd ensures that it does not descend into a different file system than the one it started in. Comparable to the -mount or -xdev filters of find(1).";
        _523 = Arg::<'_, '_>::long_help(move _524, _531) -> [return: bb339, unwind: bb345];
    }

    bb339: {
        _543 = const false;
        _521 = App::<'_, '_>::arg::<Arg<'_, '_>>(move _522, move _523) -> [return: bb340, unwind: bb345];
    }

    bb340: {
        _543 = const false;
        _5 = move _521;
        goto -> bb341;
    }

    bb341: {
        _0 = move _5;
        return;
    }

    bb342 (cleanup): {
        drop(_4) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb343 (cleanup): {
        resume;
    }

    bb344 (cleanup): {
        drop(_522) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        switchInt(_543) -> [0: bb343, otherwise: bb344];
    }

    bb346 (cleanup): {
        drop(_507) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        switchInt(_544) -> [0: bb343, otherwise: bb346];
    }

    bb348 (cleanup): {
        drop(_6) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb349 (cleanup): {
        switchInt(_545) -> [0: bb343, otherwise: bb348];
    }

    bb350 (cleanup): {
        drop(_7) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb351 (cleanup): {
        switchInt(_546) -> [0: bb343, otherwise: bb350];
    }

    bb352 (cleanup): {
        drop(_8) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb353 (cleanup): {
        switchInt(_547) -> [0: bb343, otherwise: bb352];
    }

    bb354 (cleanup): {
        drop(_9) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb355 (cleanup): {
        switchInt(_548) -> [0: bb343, otherwise: bb354];
    }

    bb356 (cleanup): {
        drop(_10) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb357 (cleanup): {
        switchInt(_549) -> [0: bb343, otherwise: bb356];
    }

    bb358 (cleanup): {
        drop(_11) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        switchInt(_550) -> [0: bb343, otherwise: bb358];
    }

    bb360 (cleanup): {
        drop(_12) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb361 (cleanup): {
        switchInt(_551) -> [0: bb343, otherwise: bb360];
    }

    bb362 (cleanup): {
        drop(_13) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb363 (cleanup): {
        switchInt(_552) -> [0: bb343, otherwise: bb362];
    }

    bb364 (cleanup): {
        drop(_14) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb365 (cleanup): {
        switchInt(_553) -> [0: bb343, otherwise: bb364];
    }

    bb366 (cleanup): {
        drop(_15) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb367 (cleanup): {
        switchInt(_554) -> [0: bb343, otherwise: bb366];
    }

    bb368 (cleanup): {
        drop(_16) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb369 (cleanup): {
        switchInt(_555) -> [0: bb343, otherwise: bb368];
    }

    bb370 (cleanup): {
        drop(_17) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb371 (cleanup): {
        switchInt(_556) -> [0: bb343, otherwise: bb370];
    }

    bb372 (cleanup): {
        drop(_18) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb373 (cleanup): {
        switchInt(_557) -> [0: bb343, otherwise: bb372];
    }

    bb374 (cleanup): {
        drop(_19) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb375 (cleanup): {
        switchInt(_558) -> [0: bb343, otherwise: bb374];
    }

    bb376 (cleanup): {
        drop(_20) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb377 (cleanup): {
        switchInt(_559) -> [0: bb343, otherwise: bb376];
    }

    bb378 (cleanup): {
        drop(_21) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb379 (cleanup): {
        switchInt(_560) -> [0: bb343, otherwise: bb378];
    }

    bb380 (cleanup): {
        drop(_22) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb381 (cleanup): {
        switchInt(_561) -> [0: bb343, otherwise: bb380];
    }

    bb382 (cleanup): {
        drop(_23) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb383 (cleanup): {
        switchInt(_562) -> [0: bb343, otherwise: bb382];
    }

    bb384 (cleanup): {
        drop(_24) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb385 (cleanup): {
        switchInt(_563) -> [0: bb343, otherwise: bb384];
    }

    bb386 (cleanup): {
        drop(_25) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        switchInt(_564) -> [0: bb343, otherwise: bb386];
    }

    bb388 (cleanup): {
        drop(_26) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb389 (cleanup): {
        switchInt(_565) -> [0: bb343, otherwise: bb388];
    }

    bb390 (cleanup): {
        drop(_27) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb391 (cleanup): {
        switchInt(_566) -> [0: bb343, otherwise: bb390];
    }

    bb392 (cleanup): {
        drop(_28) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb393 (cleanup): {
        switchInt(_567) -> [0: bb343, otherwise: bb392];
    }

    bb394 (cleanup): {
        drop(_29) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb395 (cleanup): {
        switchInt(_568) -> [0: bb343, otherwise: bb394];
    }

    bb396 (cleanup): {
        drop(_30) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb397 (cleanup): {
        switchInt(_569) -> [0: bb343, otherwise: bb396];
    }

    bb398 (cleanup): {
        drop(_31) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb399 (cleanup): {
        switchInt(_570) -> [0: bb343, otherwise: bb398];
    }

    bb400 (cleanup): {
        drop(_32) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb401 (cleanup): {
        switchInt(_571) -> [0: bb343, otherwise: bb400];
    }

    bb402 (cleanup): {
        drop(_33) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb403 (cleanup): {
        switchInt(_572) -> [0: bb343, otherwise: bb402];
    }

    bb404 (cleanup): {
        drop(_34) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb405 (cleanup): {
        switchInt(_573) -> [0: bb343, otherwise: bb404];
    }

    bb406 (cleanup): {
        drop(_35) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb407 (cleanup): {
        switchInt(_574) -> [0: bb343, otherwise: bb406];
    }

    bb408 (cleanup): {
        drop(_36) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb409 (cleanup): {
        switchInt(_575) -> [0: bb343, otherwise: bb408];
    }

    bb410 (cleanup): {
        drop(_37) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb411 (cleanup): {
        switchInt(_576) -> [0: bb343, otherwise: bb410];
    }

    bb412 (cleanup): {
        drop(_38) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb413 (cleanup): {
        switchInt(_577) -> [0: bb343, otherwise: bb412];
    }

    bb414 (cleanup): {
        drop(_39) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb415 (cleanup): {
        switchInt(_578) -> [0: bb343, otherwise: bb414];
    }

    bb416 (cleanup): {
        drop(_40) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb417 (cleanup): {
        switchInt(_579) -> [0: bb343, otherwise: bb416];
    }

    bb418 (cleanup): {
        drop(_41) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb419 (cleanup): {
        switchInt(_580) -> [0: bb343, otherwise: bb418];
    }

    bb420 (cleanup): {
        drop(_42) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb421 (cleanup): {
        switchInt(_581) -> [0: bb343, otherwise: bb420];
    }

    bb422 (cleanup): {
        drop(_43) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb423 (cleanup): {
        switchInt(_582) -> [0: bb343, otherwise: bb422];
    }

    bb424 (cleanup): {
        drop(_44) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb425 (cleanup): {
        switchInt(_583) -> [0: bb343, otherwise: bb424];
    }

    bb426 (cleanup): {
        drop(_45) -> [return: bb343, unwind terminate(cleanup)];
    }

    bb427 (cleanup): {
        switchInt(_584) -> [0: bb343, otherwise: bb426];
    }
}

promoted[0] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "mount";
        _2 = &(*_3);
        _5 = const "xdev";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[1] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "exec";
        _2 = &(*_3);
        _5 = const "exec-batch";
        _4 = &(*_5);
        _7 = const "list-details";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[2] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "exec";
        _2 = &(*_3);
        _5 = const "exec-batch";
        _4 = &(*_5);
        _7 = const "list-details";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[3] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "never";
        _2 = &(*_3);
        _5 = const "auto";
        _4 = &(*_5);
        _7 = const "always";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[4] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "exec";
        _2 = &(*_3);
        _5 = const "list-details";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[5] in build_app: &[&str; 14] = {
    let mut _0: &[&str; 14];
    let mut _1: [&str; 14];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    let mut _25: &str;
    let mut _26: &str;
    let mut _27: &str;
    let mut _28: &str;
    let mut _29: &str;

    bb0: {
        _3 = const "f";
        _2 = &(*_3);
        _5 = const "file";
        _4 = &(*_5);
        _7 = const "d";
        _6 = &(*_7);
        _9 = const "directory";
        _8 = &(*_9);
        _11 = const "l";
        _10 = &(*_11);
        _13 = const "symlink";
        _12 = &(*_13);
        _15 = const "x";
        _14 = &(*_15);
        _17 = const "executable";
        _16 = &(*_17);
        _19 = const "e";
        _18 = &(*_19);
        _21 = const "empty";
        _20 = &(*_21);
        _23 = const "s";
        _22 = &(*_23);
        _25 = const "socket";
        _24 = &(*_25);
        _27 = const "p";
        _26 = &(*_27);
        _29 = const "pipe";
        _28 = &(*_29);
        _1 = [move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _0 = &_1;
        return;
    }
}

promoted[6] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "size";
        _2 = &(*_3);
        _5 = const "exact-depth";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[7] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "max-depth";
        _2 = &(*_3);
        _5 = const "min-depth";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[8] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "glob";
        _2 = &(*_3);
        _5 = const "regex";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[9] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "case-sensitive";
        _2 = &(*_3);
        _5 = const "ignore-case";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[10] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "ignore-case";
        _2 = &(*_3);
        _5 = const "case-sensitive";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

fn print_error(_1: impl Into<String>) -> () {
    debug msg => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let _10: std::string::String;
    let mut _11: &[&str; 2];

    bb0: {
        _11 = const _;
        _4 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = <impl Into<String> as Into<String>>::into(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<String>(_9) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = _eprint(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_10) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in print_error: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[fd error]: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn execute_command(_1: Command, _2: &Mutex<()>) -> exit_codes::ExitCode {
    debug cmd => _1;
    debug out_perm => _2;
    let mut _0: exit_codes::ExitCode;
    let _3: std::result::Result<std::process::Output, std::io::Error>;
    let mut _4: &mut std::process::Command;
    let mut _5: isize;
    let mut _8: std::result::Result<std::sync::MutexGuard<'_, ()>, std::sync::PoisonError<std::sync::MutexGuard<'_, ()>>>;
    let mut _11: std::result::Result<(), std::io::Error>;
    let mut _12: &mut std::io::StdoutLock<'_>;
    let mut _13: std::io::StdoutLock<'_>;
    let mut _14: &std::io::Stdout;
    let _15: &[u8];
    let _16: &std::vec::Vec<u8>;
    let mut _17: std::result::Result<(), std::io::Error>;
    let mut _18: &mut std::io::StderrLock<'_>;
    let mut _19: std::io::StderrLock<'_>;
    let mut _20: &std::io::Stderr;
    let _21: &[u8];
    let _22: &std::vec::Vec<u8>;
    let mut _23: bool;
    let mut _24: &std::option::Option<i32>;
    let _25: std::option::Option<i32>;
    let mut _26: &std::process::ExitStatus;
    let mut _29: bool;
    let mut _30: &std::io::ErrorKind;
    let _31: std::io::ErrorKind;
    let _32: ();
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &std::process::Command;
    let _42: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &std::io::Error;
    let mut _55: &std::io::Error;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    scope 1 {
        debug output => _3;
        let _6: std::process::Output;
        let _27: &std::io::Error;
        let _28: &&std::io::Error;
        let _41: std::io::Error;
        let mut _53: &std::io::ErrorKind;
        scope 2 {
            debug output => _6;
            let _7: std::sync::MutexGuard<'_, ()>;
            scope 3 {
                debug _lock => _7;
                let _9: std::io::Stdout;
                scope 4 {
                    debug stdout => _9;
                    let _10: std::io::Stderr;
                    scope 5 {
                        debug stderr => _10;
                        scope 6 {
                            scope 7 {
                                let mut _54: &std::option::Option<i32>;
                            }
                        }
                    }
                }
            }
        }
        scope 8 {
            debug why => _27;
            debug why => _28;
            let _33: std::string::String;
            let mut _52: &[&str; 1];
            scope 9 {
                debug res => _33;
            }
        }
        scope 10 {
            debug why => _41;
            let _43: std::string::String;
            let mut _51: &[&str; 1];
            scope 11 {
                debug res => _43;
            }
        }
    }

    bb0: {
        _56 = const false;
        _4 = &mut _1;
        _3 = Command::output(move _4) -> [return: bb1, unwind: bb43];
    }

    bb1: {
        _56 = const true;
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb24, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = move ((_3 as Ok).0: std::process::Output);
        _8 = Mutex::<()>::lock(_2) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        _7 = Result::<MutexGuard<'_, ()>, PoisonError<MutexGuard<'_, ()>>>::unwrap(move _8) -> [return: bb5, unwind: bb42];
    }

    bb5: {
        _9 = stdout() -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _10 = stderr() -> [return: bb7, unwind: bb41];
    }

    bb7: {
        _14 = &_9;
        _13 = std::io::Stdout::lock(move _14) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        _12 = &mut _13;
        _16 = &(_6.1: std::vec::Vec<u8>);
        _15 = <Vec<u8> as Deref>::deref(_16) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _11 = <StdoutLock<'_> as std::io::Write>::write_all(move _12, _15) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        drop(_11) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        drop(_13) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _20 = &_10;
        _19 = std::io::Stderr::lock(move _20) -> [return: bb13, unwind: bb41];
    }

    bb13: {
        _18 = &mut _19;
        _22 = &(_6.2: std::vec::Vec<u8>);
        _21 = <Vec<u8> as Deref>::deref(_22) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _17 = <StderrLock<'_> as std::io::Write>::write_all(move _18, _21) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        drop(_17) -> [return: bb16, unwind: bb39];
    }

    bb16: {
        drop(_19) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _26 = &(_6.0: std::process::ExitStatus);
        _25 = ExitStatus::code(move _26) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        _24 = &_25;
        _54 = const _;
        _23 = <Option<i32> as PartialEq>::eq(move _24, _54) -> [return: bb19, unwind: bb41];
    }

    bb19: {
        switchInt(move _23) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _0 = exit_codes::ExitCode::Success;
        goto -> bb22;
    }

    bb21: {
        _0 = exit_codes::ExitCode::GeneralError;
        goto -> bb22;
    }

    bb22: {
        drop(_7) -> [return: bb23, unwind: bb42];
    }

    bb23: {
        drop(_6) -> [return: bb48, unwind: bb51];
    }

    bb24: {
        _27 = &((_3 as Err).0: std::io::Error);
        _28 = &_27;
        _55 = deref_copy (*_28);
        _31 = std::io::Error::kind(_55) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        _30 = &_31;
        _53 = const _;
        _29 = <std::io::ErrorKind as PartialEq>::eq(move _30, _53) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        switchInt(move _29) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _52 = const _;
        _35 = _52 as &[&str] (PointerCoercion(Unsize));
        _40 = &_1;
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<Command>(_40) -> [return: bb29, unwind: bb51];
    }

    bb28: {
        _56 = const false;
        _41 = move ((_3 as Err).0: std::io::Error);
        _51 = const _;
        _45 = _51 as &[&str] (PointerCoercion(Unsize));
        _50 = &_41;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_50) -> [return: bb33, unwind: bb38];
    }

    bb29: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb30, unwind: bb51];
    }

    bb30: {
        _33 = format(move _34) -> [return: bb31, unwind: bb51];
    }

    bb31: {
        _32 = print_error::<String>(move _33) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        _0 = exit_codes::ExitCode::GeneralError;
        goto -> bb48;
    }

    bb33: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb34, unwind: bb38];
    }

    bb34: {
        _43 = format(move _44) -> [return: bb35, unwind: bb38];
    }

    bb35: {
        _42 = print_error::<String>(move _43) -> [return: bb36, unwind: bb38];
    }

    bb36: {
        _0 = exit_codes::ExitCode::GeneralError;
        drop(_41) -> [return: bb48, unwind: bb51];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_41) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_19) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_13) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_7) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_6) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_1) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        resume;
    }

    bb45: {
        _56 = const false;
        drop(_1) -> [return: bb37, unwind continue];
    }

    bb46: {
        switchInt(_56) -> [0: bb45, otherwise: bb47];
    }

    bb47: {
        drop(((_3 as Err).0: std::io::Error)) -> [return: bb45, unwind: bb43];
    }

    bb48: {
        _57 = discriminant(_3);
        switchInt(move _57) -> [0: bb45, otherwise: bb46];
    }

    bb49 (cleanup): {
        switchInt(_56) -> [0: bb43, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop(((_3 as Err).0: std::io::Error)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _58 = discriminant(_3);
        switchInt(move _58) -> [0: bb43, otherwise: bb49];
    }
}

promoted[0] in execute_command: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Problem while executing command: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in execute_command: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Command not found: "];
        _0 = &_1;
        return;
    }
}

promoted[2] in execute_command: &std::io::ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = NotFound;
        _0 = &_1;
        return;
    }
}

promoted[3] in execute_command: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 0_i32);
        _0 = &_1;
        return;
    }
}

fn basename(_1: &Path) -> &OsStr {
    debug path => _1;
    let mut _0: &std::ffi::OsStr;
    let mut _2: std::option::Option<&std::ffi::OsStr>;
    let mut _3: &std::path::Path;
    let mut _4: {closure@src/exec/input.rs:8:37: 8:39};
    let mut _5: &&std::path::Path;

    bb0: {
        _3 = _1;
        _2 = Path::file_name(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _4 = {closure@src/exec/input.rs:8:37: 8:39} { path: move _5 };
        _0 = Option::<&OsStr>::unwrap_or_else::<{closure@src/exec/input.rs:8:37: 8:39}>(move _2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn basename::{closure#0}(_1: {closure@src/exec/input.rs:8:37: 8:39}) -> &OsStr {
    debug path => (*(_1.0: &&std::path::Path));
    let mut _0: &std::ffi::OsStr;
    let mut _2: &&std::path::Path;
    let mut _3: &std::path::Path;

    bb0: {
        _2 = deref_copy (_1.0: &&std::path::Path);
        _3 = deref_copy (*_2);
        _0 = Path::as_os_str(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn remove_extension(_1: &Path) -> OsString {
    debug path => _1;
    let mut _0: std::ffi::OsString;
    let _2: std::ffi::OsString;
    let mut _3: &std::path::Path;
    let mut _5: std::option::Option<&std::ffi::OsStr>;
    let mut _6: &std::path::Path;
    let mut _7: {closure@src/exec/input.rs:14:48: 14:50};
    let mut _8: &&std::path::Path;
    let _10: &std::path::Path;
    let mut _11: &std::path::PathBuf;
    let _12: std::path::PathBuf;
    let mut _13: std::ffi::OsString;
    let mut _14: std::path::PathBuf;
    let _15: &std::path::Path;
    let _16: &std::path::Path;
    let _17: &std::path::PathBuf;
    let mut _18: bool;
    scope 1 {
        debug dirname => _2;
        let _4: &std::ffi::OsStr;
        scope 2 {
            debug stem => _4;
            let _9: std::path::PathBuf;
            scope 3 {
                debug path => _9;
            }
        }
    }

    bb0: {
        _18 = const false;
        _3 = _1;
        _18 = const true;
        _2 = dirname(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = _1;
        _5 = Path::file_stem(move _6) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _8 = &_1;
        _7 = {closure@src/exec/input.rs:14:48: 14:50} { path: move _8 };
        _4 = Option::<&OsStr>::unwrap_or_else::<{closure@src/exec/input.rs:14:48: 14:50}>(move _5, move _7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _18 = const false;
        _13 = move _2;
        _12 = <PathBuf as From<OsString>>::from(move _13) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _11 = &_12;
        _10 = <PathBuf as Deref>::deref(move _11) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _9 = Path::join::<&OsStr>(_10, _4) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        drop(_12) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _17 = &_9;
        _16 = <PathBuf as Deref>::deref(_17) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _15 = strip_current_dir(_16) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _14 = <Path as ToOwned>::to_owned(_15) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _0 = PathBuf::into_os_string(move _14) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_9) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _18 = const false;
        return;
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_12) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb15, otherwise: bb16];
    }
}

fn remove_extension::{closure#0}(_1: {closure@src/exec/input.rs:14:48: 14:50}) -> &OsStr {
    debug path => (*(_1.0: &&std::path::Path));
    let mut _0: &std::ffi::OsStr;
    let mut _2: &&std::path::Path;
    let mut _3: &std::path::Path;

    bb0: {
        _2 = deref_copy (_1.0: &&std::path::Path);
        _3 = deref_copy (*_2);
        _0 = Path::as_os_str(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn dirname(_1: &Path) -> OsString {
    debug path => _1;
    let mut _0: std::ffi::OsString;
    let mut _2: std::option::Option<std::ffi::OsString>;
    let mut _3: std::option::Option<&std::path::Path>;
    let mut _4: &std::path::Path;
    let mut _5: {closure@src/exec/input.rs:31:25: 31:27};
    let mut _6: &&std::path::Path;

    bb0: {
        _4 = _1;
        _3 = Path::parent(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&Path>::map::<OsString, {closure@src/exec/input.rs:24:14: 24:17}>(move _3, const ZeroSized: {closure@src/exec/input.rs:24:14: 24:17}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_1;
        _5 = {closure@src/exec/input.rs:31:25: 31:27} { path: move _6 };
        _0 = Option::<OsString>::unwrap_or_else::<{closure@src/exec/input.rs:31:25: 31:27}>(move _2, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn dirname::{closure#0}(_1: {closure@src/exec/input.rs:24:14: 24:17}, _2: &Path) -> OsString {
    debug p => _2;
    let mut _0: std::ffi::OsString;
    let mut _3: bool;
    let mut _4: &&std::path::Path;
    let mut _5: &&std::ffi::OsStr;
    let _6: &std::ffi::OsStr;
    let _7: &str;
    let _8: &std::ffi::OsStr;
    let mut _9: &std::path::Path;

    bb0: {
        _4 = &_2;
        _7 = const "";
        _6 = OsStr::new::<str>(_7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <&Path as PartialEq<&OsStr>>::eq(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = <OsString as From<&str>>::from(const ".") -> [return: bb6, unwind continue];
    }

    bb4: {
        _9 = _2;
        _8 = Path::as_os_str(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = <OsStr as ToOwned>::to_owned(_8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn dirname::{closure#1}(_1: {closure@src/exec/input.rs:31:25: 31:27}) -> OsString {
    debug path => (*(_1.0: &&std::path::Path));
    let mut _0: std::ffi::OsString;
    let _2: &std::ffi::OsStr;
    let mut _3: &&std::path::Path;
    let mut _4: &std::path::Path;

    bb0: {
        _3 = deref_copy (_1.0: &&std::path::Path);
        _4 = deref_copy (*_3);
        _2 = Path::as_os_str(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <OsStr as ToOwned>::to_owned(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn job(_1: Arc<Mutex<std::sync::mpsc::Receiver<WorkerResult>>>, _2: Arc<CommandTemplate>, _3: Arc<Mutex<()>>, _4: bool) -> exit_codes::ExitCode {
    debug rx => _1;
    debug cmd => _2;
    debug out_perm => _3;
    debug show_filesystem_errors => _4;
    let mut _0: exit_codes::ExitCode;
    let mut _5: std::vec::Vec<exit_codes::ExitCode>;
    let mut _6: ();
    let mut _8: std::result::Result<std::sync::MutexGuard<'_, std::sync::mpsc::Receiver<walk::WorkerResult>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::sync::mpsc::Receiver<walk::WorkerResult>>>>;
    let _9: &std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>;
    let mut _10: &std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>;
    let mut _12: std::result::Result<walk::WorkerResult, std::sync::mpsc::RecvError>;
    let _13: &std::sync::mpsc::Receiver<walk::WorkerResult>;
    let mut _14: &std::sync::MutexGuard<'_, std::sync::mpsc::Receiver<walk::WorkerResult>>;
    let mut _15: isize;
    let mut _16: isize;
    let _19: ();
    let mut _20: std::string::String;
    let mut _21: &ignore::Error;
    let _22: ();
    let mut _23: std::sync::MutexGuard<'_, std::sync::mpsc::Receiver<walk::WorkerResult>>;
    let mut _24: &mut std::vec::Vec<exit_codes::ExitCode>;
    let mut _25: exit_codes::ExitCode;
    let _26: &exec::CommandTemplate;
    let mut _27: &std::sync::Arc<exec::CommandTemplate>;
    let _28: &std::path::Path;
    let _29: &std::path::PathBuf;
    let mut _30: std::sync::Arc<std::sync::Mutex<()>>;
    let _31: &std::sync::Arc<std::sync::Mutex<()>>;
    let _32: &[exit_codes::ExitCode];
    let _33: &std::vec::Vec<exit_codes::ExitCode>;
    let mut _34: bool;
    scope 1 {
        debug results => _5;
        let _7: std::sync::MutexGuard<'_, std::sync::mpsc::Receiver<walk::WorkerResult>>;
        scope 2 {
            debug lock => _7;
            let _11: std::path::PathBuf;
            let _17: std::path::PathBuf;
            let _18: ignore::Error;
            scope 3 {
                debug value => _11;
            }
            scope 4 {
                debug val => _17;
            }
            scope 5 {
                debug err => _18;
            }
        }
    }

    bb0: {
        _34 = const false;
        _5 = Vec::<exit_codes::ExitCode>::new() -> [return: bb41, unwind: bb34];
    }

    bb1: {
        _10 = &_1;
        _9 = <Arc<Mutex<std::sync::mpsc::Receiver<WorkerResult>>> as Deref>::deref(move _10) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _8 = Mutex::<std::sync::mpsc::Receiver<WorkerResult>>::lock(_9) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _7 = Result::<MutexGuard<'_, std::sync::mpsc::Receiver<WorkerResult>>, PoisonError<MutexGuard<'_, std::sync::mpsc::Receiver<WorkerResult>>>>::unwrap(move _8) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _34 = const true;
        _14 = &_7;
        _13 = <MutexGuard<'_, std::sync::mpsc::Receiver<WorkerResult>> as Deref>::deref(move _14) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _12 = std::sync::mpsc::Receiver::<WorkerResult>::recv(_13) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _15 = discriminant(((_12 as Ok).0: walk::WorkerResult));
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        drop(_7) -> [return: bb22, unwind: bb33];
    }

    bb10: {
        _17 = move ((((_12 as Ok).0: walk::WorkerResult) as Entry).0: std::path::PathBuf);
        _11 = move _17;
        _34 = const false;
        _23 = move _7;
        _22 = std::mem::drop::<MutexGuard<'_, std::sync::mpsc::Receiver<WorkerResult>>>(move _23) -> [return: bb15, unwind: bb31];
    }

    bb11: {
        _18 = move ((((_12 as Ok).0: walk::WorkerResult) as Error).0: ignore::Error);
        switchInt(_4) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        _21 = &_18;
        _20 = <ignore::Error as ToString>::to_string(move _21) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _19 = print_error::<String>(move _20) -> [return: bb42, unwind: bb32];
    }

    bb14: {
        drop(_18) -> [return: bb23, unwind: bb38];
    }

    bb15: {
        _24 = &mut _5;
        _27 = &_2;
        _26 = <Arc<CommandTemplate> as Deref>::deref(move _27) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _29 = &_11;
        _28 = <PathBuf as Deref>::deref(_29) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _31 = &_3;
        _30 = <Arc<Mutex<()>> as Clone>::clone(_31) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _25 = CommandTemplate::generate_and_execute(_26, _28, move _30) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _6 = Vec::<exit_codes::ExitCode>::push(move _24, move _25) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        drop(_11) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        _34 = const false;
        goto -> bb1;
    }

    bb22: {
        _34 = const false;
        _33 = &_5;
        _32 = <Vec<exit_codes::ExitCode> as Deref>::deref(_33) -> [return: bb25, unwind: bb33];
    }

    bb23: {
        drop(_7) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        _34 = const false;
        goto -> bb1;
    }

    bb25: {
        _0 = merge_exitcodes(_32) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        drop(_5) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        drop(_3) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        drop(_1) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_11) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_18) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_5) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_2) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_1) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        goto -> bb40;
    }

    bb39 (cleanup): {
        drop(_7) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_34) -> [0: bb33, otherwise: bb39];
    }

    bb41: {
        goto -> bb1;
    }

    bb42: {
        goto -> bb14;
    }
}

fn batch(_1: std::sync::mpsc::Receiver<WorkerResult>, _2: &CommandTemplate, _3: bool) -> exit_codes::ExitCode {
    debug rx => _1;
    debug cmd => _2;
    debug show_filesystem_errors => _3;
    let mut _0: exit_codes::ExitCode;
    let _4: std::iter::FilterMap<std::sync::mpsc::Iter<'_, walk::WorkerResult>, {closure@src/exec/job.rs:52:38: 52:45}>;
    let mut _5: std::sync::mpsc::Iter<'_, walk::WorkerResult>;
    let mut _6: &std::sync::mpsc::Receiver<walk::WorkerResult>;
    let mut _7: {closure@src/exec/job.rs:52:38: 52:45};
    let mut _8: &bool;
    scope 1 {
        debug paths => _4;
    }

    bb0: {
        _6 = &_1;
        _5 = std::sync::mpsc::Receiver::<WorkerResult>::iter(move _6) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _8 = &_3;
        _7 = {closure@src/exec/job.rs:52:38: 52:45} { show_filesystem_errors: move _8 };
        _4 = <std::sync::mpsc::Iter<'_, WorkerResult> as Iterator>::filter_map::<PathBuf, {closure@src/exec/job.rs:52:38: 52:45}>(move _5, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = CommandTemplate::generate_and_execute_batch::<FilterMap<std::sync::mpsc::Iter<'_, WorkerResult>, {closure@src/exec/job.rs:52:38: 52:45}>>(_2, move _4) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn batch::{closure#0}(_1: &mut {closure@src/exec/job.rs:52:38: 52:45}, _2: WorkerResult) -> Option<PathBuf> {
    debug value => _2;
    debug show_filesystem_errors => (*((*_1).0: &bool));
    let mut _0: std::option::Option<std::path::PathBuf>;
    let mut _3: isize;
    let _4: std::path::PathBuf;
    let _5: ignore::Error;
    let mut _6: bool;
    let _7: ();
    let mut _8: std::string::String;
    let mut _9: &ignore::Error;
    let mut _10: &bool;
    scope 1 {
        debug val => _4;
    }
    scope 2 {
        debug err => _5;
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = move ((_2 as Error).0: ignore::Error);
        _10 = deref_copy ((*_1).0: &bool);
        _6 = (*_10);
        switchInt(move _6) -> [0: bb6, otherwise: bb4];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = move ((_2 as Entry).0: std::path::PathBuf);
        _0 = Option::<PathBuf>::Some(move _4);
        goto -> bb8;
    }

    bb4: {
        _9 = &_5;
        _8 = <ignore::Error as ToString>::to_string(move _9) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _7 = print_error::<String>(move _8) -> [return: bb10, unwind: bb7];
    }

    bb6: {
        _0 = Option::<PathBuf>::None;
        drop(_5) -> [return: bb8, unwind continue];
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        goto -> bb6;
    }
}

fn token::<impl at src/exec/token.rs:7:10: 7:15>::clone(_1: &Token) -> Token {
    debug self => _1;
    let mut _0: exec::token::Token;
    let mut _2: isize;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &(((*_1) as Text).0: std::string::String);
        _4 = <String as Clone>::clone(_3) -> [return: bb8, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = Token::Placeholder;
        goto -> bb9;
    }

    bb4: {
        _0 = Token::Basename;
        goto -> bb9;
    }

    bb5: {
        _0 = Token::Parent;
        goto -> bb9;
    }

    bb6: {
        _0 = Token::NoExt;
        goto -> bb9;
    }

    bb7: {
        _0 = Token::BasenameNoExt;
        goto -> bb9;
    }

    bb8: {
        _0 = Token::Text(move _4);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn token::<impl at src/exec/token.rs:7:17: 7:22>::fmt(_1: &Token, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &std::string::String;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::string::String;
    scope 1 {
        debug __self_0 => _9;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = &(((*_1) as Text).0: std::string::String);
        _10 = const "Text";
        _12 = &_9;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _10, move _11) -> [return: bb8, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Placeholder";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb8, unwind continue];
    }

    bb4: {
        _5 = const "Basename";
        _0 = Formatter::<'_>::write_str(_2, _5) -> [return: bb8, unwind continue];
    }

    bb5: {
        _6 = const "Parent";
        _0 = Formatter::<'_>::write_str(_2, _6) -> [return: bb8, unwind continue];
    }

    bb6: {
        _7 = const "NoExt";
        _0 = Formatter::<'_>::write_str(_2, _7) -> [return: bb8, unwind continue];
    }

    bb7: {
        _8 = const "BasenameNoExt";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn token::<impl at src/exec/token.rs:7:24: 7:33>::eq(_1: &Token, _2: &Token) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&exec::token::Token, &exec::token::Token);
    let mut _7: isize;
    let mut _8: isize;
    let mut _11: &exec::token::Token;
    let mut _12: &exec::token::Token;
    let mut _13: &exec::token::Token;
    let mut _14: &exec::token::Token;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _9: &std::string::String;
            let _10: &std::string::String;
            scope 3 {
                debug __self_0 => _9;
                debug __arg1_0 => _10;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _11 = deref_copy (_6.0: &exec::token::Token);
        _8 = discriminant((*_11));
        switchInt(move _8) -> [5: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb6;
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _12 = deref_copy (_6.1: &exec::token::Token);
        _7 = discriminant((*_12));
        switchInt(move _7) -> [5: bb5, otherwise: bb3];
    }

    bb5: {
        _13 = deref_copy (_6.0: &exec::token::Token);
        _9 = &(((*_13) as Text).0: std::string::String);
        _14 = deref_copy (_6.1: &exec::token::Token);
        _10 = &(((*_14) as Text).0: std::string::String);
        _0 = <String as PartialEq>::eq(_9, _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn token::<impl at src/exec/token.rs:17:1: 17:23>::fmt(_1: &Token, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _5: std::result::Result<(), std::fmt::Error>;
    let _6: &str;
    let mut _7: isize;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _9: std::result::Result<(), std::fmt::Error>;
    let _10: &str;
    let mut _11: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _13: std::result::Result<(), std::fmt::Error>;
    let _14: &str;
    let mut _15: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _17: std::result::Result<(), std::fmt::Error>;
    let _18: &str;
    let mut _19: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _21: std::result::Result<(), std::fmt::Error>;
    let _22: &str;
    let mut _23: isize;
    let _24: &std::string::String;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _26: std::result::Result<(), std::fmt::Error>;
    let _27: &str;
    let mut _28: isize;
    scope 1 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }
    scope 17 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
        scope 18 {
        }
    }
    scope 19 {
        debug val => const ();
        scope 20 {
        }
    }
    scope 21 {
        debug string => _24;
        scope 22 {
            debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
            scope 23 {
            }
        }
        scope 24 {
            debug val => const ();
            scope 25 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb7, 2: bb11, 3: bb15, 4: bb19, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _24 = &(((*_1) as Text).0: std::string::String);
        _27 = <String as Deref>::deref(_24) -> [return: bb23, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = const "{}";
        _5 = Formatter::<'_>::write_str(_2, _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <Result<(), std::fmt::Error> as Try>::branch(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb27, 1: bb6, otherwise: bb2];
    }

    bb6: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb7: {
        _10 = const "{/}";
        _9 = Formatter::<'_>::write_str(_2, _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = <Result<(), std::fmt::Error> as Try>::branch(move _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb27, 1: bb10, otherwise: bb2];
    }

    bb10: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb11: {
        _14 = const "{//}";
        _13 = Formatter::<'_>::write_str(_2, _14) -> [return: bb12, unwind continue];
    }

    bb12: {
        _12 = <Result<(), std::fmt::Error> as Try>::branch(move _13) -> [return: bb13, unwind continue];
    }

    bb13: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb27, 1: bb14, otherwise: bb2];
    }

    bb14: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb15: {
        _18 = const "{.}";
        _17 = Formatter::<'_>::write_str(_2, _18) -> [return: bb16, unwind continue];
    }

    bb16: {
        _16 = <Result<(), std::fmt::Error> as Try>::branch(move _17) -> [return: bb17, unwind continue];
    }

    bb17: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb27, 1: bb18, otherwise: bb2];
    }

    bb18: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb19: {
        _22 = const "{/.}";
        _21 = Formatter::<'_>::write_str(_2, _22) -> [return: bb20, unwind continue];
    }

    bb20: {
        _20 = <Result<(), std::fmt::Error> as Try>::branch(move _21) -> [return: bb21, unwind continue];
    }

    bb21: {
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb27, 1: bb22, otherwise: bb2];
    }

    bb22: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb23: {
        _26 = Formatter::<'_>::write_str(_2, _27) -> [return: bb24, unwind continue];
    }

    bb24: {
        _25 = <Result<(), std::fmt::Error> as Try>::branch(move _26) -> [return: bb25, unwind continue];
    }

    bb25: {
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb27, 1: bb26, otherwise: bb2];
    }

    bb26: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb28, unwind continue];
    }

    bb27: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        goto -> bb28;
    }

    bb28: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:24:10: 24:15>::fmt(_1: &ExecutionMode, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Batch";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "OneByOne";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:24:17: 24:22>::clone(_1: &ExecutionMode) -> ExecutionMode {
    debug self => _1;
    let mut _0: exec::ExecutionMode;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:24:30: 24:39>::eq(_1: &ExecutionMode, _2: &ExecutionMode) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:36:10: 36:15>::fmt(_1: &CommandTemplate, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::vec::Vec<exec::ArgumentTemplate>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&exec::ExecutionMode;
    let _10: &exec::ExecutionMode;

    bb0: {
        _3 = const "CommandTemplate";
        _4 = const "args";
        _6 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "mode";
        _10 = &((*_1).1: exec::ExecutionMode);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:36:17: 36:22>::clone(_1: &CommandTemplate) -> CommandTemplate {
    debug self => _1;
    let mut _0: exec::CommandTemplate;
    let mut _2: std::vec::Vec<exec::ArgumentTemplate>;
    let _3: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _4: exec::ExecutionMode;
    let _5: &exec::ExecutionMode;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _2 = <Vec<ArgumentTemplate> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: exec::ExecutionMode);
        _4 = <ExecutionMode as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = CommandTemplate { args: move _2, mode: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn exec::<impl at src/exec/mod.rs:36:24: 36:33>::eq(_1: &CommandTemplate, _2: &CommandTemplate) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _5: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _6: &exec::ExecutionMode;
    let mut _7: &exec::ExecutionMode;

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _5 = &((*_2).0: std::vec::Vec<exec::ArgumentTemplate>);
        _3 = <Vec<ArgumentTemplate> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &((*_1).1: exec::ExecutionMode);
        _7 = &((*_2).1: exec::ExecutionMode);
        _0 = <ExecutionMode as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::new(_1: I) -> CommandTemplate {
    debug input => _1;
    let mut _0: exec::CommandTemplate;
    let mut _2: exec::ExecutionMode;

    bb0: {
        _2 = ExecutionMode::OneByOne;
        _0 = CommandTemplate::build::<I, S>(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::new_batch(_1: I) -> Result<CommandTemplate, anyhow::Error> {
    debug input => _1;
    let mut _0: std::result::Result<exec::CommandTemplate, anyhow::Error>;
    let _2: exec::CommandTemplate;
    let mut _3: exec::ExecutionMode;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: &exec::CommandTemplate;
    let mut _7: anyhow::Error;
    let mut _8: bool;
    let _9: &exec::ArgumentTemplate;
    let mut _10: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _11: anyhow::Error;
    let mut _12: exec::CommandTemplate;
    scope 1 {
        debug cmd => _2;
    }

    bb0: {
        _3 = ExecutionMode::Batch;
        _2 = CommandTemplate::build::<I, S>(move _1, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _5 = CommandTemplate::number_of_tokens(move _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _4 = Gt(move _5, const 1_usize);
        switchInt(move _4) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _7 = new_adhoc::<&str>(const "Only one placeholder allowed for batch commands") -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _0 = Result::<CommandTemplate, anyhow::Error>::Err(move _7);
        goto -> bb11;
    }

    bb5: {
        _10 = &(_2.0: std::vec::Vec<exec::ArgumentTemplate>);
        _9 = <Vec<ArgumentTemplate> as Index<usize>>::index(move _10, const 0_usize) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _8 = ArgumentTemplate::has_tokens(_9) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        switchInt(move _8) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        _11 = new_adhoc::<&str>(const "First argument of exec-batch is expected to be a fixed executable") -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _0 = Result::<CommandTemplate, anyhow::Error>::Err(move _11);
        goto -> bb11;
    }

    bb10: {
        _12 = move _2;
        _0 = Result::<CommandTemplate, anyhow::Error>::Ok(move _12);
        goto -> bb12;
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::build(_1: I, _2: ExecutionMode) -> CommandTemplate {
    debug input => _1;
    debug mode => _2;
    let mut _0: exec::CommandTemplate;
    let mut _3: std::vec::Vec<exec::ArgumentTemplate>;
    let mut _5: <I as std::iter::IntoIterator>::IntoIter;
    let mut _6: I;
    let mut _8: std::option::Option<S>;
    let mut _9: &mut <I as std::iter::IntoIterator>::IntoIter;
    let mut _10: isize;
    let mut _13: &S;
    let mut _16: regex::Matches<'_, '_>;
    let mut _17: regex::Matches<'_, '_>;
    let _18: &regex::Regex;
    let _19: &exec::CommandTemplate::build::PLACEHOLDER_PATTERN;
    let mut _21: std::option::Option<regex::Match<'_>>;
    let mut _22: &mut regex::Matches<'_, '_>;
    let mut _23: isize;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: &regex::Match<'_>;
    let mut _28: usize;
    let _29: ();
    let mut _30: &mut std::vec::Vec<exec::token::Token>;
    let mut _31: exec::token::Token;
    let mut _32: std::string::String;
    let _33: &str;
    let mut _34: std::ops::Range<usize>;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: &regex::Match<'_>;
    let mut _38: usize;
    let mut _39: &regex::Match<'_>;
    let _40: ();
    let mut _41: &str;
    let mut _42: &regex::Match<'_>;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: &mut std::vec::Vec<exec::token::Token>;
    let mut _49: exec::token::Token;
    let mut _50: &mut std::vec::Vec<exec::token::Token>;
    let mut _51: exec::token::Token;
    let mut _52: &mut std::vec::Vec<exec::token::Token>;
    let mut _53: exec::token::Token;
    let mut _54: &mut std::vec::Vec<exec::token::Token>;
    let mut _55: exec::token::Token;
    let mut _56: &mut std::vec::Vec<exec::token::Token>;
    let mut _57: exec::token::Token;
    let _58: !;
    let mut _59: bool;
    let mut _60: &std::vec::Vec<exec::token::Token>;
    let _61: ();
    let mut _62: &mut std::vec::Vec<exec::ArgumentTemplate>;
    let mut _63: exec::ArgumentTemplate;
    let mut _64: std::string::String;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _68: ();
    let mut _69: &mut std::vec::Vec<exec::token::Token>;
    let mut _70: exec::token::Token;
    let mut _71: std::string::String;
    let _72: &str;
    let mut _73: std::ops::RangeFrom<usize>;
    let mut _74: usize;
    let _75: ();
    let mut _76: &mut std::vec::Vec<exec::ArgumentTemplate>;
    let mut _77: exec::ArgumentTemplate;
    let mut _78: std::vec::Vec<exec::token::Token>;
    let mut _79: bool;
    let _80: ();
    let mut _81: &mut std::vec::Vec<exec::ArgumentTemplate>;
    let mut _82: exec::ArgumentTemplate;
    let mut _83: std::vec::Vec<exec::token::Token>;
    let mut _84: std::boxed::Box<[exec::token::Token]>;
    let mut _85: usize;
    let mut _86: usize;
    let mut _87: *mut u8;
    let mut _88: std::boxed::Box<[exec::token::Token; 1]>;
    let mut _89: exec::token::Token;
    let mut _90: std::vec::Vec<exec::ArgumentTemplate>;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: *const [exec::token::Token; 1];
    scope 1 {
        debug args => _3;
        let mut _4: bool;
        scope 2 {
            debug has_placeholder => _4;
            let mut _7: <I as std::iter::IntoIterator>::IntoIter;
            let mut _95: *const ();
            let mut _96: usize;
            let mut _97: usize;
            let mut _98: usize;
            let mut _99: usize;
            let mut _100: bool;
            scope 3 {
                debug iter => _7;
                let _11: S;
                scope 4 {
                    debug arg => _11;
                    let _12: &str;
                    scope 5 {
                        debug arg => _12;
                        let mut _14: std::vec::Vec<exec::token::Token>;
                        scope 6 {
                            debug tokens => _14;
                            let mut _15: usize;
                            scope 7 {
                                debug start => _15;
                                let mut _20: regex::Matches<'_, '_>;
                                scope 8 {
                                    debug iter => _20;
                                    let _24: regex::Match<'_>;
                                    scope 9 {
                                        debug placeholder => _24;
                                        let mut _91: &&str;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 10 {
            }
        }
    }

    bb0: {
        _93 = const false;
        _92 = const false;
        _93 = const true;
        _3 = Vec::<ArgumentTemplate>::new() -> [return: bb1, unwind: bb65];
    }

    bb1: {
        _4 = const false;
        _93 = const false;
        _6 = move _1;
        _5 = <I as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb60];
    }

    bb2: {
        _7 = move _5;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <<I as IntoIterator>::IntoIter as Iterator>::next(_9) -> [return: bb4, unwind: bb59];
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _11 = move ((_8 as Some).0: S);
        _13 = &_11;
        _12 = <S as AsRef<str>>::as_ref(move _13) -> [return: bb8, unwind: bb58];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_7) -> [return: bb53, unwind: bb60];
    }

    bb8: {
        _14 = Vec::<Token>::new() -> [return: bb9, unwind: bb58];
    }

    bb9: {
        _92 = const true;
        _15 = const 0_usize;
        _19 = const {alloc1: &PLACEHOLDER_PATTERN};
        _18 = <PLACEHOLDER_PATTERN as Deref>::deref(_19) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        _17 = regex::Regex::find_iter(_18, _12) -> [return: bb11, unwind: bb63];
    }

    bb11: {
        _16 = <regex::Matches<'_, '_> as IntoIterator>::into_iter(move _17) -> [return: bb12, unwind: bb63];
    }

    bb12: {
        _20 = move _16;
        goto -> bb13;
    }

    bb13: {
        _22 = &mut _20;
        _21 = <regex::Matches<'_, '_> as Iterator>::next(_22) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _24 = ((_21 as Some).0: regex::Match<'_>);
        _27 = &_24;
        _26 = regex::Match::<'_>::start(move _27) -> [return: bb17, unwind: bb63];
    }

    bb16: {
        _60 = &_14;
        _59 = Vec::<Token>::is_empty(move _60) -> [return: bb41, unwind: bb63];
    }

    bb17: {
        _28 = _15;
        _25 = Gt(move _26, move _28);
        switchInt(move _25) -> [0: bb22, otherwise: bb18];
    }

    bb18: {
        _30 = &mut _14;
        _35 = _15;
        _37 = &_24;
        _36 = regex::Match::<'_>::start(move _37) -> [return: bb19, unwind: bb63];
    }

    bb19: {
        _34 = std::ops::Range::<usize> { start: move _35, end: move _36 };
        _33 = <str as Index<std::ops::Range<usize>>>::index(_12, move _34) -> [return: bb20, unwind: bb63];
    }

    bb20: {
        _32 = <str as ToOwned>::to_owned(_33) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        _31 = Token::Text(move _32);
        _29 = Vec::<Token>::push(move _30, move _31) -> [return: bb67, unwind: bb63];
    }

    bb22: {
        _39 = &_24;
        _38 = regex::Match::<'_>::end(move _39) -> [return: bb23, unwind: bb63];
    }

    bb23: {
        _15 = move _38;
        _42 = &_24;
        _41 = regex::Match::<'_>::as_str(move _42) -> [return: bb24, unwind: bb63];
    }

    bb24: {
        _47 = <str as PartialEq>::eq(_41, const "{}") -> [return: bb39, unwind: bb63];
    }

    bb25: {
        _48 = &mut _14;
        _49 = Token::Placeholder;
        _40 = Vec::<Token>::push(move _48, move _49) -> [return: bb68, unwind: bb63];
    }

    bb26: {
        _46 = <str as PartialEq>::eq(_41, const "{.}") -> [return: bb38, unwind: bb63];
    }

    bb27: {
        _50 = &mut _14;
        _51 = Token::NoExt;
        _40 = Vec::<Token>::push(move _50, move _51) -> [return: bb69, unwind: bb63];
    }

    bb28: {
        _45 = <str as PartialEq>::eq(_41, const "{/}") -> [return: bb37, unwind: bb63];
    }

    bb29: {
        _52 = &mut _14;
        _53 = Token::Basename;
        _40 = Vec::<Token>::push(move _52, move _53) -> [return: bb70, unwind: bb63];
    }

    bb30: {
        _44 = <str as PartialEq>::eq(_41, const "{//}") -> [return: bb36, unwind: bb63];
    }

    bb31: {
        _54 = &mut _14;
        _55 = Token::Parent;
        _40 = Vec::<Token>::push(move _54, move _55) -> [return: bb71, unwind: bb63];
    }

    bb32: {
        _43 = <str as PartialEq>::eq(_41, const "{/.}") -> [return: bb35, unwind: bb63];
    }

    bb33: {
        _56 = &mut _14;
        _57 = Token::BasenameNoExt;
        _40 = Vec::<Token>::push(move _56, move _57) -> [return: bb72, unwind: bb63];
    }

    bb34: {
        _91 = const _;
        _58 = core::panicking::unreachable_display::<&str>(_91) -> bb63;
    }

    bb35: {
        switchInt(move _43) -> [0: bb34, otherwise: bb33];
    }

    bb36: {
        switchInt(move _44) -> [0: bb32, otherwise: bb31];
    }

    bb37: {
        switchInt(move _45) -> [0: bb30, otherwise: bb29];
    }

    bb38: {
        switchInt(move _46) -> [0: bb28, otherwise: bb27];
    }

    bb39: {
        switchInt(move _47) -> [0: bb26, otherwise: bb25];
    }

    bb40: {
        _4 = const true;
        goto -> bb13;
    }

    bb41: {
        switchInt(move _59) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        _62 = &mut _3;
        _64 = <str as ToOwned>::to_owned(_12) -> [return: bb43, unwind: bb63];
    }

    bb43: {
        _63 = ArgumentTemplate::Text(move _64);
        _61 = Vec::<ArgumentTemplate>::push(move _62, move _63) -> [return: bb44, unwind: bb63];
    }

    bb44: {
        drop(_14) -> [return: bb52, unwind: bb58];
    }

    bb45: {
        _66 = _15;
        _67 = core::str::<impl str>::len(_12) -> [return: bb46, unwind: bb63];
    }

    bb46: {
        _65 = Lt(move _66, move _67);
        switchInt(move _65) -> [0: bb50, otherwise: bb47];
    }

    bb47: {
        _69 = &mut _14;
        _74 = _15;
        _73 = RangeFrom::<usize> { start: move _74 };
        _72 = <str as Index<RangeFrom<usize>>>::index(_12, move _73) -> [return: bb48, unwind: bb63];
    }

    bb48: {
        _71 = <str as ToOwned>::to_owned(_72) -> [return: bb49, unwind: bb63];
    }

    bb49: {
        _70 = Token::Text(move _71);
        _68 = Vec::<Token>::push(move _69, move _70) -> [return: bb73, unwind: bb63];
    }

    bb50: {
        _76 = &mut _3;
        _92 = const false;
        _78 = move _14;
        _77 = ArgumentTemplate::Tokens(move _78);
        _75 = Vec::<ArgumentTemplate>::push(move _76, move _77) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        _92 = const false;
        drop(_11) -> [return: bb3, unwind: bb59];
    }

    bb52: {
        _92 = const false;
        drop(_11) -> [return: bb3, unwind: bb59];
    }

    bb53: {
        _79 = _4;
        switchInt(move _79) -> [0: bb54, otherwise: bb57];
    }

    bb54: {
        _81 = &mut _3;
        _85 = SizeOf([exec::token::Token; 1]);
        _86 = AlignOf([exec::token::Token; 1]);
        _87 = alloc::alloc::exchange_malloc(move _85, move _86) -> [return: bb55, unwind: bb60];
    }

    bb55: {
        _88 = ShallowInitBox(move _87, [exec::token::Token; 1]);
        _89 = Token::Placeholder;
        _94 = (((_88.0: std::ptr::Unique<[exec::token::Token; 1]>).0: std::ptr::NonNull<[exec::token::Token; 1]>).0: *const [exec::token::Token; 1]);
        _95 = _94 as *const () (PtrToPtr);
        _96 = _95 as usize (Transmute);
        _97 = AlignOf([exec::token::Token; 1]);
        _98 = Sub(_97, const 1_usize);
        _99 = BitAnd(_96, _98);
        _100 = Eq(_99, const 0_usize);
        assert(_100, "misaligned pointer dereference: address must be a multiple of {} but is {}", _97, _96) -> [success: bb66, unwind unreachable];
    }

    bb56: {
        _82 = ArgumentTemplate::Tokens(move _83);
        _80 = Vec::<ArgumentTemplate>::push(move _81, move _82) -> [return: bb74, unwind: bb60];
    }

    bb57: {
        _90 = move _3;
        _0 = CommandTemplate { args: move _90, mode: _2 };
        return;
    }

    bb58 (cleanup): {
        drop(_11) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_7) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_3) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_92) -> [0: bb58, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_1) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_93) -> [0: bb61, otherwise: bb64];
    }

    bb66: {
        (*_94) = [move _89];
        _84 = move _88 as std::boxed::Box<[exec::token::Token]> (PointerCoercion(Unsize));
        _83 = slice::<impl [Token]>::into_vec::<std::alloc::Global>(move _84) -> [return: bb56, unwind: bb60];
    }

    bb67: {
        goto -> bb22;
    }

    bb68: {
        goto -> bb40;
    }

    bb69: {
        goto -> bb40;
    }

    bb70: {
        goto -> bb40;
    }

    bb71: {
        goto -> bb40;
    }

    bb72: {
        goto -> bb40;
    }

    bb73: {
        goto -> bb50;
    }

    bb74: {
        goto -> bb57;
    }
}

alloc1 (static: PLACEHOLDER_PATTERN, size: 0, align: 1) {}

promoted[0] in exec::<impl at src/exec/mod.rs:42:1: 42:21>::build: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Unhandled placeholder";
        _0 = &_1;
        return;
    }
}

static PLACEHOLDER_PATTERN: PLACEHOLDER_PATTERN = {
    let mut _0: exec::CommandTemplate::build::PLACEHOLDER_PATTERN;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = PLACEHOLDER_PATTERN { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::build::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &PLACEHOLDER_PATTERN) -> &regex::Regex {
    debug self => _1;
    let mut _0: &regex::Regex;

    bb0: {
        _0 = <PLACEHOLDER_PATTERN as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::build::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> regex::Regex {
    let mut _0: regex::Regex;
    let mut _1: std::result::Result<regex::Regex, regex::Error>;
    let _2: &str;

    bb0: {
        _2 = const "\\{(/?\\.?|//)\\}";
        _1 = regex::Regex::new(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<regex::Regex, regex::Error>::unwrap(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::build::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &regex::Regex {
    let mut _0: &regex::Regex;
    let _1: &lazy_static::lazy::Lazy<regex::Regex>;

    bb0: {
        _1 = const {alloc2: &Lazy<regex::Regex>};
        _0 = Lazy::<regex::Regex>::get::<fn() -> regex::Regex {<PLACEHOLDER_PATTERN as Deref>::deref::__static_ref_initialize}>(_1, <PLACEHOLDER_PATTERN as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc2 (static: <PLACEHOLDER_PATTERN as Deref>::deref::__stability::LAZY, size: 56, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x30 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

static exec::<impl at src/exec/mod.rs:42:1: 42:21>::build::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<regex::Regex> = {
    let mut _0: lazy_static::lazy::Lazy<regex::Regex>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::build::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &PLACEHOLDER_PATTERN) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &regex::Regex;
    scope 1 {
    }

    bb0: {
        _2 = <PLACEHOLDER_PATTERN as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::number_of_tokens(_1: &CommandTemplate) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: std::iter::Filter<std::slice::Iter<'_, exec::ArgumentTemplate>, {closure@src/exec/mod.rs:129:33: 129:38}>;
    let mut _3: std::slice::Iter<'_, exec::ArgumentTemplate>;
    let _4: &[exec::ArgumentTemplate];
    let mut _5: &std::vec::Vec<exec::ArgumentTemplate>;

    bb0: {
        _5 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _4 = <Vec<ArgumentTemplate> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::slice::<impl [ArgumentTemplate]>::iter(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <std::slice::Iter<'_, ArgumentTemplate> as Iterator>::filter::<{closure@src/exec/mod.rs:129:33: 129:38}>(move _3, const ZeroSized: {closure@src/exec/mod.rs:129:33: 129:38}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = <Filter<std::slice::Iter<'_, ArgumentTemplate>, {closure@src/exec/mod.rs:129:33: 129:38}> as Iterator>::count(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::number_of_tokens::{closure#0}(_1: &mut {closure@src/exec/mod.rs:129:33: 129:38}, _2: &&ArgumentTemplate) -> bool {
    debug arg => _2;
    let mut _0: bool;
    let mut _3: &exec::ArgumentTemplate;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = ArgumentTemplate::has_tokens(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::generate_and_execute(_1: &CommandTemplate, _2: &Path, _3: Arc<Mutex<()>>) -> exit_codes::ExitCode {
    debug self => _1;
    debug input => _2;
    debug out_perm => _3;
    let mut _0: exit_codes::ExitCode;
    let _4: &std::path::Path;
    let mut _6: std::ffi::OsString;
    let _7: &exec::ArgumentTemplate;
    let mut _8: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _9: &&std::path::Path;
    let mut _10: std::slice::Iter<'_, exec::ArgumentTemplate>;
    let _11: &[exec::ArgumentTemplate];
    let mut _12: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _13: std::ops::RangeFrom<usize>;
    let mut _15: std::option::Option<&exec::ArgumentTemplate>;
    let mut _16: &mut std::slice::Iter<'_, exec::ArgumentTemplate>;
    let mut _17: isize;
    let _19: &mut std::process::Command;
    let mut _20: &mut std::process::Command;
    let mut _21: std::ffi::OsString;
    let mut _22: &&std::path::Path;
    let mut _23: std::process::Command;
    let _24: &std::sync::Mutex<()>;
    let _25: &std::sync::Arc<std::sync::Mutex<()>>;
    let mut _26: bool;
    let mut _27: bool;
    scope 1 {
        debug input => _4;
        let mut _5: std::process::Command;
        scope 2 {
            debug cmd => _5;
            let mut _14: std::slice::Iter<'_, exec::ArgumentTemplate>;
            scope 3 {
                debug iter => _14;
                let _18: &exec::ArgumentTemplate;
                scope 4 {
                    debug arg => _18;
                }
            }
        }
    }

    bb0: {
        _27 = const false;
        _26 = const false;
        _4 = strip_current_dir(_2) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _8 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _7 = <Vec<ArgumentTemplate> as Index<usize>>::index(move _8, const 0_usize) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _9 = &_4;
        _6 = ArgumentTemplate::generate::<&&Path>(_7, move _9) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _5 = Command::new::<OsString>(move _6) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _27 = const true;
        _12 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _13 = RangeFrom::<usize> { start: const 1_usize };
        _11 = <Vec<ArgumentTemplate> as Index<RangeFrom<usize>>>::index(move _12, move _13) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _10 = <&[ArgumentTemplate] as IntoIterator>::into_iter(_11) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _14 = move _10;
        goto -> bb7;
    }

    bb7: {
        _16 = &mut _14;
        _15 = <std::slice::Iter<'_, ArgumentTemplate> as Iterator>::next(_16) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _18 = ((_15 as Some).0: &exec::ArgumentTemplate);
        _20 = &mut _5;
        _22 = &_4;
        _21 = ArgumentTemplate::generate::<&&Path>(_18, move _22) -> [return: bb12, unwind: bb21];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _27 = const false;
        _26 = const true;
        _23 = move _5;
        _25 = &_3;
        _24 = <Arc<Mutex<()>> as Deref>::deref(_25) -> [return: bb13, unwind: bb19];
    }

    bb12: {
        _19 = Command::arg::<OsString>(move _20, move _21) -> [return: bb22, unwind: bb21];
    }

    bb13: {
        _26 = const false;
        _0 = execute_command(move _23, _24) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _26 = const false;
        _27 = const false;
        drop(_3) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_23) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_26) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_27) -> [0: bb16, otherwise: bb20];
    }

    bb22: {
        goto -> bb7;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::in_batch_mode(_1: &CommandTemplate) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &exec::ExecutionMode;
    let mut _3: &exec::ExecutionMode;

    bb0: {
        _2 = &((*_1).1: exec::ExecutionMode);
        _3 = const _;
        _0 = <ExecutionMode as PartialEq>::eq(move _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in exec::<impl at src/exec/mod.rs:42:1: 42:21>::in_batch_mode: &ExecutionMode = {
    let mut _0: &exec::ExecutionMode;
    let mut _1: exec::ExecutionMode;

    bb0: {
        _1 = ExecutionMode::Batch;
        _0 = &_1;
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:42:1: 42:21>::generate_and_execute_batch(_1: &CommandTemplate, _2: I) -> exit_codes::ExitCode {
    debug self => _1;
    debug paths => _2;
    let mut _0: exit_codes::ExitCode;
    let mut _3: std::process::Command;
    let mut _4: std::ffi::OsString;
    let _5: &exec::ArgumentTemplate;
    let mut _6: &std::vec::Vec<exec::ArgumentTemplate>;
    let _7: &mut std::process::Command;
    let mut _8: &mut std::process::Command;
    let mut _9: std::process::Stdio;
    let _10: &mut std::process::Command;
    let mut _11: &mut std::process::Command;
    let mut _12: std::process::Stdio;
    let _13: &mut std::process::Command;
    let mut _14: &mut std::process::Command;
    let mut _15: std::process::Stdio;
    let mut _17: I;
    let mut _19: std::slice::Iter<'_, exec::ArgumentTemplate>;
    let _20: &[exec::ArgumentTemplate];
    let mut _21: &std::vec::Vec<exec::ArgumentTemplate>;
    let mut _22: std::ops::RangeFrom<usize>;
    let mut _24: std::option::Option<&exec::ArgumentTemplate>;
    let mut _25: &mut std::slice::Iter<'_, exec::ArgumentTemplate>;
    let mut _26: isize;
    let mut _28: bool;
    let _29: ();
    let mut _30: &mut [std::path::PathBuf];
    let mut _31: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _32: std::slice::IterMut<'_, std::path::PathBuf>;
    let mut _33: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _35: std::option::Option<&mut std::path::PathBuf>;
    let mut _36: &mut std::slice::IterMut<'_, std::path::PathBuf>;
    let mut _37: isize;
    let _39: &mut std::process::Command;
    let mut _40: &mut std::process::Command;
    let mut _41: std::ffi::OsString;
    let mut _42: &std::path::Path;
    let _43: &std::path::Path;
    let mut _44: &std::path::PathBuf;
    let _45: &mut std::process::Command;
    let mut _46: &mut std::process::Command;
    let mut _47: std::ffi::OsString;
    let mut _48: bool;
    let mut _49: std::process::Command;
    let _50: &std::sync::Mutex<()>;
    let _51: std::sync::Mutex<()>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    scope 1 {
        debug cmd => _3;
        let mut _16: std::vec::Vec<std::path::PathBuf>;
        scope 2 {
            debug paths => _16;
            let mut _18: bool;
            scope 3 {
                debug has_path => _18;
                let mut _23: std::slice::Iter<'_, exec::ArgumentTemplate>;
                scope 4 {
                    debug iter => _23;
                    let _27: &exec::ArgumentTemplate;
                    scope 5 {
                        debug arg => _27;
                        let mut _34: std::slice::IterMut<'_, std::path::PathBuf>;
                        scope 6 {
                            debug iter => _34;
                            let _38: &mut std::path::PathBuf;
                            scope 7 {
                                debug path => _38;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _54 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const true;
        _6 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _5 = <Vec<ArgumentTemplate> as Index<usize>>::index(move _6, const 0_usize) -> [return: bb1, unwind: bb47];
    }

    bb1: {
        _4 = ArgumentTemplate::generate::<&str>(_5, const "") -> [return: bb2, unwind: bb47];
    }

    bb2: {
        _3 = Command::new::<OsString>(move _4) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        _52 = const true;
        _8 = &mut _3;
        _9 = Stdio::inherit() -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _7 = Command::stdin::<Stdio>(move _8, move _9) -> [return: bb5, unwind: bb45];
    }

    bb5: {
        _11 = &mut _3;
        _12 = Stdio::inherit() -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _10 = Command::stdout::<Stdio>(move _11, move _12) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        _14 = &mut _3;
        _15 = Stdio::inherit() -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _13 = Command::stderr::<Stdio>(move _14, move _15) -> [return: bb9, unwind: bb45];
    }

    bb9: {
        _54 = const false;
        _17 = move _2;
        _16 = <I as Iterator>::collect::<Vec<PathBuf>>(move _17) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        _18 = const false;
        _21 = &((*_1).0: std::vec::Vec<exec::ArgumentTemplate>);
        _22 = RangeFrom::<usize> { start: const 1_usize };
        _20 = <Vec<ArgumentTemplate> as Index<RangeFrom<usize>>>::index(move _21, move _22) -> [return: bb11, unwind: bb39];
    }

    bb11: {
        _19 = <&[ArgumentTemplate] as IntoIterator>::into_iter(_20) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        _23 = move _19;
        goto -> bb13;
    }

    bb13: {
        _25 = &mut _23;
        _24 = <std::slice::Iter<'_, ArgumentTemplate> as Iterator>::next(_25) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        _27 = ((_24 as Some).0: &exec::ArgumentTemplate);
        _28 = ArgumentTemplate::has_tokens(_27) -> [return: bb18, unwind: bb39];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _48 = _18;
        switchInt(move _48) -> [0: bb33, otherwise: bb32];
    }

    bb18: {
        switchInt(move _28) -> [0: bb30, otherwise: bb19];
    }

    bb19: {
        _31 = &mut _16;
        _30 = <Vec<PathBuf> as DerefMut>::deref_mut(move _31) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        _29 = slice::<impl [PathBuf]>::sort(_30) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        _33 = &mut _16;
        _32 = <&mut Vec<PathBuf> as IntoIterator>::into_iter(move _33) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _34 = move _32;
        goto -> bb23;
    }

    bb23: {
        _36 = &mut _34;
        _35 = <std::slice::IterMut<'_, PathBuf> as Iterator>::next(_36) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb13, 1: bb25, otherwise: bb16];
    }

    bb25: {
        _38 = move ((_35 as Some).0: &mut std::path::PathBuf);
        _40 = &mut _3;
        _44 = &(*_38);
        _43 = <PathBuf as Deref>::deref(move _44) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _42 = strip_current_dir(_43) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        _41 = ArgumentTemplate::generate::<&Path>(_27, move _42) -> [return: bb28, unwind: bb39];
    }

    bb28: {
        _39 = Command::arg::<OsString>(move _40, move _41) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        _18 = const true;
        goto -> bb23;
    }

    bb30: {
        _46 = &mut _3;
        _47 = ArgumentTemplate::generate::<&str>(_27, const "") -> [return: bb31, unwind: bb39];
    }

    bb31: {
        _45 = Command::arg::<OsString>(move _46, move _47) -> [return: bb48, unwind: bb39];
    }

    bb32: {
        _52 = const false;
        _53 = const true;
        _49 = move _3;
        _51 = Mutex::<()>::new(const ()) -> [return: bb34, unwind: bb43];
    }

    bb33: {
        _0 = exit_codes::ExitCode::Success;
        goto -> bb36;
    }

    bb34: {
        _50 = &_51;
        _53 = const false;
        _0 = execute_command(move _49, _50) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        _53 = const false;
        goto -> bb36;
    }

    bb36: {
        drop(_16) -> [return: bb37, unwind: bb45];
    }

    bb37: {
        switchInt(_52) -> [0: bb38, otherwise: bb41];
    }

    bb38: {
        _52 = const false;
        return;
    }

    bb39 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41: {
        drop(_3) -> [return: bb38, unwind: bb47];
    }

    bb42 (cleanup): {
        drop(_49) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_53) -> [0: bb39, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_3) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_52) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_2) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_54) -> [0: bb40, otherwise: bb46];
    }

    bb48: {
        goto -> bb13;
    }
}

fn exec::<impl at src/exec/mod.rs:190:10: 190:15>::clone(_1: &ArgumentTemplate) -> ArgumentTemplate {
    debug self => _1;
    let mut _0: exec::ArgumentTemplate;
    let mut _2: isize;
    let _3: &std::vec::Vec<exec::token::Token>;
    let mut _4: std::vec::Vec<exec::token::Token>;
    let _5: &std::string::String;
    let mut _6: std::string::String;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Text).0: std::string::String);
        _6 = <String as Clone>::clone(_5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Tokens).0: std::vec::Vec<exec::token::Token>);
        _4 = <Vec<Token> as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = ArgumentTemplate::Tokens(move _4);
        goto -> bb6;
    }

    bb5: {
        _0 = ArgumentTemplate::Text(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:190:17: 190:22>::fmt(_1: &ArgumentTemplate, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::vec::Vec<exec::token::Token>;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&std::vec::Vec<exec::token::Token>;
    let _8: &std::string::String;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&std::string::String;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Text).0: std::string::String);
        _9 = const "Text";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Tokens).0: std::vec::Vec<exec::token::Token>);
        _5 = const "Tokens";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:190:24: 190:33>::eq(_1: &ArgumentTemplate, _2: &ArgumentTemplate) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&exec::ArgumentTemplate, &exec::ArgumentTemplate);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: &exec::ArgumentTemplate;
    let mut _15: &exec::ArgumentTemplate;
    let mut _16: &exec::ArgumentTemplate;
    let mut _17: &exec::ArgumentTemplate;
    let mut _18: &exec::ArgumentTemplate;
    let mut _19: &exec::ArgumentTemplate;
    let mut _20: &exec::ArgumentTemplate;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &std::vec::Vec<exec::token::Token>;
            let _11: &std::vec::Vec<exec::token::Token>;
            let _12: &std::string::String;
            let _13: &std::string::String;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _12;
                debug __arg1_0 => _13;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _14 = deref_copy (_6.0: &exec::ArgumentTemplate);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _15 = deref_copy (_6.1: &exec::ArgumentTemplate);
        _7 = discriminant((*_15));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _16 = deref_copy (_6.1: &exec::ArgumentTemplate);
        _8 = discriminant((*_16));
        switchInt(move _8) -> [1: bb7, otherwise: bb4];
    }

    bb6: {
        _17 = deref_copy (_6.0: &exec::ArgumentTemplate);
        _10 = &(((*_17) as Tokens).0: std::vec::Vec<exec::token::Token>);
        _18 = deref_copy (_6.1: &exec::ArgumentTemplate);
        _11 = &(((*_18) as Tokens).0: std::vec::Vec<exec::token::Token>);
        _0 = <Vec<Token> as PartialEq>::eq(_10, _11) -> [return: bb8, unwind continue];
    }

    bb7: {
        _19 = deref_copy (_6.0: &exec::ArgumentTemplate);
        _12 = &(((*_19) as Text).0: std::string::String);
        _20 = deref_copy (_6.1: &exec::ArgumentTemplate);
        _13 = &(((*_20) as Text).0: std::string::String);
        _0 = <String as PartialEq>::eq(_12, _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:196:1: 196:22>::has_tokens(_1: &ArgumentTemplate) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        _0 = Eq(_2, const 0_isize);
        return;
    }
}

fn exec::<impl at src/exec/mod.rs:196:1: 196:22>::generate(_1: &ArgumentTemplate, _2: impl AsRef<Path>) -> OsString {
    debug self => _1;
    debug path => _2;
    let mut _0: std::ffi::OsString;
    let mut _3: isize;
    let _4: &std::vec::Vec<exec::token::Token>;
    let mut _6: std::slice::Iter<'_, exec::token::Token>;
    let _8: ();
    let mut _9: std::option::Option<&exec::token::Token>;
    let mut _10: &mut std::slice::Iter<'_, exec::token::Token>;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: &mut std::ffi::OsString;
    let mut _15: &std::ffi::OsStr;
    let _16: &std::path::Path;
    let mut _17: &impl AsRef<Path>;
    let mut _18: &mut std::ffi::OsString;
    let mut _19: std::ffi::OsString;
    let _20: &std::path::Path;
    let _21: &std::path::PathBuf;
    let _22: std::path::PathBuf;
    let mut _23: &std::ffi::OsStr;
    let _24: &std::path::Path;
    let mut _25: &impl AsRef<Path>;
    let mut _26: &mut std::ffi::OsString;
    let mut _27: std::ffi::OsString;
    let _28: &std::path::Path;
    let mut _29: &impl AsRef<Path>;
    let mut _30: &mut std::ffi::OsString;
    let mut _31: std::ffi::OsString;
    let _32: &std::path::Path;
    let mut _33: &impl AsRef<Path>;
    let mut _34: &mut std::ffi::OsString;
    let mut _35: &std::path::Path;
    let mut _36: &impl AsRef<Path>;
    let mut _38: &mut std::ffi::OsString;
    let _39: &std::string::String;
    scope 1 {
        debug tokens => _4;
        let mut _5: std::ffi::OsString;
        scope 2 {
            debug s => _5;
            let mut _7: std::slice::Iter<'_, exec::token::Token>;
            scope 3 {
                debug iter => _7;
                let _12: &exec::token::Token;
                scope 4 {
                    debug token => _12;
                    let _37: &std::string::String;
                    scope 5 {
                        debug string => _37;
                    }
                }
            }
        }
    }
    scope 6 {
        debug text => _39;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _39 = &(((*_1) as Text).0: std::string::String);
        _0 = <OsString as From<&String>>::from(_39) -> [return: bb35, unwind: bb33];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Tokens).0: std::vec::Vec<exec::token::Token>);
        _5 = OsString::new() -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _6 = <&Vec<Token> as IntoIterator>::into_iter(_4) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        _7 = move _6;
        goto -> bb6;
    }

    bb6: {
        _10 = &mut _7;
        _9 = <std::slice::Iter<'_, Token> as Iterator>::next(_10) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb9, 1: bb8, otherwise: bb2];
    }

    bb8: {
        _12 = ((_9 as Some).0: &exec::token::Token);
        _13 = discriminant((*_12));
        switchInt(move _13) -> [0: bb27, 1: bb11, 2: bb24, 3: bb21, 4: bb14, 5: bb10, otherwise: bb2];
    }

    bb9: {
        _0 = move _5;
        goto -> bb29;
    }

    bb10: {
        _37 = &(((*_12) as Text).0: std::string::String);
        _38 = &mut _5;
        _8 = OsString::push::<&String>(move _38, _37) -> [return: bb36, unwind: bb32];
    }

    bb11: {
        _14 = &mut _5;
        _17 = &_2;
        _16 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _17) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _15 = basename(_16) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _8 = OsString::push::<&OsStr>(move _14, move _15) -> [return: bb37, unwind: bb32];
    }

    bb14: {
        _18 = &mut _5;
        _25 = &_2;
        _24 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _25) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _23 = basename(_24) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _22 = <PathBuf as From<&OsStr>>::from(move _23) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _21 = &_22;
        _20 = <PathBuf as Deref>::deref(_21) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _19 = remove_extension(_20) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _8 = OsString::push::<OsString>(move _18, move _19) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        drop(_22) -> [return: bb6, unwind: bb32];
    }

    bb21: {
        _26 = &mut _5;
        _29 = &_2;
        _28 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _29) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _27 = remove_extension(_28) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _8 = OsString::push::<OsString>(move _26, move _27) -> [return: bb38, unwind: bb32];
    }

    bb24: {
        _30 = &mut _5;
        _33 = &_2;
        _32 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _33) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _31 = dirname(_32) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _8 = OsString::push::<OsString>(move _30, move _31) -> [return: bb39, unwind: bb32];
    }

    bb27: {
        _34 = &mut _5;
        _36 = &_2;
        _35 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _36) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _8 = OsString::push::<&Path>(move _34, move _35) -> [return: bb40, unwind: bb32];
    }

    bb29: {
        drop(_2) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_22) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_5) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        goto -> bb29;
    }

    bb36: {
        goto -> bb6;
    }

    bb37: {
        goto -> bb6;
    }

    bb38: {
        goto -> bb6;
    }

    bb39: {
        goto -> bb6;
    }

    bb40: {
        goto -> bb6;
    }
}

fn exit_codes::<impl at src/exit_codes.rs:1:10: 1:15>::fmt(_1: &exit_codes::ExitCode, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "KilledBySigint";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Success";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "GeneralError";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn exit_codes::<impl at src/exit_codes.rs:1:17: 1:22>::clone(_1: &exit_codes::ExitCode) -> exit_codes::ExitCode {
    debug self => _1;
    let mut _0: exit_codes::ExitCode;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn exit_codes::<impl at src/exit_codes.rs:1:30: 1:39>::eq(_1: &exit_codes::ExitCode, _2: &exit_codes::ExitCode) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn exit_codes::<impl at src/exit_codes.rs:8:1: 8:28>::into(_1: exit_codes::ExitCode) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 130_i32;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 0_i32;
        goto -> bb5;
    }

    bb4: {
        _0 = const 1_i32;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn exit_codes::<impl at src/exit_codes.rs:18:1: 18:14>::is_error(_1: &exit_codes::ExitCode) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &exit_codes::ExitCode;

    bb0: {
        _2 = const _;
        _0 = <exit_codes::ExitCode as PartialEq>::ne(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in exit_codes::<impl at src/exit_codes.rs:18:1: 18:14>::is_error: &exit_codes::ExitCode = {
    let mut _0: &exit_codes::ExitCode;
    let mut _1: exit_codes::ExitCode;

    bb0: {
        _1 = exit_codes::ExitCode::Success;
        _0 = &_1;
        return;
    }
}

fn merge_exitcodes(_1: &[exit_codes::ExitCode]) -> exit_codes::ExitCode {
    debug results => _1;
    let mut _0: exit_codes::ExitCode;
    let mut _2: bool;
    let mut _3: &mut std::slice::Iter<'_, exit_codes::ExitCode>;
    let mut _4: std::slice::Iter<'_, exit_codes::ExitCode>;

    bb0: {
        _4 = core::slice::<impl [exit_codes::ExitCode]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _2 = <std::slice::Iter<'_, exit_codes::ExitCode> as Iterator>::any::<for<'a> fn(&'a exit_codes::ExitCode) -> bool {exit_codes::ExitCode::is_error}>(move _3, exit_codes::ExitCode::is_error) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = exit_codes::ExitCode::GeneralError;
        goto -> bb5;
    }

    bb4: {
        _0 = exit_codes::ExitCode::Success;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn path_absolute_form(_1: &Path) -> Result<PathBuf, std::io::Error> {
    debug path => _1;
    let mut _0: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _2: bool;
    let mut _3: std::path::PathBuf;
    let _4: &std::path::Path;
    let mut _5: std::result::Result<&std::path::Path, std::path::StripPrefixError>;
    let mut _6: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _7: {closure@src/filesystem.rs:18:23: 18:33};
    let mut _8: &&std::path::Path;
    scope 1 {
        debug path => _4;
    }

    bb0: {
        _2 = Path::is_absolute(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _3 = Path::to_path_buf(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<PathBuf, std::io::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb4: {
        _5 = Path::strip_prefix::<&str>(_1, const ".") -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = Result::<&Path, StripPrefixError>::unwrap_or(move _5, _1) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = current_dir() -> [return: bb7, unwind continue];
    }

    bb7: {
        _8 = &_4;
        _7 = {closure@src/filesystem.rs:18:23: 18:33} { path: move _8 };
        _0 = Result::<PathBuf, std::io::Error>::map::<PathBuf, {closure@src/filesystem.rs:18:23: 18:33}>(move _6, move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn path_absolute_form::{closure#0}(_1: {closure@src/filesystem.rs:18:23: 18:33}, _2: PathBuf) -> PathBuf {
    debug path_buf => _2;
    debug path => (*(_1.0: &&std::path::Path));
    let mut _0: std::path::PathBuf;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;
    let mut _5: &std::path::Path;
    let mut _6: &&std::path::Path;

    bb0: {
        _4 = &_2;
        _3 = <PathBuf as Deref>::deref(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = deref_copy (_1.0: &&std::path::Path);
        _5 = (*_6);
        _0 = Path::join::<&Path>(_3, move _5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn absolute_path(_1: &Path) -> Result<PathBuf, std::io::Error> {
    debug path => _1;
    let mut _0: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::path::PathBuf>;
    let mut _3: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _6: std::path::PathBuf;
    scope 1 {
        debug path_buf => _6;
    }
    scope 2 {
        debug residual => _5;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;
        scope 5 {
        }
    }

    bb0: {
        _3 = path_absolute_form(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Result<PathBuf, std::io::Error> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = move ((_2 as Continue).0: std::path::PathBuf);
        _0 = Result::<PathBuf, std::io::Error>::Ok(move _6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<PathBuf, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn is_dir(_1: &Path) -> bool {
    debug path => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::option::Option<&std::ffi::OsStr>;
    let _5: std::option::Option<&std::ffi::OsStr>;
    let mut _6: &std::result::Result<std::path::PathBuf, std::io::Error>;
    let _7: std::result::Result<std::path::PathBuf, std::io::Error>;

    bb0: {
        _2 = Path::is_dir(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = Path::file_name(_1) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb10;
    }

    bb4: {
        _4 = &_5;
        _3 = Option::<&OsStr>::is_some(move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _3) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = const true;
        goto -> bb10;
    }

    bb7: {
        _7 = Path::canonicalize(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _6 = &_7;
        _0 = Result::<PathBuf, std::io::Error>::is_ok(move _6) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        drop(_7) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn is_executable(_1: &Metadata) -> bool {
    debug md => _1;
    let mut _0: bool;
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: &std::fs::Permissions;
    let _5: std::fs::Permissions;

    bb0: {
        _5 = Metadata::permissions(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = <Permissions as PermissionsExt>::mode(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = BitAnd(move _3, const 73_u32);
        _0 = Ne(move _2, const 0_u32);
        return;
    }
}

fn filesystem::is_empty(_1: &walk::DirEntry) -> bool {
    debug entry => _1;
    let mut _0: bool;
    let mut _2: std::option::Option<std::fs::FileType>;
    let mut _3: isize;
    let mut _5: bool;
    let mut _6: &std::fs::FileType;
    let mut _7: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let mut _8: &std::path::Path;
    let mut _9: isize;
    let mut _11: &std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let _12: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _13: &mut std::fs::ReadDir;
    let mut _14: bool;
    let mut _15: &std::fs::FileType;
    let mut _16: std::option::Option<bool>;
    let mut _17: std::option::Option<std::fs::Metadata>;
    let mut _18: bool;
    let mut _19: isize;
    let mut _20: isize;
    scope 1 {
        debug file_type => _4;
        let _4: std::fs::FileType;
        scope 2 {
            debug entries => _10;
            let mut _10: std::fs::ReadDir;
        }
    }

    bb0: {
        _18 = const false;
        _2 = walk::DirEntry::file_type(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb2, otherwise: bb18];
    }

    bb2: {
        _4 = ((_2 as Some).0: std::fs::FileType);
        _6 = &_4;
        _5 = FileType::is_dir(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _5) -> [0: bb12, otherwise: bb4];
    }

    bb4: {
        _8 = walk::DirEntry::path(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = const true;
        _7 = read_dir::<&Path>(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb7, otherwise: bb11];
    }

    bb7: {
        _18 = const false;
        _10 = move ((_7 as Ok).0: std::fs::ReadDir);
        _13 = &mut _10;
        _12 = <ReadDir as Iterator>::next(move _13) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _11 = &_12;
        _0 = Option::<Result<std::fs::DirEntry, std::io::Error>>::is_none(move _11) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        drop(_12) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        drop(_10) -> [return: bb27, unwind: bb29];
    }

    bb11: {
        _0 = const false;
        goto -> bb27;
    }

    bb12: {
        _15 = &_4;
        _14 = FileType::is_file(move _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _14) -> [0: bb17, otherwise: bb14];
    }

    bb14: {
        _17 = walk::DirEntry::metadata(_1) -> [return: bb15, unwind continue];
    }

    bb15: {
        _16 = Option::<Metadata>::map::<bool, {closure@src/filesystem.rs:61:34: 61:37}>(move _17, const ZeroSized: {closure@src/filesystem.rs:61:34: 61:37}) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = Option::<bool>::unwrap_or(move _16, const false) -> [return: bb19, unwind continue];
    }

    bb17: {
        _0 = const false;
        goto -> bb19;
    }

    bb18: {
        _0 = const false;
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_12) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23: {
        _18 = const false;
        goto -> bb19;
    }

    bb24: {
        switchInt(_18) -> [0: bb23, otherwise: bb25];
    }

    bb25: {
        drop(((_7 as Ok).0: std::fs::ReadDir)) -> [return: bb23, unwind continue];
    }

    bb26: {
        drop(_7) -> [return: bb23, unwind continue];
    }

    bb27: {
        _19 = discriminant(_7);
        switchInt(move _19) -> [0: bb24, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_7) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        _20 = discriminant(_7);
        switchInt(move _20) -> [0: bb22, otherwise: bb28];
    }
}

fn filesystem::is_empty::{closure#0}(_1: {closure@src/filesystem.rs:61:34: 61:37}, _2: Metadata) -> bool {
    debug m => _2;
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &std::fs::Metadata;

    bb0: {
        _4 = &_2;
        _3 = Metadata::len(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Eq(move _3, const 0_u64);
        return;
    }
}

fn filesystem::is_socket(_1: &FileType) -> bool {
    debug ft => _1;
    let mut _0: bool;

    bb0: {
        _0 = <FileType as FileTypeExt>::is_socket(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn is_pipe(_1: &FileType) -> bool {
    debug ft => _1;
    let mut _0: bool;

    bb0: {
        _0 = <FileType as FileTypeExt>::is_fifo(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn osstr_to_bytes(_1: &OsStr) -> Cow<'_, [u8]> {
    debug input => _1;
    let mut _0: std::borrow::Cow<'_, [u8]>;
    let _2: &[u8];

    bb0: {
        _2 = <OsStr as OsStrExt>::as_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Cow::<'_, [u8]>::Borrowed(_2);
        return;
    }
}

fn strip_current_dir(_1: &Path) -> &Path {
    debug path => _1;
    let mut _0: &std::path::Path;
    let mut _2: std::result::Result<&std::path::Path, std::path::StripPrefixError>;

    bb0: {
        _2 = Path::strip_prefix::<&str>(_1, const ".") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<&Path, StripPrefixError>::unwrap_or(move _2, _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn filetypes::<impl at src/filetypes.rs:12:1: 12:27>::default() -> FileTypes {
    let mut _0: filetypes::FileTypes;

    bb0: {
        _0 = FileTypes { files: const false, directories: const false, symlinks: const false, sockets: const false, pipes: const false, executables_only: const false, empty_only: const false };
        return;
    }
}

static SIZE_CAPTURES: SIZE_CAPTURES = {
    let mut _0: filter::size::SIZE_CAPTURES;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = SIZE_CAPTURES { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn size::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &SIZE_CAPTURES) -> &regex::Regex {
    debug self => _1;
    let mut _0: &regex::Regex;

    bb0: {
        _0 = <SIZE_CAPTURES as Deref>::deref::__stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn size::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__static_ref_initialize() -> regex::Regex {
    let mut _0: regex::Regex;
    let mut _1: std::result::Result<regex::Regex, regex::Error>;
    let _2: &str;

    bb0: {
        _2 = const "(?i)^([+-]?)(\\d+)(b|[kmgt]i?b?)$";
        _1 = regex::Regex::new(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<regex::Regex, regex::Error>::unwrap(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn size::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability() -> &regex::Regex {
    let mut _0: &regex::Regex;
    let _1: &lazy_static::lazy::Lazy<regex::Regex>;

    bb0: {
        _1 = const {alloc3: &Lazy<regex::Regex>};
        _0 = Lazy::<regex::Regex>::get::<fn() -> regex::Regex {<SIZE_CAPTURES as Deref>::deref::__static_ref_initialize}>(_1, <SIZE_CAPTURES as Deref>::deref::__static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc3 (static: <SIZE_CAPTURES as Deref>::deref::__stability::LAZY, size: 56, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x30 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

static size::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref::__stability::LAZY: Lazy<regex::Regex> = {
    let mut _0: lazy_static::lazy::Lazy<regex::Regex>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn size::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &SIZE_CAPTURES) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &regex::Regex;
    scope 1 {
    }

    bb0: {
        _2 = <SIZE_CAPTURES as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn size::<impl at src/filter/size.rs:8:10: 8:15>::clone(_1: &SizeFilter) -> SizeFilter {
    debug self => _1;
    let mut _0: filter::size::SizeFilter;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn size::<impl at src/filter/size.rs:8:23: 8:28>::fmt(_1: &SizeFilter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u64;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u64;
    let _8: &u64;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&u64;
    let _12: &u64;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&u64;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = &(((*_1) as Equals).0: u64);
        _13 = const "Equals";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Max).0: u64);
        _5 = const "Max";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as Min).0: u64);
        _9 = const "Min";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn size::<impl at src/filter/size.rs:8:30: 8:39>::eq(_1: &SizeFilter, _2: &SizeFilter) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&filter::size::SizeFilter, &filter::size::SizeFilter);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: u64;
    let mut _14: u64;
    let mut _17: u64;
    let mut _18: u64;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: &filter::size::SizeFilter;
    let mut _24: &filter::size::SizeFilter;
    let mut _25: &filter::size::SizeFilter;
    let mut _26: &filter::size::SizeFilter;
    let mut _27: &filter::size::SizeFilter;
    let mut _28: &filter::size::SizeFilter;
    let mut _29: &filter::size::SizeFilter;
    let mut _30: &filter::size::SizeFilter;
    let mut _31: &filter::size::SizeFilter;
    let mut _32: &filter::size::SizeFilter;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &u64;
            let _12: &u64;
            let _15: &u64;
            let _16: &u64;
            let _19: &u64;
            let _20: &u64;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
                debug __self_0 => _19;
                debug __arg1_0 => _20;
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _23 = deref_copy (_6.0: &filter::size::SizeFilter);
        _10 = discriminant((*_23));
        switchInt(move _10) -> [0: bb3, 1: bb5, 2: bb6, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb10;
    }

    bb3: {
        _24 = deref_copy (_6.1: &filter::size::SizeFilter);
        _7 = discriminant((*_24));
        switchInt(move _7) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _25 = deref_copy (_6.1: &filter::size::SizeFilter);
        _8 = discriminant((*_25));
        switchInt(move _8) -> [1: bb8, otherwise: bb4];
    }

    bb6: {
        _26 = deref_copy (_6.1: &filter::size::SizeFilter);
        _9 = discriminant((*_26));
        switchInt(move _9) -> [2: bb9, otherwise: bb4];
    }

    bb7: {
        _27 = deref_copy (_6.0: &filter::size::SizeFilter);
        _11 = &(((*_27) as Max).0: u64);
        _28 = deref_copy (_6.1: &filter::size::SizeFilter);
        _12 = &(((*_28) as Max).0: u64);
        _13 = (*_11);
        _14 = (*_12);
        _0 = Eq(move _13, move _14);
        goto -> bb10;
    }

    bb8: {
        _29 = deref_copy (_6.0: &filter::size::SizeFilter);
        _15 = &(((*_29) as Min).0: u64);
        _30 = deref_copy (_6.1: &filter::size::SizeFilter);
        _16 = &(((*_30) as Min).0: u64);
        _17 = (*_15);
        _18 = (*_16);
        _0 = Eq(move _17, move _18);
        goto -> bb10;
    }

    bb9: {
        _31 = deref_copy (_6.0: &filter::size::SizeFilter);
        _19 = &(((*_31) as Equals).0: u64);
        _32 = deref_copy (_6.1: &filter::size::SizeFilter);
        _20 = &(((*_32) as Equals).0: u64);
        _21 = (*_19);
        _22 = (*_20);
        _0 = Eq(move _21, move _22);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

const KILO: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 1000_u64;
        return;
    }
}

const MEGA: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1000_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1000_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

const GIGA: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1000_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1000_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

const TERA: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1000_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1000_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

const KIBI: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 1024_u64;
        return;
    }
}

const MEBI: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1024_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1024_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

const GIBI: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1024_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1024_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

const TEBI: u64 = {
    let mut _0: u64;
    let mut _1: (u64, bool);

    bb0: {
        _1 = CheckedMul(const _, const 1024_u64);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 1024_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u64);
        return;
    }
}

fn size::<impl at src/filter/size.rs:27:1: 27:16>::from_string(_1: &str) -> Option<SizeFilter> {
    debug s => _1;
    let mut _0: std::option::Option<filter::size::SizeFilter>;
    let mut _2: bool;
    let _3: &regex::Regex;
    let _4: &filter::size::SIZE_CAPTURES;
    let _5: regex::Captures<'_>;
    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, regex::Captures<'_>>;
    let mut _7: std::option::Option<regex::Captures<'_>>;
    let _8: &regex::Regex;
    let _9: &filter::size::SIZE_CAPTURES;
    let mut _10: isize;
    let _11: regex::Captures<'_>;
    let mut _13: std::option::Option<regex::Match<'_>>;
    let mut _14: &regex::Captures<'_>;
    let mut _15: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u64>;
    let mut _16: std::option::Option<u64>;
    let mut _17: std::option::Option<regex::Match<'_>>;
    let mut _18: &regex::Captures<'_>;
    let mut _19: isize;
    let mut _22: &str;
    let _23: &str;
    let mut _24: &std::string::String;
    let _25: std::string::String;
    let _26: &str;
    let mut _27: std::option::Option<regex::Match<'_>>;
    let mut _28: &regex::Captures<'_>;
    let mut _29: bool;
    let mut _32: bool;
    let mut _35: bool;
    let mut _38: bool;
    let mut _41: bool;
    let mut _44: bool;
    let mut _47: bool;
    let mut _50: bool;
    let mut _53: bool;
    let mut _55: u64;
    let mut _56: (u64, bool);
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: filter::size::SizeFilter;
    let mut _61: filter::size::SizeFilter;
    let mut _62: filter::size::SizeFilter;
    let mut _63: &str;
    let mut _64: &str;
    let mut _65: &str;
    let mut _66: &str;
    let mut _67: &str;
    let mut _68: &str;
    let mut _69: &str;
    let mut _70: &str;
    scope 1 {
        debug captures => _5;
        let _12: &str;
        scope 6 {
            debug limit_kind => _12;
            let _20: u64;
            scope 7 {
                debug quantity => _20;
                let _21: u64;
                let _30: &str;
                let _31: &&str;
                let _33: &str;
                let _34: &&str;
                let _36: &str;
                let _37: &&str;
                let _39: &str;
                let _40: &&str;
                let _42: &str;
                let _43: &&str;
                let _45: &str;
                let _46: &&str;
                let _48: &str;
                let _49: &&str;
                let _51: &str;
                let _52: &&str;
                scope 12 {
                    debug multiplier => _21;
                    let _54: u64;
                    scope 21 {
                        debug size => _54;
                    }
                }
                scope 13 {
                    debug v => _30;
                    debug v => _31;
                }
                scope 14 {
                    debug v => _33;
                    debug v => _34;
                }
                scope 15 {
                    debug v => _36;
                    debug v => _37;
                }
                scope 16 {
                    debug v => _39;
                    debug v => _40;
                }
                scope 17 {
                    debug v => _42;
                    debug v => _43;
                }
                scope 18 {
                    debug v => _45;
                    debug v => _46;
                }
                scope 19 {
                    debug v => _48;
                    debug v => _49;
                }
                scope 20 {
                    debug v => _51;
                    debug v => _52;
                }
            }
            scope 8 {
                debug residual => const Option::<Infallible>::None;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _20;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => const Option::<Infallible>::None;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _4 = const {alloc4: &SIZE_CAPTURES};
        _3 = <SIZE_CAPTURES as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = regex::Regex::is_match(_3, _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = const {alloc4: &SIZE_CAPTURES};
        _8 = <SIZE_CAPTURES as Deref>::deref(_9) -> [return: bb5, unwind continue];
    }

    bb4: {
        _0 = Option::<SizeFilter>::None;
        goto -> bb63;
    }

    bb5: {
        _7 = regex::Regex::captures(_8, _1) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = <Option<regex::Captures<'_>> as Try>::branch(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _11 = move ((_6 as Continue).0: regex::Captures<'_>);
        _5 = move _11;
        _14 = &_5;
        _13 = regex::Captures::<'_>::get(move _14, const 1_usize) -> [return: bb11, unwind: bb65];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <Option<SizeFilter> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> [return: bb63, unwind continue];
    }

    bb11: {
        _12 = Option::<regex::Match<'_>>::map_or::<&str, {closure@src/filter/size.rs:34:54: 34:57}>(move _13, const "+", const ZeroSized: {closure@src/filter/size.rs:34:54: 34:57}) -> [return: bb12, unwind: bb65];
    }

    bb12: {
        _18 = &_5;
        _17 = regex::Captures::<'_>::get(move _18, const 2_usize) -> [return: bb13, unwind: bb65];
    }

    bb13: {
        _16 = Option::<regex::Match<'_>>::and_then::<u64, {closure@src/filter/size.rs:37:23: 37:26}>(move _17, const ZeroSized: {closure@src/filter/size.rs:37:23: 37:26}) -> [return: bb14, unwind: bb65];
    }

    bb14: {
        _15 = <Option<u64> as Try>::branch(move _16) -> [return: bb15, unwind: bb65];
    }

    bb15: {
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb16, 1: bb17, otherwise: bb9];
    }

    bb16: {
        _20 = ((_15 as Continue).0: u64);
        _28 = &_5;
        _27 = regex::Captures::<'_>::get(move _28, const 3_usize) -> [return: bb18, unwind: bb65];
    }

    bb17: {
        _0 = <Option<SizeFilter> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> [return: bb67, unwind: bb65];
    }

    bb18: {
        _26 = Option::<regex::Match<'_>>::map_or::<&str, {closure@src/filter/size.rs:39:61: 39:64}>(move _27, const "b", const ZeroSized: {closure@src/filter/size.rs:39:61: 39:64}) -> [return: bb19, unwind: bb65];
    }

    bb19: {
        _25 = str::<impl str>::to_lowercase(_26) -> [return: bb20, unwind: bb65];
    }

    bb20: {
        _24 = &_25;
        _23 = <String as Index<RangeFull>>::index(move _24, const RangeFull) -> [return: bb21, unwind: bb64];
    }

    bb21: {
        _22 = _23;
        _31 = &_22;
        _63 = deref_copy (*_31);
        _32 = core::str::<impl str>::starts_with::<'_, &str>(_63, const "ki") -> [return: bb25, unwind: bb64];
    }

    bb22: {
        _21 = const 1_u64;
        goto -> bb49;
    }

    bb23: {
        _0 = Option::<SizeFilter>::None;
        drop(_25) -> [return: bb62, unwind: bb65];
    }

    bb24: {
        switchInt(move _29) -> [0: bb23, otherwise: bb22];
    }

    bb25: {
        switchInt(move _32) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _30 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb27: {
        _34 = &_22;
        _64 = deref_copy (*_34);
        _35 = core::str::<impl str>::starts_with::<'_, char>(_64, const 'k') -> [return: bb28, unwind: bb64];
    }

    bb28: {
        switchInt(move _35) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _33 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb30: {
        _37 = &_22;
        _65 = deref_copy (*_37);
        _38 = core::str::<impl str>::starts_with::<'_, &str>(_65, const "mi") -> [return: bb31, unwind: bb64];
    }

    bb31: {
        switchInt(move _38) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _36 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb33: {
        _40 = &_22;
        _66 = deref_copy (*_40);
        _41 = core::str::<impl str>::starts_with::<'_, char>(_66, const 'm') -> [return: bb34, unwind: bb64];
    }

    bb34: {
        switchInt(move _41) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _39 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb36: {
        _43 = &_22;
        _67 = deref_copy (*_43);
        _44 = core::str::<impl str>::starts_with::<'_, &str>(_67, const "gi") -> [return: bb37, unwind: bb64];
    }

    bb37: {
        switchInt(move _44) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _42 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb39: {
        _46 = &_22;
        _68 = deref_copy (*_46);
        _47 = core::str::<impl str>::starts_with::<'_, char>(_68, const 'g') -> [return: bb40, unwind: bb64];
    }

    bb40: {
        switchInt(move _47) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _45 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb42: {
        _49 = &_22;
        _69 = deref_copy (*_49);
        _50 = core::str::<impl str>::starts_with::<'_, &str>(_69, const "ti") -> [return: bb43, unwind: bb64];
    }

    bb43: {
        switchInt(move _50) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _48 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb45: {
        _52 = &_22;
        _70 = deref_copy (*_52);
        _53 = core::str::<impl str>::starts_with::<'_, char>(_70, const 't') -> [return: bb46, unwind: bb64];
    }

    bb46: {
        switchInt(move _53) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _51 = _22;
        _21 = const _;
        goto -> bb49;
    }

    bb48: {
        _29 = <str as PartialEq>::eq(_22, const "b") -> [return: bb24, unwind: bb64];
    }

    bb49: {
        drop(_25) -> [return: bb50, unwind: bb65];
    }

    bb50: {
        _55 = _21;
        _56 = CheckedMul(_20, _55);
        assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", _20, move _55) -> [success: bb51, unwind: bb65];
    }

    bb51: {
        _54 = move (_56.0: u64);
        _59 = <str as PartialEq>::eq(_12, const "+") -> [return: bb60, unwind: bb65];
    }

    bb52: {
        _60 = SizeFilter::Min(_54);
        _0 = Option::<SizeFilter>::Some(move _60);
        goto -> bb61;
    }

    bb53: {
        _58 = <str as PartialEq>::eq(_12, const "-") -> [return: bb59, unwind: bb65];
    }

    bb54: {
        _61 = SizeFilter::Max(_54);
        _0 = Option::<SizeFilter>::Some(move _61);
        goto -> bb61;
    }

    bb55: {
        _57 = <str as PartialEq>::eq(_12, const "") -> [return: bb58, unwind: bb65];
    }

    bb56: {
        _62 = SizeFilter::Equals(_54);
        _0 = Option::<SizeFilter>::Some(move _62);
        goto -> bb61;
    }

    bb57: {
        _0 = Option::<SizeFilter>::None;
        goto -> bb61;
    }

    bb58: {
        switchInt(move _57) -> [0: bb57, otherwise: bb56];
    }

    bb59: {
        switchInt(move _58) -> [0: bb55, otherwise: bb54];
    }

    bb60: {
        switchInt(move _59) -> [0: bb53, otherwise: bb52];
    }

    bb61: {
        drop(_5) -> [return: bb63, unwind continue];
    }

    bb62: {
        drop(_5) -> [return: bb63, unwind continue];
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_25) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_5) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67: {
        goto -> bb62;
    }
}

alloc4 (static: SIZE_CAPTURES, size: 0, align: 1) {}

fn size::<impl at src/filter/size.rs:27:1: 27:16>::from_string::{closure#0}(_1: {closure@src/filter/size.rs:34:54: 34:57}, _2: regex::Match<'_>) -> &str {
    debug m => _2;
    let mut _0: &str;
    let mut _3: &regex::Match<'_>;

    bb0: {
        _3 = &_2;
        _0 = regex::Match::<'_>::as_str(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn size::<impl at src/filter/size.rs:27:1: 27:16>::from_string::{closure#1}(_1: {closure@src/filter/size.rs:37:23: 37:26}, _2: regex::Match<'_>) -> Option<u64> {
    debug v => _2;
    let mut _0: std::option::Option<u64>;
    let mut _3: std::result::Result<u64, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: &regex::Match<'_>;

    bb0: {
        _5 = &_2;
        _4 = regex::Match::<'_>::as_str(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<u64>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<u64, ParseIntError>::ok(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn size::<impl at src/filter/size.rs:27:1: 27:16>::from_string::{closure#2}(_1: {closure@src/filter/size.rs:39:61: 39:64}, _2: regex::Match<'_>) -> &str {
    debug m => _2;
    let mut _0: &str;
    let mut _3: &regex::Match<'_>;

    bb0: {
        _3 = &_2;
        _0 = regex::Match::<'_>::as_str(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn size::<impl at src/filter/size.rs:27:1: 27:16>::is_within(_1: &SizeFilter, _2: u64) -> bool {
    debug self => _1;
    debug size => _2;
    let mut _0: bool;
    let mut _3: isize;
    let _4: u64;
    let _5: u64;
    let _6: u64;
    scope 1 {
        debug limit => _4;
    }
    scope 2 {
        debug limit => _5;
    }
    scope 3 {
        debug limit => _6;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = (((*_1) as Equals).0: u64);
        _0 = Eq(_2, _6);
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = (((*_1) as Max).0: u64);
        _0 = Le(_2, _4);
        goto -> bb5;
    }

    bb4: {
        _5 = (((*_1) as Min).0: u64);
        _0 = Ge(_2, _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:4:10: 4:15>::fmt(_1: &TimeFilter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::time::SystemTime;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&std::time::SystemTime;
    let _8: &std::time::SystemTime;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&std::time::SystemTime;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as After).0: std::time::SystemTime);
        _9 = const "After";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Before).0: std::time::SystemTime);
        _5 = const "Before";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:4:17: 4:26>::eq(_1: &TimeFilter, _2: &TimeFilter) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&filter::time::TimeFilter, &filter::time::TimeFilter);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: &filter::time::TimeFilter;
    let mut _15: &filter::time::TimeFilter;
    let mut _16: &filter::time::TimeFilter;
    let mut _17: &filter::time::TimeFilter;
    let mut _18: &filter::time::TimeFilter;
    let mut _19: &filter::time::TimeFilter;
    let mut _20: &filter::time::TimeFilter;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &std::time::SystemTime;
            let _11: &std::time::SystemTime;
            let _12: &std::time::SystemTime;
            let _13: &std::time::SystemTime;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _12;
                debug __arg1_0 => _13;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _14 = deref_copy (_6.0: &filter::time::TimeFilter);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _15 = deref_copy (_6.1: &filter::time::TimeFilter);
        _7 = discriminant((*_15));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _16 = deref_copy (_6.1: &filter::time::TimeFilter);
        _8 = discriminant((*_16));
        switchInt(move _8) -> [1: bb7, otherwise: bb4];
    }

    bb6: {
        _17 = deref_copy (_6.0: &filter::time::TimeFilter);
        _10 = &(((*_17) as Before).0: std::time::SystemTime);
        _18 = deref_copy (_6.1: &filter::time::TimeFilter);
        _11 = &(((*_18) as Before).0: std::time::SystemTime);
        _0 = <SystemTime as PartialEq>::eq(_10, _11) -> [return: bb8, unwind continue];
    }

    bb7: {
        _19 = deref_copy (_6.0: &filter::time::TimeFilter);
        _12 = &(((*_19) as After).0: std::time::SystemTime);
        _20 = deref_copy (_6.1: &filter::time::TimeFilter);
        _13 = &(((*_20) as After).0: std::time::SystemTime);
        _0 = <SystemTime as PartialEq>::eq(_12, _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::from_str(_1: &SystemTime, _2: &str) -> Option<SystemTime> {
    debug ref_time => _1;
    debug s => _2;
    let mut _0: std::option::Option<std::time::SystemTime>;
    let mut _3: std::result::Result<std::time::SystemTime, humantime::TimestampError>;
    let mut _4: std::result::Result<std::time::SystemTime, humantime::TimestampError>;
    let mut _5: std::result::Result<std::time::SystemTime, humantime::DurationError>;
    let mut _6: std::result::Result<std::time::Duration, humantime::DurationError>;
    let mut _7: &str;
    let mut _8: {closure@src/filter/time.rs:13:18: 13:28};
    let mut _9: &&std::time::SystemTime;
    let mut _10: {closure@src/filter/time.rs:14:22: 14:25};
    let mut _11: &&str;
    let mut _12: {closure@src/filter/time.rs:15:22: 15:25};
    let mut _13: &&str;

    bb0: {
        _7 = _2;
        _6 = parse_duration(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_1;
        _8 = {closure@src/filter/time.rs:13:18: 13:28} { ref_time: move _9 };
        _5 = Result::<std::time::Duration, DurationError>::map::<SystemTime, {closure@src/filter/time.rs:13:18: 13:28}>(move _6, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = &_2;
        _10 = {closure@src/filter/time.rs:14:22: 14:25} { s: move _11 };
        _4 = Result::<SystemTime, DurationError>::or_else::<TimestampError, {closure@src/filter/time.rs:14:22: 14:25}>(move _5, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_2;
        _12 = {closure@src/filter/time.rs:15:22: 15:25} { s: move _13 };
        _3 = Result::<SystemTime, TimestampError>::or_else::<TimestampError, {closure@src/filter/time.rs:15:22: 15:25}>(move _4, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<SystemTime, TimestampError>::ok(move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::from_str::{closure#0}(_1: {closure@src/filter/time.rs:13:18: 13:28}, _2: std::time::Duration) -> SystemTime {
    debug duration => _2;
    debug ref_time => (*(_1.0: &&std::time::SystemTime));
    let mut _0: std::time::SystemTime;
    let mut _3: std::time::SystemTime;
    let mut _4: &&std::time::SystemTime;
    let mut _5: &std::time::SystemTime;

    bb0: {
        _4 = deref_copy (_1.0: &&std::time::SystemTime);
        _5 = deref_copy (*_4);
        _3 = (*_5);
        _0 = <SystemTime as Sub<std::time::Duration>>::sub(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::from_str::{closure#1}(_1: {closure@src/filter/time.rs:14:22: 14:25}, _2: DurationError) -> Result<SystemTime, TimestampError> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::result::Result<std::time::SystemTime, humantime::TimestampError>;
    let mut _3: &&str;
    let mut _4: &str;

    bb0: {
        _3 = deref_copy (_1.0: &&str);
        _4 = deref_copy (*_3);
        _0 = parse_rfc3339_weak(_4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::from_str::{closure#2}(_1: {closure@src/filter/time.rs:15:22: 15:25}, _2: TimestampError) -> Result<SystemTime, TimestampError> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::result::Result<std::time::SystemTime, humantime::TimestampError>;
    let _3: &str;
    let _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: std::string::String;
    let _7: &str;
    let mut _8: &&str;
    let mut _9: &str;

    bb0: {
        _8 = deref_copy (_1.0: &&str);
        _9 = deref_copy (*_8);
        _6 = <str as ToOwned>::to_owned(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const " 00:00:00";
        _5 = <String as Add<&str>>::add(move _6, _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = <String as Deref>::deref(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = parse_rfc3339_weak(_3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::before(_1: &SystemTime, _2: &str) -> Option<TimeFilter> {
    debug ref_time => _1;
    debug s => _2;
    let mut _0: std::option::Option<filter::time::TimeFilter>;
    let mut _3: std::option::Option<std::time::SystemTime>;

    bb0: {
        _3 = TimeFilter::from_str(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<SystemTime>::map::<TimeFilter, fn(SystemTime) -> TimeFilter {TimeFilter::Before}>(move _3, TimeFilter::Before) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::after(_1: &SystemTime, _2: &str) -> Option<TimeFilter> {
    debug ref_time => _1;
    debug s => _2;
    let mut _0: std::option::Option<filter::time::TimeFilter>;
    let mut _3: std::option::Option<std::time::SystemTime>;

    bb0: {
        _3 = TimeFilter::from_str(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<SystemTime>::map::<TimeFilter, fn(SystemTime) -> TimeFilter {TimeFilter::After}>(move _3, TimeFilter::After) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn filter::time::<impl at src/filter/time.rs:10:1: 10:16>::applies_to(_1: &TimeFilter, _2: &SystemTime) -> bool {
    debug self => _1;
    debug t => _2;
    let mut _0: bool;
    let mut _3: isize;
    let _4: &std::time::SystemTime;
    let mut _5: &&std::time::SystemTime;
    let mut _6: &&std::time::SystemTime;
    let _7: &std::time::SystemTime;
    let _8: &std::time::SystemTime;
    let mut _9: &&std::time::SystemTime;
    let mut _10: &&std::time::SystemTime;
    let _11: &std::time::SystemTime;
    scope 1 {
        debug limit => _4;
    }
    scope 2 {
        debug limit => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as After).0: std::time::SystemTime);
        _9 = &_2;
        _11 = _8;
        _10 = &_11;
        _0 = <&SystemTime as PartialOrd>::ge(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Before).0: std::time::SystemTime);
        _5 = &_2;
        _7 = _4;
        _6 = &_7;
        _0 = <&SystemTime as PartialOrd>::le(move _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:4:10: 4:15>::clone(_1: &OwnerFilter) -> OwnerFilter {
    debug self => _1;
    let mut _0: filter::owner::OwnerFilter;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:4:23: 4:28>::fmt(_1: &OwnerFilter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &filter::owner::Check<u32>;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&filter::owner::Check<u32>;
    let _10: &filter::owner::Check<u32>;

    bb0: {
        _3 = const "OwnerFilter";
        _4 = const "uid";
        _6 = &((*_1).0: filter::owner::Check<u32>);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "gid";
        _10 = &((*_1).1: filter::owner::Check<u32>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:4:30: 4:39>::eq(_1: &OwnerFilter, _2: &OwnerFilter) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &filter::owner::Check<u32>;
    let mut _5: &filter::owner::Check<u32>;
    let mut _6: &filter::owner::Check<u32>;
    let mut _7: &filter::owner::Check<u32>;

    bb0: {
        _4 = &((*_1).0: filter::owner::Check<u32>);
        _5 = &((*_2).0: filter::owner::Check<u32>);
        _3 = <Check<u32> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &((*_1).1: filter::owner::Check<u32>);
        _7 = &((*_2).1: filter::owner::Check<u32>);
        _0 = <Check<u32> as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:10:10: 10:15>::clone(_1: &Check<T>) -> Check<T> {
    debug self => _1;
    let mut _0: filter::owner::Check<T>;
    let mut _2: isize;
    let _3: &T;
    let mut _4: T;
    let _5: &T;
    let mut _6: T;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Check::<T>::Ignore;
        goto -> bb7;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Equal).0: T);
        _4 = <T as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Check::<T>::Equal(move _4);
        goto -> bb7;
    }

    bb5: {
        _5 = &(((*_1) as NotEq).0: T);
        _6 = <T as Clone>::clone(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Check::<T>::NotEq(move _6);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:10:23: 10:28>::fmt(_1: &Check<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &T;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&T;
    let _8: &T;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&T;
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "Ignore";
        _0 = Formatter::<'_>::write_str(_2, _12) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Equal).0: T);
        _5 = const "Equal";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as NotEq).0: T);
        _9 = const "NotEq";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:10:30: 10:39>::eq(_1: &Check<T>, _2: &Check<T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&filter::owner::Check<T>, &filter::owner::Check<T>);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: &filter::owner::Check<T>;
    let mut _15: &filter::owner::Check<T>;
    let mut _16: &filter::owner::Check<T>;
    let mut _17: &filter::owner::Check<T>;
    let mut _18: &filter::owner::Check<T>;
    let mut _19: &filter::owner::Check<T>;
    let mut _20: &filter::owner::Check<T>;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &T;
            let _11: &T;
            let _12: &T;
            let _13: &T;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _12;
                debug __arg1_0 => _13;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _14 = deref_copy (_6.0: &filter::owner::Check<T>);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _15 = deref_copy (_6.1: &filter::owner::Check<T>);
        _7 = discriminant((*_15));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _0 = const true;
        goto -> bb8;
    }

    bb5: {
        _16 = deref_copy (_6.1: &filter::owner::Check<T>);
        _8 = discriminant((*_16));
        switchInt(move _8) -> [1: bb7, otherwise: bb4];
    }

    bb6: {
        _17 = deref_copy (_6.0: &filter::owner::Check<T>);
        _10 = &(((*_17) as Equal).0: T);
        _18 = deref_copy (_6.1: &filter::owner::Check<T>);
        _11 = &(((*_18) as Equal).0: T);
        _0 = <T as PartialEq>::eq(_10, _11) -> [return: bb8, unwind continue];
    }

    bb7: {
        _19 = deref_copy (_6.0: &filter::owner::Check<T>);
        _12 = &(((*_19) as NotEq).0: T);
        _20 = deref_copy (_6.1: &filter::owner::Check<T>);
        _13 = &(((*_20) as NotEq).0: T);
        _0 = <T as PartialEq>::eq(_12, _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string(_1: &str) -> Result<Option<OwnerFilter>, anyhow::Error> {
    debug input => _1;
    let mut _0: std::result::Result<std::option::Option<filter::owner::OwnerFilter>, anyhow::Error>;
    let mut _2: std::str::Split<'_, char>;
    let mut _3: &str;
    let mut _6: (std::option::Option<&str>, std::option::Option<&str>);
    let mut _7: std::option::Option<&str>;
    let mut _8: &mut std::str::Split<'_, char>;
    let mut _9: std::option::Option<&str>;
    let mut _10: &mut std::str::Split<'_, char>;
    let mut _11: bool;
    let mut _12: &std::option::Option<&str>;
    let _13: std::option::Option<&str>;
    let mut _14: &mut std::str::Split<'_, char>;
    let mut _15: anyhow::Error;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &&str;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, filter::owner::Check<u32>>;
    let mut _25: std::result::Result<filter::owner::Check<u32>, anyhow::Error>;
    let mut _26: isize;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, filter::owner::Check<u32>>;
    let mut _30: std::result::Result<filter::owner::Check<u32>, anyhow::Error>;
    let mut _31: isize;
    let mut _34: (filter::owner::Check<u32>, filter::owner::Check<u32>);
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: std::option::Option<filter::owner::OwnerFilter>;
    let mut _38: std::option::Option<filter::owner::OwnerFilter>;
    let mut _39: filter::owner::OwnerFilter;
    scope 1 {
        debug it => _2;
        let _4: std::option::Option<&str>;
        let _5: std::option::Option<&str>;
        scope 2 {
            debug fst => _4;
            debug snd => _5;
            let _16: std::string::String;
            let _27: std::result::Result<std::convert::Infallible, anyhow::Error>;
            let _28: filter::owner::Check<u32>;
            let mut _40: &[&str; 2];
            scope 3 {
                debug res => _16;
            }
            scope 4 {
                debug uid => _28;
                let _32: std::result::Result<std::convert::Infallible, anyhow::Error>;
                let _33: filter::owner::Check<u32>;
                scope 9 {
                    debug gid => _33;
                    scope 14 {
                    }
                }
                scope 10 {
                    debug residual => _32;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _33;
                    scope 13 {
                    }
                }
            }
            scope 5 {
                debug residual => _27;
                scope 6 {
                }
            }
            scope 7 {
                debug val => _28;
                scope 8 {
                }
            }
        }
    }

    bb0: {
        _3 = _1;
        _2 = core::str::<impl str>::split::<'_, char>(move _3, const ':') -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &mut _2;
        _7 = <std::str::Split<'_, char> as Iterator>::next(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &mut _2;
        _9 = <std::str::Split<'_, char> as Iterator>::next(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = (move _7, move _9);
        _4 = (_6.0: std::option::Option<&str>);
        _5 = (_6.1: std::option::Option<&str>);
        _14 = &mut _2;
        _13 = <std::str::Split<'_, char> as Iterator>::next(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = &_13;
        _11 = Option::<&str>::is_some(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _11) -> [0: bb11, otherwise: bb6];
    }

    bb6: {
        _40 = const _;
        _18 = _40 as &[&str] (PointerCoercion(Unsize));
        _23 = &_1;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = format(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _15 = new_adhoc::<String>(move _16) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = Result::<Option<OwnerFilter>, anyhow::Error>::Err(move _15);
        goto -> bb24;
    }

    bb11: {
        _25 = Check::<u32>::parse::<{closure@src/filter/owner.rs:32:37: 32:40}>(_4, const ZeroSized: {closure@src/filter/owner.rs:32:37: 32:40}) -> [return: bb12, unwind continue];
    }

    bb12: {
        _24 = <Result<Check<u32>, anyhow::Error> as Try>::branch(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        _28 = ((_24 as Continue).0: filter::owner::Check<u32>);
        _30 = Check::<u32>::parse::<{closure@src/filter/owner.rs:38:37: 38:40}>(_5, const ZeroSized: {closure@src/filter/owner.rs:38:37: 38:40}) -> [return: bb17, unwind continue];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<Option<OwnerFilter>, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _27) -> [return: bb24, unwind continue];
    }

    bb17: {
        _29 = <Result<Check<u32>, anyhow::Error> as Try>::branch(move _30) -> [return: bb18, unwind continue];
    }

    bb18: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb19, 1: bb20, otherwise: bb15];
    }

    bb19: {
        _33 = ((_29 as Continue).0: filter::owner::Check<u32>);
        _34 = (_28, _33);
        _36 = discriminant((_34.0: filter::owner::Check<u32>));
        switchInt(move _36) -> [2: bb21, otherwise: bb23];
    }

    bb20: {
        _32 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<Option<OwnerFilter>, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _32) -> [return: bb24, unwind continue];
    }

    bb21: {
        _35 = discriminant((_34.1: filter::owner::Check<u32>));
        switchInt(move _35) -> [2: bb22, otherwise: bb23];
    }

    bb22: {
        _37 = Option::<OwnerFilter>::None;
        _0 = Result::<Option<OwnerFilter>, anyhow::Error>::Ok(move _37);
        goto -> bb24;
    }

    bb23: {
        _39 = OwnerFilter { uid: _28, gid: _33 };
        _38 = Option::<OwnerFilter>::Some(move _39);
        _0 = Result::<Option<OwnerFilter>, anyhow::Error>::Ok(move _38);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}

promoted[0] in owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "more than one ':' present in owner string '", const "'. See 'fd --help'."];
        _0 = &_1;
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#0}(_1: &{closure@src/filter/owner.rs:32:37: 32:40}, _2: &str) -> Result<u32, anyhow::Error> {
    debug s => _2;
    let mut _0: std::result::Result<u32, anyhow::Error>;
    let mut _3: std::option::Option<u32>;
    let mut _4: std::option::Option<u32>;
    let mut _5: std::result::Result<u32, std::num::ParseIntError>;
    let mut _6: &str;
    let mut _7: {closure@src/filter/owner.rs:35:26: 35:28};
    let mut _8: &&str;
    let mut _9: {closure@src/filter/owner.rs:36:29: 36:31};
    let mut _10: &&str;

    bb0: {
        _6 = _2;
        _5 = core::str::<impl str>::parse::<u32>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Result::<u32, ParseIntError>::ok(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_2;
        _7 = {closure@src/filter/owner.rs:35:26: 35:28} { s: move _8 };
        _3 = Option::<u32>::or_else::<{closure@src/filter/owner.rs:35:26: 35:28}>(move _4, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = &_2;
        _9 = {closure@src/filter/owner.rs:36:29: 36:31} { s: move _10 };
        _0 = Option::<u32>::ok_or_else::<anyhow::Error, {closure@src/filter/owner.rs:36:29: 36:31}>(move _3, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#0}::{closure#0}(_1: {closure@src/filter/owner.rs:35:26: 35:28}) -> Option<u32> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::option::Option<u32>;
    let mut _2: std::option::Option<users::User>;
    let mut _3: &&str;
    let mut _4: &str;

    bb0: {
        _3 = deref_copy (_1.0: &&str);
        _4 = deref_copy (*_3);
        _2 = users::get_user_by_name::<str>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<User>::map::<u32, {closure@src/filter/owner.rs:35:60: 35:66}>(move _2, const ZeroSized: {closure@src/filter/owner.rs:35:60: 35:66}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#0}::{closure#0}::{closure#0}(_1: {closure@src/filter/owner.rs:35:60: 35:66}, _2: User) -> u32 {
    debug user => _2;
    let mut _0: u32;
    let mut _3: &users::User;

    bb0: {
        _3 = &_2;
        _0 = User::uid(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#0}::{closure#1}(_1: {closure@src/filter/owner.rs:36:29: 36:31}) -> anyhow::Error {
    debug s => (*(_1.0: &&str));
    let mut _0: anyhow::Error;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 2];
    let mut _10: &&str;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (PointerCoercion(Unsize));
        _10 = deref_copy (_1.0: &&str);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = new_adhoc::<String>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#0}::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "'", const "' is not a recognized user name"];
        _0 = &_1;
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#1}(_1: &{closure@src/filter/owner.rs:38:37: 38:40}, _2: &str) -> Result<u32, anyhow::Error> {
    debug s => _2;
    let mut _0: std::result::Result<u32, anyhow::Error>;
    let mut _3: std::option::Option<u32>;
    let mut _4: std::option::Option<u32>;
    let mut _5: std::result::Result<u32, std::num::ParseIntError>;
    let mut _6: &str;
    let mut _7: {closure@src/filter/owner.rs:41:26: 41:28};
    let mut _8: &&str;
    let mut _9: {closure@src/filter/owner.rs:42:29: 42:31};
    let mut _10: &&str;

    bb0: {
        _6 = _2;
        _5 = core::str::<impl str>::parse::<u32>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Result::<u32, ParseIntError>::ok(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_2;
        _7 = {closure@src/filter/owner.rs:41:26: 41:28} { s: move _8 };
        _3 = Option::<u32>::or_else::<{closure@src/filter/owner.rs:41:26: 41:28}>(move _4, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = &_2;
        _9 = {closure@src/filter/owner.rs:42:29: 42:31} { s: move _10 };
        _0 = Option::<u32>::ok_or_else::<anyhow::Error, {closure@src/filter/owner.rs:42:29: 42:31}>(move _3, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#1}::{closure#0}(_1: {closure@src/filter/owner.rs:41:26: 41:28}) -> Option<u32> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::option::Option<u32>;
    let mut _2: std::option::Option<users::Group>;
    let mut _3: &&str;
    let mut _4: &str;

    bb0: {
        _3 = deref_copy (_1.0: &&str);
        _4 = deref_copy (*_3);
        _2 = users::get_group_by_name::<str>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<users::Group>::map::<u32, {closure@src/filter/owner.rs:41:61: 41:68}>(move _2, const ZeroSized: {closure@src/filter/owner.rs:41:61: 41:68}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#1}::{closure#0}::{closure#0}(_1: {closure@src/filter/owner.rs:41:61: 41:68}, _2: users::Group) -> u32 {
    debug group => _2;
    let mut _0: u32;
    let mut _3: &users::Group;

    bb0: {
        _3 = &_2;
        _0 = users::Group::gid(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#1}::{closure#1}(_1: {closure@src/filter/owner.rs:42:29: 42:31}) -> anyhow::Error {
    debug s => (*(_1.0: &&str));
    let mut _0: anyhow::Error;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 2];
    let mut _10: &&str;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (PointerCoercion(Unsize));
        _10 = deref_copy (_1.0: &&str);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = new_adhoc::<String>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in owner::<impl at src/filter/owner.rs:17:1: 17:17>::from_string::{closure#1}::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "'", const "' is not a recognized group name"];
        _0 = &_1;
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:17:1: 17:17>::matches(_1: &OwnerFilter, _2: &Metadata) -> bool {
    debug self => _1;
    debug md => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &filter::owner::Check<u32>;
    let mut _5: u32;
    let mut _6: &filter::owner::Check<u32>;
    let mut _7: u32;

    bb0: {
        _4 = &((*_1).0: filter::owner::Check<u32>);
        _5 = <Metadata as std::os::unix::fs::MetadataExt>::uid(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Check::<u32>::check(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = &((*_1).1: filter::owner::Check<u32>);
        _7 = <Metadata as std::os::unix::fs::MetadataExt>::gid(_2) -> [return: bb5, unwind continue];
    }

    bb4: {
        _0 = const false;
        goto -> bb6;
    }

    bb5: {
        _0 = Check::<u32>::check(move _6, move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn owner::<impl at src/filter/owner.rs:59:1: 59:28>::check(_1: &Check<T>, _2: T) -> bool {
    debug self => _1;
    debug v => _2;
    let mut _0: bool;
    let mut _3: isize;
    let _4: &T;
    let mut _5: &T;
    let _6: &T;
    let mut _7: &T;
    scope 1 {
        debug x => _4;
    }
    scope 2 {
        debug x => _6;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const true;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Equal).0: T);
        _5 = &_2;
        _0 = <T as PartialEq>::eq(move _5, _4) -> [return: bb9, unwind: bb7];
    }

    bb4: {
        _6 = &(((*_1) as NotEq).0: T);
        _7 = &_2;
        _0 = <T as PartialEq>::ne(move _7, _6) -> [return: bb10, unwind: bb7];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        goto -> bb5;
    }

    bb10: {
        goto -> bb5;
    }
}

fn owner::<impl at src/filter/owner.rs:59:1: 59:28>::parse(_1: Option<&str>, _2: F) -> Result<Check<T>, anyhow::Error> {
    debug s => _1;
    debug f => _2;
    let mut _0: std::result::Result<filter::owner::Check<T>, anyhow::Error>;
    let _3: &str;
    let _4: bool;
    let mut _5: (&str, bool);
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: filter::owner::Check<T>;
    let _9: &str;
    let _10: &&str;
    let mut _11: bool;
    let _12: &str;
    let mut _13: std::ops::RangeFrom<usize>;
    let _14: &str;
    let mut _15: std::result::Result<T, anyhow::Error>;
    let mut _16: &F;
    let mut _17: (&str,);
    let mut _18: {closure@src/filter/owner.rs:78:18: 78:21};
    let mut _19: &bool;
    let mut _20: &str;
    scope 1 {
        debug s => _3;
        debug equality => _4;
    }
    scope 2 {
        debug s => _9;
        debug s => _10;
    }
    scope 3 {
        debug s => _14;
    }

    bb0: {
        _7 = discriminant(_1);
        switchInt(move _7) -> [0: bb5, 1: bb1, otherwise: bb4];
    }

    bb1: {
        _6 = <str as PartialEq>::eq(((_1 as Some).0: &str), const "") -> [return: bb3, unwind: bb14];
    }

    bb2: {
        _10 = &((_1 as Some).0: &str);
        _20 = deref_copy (*_10);
        _11 = core::str::<impl str>::starts_with::<'_, char>(_20, const '!') -> [return: bb6, unwind: bb14];
    }

    bb3: {
        switchInt(move _6) -> [0: bb2, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = Check::<T>::Ignore;
        _0 = Result::<Check<T>, anyhow::Error>::Ok(move _8);
        drop(_2) -> [return: bb13, unwind continue];
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _9 = ((_1 as Some).0: &str);
        _13 = RangeFrom::<usize> { start: const 1_usize };
        _12 = <str as Index<RangeFrom<usize>>>::index(_9, move _13) -> [return: bb9, unwind: bb14];
    }

    bb8: {
        _14 = ((_1 as Some).0: &str);
        _5 = (_14, const true);
        goto -> bb10;
    }

    bb9: {
        _5 = (_12, const false);
        goto -> bb10;
    }

    bb10: {
        _3 = (_5.0: &str);
        _4 = (_5.1: bool);
        _16 = &_2;
        _17 = (_3,);
        _15 = <F as Fn<(&str,)>>::call(move _16, move _17) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _19 = &_4;
        _18 = {closure@src/filter/owner.rs:78:18: 78:21} { equality: move _19 };
        _0 = Result::<T, anyhow::Error>::map::<Check<T>, {closure@src/filter/owner.rs:78:18: 78:21}>(move _15, move _18) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_2) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn owner::<impl at src/filter/owner.rs:59:1: 59:28>::parse::{closure#0}(_1: {closure@src/filter/owner.rs:78:18: 78:21}, _2: T) -> Check<T> {
    debug x => _2;
    debug equality => (*(_1.0: &bool));
    let mut _0: filter::owner::Check<T>;
    let mut _3: bool;
    let mut _4: &bool;

    bb0: {
        _4 = deref_copy (_1.0: &bool);
        _3 = (*_4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Check::<T>::Equal(move _2);
        goto -> bb3;
    }

    bb2: {
        _0 = Check::<T>::NotEq(move _2);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn replace_path_separator(_1: &str, _2: &str) -> String {
    debug path => _1;
    debug new_path_separator => _2;
    let mut _0: std::string::String;
    let _3: &&str;
    let mut _4: &str;

    bb0: {
        _3 = &_2;
        _4 = deref_copy (*_3);
        _0 = str::<impl str>::replace::<'_, char>(_1, const _, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn print_entry(_1: &mut StdoutLock<'_>, _2: &PathBuf, _3: &Options, _4: &Arc<AtomicBool>) -> () {
    debug stdout => _1;
    debug entry => _2;
    debug config => _3;
    debug wants_to_quit => _4;
    let mut _0: ();
    let _5: &std::path::Path;
    let mut _6: bool;
    let _7: &std::path::Path;
    let _8: &std::path::Path;
    let _9: &std::path::Path;
    let mut _11: isize;
    let mut _13: &std::path::Path;
    let _14: &&std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _15: &std::path::Path;
    let mut _16: bool;
    let mut _17: &std::result::Result<(), std::io::Error>;
    let _18: !;
    let mut _19: i32;
    let mut _20: exit_codes::ExitCode;
    let mut _21: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    scope 1 {
        debug path => _5;
        let _10: std::result::Result<(), std::io::Error>;
        scope 2 {
            debug r => _10;
        }
        scope 3 {
            debug ls_colors => _12;
            let _12: &lscolors::LsColors;
        }
    }

    bb0: {
        _7 = <PathBuf as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Path::is_absolute(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = PathBuf::as_path(_2) -> [return: bb7, unwind continue];
    }

    bb4: {
        _9 = <PathBuf as Deref>::deref(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = strip_current_dir(_9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _5 = _8;
        goto -> bb7;
    }

    bb7: {
        _11 = discriminant(((*_3).14: std::option::Option<lscolors::LsColors>));
        switchInt(move _11) -> [1: bb8, otherwise: bb9];
    }

    bb8: {
        _12 = &((((*_3).14: std::option::Option<lscolors::LsColors>) as Some).0: lscolors::LsColors);
        _13 = _5;
        _14 = &_4;
        _21 = deref_copy (*_14);
        _10 = print_entry_colorized(_1, move _13, _3, _12, _21) -> [return: bb10, unwind continue];
    }

    bb9: {
        _15 = _5;
        _10 = print_entry_uncolorized(_1, move _15, _3) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = &_10;
        _16 = Result::<(), std::io::Error>::is_err(move _17) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        switchInt(move _16) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        _20 = exit_codes::ExitCode::GeneralError;
        _19 = <exit_codes::ExitCode as Into<i32>>::into(move _20) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _18 = exit(move _19) -> bb16;
    }

    bb14: {
        drop(_10) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

fn print_entry_colorized(_1: &mut StdoutLock<'_>, _2: &Path, _3: &Options, _4: &LsColors, _5: &Arc<AtomicBool>) -> Result<(), std::io::Error> {
    debug stdout => _1;
    debug path => _2;
    debug config => _3;
    debug ls_colors => _4;
    debug wants_to_quit => _5;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _6: ansi_term::Style;
    let mut _7: lscolors::StyledComponents<'_>;
    let mut _8: lscolors::StyledComponents<'_>;
    let mut _10: std::option::Option<(std::ffi::OsString, std::option::Option<&lscolors::Style>)>;
    let mut _11: &mut lscolors::StyledComponents<'_>;
    let mut _12: isize;
    let mut _16: std::option::Option<ansi_term::Style>;
    let _18: &std::ffi::OsStr;
    let mut _19: &std::ffi::OsString;
    let mut _20: isize;
    let mut _22: std::string::String;
    let _23: &str;
    let _24: &std::borrow::Cow<'_, str>;
    let _25: &str;
    let _26: &&std::string::String;
    let mut _27: &mut std::string::String;
    let mut _28: &mut std::borrow::Cow<'_, str>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _30: std::result::Result<(), std::io::Error>;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &ansi_term::ANSIGenericString<'_, str>;
    let _38: ansi_term::ANSIGenericString<'_, str>;
    let mut _39: std::borrow::Cow<'_, str>;
    let mut _40: isize;
    let mut _42: bool;
    let _43: &std::sync::atomic::AtomicBool;
    let mut _44: std::sync::atomic::Ordering;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _46: std::result::Result<(), std::io::Error>;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: isize;
    let _51: !;
    let mut _52: i32;
    let mut _53: exit_codes::ExitCode;
    let mut _54: bool;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _63: &std::string::String;
    let mut _64: bool;
    let mut _65: bool;
    scope 1 {
        debug default_style => _6;
        let mut _9: lscolors::StyledComponents<'_>;
        let mut _61: &[&str; 1];
        let mut _62: &[&str; 1];
        scope 2 {
            debug iter => _9;
            let _13: std::ffi::OsString;
            let _14: std::option::Option<&lscolors::Style>;
            scope 3 {
                debug component => _13;
                debug style => _14;
                let _15: ansi_term::Style;
                scope 4 {
                    debug style => _15;
                    let mut _17: std::borrow::Cow<'_, str>;
                    scope 5 {
                        debug path_string => _17;
                        let _41: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _50: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let mut _59: &[&str; 1];
                        let mut _60: &[&str; 1];
                        scope 6 {
                            debug separator => _21;
                            let _21: &std::string::String;
                        }
                        scope 7 {
                            debug residual => _41;
                            scope 8 {
                            }
                        }
                        scope 9 {
                            debug val => const ();
                            scope 10 {
                            }
                        }
                        scope 11 {
                            debug residual => _50;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => const ();
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _65 = const false;
        _64 = const false;
        _6 = <ansi_term::Style as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = LsColors::style_for_path_components(_4, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = <StyledComponents<'_> as IntoIterator>::into_iter(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = move _7;
        goto -> bb4;
    }

    bb4: {
        _11 = &mut _9;
        _10 = <StyledComponents<'_> as Iterator>::next(_11) -> [return: bb5, unwind: bb50];
    }

    bb5: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = move (((_10 as Some).0: (std::ffi::OsString, std::option::Option<&lscolors::Style>)).0: std::ffi::OsString);
        _14 = (((_10 as Some).0: (std::ffi::OsString, std::option::Option<&lscolors::Style>)).1: std::option::Option<&lscolors::Style>);
        _16 = Option::<&lscolors::Style>::map::<ansi_term::Style, for<'a> fn(&'a lscolors::Style) -> ansi_term::Style {lscolors::Style::to_ansi_term_style}>(_14, lscolors::Style::to_ansi_term_style) -> [return: bb9, unwind: bb49];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_9) -> [return: bb40, unwind continue];
    }

    bb9: {
        _15 = Option::<ansi_term::Style>::unwrap_or(move _16, _6) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        _19 = &_13;
        _18 = <OsString as Deref>::deref(move _19) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _17 = OsStr::to_string_lossy(_18) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        _65 = const true;
        _20 = discriminant(((*_3).25: std::option::Option<std::string::String>));
        switchInt(move _20) -> [1: bb13, otherwise: bb20];
    }

    bb13: {
        _21 = &((((*_3).25: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _24 = &_17;
        _23 = <Cow<'_, str> as Deref>::deref(_24) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        _26 = &_21;
        _63 = deref_copy (*_26);
        _25 = <String as Deref>::deref(_63) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        _22 = replace_path_separator(_23, _25) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _64 = const true;
        _28 = &mut _17;
        _27 = Cow::<'_, str>::to_mut(move _28) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        drop((*_27)) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _64 = const false;
        (*_27) = move _22;
        _64 = const false;
        goto -> bb20;
    }

    bb19 (cleanup): {
        _64 = const false;
        (*_27) = move _22;
        goto -> bb53;
    }

    bb20: {
        _60 = const _;
        _32 = _60 as &[&str] (PointerCoercion(Unsize));
        _65 = const false;
        _39 = move _17;
        _38 = ansi_term::display::<impl ansi_term::Style>::paint::<'_, Cow<'_, str>, str>(_15, move _39) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _37 = &_38;
        _36 = core::fmt::rt::Argument::<'_>::new_display::<ANSIGenericString<'_, str>>(_37) -> [return: bb22, unwind: bb48];
    }

    bb22: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb23, unwind: bb48];
    }

    bb23: {
        _30 = <StdoutLock<'_> as std::io::Write>::write_fmt(_1, move _31) -> [return: bb24, unwind: bb48];
    }

    bb24: {
        _29 = <Result<(), std::io::Error> as Try>::branch(move _30) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        _40 = discriminant(_29);
        switchInt(move _40) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        drop(_38) -> [return: bb29, unwind: bb55];
    }

    bb27: {
        _41 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _41) -> [return: bb28, unwind: bb48];
    }

    bb28: {
        drop(_38) -> [return: bb45, unwind: bb55];
    }

    bb29: {
        _43 = <Arc<AtomicBool> as Deref>::deref(_5) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _44 = Relaxed;
        _42 = AtomicBool::load(_43, move _44) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        switchInt(move _42) -> [0: bb39, otherwise: bb32];
    }

    bb32: {
        _59 = const _;
        _48 = _59 as &[&str] (PointerCoercion(Unsize));
        _47 = Arguments::<'_>::new_const(move _48) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        _46 = <StdoutLock<'_> as std::io::Write>::write_fmt(_1, move _47) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _45 = <Result<(), std::io::Error> as Try>::branch(move _46) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb36, 1: bb37, otherwise: bb7];
    }

    bb36: {
        _53 = exit_codes::ExitCode::KilledBySigint;
        _52 = <exit_codes::ExitCode as Into<i32>>::into(move _53) -> [return: bb38, unwind: bb55];
    }

    bb37: {
        _50 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _50) -> [return: bb56, unwind: bb55];
    }

    bb38: {
        _51 = exit(move _52) -> bb55;
    }

    bb39: {
        _65 = const false;
        drop(_13) -> [return: bb4, unwind: bb50];
    }

    bb40: {
        _54 = ((*_3).8: bool);
        switchInt(move _54) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _61 = const _;
        _56 = _61 as &[&str] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_const(move _56) -> [return: bb42, unwind continue];
    }

    bb42: {
        _0 = <StdoutLock<'_> as std::io::Write>::write_fmt(_1, move _55) -> [return: bb47, unwind continue];
    }

    bb43: {
        _62 = const _;
        _58 = _62 as &[&str] (PointerCoercion(Unsize));
        _57 = Arguments::<'_>::new_const(move _58) -> [return: bb44, unwind continue];
    }

    bb44: {
        _0 = <StdoutLock<'_> as std::io::Write>::write_fmt(_1, move _57) -> [return: bb47, unwind continue];
    }

    bb45: {
        _65 = const false;
        drop(_13) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        drop(_9) -> [return: bb47, unwind continue];
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_38) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_13) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_9) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52 (cleanup): {
        drop(_22) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_64) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_17) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_65) -> [0: bb49, otherwise: bb54];
    }

    bb56: {
        goto -> bb45;
    }
}

promoted[0] in print_entry_colorized: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_entry_colorized: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in print_entry_colorized: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\0"];
        _0 = &_1;
        return;
    }
}

promoted[3] in print_entry_colorized: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

fn print_entry_uncolorized_base(_1: &mut StdoutLock<'_>, _2: &Path, _3: &Options) -> Result<(), std::io::Error> {
    debug stdout => _1;
    debug path => _2;
    debug config => _3;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _4: &str;
    let mut _5: bool;
    let _6: &str;
    let mut _8: isize;
    let mut _10: std::string::String;
    let _11: &str;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: &str;
    let _14: &&std::string::String;
    let mut _15: &mut std::string::String;
    let mut _16: &mut std::borrow::Cow<'_, str>;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 2];
    let _21: [core::fmt::rt::Argument<'_>; 2];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &std::borrow::Cow<'_, str>;
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &&str;
    let mut _27: &std::string::String;
    let mut _28: bool;
    scope 1 {
        debug separator => _4;
        let mut _7: std::borrow::Cow<'_, str>;
        scope 2 {
            debug path_string => _7;
            let mut _26: &[&str; 2];
            scope 3 {
                debug separator => _9;
                let _9: &std::string::String;
            }
        }
    }

    bb0: {
        _28 = const false;
        _5 = ((*_3).8: bool);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = const "\0";
        goto -> bb3;
    }

    bb2: {
        _6 = const "\n";
        _4 = _6;
        goto -> bb3;
    }

    bb3: {
        _7 = Path::to_string_lossy(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(((*_3).25: std::option::Option<std::string::String>));
        switchInt(move _8) -> [1: bb5, otherwise: bb12];
    }

    bb5: {
        _9 = &((((*_3).25: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _12 = &_7;
        _11 = <Cow<'_, str> as Deref>::deref(_12) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _14 = &_9;
        _27 = deref_copy (*_14);
        _13 = <String as Deref>::deref(_27) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _10 = replace_path_separator(_11, _13) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _28 = const true;
        _16 = &mut _7;
        _15 = Cow::<'_, str>::to_mut(move _16) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        drop((*_15)) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _28 = const false;
        (*_15) = move _10;
        _28 = const false;
        goto -> bb12;
    }

    bb11 (cleanup): {
        _28 = const false;
        (*_15) = move _10;
        goto -> bb21;
    }

    bb12: {
        _26 = const _;
        _18 = _26 as &[&str] (PointerCoercion(Unsize));
        _23 = &_7;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_23) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _25 = &_4;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_25) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _21 = [move _22, move _24];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _0 = <StdoutLock<'_> as std::io::Write>::write_fmt(_1, move _17) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        drop(_7) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_28) -> [0: bb18, otherwise: bb20];
    }
}

promoted[0] in print_entry_uncolorized_base: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

fn print_entry_uncolorized(_1: &mut StdoutLock<'_>, _2: &Path, _3: &Options) -> Result<(), std::io::Error> {
    debug stdout => _1;
    debug path => _2;
    debug config => _3;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: &std::option::Option<std::string::String>;
    let _7: &[u8; 1];
    let mut _8: bool;
    let _9: &[u8; 1];
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _11: std::result::Result<(), std::io::Error>;
    let _12: &[u8];
    let _13: &std::ffi::OsStr;
    let mut _14: isize;
    let mut _16: &[u8];
    let mut _17: &[u8; 1];
    scope 1 {
        debug separator => _7;
        let _15: std::result::Result<std::convert::Infallible, std::io::Error>;
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = ((*_3).15: bool);
        switchInt(move _4) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _6 = &((*_3).25: std::option::Option<std::string::String>);
        _5 = Option::<String>::is_some(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = print_entry_uncolorized_base(_1, _2, _3) -> [return: bb15, unwind continue];
    }

    bb4: {
        _8 = ((*_3).8: bool);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = const b"\x00";
        goto -> bb7;
    }

    bb6: {
        _9 = const b"\n";
        _7 = _9;
        goto -> bb7;
    }

    bb7: {
        _13 = Path::as_os_str(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        _12 = <OsStr as OsStrExt>::as_bytes(_13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = <StdoutLock<'_> as std::io::Write>::write_all(_1, _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        _10 = <Result<(), std::io::Error> as Try>::branch(move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _17 = _7;
        _16 = move _17 as &[u8] (PointerCoercion(Unsize));
        _0 = <StdoutLock<'_> as std::io::Write>::write_all(_1, move _16) -> [return: bb15, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _15) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

alloc6 (size: 1, align: 1) {
    0a                                              │ .
}

alloc5 (size: 1, align: 1) {
    00                                              │ .
}

fn pattern_has_uppercase_char(_1: &str) -> bool {
    debug pattern => _1;
    let mut _0: bool;
    let mut _2: regex_syntax::Parser;
    let mut _3: &regex_syntax::ParserBuilder;
    let _4: &mut regex_syntax::ParserBuilder;
    let mut _5: &mut regex_syntax::ParserBuilder;
    let mut _6: regex_syntax::ParserBuilder;
    let mut _7: std::result::Result<bool, regex_syntax::Error>;
    let mut _8: std::result::Result<regex_syntax::hir::Hir, regex_syntax::Error>;
    let mut _9: &mut regex_syntax::Parser;
    scope 1 {
        debug parser => _2;
    }

    bb0: {
        _6 = regex_syntax::ParserBuilder::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        _4 = regex_syntax::ParserBuilder::allow_invalid_utf8(move _5, const true) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &(*_4);
        _2 = regex_syntax::ParserBuilder::build(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &mut _2;
        _8 = regex_syntax::Parser::parse(move _9, _1) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = Result::<Hir, regex_syntax::Error>::map::<bool, {closure@src/regex_helper.rs:10:14: 10:19}>(move _8, const ZeroSized: {closure@src/regex_helper.rs:10:14: 10:19}) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = Result::<bool, regex_syntax::Error>::unwrap_or(move _7, const false) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn pattern_has_uppercase_char::{closure#0}(_1: {closure@src/regex_helper.rs:10:14: 10:19}, _2: Hir) -> bool {
    debug hir => _2;
    let mut _0: bool;
    let _3: &regex_syntax::hir::Hir;

    bb0: {
        _3 = &_2;
        _0 = hir_has_uppercase_char(_3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn hir_has_uppercase_char(_1: &Hir) -> bool {
    debug hir => _1;
    let mut _0: bool;
    let mut _2: &regex_syntax::hir::HirKind;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let _6: char;
    let _7: u8;
    let mut _8: char;
    let _9: &regex_syntax::hir::ClassUnicode;
    let mut _10: &mut regex_syntax::hir::ClassUnicodeIter<'_>;
    let mut _11: regex_syntax::hir::ClassUnicodeIter<'_>;
    let _12: &regex_syntax::hir::ClassBytes;
    let mut _13: &mut regex_syntax::hir::ClassBytesIter<'_>;
    let mut _14: regex_syntax::hir::ClassBytesIter<'_>;
    let _15: &std::boxed::Box<regex_syntax::hir::Hir>;
    let mut _16: &regex_syntax::hir::Hir;
    let _17: &std::vec::Vec<regex_syntax::hir::Hir>;
    let mut _18: &mut std::slice::Iter<'_, regex_syntax::hir::Hir>;
    let mut _19: std::slice::Iter<'_, regex_syntax::hir::Hir>;
    let _20: &[regex_syntax::hir::Hir];
    let mut _21: &std::vec::Vec<regex_syntax::hir::Hir>;
    let mut _22: std::boxed::Box<regex_syntax::hir::Hir>;
    let mut _23: *const regex_syntax::hir::Hir;
    scope 1 {
        debug c => _6;
    }
    scope 2 {
        debug b => _7;
    }
    scope 3 {
        debug ranges => _9;
    }
    scope 4 {
        debug ranges => _12;
    }
    scope 5 {
        debug hir => _15;
    }
    scope 6 {
        debug hirs => _17;
    }

    bb0: {
        _2 = Hir::kind(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant((*_2));
        switchInt(move _5) -> [1: bb3, 2: bb4, 5: bb14, 6: bb13, 7: bb16, 8: bb17, otherwise: bb2];
    }

    bb2: {
        _0 = const false;
        goto -> bb20;
    }

    bb3: {
        _3 = discriminant((((*_2) as Literal).0: regex_syntax::hir::Literal));
        switchInt(move _3) -> [0: bb5, 1: bb6, otherwise: bb21];
    }

    bb4: {
        _4 = discriminant((((*_2) as Class).0: regex_syntax::hir::Class));
        switchInt(move _4) -> [0: bb8, 1: bb10, otherwise: bb21];
    }

    bb5: {
        _6 = (((((*_2) as Literal).0: regex_syntax::hir::Literal) as Unicode).0: char);
        _0 = char::methods::<impl char>::is_uppercase(_6) -> [return: bb20, unwind continue];
    }

    bb6: {
        _7 = (((((*_2) as Literal).0: regex_syntax::hir::Literal) as Byte).0: u8);
        _8 = <char as From<u8>>::from(_7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = char::methods::<impl char>::is_uppercase(move _8) -> [return: bb20, unwind continue];
    }

    bb8: {
        _9 = &(((((*_2) as Class).0: regex_syntax::hir::Class) as Unicode).0: regex_syntax::hir::ClassUnicode);
        _11 = regex_syntax::hir::ClassUnicode::iter(_9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = &mut _11;
        _0 = <ClassUnicodeIter<'_> as Iterator>::any::<{closure@src/regex_helper.rs:23:18: 23:21}>(move _10, const ZeroSized: {closure@src/regex_helper.rs:23:18: 23:21}) -> [return: bb20, unwind continue];
    }

    bb10: {
        _12 = &(((((*_2) as Class).0: regex_syntax::hir::Class) as Bytes).0: regex_syntax::hir::ClassBytes);
        _14 = ClassBytes::iter(_12) -> [return: bb11, unwind continue];
    }

    bb11: {
        _13 = &mut _14;
        _0 = <ClassBytesIter<'_> as Iterator>::any::<{closure@src/regex_helper.rs:26:18: 26:21}>(move _13, const ZeroSized: {closure@src/regex_helper.rs:26:18: 26:21}) -> [return: bb20, unwind continue];
    }

    bb12: {
        _22 = deref_copy (*_15);
        _23 = (((_22.0: std::ptr::Unique<regex_syntax::hir::Hir>).0: std::ptr::NonNull<regex_syntax::hir::Hir>).0: *const regex_syntax::hir::Hir);
        _16 = &(*_23);
        _0 = hir_has_uppercase_char(move _16) -> [return: bb20, unwind continue];
    }

    bb13: {
        _15 = &((((*_2) as Group).0: regex_syntax::hir::Group).1: std::boxed::Box<regex_syntax::hir::Hir>);
        goto -> bb12;
    }

    bb14: {
        _15 = &((((*_2) as Repetition).0: regex_syntax::hir::Repetition).2: std::boxed::Box<regex_syntax::hir::Hir>);
        goto -> bb12;
    }

    bb15: {
        _21 = _17;
        _20 = <Vec<Hir> as Deref>::deref(move _21) -> [return: bb18, unwind continue];
    }

    bb16: {
        _17 = &(((*_2) as Concat).0: std::vec::Vec<regex_syntax::hir::Hir>);
        goto -> bb15;
    }

    bb17: {
        _17 = &(((*_2) as Alternation).0: std::vec::Vec<regex_syntax::hir::Hir>);
        goto -> bb15;
    }

    bb18: {
        _19 = core::slice::<impl [Hir]>::iter(_20) -> [return: bb19, unwind continue];
    }

    bb19: {
        _18 = &mut _19;
        _0 = <std::slice::Iter<'_, Hir> as Iterator>::any::<for<'a> fn(&'a Hir) -> bool {hir_has_uppercase_char}>(move _18, hir_has_uppercase_char) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21: {
        unreachable;
    }
}

fn hir_has_uppercase_char::{closure#0}(_1: &mut {closure@src/regex_helper.rs:23:18: 23:21}, _2: &ClassUnicodeRange) -> bool {
    debug r => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: char;
    let mut _5: char;

    bb0: {
        _4 = ClassUnicodeRange::start(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = char::methods::<impl char>::is_uppercase(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _5 = ClassUnicodeRange::end(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = char::methods::<impl char>::is_uppercase(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn hir_has_uppercase_char::{closure#1}(_1: &mut {closure@src/regex_helper.rs:26:18: 26:21}, _2: &ClassBytesRange) -> bool {
    debug r => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: char;
    let mut _5: u8;
    let mut _6: char;
    let mut _7: u8;

    bb0: {
        _5 = ClassBytesRange::start(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <char as From<u8>>::from(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = char::methods::<impl char>::is_uppercase(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = const true;
        goto -> bb8;
    }

    bb5: {
        _7 = ClassBytesRange::end(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = <char as From<u8>>::from(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = char::methods::<impl char>::is_uppercase(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn pattern_matches_strings_with_leading_dot(_1: &str) -> bool {
    debug pattern => _1;
    let mut _0: bool;
    let mut _2: regex_syntax::Parser;
    let mut _3: &regex_syntax::ParserBuilder;
    let _4: &mut regex_syntax::ParserBuilder;
    let mut _5: &mut regex_syntax::ParserBuilder;
    let mut _6: regex_syntax::ParserBuilder;
    let mut _7: std::result::Result<bool, regex_syntax::Error>;
    let mut _8: std::result::Result<regex_syntax::hir::Hir, regex_syntax::Error>;
    let mut _9: &mut regex_syntax::Parser;
    scope 1 {
        debug parser => _2;
    }

    bb0: {
        _6 = regex_syntax::ParserBuilder::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        _4 = regex_syntax::ParserBuilder::allow_invalid_utf8(move _5, const true) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &(*_4);
        _2 = regex_syntax::ParserBuilder::build(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &mut _2;
        _8 = regex_syntax::Parser::parse(move _9, _1) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = Result::<Hir, regex_syntax::Error>::map::<bool, {closure@src/regex_helper.rs:43:14: 43:19}>(move _8, const ZeroSized: {closure@src/regex_helper.rs:43:14: 43:19}) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = Result::<bool, regex_syntax::Error>::unwrap_or(move _7, const false) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn pattern_matches_strings_with_leading_dot::{closure#0}(_1: {closure@src/regex_helper.rs:43:14: 43:19}, _2: Hir) -> bool {
    debug hir => _2;
    let mut _0: bool;
    let _3: &regex_syntax::hir::Hir;

    bb0: {
        _3 = &_2;
        _0 = hir_matches_strings_with_leading_dot(_3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn hir_matches_strings_with_leading_dot(_1: &Hir) -> bool {
    debug hir => _1;
    let mut _0: bool;
    let mut _2: &regex_syntax::hir::HirKind;
    let mut _3: isize;
    let _4: &std::vec::Vec<regex_syntax::hir::Hir>;
    let _6: &[regex_syntax::hir::Hir];
    let mut _7: std::option::Option<&regex_syntax::hir::Hir>;
    let mut _8: &mut std::slice::Iter<'_, regex_syntax::hir::Hir>;
    let mut _9: isize;
    let mut _11: bool;
    let _12: &regex_syntax::hir::HirKind;
    let mut _13: std::option::Option<&regex_syntax::hir::Hir>;
    let mut _14: &mut std::slice::Iter<'_, regex_syntax::hir::Hir>;
    let mut _15: isize;
    let _17: &regex_syntax::hir::HirKind;
    scope 1 {
        debug hirs => _4;
        let mut _5: std::slice::Iter<'_, regex_syntax::hir::Hir>;
        scope 2 {
            debug hirs => _5;
            scope 3 {
                debug hir => _10;
                let _10: &regex_syntax::hir::Hir;
                let mut _19: &regex_syntax::hir::HirKind;
            }
            scope 4 {
                debug hir => _16;
                let _16: &regex_syntax::hir::Hir;
                let mut _18: &regex_syntax::hir::HirKind;
            }
        }
    }

    bb0: {
        _2 = Hir::kind(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant((*_2));
        switchInt(move _3) -> [7: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const false;
        goto -> bb17;
    }

    bb3: {
        _4 = &(((*_2) as Concat).0: std::vec::Vec<regex_syntax::hir::Hir>);
        _6 = <Vec<Hir> as Deref>::deref(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = core::slice::<impl [Hir]>::iter(_6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &mut _5;
        _7 = <std::slice::Iter<'_, Hir> as Iterator>::next(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb12];
    }

    bb7: {
        _10 = ((_7 as Some).0: &regex_syntax::hir::Hir);
        _12 = Hir::kind(_10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = const _;
        _11 = <regex_syntax::hir::HirKind as PartialEq>::ne(_12, _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _11) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _0 = const false;
        goto -> bb17;
    }

    bb11: {
        _14 = &mut _5;
        _13 = <std::slice::Iter<'_, Hir> as Iterator>::next(move _14) -> [return: bb13, unwind continue];
    }

    bb12: {
        _0 = const false;
        goto -> bb17;
    }

    bb13: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb14, otherwise: bb16];
    }

    bb14: {
        _16 = ((_13 as Some).0: &regex_syntax::hir::Hir);
        _17 = Hir::kind(_16) -> [return: bb15, unwind continue];
    }

    bb15: {
        _18 = const _;
        _0 = <regex_syntax::hir::HirKind as PartialEq>::eq(_17, _18) -> [return: bb17, unwind continue];
    }

    bb16: {
        _0 = const false;
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

promoted[0] in hir_matches_strings_with_leading_dot: &regex_syntax::hir::HirKind = {
    let mut _0: &regex_syntax::hir::HirKind;
    let mut _1: regex_syntax::hir::HirKind;
    let mut _2: regex_syntax::hir::Literal;

    bb0: {
        _2 = regex_syntax::hir::Literal::Unicode(const '.');
        _1 = regex_syntax::hir::HirKind::Literal(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in hir_matches_strings_with_leading_dot: &regex_syntax::hir::HirKind = {
    let mut _0: &regex_syntax::hir::HirKind;
    let mut _1: regex_syntax::hir::HirKind;
    let mut _2: regex_syntax::hir::Anchor;

    bb0: {
        _2 = regex_syntax::hir::Anchor::StartText;
        _1 = regex_syntax::hir::HirKind::Anchor(move _2);
        _0 = &_1;
        return;
    }
}

const MAX_BUFFER_LENGTH: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1000_usize;
        return;
    }
}

fn walk::scan(_1: &[PathBuf], _2: Arc<regex::bytes::Regex>, _3: Arc<Options>) -> Result<exit_codes::ExitCode, anyhow::Error> {
    debug path_vec => _1;
    debug pattern => _2;
    debug config => _3;
    let mut _0: std::result::Result<exit_codes::ExitCode, anyhow::Error>;
    let mut _4: std::slice::Iter<'_, std::path::PathBuf>;
    let mut _6: std::option::Option<&std::path::PathBuf>;
    let mut _7: &mut std::slice::Iter<'_, std::path::PathBuf>;
    let _8: &str;
    let mut _11: (std::sync::mpsc::Sender<walk::WorkerResult>, std::sync::mpsc::Receiver<walk::WorkerResult>);
    let mut _13: &std::path::Path;
    let mut _14: std::slice::Iter<'_, std::string::String>;
    let mut _15: &std::vec::Vec<std::string::String>;
    let _16: &options::Options;
    let mut _17: &std::sync::Arc<options::Options>;
    let mut _19: std::option::Option<&std::string::String>;
    let mut _20: &mut std::slice::Iter<'_, std::string::String>;
    let mut _21: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, &mut ignore::overrides::OverrideBuilder>;
    let mut _24: std::result::Result<&mut ignore::overrides::OverrideBuilder, anyhow::Error>;
    let mut _25: std::result::Result<&mut ignore::overrides::OverrideBuilder, ignore::Error>;
    let mut _26: &mut ignore::overrides::OverrideBuilder;
    let _27: &str;
    let mut _28: isize;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, ignore::overrides::Override>;
    let mut _33: std::result::Result<ignore::overrides::Override, anyhow::Error>;
    let mut _34: std::result::Result<ignore::overrides::Override, ignore::Error>;
    let mut _35: &ignore::overrides::OverrideBuilder;
    let mut _36: isize;
    let mut _40: &std::path::Path;
    let _41: &mut ignore::WalkBuilder;
    let mut _42: &mut ignore::WalkBuilder;
    let mut _43: &mut ignore::WalkBuilder;
    let mut _44: &mut ignore::WalkBuilder;
    let mut _45: &mut ignore::WalkBuilder;
    let mut _46: &mut ignore::WalkBuilder;
    let mut _47: &mut ignore::WalkBuilder;
    let mut _48: &mut ignore::WalkBuilder;
    let mut _49: &mut ignore::WalkBuilder;
    let mut _50: &mut ignore::WalkBuilder;
    let mut _51: &mut ignore::WalkBuilder;
    let mut _52: bool;
    let mut _53: &options::Options;
    let mut _54: &std::sync::Arc<options::Options>;
    let mut _55: bool;
    let mut _56: &options::Options;
    let mut _57: &std::sync::Arc<options::Options>;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: &options::Options;
    let mut _61: &std::sync::Arc<options::Options>;
    let mut _62: &options::Options;
    let mut _63: &std::sync::Arc<options::Options>;
    let mut _64: bool;
    let mut _65: &options::Options;
    let mut _66: &std::sync::Arc<options::Options>;
    let mut _67: bool;
    let mut _68: &options::Options;
    let mut _69: &std::sync::Arc<options::Options>;
    let mut _70: bool;
    let mut _71: &options::Options;
    let mut _72: &std::sync::Arc<options::Options>;
    let mut _73: ignore::overrides::Override;
    let mut _74: bool;
    let mut _75: &options::Options;
    let mut _76: &std::sync::Arc<options::Options>;
    let mut _77: bool;
    let mut _78: &options::Options;
    let mut _79: &std::sync::Arc<options::Options>;
    let mut _80: std::option::Option<usize>;
    let mut _81: &options::Options;
    let mut _82: &std::sync::Arc<options::Options>;
    let mut _83: bool;
    let mut _84: &options::Options;
    let mut _85: &std::sync::Arc<options::Options>;
    let _86: &mut ignore::WalkBuilder;
    let mut _87: &mut ignore::WalkBuilder;
    let mut _88: bool;
    let mut _89: &options::Options;
    let mut _90: &std::sync::Arc<options::Options>;
    let mut _92: std::option::Option<std::path::PathBuf>;
    let mut _93: std::option::Option<std::path::PathBuf>;
    let mut _94: isize;
    let mut _97: &mut ignore::WalkBuilder;
    let mut _98: isize;
    let mut _99: isize;
    let _101: ();
    let mut _102: std::string::String;
    let mut _104: std::fmt::Arguments<'_>;
    let mut _105: &[&str];
    let mut _106: &[core::fmt::rt::Argument<'_>];
    let _107: &[core::fmt::rt::Argument<'_>; 1];
    let _108: [core::fmt::rt::Argument<'_>; 1];
    let mut _109: core::fmt::rt::Argument<'_>;
    let _110: &std::string::String;
    let _111: std::string::String;
    let mut _112: &ignore::Error;
    let mut _113: std::slice::Iter<'_, std::path::PathBuf>;
    let mut _114: &std::vec::Vec<std::path::PathBuf>;
    let _115: &options::Options;
    let mut _116: &std::sync::Arc<options::Options>;
    let mut _118: std::option::Option<&std::path::PathBuf>;
    let mut _119: &mut std::slice::Iter<'_, std::path::PathBuf>;
    let mut _120: isize;
    let mut _123: &mut ignore::WalkBuilder;
    let mut _124: isize;
    let mut _125: isize;
    let _127: ();
    let mut _128: std::string::String;
    let mut _130: std::fmt::Arguments<'_>;
    let mut _131: &[&str];
    let mut _132: &[core::fmt::rt::Argument<'_>];
    let _133: &[core::fmt::rt::Argument<'_>; 1];
    let _134: [core::fmt::rt::Argument<'_>; 1];
    let mut _135: core::fmt::rt::Argument<'_>;
    let _136: &std::string::String;
    let _137: std::string::String;
    let mut _138: &ignore::Error;
    let mut _139: std::slice::Iter<'_, std::path::PathBuf>;
    let mut _140: std::slice::Iter<'_, std::path::PathBuf>;
    let mut _142: std::option::Option<&std::path::PathBuf>;
    let mut _143: &mut std::slice::Iter<'_, std::path::PathBuf>;
    let mut _144: isize;
    let _146: &mut ignore::WalkBuilder;
    let mut _147: &mut ignore::WalkBuilder;
    let mut _148: &std::path::Path;
    let mut _150: &ignore::WalkBuilder;
    let _151: &mut ignore::WalkBuilder;
    let mut _152: &mut ignore::WalkBuilder;
    let mut _153: usize;
    let mut _154: &options::Options;
    let mut _155: &std::sync::Arc<options::Options>;
    let mut _157: std::sync::atomic::AtomicBool;
    let mut _158: bool;
    let mut _159: &std::option::Option<lscolors::LsColors>;
    let _160: &options::Options;
    let mut _161: &std::sync::Arc<options::Options>;
    let mut _162: bool;
    let mut _163: &std::option::Option<std::sync::Arc<exec::CommandTemplate>>;
    let _164: &options::Options;
    let mut _165: &std::sync::Arc<options::Options>;
    let _167: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let _168: ();
    let mut _169: std::result::Result<(), ctrlc::Error>;
    let mut _170: {closure@src/walk.rs:136:28: 136:35};
    let _172: &std::sync::Arc<options::Options>;
    let _173: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _174: std::sync::mpsc::Receiver<walk::WorkerResult>;
    let _175: ();
    let _176: &std::sync::Arc<options::Options>;
    let _177: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _178: std::sync::Arc<regex::bytes::Regex>;
    let mut _179: ignore::WalkParallel;
    let mut _180: std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _182: std::result::Result<exit_codes::ExitCode, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _183: std::thread::JoinHandle<exit_codes::ExitCode>;
    let mut _184: bool;
    let _185: &std::sync::atomic::AtomicBool;
    let mut _186: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _187: std::sync::atomic::Ordering;
    let mut _188: exit_codes::ExitCode;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    scope 1 {
        debug path_iter => _4;
        let _5: &std::path::PathBuf;
        scope 2 {
            debug first_path_buf => _5;
            let _9: std::sync::mpsc::Sender<walk::WorkerResult>;
            let _10: std::sync::mpsc::Receiver<walk::WorkerResult>;
            scope 3 {
                debug tx => _9;
                debug rx => _10;
                let mut _12: ignore::overrides::OverrideBuilder;
                scope 4 {
                    debug override_builder => _12;
                    let mut _18: std::slice::Iter<'_, std::string::String>;
                    let _31: ignore::overrides::Override;
                    let _37: std::result::Result<std::convert::Infallible, anyhow::Error>;
                    let _38: ignore::overrides::Override;
                    scope 5 {
                        debug iter => _18;
                        let _22: &std::string::String;
                        scope 6 {
                            debug pattern => _22;
                            let _29: std::result::Result<std::convert::Infallible, anyhow::Error>;
                            let _30: &mut ignore::overrides::OverrideBuilder;
                            scope 7 {
                                debug residual => _29;
                                scope 8 {
                                }
                            }
                            scope 9 {
                                debug val => _30;
                                scope 10 {
                                }
                            }
                        }
                    }
                    scope 11 {
                        debug overrides => _31;
                        let mut _39: ignore::WalkBuilder;
                        scope 16 {
                            debug walker => _39;
                            let _91: std::option::Option<std::path::PathBuf>;
                            let mut _117: std::slice::Iter<'_, std::path::PathBuf>;
                            let mut _141: std::slice::Iter<'_, std::path::PathBuf>;
                            let _149: ignore::WalkParallel;
                            scope 17 {
                                debug config_dir_op => _91;
                                scope 18 {
                                    debug global_ignore_file => _95;
                                    let _95: std::path::PathBuf;
                                    let _96: std::option::Option<ignore::Error>;
                                    scope 19 {
                                        debug result => _96;
                                        let _100: ignore::Error;
                                        scope 20 {
                                            debug err => _100;
                                            let _103: std::string::String;
                                            let mut _190: &[&str; 2];
                                            scope 21 {
                                                debug res => _103;
                                            }
                                        }
                                    }
                                }
                            }
                            scope 22 {
                                debug iter => _117;
                                let _121: &std::path::PathBuf;
                                scope 23 {
                                    debug ignore_file => _121;
                                    let _122: std::option::Option<ignore::Error>;
                                    scope 24 {
                                        debug result => _122;
                                        let _126: ignore::Error;
                                        scope 25 {
                                            debug err => _126;
                                            let _129: std::string::String;
                                            let mut _189: &[&str; 2];
                                            scope 26 {
                                                debug res => _129;
                                            }
                                        }
                                    }
                                }
                            }
                            scope 27 {
                                debug iter => _141;
                                let _145: &std::path::PathBuf;
                                scope 28 {
                                    debug path_entry => _145;
                                }
                            }
                            scope 29 {
                                debug parallel_walker => _149;
                                let _156: std::sync::Arc<std::sync::atomic::AtomicBool>;
                                scope 30 {
                                    debug wants_to_quit => _156;
                                    let _166: std::sync::Arc<std::sync::atomic::AtomicBool>;
                                    let _171: std::thread::JoinHandle<exit_codes::ExitCode>;
                                    scope 31 {
                                        debug wq => _166;
                                    }
                                    scope 32 {
                                        debug receiver_thread => _171;
                                        let _181: exit_codes::ExitCode;
                                        scope 33 {
                                            debug exit_code => _181;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 12 {
                        debug residual => _37;
                        scope 13 {
                        }
                    }
                    scope 14 {
                        debug val => _38;
                        scope 15 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _199 = const false;
        _198 = const false;
        _197 = const false;
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _192 = const false;
        _191 = const false;
        _193 = const false;
        _199 = const true;
        _4 = core::slice::<impl [PathBuf]>::iter(_1) -> [return: bb1, unwind: bb133];
    }

    bb1: {
        _7 = &mut _4;
        _6 = <std::slice::Iter<'_, PathBuf> as Iterator>::next(move _7) -> [return: bb2, unwind: bb133];
    }

    bb2: {
        _8 = const "Error: Path vector can not be empty";
        _5 = Option::<&PathBuf>::expect(move _6, _8) -> [return: bb3, unwind: bb133];
    }

    bb3: {
        _11 = channel::<WorkerResult>() -> [return: bb4, unwind: bb133];
    }

    bb4: {
        _198 = const true;
        _9 = move (_11.0: std::sync::mpsc::Sender<walk::WorkerResult>);
        _197 = const true;
        _10 = move (_11.1: std::sync::mpsc::Receiver<walk::WorkerResult>);
        _13 = PathBuf::as_path(_5) -> [return: bb5, unwind: bb153];
    }

    bb5: {
        _12 = OverrideBuilder::new::<&Path>(move _13) -> [return: bb6, unwind: bb153];
    }

    bb6: {
        _17 = &_3;
        _16 = <Arc<Options> as Deref>::deref(move _17) -> [return: bb7, unwind: bb132];
    }

    bb7: {
        _15 = &((*_16).19: std::vec::Vec<std::string::String>);
        _14 = <&Vec<String> as IntoIterator>::into_iter(move _15) -> [return: bb8, unwind: bb132];
    }

    bb8: {
        _18 = move _14;
        goto -> bb9;
    }

    bb9: {
        _20 = &mut _18;
        _19 = <std::slice::Iter<'_, String> as Iterator>::next(_20) -> [return: bb10, unwind: bb132];
    }

    bb10: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _22 = ((_19 as Some).0: &std::string::String);
        _26 = &mut _12;
        _27 = <String as Deref>::deref(_22) -> [return: bb14, unwind: bb132];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _35 = &_12;
        _34 = OverrideBuilder::build(move _35) -> [return: bb20, unwind: bb132];
    }

    bb14: {
        _25 = OverrideBuilder::add(move _26, _27) -> [return: bb15, unwind: bb132];
    }

    bb15: {
        _24 = Result::<&mut OverrideBuilder, ignore::Error>::map_err::<anyhow::Error, {closure@src/walk.rs:61:22: 61:25}>(move _25, const ZeroSized: {closure@src/walk.rs:61:22: 61:25}) -> [return: bb16, unwind: bb132];
    }

    bb16: {
        _23 = <Result<&mut OverrideBuilder, anyhow::Error> as Try>::branch(move _24) -> [return: bb17, unwind: bb132];
    }

    bb17: {
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb12];
    }

    bb18: {
        _30 = move ((_23 as Continue).0: &mut ignore::overrides::OverrideBuilder);
        goto -> bb9;
    }

    bb19: {
        _29 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _29) -> [return: bb158, unwind: bb132];
    }

    bb20: {
        _33 = Result::<Override, ignore::Error>::map_err::<anyhow::Error, {closure@src/walk.rs:65:18: 65:21}>(move _34, const ZeroSized: {closure@src/walk.rs:65:18: 65:21}) -> [return: bb21, unwind: bb132];
    }

    bb21: {
        _32 = <Result<Override, anyhow::Error> as Try>::branch(move _33) -> [return: bb22, unwind: bb132];
    }

    bb22: {
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb12];
    }

    bb23: {
        _38 = move ((_32 as Continue).0: ignore::overrides::Override);
        _196 = const true;
        _31 = move _38;
        _40 = PathBuf::as_path(_5) -> [return: bb26, unwind: bb151];
    }

    bb24: {
        _37 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _37) -> [return: bb25, unwind: bb132];
    }

    bb25: {
        _196 = const false;
        goto -> bb118;
    }

    bb26: {
        _39 = WalkBuilder::new::<&Path>(move _40) -> [return: bb27, unwind: bb151];
    }

    bb27: {
        _51 = &mut _39;
        _54 = &_3;
        _53 = <Arc<Options> as Deref>::deref(move _54) -> [return: bb28, unwind: bb131];
    }

    bb28: {
        _52 = ((*_53).2: bool);
        _50 = WalkBuilder::hidden(move _51, move _52) -> [return: bb29, unwind: bb131];
    }

    bb29: {
        _57 = &_3;
        _56 = <Arc<Options> as Deref>::deref(move _57) -> [return: bb30, unwind: bb131];
    }

    bb30: {
        _55 = ((*_56).3: bool);
        _49 = WalkBuilder::ignore(_50, move _55) -> [return: bb31, unwind: bb131];
    }

    bb31: {
        _61 = &_3;
        _60 = <Arc<Options> as Deref>::deref(move _61) -> [return: bb32, unwind: bb131];
    }

    bb32: {
        _59 = ((*_60).3: bool);
        switchInt(move _59) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _58 = const true;
        goto -> bb36;
    }

    bb34: {
        _63 = &_3;
        _62 = <Arc<Options> as Deref>::deref(move _63) -> [return: bb35, unwind: bb131];
    }

    bb35: {
        _58 = ((*_62).4: bool);
        goto -> bb36;
    }

    bb36: {
        _48 = WalkBuilder::parents(_49, move _58) -> [return: bb37, unwind: bb131];
    }

    bb37: {
        _66 = &_3;
        _65 = <Arc<Options> as Deref>::deref(move _66) -> [return: bb38, unwind: bb131];
    }

    bb38: {
        _64 = ((*_65).4: bool);
        _47 = WalkBuilder::git_ignore(_48, move _64) -> [return: bb39, unwind: bb131];
    }

    bb39: {
        _69 = &_3;
        _68 = <Arc<Options> as Deref>::deref(move _69) -> [return: bb40, unwind: bb131];
    }

    bb40: {
        _67 = ((*_68).4: bool);
        _46 = WalkBuilder::git_global(_47, move _67) -> [return: bb41, unwind: bb131];
    }

    bb41: {
        _72 = &_3;
        _71 = <Arc<Options> as Deref>::deref(move _72) -> [return: bb42, unwind: bb131];
    }

    bb42: {
        _70 = ((*_71).4: bool);
        _45 = WalkBuilder::git_exclude(_46, move _70) -> [return: bb43, unwind: bb131];
    }

    bb43: {
        _196 = const false;
        _73 = move _31;
        _44 = WalkBuilder::overrides(_45, move _73) -> [return: bb44, unwind: bb131];
    }

    bb44: {
        _76 = &_3;
        _75 = <Arc<Options> as Deref>::deref(move _76) -> [return: bb45, unwind: bb131];
    }

    bb45: {
        _74 = ((*_75).6: bool);
        _43 = WalkBuilder::follow_links(_44, move _74) -> [return: bb46, unwind: bb131];
    }

    bb46: {
        _79 = &_3;
        _78 = <Arc<Options> as Deref>::deref(move _79) -> [return: bb47, unwind: bb131];
    }

    bb47: {
        _77 = ((*_78).7: bool);
        _42 = WalkBuilder::same_file_system(_43, move _77) -> [return: bb48, unwind: bb131];
    }

    bb48: {
        _82 = &_3;
        _81 = <Arc<Options> as Deref>::deref(move _82) -> [return: bb49, unwind: bb131];
    }

    bb49: {
        _80 = ((*_81).9: std::option::Option<usize>);
        _41 = WalkBuilder::max_depth(_42, move _80) -> [return: bb50, unwind: bb131];
    }

    bb50: {
        _85 = &_3;
        _84 = <Arc<Options> as Deref>::deref(move _85) -> [return: bb51, unwind: bb131];
    }

    bb51: {
        _83 = ((*_84).3: bool);
        switchInt(move _83) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _87 = &mut _39;
        _86 = WalkBuilder::add_custom_ignore_filename::<&str>(move _87, const ".fdignore") -> [return: bb159, unwind: bb131];
    }

    bb53: {
        _90 = &_3;
        _89 = <Arc<Options> as Deref>::deref(move _90) -> [return: bb54, unwind: bb131];
    }

    bb54: {
        _88 = ((*_89).5: bool);
        switchInt(move _88) -> [0: bb70, otherwise: bb55];
    }

    bb55: {
        _91 = config_dir() -> [return: bb56, unwind: bb131];
    }

    bb56: {
        _93 = Option::<PathBuf>::map::<PathBuf, {closure@src/walk.rs:96:18: 96:21}>(move _91, const ZeroSized: {closure@src/walk.rs:96:18: 96:21}) -> [return: bb57, unwind: bb131];
    }

    bb57: {
        _92 = Option::<PathBuf>::filter::<{closure@src/walk.rs:97:21: 97:24}>(move _93, const ZeroSized: {closure@src/walk.rs:97:21: 97:24}) -> [return: bb58, unwind: bb131];
    }

    bb58: {
        _192 = const true;
        _94 = discriminant(_92);
        switchInt(move _94) -> [1: bb59, otherwise: bb69];
    }

    bb59: {
        _192 = const false;
        _95 = move ((_92 as Some).0: std::path::PathBuf);
        _97 = &mut _39;
        _96 = WalkBuilder::add_ignore::<PathBuf>(move _97, move _95) -> [return: bb60, unwind: bb131];
    }

    bb60: {
        _191 = const true;
        _99 = discriminant(_96);
        switchInt(move _99) -> [0: bb138, 1: bb61, otherwise: bb12];
    }

    bb61: {
        _98 = discriminant(((_96 as Some).0: ignore::Error));
        switchInt(move _98) -> [0: bb138, otherwise: bb62];
    }

    bb62: {
        _191 = const false;
        _100 = move ((_96 as Some).0: ignore::Error);
        _190 = const _;
        _105 = _190 as &[&str] (PointerCoercion(Unsize));
        _112 = &_100;
        _111 = <ignore::Error as ToString>::to_string(move _112) -> [return: bb63, unwind: bb130];
    }

    bb63: {
        _110 = &_111;
        _109 = core::fmt::rt::Argument::<'_>::new_display::<String>(_110) -> [return: bb64, unwind: bb129];
    }

    bb64: {
        _108 = [move _109];
        _107 = &_108;
        _106 = _107 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _104 = Arguments::<'_>::new_v1(move _105, move _106) -> [return: bb65, unwind: bb129];
    }

    bb65: {
        _103 = format(move _104) -> [return: bb66, unwind: bb129];
    }

    bb66: {
        drop(_111) -> [return: bb67, unwind: bb128];
    }

    bb67: {
        _102 = move _103;
        _101 = print_error::<String>(move _102) -> [return: bb68, unwind: bb130];
    }

    bb68: {
        drop(_100) -> [return: bb138, unwind: bb131];
    }

    bb69: {
        _201 = discriminant(_92);
        switchInt(move _201) -> [1: bb140, otherwise: bb139];
    }

    bb70: {
        _116 = &_3;
        _115 = <Arc<Options> as Deref>::deref(move _116) -> [return: bb71, unwind: bb131];
    }

    bb71: {
        _114 = &((*_115).20: std::vec::Vec<std::path::PathBuf>);
        _113 = <&Vec<PathBuf> as IntoIterator>::into_iter(move _114) -> [return: bb72, unwind: bb131];
    }

    bb72: {
        _117 = move _113;
        goto -> bb73;
    }

    bb73: {
        _119 = &mut _117;
        _118 = <std::slice::Iter<'_, PathBuf> as Iterator>::next(_119) -> [return: bb74, unwind: bb131];
    }

    bb74: {
        _120 = discriminant(_118);
        switchInt(move _120) -> [0: bb76, 1: bb75, otherwise: bb12];
    }

    bb75: {
        _121 = ((_118 as Some).0: &std::path::PathBuf);
        _123 = &mut _39;
        _122 = WalkBuilder::add_ignore::<&PathBuf>(move _123, _121) -> [return: bb77, unwind: bb131];
    }

    bb76: {
        _140 = move _4;
        _139 = <std::slice::Iter<'_, PathBuf> as IntoIterator>::into_iter(move _140) -> [return: bb86, unwind: bb131];
    }

    bb77: {
        _193 = const true;
        _125 = discriminant(_122);
        switchInt(move _125) -> [0: bb145, 1: bb78, otherwise: bb12];
    }

    bb78: {
        _124 = discriminant(((_122 as Some).0: ignore::Error));
        switchInt(move _124) -> [0: bb145, otherwise: bb79];
    }

    bb79: {
        _193 = const false;
        _126 = move ((_122 as Some).0: ignore::Error);
        _189 = const _;
        _131 = _189 as &[&str] (PointerCoercion(Unsize));
        _138 = &_126;
        _137 = <ignore::Error as ToString>::to_string(move _138) -> [return: bb80, unwind: bb127];
    }

    bb80: {
        _136 = &_137;
        _135 = core::fmt::rt::Argument::<'_>::new_display::<String>(_136) -> [return: bb81, unwind: bb126];
    }

    bb81: {
        _134 = [move _135];
        _133 = &_134;
        _132 = _133 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _130 = Arguments::<'_>::new_v1(move _131, move _132) -> [return: bb82, unwind: bb126];
    }

    bb82: {
        _129 = format(move _130) -> [return: bb83, unwind: bb126];
    }

    bb83: {
        drop(_137) -> [return: bb84, unwind: bb125];
    }

    bb84: {
        _128 = move _129;
        _127 = print_error::<String>(move _128) -> [return: bb85, unwind: bb127];
    }

    bb85: {
        drop(_126) -> [return: bb145, unwind: bb131];
    }

    bb86: {
        _141 = move _139;
        goto -> bb87;
    }

    bb87: {
        _143 = &mut _141;
        _142 = <std::slice::Iter<'_, PathBuf> as Iterator>::next(_143) -> [return: bb88, unwind: bb131];
    }

    bb88: {
        _144 = discriminant(_142);
        switchInt(move _144) -> [0: bb90, 1: bb89, otherwise: bb12];
    }

    bb89: {
        _145 = ((_142 as Some).0: &std::path::PathBuf);
        _147 = &mut _39;
        _148 = PathBuf::as_path(_145) -> [return: bb91, unwind: bb131];
    }

    bb90: {
        _152 = &mut _39;
        _155 = &_3;
        _154 = <Arc<Options> as Deref>::deref(move _155) -> [return: bb92, unwind: bb131];
    }

    bb91: {
        _146 = WalkBuilder::add::<&Path>(move _147, move _148) -> [return: bb160, unwind: bb131];
    }

    bb92: {
        _153 = ((*_154).12: usize);
        _151 = WalkBuilder::threads(move _152, move _153) -> [return: bb93, unwind: bb131];
    }

    bb93: {
        _150 = &(*_151);
        _149 = WalkBuilder::build_parallel(move _150) -> [return: bb94, unwind: bb131];
    }

    bb94: {
        _195 = const true;
        _157 = AtomicBool::new(const false) -> [return: bb95, unwind: bb149];
    }

    bb95: {
        _156 = Arc::<AtomicBool>::new(move _157) -> [return: bb96, unwind: bb149];
    }

    bb96: {
        _161 = &_3;
        _160 = <Arc<Options> as Deref>::deref(move _161) -> [return: bb97, unwind: bb124];
    }

    bb97: {
        _159 = &((*_160).14: std::option::Option<lscolors::LsColors>);
        _158 = Option::<LsColors>::is_some(move _159) -> [return: bb98, unwind: bb124];
    }

    bb98: {
        switchInt(move _158) -> [0: bb105, otherwise: bb99];
    }

    bb99: {
        _165 = &_3;
        _164 = <Arc<Options> as Deref>::deref(move _165) -> [return: bb100, unwind: bb124];
    }

    bb100: {
        _163 = &((*_164).18: std::option::Option<std::sync::Arc<exec::CommandTemplate>>);
        _162 = Option::<Arc<CommandTemplate>>::is_none(move _163) -> [return: bb101, unwind: bb124];
    }

    bb101: {
        switchInt(move _162) -> [0: bb105, otherwise: bb102];
    }

    bb102: {
        _167 = &_156;
        _166 = <Arc<AtomicBool> as Clone>::clone(_167) -> [return: bb103, unwind: bb124];
    }

    bb103: {
        _170 = {closure@src/walk.rs:136:28: 136:35} { wq: move _166 };
        _169 = set_handler::<{closure@src/walk.rs:136:28: 136:35}>(move _170) -> [return: bb104, unwind: bb124];
    }

    bb104: {
        _168 = Result::<(), ctrlc::Error>::unwrap(move _169) -> [return: bb161, unwind: bb124];
    }

    bb105: {
        _172 = &_3;
        _173 = &_156;
        _197 = const false;
        _174 = move _10;
        _171 = spawn_receiver(_172, _173, move _174) -> [return: bb106, unwind: bb124];
    }

    bb106: {
        _194 = const true;
        _176 = &_3;
        _177 = &_156;
        _199 = const false;
        _178 = move _2;
        _195 = const false;
        _179 = move _149;
        _198 = const false;
        _180 = move _9;
        _175 = spawn_senders(_176, _177, move _178, move _179, move _180) -> [return: bb107, unwind: bb147];
    }

    bb107: {
        _194 = const false;
        _183 = move _171;
        _182 = JoinHandle::<exit_codes::ExitCode>::join(move _183) -> [return: bb108, unwind: bb147];
    }

    bb108: {
        _181 = Result::<exit_codes::ExitCode, Box<dyn Any + Send>>::unwrap(move _182) -> [return: bb109, unwind: bb147];
    }

    bb109: {
        _186 = &_156;
        _185 = <Arc<AtomicBool> as Deref>::deref(move _186) -> [return: bb110, unwind: bb147];
    }

    bb110: {
        _187 = Relaxed;
        _184 = AtomicBool::load(_185, move _187) -> [return: bb111, unwind: bb147];
    }

    bb111: {
        switchInt(move _184) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _188 = exit_codes::ExitCode::KilledBySigint;
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Ok(move _188);
        goto -> bb114;
    }

    bb113: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Ok(_181);
        goto -> bb114;
    }

    bb114: {
        _194 = const false;
        drop(_156) -> [return: bb115, unwind: bb149];
    }

    bb115: {
        _195 = const false;
        drop(_39) -> [return: bb116, unwind: bb151];
    }

    bb116: {
        _196 = const false;
        drop(_12) -> [return: bb117, unwind: bb153];
    }

    bb117: {
        _197 = const false;
        _198 = const false;
        drop(_3) -> [return: bb123, unwind: bb157];
    }

    bb118: {
        drop(_12) -> [return: bb119, unwind: bb153];
    }

    bb119: {
        drop(_10) -> [return: bb120, unwind: bb155];
    }

    bb120: {
        _197 = const false;
        drop(_9) -> [return: bb121, unwind: bb133];
    }

    bb121: {
        _198 = const false;
        drop(_3) -> [return: bb122, unwind: bb157];
    }

    bb122: {
        drop(_2) -> [return: bb123, unwind continue];
    }

    bb123: {
        return;
    }

    bb124 (cleanup): {
        drop(_156) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_129) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_137) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_126) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_103) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_111) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_100) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_39) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_12) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_3) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        resume;
    }

    bb135: {
        _191 = const false;
        goto -> bb69;
    }

    bb136: {
        switchInt(_191) -> [0: bb135, otherwise: bb137];
    }

    bb137: {
        drop(((_96 as Some).0: ignore::Error)) -> [return: bb135, unwind: bb131];
    }

    bb138: {
        _200 = discriminant(_96);
        switchInt(move _200) -> [1: bb136, otherwise: bb135];
    }

    bb139: {
        _192 = const false;
        goto -> bb70;
    }

    bb140: {
        switchInt(_192) -> [0: bb139, otherwise: bb141];
    }

    bb141: {
        drop(((_92 as Some).0: std::path::PathBuf)) -> [return: bb139, unwind: bb131];
    }

    bb142: {
        _193 = const false;
        goto -> bb73;
    }

    bb143: {
        switchInt(_193) -> [0: bb142, otherwise: bb144];
    }

    bb144: {
        drop(((_122 as Some).0: ignore::Error)) -> [return: bb142, unwind: bb131];
    }

    bb145: {
        _202 = discriminant(_122);
        switchInt(move _202) -> [1: bb143, otherwise: bb142];
    }

    bb146 (cleanup): {
        drop(_171) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        switchInt(_194) -> [0: bb124, otherwise: bb146];
    }

    bb148 (cleanup): {
        drop(_149) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        switchInt(_195) -> [0: bb131, otherwise: bb148];
    }

    bb150 (cleanup): {
        drop(_31) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        switchInt(_196) -> [0: bb132, otherwise: bb150];
    }

    bb152 (cleanup): {
        drop(_10) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_197) -> [0: bb155, otherwise: bb152];
    }

    bb154 (cleanup): {
        drop(_9) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        switchInt(_198) -> [0: bb133, otherwise: bb154];
    }

    bb156 (cleanup): {
        drop(_2) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        switchInt(_199) -> [0: bb134, otherwise: bb156];
    }

    bb158: {
        goto -> bb118;
    }

    bb159: {
        goto -> bb53;
    }

    bb160: {
        goto -> bb87;
    }

    bb161: {
        goto -> bb105;
    }
}

promoted[0] in walk::scan: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Malformed pattern in custom ignore file. ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[1] in walk::scan: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Malformed pattern in global ignore file. ", const "."];
        _0 = &_1;
        return;
    }
}

fn walk::scan::{closure#0}(_1: {closure@src/walk.rs:61:22: 61:25}, _2: ignore::Error) -> anyhow::Error {
    debug e => _2;
    let mut _0: anyhow::Error;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &ignore::Error;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<ignore::Error>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = new_adhoc::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in walk::scan::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Malformed exclude pattern: "];
        _0 = &_1;
        return;
    }
}

fn walk::scan::{closure#1}(_1: {closure@src/walk.rs:65:18: 65:21}, _2: ignore::Error) -> anyhow::Error {
    let mut _0: anyhow::Error;

    bb0: {
        _0 = new_adhoc::<&str>(const "Mismatch in exclude patterns") -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn walk::scan::{closure#2}(_1: {closure@src/walk.rs:96:18: 96:21}, _2: PathBuf) -> PathBuf {
    debug p => _2;
    let mut _0: std::path::PathBuf;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;
    let _5: std::path::PathBuf;
    let _6: &std::path::Path;
    let mut _7: &std::path::PathBuf;

    bb0: {
        _7 = &_2;
        _6 = <PathBuf as Deref>::deref(move _7) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _5 = Path::join::<&str>(_6, const "fd") -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = &_5;
        _3 = <PathBuf as Deref>::deref(move _4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = Path::join::<&str>(_3, const "ignore") -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn walk::scan::{closure#3}(_1: {closure@src/walk.rs:97:21: 97:24}, _2: &PathBuf) -> bool {
    debug p => _2;
    let mut _0: bool;
    let _3: &std::path::Path;

    bb0: {
        _3 = <PathBuf as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Path::is_file(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn walk::scan::{closure#4}(_1: &mut {closure@src/walk.rs:136:28: 136:35}) -> () {
    debug wq => ((*_1).0: std::sync::Arc<std::sync::atomic::AtomicBool>);
    let mut _0: ();
    let mut _2: bool;
    let _3: &std::sync::atomic::AtomicBool;
    let mut _4: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _5: std::sync::atomic::Ordering;
    let _6: !;
    let mut _7: i32;
    let mut _8: exit_codes::ExitCode;
    let _9: ();
    let _10: &std::sync::atomic::AtomicBool;
    let mut _11: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _12: std::sync::atomic::Ordering;

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _3 = <Arc<AtomicBool> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Relaxed;
        _2 = AtomicBool::load(_3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _8 = exit_codes::ExitCode::KilledBySigint;
        _7 = <exit_codes::ExitCode as Into<i32>>::into(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = exit(move _7) -> unwind continue;
    }

    bb5: {
        _11 = &((*_1).0: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _10 = <Arc<AtomicBool> as Deref>::deref(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = Relaxed;
        _9 = AtomicBool::store(_10, const true, move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn spawn_receiver(_1: &Arc<Options>, _2: &Arc<AtomicBool>, _3: std::sync::mpsc::Receiver<WorkerResult>) -> JoinHandle<exit_codes::ExitCode> {
    debug config => _1;
    debug wants_to_quit => _2;
    debug rx => _3;
    let mut _0: std::thread::JoinHandle<exit_codes::ExitCode>;
    let _4: std::sync::Arc<options::Options>;
    let mut _7: &options::Options;
    let mut _8: &std::sync::Arc<options::Options>;
    let mut _10: &options::Options;
    let mut _11: &std::sync::Arc<options::Options>;
    let mut _12: {closure@src/walk.rs:174:19: 174:26};
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug config => _4;
        let _5: std::sync::Arc<std::sync::atomic::AtomicBool>;
        scope 2 {
            debug wants_to_quit => _5;
            let _6: bool;
            scope 3 {
                debug show_filesystem_errors => _6;
                let _9: usize;
                scope 4 {
                    debug threads => _9;
                }
            }
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _13 = const false;
        _15 = const true;
        _4 = <Arc<Options> as Clone>::clone(_1) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _14 = const true;
        _5 = <Arc<AtomicBool> as Clone>::clone(_2) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _13 = const true;
        _8 = &_4;
        _7 = <Arc<Options> as Deref>::deref(move _8) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _6 = ((*_7).24: bool);
        _11 = &_4;
        _10 = <Arc<Options> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _9 = ((*_10).12: usize);
        _14 = const false;
        _15 = const false;
        _13 = const false;
        _12 = {closure@src/walk.rs:174:19: 174:26} { config: move _4, rx: move _3, show_filesystem_errors: _6, threads: _9, wants_to_quit: move _5 };
        _0 = spawn::<{closure@src/walk.rs:174:19: 174:26}, exit_codes::ExitCode>(move _12) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _13 = const false;
        _14 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_13) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_14) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_15) -> [0: bb6, otherwise: bb11];
    }
}

fn spawn_receiver::{closure#0}(_1: {closure@src/walk.rs:174:19: 174:26}) -> exit_codes::ExitCode {
    debug config => (_1.0: std::sync::Arc<options::Options>);
    debug rx => (_1.1: std::sync::mpsc::Receiver<walk::WorkerResult>);
    debug show_filesystem_errors => (_1.2: bool);
    debug threads => (_1.3: usize);
    debug wants_to_quit => (_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>);
    let mut _0: exit_codes::ExitCode;
    let mut _2: &options::Options;
    let mut _3: &std::sync::Arc<options::Options>;
    let mut _4: isize;
    let mut _6: bool;
    let _7: &exec::CommandTemplate;
    let mut _8: std::sync::mpsc::Receiver<walk::WorkerResult>;
    let _9: &exec::CommandTemplate;
    let mut _10: bool;
    let mut _12: std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>;
    let mut _13: std::sync::mpsc::Receiver<walk::WorkerResult>;
    let mut _15: std::sync::Mutex<()>;
    let mut _17: usize;
    let mut _18: std::ops::Range<usize>;
    let mut _19: std::ops::Range<usize>;
    let mut _20: usize;
    let mut _22: std::option::Option<usize>;
    let mut _23: &mut std::ops::Range<usize>;
    let mut _24: isize;
    let _26: &std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>;
    let _29: &std::sync::Arc<std::sync::Mutex<()>>;
    let mut _31: {closure@src/walk.rs:193:39: 193:46};
    let _32: ();
    let mut _33: &mut std::vec::Vec<std::thread::JoinHandle<exit_codes::ExitCode>>;
    let mut _35: std::vec::IntoIter<std::thread::JoinHandle<exit_codes::ExitCode>>;
    let mut _36: std::vec::Vec<std::thread::JoinHandle<exit_codes::ExitCode>>;
    let mut _38: std::option::Option<std::thread::JoinHandle<exit_codes::ExitCode>>;
    let mut _39: &mut std::vec::IntoIter<std::thread::JoinHandle<exit_codes::ExitCode>>;
    let mut _40: isize;
    let _42: ();
    let mut _43: &mut std::vec::Vec<exit_codes::ExitCode>;
    let mut _44: exit_codes::ExitCode;
    let mut _45: std::result::Result<exit_codes::ExitCode, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _46: &[exit_codes::ExitCode];
    let _47: &std::vec::Vec<exit_codes::ExitCode>;
    let _48: std::time::Instant;
    let mut _52: std::option::Option<std::time::Duration>;
    let mut _53: &options::Options;
    let mut _54: &std::sync::Arc<options::Options>;
    let mut _57: &std::io::Stdout;
    let mut _59: std::sync::mpsc::IntoIter<walk::WorkerResult>;
    let mut _60: std::sync::mpsc::Receiver<walk::WorkerResult>;
    let mut _62: std::option::Option<walk::WorkerResult>;
    let mut _63: &mut std::sync::mpsc::IntoIter<walk::WorkerResult>;
    let mut _64: isize;
    let mut _66: isize;
    let mut _68: isize;
    let _69: ();
    let mut _70: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _71: std::path::PathBuf;
    let mut _72: bool;
    let mut _73: usize;
    let mut _74: &std::vec::Vec<std::path::PathBuf>;
    let mut _75: bool;
    let mut _76: &std::time::Duration;
    let _77: std::time::Duration;
    let mut _78: std::time::Instant;
    let mut _79: &std::time::Duration;
    let mut _80: std::slice::Iter<'_, std::path::PathBuf>;
    let mut _81: &std::vec::Vec<std::path::PathBuf>;
    let mut _83: std::option::Option<&std::path::PathBuf>;
    let mut _84: &mut std::slice::Iter<'_, std::path::PathBuf>;
    let mut _85: isize;
    let _87: ();
    let mut _88: &mut std::io::StdoutLock<'_>;
    let _89: &options::Options;
    let _90: &std::sync::Arc<options::Options>;
    let _91: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let _92: ();
    let mut _93: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _94: walk::ReceiverMode;
    let _95: ();
    let mut _96: &mut std::io::StdoutLock<'_>;
    let _97: &std::path::PathBuf;
    let _98: &options::Options;
    let _99: &std::sync::Arc<options::Options>;
    let _100: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _101: (usize, bool);
    let mut _103: bool;
    let _104: ();
    let mut _105: std::string::String;
    let mut _106: &ignore::Error;
    let mut _107: &options::Options;
    let mut _108: &std::sync::Arc<options::Options>;
    let mut _109: isize;
    let mut _111: bool;
    let mut _112: usize;
    let mut _113: bool;
    let mut _114: &std::vec::Vec<std::path::PathBuf>;
    let _115: ();
    let mut _116: &mut [std::path::PathBuf];
    let mut _117: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _118: std::vec::IntoIter<std::path::PathBuf>;
    let mut _119: std::vec::Vec<std::path::PathBuf>;
    let mut _121: std::option::Option<std::path::PathBuf>;
    let mut _122: &mut std::vec::IntoIter<std::path::PathBuf>;
    let mut _123: isize;
    let _125: ();
    let mut _126: &mut std::io::StdoutLock<'_>;
    let _127: &std::path::PathBuf;
    let _128: &options::Options;
    let _129: &std::sync::Arc<options::Options>;
    let _130: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _131: bool;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    scope 1 {
        debug cmd => _5;
        let _5: &std::sync::Arc<exec::CommandTemplate>;
        let _11: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>;
        scope 2 {
            debug shared_rx => _11;
            let _14: std::sync::Arc<std::sync::Mutex<()>>;
            scope 3 {
                debug out_perm => _14;
                let mut _16: std::vec::Vec<std::thread::JoinHandle<exit_codes::ExitCode>>;
                scope 4 {
                    debug handles => _16;
                    let mut _21: std::ops::Range<usize>;
                    let mut _34: std::vec::Vec<exit_codes::ExitCode>;
                    scope 5 {
                        debug iter => _21;
                        let _25: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>;
                        scope 6 {
                            debug rx => _25;
                            let _27: std::sync::Arc<exec::CommandTemplate>;
                            scope 7 {
                                debug cmd => _27;
                                let _28: std::sync::Arc<std::sync::Mutex<()>>;
                                scope 8 {
                                    debug out_perm => _28;
                                    let _30: std::thread::JoinHandle<exit_codes::ExitCode>;
                                    scope 9 {
                                        debug handle => _30;
                                    }
                                }
                            }
                        }
                    }
                    scope 10 {
                        debug results => _34;
                        let mut _37: std::vec::IntoIter<std::thread::JoinHandle<exit_codes::ExitCode>>;
                        scope 11 {
                            debug iter => _37;
                            let _41: std::thread::JoinHandle<exit_codes::ExitCode>;
                            scope 12 {
                                debug h => _41;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 13 {
        debug start => _48;
        let mut _49: std::vec::Vec<std::path::PathBuf>;
        scope 14 {
            debug buffer => _49;
            let mut _50: walk::ReceiverMode;
            scope 15 {
                debug mode => _50;
                let _51: std::time::Duration;
                scope 16 {
                    debug max_buffer_time => _51;
                    let _55: std::io::Stdout;
                    scope 17 {
                        debug stdout => _55;
                        let mut _56: std::io::StdoutLock<'_>;
                        scope 18 {
                            debug stdout => _56;
                            let mut _58: usize;
                            scope 19 {
                                debug num_results => _58;
                                let mut _61: std::sync::mpsc::IntoIter<walk::WorkerResult>;
                                let mut _120: std::vec::IntoIter<std::path::PathBuf>;
                                scope 20 {
                                    debug iter => _61;
                                    let _65: walk::WorkerResult;
                                    scope 21 {
                                        debug worker_result => _65;
                                        let _67: std::path::PathBuf;
                                        let _102: ignore::Error;
                                        scope 22 {
                                            debug value => _67;
                                            let mut _82: std::slice::Iter<'_, std::path::PathBuf>;
                                            scope 23 {
                                                debug iter => _82;
                                                let _86: &std::path::PathBuf;
                                                scope 24 {
                                                    debug v => _86;
                                                }
                                            }
                                        }
                                        scope 25 {
                                            debug err => _102;
                                        }
                                        scope 26 {
                                            debug max_results => _110;
                                            let _110: usize;
                                        }
                                    }
                                }
                                scope 27 {
                                    debug iter => _120;
                                    let _124: std::path::PathBuf;
                                    scope 28 {
                                        debug value => _124;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _136 = const false;
        _135 = const false;
        _134 = const false;
        _133 = const false;
        _132 = const false;
        _131 = const false;
        _137 = const false;
        _137 = const true;
        _3 = &(_1.0: std::sync::Arc<options::Options>);
        _2 = <Arc<Options> as Deref>::deref(move _3) -> [return: bb1, unwind: bb124];
    }

    bb1: {
        _4 = discriminant(((*_2).18: std::option::Option<std::sync::Arc<exec::CommandTemplate>>));
        switchInt(move _4) -> [1: bb2, otherwise: bb38];
    }

    bb2: {
        _5 = &((((*_2).18: std::option::Option<std::sync::Arc<exec::CommandTemplate>>) as Some).0: std::sync::Arc<exec::CommandTemplate>);
        _7 = <Arc<CommandTemplate> as Deref>::deref(_5) -> [return: bb3, unwind: bb124];
    }

    bb3: {
        _6 = CommandTemplate::in_batch_mode(_7) -> [return: bb4, unwind: bb124];
    }

    bb4: {
        switchInt(move _6) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _137 = const false;
        _136 = const true;
        _8 = move (_1.1: std::sync::mpsc::Receiver<walk::WorkerResult>);
        _9 = <Arc<CommandTemplate> as Deref>::deref(_5) -> [return: bb6, unwind: bb120];
    }

    bb6: {
        _10 = (_1.2: bool);
        _136 = const false;
        _0 = batch(move _8, _9, move _10) -> [return: bb7, unwind: bb120];
    }

    bb7: {
        _136 = const false;
        goto -> bb92;
    }

    bb8: {
        _137 = const false;
        _13 = move (_1.1: std::sync::mpsc::Receiver<walk::WorkerResult>);
        _12 = Mutex::<std::sync::mpsc::Receiver<WorkerResult>>::new(move _13) -> [return: bb9, unwind: bb124];
    }

    bb9: {
        _11 = Arc::<Mutex<std::sync::mpsc::Receiver<WorkerResult>>>::new(move _12) -> [return: bb10, unwind: bb124];
    }

    bb10: {
        _15 = Mutex::<()>::new(const ()) -> [return: bb11, unwind: bb101];
    }

    bb11: {
        _14 = Arc::<Mutex<()>>::new(move _15) -> [return: bb12, unwind: bb101];
    }

    bb12: {
        _17 = (_1.3: usize);
        _16 = Vec::<JoinHandle<exit_codes::ExitCode>>::with_capacity(move _17) -> [return: bb13, unwind: bb100];
    }

    bb13: {
        _135 = const true;
        _20 = (_1.3: usize);
        _19 = std::ops::Range::<usize> { start: const 0_usize, end: move _20 };
        _18 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _19) -> [return: bb14, unwind: bb118];
    }

    bb14: {
        _21 = move _18;
        goto -> bb15;
    }

    bb15: {
        _23 = &mut _21;
        _22 = <std::ops::Range<usize> as Iterator>::next(_23) -> [return: bb16, unwind: bb118];
    }

    bb16: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb19, 1: bb17, otherwise: bb18];
    }

    bb17: {
        _26 = &_11;
        _25 = <Arc<Mutex<std::sync::mpsc::Receiver<WorkerResult>>> as Clone>::clone(_26) -> [return: bb20, unwind: bb118];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        _34 = Vec::<exit_codes::ExitCode>::new() -> [return: bb25, unwind: bb118];
    }

    bb20: {
        _134 = const true;
        _27 = <Arc<CommandTemplate> as Clone>::clone(_5) -> [return: bb21, unwind: bb116];
    }

    bb21: {
        _133 = const true;
        _29 = &_14;
        _28 = <Arc<Mutex<()>> as Clone>::clone(_29) -> [return: bb22, unwind: bb114];
    }

    bb22: {
        _134 = const false;
        _133 = const false;
        _31 = {closure@src/walk.rs:193:39: 193:46} { rx: move _25, cmd: move _27, out_perm: move _28, show_filesystem_errors: (_1.2: bool) };
        _30 = spawn::<{closure@src/walk.rs:193:39: 193:46}, exit_codes::ExitCode>(move _31) -> [return: bb23, unwind: bb114];
    }

    bb23: {
        _33 = &mut _16;
        _32 = Vec::<JoinHandle<exit_codes::ExitCode>>::push(move _33, move _30) -> [return: bb24, unwind: bb114];
    }

    bb24: {
        _133 = const false;
        _134 = const false;
        goto -> bb15;
    }

    bb25: {
        _135 = const false;
        _36 = move _16;
        _35 = <Vec<JoinHandle<exit_codes::ExitCode>> as IntoIterator>::into_iter(move _36) -> [return: bb26, unwind: bb99];
    }

    bb26: {
        _37 = move _35;
        goto -> bb27;
    }

    bb27: {
        _39 = &mut _37;
        _38 = <std::vec::IntoIter<JoinHandle<exit_codes::ExitCode>> as Iterator>::next(_39) -> [return: bb28, unwind: bb98];
    }

    bb28: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb30, 1: bb29, otherwise: bb18];
    }

    bb29: {
        _41 = move ((_38 as Some).0: std::thread::JoinHandle<exit_codes::ExitCode>);
        _43 = &mut _34;
        _45 = JoinHandle::<exit_codes::ExitCode>::join(move _41) -> [return: bb31, unwind: bb98];
    }

    bb30: {
        drop(_37) -> [return: bb33, unwind: bb99];
    }

    bb31: {
        _44 = Result::<exit_codes::ExitCode, Box<dyn Any + Send>>::unwrap(move _45) -> [return: bb32, unwind: bb98];
    }

    bb32: {
        _42 = Vec::<exit_codes::ExitCode>::push(move _43, move _44) -> [return: bb125, unwind: bb98];
    }

    bb33: {
        _47 = &_34;
        _46 = <Vec<exit_codes::ExitCode> as Deref>::deref(_47) -> [return: bb34, unwind: bb99];
    }

    bb34: {
        _0 = merge_exitcodes(_46) -> [return: bb35, unwind: bb99];
    }

    bb35: {
        drop(_34) -> [return: bb36, unwind: bb118];
    }

    bb36: {
        _135 = const false;
        drop(_14) -> [return: bb37, unwind: bb101];
    }

    bb37: {
        drop(_11) -> [return: bb92, unwind: bb124];
    }

    bb38: {
        _48 = Instant::now() -> [return: bb39, unwind: bb124];
    }

    bb39: {
        _49 = Vec::<PathBuf>::new() -> [return: bb40, unwind: bb124];
    }

    bb40: {
        _132 = const true;
        _50 = ReceiverMode::Buffering;
        _54 = &(_1.0: std::sync::Arc<options::Options>);
        _53 = <Arc<Options> as Deref>::deref(move _54) -> [return: bb41, unwind: bb112];
    }

    bb41: {
        _52 = ((*_53).13: std::option::Option<std::time::Duration>);
        _51 = Option::<std::time::Duration>::unwrap_or_else::<{closure@src/walk.rs:218:33: 218:35}>(move _52, const ZeroSized: {closure@src/walk.rs:218:33: 218:35}) -> [return: bb42, unwind: bb112];
    }

    bb42: {
        _55 = stdout() -> [return: bb43, unwind: bb112];
    }

    bb43: {
        _57 = &_55;
        _56 = std::io::Stdout::lock(move _57) -> [return: bb44, unwind: bb112];
    }

    bb44: {
        _58 = const 0_usize;
        _137 = const false;
        _60 = move (_1.1: std::sync::mpsc::Receiver<walk::WorkerResult>);
        _59 = <std::sync::mpsc::Receiver<WorkerResult> as IntoIterator>::into_iter(move _60) -> [return: bb45, unwind: bb97];
    }

    bb45: {
        _61 = move _59;
        goto -> bb46;
    }

    bb46: {
        _63 = &mut _61;
        _62 = <std::sync::mpsc::IntoIter<WorkerResult> as Iterator>::next(_63) -> [return: bb47, unwind: bb96];
    }

    bb47: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb104, 1: bb48, otherwise: bb18];
    }

    bb48: {
        _65 = move ((_62 as Some).0: walk::WorkerResult);
        _66 = discriminant(_65);
        switchInt(move _66) -> [0: bb50, 1: bb49, otherwise: bb18];
    }

    bb49: {
        _102 = move ((_65 as Error).0: ignore::Error);
        _103 = (_1.2: bool);
        switchInt(move _103) -> [0: bb73, otherwise: bb71];
    }

    bb50: {
        _131 = const true;
        _67 = move ((_65 as Entry).0: std::path::PathBuf);
        _68 = discriminant(_50);
        switchInt(move _68) -> [0: bb52, 1: bb51, otherwise: bb18];
    }

    bb51: {
        _96 = &mut _56;
        _97 = &_67;
        _99 = &(_1.0: std::sync::Arc<options::Options>);
        _98 = <Arc<Options> as Deref>::deref(_99) -> [return: bb67, unwind: bb110];
    }

    bb52: {
        _70 = &mut _49;
        _131 = const false;
        _71 = move _67;
        _69 = Vec::<PathBuf>::push(move _70, move _71) -> [return: bb53, unwind: bb110];
    }

    bb53: {
        _74 = &_49;
        _73 = Vec::<PathBuf>::len(move _74) -> [return: bb54, unwind: bb110];
    }

    bb54: {
        _72 = Gt(move _73, const _);
        switchInt(move _72) -> [0: bb55, otherwise: bb59];
    }

    bb55: {
        _78 = Instant::now() -> [return: bb56, unwind: bb110];
    }

    bb56: {
        _77 = <Instant as Sub>::sub(move _78, _48) -> [return: bb57, unwind: bb110];
    }

    bb57: {
        _76 = &_77;
        _79 = &_51;
        _75 = <std::time::Duration as PartialOrd>::gt(move _76, move _79) -> [return: bb58, unwind: bb110];
    }

    bb58: {
        switchInt(move _75) -> [0: bb68, otherwise: bb59];
    }

    bb59: {
        _81 = &_49;
        _80 = <&Vec<PathBuf> as IntoIterator>::into_iter(move _81) -> [return: bb60, unwind: bb110];
    }

    bb60: {
        _82 = move _80;
        goto -> bb61;
    }

    bb61: {
        _84 = &mut _82;
        _83 = <std::slice::Iter<'_, PathBuf> as Iterator>::next(_84) -> [return: bb62, unwind: bb110];
    }

    bb62: {
        _85 = discriminant(_83);
        switchInt(move _85) -> [0: bb64, 1: bb63, otherwise: bb18];
    }

    bb63: {
        _86 = ((_83 as Some).0: &std::path::PathBuf);
        _88 = &mut _56;
        _90 = &(_1.0: std::sync::Arc<options::Options>);
        _89 = <Arc<Options> as Deref>::deref(_90) -> [return: bb65, unwind: bb110];
    }

    bb64: {
        _93 = &mut _49;
        _92 = Vec::<PathBuf>::clear(move _93) -> [return: bb66, unwind: bb110];
    }

    bb65: {
        _91 = &(_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _87 = print_entry(_88, _86, _89, _91) -> [return: bb126, unwind: bb110];
    }

    bb66: {
        _94 = ReceiverMode::Streaming;
        _50 = move _94;
        goto -> bb68;
    }

    bb67: {
        _100 = &(_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _95 = print_entry(_96, _97, _98, _100) -> [return: bb127, unwind: bb110];
    }

    bb68: {
        _101 = CheckedAdd(_58, const 1_usize);
        assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", _58, const 1_usize) -> [success: bb69, unwind: bb110];
    }

    bb69: {
        _58 = move (_101.0: usize);
        switchInt(_131) -> [0: bb70, otherwise: bb103];
    }

    bb70: {
        _131 = const false;
        goto -> bb74;
    }

    bb71: {
        _106 = &_102;
        _105 = <ignore::Error as ToString>::to_string(move _106) -> [return: bb72, unwind: bb95];
    }

    bb72: {
        _104 = print_error::<String>(move _105) -> [return: bb128, unwind: bb95];
    }

    bb73: {
        drop(_102) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        _108 = &(_1.0: std::sync::Arc<options::Options>);
        _107 = <Arc<Options> as Deref>::deref(move _108) -> [return: bb75, unwind: bb96];
    }

    bb75: {
        _109 = discriminant(((*_107).26: std::option::Option<usize>));
        switchInt(move _109) -> [1: bb76, otherwise: bb46];
    }

    bb76: {
        _110 = ((((*_107).26: std::option::Option<usize>) as Some).0: usize);
        _112 = _58;
        _111 = Ge(move _112, _110);
        switchInt(move _111) -> [0: bb46, otherwise: bb104];
    }

    bb77: {
        _114 = &_49;
        _113 = Vec::<PathBuf>::is_empty(move _114) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        switchInt(move _113) -> [0: bb79, otherwise: bb89];
    }

    bb79: {
        _117 = &mut _49;
        _116 = <Vec<PathBuf> as DerefMut>::deref_mut(move _117) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        _115 = slice::<impl [PathBuf]>::sort(_116) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        _132 = const false;
        _119 = move _49;
        _118 = <Vec<PathBuf> as IntoIterator>::into_iter(move _119) -> [return: bb82, unwind: bb97];
    }

    bb82: {
        _120 = move _118;
        goto -> bb83;
    }

    bb83: {
        _122 = &mut _120;
        _121 = <std::vec::IntoIter<PathBuf> as Iterator>::next(_122) -> [return: bb84, unwind: bb94];
    }

    bb84: {
        _123 = discriminant(_121);
        switchInt(move _123) -> [0: bb86, 1: bb85, otherwise: bb18];
    }

    bb85: {
        _124 = move ((_121 as Some).0: std::path::PathBuf);
        _126 = &mut _56;
        _127 = &_124;
        _129 = &(_1.0: std::sync::Arc<options::Options>);
        _128 = <Arc<Options> as Deref>::deref(_129) -> [return: bb87, unwind: bb93];
    }

    bb86: {
        drop(_120) -> [return: bb89, unwind: bb97];
    }

    bb87: {
        _130 = &(_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _125 = print_entry(_126, _127, _128, _130) -> [return: bb88, unwind: bb93];
    }

    bb88: {
        drop(_124) -> [return: bb83, unwind: bb94];
    }

    bb89: {
        _0 = exit_codes::ExitCode::Success;
        drop(_56) -> [return: bb90, unwind: bb112];
    }

    bb90: {
        switchInt(_132) -> [0: bb91, otherwise: bb105];
    }

    bb91: {
        _132 = const false;
        goto -> bb92;
    }

    bb92: {
        drop((_1.0: std::sync::Arc<options::Options>)) -> [return: bb108, unwind: bb107];
    }

    bb93 (cleanup): {
        drop(_124) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_120) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_102) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_61) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_56) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_37) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_34) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_14) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_11) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }

    bb103: {
        drop(_67) -> [return: bb70, unwind: bb96];
    }

    bb104: {
        drop(_61) -> [return: bb77, unwind: bb97];
    }

    bb105: {
        drop(_49) -> [return: bb91, unwind: bb124];
    }

    bb106: {
        return;
    }

    bb107 (cleanup): {
        drop((_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb108: {
        drop((_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>)) -> [return: bb106, unwind continue];
    }

    bb109 (cleanup): {
        drop(_67) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_131) -> [0: bb96, otherwise: bb109];
    }

    bb111 (cleanup): {
        drop(_49) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_132) -> [0: bb124, otherwise: bb111];
    }

    bb113 (cleanup): {
        drop(_27) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_133) -> [0: bb116, otherwise: bb113];
    }

    bb115 (cleanup): {
        drop(_25) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_134) -> [0: bb118, otherwise: bb115];
    }

    bb117 (cleanup): {
        drop(_16) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        switchInt(_135) -> [0: bb100, otherwise: bb117];
    }

    bb119 (cleanup): {
        drop(_8) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        switchInt(_136) -> [0: bb124, otherwise: bb119];
    }

    bb121 (cleanup): {
        drop((_1.4: std::sync::Arc<std::sync::atomic::AtomicBool>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        switchInt(_137) -> [0: bb121, otherwise: bb123];
    }

    bb123 (cleanup): {
        drop((_1.1: std::sync::mpsc::Receiver<walk::WorkerResult>)) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop((_1.0: std::sync::Arc<options::Options>)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb125: {
        goto -> bb27;
    }

    bb126: {
        goto -> bb61;
    }

    bb127: {
        goto -> bb68;
    }

    bb128: {
        goto -> bb73;
    }
}

fn spawn_receiver::{closure#0}::{closure#0}(_1: {closure@src/walk.rs:193:39: 193:46}) -> exit_codes::ExitCode {
    debug rx => (_1.0: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>);
    debug cmd => (_1.1: std::sync::Arc<exec::CommandTemplate>);
    debug out_perm => (_1.2: std::sync::Arc<std::sync::Mutex<()>>);
    debug show_filesystem_errors => (_1.3: bool);
    let mut _0: exit_codes::ExitCode;
    let mut _2: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>;
    let mut _3: std::sync::Arc<exec::CommandTemplate>;
    let mut _4: std::sync::Arc<std::sync::Mutex<()>>;
    let mut _5: bool;

    bb0: {
        _2 = move (_1.0: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Receiver<walk::WorkerResult>>>);
        _3 = move (_1.1: std::sync::Arc<exec::CommandTemplate>);
        _4 = move (_1.2: std::sync::Arc<std::sync::Mutex<()>>);
        _5 = (_1.3: bool);
        _0 = job(move _2, move _3, move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn spawn_receiver::{closure#0}::{closure#1}(_1: {closure@src/walk.rs:218:33: 218:35}) -> std::time::Duration {
    let mut _0: std::time::Duration;

    bb0: {
        _0 = std::time::Duration::from_millis(const 100_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn walk::<impl at src/walk.rs:291:1: 291:14>::path(_1: &walk::DirEntry) -> &Path {
    debug self => _1;
    let mut _0: &std::path::Path;
    let _2: &std::path::Path;
    let mut _3: isize;
    let _4: &ignore::DirEntry;
    let _5: &std::path::Path;
    let _6: &std::path::PathBuf;
    let _7: &std::path::Path;
    scope 1 {
        debug e => _4;
    }
    scope 2 {
        debug pathbuf => _6;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = &(((*_1) as BrokenSymlink).0: std::path::PathBuf);
        _7 = PathBuf::as_path(_6) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Normal).0: ignore::DirEntry);
        _5 = ignore::DirEntry::path(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _2 = _5;
        goto -> bb6;
    }

    bb5: {
        _2 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = _2;
        return;
    }
}

fn walk::<impl at src/walk.rs:291:1: 291:14>::file_type(_1: &walk::DirEntry) -> Option<FileType> {
    debug self => _1;
    let mut _0: std::option::Option<std::fs::FileType>;
    let mut _2: isize;
    let _3: &ignore::DirEntry;
    let _4: &std::path::PathBuf;
    let mut _5: std::result::Result<std::fs::FileType, std::io::Error>;
    let mut _6: std::result::Result<std::fs::Metadata, std::io::Error>;
    let _7: &std::path::Path;
    scope 1 {
        debug e => _3;
    }
    scope 2 {
        debug pathbuf => _4;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &(((*_1) as BrokenSymlink).0: std::path::PathBuf);
        _7 = <PathBuf as Deref>::deref(_4) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Normal).0: ignore::DirEntry);
        _0 = ignore::DirEntry::file_type(_3) -> [return: bb7, unwind continue];
    }

    bb4: {
        _6 = Path::symlink_metadata(_7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = Result::<Metadata, std::io::Error>::map::<FileType, {closure@src/walk.rs:303:48: 303:51}>(move _6, const ZeroSized: {closure@src/walk.rs:303:48: 303:51}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Result::<FileType, std::io::Error>::ok(move _5) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn walk::<impl at src/walk.rs:291:1: 291:14>::file_type::{closure#0}(_1: {closure@src/walk.rs:303:48: 303:51}, _2: Metadata) -> FileType {
    debug m => _2;
    let mut _0: std::fs::FileType;
    let mut _3: &std::fs::Metadata;

    bb0: {
        _3 = &_2;
        _0 = Metadata::file_type(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn walk::<impl at src/walk.rs:291:1: 291:14>::metadata(_1: &walk::DirEntry) -> Option<Metadata> {
    debug self => _1;
    let mut _0: std::option::Option<std::fs::Metadata>;
    let mut _2: isize;
    let _3: &ignore::DirEntry;
    let mut _4: std::result::Result<std::fs::Metadata, ignore::Error>;
    scope 1 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Option::<Metadata>::None;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Normal).0: ignore::DirEntry);
        _4 = ignore::DirEntry::metadata(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<Metadata, ignore::Error>::ok(move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn walk::<impl at src/walk.rs:291:1: 291:14>::depth(_1: &walk::DirEntry) -> Option<usize> {
    debug self => _1;
    let mut _0: std::option::Option<usize>;
    let mut _2: isize;
    let _3: &ignore::DirEntry;
    let mut _4: usize;
    scope 1 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Option::<usize>::None;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Normal).0: ignore::DirEntry);
        _4 = ignore::DirEntry::depth(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Option::<usize>::Some(move _4);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn spawn_senders(_1: &Arc<Options>, _2: &Arc<AtomicBool>, _3: Arc<regex::bytes::Regex>, _4: WalkParallel, _5: Sender<WorkerResult>) -> () {
    debug config => _1;
    debug wants_to_quit => _2;
    debug pattern => _3;
    debug parallel_walker => _4;
    debug tx => _5;
    let mut _0: ();
    let _6: ();
    let mut _7: {closure@src/walk.rs:330:25: 330:27};
    let mut _8: &&std::sync::Arc<options::Options>;
    let mut _9: &std::sync::Arc<regex::bytes::Regex>;
    let mut _10: &std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _11: &&std::sync::Arc<std::sync::atomic::AtomicBool>;

    bb0: {
        _8 = &_1;
        _9 = &_3;
        _10 = &_5;
        _11 = &_2;
        _7 = {closure@src/walk.rs:330:25: 330:27} { config: move _8, pattern: move _9, tx: move _10, wants_to_quit: move _11 };
        _6 = WalkParallel::run::<'_, {closure@src/walk.rs:330:25: 330:27}>(move _4, move _7) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn spawn_senders::{closure#0}(_1: &mut {closure@src/walk.rs:330:25: 330:27}) -> Box<dyn FnMut(Result<ignore::DirEntry, ignore::Error>) -> WalkState + Send> {
    debug config => (*((*_1).0: &&std::sync::Arc<options::Options>));
    debug pattern => (*((*_1).1: &std::sync::Arc<regex::bytes::Regex>));
    debug tx => (*((*_1).2: &std::sync::mpsc::Sender<walk::WorkerResult>));
    debug wants_to_quit => (*((*_1).3: &&std::sync::Arc<std::sync::atomic::AtomicBool>));
    let mut _0: std::boxed::Box<dyn std::ops::FnMut(std::result::Result<ignore::DirEntry, ignore::Error>) -> ignore::WalkState + std::marker::Send>;
    let _2: std::sync::Arc<options::Options>;
    let mut _6: std::boxed::Box<{closure@src/walk.rs:336:18: 336:32}>;
    let mut _7: {closure@src/walk.rs:336:18: 336:32};
    let mut _8: &&std::sync::Arc<options::Options>;
    let mut _9: &std::sync::Arc<options::Options>;
    let mut _10: &std::sync::Arc<regex::bytes::Regex>;
    let mut _11: &std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _12: &&std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _13: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    scope 1 {
        debug config => _2;
        let _3: std::sync::Arc<regex::bytes::Regex>;
        scope 2 {
            debug pattern => _3;
            let _4: std::sync::mpsc::Sender<walk::WorkerResult>;
            scope 3 {
                debug tx_thread => _4;
                let _5: std::sync::Arc<std::sync::atomic::AtomicBool>;
                scope 4 {
                    debug wants_to_quit => _5;
                }
            }
        }
    }

    bb0: {
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _8 = deref_copy ((*_1).0: &&std::sync::Arc<options::Options>);
        _9 = deref_copy (*_8);
        _16 = const true;
        _2 = <Arc<Options> as Clone>::clone(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = deref_copy ((*_1).1: &std::sync::Arc<regex::bytes::Regex>);
        _3 = <Arc<regex::bytes::Regex> as Clone>::clone(_10) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _15 = const true;
        _11 = deref_copy ((*_1).2: &std::sync::mpsc::Sender<walk::WorkerResult>);
        _4 = <Sender<WorkerResult> as Clone>::clone(_11) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _14 = const true;
        _12 = deref_copy ((*_1).3: &&std::sync::Arc<std::sync::atomic::AtomicBool>);
        _13 = deref_copy (*_12);
        _5 = <Arc<AtomicBool> as Clone>::clone(_13) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _14 = const false;
        _16 = const false;
        _15 = const false;
        _7 = {closure@src/walk.rs:336:18: 336:32} { wants_to_quit: move _5, tx_thread: move _4, config: move _2, pattern: move _3 };
        _6 = Box::<{closure@src/walk.rs:336:18: 336:32}>::new(move _7) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = move _6 as std::boxed::Box<dyn std::ops::FnMut(std::result::Result<ignore::DirEntry, ignore::Error>) -> ignore::WalkState + std::marker::Send> (PointerCoercion(Unsize));
        _14 = const false;
        _15 = const false;
        _16 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_14) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_15) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb6, otherwise: bb11];
    }
}

fn spawn_senders::{closure#0}::{closure#0}(_1: &mut {closure@src/walk.rs:336:18: 336:32}, _2: Result<ignore::DirEntry, ignore::Error>) -> WalkState {
    debug entry_o => _2;
    debug wants_to_quit => ((*_1).0: std::sync::Arc<std::sync::atomic::AtomicBool>);
    debug tx_thread => ((*_1).1: std::sync::mpsc::Sender<walk::WorkerResult>);
    debug config => ((*_1).2: std::sync::Arc<options::Options>);
    debug pattern => ((*_1).3: std::sync::Arc<regex::bytes::Regex>);
    let mut _0: ignore::WalkState;
    let mut _3: bool;
    let _4: &std::sync::atomic::AtomicBool;
    let mut _5: &std::sync::Arc<std::sync::atomic::AtomicBool>;
    let mut _6: std::sync::atomic::Ordering;
    let _7: walk::DirEntry;
    let mut _8: isize;
    let mut _9: isize;
    let _10: &ignore::DirEntry;
    let _11: &&ignore::DirEntry;
    let mut _12: usize;
    let _13: ignore::DirEntry;
    let _14: std::path::PathBuf;
    let _15: std::boxed::Box<ignore::Error>;
    let mut _16: &ignore::Error;
    let mut _17: &std::boxed::Box<ignore::Error>;
    let mut _18: isize;
    let mut _21: bool;
    let mut _22: &std::io::ErrorKind;
    let _23: std::io::ErrorKind;
    let mut _24: bool;
    let mut _25: std::option::Option<std::fs::Metadata>;
    let mut _26: std::result::Result<std::fs::Metadata, std::io::Error>;
    let _27: &std::path::Path;
    let mut _28: &std::path::PathBuf;
    let mut _29: std::path::PathBuf;
    let mut _30: std::result::Result<(), std::sync::mpsc::SendError<walk::WorkerResult>>;
    let mut _31: &std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _32: walk::WorkerResult;
    let mut _33: ignore::Error;
    let mut _34: std::path::PathBuf;
    let mut _35: std::boxed::Box<ignore::Error>;
    let mut _36: isize;
    let _37: ignore::Error;
    let mut _38: std::result::Result<(), std::sync::mpsc::SendError<walk::WorkerResult>>;
    let mut _39: &std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _40: walk::WorkerResult;
    let mut _41: isize;
    let mut _42: &options::Options;
    let mut _43: &std::sync::Arc<options::Options>;
    let mut _44: isize;
    let mut _46: bool;
    let mut _47: std::option::Option<usize>;
    let mut _48: &walk::DirEntry;
    let mut _49: {closure@src/walk.rs:385:47: 385:50};
    let mut _50: &usize;
    let mut _52: &walk::DirEntry;
    let mut _54: bool;
    let mut _55: &options::Options;
    let mut _56: &std::sync::Arc<options::Options>;
    let mut _58: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _59: &str;
    let mut _60: std::ffi::OsString;
    let _61: &std::ffi::OsStr;
    let _62: &std::path::Path;
    let mut _63: &std::path::PathBuf;
    let mut _64: std::option::Option<&std::ffi::OsStr>;
    let mut _65: isize;
    let _67: !;
    let mut _68: bool;
    let _69: &regex::bytes::Regex;
    let mut _70: &std::sync::Arc<regex::bytes::Regex>;
    let _71: &[u8];
    let _72: &std::borrow::Cow<'_, [u8]>;
    let _73: std::borrow::Cow<'_, [u8]>;
    let _74: &std::ffi::OsStr;
    let mut _75: &std::borrow::Cow<'_, std::ffi::OsStr>;
    let mut _76: &options::Options;
    let mut _77: &std::sync::Arc<options::Options>;
    let mut _78: isize;
    let mut _80: std::option::Option<&std::ffi::OsStr>;
    let mut _81: isize;
    let mut _83: bool;
    let _84: &[u8];
    let _85: &std::borrow::Cow<'_, [u8]>;
    let _86: std::borrow::Cow<'_, [u8]>;
    let mut _87: &options::Options;
    let mut _88: &std::sync::Arc<options::Options>;
    let mut _89: isize;
    let mut _91: std::option::Option<std::fs::FileType>;
    let mut _92: &walk::DirEntry;
    let mut _93: isize;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: std::option::Option<bool>;
    let mut _108: std::option::Option<std::fs::Metadata>;
    let mut _109: &walk::DirEntry;
    let mut _110: bool;
    let mut _111: bool;
    let _112: &walk::DirEntry;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: &options::Options;
    let mut _119: &std::sync::Arc<options::Options>;
    let mut _120: isize;
    let mut _122: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _123: isize;
    let mut _125: bool;
    let _126: &&std::fs::Metadata;
    let mut _127: bool;
    let mut _128: &std::vec::Vec<filter::size::SizeFilter>;
    let _129: &options::Options;
    let mut _130: &std::sync::Arc<options::Options>;
    let mut _131: bool;
    let mut _132: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _133: isize;
    let mut _136: &std::fs::Metadata;
    let mut _137: bool;
    let mut _138: &mut std::slice::Iter<'_, filter::size::SizeFilter>;
    let mut _139: std::slice::Iter<'_, filter::size::SizeFilter>;
    let _140: &[filter::size::SizeFilter];
    let mut _141: &std::vec::Vec<filter::size::SizeFilter>;
    let _142: &options::Options;
    let mut _143: &std::sync::Arc<options::Options>;
    let mut _144: {closure@src/walk.rs:471:34: 471:38};
    let mut _145: &u64;
    let mut _146: bool;
    let mut _147: &std::vec::Vec<filter::time::TimeFilter>;
    let _148: &options::Options;
    let mut _149: &std::sync::Arc<options::Options>;
    let mut _151: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _152: isize;
    let mut _154: std::result::Result<std::time::SystemTime, std::io::Error>;
    let mut _155: &std::fs::Metadata;
    let mut _156: isize;
    let mut _158: bool;
    let mut _159: &mut std::slice::Iter<'_, filter::time::TimeFilter>;
    let mut _160: std::slice::Iter<'_, filter::time::TimeFilter>;
    let _161: &[filter::time::TimeFilter];
    let mut _162: &std::vec::Vec<filter::time::TimeFilter>;
    let _163: &options::Options;
    let mut _164: &std::sync::Arc<options::Options>;
    let mut _165: {closure@src/walk.rs:491:34: 491:38};
    let mut _166: &std::time::SystemTime;
    let mut _167: bool;
    let mut _169: &std::sync::mpsc::Sender<walk::WorkerResult>;
    let mut _170: walk::WorkerResult;
    let mut _171: std::path::PathBuf;
    let mut _172: bool;
    let mut _173: &std::result::Result<(), std::sync::mpsc::SendError<walk::WorkerResult>>;
    let mut _174: bool;
    let mut _175: &options::Options;
    let mut _176: &std::sync::Arc<options::Options>;
    let mut _179: &ignore::DirEntry;
    let mut _180: &std::io::Error;
    let mut _181: &std::fs::Metadata;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    scope 1 {
        debug entry => _7;
        let _51: &std::path::Path;
        scope 7 {
            debug min_depth => _45;
            let _45: usize;
        }
        scope 8 {
            debug entry_path => _51;
            let _53: std::borrow::Cow<'_, std::ffi::OsStr>;
            let _57: std::path::PathBuf;
            let _66: &std::ffi::OsStr;
            let mut _177: &&str;
            scope 9 {
                debug search_str => _53;
                let mut _150: bool;
                let _168: std::result::Result<(), std::sync::mpsc::SendError<walk::WorkerResult>>;
                scope 12 {
                    debug exts_regex => _79;
                    let _79: &regex::bytes::RegexSet;
                    scope 13 {
                        debug path_str => _82;
                        let _82: &std::ffi::OsStr;
                    }
                }
                scope 14 {
                    debug file_types => _90;
                    let _90: &filetypes::FileTypes;
                    scope 15 {
                        debug entry_type => _94;
                        let _94: &std::fs::FileType;
                    }
                }
                scope 16 {
                    debug owner_constraint => _121;
                    let _121: &filter::owner::OwnerFilter;
                    scope 17 {
                        debug metadata => _124;
                        let _124: &std::fs::Metadata;
                    }
                }
                scope 18 {
                    debug metadata => _134;
                    let _134: std::fs::Metadata;
                    let _135: u64;
                    scope 19 {
                        debug file_size => _135;
                    }
                }
                scope 20 {
                    debug matched => _150;
                    scope 21 {
                        debug metadata => _153;
                        let _153: std::fs::Metadata;
                        scope 22 {
                            debug modified => _157;
                            let _157: std::time::SystemTime;
                        }
                    }
                }
                scope 23 {
                    debug send_result => _168;
                }
            }
            scope 10 {
                debug path_abs_buf => _57;
            }
            scope 11 {
                debug filename => _66;
            }
        }
    }
    scope 2 {
        debug e => _10;
        debug e => _11;
    }
    scope 3 {
        debug e => _13;
    }
    scope 4 {
        debug path => _14;
        debug inner_err => _15;
        let _19: &std::io::Error;
        let _20: &&std::io::Error;
        let mut _178: &std::io::ErrorKind;
        scope 5 {
            debug io_error => _19;
            debug io_error => _20;
        }
    }
    scope 6 {
        debug err => _37;
    }

    bb0: {
        _187 = const false;
        _186 = const false;
        _182 = const false;
        _183 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const true;
        _182 = const true;
        _184 = const true;
        _185 = const true;
        _5 = &((*_1).0: std::sync::Arc<std::sync::atomic::AtomicBool>);
        _4 = <Arc<AtomicBool> as Deref>::deref(move _5) -> [return: bb1, unwind: bb214];
    }

    bb1: {
        _6 = Relaxed;
        _3 = AtomicBool::load(_4, move _6) -> [return: bb2, unwind: bb214];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = Quit;
        goto -> bb201;
    }

    bb4: {
        _9 = discriminant(_2);
        switchInt(move _9) -> [0: bb8, 1: bb5, otherwise: bb7];
    }

    bb5: {
        _8 = discriminant(((_2 as Err).0: ignore::Error));
        switchInt(move _8) -> [2: bb12, otherwise: bb6];
    }

    bb6: {
        _182 = const false;
        _184 = const false;
        _185 = const false;
        _37 = move ((_2 as Err).0: ignore::Error);
        _39 = &((*_1).1: std::sync::mpsc::Sender<walk::WorkerResult>);
        _40 = WorkerResult::Error(move _37);
        _38 = Sender::<WorkerResult>::send(move _39, move _40) -> [return: bb28, unwind: bb214];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _10 = &((_2 as Ok).0: ignore::DirEntry);
        _11 = &_10;
        _179 = deref_copy (*_11);
        _12 = ignore::DirEntry::depth(_179) -> [return: bb9, unwind: bb214];
    }

    bb9: {
        switchInt(move _12) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _0 = ignore::WalkState::Continue;
        goto -> bb201;
    }

    bb11: {
        _183 = const false;
        _13 = move ((_2 as Ok).0: ignore::DirEntry);
        _7 = walk::DirEntry::Normal(move _13);
        goto -> bb31;
    }

    bb12: {
        _185 = const false;
        _187 = const true;
        _14 = move ((((_2 as Err).0: ignore::Error) as WithPath).0: std::path::PathBuf);
        _184 = const false;
        _186 = const true;
        _15 = move ((((_2 as Err).0: ignore::Error) as WithPath).1: std::boxed::Box<ignore::Error>);
        _17 = &_15;
        _16 = <Box<ignore::Error> as AsRef<ignore::Error>>::as_ref(move _17) -> [return: bb13, unwind: bb203];
    }

    bb13: {
        _18 = discriminant((*_16));
        switchInt(move _18) -> [5: bb15, otherwise: bb14];
    }

    bb14: {
        _31 = &((*_1).1: std::sync::mpsc::Sender<walk::WorkerResult>);
        _187 = const false;
        _34 = move _14;
        _186 = const false;
        _35 = move _15;
        _33 = WithPath { path: move _34, err: move _35 };
        _32 = WorkerResult::Error(move _33);
        _30 = Sender::<WorkerResult>::send(move _31, move _32) -> [return: bb24, unwind: bb203];
    }

    bb15: {
        _19 = &(((*_16) as Io).0: std::io::Error);
        _20 = &_19;
        _180 = deref_copy (*_20);
        _23 = std::io::Error::kind(_180) -> [return: bb16, unwind: bb203];
    }

    bb16: {
        _22 = &_23;
        _178 = const _;
        _21 = <std::io::ErrorKind as PartialEq>::eq(move _22, _178) -> [return: bb17, unwind: bb203];
    }

    bb17: {
        switchInt(move _21) -> [0: bb14, otherwise: bb18];
    }

    bb18: {
        _28 = &_14;
        _27 = <PathBuf as Deref>::deref(move _28) -> [return: bb19, unwind: bb203];
    }

    bb19: {
        _26 = Path::symlink_metadata(_27) -> [return: bb20, unwind: bb203];
    }

    bb20: {
        _25 = Result::<Metadata, std::io::Error>::ok(move _26) -> [return: bb21, unwind: bb203];
    }

    bb21: {
        _24 = Option::<Metadata>::map_or::<bool, {closure@src/walk.rs:356:48: 356:51}>(move _25, const false, const ZeroSized: {closure@src/walk.rs:356:48: 356:51}) -> [return: bb22, unwind: bb203];
    }

    bb22: {
        switchInt(move _24) -> [0: bb14, otherwise: bb23];
    }

    bb23: {
        _187 = const false;
        _29 = move _14;
        _7 = walk::DirEntry::BrokenSymlink(move _29);
        drop(_15) -> [return: bb27, unwind: bb183];
    }

    bb24: {
        _36 = discriminant(_30);
        switchInt(move _36) -> [0: bb26, 1: bb25, otherwise: bb7];
    }

    bb25: {
        _0 = Quit;
        goto -> bb170;
    }

    bb26: {
        _0 = ignore::WalkState::Continue;
        goto -> bb170;
    }

    bb27: {
        _186 = const false;
        _187 = const false;
        goto -> bb31;
    }

    bb28: {
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb30, 1: bb29, otherwise: bb7];
    }

    bb29: {
        _0 = Quit;
        goto -> bb169;
    }

    bb30: {
        _0 = ignore::WalkState::Continue;
        goto -> bb169;
    }

    bb31: {
        _43 = &((*_1).2: std::sync::Arc<options::Options>);
        _42 = <Arc<Options> as Deref>::deref(move _43) -> [return: bb32, unwind: bb182];
    }

    bb32: {
        _44 = discriminant(((*_42).10: std::option::Option<usize>));
        switchInt(move _44) -> [1: bb33, otherwise: bb37];
    }

    bb33: {
        _45 = ((((*_42).10: std::option::Option<usize>) as Some).0: usize);
        _48 = &_7;
        _47 = walk::DirEntry::depth(move _48) -> [return: bb34, unwind: bb182];
    }

    bb34: {
        _50 = &_45;
        _49 = {closure@src/walk.rs:385:47: 385:50} { min_depth: move _50 };
        _46 = Option::<usize>::map_or::<bool, {closure@src/walk.rs:385:47: 385:50}>(move _47, const true, move _49) -> [return: bb35, unwind: bb182];
    }

    bb35: {
        switchInt(move _46) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _0 = ignore::WalkState::Continue;
        goto -> bb168;
    }

    bb37: {
        _52 = &_7;
        _51 = walk::DirEntry::path(move _52) -> [return: bb38, unwind: bb182];
    }

    bb38: {
        _56 = &((*_1).2: std::sync::Arc<options::Options>);
        _55 = <Arc<Options> as Deref>::deref(move _56) -> [return: bb39, unwind: bb182];
    }

    bb39: {
        _54 = ((*_55).1: bool);
        switchInt(move _54) -> [0: bb46, otherwise: bb40];
    }

    bb40: {
        _58 = path_absolute_form(_51) -> [return: bb41, unwind: bb182];
    }

    bb41: {
        _59 = const "Retrieving absolute path succeeds";
        _57 = Result::<PathBuf, std::io::Error>::expect(move _58, _59) -> [return: bb42, unwind: bb182];
    }

    bb42: {
        _63 = &_57;
        _62 = <PathBuf as Deref>::deref(move _63) -> [return: bb43, unwind: bb181];
    }

    bb43: {
        _61 = Path::as_os_str(_62) -> [return: bb44, unwind: bb181];
    }

    bb44: {
        _60 = OsStr::to_os_string(_61) -> [return: bb45, unwind: bb181];
    }

    bb45: {
        _53 = Cow::<'_, OsStr>::Owned(move _60);
        drop(_57) -> [return: bb50, unwind: bb182];
    }

    bb46: {
        _64 = Path::file_name(_51) -> [return: bb47, unwind: bb182];
    }

    bb47: {
        _65 = discriminant(_64);
        switchInt(move _65) -> [0: bb48, 1: bb49, otherwise: bb7];
    }

    bb48: {
        _177 = const _;
        _67 = core::panicking::unreachable_display::<&str>(_177) -> bb182;
    }

    bb49: {
        _66 = ((_64 as Some).0: &std::ffi::OsStr);
        _53 = Cow::<'_, OsStr>::Borrowed(_66);
        goto -> bb50;
    }

    bb50: {
        _70 = &((*_1).3: std::sync::Arc<regex::bytes::Regex>);
        _69 = <Arc<regex::bytes::Regex> as Deref>::deref(move _70) -> [return: bb51, unwind: bb180];
    }

    bb51: {
        _75 = &_53;
        _74 = <Cow<'_, OsStr> as AsRef<OsStr>>::as_ref(move _75) -> [return: bb52, unwind: bb180];
    }

    bb52: {
        _73 = osstr_to_bytes(_74) -> [return: bb53, unwind: bb180];
    }

    bb53: {
        _72 = &_73;
        _71 = <Cow<'_, [u8]> as Deref>::deref(_72) -> [return: bb54, unwind: bb179];
    }

    bb54: {
        _68 = regex::bytes::Regex::is_match(_69, _71) -> [return: bb55, unwind: bb179];
    }

    bb55: {
        switchInt(move _68) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        drop(_73) -> [return: bb59, unwind: bb180];
    }

    bb57: {
        drop(_73) -> [return: bb58, unwind: bb180];
    }

    bb58: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb59: {
        _77 = &((*_1).2: std::sync::Arc<options::Options>);
        _76 = <Arc<Options> as Deref>::deref(move _77) -> [return: bb60, unwind: bb180];
    }

    bb60: {
        _78 = discriminant(((*_76).17: std::option::Option<regex::bytes::RegexSet>));
        switchInt(move _78) -> [1: bb61, otherwise: bb71];
    }

    bb61: {
        _79 = &((((*_76).17: std::option::Option<regex::bytes::RegexSet>) as Some).0: regex::bytes::RegexSet);
        _80 = Path::file_name(_51) -> [return: bb62, unwind: bb180];
    }

    bb62: {
        _81 = discriminant(_80);
        switchInt(move _81) -> [1: bb63, otherwise: bb70];
    }

    bb63: {
        _82 = ((_80 as Some).0: &std::ffi::OsStr);
        _86 = osstr_to_bytes(_82) -> [return: bb64, unwind: bb180];
    }

    bb64: {
        _85 = &_86;
        _84 = <Cow<'_, [u8]> as Deref>::deref(_85) -> [return: bb65, unwind: bb178];
    }

    bb65: {
        _83 = regex::bytes::RegexSet::is_match(_79, _84) -> [return: bb66, unwind: bb178];
    }

    bb66: {
        switchInt(move _83) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        drop(_86) -> [return: bb71, unwind: bb180];
    }

    bb68: {
        drop(_86) -> [return: bb69, unwind: bb180];
    }

    bb69: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb70: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb71: {
        _88 = &((*_1).2: std::sync::Arc<options::Options>);
        _87 = <Arc<Options> as Deref>::deref(move _88) -> [return: bb72, unwind: bb180];
    }

    bb72: {
        _89 = discriminant(((*_87).16: std::option::Option<filetypes::FileTypes>));
        switchInt(move _89) -> [1: bb73, otherwise: bb110];
    }

    bb73: {
        _90 = &((((*_87).16: std::option::Option<filetypes::FileTypes>) as Some).0: filetypes::FileTypes);
        _92 = &_7;
        _91 = walk::DirEntry::file_type(move _92) -> [return: bb74, unwind: bb180];
    }

    bb74: {
        _93 = discriminant(_91);
        switchInt(move _93) -> [1: bb75, otherwise: bb109];
    }

    bb75: {
        _94 = &((_91 as Some).0: std::fs::FileType);
        _95 = ((*_90).0: bool);
        switchInt(move _95) -> [0: bb76, otherwise: bb78];
    }

    bb76: {
        _96 = FileType::is_file(_94) -> [return: bb77, unwind: bb180];
    }

    bb77: {
        switchInt(move _96) -> [0: bb78, otherwise: bb108];
    }

    bb78: {
        _97 = ((*_90).1: bool);
        switchInt(move _97) -> [0: bb79, otherwise: bb81];
    }

    bb79: {
        _98 = FileType::is_dir(_94) -> [return: bb80, unwind: bb180];
    }

    bb80: {
        switchInt(move _98) -> [0: bb81, otherwise: bb108];
    }

    bb81: {
        _99 = ((*_90).2: bool);
        switchInt(move _99) -> [0: bb82, otherwise: bb84];
    }

    bb82: {
        _100 = FileType::is_symlink(_94) -> [return: bb83, unwind: bb180];
    }

    bb83: {
        switchInt(move _100) -> [0: bb84, otherwise: bb108];
    }

    bb84: {
        _101 = ((*_90).3: bool);
        switchInt(move _101) -> [0: bb85, otherwise: bb87];
    }

    bb85: {
        _102 = filesystem::is_socket(_94) -> [return: bb86, unwind: bb180];
    }

    bb86: {
        switchInt(move _102) -> [0: bb87, otherwise: bb108];
    }

    bb87: {
        _103 = ((*_90).4: bool);
        switchInt(move _103) -> [0: bb88, otherwise: bb90];
    }

    bb88: {
        _104 = is_pipe(_94) -> [return: bb89, unwind: bb180];
    }

    bb89: {
        switchInt(move _104) -> [0: bb90, otherwise: bb108];
    }

    bb90: {
        _105 = ((*_90).5: bool);
        switchInt(move _105) -> [0: bb95, otherwise: bb91];
    }

    bb91: {
        _109 = &_7;
        _108 = walk::DirEntry::metadata(move _109) -> [return: bb92, unwind: bb180];
    }

    bb92: {
        _107 = Option::<Metadata>::map::<bool, {closure@src/walk.rs:434:38: 434:41}>(move _108, const ZeroSized: {closure@src/walk.rs:434:38: 434:41}) -> [return: bb93, unwind: bb180];
    }

    bb93: {
        _106 = Option::<bool>::unwrap_or(move _107, const false) -> [return: bb94, unwind: bb180];
    }

    bb94: {
        switchInt(move _106) -> [0: bb108, otherwise: bb95];
    }

    bb95: {
        _110 = ((*_90).6: bool);
        switchInt(move _110) -> [0: bb98, otherwise: bb96];
    }

    bb96: {
        _112 = &_7;
        _111 = filesystem::is_empty(_112) -> [return: bb97, unwind: bb180];
    }

    bb97: {
        switchInt(move _111) -> [0: bb108, otherwise: bb98];
    }

    bb98: {
        _113 = FileType::is_file(_94) -> [return: bb99, unwind: bb180];
    }

    bb99: {
        switchInt(move _113) -> [0: bb100, otherwise: bb110];
    }

    bb100: {
        _114 = FileType::is_dir(_94) -> [return: bb101, unwind: bb180];
    }

    bb101: {
        switchInt(move _114) -> [0: bb102, otherwise: bb110];
    }

    bb102: {
        _115 = FileType::is_symlink(_94) -> [return: bb103, unwind: bb180];
    }

    bb103: {
        switchInt(move _115) -> [0: bb104, otherwise: bb110];
    }

    bb104: {
        _116 = filesystem::is_socket(_94) -> [return: bb105, unwind: bb180];
    }

    bb105: {
        switchInt(move _116) -> [0: bb106, otherwise: bb110];
    }

    bb106: {
        _117 = is_pipe(_94) -> [return: bb107, unwind: bb180];
    }

    bb107: {
        switchInt(move _117) -> [0: bb108, otherwise: bb110];
    }

    bb108: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb109: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb110: {
        _119 = &((*_1).2: std::sync::Arc<options::Options>);
        _118 = <Arc<Options> as Deref>::deref(move _119) -> [return: bb111, unwind: bb180];
    }

    bb111: {
        _120 = discriminant(((*_118).23: std::option::Option<filter::owner::OwnerFilter>));
        switchInt(move _120) -> [1: bb112, otherwise: bb119];
    }

    bb112: {
        _121 = &((((*_118).23: std::option::Option<filter::owner::OwnerFilter>) as Some).0: filter::owner::OwnerFilter);
        _122 = Path::metadata(_51) -> [return: bb113, unwind: bb180];
    }

    bb113: {
        _123 = discriminant(_122);
        switchInt(move _123) -> [0: bb114, otherwise: bb118];
    }

    bb114: {
        _124 = &((_122 as Ok).0: std::fs::Metadata);
        _126 = &_124;
        _181 = deref_copy (*_126);
        _125 = OwnerFilter::matches(_121, _181) -> [return: bb115, unwind: bb177];
    }

    bb115: {
        switchInt(move _125) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        drop(_122) -> [return: bb119, unwind: bb180];
    }

    bb117: {
        _0 = ignore::WalkState::Continue;
        goto -> bb166;
    }

    bb118: {
        _0 = ignore::WalkState::Continue;
        goto -> bb166;
    }

    bb119: {
        _130 = &((*_1).2: std::sync::Arc<options::Options>);
        _129 = <Arc<Options> as Deref>::deref(move _130) -> [return: bb120, unwind: bb180];
    }

    bb120: {
        _128 = &((*_129).21: std::vec::Vec<filter::size::SizeFilter>);
        _127 = Vec::<SizeFilter>::is_empty(move _128) -> [return: bb121, unwind: bb180];
    }

    bb121: {
        switchInt(move _127) -> [0: bb122, otherwise: bb136];
    }

    bb122: {
        _131 = Path::is_file(_51) -> [return: bb123, unwind: bb180];
    }

    bb123: {
        switchInt(move _131) -> [0: bb135, otherwise: bb124];
    }

    bb124: {
        _132 = Path::metadata(_51) -> [return: bb125, unwind: bb180];
    }

    bb125: {
        _133 = discriminant(_132);
        switchInt(move _133) -> [0: bb126, otherwise: bb134];
    }

    bb126: {
        _134 = move ((_132 as Ok).0: std::fs::Metadata);
        _136 = &_134;
        _135 = Metadata::len(move _136) -> [return: bb127, unwind: bb176];
    }

    bb127: {
        _143 = &((*_1).2: std::sync::Arc<options::Options>);
        _142 = <Arc<Options> as Deref>::deref(move _143) -> [return: bb128, unwind: bb176];
    }

    bb128: {
        _141 = &((*_142).21: std::vec::Vec<filter::size::SizeFilter>);
        _140 = <Vec<SizeFilter> as Deref>::deref(move _141) -> [return: bb129, unwind: bb176];
    }

    bb129: {
        _139 = core::slice::<impl [SizeFilter]>::iter(_140) -> [return: bb130, unwind: bb176];
    }

    bb130: {
        _138 = &mut _139;
        _145 = &_135;
        _144 = {closure@src/walk.rs:471:34: 471:38} { file_size: move _145 };
        _137 = <std::slice::Iter<'_, SizeFilter> as Iterator>::any::<{closure@src/walk.rs:471:34: 471:38}>(move _138, move _144) -> [return: bb131, unwind: bb176];
    }

    bb131: {
        switchInt(move _137) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _0 = ignore::WalkState::Continue;
        goto -> bb165;
    }

    bb133: {
        drop(_132) -> [return: bb136, unwind: bb180];
    }

    bb134: {
        _0 = ignore::WalkState::Continue;
        goto -> bb165;
    }

    bb135: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb136: {
        _149 = &((*_1).2: std::sync::Arc<options::Options>);
        _148 = <Arc<Options> as Deref>::deref(move _149) -> [return: bb137, unwind: bb180];
    }

    bb137: {
        _147 = &((*_148).22: std::vec::Vec<filter::time::TimeFilter>);
        _146 = Vec::<TimeFilter>::is_empty(move _147) -> [return: bb138, unwind: bb180];
    }

    bb138: {
        switchInt(move _146) -> [0: bb139, otherwise: bb152];
    }

    bb139: {
        _150 = const false;
        _151 = Path::metadata(_51) -> [return: bb140, unwind: bb180];
    }

    bb140: {
        _152 = discriminant(_151);
        switchInt(move _152) -> [0: bb141, otherwise: bb149];
    }

    bb141: {
        _153 = move ((_151 as Ok).0: std::fs::Metadata);
        _155 = &_153;
        _154 = Metadata::modified(move _155) -> [return: bb142, unwind: bb175];
    }

    bb142: {
        _156 = discriminant(_154);
        switchInt(move _156) -> [0: bb143, otherwise: bb148];
    }

    bb143: {
        _157 = ((_154 as Ok).0: std::time::SystemTime);
        _164 = &((*_1).2: std::sync::Arc<options::Options>);
        _163 = <Arc<Options> as Deref>::deref(move _164) -> [return: bb144, unwind: bb174];
    }

    bb144: {
        _162 = &((*_163).22: std::vec::Vec<filter::time::TimeFilter>);
        _161 = <Vec<TimeFilter> as Deref>::deref(move _162) -> [return: bb145, unwind: bb174];
    }

    bb145: {
        _160 = core::slice::<impl [TimeFilter]>::iter(_161) -> [return: bb146, unwind: bb174];
    }

    bb146: {
        _159 = &mut _160;
        _166 = &_157;
        _165 = {closure@src/walk.rs:491:34: 491:38} { modified: move _166 };
        _158 = <std::slice::Iter<'_, TimeFilter> as Iterator>::all::<{closure@src/walk.rs:491:34: 491:38}>(move _159, move _165) -> [return: bb147, unwind: bb174];
    }

    bb147: {
        _150 = move _158;
        goto -> bb148;
    }

    bb148: {
        drop(_154) -> [return: bb149, unwind: bb175];
    }

    bb149: {
        drop(_151) -> [return: bb150, unwind: bb180];
    }

    bb150: {
        _167 = _150;
        switchInt(move _167) -> [0: bb151, otherwise: bb152];
    }

    bb151: {
        _0 = ignore::WalkState::Continue;
        goto -> bb167;
    }

    bb152: {
        _169 = &((*_1).1: std::sync::mpsc::Sender<walk::WorkerResult>);
        _171 = <Path as ToOwned>::to_owned(_51) -> [return: bb153, unwind: bb180];
    }

    bb153: {
        _170 = WorkerResult::Entry(move _171);
        _168 = Sender::<WorkerResult>::send(move _169, move _170) -> [return: bb154, unwind: bb180];
    }

    bb154: {
        _173 = &_168;
        _172 = Result::<(), SendError<WorkerResult>>::is_err(move _173) -> [return: bb155, unwind: bb173];
    }

    bb155: {
        switchInt(move _172) -> [0: bb157, otherwise: bb156];
    }

    bb156: {
        _0 = Quit;
        goto -> bb164;
    }

    bb157: {
        _176 = &((*_1).2: std::sync::Arc<options::Options>);
        _175 = <Arc<Options> as Deref>::deref(move _176) -> [return: bb158, unwind: bb173];
    }

    bb158: {
        _174 = ((*_175).11: bool);
        switchInt(move _174) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _0 = ignore::WalkState::Skip;
        goto -> bb164;
    }

    bb160: {
        _0 = ignore::WalkState::Continue;
        drop(_168) -> [return: bb161, unwind: bb180];
    }

    bb161: {
        drop(_53) -> [return: bb162, unwind: bb182];
    }

    bb162: {
        drop(_7) -> [return: bb163, unwind: bb214];
    }

    bb163: {
        _189 = discriminant(_2);
        switchInt(move _189) -> [0: bb172, otherwise: bb185];
    }

    bb164: {
        drop(_168) -> [return: bb167, unwind: bb180];
    }

    bb165: {
        drop(_132) -> [return: bb167, unwind: bb180];
    }

    bb166: {
        drop(_122) -> [return: bb167, unwind: bb180];
    }

    bb167: {
        drop(_53) -> [return: bb168, unwind: bb182];
    }

    bb168: {
        drop(_7) -> [return: bb201, unwind: bb214];
    }

    bb169: {
        drop(_38) -> [return: bb201, unwind: bb214];
    }

    bb170: {
        drop(_30) -> [return: bb171, unwind: bb203];
    }

    bb171: {
        _186 = const false;
        _187 = const false;
        goto -> bb201;
    }

    bb172: {
        return;
    }

    bb173 (cleanup): {
        drop(_168) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_154) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_151) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_132) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_122) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_86) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_73) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_53) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_57) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_7) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_187) -> [0: bb214, otherwise: bb204];
    }

    bb184 (cleanup): {
        resume;
    }

    bb185: {
        switchInt(_182) -> [0: bb186, otherwise: bb188];
    }

    bb186: {
        _182 = const false;
        goto -> bb172;
    }

    bb187: {
        drop(((_2 as Err).0: ignore::Error)) -> [return: bb186, unwind continue];
    }

    bb188: {
        _188 = discriminant(((_2 as Err).0: ignore::Error));
        switchInt(move _188) -> [2: bb186, otherwise: bb187];
    }

    bb189: {
        switchInt(_183) -> [0: bb172, otherwise: bb190];
    }

    bb190: {
        drop(((_2 as Ok).0: ignore::DirEntry)) -> [return: bb172, unwind continue];
    }

    bb191: {
        switchInt(_182) -> [0: bb192, otherwise: bb200];
    }

    bb192: {
        _182 = const false;
        goto -> bb172;
    }

    bb193 (cleanup): {
        switchInt(_184) -> [0: bb184, otherwise: bb194];
    }

    bb194 (cleanup): {
        drop(((((_2 as Err).0: ignore::Error) as WithPath).1: std::boxed::Box<ignore::Error>)) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb195: {
        switchInt(_184) -> [0: bb192, otherwise: bb196];
    }

    bb196: {
        drop(((((_2 as Err).0: ignore::Error) as WithPath).1: std::boxed::Box<ignore::Error>)) -> [return: bb192, unwind continue];
    }

    bb197: {
        switchInt(_185) -> [0: bb195, otherwise: bb198];
    }

    bb198: {
        drop(((((_2 as Err).0: ignore::Error) as WithPath).0: std::path::PathBuf)) -> [return: bb195, unwind: bb193];
    }

    bb199: {
        drop(((_2 as Err).0: ignore::Error)) -> [return: bb192, unwind continue];
    }

    bb200: {
        _190 = discriminant(((_2 as Err).0: ignore::Error));
        switchInt(move _190) -> [2: bb197, otherwise: bb199];
    }

    bb201: {
        _191 = discriminant(_2);
        switchInt(move _191) -> [0: bb189, otherwise: bb191];
    }

    bb202 (cleanup): {
        drop(_15) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        switchInt(_186) -> [0: bb183, otherwise: bb202];
    }

    bb204 (cleanup): {
        drop(_14) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        switchInt(_183) -> [0: bb184, otherwise: bb206];
    }

    bb206 (cleanup): {
        drop(((_2 as Ok).0: ignore::DirEntry)) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        switchInt(_182) -> [0: bb184, otherwise: bb213];
    }

    bb208 (cleanup): {
        switchInt(_184) -> [0: bb184, otherwise: bb209];
    }

    bb209 (cleanup): {
        drop(((((_2 as Err).0: ignore::Error) as WithPath).1: std::boxed::Box<ignore::Error>)) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        switchInt(_185) -> [0: bb208, otherwise: bb211];
    }

    bb211 (cleanup): {
        drop(((((_2 as Err).0: ignore::Error) as WithPath).0: std::path::PathBuf)) -> [return: bb208, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(((_2 as Err).0: ignore::Error)) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        _192 = discriminant(((_2 as Err).0: ignore::Error));
        switchInt(move _192) -> [2: bb210, otherwise: bb212];
    }

    bb214 (cleanup): {
        _193 = discriminant(_2);
        switchInt(move _193) -> [0: bb205, otherwise: bb207];
    }
}

promoted[0] in spawn_senders::{closure#0}::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Encountered file system entry without a file name. This should only happen for paths like 'foo/bar/..' or '/' which are not supposed to appear in a file system traversal.";
        _0 = &_1;
        return;
    }
}

promoted[1] in spawn_senders::{closure#0}::{closure#0}: &std::io::ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = NotFound;
        _0 = &_1;
        return;
    }
}

fn spawn_senders::{closure#0}::{closure#0}::{closure#0}(_1: {closure@src/walk.rs:356:48: 356:51}, _2: Metadata) -> bool {
    debug m => _2;
    let mut _0: bool;
    let mut _3: &std::fs::FileType;
    let _4: std::fs::FileType;
    let mut _5: &std::fs::Metadata;

    bb0: {
        _5 = &_2;
        _4 = Metadata::file_type(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = FileType::is_symlink(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn spawn_senders::{closure#0}::{closure#0}::{closure#1}(_1: {closure@src/walk.rs:385:47: 385:50}, _2: usize) -> bool {
    debug d => _2;
    debug min_depth => (*(_1.0: &usize));
    let mut _0: bool;
    let mut _3: usize;
    let mut _4: &usize;

    bb0: {
        _4 = deref_copy (_1.0: &usize);
        _3 = (*_4);
        _0 = Lt(_2, move _3);
        return;
    }
}

fn spawn_senders::{closure#0}::{closure#0}::{closure#2}(_1: {closure@src/walk.rs:434:38: 434:41}, _2: Metadata) -> bool {
    debug m => _2;
    let mut _0: bool;
    let _3: &std::fs::Metadata;

    bb0: {
        _3 = &_2;
        _0 = is_executable(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn spawn_senders::{closure#0}::{closure#0}::{closure#3}(_1: &mut {closure@src/walk.rs:471:34: 471:38}, _2: &SizeFilter) -> bool {
    debug sc => _2;
    debug file_size => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: &u64;

    bb0: {
        _5 = deref_copy ((*_1).0: &u64);
        _4 = (*_5);
        _3 = SizeFilter::is_within(_2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn spawn_senders::{closure#0}::{closure#0}::{closure#4}(_1: &mut {closure@src/walk.rs:491:34: 491:38}, _2: &TimeFilter) -> bool {
    debug tf => _2;
    debug modified => (*((*_1).0: &std::time::SystemTime));
    let mut _0: bool;
    let mut _3: &std::time::SystemTime;

    bb0: {
        _3 = deref_copy ((*_1).0: &std::time::SystemTime);
        _0 = TimeFilter::applies_to(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static ALLOC: Jemalloc = {
    let mut _0: jemallocator::Jemalloc;

    bb0: {
        _0 = Jemalloc;
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn __rust_alloc(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc7: &Jemalloc};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::alloc(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc7 (static: ALLOC, size: 0, align: 1) {}

fn __rust_dealloc(_1: *mut u8, _2: usize, _3: usize) -> () {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    let mut _0: ();
    let _4: &jemallocator::Jemalloc;
    let mut _5: std::alloc::Layout;

    bb0: {
        _4 = const {alloc7: &Jemalloc};
        _5 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::dealloc(_4, _1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc7 (static: ALLOC, size: 0, align: 1) {}

fn __rust_realloc(_1: *mut u8, _2: usize, _3: usize, _4: usize) -> *mut u8 {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    debug new_size => _4;
    let mut _0: *mut u8;
    let _5: &jemallocator::Jemalloc;
    let mut _6: std::alloc::Layout;

    bb0: {
        _5 = const {alloc7: &Jemalloc};
        _6 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::realloc(_5, _1, move _6, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc7 (static: ALLOC, size: 0, align: 1) {}

fn __rust_alloc_zeroed(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc7: &Jemalloc};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::alloc_zeroed(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc7 (static: ALLOC, size: 0, align: 1) {}

const DEFAULT_LS_COLORS: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\now=0:or=0;38;5;16;48;5;203:no=0:ex=1;38;5;203:cd=0;38;5;203;48;5;236:mi=0;38;5;16;48;5;203:*~=0;38;5;243:st=0:pi=0;38;5;16;48;5;81:fi=0:di=0;38;5;81:so=0;38;5;16;48;5;203:bd=0;38;5;81;48;5;236:tw=0:ln=0;38;5;203:*.m=0;38;5;48:*.o=0;38;5;243:*.z=4;38;5;203:*.a=1;38;5;203:*.r=0;38;5;48:*.c=0;38;5;48:*.d=0;38;5;48:*.t=0;38;5;48:*.h=0;38;5;48:*.p=0;38;5;48:*.cc=0;38;5;48:*.ll=0;38;5;48:*.jl=0;38;5;48:*css=0;38;5;48:*.md=0;38;5;185:*.gz=4;38;5;203:*.nb=0;38;5;48:*.mn=0;38;5;48:*.go=0;38;5;48:*.xz=4;38;5;203:*.so=1;38;5;203:*.rb=0;38;5;48:*.pm=0;38;5;48:*.bc=0;38;5;243:*.py=0;38;5;48:*.as=0;38;5;48:*.pl=0;38;5;48:*.rs=0;38;5;48:*.sh=0;38;5;48:*.7z=4;38;5;203:*.ps=0;38;5;186:*.cs=0;38;5;48:*.el=0;38;5;48:*.rm=0;38;5;208:*.hs=0;38;5;48:*.td=0;38;5;48:*.ui=0;38;5;149:*.ex=0;38;5;48:*.js=0;38;5;48:*.cp=0;38;5;48:*.cr=0;38;5;48:*.la=0;38;5;243:*.kt=0;38;5;48:*.ml=0;38;5;48:*.vb=0;38;5;48:*.gv=0;38;5;48:*.lo=0;38;5;243:*.hi=0;38;5;243:*.ts=0;38;5;48:*.ko=1;38;5;203:*.hh=0;38;5;48:*.pp=0;38;5;48:*.di=0;38;5;48:*.bz=4;38;5;203:*.fs=0;38;5;48:*.png=0;38;5;208:*.zsh=0;38;5;48:*.mpg=0;38;5;208:*.pid=0;38;5;243:*.xmp=0;38;5;149:*.iso=4;38;5;203:*.m4v=0;38;5;208:*.dot=0;38;5;48:*.ods=0;38;5;186:*.inc=0;38;5;48:*.sxw=0;38;5;186:*.aif=0;38;5;208:*.git=0;38;5;243:*.gvy=0;38;5;48:*.tbz=4;38;5;203:*.log=0;38;5;243:*.txt=0;38;5;185:*.ico=0;38;5;208:*.csx=0;38;5;48:*.vob=0;38;5;208:*.pgm=0;38;5;208:*.pps=0;38;5;186:*.ics=0;38;5;186:*.img=4;38;5;203:*.fon=0;38;5;208:*.hpp=0;38;5;48:*.bsh=0;38;5;48:*.sql=0;38;5;48:*TODO=1:*.php=0;38;5;48:*.pkg=4;38;5;203:*.ps1=0;38;5;48:*.csv=0;38;5;185:*.ilg=0;38;5;243:*.ini=0;38;5;149:*.pyc=0;38;5;243:*.psd=0;38;5;208:*.htc=0;38;5;48:*.swp=0;38;5;243:*.mli=0;38;5;48:*hgrc=0;38;5;149:*.bst=0;38;5;149:*.ipp=0;38;5;48:*.fsi=0;38;5;48:*.tcl=0;38;5;48:*.exs=0;38;5;48:*.out=0;38;5;243:*.jar=4;38;5;203:*.xls=0;38;5;186:*.ppm=0;38;5;208:*.apk=4;38;5;203:*.aux=0;38;5;243:*.rpm=4;38;5;203:*.dll=1;38;5;203:*.eps=0;38;5;208:*.exe=1;38;5;203:*.doc=0;38;5;186:*.wma=0;38;5;208:*.deb=4;38;5;203:*.pod=0;38;5;48:*.ind=0;38;5;243:*.nix=0;38;5;149:*.lua=0;38;5;48:*.epp=0;38;5;48:*.dpr=0;38;5;48:*.htm=0;38;5;185:*.ogg=0;38;5;208:*.bin=4;38;5;203:*.otf=0;38;5;208:*.yml=0;38;5;149:*.pro=0;38;5;149:*.cxx=0;38;5;48:*.tex=0;38;5;48:*.fnt=0;38;5;208:*.erl=0;38;5;48:*.sty=0;38;5;243:*.bag=4;38;5;203:*.rst=0;38;5;185:*.pdf=0;38;5;186:*.pbm=0;38;5;208:*.xcf=0;38;5;208:*.clj=0;38;5;48:*.gif=0;38;5;208:*.rar=4;38;5;203:*.elm=0;38;5;48:*.bib=0;38;5;149:*.tsx=0;38;5;48:*.dmg=4;38;5;203:*.tmp=0;38;5;243:*.bcf=0;38;5;243:*.mkv=0;38;5;208:*.svg=0;38;5;208:*.cpp=0;38;5;48:*.vim=0;38;5;48:*.bmp=0;38;5;208:*.ltx=0;38;5;48:*.fls=0;38;5;243:*.flv=0;38;5;208:*.wav=0;38;5;208:*.m4a=0;38;5;208:*.mid=0;38;5;208:*.hxx=0;38;5;48:*.pas=0;38;5;48:*.wmv=0;38;5;208:*.tif=0;38;5;208:*.kex=0;38;5;186:*.mp4=0;38;5;208:*.bak=0;38;5;243:*.xlr=0;38;5;186:*.dox=0;38;5;149:*.swf=0;38;5;208:*.tar=4;38;5;203:*.tgz=4;38;5;203:*.cfg=0;38;5;149:*.xml=0;\n38;5;185:*.jpg=0;38;5;208:*.mir=0;38;5;48:*.sxi=0;38;5;186:*.bz2=4;38;5;203:*.odt=0;38;5;186:*.mov=0;38;5;208:*.toc=0;38;5;243:*.bat=1;38;5;203:*.asa=0;38;5;48:*.awk=0;38;5;48:*.sbt=0;38;5;48:*.vcd=4;38;5;203:*.kts=0;38;5;48:*.arj=4;38;5;203:*.blg=0;38;5;243:*.c++=0;38;5;48:*.odp=0;38;5;186:*.bbl=0;38;5;243:*.idx=0;38;5;243:*.com=1;38;5;203:*.mp3=0;38;5;208:*.avi=0;38;5;208:*.def=0;38;5;48:*.cgi=0;38;5;48:*.zip=4;38;5;203:*.ttf=0;38;5;208:*.ppt=0;38;5;186:*.tml=0;38;5;149:*.fsx=0;38;5;48:*.h++=0;38;5;48:*.rtf=0;38;5;186:*.inl=0;38;5;48:*.yaml=0;38;5;149:*.html=0;38;5;185:*.mpeg=0;38;5;208:*.java=0;38;5;48:*.hgrc=0;38;5;149:*.orig=0;38;5;243:*.conf=0;38;5;149:*.dart=0;38;5;48:*.psm1=0;38;5;48:*.rlib=0;38;5;243:*.fish=0;38;5;48:*.bash=0;38;5;48:*.make=0;38;5;149:*.docx=0;38;5;186:*.json=0;38;5;149:*.psd1=0;38;5;48:*.lisp=0;38;5;48:*.tbz2=4;38;5;203:*.diff=0;38;5;48:*.epub=0;38;5;186:*.xlsx=0;38;5;186:*.pptx=0;38;5;186:*.toml=0;38;5;149:*.h264=0;38;5;208:*.purs=0;38;5;48:*.flac=0;38;5;208:*.tiff=0;38;5;208:*.jpeg=0;38;5;208:*.lock=0;38;5;243:*.less=0;38;5;48:*.dyn_o=0;38;5;243:*.scala=0;38;5;48:*.mdown=0;38;5;185:*.shtml=0;38;5;185:*.class=0;38;5;243:*.cache=0;38;5;243:*.cmake=0;38;5;149:*passwd=0;38;5;149:*.swift=0;38;5;48:*shadow=0;38;5;149:*.xhtml=0;38;5;185:*.patch=0;38;5;48:*.cabal=0;38;5;48:*README=0;38;5;16;48;5;186:*.toast=4;38;5;203:*.ipynb=0;38;5;48:*COPYING=0;38;5;249:*.gradle=0;38;5;48:*.matlab=0;38;5;48:*.config=0;38;5;149:*LICENSE=0;38;5;249:*.dyn_hi=0;38;5;243:*.flake8=0;38;5;149:*.groovy=0;38;5;48:*INSTALL=0;38;5;16;48;5;186:*TODO.md=1:*.ignore=0;38;5;149:*Doxyfile=0;38;5;149:*TODO.txt=1:*setup.py=0;38;5;149:*Makefile=0;38;5;149:*.gemspec=0;38;5;149:*.desktop=0;38;5;149:*.rgignore=0;38;5;149:*.markdown=0;38;5;185:*COPYRIGHT=0;38;5;249:*configure=0;38;5;149:*.DS_Store=0;38;5;243:*.kdevelop=0;38;5;149:*.fdignore=0;38;5;149:*README.md=0;38;5;16;48;5;186:*.cmake.in=0;38;5;149:*SConscript=0;38;5;149:*CODEOWNERS=0;38;5;149:*.localized=0;38;5;243:*.gitignore=0;38;5;149:*Dockerfile=0;38;5;149:*.gitconfig=0;38;5;149:*INSTALL.md=0;38;5;16;48;5;186:*README.txt=0;38;5;16;48;5;186:*SConstruct=0;38;5;149:*.scons_opt=0;38;5;243:*.travis.yml=0;38;5;186:*.gitmodules=0;38;5;149:*.synctex.gz=0;38;5;243:*LICENSE-MIT=0;38;5;249:*MANIFEST.in=0;38;5;149:*Makefile.in=0;38;5;243:*Makefile.am=0;38;5;149:*INSTALL.txt=0;38;5;16;48;5;186:*configure.ac=0;38;5;149:*.applescript=0;38;5;48:*appveyor.yml=0;38;5;186:*.fdb_latexmk=0;38;5;243:*CONTRIBUTORS=0;38;5;16;48;5;186:*.clang-format=0;38;5;149:*LICENSE-APACHE=0;38;5;249:*CMakeLists.txt=0;38;5;149:*CMakeCache.txt=0;38;5;243:*.gitattributes=0;38;5;149:*CONTRIBUTORS.md=0;38;5;16;48;5;186:*.sconsign.dblite=0;38;5;243:*requirements.txt=0;38;5;149:*CONTRIBUTORS.txt=0;38;5;16;48;5;186:*package-lock.json=0;38;5;243:*.CFUserTextEncoding=0;38;5;243\n";
        return;
    }
}

fn run() -> Result<exit_codes::ExitCode, anyhow::Error> {
    let mut _0: std::result::Result<exit_codes::ExitCode, anyhow::Error>;
    let _1: clap::ArgMatches<'_>;
    let mut _2: clap::App<'_, '_>;
    let mut _3: std::env::ArgsOs;
    let mut _4: std::option::Option<&std::ffi::OsStr>;
    let mut _5: &clap::ArgMatches<'_>;
    let mut _6: isize;
    let mut _9: bool;
    let mut _10: &std::path::Path;
    let mut _11: anyhow::Error;
    let mut _12: std::string::String;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &std::borrow::Cow<'_, str>;
    let _21: std::borrow::Cow<'_, str>;
    let mut _22: &std::path::Path;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>>;
    let mut _24: std::result::Result<(), anyhow::Error>;
    let mut _25: std::result::Result<(), std::io::Error>;
    let mut _26: &std::path::Path;
    let mut _27: {closure@src/main.rs:64:59: 64:61};
    let mut _28: &&std::path::Path;
    let mut _29: isize;
    let _32: &str;
    let mut _33: bool;
    let mut _34: anyhow::Error;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<&str>>;
    let mut _37: std::result::Result<std::option::Option<&str>, anyhow::Error>;
    let mut _38: std::option::Option<std::result::Result<&str, anyhow::Error>>;
    let mut _39: std::option::Option<&std::ffi::OsStr>;
    let mut _40: &clap::ArgMatches<'_>;
    let mut _41: isize;
    let _44: &str;
    let mut _46: std::option::Option<clap::OsValues<'_>>;
    let mut _47: &clap::ArgMatches<'_>;
    let mut _48: {closure@src/main.rs:92:18: 92:20};
    let mut _49: &clap::ArgMatches<'_>;
    let mut _51: isize;
    let mut _54: clap::OsValues<'_>;
    let mut _56: std::option::Option<&std::ffi::OsStr>;
    let mut _57: &mut clap::OsValues<'_>;
    let mut _58: isize;
    let mut _61: bool;
    let _62: &std::path::Path;
    let _63: &std::path::PathBuf;
    let _64: ();
    let mut _65: &mut std::vec::Vec<std::path::PathBuf>;
    let mut _66: std::path::PathBuf;
    let _67: ();
    let mut _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &std::borrow::Cow<'_, str>;
    let _77: std::borrow::Cow<'_, str>;
    let _78: &std::path::Path;
    let mut _79: &std::path::PathBuf;
    let mut _80: std::boxed::Box<[std::path::PathBuf]>;
    let mut _81: std::boxed::Box<[std::path::PathBuf; 1]>;
    let mut _82: usize;
    let mut _83: usize;
    let mut _84: *mut u8;
    let mut _85: std::boxed::Box<[std::path::PathBuf; 1]>;
    let mut _86: std::path::PathBuf;
    let mut _87: bool;
    let mut _88: &std::vec::Vec<std::path::PathBuf>;
    let mut _89: anyhow::Error;
    let mut _90: bool;
    let mut _91: &clap::ArgMatches<'_>;
    let mut _92: std::vec::Vec<std::path::PathBuf>;
    let mut _93: std::iter::Map<std::slice::Iter<'_, std::path::PathBuf>, {closure@src/main.rs:121:18: 121:31}>;
    let mut _94: std::slice::Iter<'_, std::path::PathBuf>;
    let _95: &[std::path::PathBuf];
    let mut _96: &std::vec::Vec<std::path::PathBuf>;
    let mut _97: bool;
    let mut _98: &clap::ArgMatches<'_>;
    let mut _99: bool;
    let mut _100: &str;
    let mut _101: bool;
    let _102: &std::path::Path;
    let mut _103: &str;
    let mut _104: anyhow::Error;
    let mut _106: std::fmt::Arguments<'_>;
    let mut _107: &[&str];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let _109: &[core::fmt::rt::Argument<'_>; 2];
    let _110: [core::fmt::rt::Argument<'_>; 2];
    let mut _111: core::fmt::rt::Argument<'_>;
    let _112: &&str;
    let mut _113: core::fmt::rt::Argument<'_>;
    let mut _114: &[core::fmt::rt::Placeholder];
    let _115: &[core::fmt::rt::Placeholder; 5];
    let _116: [core::fmt::rt::Placeholder; 5];
    let mut _117: core::fmt::rt::Placeholder;
    let mut _118: core::fmt::rt::Alignment;
    let mut _119: core::fmt::rt::Count;
    let mut _120: core::fmt::rt::Count;
    let mut _121: core::fmt::rt::Placeholder;
    let mut _122: core::fmt::rt::Alignment;
    let mut _123: core::fmt::rt::Count;
    let mut _124: core::fmt::rt::Count;
    let mut _125: core::fmt::rt::Placeholder;
    let mut _126: core::fmt::rt::Alignment;
    let mut _127: core::fmt::rt::Count;
    let mut _128: core::fmt::rt::Count;
    let mut _129: core::fmt::rt::Placeholder;
    let mut _130: core::fmt::rt::Alignment;
    let mut _131: core::fmt::rt::Count;
    let mut _132: core::fmt::rt::Count;
    let mut _133: core::fmt::rt::Placeholder;
    let mut _134: core::fmt::rt::Alignment;
    let mut _135: core::fmt::rt::Count;
    let mut _136: core::fmt::rt::Count;
    let mut _137: core::fmt::rt::UnsafeArg;
    let mut _139: bool;
    let mut _140: &clap::ArgMatches<'_>;
    let mut _141: bool;
    let mut _142: &str;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, globset::Error>, globset::Glob>;
    let mut _145: std::result::Result<globset::Glob, globset::Error>;
    let mut _146: &globset::GlobBuilder<'_>;
    let _147: &mut globset::GlobBuilder<'_>;
    let mut _148: &mut globset::GlobBuilder<'_>;
    let mut _149: globset::GlobBuilder<'_>;
    let mut _150: &str;
    let mut _151: isize;
    let _154: &str;
    let mut _155: &globset::Glob;
    let mut _156: bool;
    let mut _157: &clap::ArgMatches<'_>;
    let mut _158: &str;
    let mut _159: &str;
    let mut _161: bool;
    let mut _162: &clap::ArgMatches<'_>;
    let mut _163: bool;
    let mut _164: &clap::ArgMatches<'_>;
    let _165: &str;
    let _166: &std::string::String;
    let mut _169: atty::Stream;
    let mut _171: std::option::Option<&str>;
    let mut _172: &clap::ArgMatches<'_>;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: isize;
    let mut _176: bool;
    let mut _177: &std::option::Option<std::ffi::OsString>;
    let _178: std::option::Option<std::ffi::OsString>;
    let mut _180: std::option::Option<&str>;
    let mut _181: &clap::ArgMatches<'_>;
    let mut _183: bool;
    let mut _184: lscolors::LsColors;
    let mut _185: std::option::Option<lscolors::LsColors>;
    let mut _187: std::option::Option<clap::Values<'_>>;
    let mut _188: &clap::ArgMatches<'_>;
    let mut _189: isize;
    let mut _191: exec::CommandTemplate;
    let mut _192: std::option::Option<clap::Values<'_>>;
    let mut _193: &clap::ArgMatches<'_>;
    let mut _194: isize;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, exec::CommandTemplate>;
    let mut _197: std::result::Result<exec::CommandTemplate, anyhow::Error>;
    let mut _198: isize;
    let mut _201: bool;
    let mut _202: &clap::ArgMatches<'_>;
    let mut _204: std::option::Option<&str>;
    let mut _205: &clap::ArgMatches<'_>;
    let _206: &str;
    let mut _208: &[&str];
    let mut _209: &[&str; 2];
    let _210: [&str; 2];
    let mut _212: &std::string::String;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: &{closure@src/main.rs:193:22: 193:36};
    let mut _217: (&str,);
    let _218: &str;
    let mut _220: &std::result::Result<std::process::ExitStatus, std::io::Error>;
    let _221: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _222: &mut std::process::Command;
    let mut _223: &mut std::process::Command;
    let mut _224: &mut std::process::Command;
    let mut _225: &mut std::process::Command;
    let mut _226: std::process::Command;
    let mut _227: std::process::Stdio;
    let mut _228: std::process::Stdio;
    let mut _229: &{closure@src/main.rs:193:22: 193:36};
    let mut _230: (&str,);
    let _231: &str;
    let mut _233: std::boxed::Box<[&str]>;
    let mut _234: usize;
    let mut _235: usize;
    let mut _236: *mut u8;
    let mut _237: std::boxed::Box<[&str; 4]>;
    let _238: &str;
    let _239: &str;
    let _240: &str;
    let mut _241: bool;
    let mut _242: bool;
    let _243: ();
    let mut _244: &mut std::vec::Vec<&str>;
    let _245: &str;
    let mut _246: bool;
    let mut _248: &std::result::Result<std::process::ExitStatus, std::io::Error>;
    let _249: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _250: &mut std::process::Command;
    let mut _251: &mut std::process::Command;
    let mut _252: &mut std::process::Command;
    let mut _253: &mut std::process::Command;
    let mut _254: std::process::Command;
    let mut _255: std::process::Stdio;
    let mut _256: std::process::Stdio;
    let mut _257: &{closure@src/main.rs:193:22: 193:36};
    let mut _258: (&str,);
    let _259: &str;
    let mut _260: anyhow::Error;
    let mut _261: anyhow::Error;
    let mut _262: exec::CommandTemplate;
    let mut _263: std::result::Result<exec::CommandTemplate, anyhow::Error>;
    let mut _264: &std::vec::Vec<&str>;
    let mut _266: std::option::Option<clap::Values<'_>>;
    let mut _267: &clap::ArgMatches<'_>;
    let mut _268: isize;
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::vec::Vec<filter::size::SizeFilter>>;
    let mut _271: std::result::Result<std::vec::Vec<filter::size::SizeFilter>, anyhow::Error>;
    let mut _272: std::iter::Map<clap::Values<'_>, {closure@src/main.rs:273:16: 273:20}>;
    let mut _273: isize;
    let mut _278: std::option::Option<&str>;
    let mut _279: &clap::ArgMatches<'_>;
    let mut _280: isize;
    let mut _282: std::option::Option<filter::time::TimeFilter>;
    let _283: &std::time::SystemTime;
    let mut _284: &str;
    let mut _285: isize;
    let _287: ();
    let mut _288: &mut std::vec::Vec<filter::time::TimeFilter>;
    let mut _289: anyhow::Error;
    let mut _291: std::fmt::Arguments<'_>;
    let mut _292: &[&str];
    let mut _293: &[core::fmt::rt::Argument<'_>];
    let _294: &[core::fmt::rt::Argument<'_>; 1];
    let _295: [core::fmt::rt::Argument<'_>; 1];
    let mut _296: core::fmt::rt::Argument<'_>;
    let _297: &&str;
    let mut _298: std::option::Option<&str>;
    let mut _299: &clap::ArgMatches<'_>;
    let mut _300: isize;
    let mut _302: std::option::Option<filter::time::TimeFilter>;
    let _303: &std::time::SystemTime;
    let mut _304: &str;
    let mut _305: isize;
    let _307: ();
    let mut _308: &mut std::vec::Vec<filter::time::TimeFilter>;
    let mut _309: anyhow::Error;
    let mut _311: std::fmt::Arguments<'_>;
    let mut _312: &[&str];
    let mut _313: &[core::fmt::rt::Argument<'_>];
    let _314: &[core::fmt::rt::Argument<'_>; 1];
    let _315: [core::fmt::rt::Argument<'_>; 1];
    let mut _316: core::fmt::rt::Argument<'_>;
    let _317: &&str;
    let mut _319: std::option::Option<&str>;
    let mut _320: &clap::ArgMatches<'_>;
    let mut _321: isize;
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<filter::owner::OwnerFilter>>;
    let mut _324: std::result::Result<std::option::Option<filter::owner::OwnerFilter>, anyhow::Error>;
    let mut _325: isize;
    let mut _329: bool;
    let mut _330: bool;
    let mut _331: &clap::ArgMatches<'_>;
    let mut _332: bool;
    let mut _333: bool;
    let mut _334: bool;
    let mut _335: &clap::ArgMatches<'_>;
    let mut _336: u64;
    let mut _337: &clap::ArgMatches<'_>;
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: bool;
    let mut _341: &clap::ArgMatches<'_>;
    let mut _342: &clap::ArgMatches<'_>;
    let mut _343: bool;
    let mut _344: bool;
    let mut _345: bool;
    let mut _346: &clap::ArgMatches<'_>;
    let mut _347: bool;
    let mut _348: &clap::ArgMatches<'_>;
    let mut _349: &clap::ArgMatches<'_>;
    let mut _350: bool;
    let mut _351: bool;
    let mut _352: bool;
    let mut _353: &clap::ArgMatches<'_>;
    let mut _354: bool;
    let mut _355: &clap::ArgMatches<'_>;
    let mut _356: &clap::ArgMatches<'_>;
    let mut _357: bool;
    let mut _358: &clap::ArgMatches<'_>;
    let mut _359: bool;
    let mut _360: &clap::ArgMatches<'_>;
    let mut _361: bool;
    let mut _362: &clap::ArgMatches<'_>;
    let mut _363: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<usize>>;
    let mut _364: std::result::Result<std::option::Option<usize>, anyhow::Error>;
    let mut _365: std::result::Result<std::option::Option<usize>, std::num::ParseIntError>;
    let mut _366: std::option::Option<std::result::Result<usize, std::num::ParseIntError>>;
    let mut _367: std::option::Option<&str>;
    let mut _368: std::option::Option<&str>;
    let mut _369: std::option::Option<&str>;
    let mut _370: &clap::ArgMatches<'_>;
    let mut _371: {closure@src/main.rs:330:22: 330:24};
    let mut _372: &clap::ArgMatches<'_>;
    let mut _373: {closure@src/main.rs:331:22: 331:24};
    let mut _374: &clap::ArgMatches<'_>;
    let mut _375: isize;
    let mut _378: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<usize>>;
    let mut _379: std::result::Result<std::option::Option<usize>, anyhow::Error>;
    let mut _380: std::result::Result<std::option::Option<usize>, std::num::ParseIntError>;
    let mut _381: std::option::Option<std::result::Result<usize, std::num::ParseIntError>>;
    let mut _382: std::option::Option<&str>;
    let mut _383: std::option::Option<&str>;
    let mut _384: &clap::ArgMatches<'_>;
    let mut _385: {closure@src/main.rs:337:22: 337:24};
    let mut _386: &clap::ArgMatches<'_>;
    let mut _387: isize;
    let mut _390: bool;
    let mut _391: &clap::ArgMatches<'_>;
    let mut _392: usize;
    let mut _393: usize;
    let mut _394: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<usize>>;
    let mut _395: std::result::Result<std::option::Option<usize>, anyhow::Error>;
    let mut _396: std::option::Option<std::result::Result<usize, anyhow::Error>>;
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<usize>>;
    let mut _398: std::result::Result<std::option::Option<usize>, anyhow::Error>;
    let mut _399: std::result::Result<std::option::Option<usize>, std::num::ParseIntError>;
    let mut _400: std::option::Option<std::result::Result<usize, std::num::ParseIntError>>;
    let mut _401: std::option::Option<&str>;
    let mut _402: &clap::ArgMatches<'_>;
    let mut _403: isize;
    let mut _406: isize;
    let mut _409: std::option::Option<std::time::Duration>;
    let mut _410: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<u64>>;
    let mut _411: std::result::Result<std::option::Option<u64>, anyhow::Error>;
    let mut _412: std::result::Result<std::option::Option<u64>, std::num::ParseIntError>;
    let mut _413: std::option::Option<std::result::Result<u64, std::num::ParseIntError>>;
    let mut _414: std::option::Option<&str>;
    let mut _415: &clap::ArgMatches<'_>;
    let mut _416: isize;
    let mut _419: std::option::Option<lscolors::LsColors>;
    let mut _420: std::option::Option<filetypes::FileTypes>;
    let mut _421: std::option::Option<clap::Values<'_>>;
    let mut _422: &clap::ArgMatches<'_>;
    let mut _423: std::option::Option<regex::bytes::RegexSet>;
    let mut _424: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, regex::Error>, std::option::Option<regex::bytes::RegexSet>>;
    let mut _425: std::result::Result<std::option::Option<regex::bytes::RegexSet>, regex::Error>;
    let mut _426: std::option::Option<std::result::Result<regex::bytes::RegexSet, regex::Error>>;
    let mut _427: std::option::Option<clap::Values<'_>>;
    let mut _428: &clap::ArgMatches<'_>;
    let mut _429: isize;
    let mut _432: std::option::Option<std::sync::Arc<exec::CommandTemplate>>;
    let mut _433: std::option::Option<exec::CommandTemplate>;
    let mut _434: std::vec::Vec<std::string::String>;
    let mut _435: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _436: std::option::Option<clap::Values<'_>>;
    let mut _437: &clap::ArgMatches<'_>;
    let mut _438: std::vec::Vec<std::path::PathBuf>;
    let mut _439: std::option::Option<std::vec::Vec<std::path::PathBuf>>;
    let mut _440: std::option::Option<clap::Values<'_>>;
    let mut _441: &clap::ArgMatches<'_>;
    let mut _442: std::vec::Vec<filter::size::SizeFilter>;
    let mut _443: std::vec::Vec<filter::time::TimeFilter>;
    let mut _444: std::option::Option<filter::owner::OwnerFilter>;
    let mut _445: bool;
    let mut _446: &clap::ArgMatches<'_>;
    let mut _447: std::option::Option<std::string::String>;
    let mut _448: std::option::Option<usize>;
    let mut _449: std::option::Option<usize>;
    let mut _450: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, std::option::Option<usize>>;
    let mut _451: std::result::Result<std::option::Option<usize>, anyhow::Error>;
    let mut _452: std::result::Result<std::option::Option<usize>, std::num::ParseIntError>;
    let mut _453: std::option::Option<std::result::Result<usize, std::num::ParseIntError>>;
    let mut _454: std::option::Option<&str>;
    let mut _455: &clap::ArgMatches<'_>;
    let mut _456: isize;
    let mut _459: {closure@src/main.rs:425:22: 425:24};
    let mut _460: &clap::ArgMatches<'_>;
    let mut _461: bool;
    let mut _462: bool;
    let mut _463: bool;
    let _464: &str;
    let _465: &std::string::String;
    let mut _466: anyhow::Error;
    let mut _468: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anyhow::Error>, regex::bytes::Regex>;
    let mut _469: std::result::Result<regex::bytes::Regex, anyhow::Error>;
    let mut _470: std::result::Result<regex::bytes::Regex, regex::Error>;
    let mut _471: &regex::bytes::RegexBuilder;
    let _472: &mut regex::bytes::RegexBuilder;
    let mut _473: &mut regex::bytes::RegexBuilder;
    let mut _474: &mut regex::bytes::RegexBuilder;
    let mut _475: regex::bytes::RegexBuilder;
    let _476: &str;
    let _477: &std::string::String;
    let mut _478: bool;
    let mut _479: bool;
    let mut _480: isize;
    let _483: &[std::path::PathBuf];
    let _484: &std::vec::Vec<std::path::PathBuf>;
    let mut _485: std::sync::Arc<regex::bytes::Regex>;
    let mut _486: regex::bytes::Regex;
    let mut _487: std::sync::Arc<options::Options>;
    let mut _488: options::Options;
    let mut _495: bool;
    let mut _496: bool;
    let mut _497: bool;
    let mut _498: bool;
    let mut _499: bool;
    let mut _500: bool;
    let mut _501: bool;
    let mut _502: bool;
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: &mut std::boxed::Box<[std::path::PathBuf; 1]>;
    let mut _506: ();
    let mut _507: *const [std::path::PathBuf; 1];
    let mut _508: *const [&str; 4];
    scope 1 {
        debug matches => _1;
        let _31: &std::path::Path;
        scope 2 {
            debug base_directory => _7;
            let _7: &std::ffi::OsStr;
            let _8: &std::path::Path;
            scope 3 {
                debug base_directory => _8;
                let _13: std::string::String;
                let _30: std::result::Result<std::convert::Infallible, anyhow::Error>;
                let mut _494: &[&str; 2];
                scope 4 {
                    debug res => _13;
                }
                scope 5 {
                    debug residual => _30;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => const ();
                    scope 8 {
                    }
                }
            }
        }
        scope 9 {
            debug current_directory => _31;
            let _35: &str;
            let _42: std::result::Result<std::convert::Infallible, anyhow::Error>;
            let _43: std::option::Option<&str>;
            scope 10 {
                debug pattern => _35;
                let _45: std::option::Option<clap::OsValues<'_>>;
                scope 15 {
                    debug passed_arguments => _45;
                    let mut _50: std::vec::Vec<std::path::PathBuf>;
                    let mut _515: *const ();
                    let mut _516: usize;
                    let mut _517: usize;
                    let mut _518: usize;
                    let mut _519: usize;
                    let mut _520: bool;
                    scope 16 {
                        debug search_paths => _50;
                        let _105: std::string::String;
                        let _138: std::string::String;
                        let _143: globset::Glob;
                        let _152: std::result::Result<std::convert::Infallible, globset::Error>;
                        let _153: globset::Glob;
                        let mut _491: &char;
                        let mut _492: &[&str; 6];
                        scope 24 {
                            debug res => _105;
                        }
                        scope 25 {
                        }
                        scope 26 {
                            debug pattern_regex => _138;
                            let _160: bool;
                            scope 32 {
                                debug case_sensitive => _160;
                                let _167: bool;
                                scope 33 {
                                    debug ansi_colors_support => const true;
                                    let _168: bool;
                                    scope 34 {
                                        debug interactive_terminal => _168;
                                        let _170: bool;
                                        scope 35 {
                                            debug colored_output => _170;
                                            let _179: std::option::Option<std::string::String>;
                                            scope 36 {
                                                debug path_separator => _179;
                                                let _182: std::option::Option<lscolors::LsColors>;
                                                scope 37 {
                                                    debug ls_colors => _182;
                                                    let _186: std::option::Option<exec::CommandTemplate>;
                                                    let _203: &str;
                                                    scope 38 {
                                                        debug command => _186;
                                                        let _265: std::vec::Vec<filter::size::SizeFilter>;
                                                        scope 54 {
                                                            debug size_limits => _265;
                                                            let _276: std::time::SystemTime;
                                                            scope 60 {
                                                                debug now => _276;
                                                                let mut _277: std::vec::Vec<filter::time::TimeFilter>;
                                                                scope 61 {
                                                                    debug time_constraints => _277;
                                                                    let _318: std::option::Option<filter::owner::OwnerFilter>;
                                                                    scope 62 {
                                                                        debug t => _281;
                                                                        let _281: &str;
                                                                        let _290: std::string::String;
                                                                        let mut _490: &[&str; 2];
                                                                        scope 63 {
                                                                            debug f => _286;
                                                                            let _286: filter::time::TimeFilter;
                                                                        }
                                                                        scope 64 {
                                                                            debug res => _290;
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug t => _301;
                                                                        let _301: &str;
                                                                        let _310: std::string::String;
                                                                        let mut _489: &[&str; 2];
                                                                        scope 66 {
                                                                            debug f => _306;
                                                                            let _306: filter::time::TimeFilter;
                                                                        }
                                                                        scope 67 {
                                                                            debug res => _310;
                                                                        }
                                                                    }
                                                                    scope 68 {
                                                                        debug owner_constraint => _318;
                                                                        let _328: options::Options;
                                                                        let _376: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _377: std::option::Option<usize>;
                                                                        let _388: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _389: std::option::Option<usize>;
                                                                        let _404: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _405: std::option::Option<usize>;
                                                                        let _407: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _408: std::option::Option<usize>;
                                                                        let _417: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _418: std::option::Option<u64>;
                                                                        let _430: std::result::Result<std::convert::Infallible, regex::Error>;
                                                                        let _431: std::option::Option<regex::bytes::RegexSet>;
                                                                        let _457: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _458: std::option::Option<usize>;
                                                                        scope 74 {
                                                                            debug config => _328;
                                                                            let _467: regex::bytes::Regex;
                                                                            let _481: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                            let _482: regex::bytes::Regex;
                                                                            scope 103 {
                                                                                debug re => _467;
                                                                            }
                                                                            scope 104 {
                                                                                debug residual => _481;
                                                                                scope 105 {
                                                                                }
                                                                            }
                                                                            scope 106 {
                                                                                debug val => _482;
                                                                                scope 107 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 75 {
                                                                            debug residual => _376;
                                                                            scope 76 {
                                                                            }
                                                                        }
                                                                        scope 77 {
                                                                            debug val => _377;
                                                                            scope 78 {
                                                                            }
                                                                        }
                                                                        scope 79 {
                                                                            debug residual => _388;
                                                                            scope 80 {
                                                                            }
                                                                        }
                                                                        scope 81 {
                                                                            debug val => _389;
                                                                            scope 82 {
                                                                            }
                                                                        }
                                                                        scope 83 {
                                                                            debug residual => _404;
                                                                            scope 84 {
                                                                            }
                                                                        }
                                                                        scope 85 {
                                                                            debug val => _405;
                                                                            scope 86 {
                                                                            }
                                                                        }
                                                                        scope 87 {
                                                                            debug residual => _407;
                                                                            scope 88 {
                                                                            }
                                                                        }
                                                                        scope 89 {
                                                                            debug val => _408;
                                                                            scope 90 {
                                                                            }
                                                                        }
                                                                        scope 91 {
                                                                            debug residual => _417;
                                                                            scope 92 {
                                                                            }
                                                                        }
                                                                        scope 93 {
                                                                            debug val => _418;
                                                                            scope 94 {
                                                                            }
                                                                        }
                                                                        scope 95 {
                                                                            debug residual => _430;
                                                                            scope 96 {
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                            debug val => _431;
                                                                            scope 98 {
                                                                            }
                                                                        }
                                                                        scope 99 {
                                                                            debug residual => _457;
                                                                            scope 100 {
                                                                            }
                                                                        }
                                                                        scope 101 {
                                                                            debug val => _458;
                                                                            scope 102 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 69 {
                                                                        debug s => _322;
                                                                        let _322: &str;
                                                                        let _326: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                                        let _327: std::option::Option<filter::owner::OwnerFilter>;
                                                                        scope 70 {
                                                                            debug residual => _326;
                                                                            scope 71 {
                                                                            }
                                                                        }
                                                                        scope 72 {
                                                                            debug val => _327;
                                                                            scope 73 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 55 {
                                                            debug vs => _269;
                                                            let _269: clap::Values<'_>;
                                                            let _274: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                            let _275: std::vec::Vec<filter::size::SizeFilter>;
                                                            scope 56 {
                                                                debug residual => _274;
                                                                scope 57 {
                                                                }
                                                            }
                                                            scope 58 {
                                                                debug val => _275;
                                                                scope 59 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 39 {
                                                        debug args => _190;
                                                        let _190: clap::Values<'_>;
                                                    }
                                                    scope 40 {
                                                        debug args => _195;
                                                        let _195: clap::Values<'_>;
                                                        let _199: std::result::Result<std::convert::Infallible, anyhow::Error>;
                                                        let _200: exec::CommandTemplate;
                                                        scope 41 {
                                                            debug residual => _199;
                                                            scope 42 {
                                                            }
                                                        }
                                                        scope 43 {
                                                            debug val => _200;
                                                            scope 44 {
                                                            }
                                                        }
                                                    }
                                                    scope 45 {
                                                        debug color => _203;
                                                        let _207: std::string::String;
                                                        scope 46 {
                                                            debug color_arg => _207;
                                                            scope 47 {
                                                                debug gnu_ls => _211;
                                                                let _213: std::vec::Vec<&str>;
                                                                let _219: bool;
                                                                let _247: bool;
                                                                scope 49 {
                                                                    debug cmd => _213;
                                                                }
                                                                scope 50 {
                                                                    debug gnu_ls_exists => _219;
                                                                    let mut _232: std::vec::Vec<&str>;
                                                                    let mut _509: *const ();
                                                                    let mut _510: usize;
                                                                    let mut _511: usize;
                                                                    let mut _512: usize;
                                                                    let mut _513: usize;
                                                                    let mut _514: bool;
                                                                    scope 51 {
                                                                        debug cmd => _232;
                                                                    }
                                                                    scope 52 {
                                                                    }
                                                                }
                                                                scope 53 {
                                                                    debug gnu_ls_exists => _247;
                                                                }
                                                            }
                                                            scope 48 {
                                                                let _211: {closure@src/main.rs:193:22: 193:36};
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 27 {
                            debug glob => _143;
                        }
                        scope 28 {
                            debug residual => _152;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _153;
                            scope 31 {
                            }
                        }
                    }
                    scope 17 {
                        debug paths => _52;
                        let _52: clap::OsValues<'_>;
                        let mut _53: std::vec::Vec<std::path::PathBuf>;
                        scope 18 {
                            debug directories => _53;
                            let mut _55: clap::OsValues<'_>;
                            scope 19 {
                                debug iter => _55;
                                let _59: &std::ffi::OsStr;
                                scope 20 {
                                    debug path => _59;
                                    let _60: std::path::PathBuf;
                                    scope 21 {
                                        debug path_buffer => _60;
                                        let _69: std::string::String;
                                        let mut _493: &[&str; 2];
                                        scope 22 {
                                            debug res => _69;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 23 {
                    }
                }
            }
            scope 11 {
                debug residual => _42;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _43;
                scope 14 {
                }
            }
        }
    }

    bb0: {
        _504 = const false;
        _495 = const false;
        _500 = const false;
        _499 = const false;
        _498 = const false;
        _497 = const false;
        _496 = const false;
        _503 = const false;
        _502 = const false;
        _501 = const false;
        _504 = const true;
        _2 = build_app() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = args_os() -> [return: bb2, unwind: bb438];
    }

    bb2: {
        _504 = const false;
        _1 = App::<'_, '_>::get_matches_from::<ArgsOs, OsString>(move _2, move _3) -> [return: bb3, unwind: bb438];
    }

    bb3: {
        _504 = const false;
        _5 = &_1;
        _4 = ArgMatches::<'_>::value_of_os::<&str>(move _5, const "base-directory") -> [return: bb4, unwind: bb408];
    }

    bb4: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb5, otherwise: bb21];
    }

    bb5: {
        _7 = ((_4 as Some).0: &std::ffi::OsStr);
        _8 = Path::new::<OsStr>(_7) -> [return: bb6, unwind: bb408];
    }

    bb6: {
        _10 = _8;
        _9 = is_dir(move _10) -> [return: bb7, unwind: bb408];
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = _8;
        _25 = set_current_dir::<&Path>(move _26) -> [return: bb16, unwind: bb408];
    }

    bb9: {
        _494 = const _;
        _15 = _494 as &[&str] (PointerCoercion(Unsize));
        _22 = _8;
        _21 = Path::to_string_lossy(move _22) -> [return: bb10, unwind: bb408];
    }

    bb10: {
        _20 = &_21;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_20) -> [return: bb11, unwind: bb407];
    }

    bb11: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb12, unwind: bb407];
    }

    bb12: {
        _13 = format(move _14) -> [return: bb13, unwind: bb407];
    }

    bb13: {
        drop(_21) -> [return: bb14, unwind: bb406];
    }

    bb14: {
        _12 = move _13;
        _11 = new_adhoc::<String>(move _12) -> [return: bb15, unwind: bb408];
    }

    bb15: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _11);
        goto -> bb372;
    }

    bb16: {
        _28 = &_8;
        _27 = {closure@src/main.rs:64:59: 64:61} { base_directory: move _28 };
        _24 = <Result<(), std::io::Error> as anyhow::Context<(), std::io::Error>>::with_context::<String, {closure@src/main.rs:64:59: 64:61}>(move _25, move _27) -> [return: bb17, unwind: bb408];
    }

    bb17: {
        _23 = <Result<(), anyhow::Error> as Try>::branch(move _24) -> [return: bb18, unwind: bb408];
    }

    bb18: {
        _29 = discriminant(_23);
        switchInt(move _29) -> [0: bb21, 1: bb20, otherwise: bb19];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        _30 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _30) -> [return: bb441, unwind: bb408];
    }

    bb21: {
        _32 = const ".";
        _31 = Path::new::<str>(_32) -> [return: bb22, unwind: bb408];
    }

    bb22: {
        _33 = is_dir(_31) -> [return: bb23, unwind: bb408];
    }

    bb23: {
        switchInt(move _33) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _40 = &_1;
        _39 = ArgMatches::<'_>::value_of_os::<&str>(move _40, const "pattern") -> [return: bb27, unwind: bb408];
    }

    bb25: {
        _34 = new_adhoc::<&str>(const "Could not retrieve current directory (has it been deleted?).") -> [return: bb26, unwind: bb408];
    }

    bb26: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _34);
        goto -> bb372;
    }

    bb27: {
        _38 = Option::<&OsStr>::map::<Result<&str, anyhow::Error>, {closure@src/main.rs:82:14: 82:17}>(move _39, const ZeroSized: {closure@src/main.rs:82:14: 82:17}) -> [return: bb28, unwind: bb408];
    }

    bb28: {
        _37 = Option::<Result<&str, anyhow::Error>>::transpose(move _38) -> [return: bb29, unwind: bb408];
    }

    bb29: {
        _36 = <Result<Option<&str>, anyhow::Error> as Try>::branch(move _37) -> [return: bb30, unwind: bb408];
    }

    bb30: {
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb31, 1: bb32, otherwise: bb19];
    }

    bb31: {
        _43 = ((_36 as Continue).0: std::option::Option<&str>);
        _44 = const "";
        _35 = Option::<&str>::unwrap_or(_43, _44) -> [return: bb33, unwind: bb408];
    }

    bb32: {
        _42 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _42) -> [return: bb442, unwind: bb408];
    }

    bb33: {
        _47 = &_1;
        _46 = ArgMatches::<'_>::values_of_os::<&str>(move _47, const "path") -> [return: bb34, unwind: bb408];
    }

    bb34: {
        _49 = &_1;
        _48 = {closure@src/main.rs:92:18: 92:20} { matches: move _49 };
        _45 = Option::<OsValues<'_>>::or_else::<{closure@src/main.rs:92:18: 92:20}>(move _46, move _48) -> [return: bb35, unwind: bb408];
    }

    bb35: {
        _51 = discriminant(_45);
        switchInt(move _51) -> [1: bb36, otherwise: bb56];
    }

    bb36: {
        _52 = move ((_45 as Some).0: clap::OsValues<'_>);
        _53 = Vec::<PathBuf>::new() -> [return: bb37, unwind: bb408];
    }

    bb37: {
        _54 = <OsValues<'_> as IntoIterator>::into_iter(move _52) -> [return: bb38, unwind: bb405];
    }

    bb38: {
        _55 = move _54;
        goto -> bb39;
    }

    bb39: {
        _57 = &mut _55;
        _56 = <OsValues<'_> as Iterator>::next(_57) -> [return: bb40, unwind: bb405];
    }

    bb40: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb42, 1: bb41, otherwise: bb19];
    }

    bb41: {
        _59 = ((_56 as Some).0: &std::ffi::OsStr);
        _60 = <PathBuf as From<&OsStr>>::from(_59) -> [return: bb43, unwind: bb405];
    }

    bb42: {
        _50 = move _53;
        goto -> bb59;
    }

    bb43: {
        _495 = const true;
        _63 = &_60;
        _62 = <PathBuf as Deref>::deref(_63) -> [return: bb44, unwind: bb436];
    }

    bb44: {
        _61 = is_dir(_62) -> [return: bb45, unwind: bb436];
    }

    bb45: {
        switchInt(move _61) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _65 = &mut _53;
        _495 = const false;
        _66 = move _60;
        _64 = Vec::<PathBuf>::push(move _65, move _66) -> [return: bb443, unwind: bb436];
    }

    bb47: {
        _493 = const _;
        _71 = _493 as &[&str] (PointerCoercion(Unsize));
        _79 = &_60;
        _78 = <PathBuf as Deref>::deref(move _79) -> [return: bb48, unwind: bb436];
    }

    bb48: {
        _77 = Path::to_string_lossy(_78) -> [return: bb49, unwind: bb436];
    }

    bb49: {
        _76 = &_77;
        _75 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_76) -> [return: bb50, unwind: bb404];
    }

    bb50: {
        _74 = [move _75];
        _73 = &_74;
        _72 = _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _70 = Arguments::<'_>::new_v1(move _71, move _72) -> [return: bb51, unwind: bb404];
    }

    bb51: {
        _69 = format(move _70) -> [return: bb52, unwind: bb404];
    }

    bb52: {
        drop(_77) -> [return: bb53, unwind: bb403];
    }

    bb53: {
        _68 = move _69;
        _67 = print_error::<String>(move _68) -> [return: bb444, unwind: bb436];
    }

    bb54: {
        switchInt(_495) -> [0: bb55, otherwise: bb411];
    }

    bb55: {
        _495 = const false;
        goto -> bb39;
    }

    bb56: {
        _82 = SizeOf([std::path::PathBuf; 1]);
        _83 = AlignOf([std::path::PathBuf; 1]);
        _84 = alloc::alloc::exchange_malloc(move _82, move _83) -> [return: bb57, unwind: bb408];
    }

    bb57: {
        _85 = ShallowInitBox(move _84, [std::path::PathBuf; 1]);
        _86 = Path::to_path_buf(_31) -> [return: bb58, unwind: bb434];
    }

    bb58: {
        _507 = (((_85.0: std::ptr::Unique<[std::path::PathBuf; 1]>).0: std::ptr::NonNull<[std::path::PathBuf; 1]>).0: *const [std::path::PathBuf; 1]);
        _515 = _507 as *const () (PtrToPtr);
        _516 = _515 as usize (Transmute);
        _517 = AlignOf([std::path::PathBuf; 1]);
        _518 = Sub(_517, const 1_usize);
        _519 = BitAnd(_516, _518);
        _520 = Eq(_519, const 0_usize);
        assert(_520, "misaligned pointer dereference: address must be a multiple of {} but is {}", _517, _516) -> [success: bb440, unwind unreachable];
    }

    bb59: {
        _88 = &_50;
        _87 = Vec::<PathBuf>::is_empty(move _88) -> [return: bb60, unwind: bb402];
    }

    bb60: {
        switchInt(move _87) -> [0: bb63, otherwise: bb61];
    }

    bb61: {
        _89 = new_adhoc::<&str>(const "No valid search paths given.") -> [return: bb62, unwind: bb402];
    }

    bb62: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _89);
        goto -> bb371;
    }

    bb63: {
        _91 = &_1;
        _90 = ArgMatches::<'_>::is_present::<&str>(move _91, const "absolute-path") -> [return: bb64, unwind: bb402];
    }

    bb64: {
        switchInt(move _90) -> [0: bb72, otherwise: bb65];
    }

    bb65: {
        _96 = &_50;
        _95 = <Vec<PathBuf> as Deref>::deref(move _96) -> [return: bb66, unwind: bb402];
    }

    bb66: {
        _94 = core::slice::<impl [PathBuf]>::iter(_95) -> [return: bb67, unwind: bb402];
    }

    bb67: {
        _93 = <std::slice::Iter<'_, PathBuf> as Iterator>::map::<PathBuf, {closure@src/main.rs:121:18: 121:31}>(move _94, const ZeroSized: {closure@src/main.rs:121:18: 121:31}) -> [return: bb68, unwind: bb402];
    }

    bb68: {
        _92 = <Map<std::slice::Iter<'_, PathBuf>, {closure@src/main.rs:121:18: 121:31}> as Iterator>::collect::<Vec<PathBuf>>(move _93) -> [return: bb69, unwind: bb402];
    }

    bb69: {
        drop(_50) -> [return: bb70, unwind: bb71];
    }

    bb70: {
        _50 = move _92;
        goto -> bb72;
    }

    bb71 (cleanup): {
        _50 = move _92;
        goto -> bb402;
    }

    bb72: {
        _98 = &_1;
        _97 = ArgMatches::<'_>::is_present::<&str>(move _98, const "full-path") -> [return: bb73, unwind: bb402];
    }

    bb73: {
        switchInt(move _97) -> [0: bb74, otherwise: bb91];
    }

    bb74: {
        _100 = _35;
        _99 = core::str::<impl str>::contains::<'_, char>(move _100, const _) -> [return: bb75, unwind: bb402];
    }

    bb75: {
        switchInt(move _99) -> [0: bb91, otherwise: bb76];
    }

    bb76: {
        _103 = _35;
        _102 = Path::new::<str>(move _103) -> [return: bb77, unwind: bb402];
    }

    bb77: {
        _101 = is_dir(_102) -> [return: bb78, unwind: bb402];
    }

    bb78: {
        switchInt(move _101) -> [0: bb91, otherwise: bb79];
    }

    bb79: {
        _492 = const _;
        _107 = _492 as &[&str] (PointerCoercion(Unsize));
        _112 = &_35;
        _111 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_112) -> [return: bb80, unwind: bb402];
    }

    bb80: {
        _491 = const _;
        _113 = core::fmt::rt::Argument::<'_>::new_display::<char>(_491) -> [return: bb81, unwind: bb402];
    }

    bb81: {
        _110 = [move _111, move _113];
        _109 = &_110;
        _108 = _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _118 = core::fmt::rt::Alignment::Unknown;
        _119 = core::fmt::rt::Count::Implied;
        _120 = core::fmt::rt::Count::Implied;
        _117 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _118, const 0_u32, move _119, move _120) -> [return: bb82, unwind: bb402];
    }

    bb82: {
        _122 = core::fmt::rt::Alignment::Unknown;
        _123 = core::fmt::rt::Count::Implied;
        _124 = core::fmt::rt::Count::Implied;
        _121 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _122, const 0_u32, move _123, move _124) -> [return: bb83, unwind: bb402];
    }

    bb83: {
        _126 = core::fmt::rt::Alignment::Unknown;
        _127 = core::fmt::rt::Count::Implied;
        _128 = core::fmt::rt::Count::Implied;
        _125 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _126, const 0_u32, move _127, move _128) -> [return: bb84, unwind: bb402];
    }

    bb84: {
        _130 = core::fmt::rt::Alignment::Unknown;
        _131 = core::fmt::rt::Count::Implied;
        _132 = core::fmt::rt::Count::Implied;
        _129 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _130, const 0_u32, move _131, move _132) -> [return: bb85, unwind: bb402];
    }

    bb85: {
        _134 = core::fmt::rt::Alignment::Unknown;
        _135 = core::fmt::rt::Count::Implied;
        _136 = core::fmt::rt::Count::Implied;
        _133 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _134, const 0_u32, move _135, move _136) -> [return: bb86, unwind: bb402];
    }

    bb86: {
        _116 = [move _117, move _121, move _125, move _129, move _133];
        _115 = &_116;
        _114 = _115 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _137 = core::fmt::rt::UnsafeArg::new() -> [return: bb87, unwind: bb402];
    }

    bb87: {
        _106 = Arguments::<'_>::new_v1_formatted(move _107, move _108, move _114, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb88, unwind: bb402];
    }

    bb88: {
        _105 = format(move _106) -> [return: bb89, unwind: bb402];
    }

    bb89: {
        _104 = new_adhoc::<String>(move _105) -> [return: bb90, unwind: bb402];
    }

    bb90: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _104);
        goto -> bb371;
    }

    bb91: {
        _140 = &_1;
        _139 = ArgMatches::<'_>::is_present::<&str>(move _140, const "glob") -> [return: bb92, unwind: bb402];
    }

    bb92: {
        switchInt(move _139) -> [0: bb104, otherwise: bb93];
    }

    bb93: {
        _142 = _35;
        _141 = core::str::<impl str>::is_empty(move _142) -> [return: bb94, unwind: bb402];
    }

    bb94: {
        switchInt(move _141) -> [0: bb95, otherwise: bb104];
    }

    bb95: {
        _150 = _35;
        _149 = GlobBuilder::<'_>::new(move _150) -> [return: bb96, unwind: bb402];
    }

    bb96: {
        _148 = &mut _149;
        _147 = GlobBuilder::<'_>::literal_separator(move _148, const true) -> [return: bb97, unwind: bb402];
    }

    bb97: {
        _146 = &(*_147);
        _145 = GlobBuilder::<'_>::build(move _146) -> [return: bb98, unwind: bb402];
    }

    bb98: {
        _144 = <Result<globset::Glob, globset::Error> as Try>::branch(move _145) -> [return: bb99, unwind: bb402];
    }

    bb99: {
        _151 = discriminant(_144);
        switchInt(move _151) -> [0: bb100, 1: bb101, otherwise: bb19];
    }

    bb100: {
        _153 = move ((_144 as Continue).0: globset::Glob);
        _143 = move _153;
        _155 = &_143;
        _154 = globset::Glob::regex(move _155) -> [return: bb102, unwind: bb401];
    }

    bb101: {
        _152 = move ((_144 as Break).0: std::result::Result<std::convert::Infallible, globset::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, globset::Error>>>::from_residual(move _152) -> [return: bb445, unwind: bb402];
    }

    bb102: {
        _138 = <str as ToOwned>::to_owned(_154) -> [return: bb103, unwind: bb401];
    }

    bb103: {
        drop(_143) -> [return: bb108, unwind: bb402];
    }

    bb104: {
        _157 = &_1;
        _156 = ArgMatches::<'_>::is_present::<&str>(move _157, const "fixed-strings") -> [return: bb105, unwind: bb402];
    }

    bb105: {
        switchInt(move _156) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _158 = _35;
        _138 = regex::escape(move _158) -> [return: bb446, unwind: bb402];
    }

    bb107: {
        _159 = _35;
        _138 = <String as From<&str>>::from(move _159) -> [return: bb447, unwind: bb402];
    }

    bb108: {
        _162 = &_1;
        _161 = ArgMatches::<'_>::is_present::<&str>(move _162, const "ignore-case") -> [return: bb109, unwind: bb400];
    }

    bb109: {
        switchInt(move _161) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _160 = const false;
        goto -> bb116;
    }

    bb111: {
        _164 = &_1;
        _163 = ArgMatches::<'_>::is_present::<&str>(move _164, const "case-sensitive") -> [return: bb112, unwind: bb400];
    }

    bb112: {
        switchInt(move _163) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _160 = const true;
        goto -> bb116;
    }

    bb114: {
        _166 = &_138;
        _165 = <String as Deref>::deref(_166) -> [return: bb115, unwind: bb400];
    }

    bb115: {
        _160 = pattern_has_uppercase_char(_165) -> [return: bb448, unwind: bb400];
    }

    bb116: {
        _167 = const true;
        _169 = atty::Stream::Stdout;
        _168 = is(move _169) -> [return: bb117, unwind: bb400];
    }

    bb117: {
        _172 = &_1;
        _171 = ArgMatches::<'_>::value_of::<&str>(move _172, const "color") -> [return: bb118, unwind: bb400];
    }

    bb118: {
        _175 = discriminant(_171);
        switchInt(move _175) -> [1: bb120, otherwise: bb119];
    }

    bb119: {
        switchInt(_167) -> [0: bb132, otherwise: bb126];
    }

    bb120: {
        _174 = <str as PartialEq>::eq(((_171 as Some).0: &str), const "always") -> [return: bb125, unwind: bb400];
    }

    bb121: {
        _170 = const true;
        goto -> bb133;
    }

    bb122: {
        _173 = <str as PartialEq>::eq(((_171 as Some).0: &str), const "never") -> [return: bb124, unwind: bb400];
    }

    bb123: {
        _170 = const false;
        goto -> bb133;
    }

    bb124: {
        switchInt(move _173) -> [0: bb119, otherwise: bb123];
    }

    bb125: {
        switchInt(move _174) -> [0: bb122, otherwise: bb121];
    }

    bb126: {
        _178 = var_os::<&str>(const "NO_COLOR") -> [return: bb127, unwind: bb400];
    }

    bb127: {
        _177 = &_178;
        _176 = Option::<OsString>::is_none(move _177) -> [return: bb128, unwind: bb399];
    }

    bb128: {
        switchInt(move _176) -> [0: bb131, otherwise: bb129];
    }

    bb129: {
        drop(_178) -> [return: bb130, unwind: bb400];
    }

    bb130: {
        _170 = _168;
        goto -> bb133;
    }

    bb131: {
        drop(_178) -> [return: bb132, unwind: bb400];
    }

    bb132: {
        _170 = const false;
        goto -> bb133;
    }

    bb133: {
        _181 = &_1;
        _180 = ArgMatches::<'_>::value_of::<&str>(move _181, const "path-separator") -> [return: bb134, unwind: bb400];
    }

    bb134: {
        _179 = Option::<&str>::map::<String, {closure@src/main.rs:176:65: 176:70}>(move _180, const ZeroSized: {closure@src/main.rs:176:65: 176:70}) -> [return: bb135, unwind: bb400];
    }

    bb135: {
        _500 = const true;
        _183 = _170;
        switchInt(move _183) -> [0: bb139, otherwise: bb136];
    }

    bb136: {
        _185 = LsColors::from_env() -> [return: bb137, unwind: bb433];
    }

    bb137: {
        _184 = Option::<LsColors>::unwrap_or_else::<{closure@src/main.rs:179:50: 179:52}>(move _185, const ZeroSized: {closure@src/main.rs:179:50: 179:52}) -> [return: bb138, unwind: bb433];
    }

    bb138: {
        _499 = const true;
        _182 = Option::<LsColors>::Some(move _184);
        goto -> bb140;
    }

    bb139: {
        _499 = const true;
        _182 = Option::<LsColors>::None;
        goto -> bb140;
    }

    bb140: {
        _188 = &_1;
        _187 = ArgMatches::<'_>::values_of::<&str>(move _188, const "exec") -> [return: bb141, unwind: bb431];
    }

    bb141: {
        _189 = discriminant(_187);
        switchInt(move _189) -> [1: bb142, otherwise: bb144];
    }

    bb142: {
        _190 = move ((_187 as Some).0: clap::Values<'_>);
        _191 = CommandTemplate::new::<clap::Values<'_>, &str>(move _190) -> [return: bb143, unwind: bb431];
    }

    bb143: {
        _498 = const true;
        _186 = Option::<CommandTemplate>::Some(move _191);
        goto -> bb199;
    }

    bb144: {
        _193 = &_1;
        _192 = ArgMatches::<'_>::values_of::<&str>(move _193, const "exec-batch") -> [return: bb145, unwind: bb431];
    }

    bb145: {
        _194 = discriminant(_192);
        switchInt(move _194) -> [1: bb146, otherwise: bb151];
    }

    bb146: {
        _195 = move ((_192 as Some).0: clap::Values<'_>);
        _197 = CommandTemplate::new_batch::<clap::Values<'_>, &str>(move _195) -> [return: bb147, unwind: bb431];
    }

    bb147: {
        _196 = <Result<CommandTemplate, anyhow::Error> as Try>::branch(move _197) -> [return: bb148, unwind: bb431];
    }

    bb148: {
        _198 = discriminant(_196);
        switchInt(move _198) -> [0: bb149, 1: bb150, otherwise: bb19];
    }

    bb149: {
        _200 = move ((_196 as Continue).0: exec::CommandTemplate);
        _498 = const true;
        _186 = Option::<CommandTemplate>::Some(move _200);
        goto -> bb199;
    }

    bb150: {
        _199 = move ((_196 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _199) -> [return: bb449, unwind: bb431];
    }

    bb151: {
        _202 = &_1;
        _201 = ArgMatches::<'_>::is_present::<&str>(move _202, const "list-details") -> [return: bb152, unwind: bb431];
    }

    bb152: {
        switchInt(move _201) -> [0: bb198, otherwise: bb153];
    }

    bb153: {
        _205 = &_1;
        _204 = ArgMatches::<'_>::value_of::<&str>(move _205, const "color") -> [return: bb154, unwind: bb431];
    }

    bb154: {
        _206 = const "auto";
        _203 = Option::<&str>::unwrap_or(move _204, _206) -> [return: bb155, unwind: bb431];
    }

    bb155: {
        _210 = [const "--color=", _203];
        _209 = &_210;
        _208 = move _209 as &[&str] (PointerCoercion(Unsize));
        _207 = slice::<impl [&str]>::concat::<str>(move _208) -> [return: bb156, unwind: bb431];
    }

    bb156: {
        _212 = &_207;
        _211 = {closure@src/main.rs:193:22: 193:36} { color_arg: move _212 };
        _214 = const true;
        switchInt(move _214) -> [0: bb177, otherwise: bb157];
    }

    bb157: {
        _215 = const false;
        switchInt(move _215) -> [0: bb158, otherwise: bb159];
    }

    bb158: {
        _216 = &_211;
        _218 = const "ls";
        _217 = (_218,);
        _213 = <{closure@src/main.rs:193:22: 193:36} as Fn<(&str,)>>::call(move _216, move _217) -> [return: bb450, unwind: bb398];
    }

    bb159: {
        _226 = Command::new::<&str>(const "gls") -> [return: bb160, unwind: bb398];
    }

    bb160: {
        _225 = &mut _226;
        _224 = Command::arg::<&str>(move _225, const "--version") -> [return: bb161, unwind: bb397];
    }

    bb161: {
        _227 = Stdio::null() -> [return: bb162, unwind: bb397];
    }

    bb162: {
        _223 = Command::stdout::<Stdio>(_224, move _227) -> [return: bb163, unwind: bb397];
    }

    bb163: {
        _228 = Stdio::null() -> [return: bb164, unwind: bb397];
    }

    bb164: {
        _222 = Command::stderr::<Stdio>(_223, move _228) -> [return: bb165, unwind: bb397];
    }

    bb165: {
        _221 = Command::status(_222) -> [return: bb166, unwind: bb397];
    }

    bb166: {
        _220 = &_221;
        _219 = Result::<ExitStatus, std::io::Error>::is_ok(move _220) -> [return: bb167, unwind: bb396];
    }

    bb167: {
        drop(_221) -> [return: bb168, unwind: bb397];
    }

    bb168: {
        drop(_226) -> [return: bb169, unwind: bb398];
    }

    bb169: {
        switchInt(_219) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _229 = &_211;
        _231 = const "gls";
        _230 = (_231,);
        _213 = <{closure@src/main.rs:193:22: 193:36} as Fn<(&str,)>>::call(move _229, move _230) -> [return: bb451, unwind: bb398];
    }

    bb171: {
        _234 = SizeOf([&str; 4]);
        _235 = AlignOf([&str; 4]);
        _236 = alloc::alloc::exchange_malloc(move _234, move _235) -> [return: bb172, unwind: bb398];
    }

    bb172: {
        _237 = ShallowInitBox(move _236, [&str; 4]);
        _238 = const "-l";
        _239 = const "-h";
        _240 = const "-d";
        _508 = (((_237.0: std::ptr::Unique<[&str; 4]>).0: std::ptr::NonNull<[&str; 4]>).0: *const [&str; 4]);
        _509 = _508 as *const () (PtrToPtr);
        _510 = _509 as usize (Transmute);
        _511 = AlignOf([&str; 4]);
        _512 = Sub(_511, const 1_usize);
        _513 = BitAnd(_510, _512);
        _514 = Eq(_513, const 0_usize);
        assert(_514, "misaligned pointer dereference: address must be a multiple of {} but is {}", _511, _510) -> [success: bb439, unwind unreachable];
    }

    bb173: {
        _241 = const false;
        switchInt(move _241) -> [0: bb174, otherwise: bb176];
    }

    bb174: {
        _242 = _170;
        switchInt(move _242) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        _244 = &mut _232;
        _245 = const "-G";
        _243 = Vec::<&str>::push(move _244, _245) -> [return: bb452, unwind: bb395];
    }

    bb176: {
        _213 = move _232;
        goto -> bb194;
    }

    bb177: {
        _246 = const false;
        switchInt(move _246) -> [0: bb192, otherwise: bb178];
    }

    bb178: {
        _254 = Command::new::<&str>(const "ls") -> [return: bb179, unwind: bb398];
    }

    bb179: {
        _253 = &mut _254;
        _252 = Command::arg::<&str>(move _253, const "--version") -> [return: bb180, unwind: bb394];
    }

    bb180: {
        _255 = Stdio::null() -> [return: bb181, unwind: bb394];
    }

    bb181: {
        _251 = Command::stdout::<Stdio>(_252, move _255) -> [return: bb182, unwind: bb394];
    }

    bb182: {
        _256 = Stdio::null() -> [return: bb183, unwind: bb394];
    }

    bb183: {
        _250 = Command::stderr::<Stdio>(_251, move _256) -> [return: bb184, unwind: bb394];
    }

    bb184: {
        _249 = Command::status(_250) -> [return: bb185, unwind: bb394];
    }

    bb185: {
        _248 = &_249;
        _247 = Result::<ExitStatus, std::io::Error>::is_ok(move _248) -> [return: bb186, unwind: bb393];
    }

    bb186: {
        drop(_249) -> [return: bb187, unwind: bb394];
    }

    bb187: {
        drop(_254) -> [return: bb188, unwind: bb398];
    }

    bb188: {
        switchInt(_247) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _257 = &_211;
        _259 = const "ls";
        _258 = (_259,);
        _213 = <{closure@src/main.rs:193:22: 193:36} as Fn<(&str,)>>::call(move _257, move _258) -> [return: bb453, unwind: bb398];
    }

    bb190: {
        _260 = new_adhoc::<&str>(const "'fd --list-details' is not supported on Windows unless GNU 'ls' is installed.") -> [return: bb191, unwind: bb398];
    }

    bb191: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _260);
        goto -> bb367;
    }

    bb192: {
        _261 = new_adhoc::<&str>(const "'fd --list-details' is not supported on this platform.") -> [return: bb193, unwind: bb398];
    }

    bb193: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _261);
        goto -> bb367;
    }

    bb194: {
        _264 = &_213;
        _263 = CommandTemplate::new_batch::<&Vec<&str>, &&str>(move _264) -> [return: bb195, unwind: bb392];
    }

    bb195: {
        _262 = Result::<CommandTemplate, anyhow::Error>::unwrap(move _263) -> [return: bb196, unwind: bb392];
    }

    bb196: {
        _498 = const true;
        _186 = Option::<CommandTemplate>::Some(move _262);
        drop(_213) -> [return: bb197, unwind: bb398];
    }

    bb197: {
        drop(_207) -> [return: bb199, unwind: bb431];
    }

    bb198: {
        _498 = const true;
        _186 = Option::<CommandTemplate>::None;
        goto -> bb199;
    }

    bb199: {
        _267 = &_1;
        _266 = ArgMatches::<'_>::values_of::<&str>(move _267, const "size") -> [return: bb200, unwind: bb429];
    }

    bb200: {
        _268 = discriminant(_266);
        switchInt(move _268) -> [1: bb201, otherwise: bb207];
    }

    bb201: {
        _269 = move ((_266 as Some).0: clap::Values<'_>);
        _272 = <clap::Values<'_> as Iterator>::map::<Result<SizeFilter, anyhow::Error>, {closure@src/main.rs:273:16: 273:20}>(move _269, const ZeroSized: {closure@src/main.rs:273:16: 273:20}) -> [return: bb202, unwind: bb429];
    }

    bb202: {
        _271 = <Map<clap::Values<'_>, {closure@src/main.rs:273:16: 273:20}> as Iterator>::collect::<Result<Vec<SizeFilter>, anyhow::Error>>(move _272) -> [return: bb203, unwind: bb429];
    }

    bb203: {
        _270 = <Result<Vec<SizeFilter>, anyhow::Error> as Try>::branch(move _271) -> [return: bb204, unwind: bb429];
    }

    bb204: {
        _273 = discriminant(_270);
        switchInt(move _273) -> [0: bb205, 1: bb206, otherwise: bb19];
    }

    bb205: {
        _275 = move ((_270 as Continue).0: std::vec::Vec<filter::size::SizeFilter>);
        _497 = const true;
        _265 = move _275;
        goto -> bb208;
    }

    bb206: {
        _274 = move ((_270 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _274) -> [return: bb454, unwind: bb429];
    }

    bb207: {
        _265 = Vec::<SizeFilter>::new() -> [return: bb410, unwind: bb429];
    }

    bb208: {
        _276 = SystemTime::now() -> [return: bb209, unwind: bb427];
    }

    bb209: {
        _277 = Vec::<TimeFilter>::new() -> [return: bb210, unwind: bb427];
    }

    bb210: {
        _496 = const true;
        _279 = &_1;
        _278 = ArgMatches::<'_>::value_of::<&str>(move _279, const "changed-within") -> [return: bb211, unwind: bb425];
    }

    bb211: {
        _280 = discriminant(_278);
        switchInt(move _280) -> [1: bb212, otherwise: bb220];
    }

    bb212: {
        _281 = ((_278 as Some).0: &str);
        _283 = &_276;
        _284 = _281;
        _282 = TimeFilter::after(_283, move _284) -> [return: bb213, unwind: bb425];
    }

    bb213: {
        _285 = discriminant(_282);
        switchInt(move _285) -> [1: bb214, otherwise: bb215];
    }

    bb214: {
        _286 = move ((_282 as Some).0: filter::time::TimeFilter);
        _288 = &mut _277;
        _287 = Vec::<TimeFilter>::push(move _288, move _286) -> [return: bb455, unwind: bb425];
    }

    bb215: {
        _490 = const _;
        _292 = _490 as &[&str] (PointerCoercion(Unsize));
        _297 = &_281;
        _296 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_297) -> [return: bb216, unwind: bb425];
    }

    bb216: {
        _295 = [move _296];
        _294 = &_295;
        _293 = _294 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _291 = Arguments::<'_>::new_v1(move _292, move _293) -> [return: bb217, unwind: bb425];
    }

    bb217: {
        _290 = format(move _291) -> [return: bb218, unwind: bb425];
    }

    bb218: {
        _289 = new_adhoc::<String>(move _290) -> [return: bb219, unwind: bb425];
    }

    bb219: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _289);
        goto -> bb413;
    }

    bb220: {
        _299 = &_1;
        _298 = ArgMatches::<'_>::value_of::<&str>(move _299, const "changed-before") -> [return: bb221, unwind: bb425];
    }

    bb221: {
        _300 = discriminant(_298);
        switchInt(move _300) -> [1: bb222, otherwise: bb230];
    }

    bb222: {
        _301 = ((_298 as Some).0: &str);
        _303 = &_276;
        _304 = _301;
        _302 = TimeFilter::before(_303, move _304) -> [return: bb223, unwind: bb425];
    }

    bb223: {
        _305 = discriminant(_302);
        switchInt(move _305) -> [1: bb224, otherwise: bb225];
    }

    bb224: {
        _306 = move ((_302 as Some).0: filter::time::TimeFilter);
        _308 = &mut _277;
        _307 = Vec::<TimeFilter>::push(move _308, move _306) -> [return: bb456, unwind: bb425];
    }

    bb225: {
        _489 = const _;
        _312 = _489 as &[&str] (PointerCoercion(Unsize));
        _317 = &_301;
        _316 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_317) -> [return: bb226, unwind: bb425];
    }

    bb226: {
        _315 = [move _316];
        _314 = &_315;
        _313 = _314 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _311 = Arguments::<'_>::new_v1(move _312, move _313) -> [return: bb227, unwind: bb425];
    }

    bb227: {
        _310 = format(move _311) -> [return: bb228, unwind: bb425];
    }

    bb228: {
        _309 = new_adhoc::<String>(move _310) -> [return: bb229, unwind: bb425];
    }

    bb229: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _309);
        goto -> bb413;
    }

    bb230: {
        _320 = &_1;
        _319 = ArgMatches::<'_>::value_of::<&str>(move _320, const "owner") -> [return: bb231, unwind: bb425];
    }

    bb231: {
        _321 = discriminant(_319);
        switchInt(move _321) -> [1: bb232, otherwise: bb237];
    }

    bb232: {
        _322 = ((_319 as Some).0: &str);
        _324 = OwnerFilter::from_string(_322) -> [return: bb233, unwind: bb425];
    }

    bb233: {
        _323 = <Result<Option<OwnerFilter>, anyhow::Error> as Try>::branch(move _324) -> [return: bb234, unwind: bb425];
    }

    bb234: {
        _325 = discriminant(_323);
        switchInt(move _325) -> [0: bb235, 1: bb236, otherwise: bb19];
    }

    bb235: {
        _327 = ((_323 as Continue).0: std::option::Option<filter::owner::OwnerFilter>);
        _318 = _327;
        goto -> bb238;
    }

    bb236: {
        _326 = move ((_323 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _326) -> [return: bb457, unwind: bb425];
    }

    bb237: {
        _318 = Option::<OwnerFilter>::None;
        goto -> bb238;
    }

    bb238: {
        _329 = _160;
        _331 = &_1;
        _330 = ArgMatches::<'_>::is_present::<&str>(move _331, const "full-path") -> [return: bb239, unwind: bb425];
    }

    bb239: {
        _335 = &_1;
        _334 = ArgMatches::<'_>::is_present::<&str>(move _335, const "hidden") -> [return: bb240, unwind: bb425];
    }

    bb240: {
        switchInt(move _334) -> [0: bb242, otherwise: bb241];
    }

    bb241: {
        _333 = const true;
        goto -> bb244;
    }

    bb242: {
        _337 = &_1;
        _336 = ArgMatches::<'_>::occurrences_of::<&str>(move _337, const "rg-alias-hidden-ignore") -> [return: bb243, unwind: bb425];
    }

    bb243: {
        _333 = Ge(move _336, const 2_u64);
        goto -> bb244;
    }

    bb244: {
        _332 = Not(move _333);
        _341 = &_1;
        _340 = ArgMatches::<'_>::is_present::<&str>(move _341, const "no-ignore") -> [return: bb245, unwind: bb425];
    }

    bb245: {
        switchInt(move _340) -> [0: bb247, otherwise: bb246];
    }

    bb246: {
        _339 = const true;
        goto -> bb248;
    }

    bb247: {
        _342 = &_1;
        _339 = ArgMatches::<'_>::is_present::<&str>(move _342, const "rg-alias-hidden-ignore") -> [return: bb458, unwind: bb425];
    }

    bb248: {
        _338 = Not(move _339);
        _346 = &_1;
        _345 = ArgMatches::<'_>::is_present::<&str>(move _346, const "no-ignore") -> [return: bb249, unwind: bb425];
    }

    bb249: {
        switchInt(move _345) -> [0: bb250, otherwise: bb252];
    }

    bb250: {
        _348 = &_1;
        _347 = ArgMatches::<'_>::is_present::<&str>(move _348, const "rg-alias-hidden-ignore") -> [return: bb251, unwind: bb425];
    }

    bb251: {
        switchInt(move _347) -> [0: bb253, otherwise: bb252];
    }

    bb252: {
        _344 = const true;
        goto -> bb254;
    }

    bb253: {
        _349 = &_1;
        _344 = ArgMatches::<'_>::is_present::<&str>(move _349, const "no-ignore-vcs") -> [return: bb459, unwind: bb425];
    }

    bb254: {
        _343 = Not(move _344);
        _353 = &_1;
        _352 = ArgMatches::<'_>::is_present::<&str>(move _353, const "no-ignore") -> [return: bb255, unwind: bb425];
    }

    bb255: {
        switchInt(move _352) -> [0: bb256, otherwise: bb258];
    }

    bb256: {
        _355 = &_1;
        _354 = ArgMatches::<'_>::is_present::<&str>(move _355, const "rg-alias-hidden-ignore") -> [return: bb257, unwind: bb425];
    }

    bb257: {
        switchInt(move _354) -> [0: bb259, otherwise: bb258];
    }

    bb258: {
        _351 = const true;
        goto -> bb260;
    }

    bb259: {
        _356 = &_1;
        _351 = ArgMatches::<'_>::is_present::<&str>(move _356, const "no-global-ignore-file") -> [return: bb460, unwind: bb425];
    }

    bb260: {
        _350 = Not(move _351);
        _358 = &_1;
        _357 = ArgMatches::<'_>::is_present::<&str>(move _358, const "follow") -> [return: bb261, unwind: bb425];
    }

    bb261: {
        _360 = &_1;
        _359 = ArgMatches::<'_>::is_present::<&str>(move _360, const "one-file-system") -> [return: bb262, unwind: bb425];
    }

    bb262: {
        _362 = &_1;
        _361 = ArgMatches::<'_>::is_present::<&str>(move _362, const "null_separator") -> [return: bb263, unwind: bb425];
    }

    bb263: {
        _370 = &_1;
        _369 = ArgMatches::<'_>::value_of::<&str>(move _370, const "max-depth") -> [return: bb264, unwind: bb425];
    }

    bb264: {
        _372 = &_1;
        _371 = {closure@src/main.rs:330:22: 330:24} { matches: move _372 };
        _368 = Option::<&str>::or_else::<{closure@src/main.rs:330:22: 330:24}>(move _369, move _371) -> [return: bb265, unwind: bb425];
    }

    bb265: {
        _374 = &_1;
        _373 = {closure@src/main.rs:331:22: 331:24} { matches: move _374 };
        _367 = Option::<&str>::or_else::<{closure@src/main.rs:331:22: 331:24}>(move _368, move _373) -> [return: bb266, unwind: bb425];
    }

    bb266: {
        _366 = Option::<&str>::map::<Result<usize, ParseIntError>, {closure@src/main.rs:332:18: 332:21}>(move _367, const ZeroSized: {closure@src/main.rs:332:18: 332:21}) -> [return: bb267, unwind: bb425];
    }

    bb267: {
        _365 = Option::<Result<usize, ParseIntError>>::transpose(move _366) -> [return: bb268, unwind: bb425];
    }

    bb268: {
        _364 = <Result<Option<usize>, ParseIntError> as anyhow::Context<Option<usize>, ParseIntError>>::context::<&str>(move _365, const "Failed to parse argument to --max-depth/--exact-depth") -> [return: bb269, unwind: bb425];
    }

    bb269: {
        _363 = <Result<Option<usize>, anyhow::Error> as Try>::branch(move _364) -> [return: bb270, unwind: bb425];
    }

    bb270: {
        _375 = discriminant(_363);
        switchInt(move _375) -> [0: bb271, 1: bb272, otherwise: bb19];
    }

    bb271: {
        _377 = ((_363 as Continue).0: std::option::Option<usize>);
        _384 = &_1;
        _383 = ArgMatches::<'_>::value_of::<&str>(move _384, const "min-depth") -> [return: bb273, unwind: bb425];
    }

    bb272: {
        _376 = move ((_363 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _376) -> [return: bb461, unwind: bb425];
    }

    bb273: {
        _386 = &_1;
        _385 = {closure@src/main.rs:337:22: 337:24} { matches: move _386 };
        _382 = Option::<&str>::or_else::<{closure@src/main.rs:337:22: 337:24}>(move _383, move _385) -> [return: bb274, unwind: bb425];
    }

    bb274: {
        _381 = Option::<&str>::map::<Result<usize, ParseIntError>, {closure@src/main.rs:338:18: 338:21}>(move _382, const ZeroSized: {closure@src/main.rs:338:18: 338:21}) -> [return: bb275, unwind: bb425];
    }

    bb275: {
        _380 = Option::<Result<usize, ParseIntError>>::transpose(move _381) -> [return: bb276, unwind: bb425];
    }

    bb276: {
        _379 = <Result<Option<usize>, ParseIntError> as anyhow::Context<Option<usize>, ParseIntError>>::context::<&str>(move _380, const "Failed to parse argument to --min-depth/--exact-depth") -> [return: bb277, unwind: bb425];
    }

    bb277: {
        _378 = <Result<Option<usize>, anyhow::Error> as Try>::branch(move _379) -> [return: bb278, unwind: bb425];
    }

    bb278: {
        _387 = discriminant(_378);
        switchInt(move _387) -> [0: bb279, 1: bb280, otherwise: bb19];
    }

    bb279: {
        _389 = ((_378 as Continue).0: std::option::Option<usize>);
        _391 = &_1;
        _390 = ArgMatches::<'_>::is_present::<&str>(move _391, const "prune") -> [return: bb281, unwind: bb425];
    }

    bb280: {
        _388 = move ((_378 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _388) -> [return: bb462, unwind: bb425];
    }

    bb281: {
        _402 = &_1;
        _401 = ArgMatches::<'_>::value_of::<&str>(move _402, const "threads") -> [return: bb282, unwind: bb425];
    }

    bb282: {
        _400 = Option::<&str>::map::<Result<usize, ParseIntError>, {closure@src/main.rs:345:22: 345:25}>(move _401, const ZeroSized: {closure@src/main.rs:345:22: 345:25}) -> [return: bb283, unwind: bb425];
    }

    bb283: {
        _399 = Option::<Result<usize, ParseIntError>>::transpose(move _400) -> [return: bb284, unwind: bb425];
    }

    bb284: {
        _398 = <Result<Option<usize>, ParseIntError> as anyhow::Context<Option<usize>, ParseIntError>>::context::<&str>(move _399, const "Failed to parse number of threads") -> [return: bb285, unwind: bb425];
    }

    bb285: {
        _397 = <Result<Option<usize>, anyhow::Error> as Try>::branch(move _398) -> [return: bb286, unwind: bb425];
    }

    bb286: {
        _403 = discriminant(_397);
        switchInt(move _403) -> [0: bb287, 1: bb288, otherwise: bb19];
    }

    bb287: {
        _405 = ((_397 as Continue).0: std::option::Option<usize>);
        _396 = Option::<usize>::map::<Result<usize, anyhow::Error>, {closure@src/main.rs:348:22: 348:25}>(_405, const ZeroSized: {closure@src/main.rs:348:22: 348:25}) -> [return: bb289, unwind: bb425];
    }

    bb288: {
        _404 = move ((_397 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _404) -> [return: bb463, unwind: bb425];
    }

    bb289: {
        _395 = Option::<Result<usize, anyhow::Error>>::transpose(move _396) -> [return: bb290, unwind: bb425];
    }

    bb290: {
        _394 = <Result<Option<usize>, anyhow::Error> as Try>::branch(move _395) -> [return: bb291, unwind: bb425];
    }

    bb291: {
        _406 = discriminant(_394);
        switchInt(move _406) -> [0: bb292, 1: bb293, otherwise: bb19];
    }

    bb292: {
        _408 = ((_394 as Continue).0: std::option::Option<usize>);
        _393 = Option::<usize>::unwrap_or_else::<fn() -> usize {num_cpus::get}>(_408, num_cpus::get) -> [return: bb294, unwind: bb425];
    }

    bb293: {
        _407 = move ((_394 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _407) -> [return: bb464, unwind: bb425];
    }

    bb294: {
        _392 = std::cmp::max::<usize>(move _393, const 1_usize) -> [return: bb295, unwind: bb425];
    }

    bb295: {
        _415 = &_1;
        _414 = ArgMatches::<'_>::value_of::<&str>(move _415, const "max-buffer-time") -> [return: bb296, unwind: bb425];
    }

    bb296: {
        _413 = Option::<&str>::map::<Result<u64, ParseIntError>, {closure@src/main.rs:361:18: 361:21}>(move _414, const ZeroSized: {closure@src/main.rs:361:18: 361:21}) -> [return: bb297, unwind: bb425];
    }

    bb297: {
        _412 = Option::<Result<u64, ParseIntError>>::transpose(move _413) -> [return: bb298, unwind: bb425];
    }

    bb298: {
        _411 = <Result<Option<u64>, ParseIntError> as anyhow::Context<Option<u64>, ParseIntError>>::context::<&str>(move _412, const "Failed to parse max. buffer time argument") -> [return: bb299, unwind: bb425];
    }

    bb299: {
        _410 = <Result<Option<u64>, anyhow::Error> as Try>::branch(move _411) -> [return: bb300, unwind: bb425];
    }

    bb300: {
        _416 = discriminant(_410);
        switchInt(move _416) -> [0: bb301, 1: bb302, otherwise: bb19];
    }

    bb301: {
        _418 = ((_410 as Continue).0: std::option::Option<u64>);
        _409 = Option::<u64>::map::<std::time::Duration, fn(u64) -> std::time::Duration {std::time::Duration::from_millis}>(_418, std::time::Duration::from_millis) -> [return: bb303, unwind: bb425];
    }

    bb302: {
        _417 = move ((_410 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _417) -> [return: bb465, unwind: bb425];
    }

    bb303: {
        _499 = const false;
        _419 = move _182;
        _422 = &_1;
        _421 = ArgMatches::<'_>::values_of::<&str>(move _422, const "file-type") -> [return: bb304, unwind: bb391];
    }

    bb304: {
        _420 = Option::<clap::Values<'_>>::map::<FileTypes, {closure@src/main.rs:367:56: 367:64}>(move _421, const ZeroSized: {closure@src/main.rs:367:56: 367:64}) -> [return: bb305, unwind: bb391];
    }

    bb305: {
        _428 = &_1;
        _427 = ArgMatches::<'_>::values_of::<&str>(move _428, const "extension") -> [return: bb306, unwind: bb391];
    }

    bb306: {
        _426 = Option::<clap::Values<'_>>::map::<Result<regex::bytes::RegexSet, regex::Error>, {closure@src/main.rs:395:18: 395:24}>(move _427, const ZeroSized: {closure@src/main.rs:395:18: 395:24}) -> [return: bb307, unwind: bb391];
    }

    bb307: {
        _425 = Option::<Result<regex::bytes::RegexSet, regex::Error>>::transpose(move _426) -> [return: bb308, unwind: bb391];
    }

    bb308: {
        _424 = <Result<Option<regex::bytes::RegexSet>, regex::Error> as Try>::branch(move _425) -> [return: bb309, unwind: bb391];
    }

    bb309: {
        _429 = discriminant(_424);
        switchInt(move _429) -> [0: bb310, 1: bb311, otherwise: bb19];
    }

    bb310: {
        _431 = move ((_424 as Continue).0: std::option::Option<regex::bytes::RegexSet>);
        _423 = move _431;
        _498 = const false;
        _433 = move _186;
        _432 = Option::<CommandTemplate>::map::<Arc<CommandTemplate>, fn(CommandTemplate) -> Arc<CommandTemplate> {Arc::<CommandTemplate>::new}>(move _433, Arc::<CommandTemplate>::new) -> [return: bb313, unwind: bb389];
    }

    bb311: {
        _430 = move ((_424 as Break).0: std::result::Result<std::convert::Infallible, regex::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, regex::Error>>>::from_residual(move _430) -> [return: bb312, unwind: bb390];
    }

    bb312: {
        drop(_419) -> [return: bb364, unwind: bb425];
    }

    bb313: {
        _437 = &_1;
        _436 = ArgMatches::<'_>::values_of::<&str>(move _437, const "exclude") -> [return: bb314, unwind: bb388];
    }

    bb314: {
        _435 = Option::<clap::Values<'_>>::map::<Vec<String>, {closure@src/main.rs:407:18: 407:21}>(move _436, const ZeroSized: {closure@src/main.rs:407:18: 407:21}) -> [return: bb315, unwind: bb388];
    }

    bb315: {
        _434 = Option::<Vec<String>>::unwrap_or_else::<fn() -> Vec<String> {Vec::<String>::new}>(move _435, Vec::<String>::new) -> [return: bb316, unwind: bb388];
    }

    bb316: {
        _441 = &_1;
        _440 = ArgMatches::<'_>::values_of::<&str>(move _441, const "ignore-file") -> [return: bb317, unwind: bb387];
    }

    bb317: {
        _439 = Option::<clap::Values<'_>>::map::<Vec<PathBuf>, {closure@src/main.rs:411:18: 411:22}>(move _440, const ZeroSized: {closure@src/main.rs:411:18: 411:22}) -> [return: bb318, unwind: bb387];
    }

    bb318: {
        _438 = Option::<Vec<PathBuf>>::unwrap_or_else::<fn() -> Vec<PathBuf> {Vec::<PathBuf>::new}>(move _439, Vec::<PathBuf>::new) -> [return: bb319, unwind: bb387];
    }

    bb319: {
        _497 = const false;
        _442 = move _265;
        _496 = const false;
        _443 = move _277;
        _444 = _318;
        _446 = &_1;
        _445 = ArgMatches::<'_>::is_present::<&str>(move _446, const "show-errors") -> [return: bb320, unwind: bb384];
    }

    bb320: {
        _500 = const false;
        _447 = move _179;
        _455 = &_1;
        _454 = ArgMatches::<'_>::value_of::<&str>(move _455, const "max-results") -> [return: bb321, unwind: bb383];
    }

    bb321: {
        _453 = Option::<&str>::map::<Result<usize, ParseIntError>, {closure@src/main.rs:421:18: 421:21}>(move _454, const ZeroSized: {closure@src/main.rs:421:18: 421:21}) -> [return: bb322, unwind: bb383];
    }

    bb322: {
        _452 = Option::<Result<usize, ParseIntError>>::transpose(move _453) -> [return: bb323, unwind: bb383];
    }

    bb323: {
        _451 = <Result<Option<usize>, ParseIntError> as anyhow::Context<Option<usize>, ParseIntError>>::context::<&str>(move _452, const "Failed to parse --max-results argument") -> [return: bb324, unwind: bb383];
    }

    bb324: {
        _450 = <Result<Option<usize>, anyhow::Error> as Try>::branch(move _451) -> [return: bb325, unwind: bb383];
    }

    bb325: {
        _456 = discriminant(_450);
        switchInt(move _456) -> [0: bb326, 1: bb327, otherwise: bb19];
    }

    bb326: {
        _458 = ((_450 as Continue).0: std::option::Option<usize>);
        _449 = Option::<usize>::filter::<{closure@src/main.rs:424:21: 424:25}>(_458, const ZeroSized: {closure@src/main.rs:424:21: 424:25}) -> [return: bb329, unwind: bb375];
    }

    bb327: {
        _457 = move ((_450 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _457) -> [return: bb328, unwind: bb375];
    }

    bb328: {
        drop(_447) -> [return: bb357, unwind: bb376];
    }

    bb329: {
        _460 = &_1;
        _459 = {closure@src/main.rs:425:22: 425:24} { matches: move _460 };
        _448 = Option::<usize>::or_else::<{closure@src/main.rs:425:22: 425:24}>(move _449, move _459) -> [return: bb330, unwind: bb375];
    }

    bb330: {
        _503 = const true;
        _328 = Options { case_sensitive: move _329, search_full_path: move _330, ignore_hidden: move _332, read_fdignore: move _338, read_vcsignore: move _343, read_global_ignore: move _350, follow_links: move _357, one_file_system: move _359, null_separator: move _361, max_depth: _377, min_depth: _389, prune: move _390, threads: move _392, max_buffer_time: move _409, ls_colors: move _419, interactive_terminal: _168, file_types: move _420, extensions: move _423, command: move _432, exclude_patterns: move _434, ignore_files: move _438, size_constraints: move _442, time_constraints: move _443, owner_constraint: move _444, show_filesystem_errors: move _445, path_separator: move _447, max_results: move _448 };
        _461 = const true;
        switchInt(move _461) -> [0: bb337, otherwise: bb331];
    }

    bb331: {
        _462 = (_328.2: bool);
        switchInt(move _462) -> [0: bb337, otherwise: bb332];
    }

    bb332: {
        _465 = &_138;
        _464 = <String as Deref>::deref(_465) -> [return: bb333, unwind: bb423];
    }

    bb333: {
        _463 = pattern_matches_strings_with_leading_dot(_464) -> [return: bb334, unwind: bb423];
    }

    bb334: {
        switchInt(move _463) -> [0: bb337, otherwise: bb335];
    }

    bb335: {
        _466 = new_adhoc::<&str>(const "The pattern seems to only match files with a leading dot, but hidden files are filtered by default. Consider adding -H/--hidden to search hidden files as well or adjust your search pattern.") -> [return: bb336, unwind: bb423];
    }

    bb336: {
        _0 = Result::<exit_codes::ExitCode, anyhow::Error>::Err(move _466);
        goto -> bb356;
    }

    bb337: {
        _477 = &_138;
        _476 = <String as Deref>::deref(_477) -> [return: bb338, unwind: bb423];
    }

    bb338: {
        _475 = regex::bytes::RegexBuilder::new(_476) -> [return: bb339, unwind: bb423];
    }

    bb339: {
        _474 = &mut _475;
        _479 = (_328.0: bool);
        _478 = Not(move _479);
        _473 = regex::bytes::RegexBuilder::case_insensitive(move _474, move _478) -> [return: bb340, unwind: bb374];
    }

    bb340: {
        _472 = regex::bytes::RegexBuilder::dot_matches_new_line(_473, const true) -> [return: bb341, unwind: bb374];
    }

    bb341: {
        _471 = &(*_472);
        _470 = regex::bytes::RegexBuilder::build(move _471) -> [return: bb342, unwind: bb374];
    }

    bb342: {
        _469 = Result::<regex::bytes::Regex, regex::Error>::map_err::<anyhow::Error, {closure@src/main.rs:449:18: 449:21}>(move _470, const ZeroSized: {closure@src/main.rs:449:18: 449:21}) -> [return: bb343, unwind: bb374];
    }

    bb343: {
        _468 = <Result<regex::bytes::Regex, anyhow::Error> as Try>::branch(move _469) -> [return: bb344, unwind: bb374];
    }

    bb344: {
        _480 = discriminant(_468);
        switchInt(move _480) -> [0: bb345, 1: bb346, otherwise: bb19];
    }

    bb345: {
        _482 = move ((_468 as Continue).0: regex::bytes::Regex);
        _502 = const true;
        _467 = move _482;
        drop(_475) -> [return: bb348, unwind: bb421];
    }

    bb346: {
        _481 = move ((_468 as Break).0: std::result::Result<std::convert::Infallible, anyhow::Error>);
        _0 = <Result<exit_codes::ExitCode, anyhow::Error> as FromResidual<Result<Infallible, anyhow::Error>>>::from_residual(move _481) -> [return: bb347, unwind: bb374];
    }

    bb347: {
        drop(_475) -> [return: bb355, unwind: bb423];
    }

    bb348: {
        _484 = &_50;
        _483 = <Vec<PathBuf> as Deref>::deref(_484) -> [return: bb349, unwind: bb421];
    }

    bb349: {
        _502 = const false;
        _486 = move _467;
        _485 = Arc::<regex::bytes::Regex>::new(move _486) -> [return: bb350, unwind: bb421];
    }

    bb350: {
        _501 = const true;
        _503 = const false;
        _488 = move _328;
        _487 = Arc::<Options>::new(move _488) -> [return: bb351, unwind: bb419];
    }

    bb351: {
        _501 = const false;
        _0 = walk::scan(_483, move _485, move _487) -> [return: bb352, unwind: bb419];
    }

    bb352: {
        _501 = const false;
        _502 = const false;
        _503 = const false;
        _496 = const false;
        _497 = const false;
        _498 = const false;
        _499 = const false;
        _500 = const false;
        drop(_138) -> [return: bb353, unwind: bb402];
    }

    bb353: {
        drop(_50) -> [return: bb354, unwind: bb408];
    }

    bb354: {
        drop(_1) -> [return: bb373, unwind continue];
    }

    bb355: {
        _502 = const false;
        goto -> bb356;
    }

    bb356: {
        drop(_328) -> [return: bb364, unwind: bb425];
    }

    bb357: {
        drop(_443) -> [return: bb358, unwind: bb377];
    }

    bb358: {
        drop(_442) -> [return: bb359, unwind: bb378];
    }

    bb359: {
        drop(_438) -> [return: bb360, unwind: bb379];
    }

    bb360: {
        drop(_434) -> [return: bb361, unwind: bb380];
    }

    bb361: {
        drop(_432) -> [return: bb362, unwind: bb381];
    }

    bb362: {
        drop(_423) -> [return: bb363, unwind: bb382];
    }

    bb363: {
        drop(_419) -> [return: bb364, unwind: bb425];
    }

    bb364: {
        _503 = const false;
        goto -> bb413;
    }

    bb365: {
        _496 = const false;
        switchInt(_497) -> [0: bb366, otherwise: bb414];
    }

    bb366: {
        _497 = const false;
        switchInt(_498) -> [0: bb368, otherwise: bb415];
    }

    bb367: {
        drop(_207) -> [return: bb368, unwind: bb431];
    }

    bb368: {
        _498 = const false;
        switchInt(_499) -> [0: bb369, otherwise: bb416];
    }

    bb369: {
        _499 = const false;
        switchInt(_500) -> [0: bb370, otherwise: bb417];
    }

    bb370: {
        _500 = const false;
        drop(_138) -> [return: bb371, unwind: bb402];
    }

    bb371: {
        drop(_50) -> [return: bb372, unwind: bb408];
    }

    bb372: {
        drop(_1) -> [return: bb373, unwind continue];
    }

    bb373: {
        return;
    }

    bb374 (cleanup): {
        drop(_475) -> [return: bb423, unwind terminate(cleanup)];
    }

    bb375 (cleanup): {
        drop(_447) -> [return: bb376, unwind terminate(cleanup)];
    }

    bb376 (cleanup): {
        drop(_443) -> [return: bb377, unwind terminate(cleanup)];
    }

    bb377 (cleanup): {
        drop(_442) -> [return: bb378, unwind terminate(cleanup)];
    }

    bb378 (cleanup): {
        drop(_438) -> [return: bb379, unwind terminate(cleanup)];
    }

    bb379 (cleanup): {
        drop(_434) -> [return: bb380, unwind terminate(cleanup)];
    }

    bb380 (cleanup): {
        drop(_432) -> [return: bb381, unwind terminate(cleanup)];
    }

    bb381 (cleanup): {
        drop(_423) -> [return: bb382, unwind terminate(cleanup)];
    }

    bb382 (cleanup): {
        drop(_419) -> [return: bb425, unwind terminate(cleanup)];
    }

    bb383 (cleanup): {
        drop(_447) -> [return: bb384, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        drop(_443) -> [return: bb385, unwind terminate(cleanup)];
    }

    bb385 (cleanup): {
        drop(_442) -> [return: bb386, unwind terminate(cleanup)];
    }

    bb386 (cleanup): {
        drop(_438) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        drop(_434) -> [return: bb388, unwind terminate(cleanup)];
    }

    bb388 (cleanup): {
        drop(_432) -> [return: bb389, unwind terminate(cleanup)];
    }

    bb389 (cleanup): {
        drop(_423) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb390 (cleanup): {
        drop(_419) -> [return: bb425, unwind terminate(cleanup)];
    }

    bb391 (cleanup): {
        drop(_419) -> [return: bb425, unwind terminate(cleanup)];
    }

    bb392 (cleanup): {
        drop(_213) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb393 (cleanup): {
        drop(_249) -> [return: bb394, unwind terminate(cleanup)];
    }

    bb394 (cleanup): {
        drop(_254) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb395 (cleanup): {
        drop(_232) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb396 (cleanup): {
        drop(_221) -> [return: bb397, unwind terminate(cleanup)];
    }

    bb397 (cleanup): {
        drop(_226) -> [return: bb398, unwind terminate(cleanup)];
    }

    bb398 (cleanup): {
        drop(_207) -> [return: bb431, unwind terminate(cleanup)];
    }

    bb399 (cleanup): {
        drop(_178) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb400 (cleanup): {
        drop(_138) -> [return: bb402, unwind terminate(cleanup)];
    }

    bb401 (cleanup): {
        drop(_143) -> [return: bb402, unwind terminate(cleanup)];
    }

    bb402 (cleanup): {
        drop(_50) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb403 (cleanup): {
        drop(_69) -> [return: bb436, unwind terminate(cleanup)];
    }

    bb404 (cleanup): {
        drop(_77) -> [return: bb436, unwind terminate(cleanup)];
    }

    bb405 (cleanup): {
        drop(_53) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb406 (cleanup): {
        drop(_13) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb407 (cleanup): {
        drop(_21) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb408 (cleanup): {
        drop(_1) -> [return: bb409, unwind terminate(cleanup)];
    }

    bb409 (cleanup): {
        resume;
    }

    bb410: {
        _497 = const true;
        goto -> bb208;
    }

    bb411: {
        drop(_60) -> [return: bb55, unwind: bb405];
    }

    bb412: {
        drop(_277) -> [return: bb365, unwind: bb427];
    }

    bb413: {
        switchInt(_496) -> [0: bb365, otherwise: bb412];
    }

    bb414: {
        drop(_265) -> [return: bb366, unwind: bb429];
    }

    bb415: {
        drop(_186) -> [return: bb368, unwind: bb431];
    }

    bb416: {
        drop(_182) -> [return: bb369, unwind: bb433];
    }

    bb417: {
        drop(_179) -> [return: bb370, unwind: bb400];
    }

    bb418 (cleanup): {
        drop(_485) -> [return: bb421, unwind terminate(cleanup)];
    }

    bb419 (cleanup): {
        switchInt(_501) -> [0: bb421, otherwise: bb418];
    }

    bb420 (cleanup): {
        drop(_467) -> [return: bb423, unwind terminate(cleanup)];
    }

    bb421 (cleanup): {
        switchInt(_502) -> [0: bb423, otherwise: bb420];
    }

    bb422 (cleanup): {
        drop(_328) -> [return: bb425, unwind terminate(cleanup)];
    }

    bb423 (cleanup): {
        switchInt(_503) -> [0: bb425, otherwise: bb422];
    }

    bb424 (cleanup): {
        drop(_277) -> [return: bb427, unwind terminate(cleanup)];
    }

    bb425 (cleanup): {
        switchInt(_496) -> [0: bb427, otherwise: bb424];
    }

    bb426 (cleanup): {
        drop(_265) -> [return: bb429, unwind terminate(cleanup)];
    }

    bb427 (cleanup): {
        switchInt(_497) -> [0: bb429, otherwise: bb426];
    }

    bb428 (cleanup): {
        drop(_186) -> [return: bb431, unwind terminate(cleanup)];
    }

    bb429 (cleanup): {
        switchInt(_498) -> [0: bb431, otherwise: bb428];
    }

    bb430 (cleanup): {
        drop(_182) -> [return: bb433, unwind terminate(cleanup)];
    }

    bb431 (cleanup): {
        switchInt(_499) -> [0: bb433, otherwise: bb430];
    }

    bb432 (cleanup): {
        drop(_179) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb433 (cleanup): {
        switchInt(_500) -> [0: bb400, otherwise: bb432];
    }

    bb434 (cleanup): {
        _505 = &mut _85;
        _506 = <Box<[PathBuf; 1]> as Drop>::drop(move _505) -> [return: bb466, unwind terminate(cleanup)];
    }

    bb435 (cleanup): {
        drop(_60) -> [return: bb405, unwind terminate(cleanup)];
    }

    bb436 (cleanup): {
        switchInt(_495) -> [0: bb405, otherwise: bb435];
    }

    bb437 (cleanup): {
        drop(_2) -> [return: bb409, unwind terminate(cleanup)];
    }

    bb438 (cleanup): {
        switchInt(_504) -> [0: bb409, otherwise: bb437];
    }

    bb439: {
        (*_508) = [const "ls", _238, _239, _240];
        _233 = move _237 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _232 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _233) -> [return: bb173, unwind: bb398];
    }

    bb440: {
        (*_507) = [move _86];
        _81 = move _85;
        _80 = move _81 as std::boxed::Box<[std::path::PathBuf]> (PointerCoercion(Unsize));
        _50 = slice::<impl [PathBuf]>::into_vec::<std::alloc::Global>(move _80) -> [return: bb467, unwind: bb408];
    }

    bb441: {
        goto -> bb372;
    }

    bb442: {
        goto -> bb372;
    }

    bb443: {
        goto -> bb54;
    }

    bb444: {
        goto -> bb54;
    }

    bb445: {
        goto -> bb371;
    }

    bb446: {
        goto -> bb108;
    }

    bb447: {
        goto -> bb108;
    }

    bb448: {
        goto -> bb116;
    }

    bb449: {
        goto -> bb368;
    }

    bb450: {
        goto -> bb194;
    }

    bb451: {
        goto -> bb194;
    }

    bb452: {
        goto -> bb176;
    }

    bb453: {
        goto -> bb194;
    }

    bb454: {
        goto -> bb366;
    }

    bb455: {
        goto -> bb220;
    }

    bb456: {
        goto -> bb230;
    }

    bb457: {
        goto -> bb413;
    }

    bb458: {
        goto -> bb248;
    }

    bb459: {
        goto -> bb254;
    }

    bb460: {
        goto -> bb260;
    }

    bb461: {
        goto -> bb364;
    }

    bb462: {
        goto -> bb364;
    }

    bb463: {
        goto -> bb364;
    }

    bb464: {
        goto -> bb364;
    }

    bb465: {
        goto -> bb364;
    }

    bb466 (cleanup): {
        goto -> bb408;
    }

    bb467: {
        goto -> bb59;
    }
}

promoted[0] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "'", const "' is not a valid date or duration. See 'fd --help'."];
        _0 = &_1;
        return;
    }
}

promoted[1] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "'", const "' is not a valid date or duration. See 'fd --help'."];
        _0 = &_1;
        return;
    }
}

promoted[2] in run: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in run: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];

    bb0: {
        _1 = [const "The search pattern '", const "' contains a path-separation character ('", const "') and will not lead to any search results.\n\nIf you want to search for all files inside the '", const "' directory, use a match-all pattern:\n\n  fd . '", const "'\n\nInstead, if you want your pattern to match the full file path, use:\n\n  fd --full-path '", const "'"];
        _0 = &_1;
        return;
    }
}

promoted[4] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Search path '", const "' is not a directory."];
        _0 = &_1;
        return;
    }
}

promoted[5] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The '--base-directory' path '", const "' is not a directory."];
        _0 = &_1;
        return;
    }
}

fn run::{closure#0}(_1: {closure@src/main.rs:64:59: 64:61}) -> String {
    debug base_directory => (*(_1.0: &&std::path::Path));
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::borrow::Cow<'_, str>;
    let _10: std::borrow::Cow<'_, str>;
    let mut _11: &[&str; 2];
    let mut _12: &&std::path::Path;
    let mut _13: &std::path::Path;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _11 = const _;
        _4 = _11 as &[&str] (PointerCoercion(Unsize));
        _12 = deref_copy (_1.0: &&std::path::Path);
        _13 = deref_copy (*_12);
        _10 = Path::to_string_lossy(_13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in run::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Could not set '", const "' as the current working directory"];
        _0 = &_1;
        return;
    }
}

fn run::{closure#1}(_1: {closure@src/main.rs:82:14: 82:17}, _2: &OsStr) -> Result<&str, anyhow::Error> {
    debug p => _2;
    let mut _0: std::result::Result<&str, anyhow::Error>;
    let mut _3: std::option::Option<&str>;

    bb0: {
        _3 = OsStr::to_str(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<&str>::ok_or_else::<anyhow::Error, {closure@src/main.rs:84:29: 84:31}>(move _3, const ZeroSized: {closure@src/main.rs:84:29: 84:31}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn run::{closure#1}::{closure#0}(_1: {closure@src/main.rs:84:29: 84:31}) -> anyhow::Error {
    let mut _0: anyhow::Error;

    bb0: {
        _0 = new_adhoc::<&str>(const "The search pattern includes invalid UTF-8 sequences.") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#2}(_1: {closure@src/main.rs:92:18: 92:20}) -> Option<OsValues<'_>> {
    debug matches => (*(_1.0: &clap::ArgMatches<'_>));
    let mut _0: std::option::Option<clap::OsValues<'_>>;
    let mut _2: &clap::ArgMatches<'_>;

    bb0: {
        _2 = deref_copy (_1.0: &clap::ArgMatches<'_>);
        _0 = ArgMatches::<'_>::values_of_os::<&str>(_2, const "search-path") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#3}(_1: &mut {closure@src/main.rs:121:18: 121:31}, _2: &PathBuf) -> PathBuf {
    debug path_buffer => _2;
    let mut _0: std::path::PathBuf;
    let mut _3: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _4: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _5: &std::path::Path;

    bb0: {
        _5 = <PathBuf as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Path::canonicalize(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Result::<PathBuf, std::io::Error>::and_then::<PathBuf, {closure@src/main.rs:124:31: 124:35}>(move _4, const ZeroSized: {closure@src/main.rs:124:31: 124:35}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<PathBuf, std::io::Error>::unwrap(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn run::{closure#3}::{closure#0}(_1: {closure@src/main.rs:124:31: 124:35}, _2: PathBuf) -> Result<PathBuf, std::io::Error> {
    debug pb => _2;
    let mut _0: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;

    bb0: {
        _4 = &_2;
        _3 = PathBuf::as_path(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = absolute_path(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn run::{closure#4}(_1: {closure@src/main.rs:176:65: 176:70}, _2: &str) -> String {
    debug str => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#5}(_1: {closure@src/main.rs:179:50: 179:52}) -> LsColors {
    let mut _0: lscolors::LsColors;
    let _2: &str;

    bb0: {
        _2 = const _;
        _0 = LsColors::from_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#6}(_1: &{closure@src/main.rs:193:22: 193:36}, _2: &str) -> Vec<&str> {
    debug command_name => _2;
    debug color_arg => (*((*_1).0: &std::string::String));
    let mut _0: std::vec::Vec<&str>;
    let mut _3: std::boxed::Box<[&str]>;
    let mut _4: std::boxed::Box<[&str; 5]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[&str; 5]>;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let mut _13: *const [&str; 5];
    let mut _14: *const ();
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    scope 1 {
    }

    bb0: {
        _5 = SizeOf([&str; 5]);
        _6 = AlignOf([&str; 5]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [&str; 5]);
        _9 = const "--human-readable";
        _10 = const "--directory";
        _12 = deref_copy ((*_1).0: &std::string::String);
        _11 = <String as Deref>::deref(_12) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _13 = (((_8.0: std::ptr::Unique<[&str; 5]>).0: std::ptr::NonNull<[&str; 5]>).0: *const [&str; 5]);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf([&str; 5]);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb6, unwind unreachable];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_8) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        (*_13) = [_2, const "-l", _9, _10, _11];
        _4 = move _8;
        _3 = move _4 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _0 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb3, unwind continue];
    }
}

fn run::{closure#7}(_1: &mut {closure@src/main.rs:273:16: 273:20}, _2: &str) -> Result<SizeFilter, anyhow::Error> {
    debug sf => _2;
    let mut _0: std::result::Result<filter::size::SizeFilter, anyhow::Error>;
    let mut _3: std::option::Option<filter::size::SizeFilter>;
    let mut _4: &str;
    let mut _5: {closure@src/main.rs:275:29: 275:31};
    let mut _6: &&str;

    bb0: {
        _4 = _2;
        _3 = SizeFilter::from_string(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _5 = {closure@src/main.rs:275:29: 275:31} { sf: move _6 };
        _0 = Option::<SizeFilter>::ok_or_else::<anyhow::Error, {closure@src/main.rs:275:29: 275:31}>(move _3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn run::{closure#7}::{closure#0}(_1: {closure@src/main.rs:275:29: 275:31}) -> anyhow::Error {
    debug sf => (*(_1.0: &&str));
    let mut _0: anyhow::Error;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 2];
    let mut _10: &&str;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (PointerCoercion(Unsize));
        _10 = deref_copy (_1.0: &&str);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = new_adhoc::<String>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in run::{closure#7}::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "'", const "' is not a valid size constraint. See 'fd --help'."];
        _0 = &_1;
        return;
    }
}

fn run::{closure#8}(_1: {closure@src/main.rs:330:22: 330:24}) -> Option<&str> {
    debug matches => (*(_1.0: &clap::ArgMatches<'_>));
    let mut _0: std::option::Option<&str>;
    let mut _2: &clap::ArgMatches<'_>;

    bb0: {
        _2 = deref_copy (_1.0: &clap::ArgMatches<'_>);
        _0 = ArgMatches::<'_>::value_of::<&str>(_2, const "rg-depth") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#9}(_1: {closure@src/main.rs:331:22: 331:24}) -> Option<&str> {
    debug matches => (*(_1.0: &clap::ArgMatches<'_>));
    let mut _0: std::option::Option<&str>;
    let mut _2: &clap::ArgMatches<'_>;

    bb0: {
        _2 = deref_copy (_1.0: &clap::ArgMatches<'_>);
        _0 = ArgMatches::<'_>::value_of::<&str>(_2, const "exact-depth") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#10}(_1: {closure@src/main.rs:332:18: 332:21}, _2: &str) -> Result<usize, ParseIntError> {
    debug n => _2;
    let mut _0: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _0 = core::num::<impl usize>::from_str_radix(_2, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#11}(_1: {closure@src/main.rs:337:22: 337:24}) -> Option<&str> {
    debug matches => (*(_1.0: &clap::ArgMatches<'_>));
    let mut _0: std::option::Option<&str>;
    let mut _2: &clap::ArgMatches<'_>;

    bb0: {
        _2 = deref_copy (_1.0: &clap::ArgMatches<'_>);
        _0 = ArgMatches::<'_>::value_of::<&str>(_2, const "exact-depth") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#12}(_1: {closure@src/main.rs:338:18: 338:21}, _2: &str) -> Result<usize, ParseIntError> {
    debug n => _2;
    let mut _0: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _0 = core::num::<impl usize>::from_str_radix(_2, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#13}(_1: {closure@src/main.rs:345:22: 345:25}, _2: &str) -> Result<usize, ParseIntError> {
    debug n => _2;
    let mut _0: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _0 = core::num::<impl usize>::from_str_radix(_2, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#14}(_1: {closure@src/main.rs:348:22: 348:25}, _2: usize) -> Result<usize, anyhow::Error> {
    debug n => _2;
    let mut _0: std::result::Result<usize, anyhow::Error>;
    let mut _3: bool;
    let mut _4: anyhow::Error;

    bb0: {
        _3 = Gt(_2, const 0_usize);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Result::<usize, anyhow::Error>::Ok(_2);
        goto -> bb4;
    }

    bb2: {
        _4 = new_adhoc::<&str>(const "Number of threads must be positive.") -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<usize, anyhow::Error>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn run::{closure#15}(_1: {closure@src/main.rs:361:18: 361:21}, _2: &str) -> Result<u64, ParseIntError> {
    debug n => _2;
    let mut _0: std::result::Result<u64, std::num::ParseIntError>;

    bb0: {
        _0 = core::num::<impl u64>::from_str_radix(_2, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#16}(_1: {closure@src/main.rs:367:56: 367:64}, _2: clap::Values<'_>) -> FileTypes {
    debug values => _2;
    let mut _0: filetypes::FileTypes;
    let mut _3: filetypes::FileTypes;
    let mut _4: clap::Values<'_>;
    let mut _6: std::option::Option<&str>;
    let mut _7: &mut clap::Values<'_>;
    let mut _8: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    scope 1 {
        debug file_types => _3;
        let mut _5: clap::Values<'_>;
        scope 2 {
            debug iter => _5;
            let _9: &str;
            scope 3 {
                debug value => _9;
            }
        }
    }

    bb0: {
        _3 = <FileTypes as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <clap::Values<'_> as IntoIterator>::into_iter(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = move _4;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <clap::Values<'_> as Iterator>::next(_7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: &str);
        _23 = <str as PartialEq>::eq(_9, const "f") -> [return: bb35, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _25 = (_3.6: bool);
        switchInt(move _25) -> [0: bb46, otherwise: bb43];
    }

    bb8: {
        _22 = <str as PartialEq>::eq(_9, const "file") -> [return: bb34, unwind continue];
    }

    bb9: {
        _21 = <str as PartialEq>::eq(_9, const "d") -> [return: bb33, unwind continue];
    }

    bb10: {
        _20 = <str as PartialEq>::eq(_9, const "directory") -> [return: bb32, unwind continue];
    }

    bb11: {
        _19 = <str as PartialEq>::eq(_9, const "l") -> [return: bb31, unwind continue];
    }

    bb12: {
        _18 = <str as PartialEq>::eq(_9, const "symlink") -> [return: bb30, unwind continue];
    }

    bb13: {
        _17 = <str as PartialEq>::eq(_9, const "x") -> [return: bb29, unwind continue];
    }

    bb14: {
        _16 = <str as PartialEq>::eq(_9, const "executable") -> [return: bb28, unwind continue];
    }

    bb15: {
        _15 = <str as PartialEq>::eq(_9, const "e") -> [return: bb27, unwind continue];
    }

    bb16: {
        _14 = <str as PartialEq>::eq(_9, const "empty") -> [return: bb26, unwind continue];
    }

    bb17: {
        _13 = <str as PartialEq>::eq(_9, const "s") -> [return: bb25, unwind continue];
    }

    bb18: {
        _12 = <str as PartialEq>::eq(_9, const "socket") -> [return: bb24, unwind continue];
    }

    bb19: {
        _11 = <str as PartialEq>::eq(_9, const "p") -> [return: bb23, unwind continue];
    }

    bb20: {
        _10 = <str as PartialEq>::eq(_9, const "pipe") -> [return: bb22, unwind continue];
    }

    bb21: {
        _24 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb22: {
        switchInt(move _10) -> [0: bb21, otherwise: bb42];
    }

    bb23: {
        switchInt(move _11) -> [0: bb20, otherwise: bb42];
    }

    bb24: {
        switchInt(move _12) -> [0: bb19, otherwise: bb41];
    }

    bb25: {
        switchInt(move _13) -> [0: bb18, otherwise: bb41];
    }

    bb26: {
        switchInt(move _14) -> [0: bb17, otherwise: bb40];
    }

    bb27: {
        switchInt(move _15) -> [0: bb16, otherwise: bb40];
    }

    bb28: {
        switchInt(move _16) -> [0: bb15, otherwise: bb39];
    }

    bb29: {
        switchInt(move _17) -> [0: bb14, otherwise: bb39];
    }

    bb30: {
        switchInt(move _18) -> [0: bb13, otherwise: bb38];
    }

    bb31: {
        switchInt(move _19) -> [0: bb12, otherwise: bb38];
    }

    bb32: {
        switchInt(move _20) -> [0: bb11, otherwise: bb37];
    }

    bb33: {
        switchInt(move _21) -> [0: bb10, otherwise: bb37];
    }

    bb34: {
        switchInt(move _22) -> [0: bb9, otherwise: bb36];
    }

    bb35: {
        switchInt(move _23) -> [0: bb8, otherwise: bb36];
    }

    bb36: {
        (_3.0: bool) = const true;
        goto -> bb3;
    }

    bb37: {
        (_3.1: bool) = const true;
        goto -> bb3;
    }

    bb38: {
        (_3.2: bool) = const true;
        goto -> bb3;
    }

    bb39: {
        (_3.5: bool) = const true;
        (_3.0: bool) = const true;
        goto -> bb3;
    }

    bb40: {
        (_3.6: bool) = const true;
        goto -> bb3;
    }

    bb41: {
        (_3.3: bool) = const true;
        goto -> bb3;
    }

    bb42: {
        (_3.4: bool) = const true;
        goto -> bb3;
    }

    bb43: {
        _26 = (_3.0: bool);
        switchInt(move _26) -> [0: bb44, otherwise: bb46];
    }

    bb44: {
        _27 = (_3.1: bool);
        switchInt(move _27) -> [0: bb45, otherwise: bb46];
    }

    bb45: {
        (_3.0: bool) = const true;
        (_3.1: bool) = const true;
        goto -> bb46;
    }

    bb46: {
        _0 = move _3;
        return;
    }
}

fn run::{closure#17}(_1: {closure@src/main.rs:395:18: 395:24}, _2: clap::Values<'_>) -> Result<regex::bytes::RegexSet, regex::Error> {
    debug exts => _2;
    let mut _0: std::result::Result<regex::bytes::RegexSet, regex::Error>;
    let _3: std::iter::Map<std::iter::Map<clap::Values<'_>, {closure@src/main.rs:397:26: 397:29}>, {closure@src/main.rs:398:26: 398:29}>;
    let mut _4: std::iter::Map<clap::Values<'_>, {closure@src/main.rs:397:26: 397:29}>;
    let mut _5: &regex::bytes::RegexSetBuilder;
    let _6: &mut regex::bytes::RegexSetBuilder;
    let mut _7: &mut regex::bytes::RegexSetBuilder;
    let mut _8: regex::bytes::RegexSetBuilder;
    scope 1 {
        debug patterns => _3;
    }

    bb0: {
        _4 = <clap::Values<'_> as Iterator>::map::<&str, {closure@src/main.rs:397:26: 397:29}>(move _2, const ZeroSized: {closure@src/main.rs:397:26: 397:29}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Map<clap::Values<'_>, {closure@src/main.rs:397:26: 397:29}> as Iterator>::map::<String, {closure@src/main.rs:398:26: 398:29}>(move _4, const ZeroSized: {closure@src/main.rs:398:26: 398:29}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = regex::bytes::RegexSetBuilder::new::<Map<Map<clap::Values<'_>, {closure@src/main.rs:397:26: 397:29}>, {closure@src/main.rs:398:26: 398:29}>, String>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = &mut _8;
        _6 = regex::bytes::RegexSetBuilder::case_insensitive(move _7, const true) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _5 = &(*_6);
        _0 = regex::bytes::RegexSetBuilder::build(move _5) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_8) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn run::{closure#17}::{closure#0}(_1: &mut {closure@src/main.rs:397:26: 397:29}, _2: &str) -> &str {
    debug e => _2;
    let mut _0: &str;

    bb0: {
        _0 = core::str::<impl str>::trim_start_matches::<'_, char>(_2, const '.') -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#17}::{closure#1}(_1: &mut {closure@src/main.rs:398:26: 398:29}, _2: &str) -> String {
    debug e => _2;
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::string::String;
    let _11: std::string::String;
    let mut _12: &[&str; 2];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _12 = const _;
        _5 = _12 as &[&str] (PointerCoercion(Unsize));
        _11 = regex::escape(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<String>(_10) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_11) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _3;
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_11) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in run::{closure#17}::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const ".\\.", const "$"];
        _0 = &_1;
        return;
    }
}

fn run::{closure#18}(_1: {closure@src/main.rs:407:18: 407:21}, _2: clap::Values<'_>) -> Vec<String> {
    debug v => _2;
    let mut _0: std::vec::Vec<std::string::String>;
    let mut _3: std::iter::Map<clap::Values<'_>, {closure@src/main.rs:407:28: 407:31}>;

    bb0: {
        _3 = <clap::Values<'_> as Iterator>::map::<String, {closure@src/main.rs:407:28: 407:31}>(move _2, const ZeroSized: {closure@src/main.rs:407:28: 407:31}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<clap::Values<'_>, {closure@src/main.rs:407:28: 407:31}> as Iterator>::collect::<Vec<String>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn run::{closure#18}::{closure#0}(_1: &mut {closure@src/main.rs:407:28: 407:31}, _2: &str) -> String {
    debug p => _2;
    let mut _0: std::string::String;
    let mut _3: std::string::String;

    bb0: {
        _3 = <String as From<&str>>::from(const "!") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <String as Add<&str>>::add(move _3, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn run::{closure#19}(_1: {closure@src/main.rs:411:18: 411:22}, _2: clap::Values<'_>) -> Vec<PathBuf> {
    debug vs => _2;
    let mut _0: std::vec::Vec<std::path::PathBuf>;
    let mut _3: std::iter::Map<clap::Values<'_>, fn(&str) -> std::path::PathBuf {<std::path::PathBuf as std::convert::From<&str>>::from}>;

    bb0: {
        _3 = <clap::Values<'_> as Iterator>::map::<PathBuf, fn(&str) -> PathBuf {<PathBuf as From<&str>>::from}>(move _2, <PathBuf as From<&str>>::from) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<clap::Values<'_>, fn(&str) -> PathBuf {<PathBuf as From<&str>>::from}> as Iterator>::collect::<Vec<PathBuf>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn run::{closure#20}(_1: {closure@src/main.rs:421:18: 421:21}, _2: &str) -> Result<usize, ParseIntError> {
    debug n => _2;
    let mut _0: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _0 = core::num::<impl usize>::from_str_radix(_2, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn run::{closure#21}(_1: {closure@src/main.rs:424:21: 424:25}, _2: &usize) -> bool {
    let mut _0: bool;
    let _3: usize;
    scope 1 {
        debug n => _3;
    }

    bb0: {
        _3 = (*_2);
        _0 = Gt(_3, const 0_usize);
        return;
    }
}

fn run::{closure#22}(_1: {closure@src/main.rs:425:22: 425:24}) -> Option<usize> {
    debug matches => (*(_1.0: &clap::ArgMatches<'_>));
    let mut _0: std::option::Option<usize>;
    let mut _2: bool;
    let mut _3: &clap::ArgMatches<'_>;

    bb0: {
        _3 = deref_copy (_1.0: &clap::ArgMatches<'_>);
        _2 = ArgMatches::<'_>::is_present::<&str>(_3, const "max-one-result") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = Option::<usize>::Some(const 1_usize);
        goto -> bb4;
    }

    bb3: {
        _0 = Option::<usize>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn run::{closure#23}(_1: {closure@src/main.rs:449:18: 449:21}, _2: regex::Error) -> anyhow::Error {
    debug e => _2;
    let mut _0: anyhow::Error;
    let mut _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: std::string::String;
    let mut _13: &regex::Error;
    let mut _14: &[&str; 2];
    scope 1 {
        debug res => _4;
    }

    bb0: {
        _14 = const _;
        _6 = _14 as &[&str] (PointerCoercion(Unsize));
        _13 = &_2;
        _12 = <regex::Error as ToString>::to_string(move _13) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _4 = format(move _5) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        drop(_12) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _3 = move _4;
        _0 = new_adhoc::<String>(move _3) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_12) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in run::{closure#23}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n\nNote: You can use the '--fixed-strings' option to search for a literal string instead of a regular expression. Alternatively, you can also use the '--glob' option to match on a glob pattern."];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<exit_codes::ExitCode, anyhow::Error>;
    let mut _2: isize;
    let _4: !;
    let mut _5: i32;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &anyhow::Error;
    let mut _15: &[core::fmt::rt::Placeholder];
    let _16: &[core::fmt::rt::Placeholder; 1];
    let _17: [core::fmt::rt::Placeholder; 1];
    let mut _18: core::fmt::rt::Placeholder;
    let mut _19: core::fmt::rt::Alignment;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::Count;
    let mut _22: core::fmt::rt::UnsafeArg;
    let _23: !;
    let mut _24: i32;
    let mut _25: exit_codes::ExitCode;
    scope 1 {
        debug result => _1;
        let _3: exit_codes::ExitCode;
        let _6: anyhow::Error;
        scope 2 {
            debug exit_code => _3;
        }
        scope 3 {
            debug err => _6;
            let mut _26: &[&str; 2];
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = run() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_1 as Err).0: anyhow::Error);
        _26 = const _;
        _9 = _26 as &[&str] (PointerCoercion(Unsize));
        _14 = &_6;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<anyhow::Error>(_14) -> [return: bb6, unwind: bb12];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _3 = ((_1 as Ok).0: exit_codes::ExitCode);
        _5 = <exit_codes::ExitCode as Into<i32>>::into(_3) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = exit(move _5) -> unwind continue;
    }

    bb6: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = core::fmt::rt::Alignment::Unknown;
        _20 = core::fmt::rt::Count::Implied;
        _21 = core::fmt::rt::Count::Implied;
        _18 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _19, const 4_u32, move _20, move _21) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _22 = core::fmt::rt::UnsafeArg::new() -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _8 = Arguments::<'_>::new_v1_formatted(move _9, move _10, move _15, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _7 = _eprint(move _8) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _25 = exit_codes::ExitCode::GeneralError;
        _24 = <exit_codes::ExitCode as Into<i32>>::into(move _25) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _23 = exit(move _24) -> bb12;
    }

    bb12 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[fd error]: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn Token::Text(_1: String) -> Token {
    let mut _0: exec::token::Token;

    bb0: {
        _0 = Token::Text(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Token::Text(_1: String) -> Token {
    let mut _0: exec::token::Token;

    bb0: {
        _0 = Token::Text(move _1);
        return;
    }
}

fn ArgumentTemplate::Tokens(_1: Vec<Token>) -> ArgumentTemplate {
    let mut _0: exec::ArgumentTemplate;

    bb0: {
        _0 = ArgumentTemplate::Tokens(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ArgumentTemplate::Tokens(_1: Vec<Token>) -> ArgumentTemplate {
    let mut _0: exec::ArgumentTemplate;

    bb0: {
        _0 = ArgumentTemplate::Tokens(move _1);
        return;
    }
}

fn ArgumentTemplate::Text(_1: String) -> ArgumentTemplate {
    let mut _0: exec::ArgumentTemplate;

    bb0: {
        _0 = ArgumentTemplate::Text(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ArgumentTemplate::Text(_1: String) -> ArgumentTemplate {
    let mut _0: exec::ArgumentTemplate;

    bb0: {
        _0 = ArgumentTemplate::Text(move _1);
        return;
    }
}

fn SizeFilter::Max(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Max(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SizeFilter::Max(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Max(move _1);
        return;
    }
}

fn SizeFilter::Min(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Min(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SizeFilter::Min(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Min(move _1);
        return;
    }
}

fn SizeFilter::Equals(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Equals(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SizeFilter::Equals(_1: u64) -> SizeFilter {
    let mut _0: filter::size::SizeFilter;

    bb0: {
        _0 = SizeFilter::Equals(move _1);
        return;
    }
}

fn TimeFilter::Before(_1: SystemTime) -> TimeFilter {
    let mut _0: filter::time::TimeFilter;

    bb0: {
        _0 = TimeFilter::Before(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TimeFilter::Before(_1: SystemTime) -> TimeFilter {
    let mut _0: filter::time::TimeFilter;

    bb0: {
        _0 = TimeFilter::Before(move _1);
        return;
    }
}

fn TimeFilter::After(_1: SystemTime) -> TimeFilter {
    let mut _0: filter::time::TimeFilter;

    bb0: {
        _0 = TimeFilter::After(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TimeFilter::After(_1: SystemTime) -> TimeFilter {
    let mut _0: filter::time::TimeFilter;

    bb0: {
        _0 = TimeFilter::After(move _1);
        return;
    }
}

fn Check::Equal(_1: T) -> Check<T> {
    let mut _0: filter::owner::Check<T>;

    bb0: {
        _0 = Check::<T>::Equal(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Check::Equal(_1: T) -> Check<T> {
    let mut _0: filter::owner::Check<T>;

    bb0: {
        _0 = Check::<T>::Equal(move _1);
        return;
    }
}

fn Check::NotEq(_1: T) -> Check<T> {
    let mut _0: filter::owner::Check<T>;

    bb0: {
        _0 = Check::<T>::NotEq(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Check::NotEq(_1: T) -> Check<T> {
    let mut _0: filter::owner::Check<T>;

    bb0: {
        _0 = Check::<T>::NotEq(move _1);
        return;
    }
}

fn WorkerResult::Entry(_1: PathBuf) -> WorkerResult {
    let mut _0: walk::WorkerResult;

    bb0: {
        _0 = WorkerResult::Entry(move _1);
        return;
    }
}

// MIR FOR CTFE
fn WorkerResult::Entry(_1: PathBuf) -> WorkerResult {
    let mut _0: walk::WorkerResult;

    bb0: {
        _0 = WorkerResult::Entry(move _1);
        return;
    }
}

fn WorkerResult::Error(_1: ignore::Error) -> WorkerResult {
    let mut _0: walk::WorkerResult;

    bb0: {
        _0 = WorkerResult::Error(move _1);
        return;
    }
}

// MIR FOR CTFE
fn WorkerResult::Error(_1: ignore::Error) -> WorkerResult {
    let mut _0: walk::WorkerResult;

    bb0: {
        _0 = WorkerResult::Error(move _1);
        return;
    }
}

fn walk::DirEntry::Normal(_1: ignore::DirEntry) -> walk::DirEntry {
    let mut _0: walk::DirEntry;

    bb0: {
        _0 = walk::DirEntry::Normal(move _1);
        return;
    }
}

// MIR FOR CTFE
fn walk::DirEntry::Normal(_1: ignore::DirEntry) -> walk::DirEntry {
    let mut _0: walk::DirEntry;

    bb0: {
        _0 = walk::DirEntry::Normal(move _1);
        return;
    }
}

fn walk::DirEntry::BrokenSymlink(_1: PathBuf) -> walk::DirEntry {
    let mut _0: walk::DirEntry;

    bb0: {
        _0 = walk::DirEntry::BrokenSymlink(move _1);
        return;
    }
}

// MIR FOR CTFE
fn walk::DirEntry::BrokenSymlink(_1: PathBuf) -> walk::DirEntry {
    let mut _0: walk::DirEntry;

    bb0: {
        _0 = walk::DirEntry::BrokenSymlink(move _1);
        return;
    }
}
