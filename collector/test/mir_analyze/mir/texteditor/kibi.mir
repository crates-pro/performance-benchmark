// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> Result<(), kibi::Error> {
    let mut _0: std::result::Result<(), kibi::Error>;
    let mut _1: std::env::Args;
    let mut _2: (std::option::Option<std::string::String>, std::option::Option<std::string::String>);
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: &mut std::env::Args;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: kibi::Error;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: &std::env::Args;
    let mut _14: (usize, bool);
    let mut _17: bool;
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, kibi::Error>>;
    let mut _23: std::result::Result<(), kibi::Error>;
    let mut _24: &mut kibi::Editor;
    let mut _25: kibi::Editor;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, kibi::Error>, kibi::Editor>;
    let mut _27: std::result::Result<kibi::Editor, kibi::Error>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, kibi::Error>, kibi::Config>;
    let mut _29: std::result::Result<kibi::Config, kibi::Error>;
    let mut _30: isize;
    let mut _33: isize;
    let mut _36: std::option::Option<std::string::String>;
    let mut _37: isize;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    scope 1 {
        debug args => _1;
        let _15: std::string::String;
        let _16: &std::string::String;
        let _21: std::option::Option<std::string::String>;
        let mut _40: &&str;
        scope 2 {
            debug arg => _15;
            debug arg => _16;
            let mut _39: &[&str; 1];
        }
        scope 3 {
            debug file_name => _21;
            let _31: std::result::Result<std::convert::Infallible, kibi::Error>;
            let _32: kibi::Config;
            let _34: std::result::Result<std::convert::Infallible, kibi::Error>;
            let _35: kibi::Editor;
            let _38: std::result::Result<std::convert::Infallible, kibi::Error>;
            scope 4 {
                debug residual => _31;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _32;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _34;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _35;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _38;
                scope 13 {
                }
            }
            scope 14 {
                debug val => const ();
                scope 15 {
                }
            }
        }
    }

    bb0: {
        _42 = const false;
        _41 = const false;
        _43 = const false;
        _1 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Args as Iterator>::nth(move _4, const 1_usize) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _6 = &mut _1;
        _5 = <Args as Iterator>::nth(move _6, const 2_usize) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        _41 = const true;
        _43 = const true;
        _2 = (move _3, move _5);
        _9 = discriminant((_2.1: std::option::Option<std::string::String>));
        switchInt(move _9) -> [1: bb8, otherwise: bb4];
    }

    bb4: {
        _8 = discriminant((_2.0: std::option::Option<std::string::String>));
        switchInt(move _8) -> [1: bb11, otherwise: bb5];
    }

    bb5: {
        _7 = discriminant((_2.1: std::option::Option<std::string::String>));
        switchInt(move _7) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _41 = const false;
        _43 = const false;
        _42 = const true;
        _21 = move (_2.0: std::option::Option<std::string::String>);
        _29 = kibi::Config::load() -> [return: bb16, unwind: bb49];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _13 = &_1;
        _12 = <Args as ExactSizeIterator>::len(move _13) -> [return: bb9, unwind: bb54];
    }

    bb9: {
        _14 = CheckedSub(_12, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _12, const 1_usize) -> [success: bb10, unwind: bb54];
    }

    bb10: {
        _11 = move (_14.0: usize);
        _10 = TooManyArguments(move _11);
        _0 = Result::<(), kibi::Error>::Err(move _10);
        goto -> bb47;
    }

    bb11: {
        _16 = &(((_2.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _40 = const _;
        _17 = <String as PartialEq<&str>>::eq(_16, _40) -> [return: bb12, unwind: bb54];
    }

    bb12: {
        switchInt(move _17) -> [0: bb5, otherwise: bb13];
    }

    bb13: {
        _43 = const false;
        _15 = move (((_2.0: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _39 = const _;
        _20 = _39 as &[&str] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_const(move _20) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _18 = _print(move _19) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        drop(_15) -> [return: bb39, unwind: bb54];
    }

    bb16: {
        _28 = <Result<kibi::Config, kibi::Error> as Try>::branch(move _29) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb18, 1: bb19, otherwise: bb7];
    }

    bb18: {
        _32 = move ((_28 as Continue).0: kibi::Config);
        _27 = Editor::new(move _32) -> [return: bb20, unwind: bb49];
    }

    bb19: {
        _31 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, kibi::Error>);
        _0 = <Result<(), kibi::Error> as FromResidual<Result<Infallible, kibi::Error>>>::from_residual(move _31) -> [return: bb55, unwind: bb49];
    }

    bb20: {
        _26 = <Result<Editor, kibi::Error> as Try>::branch(move _27) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _33 = discriminant(_26);
        switchInt(move _33) -> [0: bb22, 1: bb23, otherwise: bb7];
    }

    bb22: {
        _35 = move ((_26 as Continue).0: kibi::Editor);
        _25 = move _35;
        _24 = &mut _25;
        _42 = const false;
        _36 = move _21;
        _23 = Editor::run(move _24, move _36) -> [return: bb24, unwind: bb32];
    }

    bb23: {
        _34 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, kibi::Error>);
        _0 = <Result<(), kibi::Error> as FromResidual<Result<Infallible, kibi::Error>>>::from_residual(move _34) -> [return: bb56, unwind: bb49];
    }

    bb24: {
        _22 = <Result<(), kibi::Error> as Try>::branch(move _23) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _37 = discriminant(_22);
        switchInt(move _37) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        drop(_25) -> [return: bb37, unwind: bb49];
    }

    bb27: {
        _38 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, kibi::Error>);
        _0 = <Result<(), kibi::Error> as FromResidual<Result<Infallible, kibi::Error>>>::from_residual(move _38) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_25) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        switchInt(_42) -> [0: bb30, otherwise: bb40];
    }

    bb30: {
        _42 = const false;
        goto -> bb47;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_25) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_15) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_1) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37: {
        _42 = const false;
        goto -> bb39;
    }

    bb38: {
        _41 = const false;
        _43 = const false;
        _0 = Result::<(), kibi::Error>::Ok(const ());
        drop(_1) -> [return: bb31, unwind continue];
    }

    bb39: {
        _41 = const false;
        drop((_2.1: std::option::Option<std::string::String>)) -> [return: bb38, unwind: bb35];
    }

    bb40: {
        drop(_21) -> [return: bb30, unwind: bb54];
    }

    bb41: {
        _41 = const false;
        _43 = const false;
        drop(_1) -> [return: bb31, unwind continue];
    }

    bb42 (cleanup): {
        drop((_2.1: std::option::Option<std::string::String>)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb43: {
        _41 = const false;
        drop((_2.1: std::option::Option<std::string::String>)) -> [return: bb41, unwind: bb35];
    }

    bb44: {
        switchInt(_43) -> [0: bb43, otherwise: bb45];
    }

    bb45: {
        drop((((_2.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb43, unwind: bb42];
    }

    bb46: {
        _44 = discriminant((_2.0: std::option::Option<std::string::String>));
        switchInt(move _44) -> [1: bb44, otherwise: bb43];
    }

    bb47: {
        switchInt(_41) -> [0: bb43, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_21) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_42) -> [0: bb54, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop((_2.1: std::option::Option<std::string::String>)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_43) -> [0: bb50, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((((_2.0: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        _45 = discriminant((_2.0: std::option::Option<std::string::String>));
        switchInt(move _45) -> [1: bb51, otherwise: bb50];
    }

    bb54 (cleanup): {
        switchInt(_41) -> [0: bb50, otherwise: bb53];
    }

    bb55: {
        goto -> bb29;
    }

    bb56: {
        goto -> bb29;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "kibi, v0.2.1\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "--version";
        _0 = &_1;
        return;
    }
}
