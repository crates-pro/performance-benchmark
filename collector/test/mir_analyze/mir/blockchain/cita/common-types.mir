// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn block::<impl at cita-chain/types/src/block.rs:29:10: 29:17>::default() -> OpenBlock {
    let mut _0: block::OpenBlock;        // return place in scope 0 at cita-chain/types/src/block.rs:29:10: 29:17
    let mut _1: header::OpenHeader;      // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _2: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24

    bb0: {
        _1 = <OpenHeader as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:32:5: 32:27
                                         // + literal: Const { ty: fn() -> OpenHeader {<OpenHeader as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <block::BlockBody as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:34:5: 34:24
                                         // + literal: Const { ty: fn() -> block::BlockBody {<block::BlockBody as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = OpenBlock { header: move _1, body: move _2 }; // scope 0 at cita-chain/types/src/block.rs:29:10: 29:17
        return;                          // scope 0 at cita-chain/types/src/block.rs:29:17: 29:17
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at cita-chain/types/src/block.rs:29:16: 29:17
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:29:10: 29:17
    }
}

fn block::<impl at cita-chain/types/src/block.rs:29:19: 29:24>::fmt(_1: &OpenBlock, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let _6: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let _7: &str;                        // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let _9: &&block::BlockBody;          // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let _10: &block::BlockBody;          // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24

    bb0: {
        _3 = const "OpenBlock";          // scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:29:19: 29:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "header";             // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:32:5: 32:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
        _7 = const "body";               // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:34:5: 34:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _9 = &_10;                       // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-chain/types/src/block.rs:29:19: 29:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:29:19: 29:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:29:24: 29:24
    }
}

fn block::<impl at cita-chain/types/src/block.rs:29:26: 29:31>::clone(_1: &OpenBlock) -> OpenBlock {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:29:26: 29:31
    let mut _0: block::OpenBlock;        // return place in scope 0 at cita-chain/types/src/block.rs:29:26: 29:31
    let mut _2: header::OpenHeader;      // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let _3: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _4: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let _5: &block::BlockBody;           // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24

    bb0: {
        _3 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
        _2 = <OpenHeader as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:32:5: 32:27
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> OpenHeader {<OpenHeader as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _4 = <block::BlockBody as Clone>::clone(_5) -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:34:5: 34:24
                                         // + literal: Const { ty: for<'a> fn(&'a block::BlockBody) -> block::BlockBody {<block::BlockBody as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = OpenBlock { header: move _2, body: move _4 }; // scope 0 at cita-chain/types/src/block.rs:29:26: 29:31
        return;                          // scope 0 at cita-chain/types/src/block.rs:29:31: 29:31
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/block.rs:29:30: 29:31
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:29:26: 29:31
    }
}

fn block::<impl at cita-chain/types/src/block.rs:29:33: 29:42>::eq(_1: &OpenBlock, _2: &OpenBlock) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:29:33: 29:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/block.rs:29:33: 29:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/block.rs:29:33: 29:42
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _4: &header::OpenHeader;     // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _5: &header::OpenHeader;     // in scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let mut _7: &block::BlockBody;       // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    let mut _8: &block::BlockBody;       // in scope 0 at cita-chain/types/src/block.rs:34:5: 34:24

    bb0: {
        _4 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
        _5 = &((*_2).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
        _3 = <OpenHeader as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at cita-chain/types/src/block.rs:32:5: 32:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:32:5: 32:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a OpenHeader, &'b OpenHeader) -> bool {<OpenHeader as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        goto -> bb3;                     // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    }

    bb2: {
        _7 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _8 = &((*_2).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        _6 = <block::BlockBody as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:34:5: 34:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a block::BlockBody, &'b block::BlockBody) -> bool {<block::BlockBody as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:29:42: 29:42
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    }

    bb5: {
        _0 = move _6;                    // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
        goto -> bb3;                     // scope 0 at cita-chain/types/src/block.rs:34:5: 34:24
    }
}

fn block::<impl at cita-chain/types/src/block.rs:37:1: 37:36>::from(_1: libproto::Block) -> OpenBlock {
    debug b => _1;                       // in scope 0 at cita-chain/types/src/block.rs:38:13: 38:14
    let mut _0: block::OpenBlock;        // return place in scope 0 at cita-chain/types/src/block.rs:38:31: 38:35
    let _2: header::OpenHeader;          // in scope 0 at cita-chain/types/src/block.rs:39:13: 39:19
    let _3: &libproto::Block;            // in scope 0 at cita-chain/types/src/block.rs:39:48: 39:50
    let mut _4: header::OpenHeader;      // in scope 0 at cita-chain/types/src/block.rs:41:13: 41:19
    let mut _5: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:42:19: 42:56
    let mut _6: libproto::BlockBody;     // in scope 0 at cita-chain/types/src/block.rs:42:35: 42:55
    let mut _7: &libproto::BlockBody;    // in scope 0 at cita-chain/types/src/block.rs:42:35: 42:55
    let _8: &libproto::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:42:35: 42:47
    let mut _9: &libproto::Block;        // in scope 0 at cita-chain/types/src/block.rs:42:35: 42:47
    scope 1 {
        debug header => _2;              // in scope 1 at cita-chain/types/src/block.rs:39:13: 39:19
    }

    bb0: {
        _3 = &_1;                        // scope 0 at cita-chain/types/src/block.rs:39:48: 39:50
        _2 = OpenHeader::from_protobuf(_3) -> [return: bb1, unwind: bb7]; // scope 0 at cita-chain/types/src/block.rs:39:22: 39:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:39:22: 39:47
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Block) -> OpenHeader {OpenHeader::from_protobuf}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 1 at cita-chain/types/src/block.rs:41:13: 41:19
        _9 = &_1;                        // scope 1 at cita-chain/types/src/block.rs:42:35: 42:47
        _8 = libproto::Block::get_body(move _9) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/types/src/block.rs:42:35: 42:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:42:37: 42:45
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Block) -> &'a libproto::BlockBody {libproto::Block::get_body}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 1 at cita-chain/types/src/block.rs:42:35: 42:55
        _6 = <libproto::BlockBody as Clone>::clone(move _7) -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/types/src/block.rs:42:35: 42:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:42:48: 42:53
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockBody) -> libproto::BlockBody {<libproto::BlockBody as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = <block::BlockBody as From<libproto::BlockBody>>::from(move _6) -> [return: bb4, unwind: bb6]; // scope 1 at cita-chain/types/src/block.rs:42:19: 42:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:42:19: 42:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(libproto::BlockBody) -> block::BlockBody {<block::BlockBody as From<libproto::BlockBody>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = OpenBlock { header: move _4, body: move _5 }; // scope 1 at cita-chain/types/src/block.rs:40:9: 43:10
        drop(_1) -> bb5;                 // scope 0 at cita-chain/types/src/block.rs:44:5: 44:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:44:6: 44:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 1 at cita-chain/types/src/block.rs:43:9: 43:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at cita-chain/types/src/block.rs:44:5: 44:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:38:5: 44:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:47:1: 47:25>::deref(_1: &OpenBlock) -> &OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:50:14: 50:19
    let mut _0: &header::OpenHeader;     // return place in scope 0 at cita-chain/types/src/block.rs:51:9: 51:21

    bb0: {
        _0 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:51:9: 51:21
        return;                          // scope 0 at cita-chain/types/src/block.rs:52:6: 52:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:55:1: 55:28>::deref_mut(_1: &mut OpenBlock) -> &mut OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:56:18: 56:27
    let mut _0: &mut header::OpenHeader; // return place in scope 0 at cita-chain/types/src/block.rs:57:9: 57:25

    bb0: {
        _0 = &mut ((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:57:9: 57:25
        return;                          // scope 0 at cita-chain/types/src/block.rs:58:6: 58:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:61:1: 61:15>::body(_1: &OpenBlock) -> &block::BlockBody {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:62:17: 62:22
    let mut _0: &block::BlockBody;       // return place in scope 0 at cita-chain/types/src/block.rs:63:9: 63:19

    bb0: {
        _0 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:63:9: 63:19
        return;                          // scope 0 at cita-chain/types/src/block.rs:64:6: 64:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:61:1: 61:15>::header(_1: &OpenBlock) -> &OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:66:19: 66:24
    let mut _0: &header::OpenHeader;     // return place in scope 0 at cita-chain/types/src/block.rs:67:9: 67:21

    bb0: {
        _0 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:67:9: 67:21
        return;                          // scope 0 at cita-chain/types/src/block.rs:68:6: 68:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:61:1: 61:15>::set_header(_1: &mut OpenBlock, _2: OpenHeader) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:70:23: 70:32
    debug h => _2;                       // in scope 0 at cita-chain/types/src/block.rs:70:34: 70:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:70:49: 70:49

    bb0: {
        drop(((*_1).0: header::OpenHeader)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/block.rs:71:9: 71:20
    }

    bb1: {
        ((*_1).0: header::OpenHeader) = move _2; // scope 0 at cita-chain/types/src/block.rs:71:9: 71:20
        return;                          // scope 0 at cita-chain/types/src/block.rs:72:6: 72:6
    }

    bb2 (cleanup): {
        ((*_1).0: header::OpenHeader) = move _2; // scope 0 at cita-chain/types/src/block.rs:71:9: 71:20
        resume;                          // scope 0 at cita-chain/types/src/block.rs:70:5: 72:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:61:1: 61:15>::set_body(_1: &mut OpenBlock, _2: block::BlockBody) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:74:21: 74:30
    debug b => _2;                       // in scope 0 at cita-chain/types/src/block.rs:74:32: 74:33
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:74:46: 74:46

    bb0: {
        drop(((*_1).1: block::BlockBody)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/block.rs:75:9: 75:18
    }

    bb1: {
        ((*_1).1: block::BlockBody) = move _2; // scope 0 at cita-chain/types/src/block.rs:75:9: 75:18
        return;                          // scope 0 at cita-chain/types/src/block.rs:76:6: 76:6
    }

    bb2 (cleanup): {
        ((*_1).1: block::BlockBody) = move _2; // scope 0 at cita-chain/types/src/block.rs:75:9: 75:18
        resume;                          // scope 0 at cita-chain/types/src/block.rs:74:5: 76:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:80:10: 80:17>::default() -> block::Block {
    let mut _0: block::Block;            // return place in scope 0 at cita-chain/types/src/block.rs:80:10: 80:17
    let mut _1: header::Header;          // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _2: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24

    bb0: {
        _1 = <Header as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:83:5: 83:23
                                         // + literal: Const { ty: fn() -> Header {<Header as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <block::BlockBody as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:85:5: 85:24
                                         // + literal: Const { ty: fn() -> block::BlockBody {<block::BlockBody as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = block::Block { header: move _1, body: move _2 }; // scope 0 at cita-chain/types/src/block.rs:80:10: 80:17
        return;                          // scope 0 at cita-chain/types/src/block.rs:80:17: 80:17
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at cita-chain/types/src/block.rs:80:16: 80:17
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:80:10: 80:17
    }
}

fn block::<impl at cita-chain/types/src/block.rs:80:19: 80:24>::fmt(_1: &block::Block, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let _6: &header::Header;             // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let _7: &str;                        // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let _9: &&block::BlockBody;          // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let _10: &block::BlockBody;          // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24

    bb0: {
        _3 = const "Block";              // scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:80:19: 80:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "header";             // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:83:5: 83:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
        _7 = const "body";               // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:85:5: 85:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _9 = &_10;                       // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-chain/types/src/block.rs:80:19: 80:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:80:19: 80:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:80:24: 80:24
    }
}

fn block::<impl at cita-chain/types/src/block.rs:80:26: 80:31>::clone(_1: &block::Block) -> block::Block {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:80:26: 80:31
    let mut _0: block::Block;            // return place in scope 0 at cita-chain/types/src/block.rs:80:26: 80:31
    let mut _2: header::Header;          // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let _3: &header::Header;             // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _4: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let _5: &block::BlockBody;           // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24

    bb0: {
        _3 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
        _2 = <Header as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:83:5: 83:23
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _4 = <block::BlockBody as Clone>::clone(_5) -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:85:5: 85:24
                                         // + literal: Const { ty: for<'a> fn(&'a block::BlockBody) -> block::BlockBody {<block::BlockBody as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = block::Block { header: move _2, body: move _4 }; // scope 0 at cita-chain/types/src/block.rs:80:26: 80:31
        return;                          // scope 0 at cita-chain/types/src/block.rs:80:31: 80:31
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/block.rs:80:30: 80:31
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:80:26: 80:31
    }
}

fn block::<impl at cita-chain/types/src/block.rs:80:33: 80:42>::eq(_1: &block::Block, _2: &block::Block) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:80:33: 80:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/block.rs:80:33: 80:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/block.rs:80:33: 80:42
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _4: &header::Header;         // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _5: &header::Header;         // in scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let mut _7: &block::BlockBody;       // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    let mut _8: &block::BlockBody;       // in scope 0 at cita-chain/types/src/block.rs:85:5: 85:24

    bb0: {
        _4 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
        _5 = &((*_2).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
        _3 = <Header as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at cita-chain/types/src/block.rs:83:5: 83:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:83:5: 83:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Header, &'b Header) -> bool {<Header as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        goto -> bb3;                     // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    }

    bb2: {
        _7 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _8 = &((*_2).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        _6 = <block::BlockBody as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:85:5: 85:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a block::BlockBody, &'b block::BlockBody) -> bool {<block::BlockBody as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:80:42: 80:42
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    }

    bb5: {
        _0 = move _6;                    // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
        goto -> bb3;                     // scope 0 at cita-chain/types/src/block.rs:85:5: 85:24
    }
}

fn block::<impl at cita-chain/types/src/block.rs:88:1: 88:25>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<block::Block, rlp::DecoderError> {
    debug r => _1;                       // in scope 0 at cita-chain/types/src/block.rs:89:15: 89:16
    let mut _0: std::result::Result<block::Block, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/block.rs:89:36: 89:62
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:90:12: 90:26
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/block.rs:90:26: 90:27
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:90:26: 90:27
    let _6: usize;                       // in scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
    let mut _7: rlp::DecoderError;       // in scope 0 at cita-chain/types/src/block.rs:91:24: 91:57
    let mut _8: block::Block;            // in scope 0 at cita-chain/types/src/block.rs:93:12: 96:10
    let mut _9: header::Header;          // in scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, header::Header>; // in scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
    let mut _11: std::result::Result<header::Header, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:94:21: 94:32
    let mut _12: isize;                  // in scope 0 at cita-chain/types/src/block.rs:94:32: 94:33
    let _13: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:94:32: 94:33
    let _14: header::Header;             // in scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, block::BlockBody>; // in scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
    let mut _16: std::result::Result<block::BlockBody, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:95:19: 95:30
    let mut _17: isize;                  // in scope 0 at cita-chain/types/src/block.rs:95:30: 95:31
    let _18: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:95:30: 95:31
    let _19: block::BlockBody;           // in scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/block.rs:90:26: 90:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/block.rs:90:12: 90:27
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _13;           // in scope 5 at cita-chain/types/src/block.rs:94:32: 94:33
        scope 6 {
        }
    }
    scope 7 {
        debug val => _14;                // in scope 7 at cita-chain/types/src/block.rs:94:21: 94:33
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _18;           // in scope 9 at cita-chain/types/src/block.rs:95:30: 95:31
        scope 10 {
        }
    }
    scope 11 {
        debug val => _19;                // in scope 11 at cita-chain/types/src/block.rs:95:19: 95:31
        scope 12 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/types/src/block.rs:90:12: 90:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:90:14: 90:24
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:90:12: 90:27
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
        switchInt(move _6) -> [2: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/block.rs:90:12: 90:32
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/block.rs:90:12: 90:27
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/block.rs:90:26: 90:27
        _0 = <Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb19; // scope 2 at cita-chain/types/src/block.rs:90:12: 90:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:90:26: 90:27
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<block::Block, rlp::DecoderError> {<Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = RlpIncorrectListLen;        // scope 0 at cita-chain/types/src/block.rs:91:24: 91:57
        _0 = Result::<block::Block, rlp::DecoderError>::Err(move _7); // scope 0 at cita-chain/types/src/block.rs:91:20: 91:58
        goto -> bb19;                    // scope 0 at cita-chain/types/src/block.rs:91:13: 91:58
    }

    bb7: {
        _11 = rlp::UntrustedRlp::<'_>::val_at::<Header>(_1, const 0_usize) -> bb8; // scope 0 at cita-chain/types/src/block.rs:94:21: 94:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:94:23: 94:29
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Header, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Header>}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = <Result<Header, rlp::DecoderError> as Try>::branch(move _11) -> bb9; // scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:94:21: 94:33
                                         // + literal: Const { ty: fn(Result<Header, rlp::DecoderError>) -> ControlFlow<<Result<Header, rlp::DecoderError> as Try>::Residual, <Result<Header, rlp::DecoderError> as Try>::Output> {<Result<Header, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = discriminant(_10);         // scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
        switchInt(move _12) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
    }

    bb10: {
        _14 = move ((_10 as Continue).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
        _9 = move _14;                   // scope 8 at cita-chain/types/src/block.rs:94:21: 94:33
        _16 = rlp::UntrustedRlp::<'_>::val_at::<block::BlockBody>(_1, const 1_usize) -> [return: bb13, unwind: bb21]; // scope 0 at cita-chain/types/src/block.rs:95:19: 95:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:95:21: 95:27
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<block::BlockBody, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<block::BlockBody>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/types/src/block.rs:94:21: 94:33
    }

    bb12: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/block.rs:94:32: 94:33
        _0 = <Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _13) -> bb19; // scope 6 at cita-chain/types/src/block.rs:94:21: 94:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:94:32: 94:33
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<block::Block, rlp::DecoderError> {<Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = <Result<block::BlockBody, rlp::DecoderError> as Try>::branch(move _16) -> [return: bb14, unwind: bb21]; // scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:95:19: 95:31
                                         // + literal: Const { ty: fn(Result<block::BlockBody, rlp::DecoderError>) -> ControlFlow<<Result<block::BlockBody, rlp::DecoderError> as Try>::Residual, <Result<block::BlockBody, rlp::DecoderError> as Try>::Output> {<Result<block::BlockBody, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = discriminant(_15);         // scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
        switchInt(move _17) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
    }

    bb15: {
        _19 = move ((_15 as Continue).0: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
        _8 = block::Block { header: move _9, body: move _19 }; // scope 0 at cita-chain/types/src/block.rs:93:12: 96:10
        _0 = Result::<block::Block, rlp::DecoderError>::Ok(move _8); // scope 0 at cita-chain/types/src/block.rs:93:9: 96:11
        goto -> bb19;                    // scope 0 at cita-chain/types/src/block.rs:97:6: 97:6
    }

    bb16: {
        unreachable;                     // scope 0 at cita-chain/types/src/block.rs:95:19: 95:31
    }

    bb17: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/block.rs:95:30: 95:31
        _0 = <Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _18) -> [return: bb18, unwind: bb20]; // scope 10 at cita-chain/types/src/block.rs:95:19: 95:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:95:30: 95:31
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<block::Block, rlp::DecoderError> {<Result<block::Block, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_9) -> bb19;                // scope 0 at cita-chain/types/src/block.rs:96:9: 96:10
    }

    bb19: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:97:6: 97:6
    }

    bb20 (cleanup): {
        drop(_9) -> bb22;                // scope 0 at cita-chain/types/src/block.rs:96:9: 96:10
    }

    bb21 (cleanup): {
        drop(_9) -> bb22;                // scope 0 at cita-chain/types/src/block.rs:96:9: 96:10
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:89:5: 97:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:100:1: 100:25>::rlp_append(_1: &block::Block, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:101:19: 101:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/block.rs:101:26: 101:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:101:45: 101:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/block.rs:102:9: 102:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/block.rs:103:9: 103:31
    let _5: &header::Header;             // in scope 0 at cita-chain/types/src/block.rs:103:18: 103:30
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/block.rs:104:9: 104:29
    let _7: &block::BlockBody;           // in scope 0 at cita-chain/types/src/block.rs:104:18: 104:28

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 2_usize) -> bb1; // scope 0 at cita-chain/types/src/block.rs:102:9: 102:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:102:11: 102:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:103:18: 103:30
        _4 = rlp::RlpStream::append::<Header>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/block.rs:103:9: 103:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:103:11: 103:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Header) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Header>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:104:18: 104:28
        _6 = rlp::RlpStream::append::<block::BlockBody>(_2, _7) -> bb3; // scope 0 at cita-chain/types/src/block.rs:104:9: 104:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:104:11: 104:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b block::BlockBody) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<block::BlockBody>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:105:6: 105:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:108:1: 108:21>::deref(_1: &block::Block) -> &Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:111:14: 111:19
    let mut _0: &header::Header;         // return place in scope 0 at cita-chain/types/src/block.rs:112:9: 112:21

    bb0: {
        _0 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:112:9: 112:21
        return;                          // scope 0 at cita-chain/types/src/block.rs:113:6: 113:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:116:1: 116:24>::deref_mut(_1: &mut block::Block) -> &mut Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:117:18: 117:27
    let mut _0: &mut header::Header;     // return place in scope 0 at cita-chain/types/src/block.rs:118:9: 118:25

    bb0: {
        _0 = &mut ((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:118:9: 118:25
        return;                          // scope 0 at cita-chain/types/src/block.rs:119:6: 119:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::body(_1: &block::Block) -> &block::BlockBody {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:123:17: 123:22
    let mut _0: &block::BlockBody;       // return place in scope 0 at cita-chain/types/src/block.rs:124:9: 124:19

    bb0: {
        _0 = &((*_1).1: block::BlockBody); // scope 0 at cita-chain/types/src/block.rs:124:9: 124:19
        return;                          // scope 0 at cita-chain/types/src/block.rs:125:6: 125:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::header(_1: &block::Block) -> &Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:127:19: 127:24
    let mut _0: &header::Header;         // return place in scope 0 at cita-chain/types/src/block.rs:128:9: 128:21

    bb0: {
        _0 = &((*_1).0: header::Header); // scope 0 at cita-chain/types/src/block.rs:128:9: 128:21
        return;                          // scope 0 at cita-chain/types/src/block.rs:129:6: 129:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::set_header(_1: &mut block::Block, _2: Header) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:131:23: 131:32
    debug h => _2;                       // in scope 0 at cita-chain/types/src/block.rs:131:34: 131:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:131:45: 131:45

    bb0: {
        drop(((*_1).0: header::Header)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/block.rs:132:9: 132:20
    }

    bb1: {
        ((*_1).0: header::Header) = move _2; // scope 0 at cita-chain/types/src/block.rs:132:9: 132:20
        return;                          // scope 0 at cita-chain/types/src/block.rs:133:6: 133:6
    }

    bb2 (cleanup): {
        ((*_1).0: header::Header) = move _2; // scope 0 at cita-chain/types/src/block.rs:132:9: 132:20
        resume;                          // scope 0 at cita-chain/types/src/block.rs:131:5: 133:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::set_body(_1: &mut block::Block, _2: block::BlockBody) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:135:21: 135:30
    debug b => _2;                       // in scope 0 at cita-chain/types/src/block.rs:135:32: 135:33
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:135:46: 135:46

    bb0: {
        drop(((*_1).1: block::BlockBody)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/block.rs:136:9: 136:18
    }

    bb1: {
        ((*_1).1: block::BlockBody) = move _2; // scope 0 at cita-chain/types/src/block.rs:136:9: 136:18
        return;                          // scope 0 at cita-chain/types/src/block.rs:137:6: 137:6
    }

    bb2 (cleanup): {
        ((*_1).1: block::BlockBody) = move _2; // scope 0 at cita-chain/types/src/block.rs:136:9: 136:18
        resume;                          // scope 0 at cita-chain/types/src/block.rs:135:5: 137:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::protobuf(_1: &block::Block) -> libproto::Block {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:139:21: 139:26
    let mut _0: libproto::Block;         // return place in scope 0 at cita-chain/types/src/block.rs:140:13: 140:22
    let _2: ();                          // in scope 0 at cita-chain/types/src/block.rs:141:9: 141:42
    let mut _3: &mut libproto::Block;    // in scope 0 at cita-chain/types/src/block.rs:141:9: 141:42
    let mut _4: u32;                     // in scope 0 at cita-chain/types/src/block.rs:141:27: 141:41
    let mut _5: &header::OpenHeader;     // in scope 0 at cita-chain/types/src/block.rs:141:27: 141:41
    let _6: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/block.rs:141:27: 141:41
    let mut _7: &header::Header;         // in scope 0 at cita-chain/types/src/block.rs:141:27: 141:41
    let _8: &header::Header;             // in scope 0 at cita-chain/types/src/block.rs:141:27: 141:41
    let _9: ();                          // in scope 0 at cita-chain/types/src/block.rs:142:9: 142:49
    let mut _10: &mut libproto::Block;   // in scope 0 at cita-chain/types/src/block.rs:142:9: 142:49
    let mut _11: libproto::BlockHeader;  // in scope 0 at cita-chain/types/src/block.rs:142:26: 142:48
    let mut _12: &header::Header;        // in scope 0 at cita-chain/types/src/block.rs:142:26: 142:48
    let _13: ();                         // in scope 0 at cita-chain/types/src/block.rs:143:9: 143:45
    let mut _14: &mut libproto::Block;   // in scope 0 at cita-chain/types/src/block.rs:143:9: 143:45
    let mut _15: libproto::BlockBody;    // in scope 0 at cita-chain/types/src/block.rs:143:24: 143:44
    let mut _16: &block::BlockBody;      // in scope 0 at cita-chain/types/src/block.rs:143:24: 143:44
    scope 1 {
        debug block => _0;               // in scope 1 at cita-chain/types/src/block.rs:140:13: 140:22
    }

    bb0: {
        _0 = libproto::Block::new() -> bb1; // scope 0 at cita-chain/types/src/block.rs:140:25: 140:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:140:25: 140:40
                                         // + literal: Const { ty: fn() -> libproto::Block {libproto::Block::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/block.rs:141:9: 141:42
        _8 = <block::Block as Deref>::deref(_1) -> [return: bb2, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:141:27: 141:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:141:27: 141:41
                                         // + literal: Const { ty: for<'a> fn(&'a block::Block) -> &'a <block::Block as Deref>::Target {<block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 1 at cita-chain/types/src/block.rs:141:27: 141:41
        _6 = <Header as Deref>::deref(move _7) -> [return: bb3, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:141:27: 141:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:141:27: 141:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/block.rs:141:27: 141:41
        _4 = OpenHeader::version(move _5) -> [return: bb4, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:141:27: 141:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:141:32: 141:39
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u32 {OpenHeader::version}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = libproto::Block::set_version(move _3, move _4) -> [return: bb5, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:141:9: 141:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:141:15: 141:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block, u32) {libproto::Block::set_version}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &mut _0;                   // scope 1 at cita-chain/types/src/block.rs:142:9: 142:49
        _12 = &((*_1).0: header::Header); // scope 1 at cita-chain/types/src/block.rs:142:26: 142:48
        _11 = Header::protobuf(move _12) -> [return: bb6, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:142:26: 142:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:142:38: 142:46
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> libproto::BlockHeader {Header::protobuf}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = libproto::Block::set_header(move _10, move _11) -> [return: bb7, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:142:9: 142:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:142:15: 142:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block, libproto::BlockHeader) {libproto::Block::set_header}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &mut _0;                   // scope 1 at cita-chain/types/src/block.rs:143:9: 143:45
        _16 = &((*_1).1: block::BlockBody); // scope 1 at cita-chain/types/src/block.rs:143:24: 143:44
        _15 = block::BlockBody::protobuf(move _16) -> [return: bb8, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:143:24: 143:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:143:34: 143:42
                                         // + literal: Const { ty: for<'a> fn(&'a block::BlockBody) -> libproto::BlockBody {block::BlockBody::protobuf}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = libproto::Block::set_body(move _14, move _15) -> [return: bb9, unwind: bb10]; // scope 1 at cita-chain/types/src/block.rs:143:9: 143:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:143:15: 143:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Block, libproto::BlockBody) {libproto::Block::set_body}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:145:6: 145:6
    }

    bb10 (cleanup): {
        drop(_0) -> bb11;                // scope 0 at cita-chain/types/src/block.rs:145:5: 145:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:139:5: 145:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:122:1: 122:11>::new(_1: OpenBlock) -> block::Block {
    debug block => _1;                   // in scope 0 at cita-chain/types/src/block.rs:147:16: 147:21
    let mut _0: block::Block;            // return place in scope 0 at cita-chain/types/src/block.rs:147:37: 147:41
    let _2: header::Header;              // in scope 0 at cita-chain/types/src/block.rs:148:13: 148:19
    let mut _3: header::OpenHeader;      // in scope 0 at cita-chain/types/src/block.rs:148:34: 148:46
    let mut _4: header::Header;          // in scope 0 at cita-chain/types/src/block.rs:150:13: 150:19
    let mut _5: block::BlockBody;        // in scope 0 at cita-chain/types/src/block.rs:151:19: 151:29
    scope 1 {
        debug header => _2;              // in scope 1 at cita-chain/types/src/block.rs:148:13: 148:19
    }

    bb0: {
        _3 = move (_1.0: header::OpenHeader); // scope 0 at cita-chain/types/src/block.rs:148:34: 148:46
        _2 = Header::new(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-chain/types/src/block.rs:148:22: 148:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:148:22: 148:33
                                         // + literal: Const { ty: fn(OpenHeader) -> Header {Header::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 1 at cita-chain/types/src/block.rs:150:13: 150:19
        _5 = move (_1.1: block::BlockBody); // scope 1 at cita-chain/types/src/block.rs:151:19: 151:29
        _0 = block::Block { header: move _4, body: move _5 }; // scope 1 at cita-chain/types/src/block.rs:149:9: 152:10
        return;                          // scope 0 at cita-chain/types/src/block.rs:153:6: 153:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:147:5: 153:6
    }

    bb3 (cleanup): {
        drop((_1.1: block::BlockBody)) -> bb2; // scope 0 at cita-chain/types/src/block.rs:153:5: 153:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:157:10: 157:17>::default() -> block::BlockBody {
    let mut _0: block::BlockBody;        // return place in scope 0 at cita-chain/types/src/block.rs:157:10: 157:17
    let mut _1: std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45

    bb0: {
        _1 = <Vec<transaction::SignedTransaction> as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:160:5: 160:45
                                         // + literal: Const { ty: fn() -> Vec<transaction::SignedTransaction> {<Vec<transaction::SignedTransaction> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = block::BlockBody { transactions: move _1 }; // scope 0 at cita-chain/types/src/block.rs:157:10: 157:17
        return;                          // scope 0 at cita-chain/types/src/block.rs:157:17: 157:17
    }
}

fn block::<impl at cita-chain/types/src/block.rs:157:19: 157:24>::fmt(_1: &block::BlockBody, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
    let _6: &&std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
    let _7: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45

    bb0: {
        _3 = const "BlockBody";          // scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:157:19: 157:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "transactions";       // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:160:5: 160:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _6 = &_7;                        // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1; // scope 0 at cita-chain/types/src/block.rs:157:19: 157:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:157:19: 157:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:157:24: 157:24
    }
}

fn block::<impl at cita-chain/types/src/block.rs:157:26: 157:31>::clone(_1: &block::BlockBody) -> block::BlockBody {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:157:26: 157:31
    let mut _0: block::BlockBody;        // return place in scope 0 at cita-chain/types/src/block.rs:157:26: 157:31
    let mut _2: std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
    let _3: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _2 = <Vec<transaction::SignedTransaction> as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:160:5: 160:45
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<transaction::SignedTransaction>) -> Vec<transaction::SignedTransaction> {<Vec<transaction::SignedTransaction> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = block::BlockBody { transactions: move _2 }; // scope 0 at cita-chain/types/src/block.rs:157:26: 157:31
        return;                          // scope 0 at cita-chain/types/src/block.rs:157:31: 157:31
    }
}

fn block::<impl at cita-chain/types/src/block.rs:157:33: 157:42>::eq(_1: &block::BlockBody, _2: &block::BlockBody) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:157:33: 157:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/block.rs:157:33: 157:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/block.rs:157:33: 157:42
    let mut _3: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
    let mut _4: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:160:5: 160:45

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _4 = &((*_2).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
        _0 = <Vec<transaction::SignedTransaction> as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at cita-chain/types/src/block.rs:160:5: 160:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:160:5: 160:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<transaction::SignedTransaction>, &'b Vec<transaction::SignedTransaction>) -> bool {<Vec<transaction::SignedTransaction> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:157:42: 157:42
    }
}

fn block::<impl at cita-chain/types/src/block.rs:163:1: 163:29>::rlp_append(_1: &block::BlockBody, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:164:19: 164:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/block.rs:164:26: 164:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:164:50: 164:50
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/block.rs:165:9: 165:42
    let mut _4: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:165:23: 165:41
    let _5: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:165:23: 165:41
    let _6: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:165:23: 165:41

    bb0: {
        _6 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:165:23: 165:41
        _5 = <Vec<transaction::SignedTransaction> as Deref>::deref(_6) -> bb1; // scope 0 at cita-chain/types/src/block.rs:165:23: 165:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:165:23: 165:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<transaction::SignedTransaction>) -> &'a <Vec<transaction::SignedTransaction> as Deref>::Target {<Vec<transaction::SignedTransaction> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/block.rs:165:23: 165:41
        _3 = rlp::RlpStream::append_list::<transaction::SignedTransaction, transaction::SignedTransaction>(_2, move _4) -> bb2; // scope 0 at cita-chain/types/src/block.rs:165:9: 165:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:165:11: 165:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [transaction::SignedTransaction]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<transaction::SignedTransaction, transaction::SignedTransaction>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:166:6: 166:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:169:1: 169:29>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<block::BlockBody, rlp::DecoderError> {
    debug r => _1;                       // in scope 0 at cita-chain/types/src/block.rs:170:15: 170:16
    let mut _0: std::result::Result<block::BlockBody, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/block.rs:170:36: 170:62
    let _2: block::BlockBody;            // in scope 0 at cita-chain/types/src/block.rs:171:13: 171:23
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<transaction::SignedTransaction>>; // in scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
    let mut _4: std::result::Result<std::vec::Vec<transaction::SignedTransaction>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:172:27: 172:38
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/block.rs:172:38: 172:39
    let _6: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block.rs:172:38: 172:39
    let _7: std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
    scope 1 {
        debug block_body => _2;          // in scope 1 at cita-chain/types/src/block.rs:171:13: 171:23
    }
    scope 2 {
        debug residual => _6;            // in scope 2 at cita-chain/types/src/block.rs:172:38: 172:39
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;                 // in scope 4 at cita-chain/types/src/block.rs:172:27: 172:39
        scope 5 {
        }
    }

    bb0: {
        _4 = rlp::UntrustedRlp::<'_>::as_list::<transaction::SignedTransaction>(_1) -> bb1; // scope 0 at cita-chain/types/src/block.rs:172:27: 172:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:172:29: 172:36
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<Vec<transaction::SignedTransaction>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_list::<transaction::SignedTransaction>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<Vec<transaction::SignedTransaction>, rlp::DecoderError> as Try>::branch(move _4) -> bb2; // scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:172:27: 172:39
                                         // + literal: Const { ty: fn(Result<Vec<transaction::SignedTransaction>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<transaction::SignedTransaction>, rlp::DecoderError> as Try>::Residual, <Result<Vec<transaction::SignedTransaction>, rlp::DecoderError> as Try>::Output> {<Result<Vec<transaction::SignedTransaction>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
        _2 = block::BlockBody { transactions: move _7 }; // scope 0 at cita-chain/types/src/block.rs:171:26: 173:10
        _0 = Result::<block::BlockBody, rlp::DecoderError>::Ok(move _2); // scope 1 at cita-chain/types/src/block.rs:175:9: 175:23
        goto -> bb6;                     // scope 0 at cita-chain/types/src/block.rs:176:6: 176:6
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/block.rs:172:27: 172:39
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/block.rs:172:38: 172:39
        _0 = <Result<block::BlockBody, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _6) -> bb6; // scope 3 at cita-chain/types/src/block.rs:172:27: 172:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:172:38: 172:39
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<block::BlockBody, rlp::DecoderError> {<Result<block::BlockBody, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:176:6: 176:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:179:1: 179:40>::from(_1: libproto::BlockBody) -> block::BlockBody {
    debug body => _1;                    // in scope 0 at cita-chain/types/src/block.rs:180:13: 180:17
    let mut _0: block::BlockBody;        // return place in scope 0 at cita-chain/types/src/block.rs:180:38: 180:42
    let mut _2: std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:182:27: 186:27
    let mut _3: std::iter::Map<std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]>; // in scope 0 at cita-chain/types/src/block.rs:182:27: 185:98
    let mut _4: std::slice::Iter<'_, libproto::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:182:27: 184:24
    let mut _5: &[libproto::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:182:27: 184:24
    let _6: &[libproto::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:182:27: 183:36
    let mut _7: &libproto::BlockBody;    // in scope 0 at cita-chain/types/src/block.rs:182:27: 183:36

    bb0: {
        _7 = &_1;                        // scope 0 at cita-chain/types/src/block.rs:182:27: 183:36
        _6 = libproto::BlockBody::get_transactions(move _7) -> [return: bb1, unwind: bb6]; // scope 0 at cita-chain/types/src/block.rs:182:27: 183:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:183:18: 183:34
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockBody) -> &'a [libproto::SignedTransaction] {libproto::BlockBody::get_transactions}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/types/src/block.rs:182:27: 184:24
        _4 = core::slice::<impl [libproto::SignedTransaction]>::iter(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/types/src/block.rs:182:27: 184:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:184:18: 184:22
                                         // + literal: Const { ty: for<'a> fn(&'a [libproto::SignedTransaction]) -> std::slice::Iter<'a, libproto::SignedTransaction> {core::slice::<impl [libproto::SignedTransaction]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <std::slice::Iter<'_, libproto::SignedTransaction> as Iterator>::map::<transaction::SignedTransaction, [closure@cita-chain/types/src/block.rs:185:22: 185:25]>(move _4, const ZeroSized: [closure@cita-chain/types/src/block.rs:185:22: 185:25]) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/types/src/block.rs:182:27: 185:98
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:185:18: 185:21
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]) -> std::iter::Map<std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]> {<std::slice::Iter<'_, libproto::SignedTransaction> as Iterator>::map::<transaction::SignedTransaction, [closure@cita-chain/types/src/block.rs:185:22: 185:25]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/block.rs:185:22: 185:25], val: Value(<ZST>) }
    }

    bb3: {
        _2 = <std::iter::Map<std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]> as Iterator>::collect::<Vec<transaction::SignedTransaction>>(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at cita-chain/types/src/block.rs:182:27: 186:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:186:18: 186:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]>) -> Vec<transaction::SignedTransaction> {<std::iter::Map<std::slice::Iter<'_, libproto::SignedTransaction>, [closure@cita-chain/types/src/block.rs:185:22: 185:25]> as Iterator>::collect::<Vec<transaction::SignedTransaction>>}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = block::BlockBody { transactions: move _2 }; // scope 0 at cita-chain/types/src/block.rs:181:9: 187:10
        drop(_1) -> bb5;                 // scope 0 at cita-chain/types/src/block.rs:188:5: 188:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:188:6: 188:6
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at cita-chain/types/src/block.rs:188:5: 188:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:180:5: 188:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:179:1: 179:40>::from::{closure#0}(_1: &mut [closure@cita-chain/types/src/block.rs:185:22: 185:25], _2: &libproto::SignedTransaction) -> transaction::SignedTransaction {
    debug t => _2;                       // in scope 0 at cita-chain/types/src/block.rs:185:23: 185:24
    let mut _0: transaction::SignedTransaction; // return place in scope 0 at cita-chain/types/src/block.rs:185:26: 185:26
    let mut _3: std::result::Result<transaction::SignedTransaction, transaction::Error>; // in scope 0 at cita-chain/types/src/block.rs:185:26: 185:54
    let _4: &str;                        // in scope 0 at cita-chain/types/src/block.rs:185:62: 185:96

    bb0: {
        _3 = transaction::SignedTransaction::create(_2) -> bb1; // scope 0 at cita-chain/types/src/block.rs:185:26: 185:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:185:26: 185:51
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> Result<transaction::SignedTransaction, transaction::Error> {transaction::SignedTransaction::create}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const "transaction can not be converted"; // scope 0 at cita-chain/types/src/block.rs:185:62: 185:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:185:62: 185:96
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Result::<transaction::SignedTransaction, transaction::Error>::expect(move _3, _4) -> bb2; // scope 0 at cita-chain/types/src/block.rs:185:26: 185:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:185:55: 185:61
                                         // + literal: Const { ty: for<'a> fn(Result<transaction::SignedTransaction, transaction::Error>, &'a str) -> transaction::SignedTransaction {Result::<transaction::SignedTransaction, transaction::Error>::expect}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:185:97: 185:97
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transactions(_1: &block::BlockBody) -> &[transaction::SignedTransaction] {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:192:25: 192:30
    let mut _0: &[transaction::SignedTransaction]; // return place in scope 0 at cita-chain/types/src/block.rs:193:9: 193:27
    let _2: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:193:9: 193:27

    bb0: {
        _2 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 0 at cita-chain/types/src/block.rs:193:9: 193:27
        _0 = <Vec<transaction::SignedTransaction> as Deref>::deref(_2) -> bb1; // scope 0 at cita-chain/types/src/block.rs:193:9: 193:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:193:9: 193:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<transaction::SignedTransaction>) -> &'a <Vec<transaction::SignedTransaction> as Deref>::Target {<Vec<transaction::SignedTransaction> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:194:6: 194:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::set_transactions(_1: &mut block::BlockBody, _2: Vec<transaction::SignedTransaction>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:196:29: 196:38
    debug txs => _2;                     // in scope 0 at cita-chain/types/src/block.rs:196:40: 196:43
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block.rs:196:69: 196:69

    bb0: {
        drop(((*_1).0: std::vec::Vec<transaction::SignedTransaction>)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/block.rs:197:9: 197:26
    }

    bb1: {
        ((*_1).0: std::vec::Vec<transaction::SignedTransaction>) = move _2; // scope 0 at cita-chain/types/src/block.rs:197:9: 197:26
        return;                          // scope 0 at cita-chain/types/src/block.rs:198:6: 198:6
    }

    bb2 (cleanup): {
        ((*_1).0: std::vec::Vec<transaction::SignedTransaction>) = move _2; // scope 0 at cita-chain/types/src/block.rs:197:9: 197:26
        resume;                          // scope 0 at cita-chain/types/src/block.rs:196:5: 198:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::protobuf(_1: &block::BlockBody) -> libproto::BlockBody {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:200:21: 200:26
    let mut _0: libproto::BlockBody;     // return place in scope 0 at cita-chain/types/src/block.rs:201:13: 201:21
    let mut _3: std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}>; // in scope 0 at cita-chain/types/src/block.rs:202:48: 205:46
    let mut _4: std::slice::Iter<'_, transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:202:48: 204:20
    let mut _5: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:202:48: 204:20
    let _6: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:202:48: 204:20
    let mut _7: &std::vec::Vec<transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:202:48: 204:20
    let _8: ();                          // in scope 0 at cita-chain/types/src/block.rs:207:9: 207:42
    let mut _9: &mut libproto::BlockBody; // in scope 0 at cita-chain/types/src/block.rs:207:9: 207:42
    let mut _10: protobuf::repeated::RepeatedField<libproto::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:207:31: 207:41
    let mut _11: std::vec::Vec<libproto::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:207:31: 207:34
    scope 1 {
        debug body => _0;                // in scope 1 at cita-chain/types/src/block.rs:201:13: 201:21
        let _2: std::vec::Vec<libproto::SignedTransaction>; // in scope 1 at cita-chain/types/src/block.rs:202:13: 202:16
        scope 2 {
            debug txs => _2;             // in scope 2 at cita-chain/types/src/block.rs:202:13: 202:16
        }
    }

    bb0: {
        _0 = libproto::BlockBody::new() -> bb1; // scope 0 at cita-chain/types/src/block.rs:201:24: 201:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:201:24: 201:43
                                         // + literal: Const { ty: fn() -> libproto::BlockBody {libproto::BlockBody::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).0: std::vec::Vec<transaction::SignedTransaction>); // scope 1 at cita-chain/types/src/block.rs:202:48: 204:20
        _6 = <Vec<transaction::SignedTransaction> as Deref>::deref(move _7) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/types/src/block.rs:202:48: 204:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:202:48: 204:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<transaction::SignedTransaction>) -> &'a <Vec<transaction::SignedTransaction> as Deref>::Target {<Vec<transaction::SignedTransaction> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/block.rs:202:48: 204:20
        _4 = core::slice::<impl [transaction::SignedTransaction]>::iter(move _5) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/types/src/block.rs:202:48: 204:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:204:14: 204:18
                                         // + literal: Const { ty: for<'a> fn(&'a [transaction::SignedTransaction]) -> std::slice::Iter<'a, transaction::SignedTransaction> {core::slice::<impl [transaction::SignedTransaction]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <std::slice::Iter<'_, transaction::SignedTransaction> as Iterator>::map::<libproto::SignedTransaction, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}>(move _4, transaction::SignedTransaction::protobuf) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/types/src/block.rs:202:48: 205:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:205:14: 205:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}) -> std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}> {<std::slice::Iter<'_, transaction::SignedTransaction> as Iterator>::map::<libproto::SignedTransaction, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:205:18: 205:45
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = <std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}> as Iterator>::collect::<Vec<libproto::SignedTransaction>>(move _3) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/types/src/block.rs:202:48: 206:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:206:14: 206:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}>) -> Vec<libproto::SignedTransaction> {<std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, for<'a> fn(&'a transaction::SignedTransaction) -> libproto::SignedTransaction {transaction::SignedTransaction::protobuf}> as Iterator>::collect::<Vec<libproto::SignedTransaction>>}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = &mut _0;                    // scope 2 at cita-chain/types/src/block.rs:207:9: 207:42
        _11 = move _2;                   // scope 2 at cita-chain/types/src/block.rs:207:31: 207:34
        _10 = <Vec<libproto::SignedTransaction> as Into<protobuf::repeated::RepeatedField<libproto::SignedTransaction>>>::into(move _11) -> [return: bb6, unwind: bb8]; // scope 2 at cita-chain/types/src/block.rs:207:31: 207:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:207:35: 207:39
                                         // + literal: Const { ty: fn(Vec<libproto::SignedTransaction>) -> protobuf::repeated::RepeatedField<libproto::SignedTransaction> {<Vec<libproto::SignedTransaction> as Into<protobuf::repeated::RepeatedField<libproto::SignedTransaction>>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = libproto::BlockBody::set_transactions(move _9, move _10) -> [return: bb7, unwind: bb8]; // scope 2 at cita-chain/types/src/block.rs:207:9: 207:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:207:14: 207:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockBody, protobuf::repeated::RepeatedField<libproto::SignedTransaction>) {libproto::BlockBody::set_transactions}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:209:6: 209:6
    }

    bb8 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at cita-chain/types/src/block.rs:209:5: 209:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:200:5: 209:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_hashes(_1: &block::BlockBody) -> Vec<H256> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:211:31: 211:36
    let mut _0: std::vec::Vec<cita_types::H256>; // return place in scope 0 at cita-chain/types/src/block.rs:211:41: 211:50
    let mut _2: std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]>; // in scope 0 at cita-chain/types/src/block.rs:212:9: 212:55
    let mut _3: std::slice::Iter<'_, transaction::SignedTransaction>; // in scope 0 at cita-chain/types/src/block.rs:212:9: 212:35
    let mut _4: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:212:9: 212:35
    let _5: &[transaction::SignedTransaction]; // in scope 0 at cita-chain/types/src/block.rs:212:9: 212:28

    bb0: {
        _5 = block::BlockBody::transactions(_1) -> bb1; // scope 0 at cita-chain/types/src/block.rs:212:9: 212:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:14: 212:26
                                         // + literal: Const { ty: for<'a> fn(&'a block::BlockBody) -> &'a [transaction::SignedTransaction] {block::BlockBody::transactions}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/block.rs:212:9: 212:35
        _3 = core::slice::<impl [transaction::SignedTransaction]>::iter(move _4) -> bb2; // scope 0 at cita-chain/types/src/block.rs:212:9: 212:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:29: 212:33
                                         // + literal: Const { ty: for<'a> fn(&'a [transaction::SignedTransaction]) -> std::slice::Iter<'a, transaction::SignedTransaction> {core::slice::<impl [transaction::SignedTransaction]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <std::slice::Iter<'_, transaction::SignedTransaction> as Iterator>::map::<H256, [closure@cita-chain/types/src/block.rs:212:40: 212:44]>(move _3, const ZeroSized: [closure@cita-chain/types/src/block.rs:212:40: 212:44]) -> bb3; // scope 0 at cita-chain/types/src/block.rs:212:9: 212:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:36: 212:39
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]) -> std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]> {<std::slice::Iter<'_, transaction::SignedTransaction> as Iterator>::map::<H256, [closure@cita-chain/types/src/block.rs:212:40: 212:44]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/block.rs:212:40: 212:44], val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]> as Iterator>::collect::<Vec<H256>>(move _2) -> bb4; // scope 0 at cita-chain/types/src/block.rs:212:9: 212:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:56: 212:63
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]>) -> Vec<H256> {<std::iter::Map<std::slice::Iter<'_, transaction::SignedTransaction>, [closure@cita-chain/types/src/block.rs:212:40: 212:44]> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:213:6: 213:6
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_hashes::{closure#0}(_1: &mut [closure@cita-chain/types/src/block.rs:212:40: 212:44], _2: &transaction::SignedTransaction) -> H256 {
    debug ts => _2;                      // in scope 0 at cita-chain/types/src/block.rs:212:41: 212:43
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/block.rs:212:45: 212:45
    let mut _3: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/block.rs:212:45: 212:54
    let _4: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/block.rs:212:45: 212:54

    bb0: {
        _4 = <transaction::SignedTransaction as Deref>::deref(_2) -> bb1; // scope 0 at cita-chain/types/src/block.rs:212:45: 212:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:45: 212:54
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/types/src/block.rs:212:45: 212:54
        _0 = transaction::UnverifiedTransaction::hash(move _3) -> bb2; // scope 0 at cita-chain/types/src/block.rs:212:45: 212:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:212:48: 212:52
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> H256 {transaction::UnverifiedTransaction::hash}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/block.rs:212:54: 212:54
    }
}

fn block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_indexes(_1: &block::BlockBody, _2: H256) -> HashMap<H256, TransactionIndex> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block.rs:215:32: 215:37
    debug hash => _2;                    // in scope 0 at cita-chain/types/src/block.rs:215:39: 215:43
    let _3: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/block.rs:216:13: 216:21
    let mut _4: std::iter::Enumerate<std::vec::IntoIter<cita_types::H256>>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:61
    let mut _5: std::iter::Enumerate<std::vec::IntoIter<cita_types::H256>>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:61
    let mut _6: std::vec::IntoIter<cita_types::H256>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:49
    let mut _7: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:37
    let mut _9: std::option::Option<(usize, cita_types::H256)>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:61
    let mut _10: &mut std::iter::Enumerate<std::vec::IntoIter<cita_types::H256>>; // in scope 0 at cita-chain/types/src/block.rs:219:29: 219:61
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/block.rs:219:9: 225:10
    let _15: std::option::Option<transaction_index::TransactionIndex>; // in scope 0 at cita-chain/types/src/block.rs:224:13: 224:46
    let mut _16: &mut std::collections::HashMap<cita_types::H256, transaction_index::TransactionIndex>; // in scope 0 at cita-chain/types/src/block.rs:224:13: 224:46
    let mut _18: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _20: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _22: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _23: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _24: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _25: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _26: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _27: &[&str];                // in scope 0 at cita-chain/types/src/block.rs:227:16: 227:48
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/block.rs:227:50: 227:60
    let _32: &std::collections::HashMap<cita_types::H256, transaction_index::TransactionIndex>; // in scope 0 at cita-chain/types/src/block.rs:227:50: 227:60
    let mut _36: bool;                   // in scope 0 at cita-chain/types/src/block.rs:229:5: 229:6
    scope 1 {
        debug tx_hashs => _3;            // in scope 1 at cita-chain/types/src/block.rs:216:13: 216:21
        let mut _0: std::collections::HashMap<cita_types::H256, transaction_index::TransactionIndex>; // return place in scope 1 at cita-chain/types/src/block.rs:218:13: 218:27
        scope 2 {
            debug tx_indexes => _0;      // in scope 2 at cita-chain/types/src/block.rs:218:13: 218:27
            let mut _8: std::iter::Enumerate<std::vec::IntoIter<cita_types::H256>>; // in scope 2 at cita-chain/types/src/block.rs:219:29: 219:61
            let _17: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 3 {
                debug iter => _8;        // in scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
                let _12: usize;          // in scope 3 at cita-chain/types/src/block.rs:219:14: 219:15
                let _13: cita_types::H256; // in scope 3 at cita-chain/types/src/block.rs:219:17: 219:24
                scope 4 {
                    debug i => _12;      // in scope 4 at cita-chain/types/src/block.rs:219:14: 219:15
                    debug tx_hash => _13; // in scope 4 at cita-chain/types/src/block.rs:219:17: 219:24
                    let _14: transaction_index::TransactionIndex; // in scope 4 at cita-chain/types/src/block.rs:220:17: 220:22
                    scope 5 {
                        debug index => _14; // in scope 5 at cita-chain/types/src/block.rs:220:17: 220:22
                    }
                }
            }
            scope 6 {
                debug lvl => _17;        // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _33: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _34: &[&str; 1]; // in scope 6 at cita-chain/types/src/block.rs:227:16: 227:48
                let mut _35: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
    }

    bb0: {
        _36 = const false;               // scope 0 at cita-chain/types/src/block.rs:216:13: 216:21
        _36 = const true;                // scope 0 at cita-chain/types/src/block.rs:216:24: 216:49
        _3 = block::BlockBody::transaction_hashes(_1) -> bb1; // scope 0 at cita-chain/types/src/block.rs:216:24: 216:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:216:29: 216:47
                                         // + literal: Const { ty: for<'a> fn(&'a block::BlockBody) -> Vec<H256> {block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = HashMap::<H256, TransactionIndex>::new() -> [return: bb2, unwind: bb26]; // scope 1 at cita-chain/types/src/block.rs:218:30: 218:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:218:30: 218:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> HashMap<H256, TransactionIndex> {HashMap::<H256, TransactionIndex>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _36 = const false;               // scope 2 at cita-chain/types/src/block.rs:219:29: 219:37
        _7 = move _3;                    // scope 2 at cita-chain/types/src/block.rs:219:29: 219:37
        _6 = <Vec<H256> as IntoIterator>::into_iter(move _7) -> [return: bb3, unwind: bb23]; // scope 2 at cita-chain/types/src/block.rs:219:29: 219:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:219:38: 219:47
                                         // + literal: Const { ty: fn(Vec<H256>) -> <Vec<H256> as IntoIterator>::IntoIter {<Vec<H256> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = <std::vec::IntoIter<H256> as Iterator>::enumerate(move _6) -> [return: bb4, unwind: bb23]; // scope 2 at cita-chain/types/src/block.rs:219:29: 219:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:219:50: 219:59
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H256>) -> Enumerate<std::vec::IntoIter<H256>> {<std::vec::IntoIter<H256> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = <Enumerate<std::vec::IntoIter<H256>> as IntoIterator>::into_iter(move _5) -> [return: bb5, unwind: bb23]; // scope 2 at cita-chain/types/src/block.rs:219:29: 219:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:219:29: 219:61
                                         // + literal: Const { ty: fn(Enumerate<std::vec::IntoIter<H256>>) -> <Enumerate<std::vec::IntoIter<H256>> as IntoIterator>::IntoIter {<Enumerate<std::vec::IntoIter<H256>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = move _4;                    // scope 2 at cita-chain/types/src/block.rs:219:29: 219:61
        goto -> bb6;                     // scope 3 at cita-chain/types/src/block.rs:219:9: 225:10
    }

    bb6: {
        _10 = &mut _8;                   // scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
        _9 = <Enumerate<std::vec::IntoIter<H256>> as Iterator>::next(_10) -> [return: bb7, unwind: bb22]; // scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:219:29: 219:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::vec::IntoIter<H256>>) -> std::option::Option<<Enumerate<std::vec::IntoIter<H256>> as Iterator>::Item> {<Enumerate<std::vec::IntoIter<H256>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = discriminant(_9);          // scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
        switchInt(move _11) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
    }

    bb8: {
        _12 = (((_9 as Some).0: (usize, cita_types::H256)).0: usize); // scope 3 at cita-chain/types/src/block.rs:219:14: 219:15
        _13 = (((_9 as Some).0: (usize, cita_types::H256)).1: cita_types::H256); // scope 3 at cita-chain/types/src/block.rs:219:17: 219:24
        _14 = TransactionIndex { block_hash: _2, index: _12 }; // scope 4 at cita-chain/types/src/block.rs:220:25: 223:14
        _16 = &mut _0;                   // scope 5 at cita-chain/types/src/block.rs:224:13: 224:46
        _15 = HashMap::<H256, TransactionIndex>::insert(move _16, _13, move _14) -> [return: bb27, unwind: bb22]; // scope 5 at cita-chain/types/src/block.rs:224:13: 224:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:224:24: 224:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<H256, TransactionIndex>, H256, TransactionIndex) -> std::option::Option<TransactionIndex> {HashMap::<H256, TransactionIndex>::insert}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 3 at cita-chain/types/src/block.rs:219:29: 219:61
    }

    bb10: {
        drop(_8) -> [return: bb11, unwind: bb23]; // scope 2 at cita-chain/types/src/block.rs:225:9: 225:10
    }

    bb11: {
        _17 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _20 = &_17;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _35 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(block::BlockBody::transaction_indexes, [], Some(promoted[2])) }
        _19 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _20, _35) -> [return: bb15, unwind: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _18 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _22 = &_17;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _24 = log::max_level() -> [return: bb16, unwind: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _18) -> [0: bb21, otherwise: bb18]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        switchInt(move _19) -> [0: bb12, otherwise: bb13]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _23 = &_24;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _21 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _22, move _23) -> [return: bb17, unwind: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb17: {
        _18 = move _21;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb18: {
        _34 = const _;                   // scope 6 at cita-chain/types/src/block.rs:227:16: 227:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:227:16: 227:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(block::BlockBody::transaction_indexes, [], Some(promoted[1])) }
        _27 = _34 as &[&str] (Pointer(Unsize)); // scope 6 at cita-chain/types/src/block.rs:227:16: 227:48
        _32 = &_0;                       // scope 6 at cita-chain/types/src/block.rs:227:50: 227:60
        _31 = core::fmt::ArgumentV1::<'_>::new_debug::<HashMap<H256, TransactionIndex>>(_32) -> [return: bb19, unwind: bb23]; // scope 6 at cita-chain/types/src/block.rs:227:50: 227:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:227:50: 227:60
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b HashMap<H256, TransactionIndex>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<HashMap<H256, TransactionIndex>>}, val: Value(<ZST>) }
    }

    bb19: {
        _30 = [move _31];                // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = &_30;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _28 = _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb20, unwind: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _33 = const _;                   // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(block::BlockBody::transaction_indexes, [], Some(promoted[0])) }
        _25 = log::__private_api_log(move _26, _17, _33) -> [return: bb28, unwind: bb23]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb21: {
        _36 = const false;               // scope 0 at cita-chain/types/src/block.rs:229:5: 229:6
        return;                          // scope 0 at cita-chain/types/src/block.rs:229:6: 229:6
    }

    bb22 (cleanup): {
        drop(_8) -> bb23;                // scope 2 at cita-chain/types/src/block.rs:225:9: 225:10
    }

    bb23 (cleanup): {
        drop(_0) -> bb26;                // scope 1 at cita-chain/types/src/block.rs:229:5: 229:6
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/block.rs:215:5: 229:6
    }

    bb25 (cleanup): {
        drop(_3) -> bb24;                // scope 0 at cita-chain/types/src/block.rs:229:5: 229:6
    }

    bb26 (cleanup): {
        switchInt(_36) -> [0: bb24, otherwise: bb25]; // scope 0 at cita-chain/types/src/block.rs:229:5: 229:6
    }

    bb27: {
        goto -> bb6;                     // scope 5 at cita-chain/types/src/block.rs:224:13: 224:46
    }

    bb28: {
        goto -> bb21;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_indexes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/block.rs:227:9: 227:61
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/block.rs:227:9: 227:61

    bb0: {
        _3 = const "common_types::block"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "common_types::block"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/types/src/block.rs"; // scope 0 at cita-chain/types/src/block.rs:227:9: 227:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:227:9: 227:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/block.rs:227:9: 227:61
        _1 = (move _2, move _4, move _6, const 227_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_indexes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/block.rs:227:16: 227:48
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/block.rs:227:16: 227:48

    bb0: {
        _1 = [const "closed block transactions "]; // scope 0 at cita-chain/types/src/block.rs:227:16: 227:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block.rs:227:16: 227:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/block.rs:227:16: 227:48
        return;                          // scope 0 at cita-chain/types/src/block.rs:227:16: 227:48
    }
}

promoted[2] in block::<impl at cita-chain/types/src/block.rs:191:1: 191:15>::transaction_indexes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:21:10: 21:15>::fmt(_1: &block_number::BlockTag, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let _4: &block_number::Tag;          // in scope 0 at cita-chain/types/src/block_number.rs:23:9: 23:12
    let _5: &str;                        // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/block_number.rs:23:9: 23:12
    let _7: &&block_number::Tag;         // in scope 0 at cita-chain/types/src/block_number.rs:23:9: 23:12
    let _8: &u64;                        // in scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
    let _9: &str;                        // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
    let _11: &&u64;                      // in scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
    let _12: &cita_types::H256;          // in scope 0 at cita-chain/types/src/block_number.rs:25:10: 25:14
    let _13: &str;                       // in scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/block_number.rs:25:10: 25:14
    let _15: &&cita_types::H256;         // in scope 0 at cita-chain/types/src/block_number.rs:25:10: 25:14
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-chain/types/src/block_number.rs:23:9: 23:12
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
    }
    scope 3 {
        debug __self_0 => _12;           // in scope 3 at cita-chain/types/src/block_number.rs:25:10: 25:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    }

    bb1: {
        _12 = &(((*_1) as Hash).0: cita_types::H256); // scope 0 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _13 = const "Hash";              // scope 3 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = &_12;                      // scope 3 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> bb5; // scope 3 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/block_number.rs:21:10: 21:15
    }

    bb3: {
        _4 = &(((*_1) as Tag).0: block_number::Tag); // scope 0 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _5 = const "Tag";                // scope 1 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb5; // scope 1 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &(((*_1) as Height).0: u64); // scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _9 = const "Height";             // scope 2 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb5; // scope 2 at cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:21:10: 21:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:21:15: 21:15
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:21:17: 21:26>::eq(_1: &block_number::BlockTag, _2: &block_number::BlockTag) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let _3: isize;                       // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _7: (&block_number::BlockTag, &block_number::BlockTag); // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _9: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _16: u64;                    // in scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
    let mut _17: u64;                    // in scope 0 at cita-chain/types/src/block_number.rs:24:12: 24:15
    let mut _20: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _21: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _22: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _23: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _24: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _25: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _26: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _27: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _28: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    let mut _29: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/block_number.rs:21:17: 21:26
        let _4: isize;                   // in scope 1 at cita-chain/types/src/block_number.rs:21:17: 21:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
            let _12: &block_number::Tag; // in scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
            let _13: &block_number::Tag; // in scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
            let _14: &u64;               // in scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
            let _15: &u64;               // in scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
            let _18: &cita_types::H256;  // in scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
            let _19: &cita_types::H256;  // in scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
            scope 3 {
                debug __self_0 => _12;   // in scope 3 at cita-chain/types/src/block_number.rs:23:9: 23:12
                debug __arg1_0 => _13;   // in scope 3 at cita-chain/types/src/block_number.rs:23:9: 23:12
            }
            scope 4 {
                debug __self_0 => _14;   // in scope 4 at cita-chain/types/src/block_number.rs:24:12: 24:15
                debug __arg1_0 => _15;   // in scope 4 at cita-chain/types/src/block_number.rs:24:12: 24:15
            }
            scope 5 {
                debug __self_0 => _18;   // in scope 5 at cita-chain/types/src/block_number.rs:25:10: 25:14
                debug __arg1_0 => _19;   // in scope 5 at cita-chain/types/src/block_number.rs:25:10: 25:14
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _5 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb1: {
        _0 = const false;                // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        goto -> bb3;                     // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb2: {
        _7 = (_1, _2);                   // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _20 = deref_copy (_7.0: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _11 = discriminant((*_20));      // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        switchInt(move _11) -> [0: bb4, 1: bb6, 2: bb7, otherwise: bb12]; // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:21:26: 21:26
    }

    bb4: {
        _21 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _8 = discriminant((*_21));       // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        switchInt(move _8) -> [0: bb8, otherwise: bb5]; // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb5: {
        unreachable;                     // scope 6 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb6: {
        _22 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _9 = discriminant((*_22));       // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        switchInt(move _9) -> [1: bb9, otherwise: bb5]; // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb7: {
        _23 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        _10 = discriminant((*_23));      // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        switchInt(move _10) -> [2: bb10, otherwise: bb5]; // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb8: {
        _24 = deref_copy (_7.0: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _12 = &(((*_24) as Tag).0: block_number::Tag); // scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _25 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _13 = &(((*_25) as Tag).0: block_number::Tag); // scope 2 at cita-chain/types/src/block_number.rs:23:9: 23:12
        _6 = <block_number::Tag as PartialEq>::eq(_12, _13) -> bb11; // scope 3 at cita-chain/types/src/block_number.rs:23:9: 23:12
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:23:9: 23:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a block_number::Tag, &'b block_number::Tag) -> bool {<block_number::Tag as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = deref_copy (_7.0: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _14 = &(((*_26) as Height).0: u64); // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _27 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _15 = &(((*_27) as Height).0: u64); // scope 2 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _16 = (*_14);                    // scope 4 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _17 = (*_15);                    // scope 4 at cita-chain/types/src/block_number.rs:24:12: 24:15
        _6 = Eq(move _16, move _17);     // scope 4 at cita-chain/types/src/block_number.rs:24:12: 24:15
        goto -> bb11;                    // scope 2 at cita-chain/types/src/block_number.rs:21:25: 21:26
    }

    bb10: {
        _28 = deref_copy (_7.0: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _18 = &(((*_28) as Hash).0: cita_types::H256); // scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _29 = deref_copy (_7.1: &block_number::BlockTag); // scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _19 = &(((*_29) as Hash).0: cita_types::H256); // scope 2 at cita-chain/types/src/block_number.rs:25:10: 25:14
        _6 = <H256 as PartialEq>::eq(_18, _19) -> bb11; // scope 5 at cita-chain/types/src/block_number.rs:25:10: 25:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:25:10: 25:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = move _6;                    // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
        goto -> bb3;                     // scope 2 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }

    bb12: {
        unreachable;                     // scope 6 at cita-chain/types/src/block_number.rs:21:17: 21:26
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:21:28: 21:33>::clone(_1: &block_number::BlockTag) -> block_number::BlockTag {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:21:28: 21:33
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:21:28: 21:33
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 3 at cita-chain/types/src/block_number.rs:21:28: 21:33
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:21:33: 21:33
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:28:10: 28:15>::fmt(_1: &block_number::Tag, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let _6: &str;                        // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    let _7: &str;                        // in scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    }

    bb1: {
        _7 = const "Pending";            // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
        goto -> bb5;                     // scope 0 at cita-chain/types/src/block_number.rs:28:14: 28:15
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
    }

    bb3: {
        _5 = const "Latest";             // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
        goto -> bb5;                     // scope 0 at cita-chain/types/src/block_number.rs:28:14: 28:15
    }

    bb4: {
        _6 = const "Earliest";           // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
        goto -> bb5;                     // scope 0 at cita-chain/types/src/block_number.rs:28:14: 28:15
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb6; // scope 0 at cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:28:10: 28:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:28:15: 28:15
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:28:17: 28:26>::eq(_1: &block_number::Tag, _2: &block_number::Tag) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:28:17: 28:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/block_number.rs:28:17: 28:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/block_number.rs:28:17: 28:26
    let _3: isize;                       // in scope 0 at cita-chain/types/src/block_number.rs:28:17: 28:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/block_number.rs:28:17: 28:26
        let _4: isize;                   // in scope 1 at cita-chain/types/src/block_number.rs:28:17: 28:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/block_number.rs:28:17: 28:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/block_number.rs:28:17: 28:26
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/block_number.rs:28:17: 28:26
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/block_number.rs:28:17: 28:26
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:28:26: 28:26
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:28:28: 28:33>::clone(_1: &block_number::Tag) -> block_number::Tag {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_number.rs:28:28: 28:33
    let mut _0: block_number::Tag;       // return place in scope 0 at cita-chain/types/src/block_number.rs:28:28: 28:33

    bb0: {
        _0 = (*_1);                      // scope 0 at cita-chain/types/src/block_number.rs:28:28: 28:33
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:28:33: 28:33
    }
}

fn block_number::<impl at cita-chain/types/src/block_number.rs:35:1: 35:39>::from(_1: jsonrpc_types::rpc_types::BlockNumber) -> block_number::BlockTag {
    debug n => _1;                       // in scope 0 at cita-chain/types/src/block_number.rs:36:13: 36:14
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:36:35: 36:43
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:39:33: 39:52
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/block_number.rs:38:13: 38:43
    let _4: jsonrpc_types::rpc_types::Quantity; // in scope 0 at cita-chain/types/src/block_number.rs:38:36: 38:42
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/block_number.rs:38:64: 38:77
    let mut _6: block_number::Tag;       // in scope 0 at cita-chain/types/src/block_number.rs:39:71: 39:82
    let mut _7: block_number::Tag;       // in scope 0 at cita-chain/types/src/block_number.rs:40:73: 40:86
    let mut _8: block_number::Tag;       // in scope 0 at cita-chain/types/src/block_number.rs:41:72: 41:84
    scope 1 {
        debug height => _4;              // in scope 1 at cita-chain/types/src/block_number.rs:38:36: 38:42
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at cita-chain/types/src/block_number.rs:37:15: 37:16
        switchInt(move _3) -> [0: bb1, 1: bb4, otherwise: bb3]; // scope 0 at cita-chain/types/src/block_number.rs:37:9: 37:16
    }

    bb1: {
        _2 = discriminant(((_1 as Tag).0: jsonrpc_types::rpc_types::BlockTag)); // scope 0 at cita-chain/types/src/block_number.rs:37:15: 37:16
        switchInt(move _2) -> [0: bb6, 1: bb7, 2: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/block_number.rs:37:9: 37:16
    }

    bb2: {
        _8 = const block_number::Tag::Pending; // scope 0 at cita-chain/types/src/block_number.rs:41:72: 41:84
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: block_number::Tag, val: Value(Scalar(0x02)) }
        _0 = block_number::BlockTag::Tag(move _8); // scope 0 at cita-chain/types/src/block_number.rs:41:58: 41:85
        goto -> bb8;                     // scope 0 at cita-chain/types/src/block_number.rs:41:84: 41:85
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/block_number.rs:37:15: 37:16
    }

    bb4: {
        _4 = move ((_1 as Height).0: jsonrpc_types::rpc_types::Quantity); // scope 0 at cita-chain/types/src/block_number.rs:38:36: 38:42
        _5 = <Quantity as Into<u64>>::into(move _4) -> bb5; // scope 1 at cita-chain/types/src/block_number.rs:38:64: 38:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_number.rs:38:71: 38:75
                                         // + literal: Const { ty: fn(Quantity) -> u64 {<Quantity as Into<u64>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = block_number::BlockTag::Height(move _5); // scope 1 at cita-chain/types/src/block_number.rs:38:47: 38:78
        goto -> bb8;                     // scope 0 at cita-chain/types/src/block_number.rs:38:77: 38:78
    }

    bb6: {
        _6 = const block_number::Tag::Latest; // scope 0 at cita-chain/types/src/block_number.rs:39:71: 39:82
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: block_number::Tag, val: Value(Scalar(0x00)) }
        _0 = block_number::BlockTag::Tag(move _6); // scope 0 at cita-chain/types/src/block_number.rs:39:57: 39:83
        goto -> bb8;                     // scope 0 at cita-chain/types/src/block_number.rs:39:82: 39:83
    }

    bb7: {
        _7 = const block_number::Tag::Earliest; // scope 0 at cita-chain/types/src/block_number.rs:40:73: 40:86
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: block_number::Tag, val: Value(Scalar(0x01)) }
        _0 = block_number::BlockTag::Tag(move _7); // scope 0 at cita-chain/types/src/block_number.rs:40:59: 40:87
        goto -> bb8;                     // scope 0 at cita-chain/types/src/block_number.rs:40:86: 40:87
    }

    bb8: {
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:43:6: 43:6
    }
}

fn block_receipts::<impl at cita-chain/types/src/block_receipts.rs:19:10: 19:15>::clone(_1: &BlockReceipts) -> BlockReceipts {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_receipts.rs:19:10: 19:15
    let mut _0: block_receipts::BlockReceipts; // return place in scope 0 at cita-chain/types/src/block_receipts.rs:19:10: 19:15
    let mut _2: std::vec::Vec<receipt::Receipt>; // in scope 0 at cita-chain/types/src/block_receipts.rs:21:5: 21:31
    let _3: &std::vec::Vec<receipt::Receipt>; // in scope 0 at cita-chain/types/src/block_receipts.rs:21:5: 21:31

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<receipt::Receipt>); // scope 0 at cita-chain/types/src/block_receipts.rs:21:5: 21:31
        _2 = <Vec<receipt::Receipt> as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/block_receipts.rs:21:5: 21:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:21:5: 21:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<receipt::Receipt>) -> Vec<receipt::Receipt> {<Vec<receipt::Receipt> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = BlockReceipts { receipts: move _2 }; // scope 0 at cita-chain/types/src/block_receipts.rs:19:10: 19:15
        return;                          // scope 0 at cita-chain/types/src/block_receipts.rs:19:15: 19:15
    }
}

fn block_receipts::<impl at cita-chain/types/src/block_receipts.rs:24:1: 24:19>::new(_1: Vec<receipt::Receipt>) -> BlockReceipts {
    debug receipts => _1;                // in scope 0 at cita-chain/types/src/block_receipts.rs:25:16: 25:24
    let mut _0: block_receipts::BlockReceipts; // return place in scope 0 at cita-chain/types/src/block_receipts.rs:25:43: 25:47

    bb0: {
        _0 = BlockReceipts { receipts: move _1 }; // scope 0 at cita-chain/types/src/block_receipts.rs:26:9: 26:35
        return;                          // scope 0 at cita-chain/types/src/block_receipts.rs:27:6: 27:6
    }
}

fn block_receipts::<impl at cita-chain/types/src/block_receipts.rs:30:1: 30:33>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<BlockReceipts, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/block_receipts.rs:31:15: 31:18
    let mut _0: std::result::Result<block_receipts::BlockReceipts, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/block_receipts.rs:31:38: 31:64
    let mut _2: block_receipts::BlockReceipts; // in scope 0 at cita-chain/types/src/block_receipts.rs:32:12: 34:10
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<receipt::Receipt>>; // in scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
    let mut _4: std::result::Result<std::vec::Vec<receipt::Receipt>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:36
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/block_receipts.rs:33:36: 33:37
    let _6: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/block_receipts.rs:33:36: 33:37
    let _7: std::vec::Vec<receipt::Receipt>; // in scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
    scope 1 {
        debug residual => _6;            // in scope 1 at cita-chain/types/src/block_receipts.rs:33:36: 33:37
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;                 // in scope 3 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
        scope 4 {
        }
    }

    bb0: {
        _4 = rlp::UntrustedRlp::<'_>::as_list::<receipt::Receipt>(_1) -> bb1; // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:33:27: 33:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<Vec<receipt::Receipt>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_list::<receipt::Receipt>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<Vec<receipt::Receipt>, rlp::DecoderError> as Try>::branch(move _4) -> bb2; // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:33:23: 33:37
                                         // + literal: Const { ty: fn(Result<Vec<receipt::Receipt>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<receipt::Receipt>, rlp::DecoderError> as Try>::Residual, <Result<Vec<receipt::Receipt>, rlp::DecoderError> as Try>::Output> {<Result<Vec<receipt::Receipt>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::vec::Vec<receipt::Receipt>); // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
        _2 = BlockReceipts { receipts: move _7 }; // scope 0 at cita-chain/types/src/block_receipts.rs:32:12: 34:10
        _0 = Result::<BlockReceipts, rlp::DecoderError>::Ok(move _2); // scope 0 at cita-chain/types/src/block_receipts.rs:32:9: 34:11
        goto -> bb6;                     // scope 0 at cita-chain/types/src/block_receipts.rs:35:6: 35:6
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/block_receipts.rs:33:36: 33:37
        _0 = <Result<BlockReceipts, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _6) -> bb6; // scope 2 at cita-chain/types/src/block_receipts.rs:33:23: 33:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:33:36: 33:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<BlockReceipts, rlp::DecoderError> {<Result<BlockReceipts, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/block_receipts.rs:35:6: 35:6
    }
}

fn block_receipts::<impl at cita-chain/types/src/block_receipts.rs:38:1: 38:33>::rlp_append(_1: &BlockReceipts, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/block_receipts.rs:39:19: 39:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/block_receipts.rs:39:26: 39:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/block_receipts.rs:39:45: 39:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/block_receipts.rs:40:9: 40:38
    let mut _4: &[receipt::Receipt];     // in scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37
    let _5: &[receipt::Receipt];         // in scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37
    let _6: &std::vec::Vec<receipt::Receipt>; // in scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37

    bb0: {
        _6 = &((*_1).0: std::vec::Vec<receipt::Receipt>); // scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37
        _5 = <Vec<receipt::Receipt> as Deref>::deref(_6) -> bb1; // scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:40:23: 40:37
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<receipt::Receipt>) -> &'a <Vec<receipt::Receipt> as Deref>::Target {<Vec<receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/block_receipts.rs:40:23: 40:37
        _3 = rlp::RlpStream::append_list::<receipt::Receipt, receipt::Receipt>(_2, move _4) -> bb2; // scope 0 at cita-chain/types/src/block_receipts.rs:40:9: 40:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/block_receipts.rs:40:11: 40:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [receipt::Receipt]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<receipt::Receipt, receipt::Receipt>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/block_receipts.rs:41:6: 41:6
    }
}

fn context::<impl at cita-chain/types/src/context.rs:22:10: 22:15>::fmt(_1: &context::Context, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let _4: &[&dyn std::fmt::Debug; 8];  // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let _5: [&dyn std::fmt::Debug; 8];   // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
    let _7: &u64;                        // in scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let _9: &cita_types::H160;           // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let _11: &u64;                       // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let _13: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let _15: &std::sync::Arc<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let _19: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
    let _21: &&cita_types::U256;         // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
    let _22: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
    let _23: &str;                       // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _24: &[&str];                // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _25: &[&str; 8];             // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    scope 1 {
        debug names => _25;              // in scope 1 at cita-chain/types/src/context.rs:22:10: 22:15
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/context.rs:22:10: 22:15
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/context.rs:22:10: 22:15
        }
    }

    bb0: {
        _25 = const _;                   // scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:22:10: 22:15
                                         // + literal: Const { ty: &[&str; 8], val: Unevaluated(<context::Context as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: u64);            // scope 1 at cita-chain/types/src/context.rs:24:5: 24:34
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:24:5: 24:34
        _9 = &((*_1).1: cita_types::H160); // scope 1 at cita-chain/types/src/context.rs:25:5: 25:27
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:25:5: 25:27
        _11 = &((*_1).2: u64);           // scope 1 at cita-chain/types/src/context.rs:26:5: 26:23
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:26:5: 26:23
        _13 = &((*_1).3: cita_types::U256); // scope 1 at cita-chain/types/src/context.rs:27:5: 27:25
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:27:5: 27:25
        _15 = &((*_1).4: std::sync::Arc<std::vec::Vec<cita_types::H256>>); // scope 1 at cita-chain/types/src/context.rs:28:5: 28:37
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:28:5: 28:37
        _17 = &((*_1).5: cita_types::U256); // scope 1 at cita-chain/types/src/context.rs:29:5: 29:25
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:29:5: 29:25
        _19 = &((*_1).6: cita_types::U256); // scope 1 at cita-chain/types/src/context.rs:30:5: 30:32
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:30:5: 30:32
        _22 = &((*_1).7: cita_types::U256); // scope 1 at cita-chain/types/src/context.rs:31:5: 31:34
        _21 = &_22;                      // scope 1 at cita-chain/types/src/context.rs:31:5: 31:34
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:31:5: 31:34
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20]; // scope 1 at cita-chain/types/src/context.rs:22:10: 22:15
        _4 = &_5;                        // scope 1 at cita-chain/types/src/context.rs:22:10: 22:15
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/context.rs:22:10: 22:15
        _23 = const "Context";           // scope 2 at cita-chain/types/src/context.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/context.rs:22:10: 22:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _23, move _24, _3) -> bb1; // scope 2 at cita-chain/types/src/context.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:22:10: 22:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/context.rs:22:15: 22:15
    }
}

promoted[0] in context::<impl at cita-chain/types/src/context.rs:22:10: 22:15>::fmt: &[&str; 8] = {
    let mut _0: &[&str; 8];              // return place in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _1: [&str; 8];               // in scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let mut _14: &str;                   // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
    let mut _15: &str;                   // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34

    bb0: {
        _3 = const "coin_base";          // scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:25:5: 25:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
        _5 = const "timestamp";          // scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:26:5: 26:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
        _7 = const "difficulty";         // scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:27:5: 27:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
        _9 = const "last_hashes";        // scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:28:5: 28:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
        _11 = const "quota_used";        // scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:29:5: 29:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
        _13 = const "block_quota_limit"; // scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:30:5: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
        _15 = const "account_quota_limit"; // scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:31:5: 31:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
        _1 = [const "block_number", move _2, move _4, move _6, move _8, move _10, move _12, move _14]; // scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:24:5: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
        return;                          // scope 0 at cita-chain/types/src/context.rs:22:10: 22:15
    }
}

fn context::<impl at cita-chain/types/src/context.rs:22:17: 22:22>::clone(_1: &context::Context) -> context::Context {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/context.rs:22:17: 22:22
    let mut _0: context::Context;        // return place in scope 0 at cita-chain/types/src/context.rs:22:17: 22:22
    let mut _2: u64;                     // in scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
    let _3: &u64;                        // in scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
    let mut _4: cita_types::H160;        // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let _5: &cita_types::H160;           // in scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let _7: &u64;                        // in scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
    let mut _8: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
    let mut _10: std::sync::Arc<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let _11: &std::sync::Arc<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let _13: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
    let mut _14: cita_types::U256;       // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
    let mut _16: cita_types::U256;       // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/context.rs:31:5: 31:34

    bb0: {
        _3 = &((*_1).0: u64);            // scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
        _2 = (*_3);                      // scope 0 at cita-chain/types/src/context.rs:24:5: 24:34
        _5 = &((*_1).1: cita_types::H160); // scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
        _4 = <H160 as Clone>::clone(_5) -> bb1; // scope 0 at cita-chain/types/src/context.rs:25:5: 25:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:25:5: 25:27
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).2: u64);            // scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
        _6 = (*_7);                      // scope 0 at cita-chain/types/src/context.rs:26:5: 26:23
        _9 = &((*_1).3: cita_types::U256); // scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
        _8 = <U256 as Clone>::clone(_9) -> bb2; // scope 0 at cita-chain/types/src/context.rs:27:5: 27:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:27:5: 27:25
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).4: std::sync::Arc<std::vec::Vec<cita_types::H256>>); // scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
        _10 = <Arc<Vec<H256>> as Clone>::clone(_11) -> bb3; // scope 0 at cita-chain/types/src/context.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:28:5: 28:37
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Vec<H256>>) -> Arc<Vec<H256>> {<Arc<Vec<H256>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &((*_1).5: cita_types::U256); // scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
        _12 = <U256 as Clone>::clone(_13) -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/types/src/context.rs:29:5: 29:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:29:5: 29:25
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &((*_1).6: cita_types::U256); // scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
        _14 = <U256 as Clone>::clone(_15) -> [return: bb5, unwind: bb7]; // scope 0 at cita-chain/types/src/context.rs:30:5: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:30:5: 30:32
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &((*_1).7: cita_types::U256); // scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
        _16 = <U256 as Clone>::clone(_17) -> [return: bb6, unwind: bb7]; // scope 0 at cita-chain/types/src/context.rs:31:5: 31:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:31:5: 31:34
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = context::Context { block_number: move _2, coin_base: move _4, timestamp: move _6, difficulty: move _8, last_hashes: move _10, quota_used: move _12, block_quota_limit: move _14, account_quota_limit: move _16 }; // scope 0 at cita-chain/types/src/context.rs:22:17: 22:22
        return;                          // scope 0 at cita-chain/types/src/context.rs:22:22: 22:22
    }

    bb7 (cleanup): {
        drop(_10) -> bb8;                // scope 0 at cita-chain/types/src/context.rs:22:21: 22:22
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/context.rs:22:17: 22:22
    }
}

fn context::<impl at cita-chain/types/src/context.rs:34:1: 34:25>::default() -> context::Context {
    let mut _0: context::Context;        // return place in scope 0 at cita-chain/types/src/context.rs:35:21: 35:25
    let mut _1: cita_types::H160;        // in scope 0 at cita-chain/types/src/context.rs:38:24: 38:42
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:40:25: 40:40
    let mut _3: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:41:32: 41:60
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/context.rs:41:43: 41:59
    let mut _5: std::sync::Arc<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/context.rs:42:26: 42:42
    let mut _6: std::vec::Vec<cita_types::H256>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
    let mut _7: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:43:25: 43:40
    let mut _8: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:44:34: 44:49

    bb0: {
        _1 = <H160 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/context.rs:38:24: 38:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:38:24: 38:40
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <U256 as Default>::default() -> bb2; // scope 0 at cita-chain/types/src/context.rs:40:25: 40:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:40:25: 40:38
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = core::num::<impl u64>::max_value() -> bb3; // scope 0 at cita-chain/types/src/context.rs:41:43: 41:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:41:43: 41:57
                                         // + literal: Const { ty: fn() -> u64 {core::num::<impl u64>::max_value}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <U256 as From<u64>>::from(move _4) -> bb4; // scope 0 at cita-chain/types/src/context.rs:41:32: 41:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:41:32: 41:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Vec::<H256>::new() -> bb5;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<H256> {Vec::<H256>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = Arc::<Vec<H256>>::new(move _6) -> bb6; // scope 0 at cita-chain/types/src/context.rs:42:26: 42:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:42:26: 42:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<H256>) -> Arc<Vec<H256>> {Arc::<Vec<H256>>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <U256 as Default>::default() -> [return: bb7, unwind: bb9]; // scope 0 at cita-chain/types/src/context.rs:43:25: 43:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:43:25: 43:38
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = <U256 as Default>::default() -> [return: bb8, unwind: bb9]; // scope 0 at cita-chain/types/src/context.rs:44:34: 44:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:44:34: 44:47
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = context::Context { block_number: const 0_u64, coin_base: move _1, timestamp: const 0_u64, difficulty: move _2, last_hashes: move _5, quota_used: move _7, block_quota_limit: move _3, account_quota_limit: move _8 }; // scope 0 at cita-chain/types/src/context.rs:36:9: 45:10
        return;                          // scope 0 at cita-chain/types/src/context.rs:46:6: 46:6
    }

    bb9 (cleanup): {
        drop(_5) -> bb10;                // scope 0 at cita-chain/types/src/context.rs:45:9: 45:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/context.rs:35:5: 46:6
    }
}

fn context::<impl at cita-chain/types/src/context.rs:49:1: 49:34>::from(_1: cita_vm::evm::Context) -> context::Context {
    debug evm_context => _1;             // in scope 0 at cita-chain/types/src/context.rs:50:13: 50:24
    let mut _0: context::Context;        // return place in scope 0 at cita-chain/types/src/context.rs:50:41: 50:48
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:52:32: 52:65
    let mut _3: u64;                     // in scope 0 at cita-chain/types/src/context.rs:52:43: 52:64
    let mut _4: cita_types::H160;        // in scope 0 at cita-chain/types/src/context.rs:53:24: 53:44
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/context.rs:54:27: 54:54
    let mut _6: &cita_types::U256;       // in scope 0 at cita-chain/types/src/context.rs:54:27: 54:54
    let mut _7: u64;                     // in scope 0 at cita-chain/types/src/context.rs:55:24: 55:45
    let mut _8: cita_types::U256;        // in scope 0 at cita-chain/types/src/context.rs:56:25: 56:47
    let mut _9: context::Context;        // in scope 0 at cita-chain/types/src/context.rs:57:15: 57:33

    bb0: {
        _3 = (_1.0: u64);                // scope 0 at cita-chain/types/src/context.rs:52:43: 52:64
        _2 = <U256 as From<u64>>::from(move _3) -> bb1; // scope 0 at cita-chain/types/src/context.rs:52:32: 52:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:52:32: 52:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_1.1: cita_types::H160);   // scope 0 at cita-chain/types/src/context.rs:53:24: 53:44
        _6 = &(_1.2: cita_types::U256);  // scope 0 at cita-chain/types/src/context.rs:54:27: 54:54
        _5 = U256::as_u64(move _6) -> bb2; // scope 0 at cita-chain/types/src/context.rs:54:27: 54:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:54:46: 54:52
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::as_u64}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = (_1.3: u64);                // scope 0 at cita-chain/types/src/context.rs:55:24: 55:45
        _8 = (_1.4: cita_types::U256);   // scope 0 at cita-chain/types/src/context.rs:56:25: 56:47
        _9 = <context::Context as Default>::default() -> bb3; // scope 0 at cita-chain/types/src/context.rs:57:15: 57:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/context.rs:57:15: 57:31
                                         // + literal: Const { ty: fn() -> context::Context {<context::Context as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = context::Context { block_number: move _5, coin_base: move _4, timestamp: move _7, difficulty: move _8, last_hashes: move (_9.4: std::sync::Arc<std::vec::Vec<cita_types::H256>>), quota_used: (_9.5: cita_types::U256), block_quota_limit: move _2, account_quota_limit: (_9.7: cita_types::U256) }; // scope 0 at cita-chain/types/src/context.rs:51:9: 58:10
        return;                          // scope 0 at cita-chain/types/src/context.rs:59:6: 59:6
    }
}

const TRANSACTION_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:19:26: 19:28

    bb0: {
        _0 = const 0_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:19:31: 19:32
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:19:1: 19:33
    }
}

const BLOCKRECEIPTS_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:20:28: 20:30

    bb0: {
        _0 = const 1_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:20:33: 20:34
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:20:1: 20:35
    }
}

const BLOCKSBLOOMS_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:21:27: 21:29

    bb0: {
        _0 = const 2_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:21:32: 21:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:21:1: 21:34
    }
}

const BLOCKHASH_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:22:24: 22:26

    bb0: {
        _0 = const 3_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:22:29: 22:30
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:22:1: 22:31
    }
}

const BLOCKHEADHASH_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:23:28: 23:30

    bb0: {
        _0 = const 4_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:23:33: 23:34
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:23:1: 23:35
    }
}

const BLOCKBODYHASH_INDEX: u8 = {
    let mut _0: u8;                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:24:28: 24:30

    bb0: {
        _0 = const 5_u8;                 // scope 0 at cita-chain/types/src/db_indexes.rs:24:33: 24:34
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:24:1: 24:35
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:32:1: 32:29>::get_index(_1: &CurrentHash) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:33:18: 33:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:33:28: 33:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
    let _5: cita_types::H256;            // in scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:87

    bb0: {
        _5 = <H256 as From<&str>>::from(const "7cabfb7709b29c16d9e876e876c9988d03f9c3414e1d3ff77ec1de2d0ee59f66") -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:34:9: 34:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> H256 {<H256 as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:34:20: 34:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
        _3 = <H256 as Deref>::deref(move _4) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:34:9: 34:96
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb3; // scope 0 at cita-chain/types/src/db_indexes.rs:34:9: 34:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:34:88: 34:94
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:35:6: 35:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:40:1: 40:30>::get_index(_1: &CurrentProof) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:41:18: 41:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:41:28: 41:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
    let _5: cita_types::H256;            // in scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:87

    bb0: {
        _5 = <H256 as From<&str>>::from(const "7cabfb7709b29c16d9e876e876c9988d03f9c3414e1d3ff77ec1de2d0ee59f67") -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:42:9: 42:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> H256 {<H256 as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:42:20: 42:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
        _3 = <H256 as Deref>::deref(move _4) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:42:9: 42:96
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb3; // scope 0 at cita-chain/types/src/db_indexes.rs:42:9: 42:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:42:88: 42:94
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:43:6: 43:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:48:1: 48:31>::get_index(_1: &CurrentHeight) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:49:18: 49:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:49:28: 49:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
    let _5: cita_types::H256;            // in scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:87

    bb0: {
        _5 = <H256 as From<&str>>::from(const "7cabfb7709b29c16d9e876e876c9988d03f9c3414e1d3ff77ec1de2d0ee59f68") -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:50:9: 50:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> H256 {<H256 as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:50:20: 50:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
        _3 = <H256 as Deref>::deref(move _4) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:50:9: 50:96
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb3; // scope 0 at cita-chain/types/src/db_indexes.rs:50:9: 50:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:50:88: 50:94
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:51:6: 51:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:56:1: 56:29>::get_index(_1: &Hash2Header) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:57:18: 57:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:57:28: 57:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24

    bb0: {
        _4 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
        _3 = <H256 as Deref>::deref(move _4) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:58:9: 58:24
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:58:9: 58:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:58:16: 58:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:59:6: 59:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:64:1: 64:32>::get_index(_1: &Hash2BlockBody) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:65:18: 65:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:65:28: 65:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24

    bb0: {
        _4 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
        _3 = <H256 as Deref>::deref(move _4) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:66:9: 66:24
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:66:9: 66:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:66:16: 66:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:67:6: 67:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:72:1: 72:34>::get_index(_1: &Hash2BlockNumber) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:73:18: 73:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:73:28: 73:35
    let mut _2: &[u8];                   // in scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
    let _3: &[u8];                       // in scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24

    bb0: {
        _4 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
        _3 = <H256 as Deref>::deref(move _4) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:74:9: 74:24
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
        _0 = slice::<impl [u8]>::to_vec(move _2) -> bb2; // scope 0 at cita-chain/types/src/db_indexes.rs:74:9: 74:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:74:16: 74:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:75:6: 75:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:80:1: 80:36>::get_index(_1: &BlockNumber2Header) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:81:18: 81:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:81:28: 81:35
    let mut _2: [u8; 9];                 // in scope 0 at cita-chain/types/src/db_indexes.rs:82:13: 82:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:83:21: 83:46
    let _4: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:83:16: 83:17
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:84:21: 84:35
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:84:22: 84:28
    let _7: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:84:16: 84:17
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:85:21: 85:35
    let mut _9: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:85:22: 85:28
    let _10: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:85:16: 85:17
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:86:21: 86:35
    let mut _12: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:86:22: 86:28
    let _13: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:86:16: 86:17
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:87:21: 87:35
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:87:22: 87:28
    let _16: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:87:16: 87:17
    let mut _17: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:88:21: 88:35
    let mut _18: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:88:22: 88:28
    let _19: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:88:16: 88:17
    let mut _20: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:89:21: 89:35
    let mut _21: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:89:22: 89:28
    let _22: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:89:16: 89:17
    let mut _23: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:90:21: 90:34
    let mut _24: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:90:22: 90:28
    let _25: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:90:16: 90:17
    let mut _26: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:91:21: 91:27
    let _27: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:91:16: 91:17
    let mut _28: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:92:9: 92:24
    let mut _29: &[u8; 9];               // in scope 0 at cita-chain/types/src/db_indexes.rs:92:9: 92:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:82:13: 82:23
    }

    bb0: {
        _2 = [const 0_u8; 9];            // scope 0 at cita-chain/types/src/db_indexes.rs:82:26: 82:34
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:83:21: 83:40
        _4 = const 0_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:83:16: 83:17
        _2[_4] = move _3;                // scope 1 at cita-chain/types/src/db_indexes.rs:83:9: 83:46
        _6 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:84:22: 84:28
        _5 = Shr(move _6, const 56_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:84:21: 84:35
        _7 = const 1_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:84:16: 84:17
        _2[_7] = move _5 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:84:9: 84:41
        _9 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:85:22: 85:28
        _8 = Shr(move _9, const 48_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:85:21: 85:35
        _10 = const 2_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:85:16: 85:17
        _2[_10] = move _8 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:85:9: 85:41
        _12 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:86:22: 86:28
        _11 = Shr(move _12, const 40_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:86:21: 86:35
        _13 = const 3_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:86:16: 86:17
        _2[_13] = move _11 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:86:9: 86:41
        _15 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:87:22: 87:28
        _14 = Shr(move _15, const 32_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:87:21: 87:35
        _16 = const 4_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:87:16: 87:17
        _2[_16] = move _14 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:87:9: 87:41
        _18 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:88:22: 88:28
        _17 = Shr(move _18, const 24_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:88:21: 88:35
        _19 = const 5_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:88:16: 88:17
        _2[_19] = move _17 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:88:9: 88:41
        _21 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:89:22: 89:28
        _20 = Shr(move _21, const 16_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:89:21: 89:35
        _22 = const 6_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:89:16: 89:17
        _2[_22] = move _20 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:89:9: 89:41
        _24 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:90:22: 90:28
        _23 = Shr(move _24, const 8_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:90:21: 90:34
        _25 = const 7_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:90:16: 90:17
        _2[_25] = move _23 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:90:9: 90:40
        _26 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:91:21: 91:27
        _27 = const 8_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:91:16: 91:17
        _2[_27] = move _26 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:91:9: 91:33
        _29 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:92:9: 92:24
        _28 = move _29 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/db_indexes.rs:92:9: 92:24
        _0 = slice::<impl [u8]>::to_vec(move _28) -> bb1; // scope 1 at cita-chain/types/src/db_indexes.rs:92:9: 92:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:92:16: 92:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:93:6: 93:6
    }
}

db_indexes::<impl at cita-chain/types/src/db_indexes.rs:80:1: 80:36>::get_index::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/db_indexes.rs:82:32: 82:33

    bb0: {
        _0 = const 9_usize;              // scope 0 at cita-chain/types/src/db_indexes.rs:82:32: 82:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:82:32: 82:33
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:98:1: 98:34>::get_index(_1: &BlockNumber2Body) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:99:18: 99:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:99:28: 99:35
    let mut _2: [u8; 9];                 // in scope 0 at cita-chain/types/src/db_indexes.rs:100:13: 100:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:101:21: 101:46
    let _4: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:101:16: 101:17
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:102:21: 102:35
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:102:22: 102:28
    let _7: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:102:16: 102:17
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:103:21: 103:35
    let mut _9: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:103:22: 103:28
    let _10: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:103:16: 103:17
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:104:21: 104:35
    let mut _12: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:104:22: 104:28
    let _13: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:104:16: 104:17
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:105:21: 105:35
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:105:22: 105:28
    let _16: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:105:16: 105:17
    let mut _17: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:106:21: 106:35
    let mut _18: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:106:22: 106:28
    let _19: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:106:16: 106:17
    let mut _20: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:107:21: 107:35
    let mut _21: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:107:22: 107:28
    let _22: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:107:16: 107:17
    let mut _23: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:108:21: 108:34
    let mut _24: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:108:22: 108:28
    let _25: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:108:16: 108:17
    let mut _26: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:109:21: 109:27
    let _27: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:109:16: 109:17
    let mut _28: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:110:9: 110:24
    let mut _29: &[u8; 9];               // in scope 0 at cita-chain/types/src/db_indexes.rs:110:9: 110:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:100:13: 100:23
    }

    bb0: {
        _2 = [const 0_u8; 9];            // scope 0 at cita-chain/types/src/db_indexes.rs:100:26: 100:34
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:101:21: 101:40
        _4 = const 0_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:101:16: 101:17
        _2[_4] = move _3;                // scope 1 at cita-chain/types/src/db_indexes.rs:101:9: 101:46
        _6 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:102:22: 102:28
        _5 = Shr(move _6, const 56_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:102:21: 102:35
        _7 = const 1_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:102:16: 102:17
        _2[_7] = move _5 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:102:9: 102:41
        _9 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:103:22: 103:28
        _8 = Shr(move _9, const 48_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:103:21: 103:35
        _10 = const 2_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:103:16: 103:17
        _2[_10] = move _8 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:103:9: 103:41
        _12 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:104:22: 104:28
        _11 = Shr(move _12, const 40_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:104:21: 104:35
        _13 = const 3_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:104:16: 104:17
        _2[_13] = move _11 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:104:9: 104:41
        _15 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:105:22: 105:28
        _14 = Shr(move _15, const 32_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:105:21: 105:35
        _16 = const 4_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:105:16: 105:17
        _2[_16] = move _14 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:105:9: 105:41
        _18 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:106:22: 106:28
        _17 = Shr(move _18, const 24_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:106:21: 106:35
        _19 = const 5_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:106:16: 106:17
        _2[_19] = move _17 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:106:9: 106:41
        _21 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:107:22: 107:28
        _20 = Shr(move _21, const 16_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:107:21: 107:35
        _22 = const 6_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:107:16: 107:17
        _2[_22] = move _20 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:107:9: 107:41
        _24 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:108:22: 108:28
        _23 = Shr(move _24, const 8_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:108:21: 108:34
        _25 = const 7_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:108:16: 108:17
        _2[_25] = move _23 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:108:9: 108:40
        _26 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:109:21: 109:27
        _27 = const 8_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:109:16: 109:17
        _2[_27] = move _26 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:109:9: 109:33
        _29 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:110:9: 110:24
        _28 = move _29 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/db_indexes.rs:110:9: 110:24
        _0 = slice::<impl [u8]>::to_vec(move _28) -> bb1; // scope 1 at cita-chain/types/src/db_indexes.rs:110:9: 110:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:110:16: 110:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:111:6: 111:6
    }
}

db_indexes::<impl at cita-chain/types/src/db_indexes.rs:98:1: 98:34>::get_index::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/db_indexes.rs:100:32: 100:33

    bb0: {
        _0 = const 9_usize;              // scope 0 at cita-chain/types/src/db_indexes.rs:100:32: 100:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:100:32: 100:33
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:116:1: 116:34>::get_index(_1: &BlockNumber2Hash) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:117:18: 117:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:117:28: 117:35
    let mut _2: [u8; 5];                 // in scope 0 at cita-chain/types/src/db_indexes.rs:118:13: 118:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:119:21: 119:42
    let _4: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:119:16: 119:17
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:120:21: 120:35
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:120:22: 120:28
    let _7: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:120:16: 120:17
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:121:21: 121:35
    let mut _9: u64;                     // in scope 0 at cita-chain/types/src/db_indexes.rs:121:22: 121:28
    let _10: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:121:16: 121:17
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:122:21: 122:34
    let mut _12: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:122:22: 122:28
    let _13: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:122:16: 122:17
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:123:21: 123:27
    let _15: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:123:16: 123:17
    let mut _16: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:124:9: 124:24
    let mut _17: &[u8; 5];               // in scope 0 at cita-chain/types/src/db_indexes.rs:124:9: 124:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:118:13: 118:23
    }

    bb0: {
        _2 = [const 0_u8; 5];            // scope 0 at cita-chain/types/src/db_indexes.rs:118:26: 118:34
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:119:21: 119:36
        _4 = const 0_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:119:16: 119:17
        _2[_4] = move _3;                // scope 1 at cita-chain/types/src/db_indexes.rs:119:9: 119:42
        _6 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:120:22: 120:28
        _5 = Shr(move _6, const 24_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:120:21: 120:35
        _7 = const 1_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:120:16: 120:17
        _2[_7] = move _5 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:120:9: 120:41
        _9 = ((*_1).0: u64);             // scope 1 at cita-chain/types/src/db_indexes.rs:121:22: 121:28
        _8 = Shr(move _9, const 16_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:121:21: 121:35
        _10 = const 2_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:121:16: 121:17
        _2[_10] = move _8 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:121:9: 121:41
        _12 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:122:22: 122:28
        _11 = Shr(move _12, const 8_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:122:21: 122:34
        _13 = const 3_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:122:16: 122:17
        _2[_13] = move _11 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:122:9: 122:40
        _14 = ((*_1).0: u64);            // scope 1 at cita-chain/types/src/db_indexes.rs:123:21: 123:27
        _15 = const 4_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:123:16: 123:17
        _2[_15] = move _14 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:123:9: 123:33
        _17 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:124:9: 124:24
        _16 = move _17 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/db_indexes.rs:124:9: 124:24
        _0 = slice::<impl [u8]>::to_vec(move _16) -> bb1; // scope 1 at cita-chain/types/src/db_indexes.rs:124:9: 124:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:124:16: 124:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:125:6: 125:6
    }
}

db_indexes::<impl at cita-chain/types/src/db_indexes.rs:116:1: 116:34>::get_index::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/db_indexes.rs:118:32: 118:33

    bb0: {
        _0 = const 5_usize;              // scope 0 at cita-chain/types/src/db_indexes.rs:118:32: 118:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:118:32: 118:33
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:130:1: 130:39>::get_index(_1: &Hash2TransactionIndex) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:131:18: 131:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:131:28: 131:35
    let mut _2: cita_types::H264;        // in scope 0 at cita-chain/types/src/db_indexes.rs:132:13: 132:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:133:21: 133:44
    let mut _4: &mut u8;                 // in scope 0 at cita-chain/types/src/db_indexes.rs:133:9: 133:18
    let mut _5: &mut cita_types::H264;   // in scope 0 at cita-chain/types/src/db_indexes.rs:133:9: 133:15
    let _6: ();                          // in scope 0 at cita-chain/types/src/db_indexes.rs:134:9: 134:49
    let mut _7: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:134:9: 134:49
    let mut _8: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:134:9: 134:23
    let mut _9: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:134:9: 134:18
    let mut _10: &mut [u8];              // in scope 0 at cita-chain/types/src/db_indexes.rs:134:9: 134:18
    let mut _11: &mut cita_types::H264;  // in scope 0 at cita-chain/types/src/db_indexes.rs:134:11: 134:17
    let mut _12: std::ops::RangeFrom<usize>; // in scope 0 at cita-chain/types/src/db_indexes.rs:134:19: 134:22
    let mut _13: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
    let _14: &[u8];                      // in scope 0 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
    let _15: &cita_types::H256;          // in scope 0 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
    let mut _16: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
    let _17: &[u8];                      // in scope 0 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
    let mut _18: &cita_types::H264;      // in scope 0 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:132:13: 132:23
    }

    bb0: {
        _2 = <H264 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:132:26: 132:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:132:26: 132:39
                                         // + literal: Const { ty: fn() -> H264 {<H264 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:133:21: 133:38
        _5 = &mut _2;                    // scope 1 at cita-chain/types/src/db_indexes.rs:133:9: 133:15
        _4 = <H264 as IndexMut<usize>>::index_mut(move _5, const 0_usize) -> bb2; // scope 1 at cita-chain/types/src/db_indexes.rs:133:9: 133:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:133:9: 133:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut H264, usize) -> &'a mut <H264 as Index<usize>>::Output {<H264 as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb2: {
        (*_4) = move _3;                 // scope 1 at cita-chain/types/src/db_indexes.rs:133:9: 133:44
        _11 = &mut _2;                   // scope 1 at cita-chain/types/src/db_indexes.rs:134:11: 134:17
        _10 = <H264 as DerefMut>::deref_mut(move _11) -> bb3; // scope 1 at cita-chain/types/src/db_indexes.rs:134:9: 134:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:134:9: 134:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut H264) -> &'a mut <H264 as Deref>::Target {<H264 as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 1 at cita-chain/types/src/db_indexes.rs:134:9: 134:18
        _12 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 1 at cita-chain/types/src/db_indexes.rs:134:19: 134:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _8 = <[u8] as IndexMut<RangeFrom<usize>>>::index_mut(move _9, move _12) -> bb4; // scope 1 at cita-chain/types/src/db_indexes.rs:134:9: 134:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:134:9: 134:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8], RangeFrom<usize>) -> &'a mut <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as IndexMut<RangeFrom<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = _8;                         // scope 1 at cita-chain/types/src/db_indexes.rs:134:9: 134:49
        _15 = &((*_1).0: cita_types::H256); // scope 1 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
        _14 = <H256 as Deref>::deref(_15) -> bb5; // scope 1 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:134:41: 134:48
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 1 at cita-chain/types/src/db_indexes.rs:134:41: 134:48
        _6 = core::slice::<impl [u8]>::clone_from_slice(move _7, move _13) -> bb6; // scope 1 at cita-chain/types/src/db_indexes.rs:134:9: 134:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:134:24: 134:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut [u8], &'b [u8]) {core::slice::<impl [u8]>::clone_from_slice}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
        _17 = <H264 as Deref>::deref(move _18) -> bb7; // scope 1 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:135:9: 135:24
                                         // + literal: Const { ty: for<'a> fn(&'a H264) -> &'a <H264 as Deref>::Target {<H264 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _17;                       // scope 1 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
        _0 = slice::<impl [u8]>::to_vec(move _16) -> bb8; // scope 1 at cita-chain/types/src/db_indexes.rs:135:9: 135:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:135:16: 135:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:136:6: 136:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:141:1: 141:36>::get_index(_1: &Hash2BlockReceipts) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:142:18: 142:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:142:28: 142:35
    let mut _2: cita_types::H264;        // in scope 0 at cita-chain/types/src/db_indexes.rs:143:13: 143:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:144:21: 144:46
    let mut _4: &mut u8;                 // in scope 0 at cita-chain/types/src/db_indexes.rs:144:9: 144:18
    let mut _5: &mut cita_types::H264;   // in scope 0 at cita-chain/types/src/db_indexes.rs:144:9: 144:15
    let _6: ();                          // in scope 0 at cita-chain/types/src/db_indexes.rs:145:9: 145:49
    let mut _7: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:145:9: 145:49
    let mut _8: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:145:9: 145:23
    let mut _9: &mut [u8];               // in scope 0 at cita-chain/types/src/db_indexes.rs:145:9: 145:18
    let mut _10: &mut [u8];              // in scope 0 at cita-chain/types/src/db_indexes.rs:145:9: 145:18
    let mut _11: &mut cita_types::H264;  // in scope 0 at cita-chain/types/src/db_indexes.rs:145:11: 145:17
    let mut _12: std::ops::RangeFrom<usize>; // in scope 0 at cita-chain/types/src/db_indexes.rs:145:19: 145:22
    let mut _13: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
    let _14: &[u8];                      // in scope 0 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
    let _15: &cita_types::H256;          // in scope 0 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
    let mut _16: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
    let _17: &[u8];                      // in scope 0 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
    let mut _18: &cita_types::H264;      // in scope 0 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:143:13: 143:23
    }

    bb0: {
        _2 = <H264 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:143:26: 143:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:143:26: 143:39
                                         // + literal: Const { ty: fn() -> H264 {<H264 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:144:21: 144:40
        _5 = &mut _2;                    // scope 1 at cita-chain/types/src/db_indexes.rs:144:9: 144:15
        _4 = <H264 as IndexMut<usize>>::index_mut(move _5, const 0_usize) -> bb2; // scope 1 at cita-chain/types/src/db_indexes.rs:144:9: 144:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:144:9: 144:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut H264, usize) -> &'a mut <H264 as Index<usize>>::Output {<H264 as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb2: {
        (*_4) = move _3;                 // scope 1 at cita-chain/types/src/db_indexes.rs:144:9: 144:46
        _11 = &mut _2;                   // scope 1 at cita-chain/types/src/db_indexes.rs:145:11: 145:17
        _10 = <H264 as DerefMut>::deref_mut(move _11) -> bb3; // scope 1 at cita-chain/types/src/db_indexes.rs:145:9: 145:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:145:9: 145:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut H264) -> &'a mut <H264 as Deref>::Target {<H264 as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 1 at cita-chain/types/src/db_indexes.rs:145:9: 145:18
        _12 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 1 at cita-chain/types/src/db_indexes.rs:145:19: 145:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _8 = <[u8] as IndexMut<RangeFrom<usize>>>::index_mut(move _9, move _12) -> bb4; // scope 1 at cita-chain/types/src/db_indexes.rs:145:9: 145:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:145:9: 145:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8], RangeFrom<usize>) -> &'a mut <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as IndexMut<RangeFrom<usize>>>::index_mut}, val: Value(<ZST>) }
    }
 
    bb4: {
        _7 = _8;                         // scope 1 at cita-chain/types/src/db_indexes.rs:145:9: 145:49
        _15 = &((*_1).0: cita_types::H256); // scope 1 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
        _14 = <H256 as Deref>::deref(_15) -> bb5; // scope 1 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:145:41: 145:48
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 1 at cita-chain/types/src/db_indexes.rs:145:41: 145:48
        _6 = core::slice::<impl [u8]>::clone_from_slice(move _7, move _13) -> bb6; // scope 1 at cita-chain/types/src/db_indexes.rs:145:9: 145:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:145:24: 145:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut [u8], &'b [u8]) {core::slice::<impl [u8]>::clone_from_slice}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
        _17 = <H264 as Deref>::deref(move _18) -> bb7; // scope 1 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:146:9: 146:24
                                         // + literal: Const { ty: for<'a> fn(&'a H264) -> &'a <H264 as Deref>::Target {<H264 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _17;                       // scope 1 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
        _0 = slice::<impl [u8]>::to_vec(move _16) -> bb8; // scope 1 at cita-chain/types/src/db_indexes.rs:146:9: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:146:16: 146:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:147:6: 147:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:150:10: 150:15>::fmt(_1: &LogGroupPosition, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
    let mut _4: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
    let _5: &&bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
    let _6: &bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42

    bb0: {
        _3 = const "LogGroupPosition";   // scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:150:10: 150:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: bloomchain::group::GroupPosition); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _5 = &_6;                        // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:150:10: 150:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:150:10: 150:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:150:15: 150:15
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:150:17: 150:26>::eq(_1: &LogGroupPosition, _2: &LogGroupPosition) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:150:17: 150:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/db_indexes.rs:150:17: 150:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/db_indexes.rs:150:17: 150:26
    let mut _3: &bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
    let mut _4: &bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42

    bb0: {
        _3 = &((*_1).0: bloomchain::group::GroupPosition); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _4 = &((*_2).0: bloomchain::group::GroupPosition); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _0 = <GroupPosition as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GroupPosition, &'b GroupPosition) -> bool {<GroupPosition as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:150:26: 150:26
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:150:28: 150:30>::assert_receiver_is_total_eq(_1: &LogGroupPosition) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:150:28: 150:30
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:150:28: 150:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:150:30: 150:30
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:150:32: 150:36>::hash(_1: &LogGroupPosition, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:150:32: 150:36
    debug state => _2;                   // in scope 0 at cita-chain/types/src/db_indexes.rs:150:32: 150:36
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/db_indexes.rs:150:32: 150:36
    let _3: &bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42

    bb0: {
        _3 = &((*_1).0: bloomchain::group::GroupPosition); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _0 = <GroupPosition as std::hash::Hash>::hash::<__H>(_3, _2) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GroupPosition, &'b mut __H) {<GroupPosition as std::hash::Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:150:36: 150:36
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:150:38: 150:43>::clone(_1: &LogGroupPosition) -> LogGroupPosition {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:150:38: 150:43
    let mut _0: db_indexes::LogGroupPosition; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:150:38: 150:43
    let mut _2: bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
    let _3: &bloomchain::group::GroupPosition; // in scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42

    bb0: {
        _3 = &((*_1).0: bloomchain::group::GroupPosition); // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
        _2 = <GroupPosition as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:151:29: 151:42
                                         // + literal: Const { ty: for<'a> fn(&'a GroupPosition) -> GroupPosition {<GroupPosition as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = LogGroupPosition(move _2);  // scope 0 at cita-chain/types/src/db_indexes.rs:150:38: 150:43
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:150:43: 150:43
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:153:1: 153:46>::from(_1: GroupPosition) -> LogGroupPosition {
    debug position => _1;                // in scope 0 at cita-chain/types/src/db_indexes.rs:154:13: 154:21
    let mut _0: db_indexes::LogGroupPosition; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:154:41: 154:45

    bb0: {
        _0 = LogGroupPosition(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:155:9: 155:35
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:156:6: 156:6
    }
}

fn db_indexes::<impl at cita-chain/types/src/db_indexes.rs:159:1: 159:34>::get_index(_1: &LogGroupPosition) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/db_indexes.rs:160:18: 160:23
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/db_indexes.rs:160:28: 160:35
    let mut _2: [u8; 6];                 // in scope 0 at cita-chain/types/src/db_indexes.rs:161:13: 161:23
    let mut _3: u8;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:162:21: 162:45
    let _4: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:162:16: 162:17
    let mut _5: usize;                   // in scope 0 at cita-chain/types/src/db_indexes.rs:163:21: 163:33
    let _6: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:163:16: 163:17
    let mut _7: usize;                   // in scope 0 at cita-chain/types/src/db_indexes.rs:164:21: 164:41
    let mut _8: usize;                   // in scope 0 at cita-chain/types/src/db_indexes.rs:164:22: 164:34
    let _9: usize;                       // in scope 0 at cita-chain/types/src/db_indexes.rs:164:16: 164:17
    let mut _10: usize;                  // in scope 0 at cita-chain/types/src/db_indexes.rs:165:21: 165:41
    let mut _11: usize;                  // in scope 0 at cita-chain/types/src/db_indexes.rs:165:22: 165:34
    let _12: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:165:16: 165:17
    let mut _13: usize;                  // in scope 0 at cita-chain/types/src/db_indexes.rs:166:21: 166:40
    let mut _14: usize;                  // in scope 0 at cita-chain/types/src/db_indexes.rs:166:22: 166:34
    let _15: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:166:16: 166:17
    let mut _16: usize;                  // in scope 0 at cita-chain/types/src/db_indexes.rs:167:21: 167:33
    let _17: usize;                      // in scope 0 at cita-chain/types/src/db_indexes.rs:167:16: 167:17
    let mut _18: &[u8];                  // in scope 0 at cita-chain/types/src/db_indexes.rs:168:9: 168:24
    let mut _19: &[u8; 6];               // in scope 0 at cita-chain/types/src/db_indexes.rs:168:9: 168:24
    scope 1 {
        debug result => _2;              // in scope 1 at cita-chain/types/src/db_indexes.rs:161:13: 161:23
    }

    bb0: {
        _2 = [const 0_u8; 6];            // scope 0 at cita-chain/types/src/db_indexes.rs:161:26: 161:34
        _3 = const _;                    // scope 1 at cita-chain/types/src/db_indexes.rs:162:21: 162:39
        _4 = const 0_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:162:16: 162:17
        _2[_4] = move _3;                // scope 1 at cita-chain/types/src/db_indexes.rs:162:9: 162:45
        _5 = (((*_1).0: bloomchain::group::GroupPosition).0: usize); // scope 1 at cita-chain/types/src/db_indexes.rs:163:21: 163:33
        _6 = const 1_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:163:16: 163:17
        _2[_6] = move _5 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:163:9: 163:39
        _8 = (((*_1).0: bloomchain::group::GroupPosition).1: usize); // scope 1 at cita-chain/types/src/db_indexes.rs:164:22: 164:34
        _7 = Shr(move _8, const 24_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:164:21: 164:41
        _9 = const 2_usize;              // scope 1 at cita-chain/types/src/db_indexes.rs:164:16: 164:17
        _2[_9] = move _7 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:164:9: 164:47
        _11 = (((*_1).0: bloomchain::group::GroupPosition).1: usize); // scope 1 at cita-chain/types/src/db_indexes.rs:165:22: 165:34
        _10 = Shr(move _11, const 16_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:165:21: 165:41
        _12 = const 3_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:165:16: 165:17
        _2[_12] = move _10 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:165:9: 165:47
        _14 = (((*_1).0: bloomchain::group::GroupPosition).1: usize); // scope 1 at cita-chain/types/src/db_indexes.rs:166:22: 166:34
        _13 = Shr(move _14, const 8_i32); // scope 1 at cita-chain/types/src/db_indexes.rs:166:21: 166:40
        _15 = const 4_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:166:16: 166:17
        _2[_15] = move _13 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:166:9: 166:46
        _16 = (((*_1).0: bloomchain::group::GroupPosition).1: usize); // scope 1 at cita-chain/types/src/db_indexes.rs:167:21: 167:33
        _17 = const 5_usize;             // scope 1 at cita-chain/types/src/db_indexes.rs:167:16: 167:17
        _2[_17] = move _16 as u8 (IntToInt); // scope 1 at cita-chain/types/src/db_indexes.rs:167:9: 167:39
        _19 = &_2;                       // scope 1 at cita-chain/types/src/db_indexes.rs:168:9: 168:24
        _18 = move _19 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/db_indexes.rs:168:9: 168:24
        _0 = slice::<impl [u8]>::to_vec(move _18) -> bb1; // scope 1 at cita-chain/types/src/db_indexes.rs:168:9: 168:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/db_indexes.rs:168:16: 168:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:169:6: 169:6
    }
}

db_indexes::<impl at cita-chain/types/src/db_indexes.rs:159:1: 159:34>::get_index::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/db_indexes.rs:161:32: 161:33

    bb0: {
        _0 = const 6_usize;              // scope 0 at cita-chain/types/src/db_indexes.rs:161:32: 161:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:161:32: 161:33
    }
}

fn authentication::<impl at cita-chain/types/src/errors/authentication.rs:17:10: 17:15>::fmt(_1: &AuthenticationError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    let _8: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    }

    bb1: {
        _8 = const "InvalidTransaction"; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:14: 17:15
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
    }

    bb3: {
        _5 = const "NoTransactionPermission"; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:14: 17:15
    }

    bb4: {
        _6 = const "NoContractPermission"; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:14: 17:15
    }

    bb5: {
        _7 = const "NoCallPermission";   // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:14: 17:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:17:10: 17:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:17:15: 17:15
    }
}

fn authentication::<impl at cita-chain/types/src/errors/authentication.rs:17:17: 17:26>::eq(_1: &AuthenticationError, _2: &AuthenticationError) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
    let _3: isize;                       // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        let _4: isize;                   // in scope 1 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/errors/authentication.rs:17:17: 17:26
        return;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:17:26: 17:26
    }
}

fn authentication::<impl at cita-chain/types/src/errors/authentication.rs:17:28: 17:33>::clone(_1: &AuthenticationError) -> AuthenticationError {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    let mut _0: errors::authentication::AuthenticationError; // return place in scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb1: {
        _0 = const AuthenticationError::InvalidTransaction; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: AuthenticationError, val: Value(Scalar(0x03)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb3: {
        _0 = const AuthenticationError::NoTransactionPermission; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: AuthenticationError, val: Value(Scalar(0x00)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb4: {
        _0 = const AuthenticationError::NoContractPermission; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: AuthenticationError, val: Value(Scalar(0x01)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb5: {
        _0 = const AuthenticationError::NoCallPermission; // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: AuthenticationError, val: Value(Scalar(0x02)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:17:28: 17:33
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:17:33: 17:33
    }
}

fn authentication::<impl at cita-chain/types/src/errors/authentication.rs:25:1: 25:42>::fmt(_1: &AuthenticationError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/authentication.rs:26:12: 26:17
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/authentication.rs:26:19: 26:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/authentication.rs:26:46: 26:57
    let _3: std::string::String;         // in scope 0 at cita-chain/types/src/errors/authentication.rs:27:13: 27:22
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/authentication.rs:28:13: 28:57
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:28:61: 28:89
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:29:58: 29:89
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:30:54: 30:84
    let _8: &str;                        // in scope 0 at cita-chain/types/src/errors/authentication.rs:31:56: 31:78
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _10: &[&str];                // in scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/authentication.rs:33:25: 33:34
    let _15: &std::string::String;       // in scope 0 at cita-chain/types/src/errors/authentication.rs:33:25: 33:34
    scope 1 {
        debug printable => _3;           // in scope 1 at cita-chain/types/src/errors/authentication.rs:27:13: 27:22
        let mut _16: &[&str; 1];         // in scope 1 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/authentication.rs:27:31: 27:36
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/authentication.rs:27:25: 27:36
    }

    bb1: {
        _8 = const "Invalid transaction."; // scope 0 at cita-chain/types/src/errors/authentication.rs:31:56: 31:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:31:56: 31:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_8) -> bb6; // scope 0 at cita-chain/types/src/errors/authentication.rs:31:56: 31:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:31:79: 31:87
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/authentication.rs:27:31: 27:36
    }

    bb3: {
        _5 = const "No transaction permission."; // scope 0 at cita-chain/types/src/errors/authentication.rs:28:61: 28:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:28:61: 28:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_5) -> bb6; // scope 0 at cita-chain/types/src/errors/authentication.rs:28:61: 28:100
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:28:90: 28:98
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = const "No create contract permision."; // scope 0 at cita-chain/types/src/errors/authentication.rs:29:58: 29:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:29:58: 29:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_6) -> bb6; // scope 0 at cita-chain/types/src/errors/authentication.rs:29:58: 29:100
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:29:90: 29:98
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = const "No contract call permission."; // scope 0 at cita-chain/types/src/errors/authentication.rs:30:54: 30:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:30:54: 30:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_7) -> bb6; // scope 0 at cita-chain/types/src/errors/authentication.rs:30:54: 30:95
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:30:85: 30:93
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = const _;                   // scope 1 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:33:19: 33:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<AuthenticationError as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _10 = _16 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
        _15 = &_3;                       // scope 1 at cita-chain/types/src/errors/authentication.rs:33:25: 33:34
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_15) -> [return: bb7, unwind: bb11]; // scope 1 at cita-chain/types/src/errors/authentication.rs:33:25: 33:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:33:25: 33:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = [move _14];                // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _12 = &_13;                      // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _11 = _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb8, unwind: bb11]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(_2, move _9) -> [return: bb9, unwind: bb11]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_3) -> bb10;                // scope 0 at cita-chain/types/src/errors/authentication.rs:34:5: 34:6
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:34:6: 34:6
    }

    bb11 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at cita-chain/types/src/errors/authentication.rs:34:5: 34:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:26:5: 34:6
    }
}

promoted[0] in authentication::<impl at cita-chain/types/src/errors/authentication.rs:25:1: 25:42>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/authentication.rs:33:19: 33:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
        return;                          // scope 0 at cita-chain/types/src/errors/authentication.rs:33:19: 33:23
    }
}

fn errors::call::<impl at cita-chain/types/src/errors/call.rs:18:10: 18:15>::fmt(_1: &errors::call::CallError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let _8: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/call.rs:29:15: 29:29
    let _9: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/call.rs:29:15: 29:29
    let _11: &&errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/call.rs:29:15: 29:29
    scope 1 {
        debug __self_0 => _8;            // in scope 1 at cita-chain/types/src/errors/call.rs:29:15: 29:29
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    }

    bb1: {
        _8 = &(((*_1) as Execution).0: errors::execution::ExecutionError); // scope 0 at cita-chain/types/src/errors/call.rs:29:15: 29:29
        _9 = const "Execution";          // scope 1 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 1 at cita-chain/types/src/errors/call.rs:29:15: 29:29
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/call.rs:29:15: 29:29
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb7; // scope 1 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
    }

    bb3: {
        _4 = const "TransactionNotFound"; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _4) -> bb7; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = const "StatePruned";        // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _5) -> bb7; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = const "Exceptional";        // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _6) -> bb7; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = const "StateCorrupt";       // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _7) -> bb7; // scope 0 at cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:18:10: 18:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:18:15: 18:15
    }
}

fn errors::call::<impl at cita-chain/types/src/errors/call.rs:32:1: 32:32>::fmt(_1: &errors::call::CallError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/call.rs:33:12: 33:17
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/call.rs:33:19: 33:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/call.rs:33:46: 33:57
    let _3: std::string::String;         // in scope 0 at cita-chain/types/src/errors/call.rs:36:13: 36:16
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/call.rs:37:13: 37:32
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:37:36: 37:80
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:38:28: 38:86
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:39:28: 39:68
    let _8: &str;                        // in scope 0 at cita-chain/types/src/errors/call.rs:40:29: 40:66
    let _9: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/call.rs:41:23: 41:28
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _12: &[&str];                // in scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/call.rs:41:47: 41:48
    let _17: &&errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/call.rs:41:47: 41:48
    let mut _18: std::fmt::Arguments<'_>; // in scope 0 at cita-chain/types/src/errors/call.rs:44:21: 44:75
    let mut _19: &[&str];                // in scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at cita-chain/types/src/errors/call.rs:44:21: 44:75
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at cita-chain/types/src/errors/call.rs:44:21: 44:75
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at cita-chain/types/src/errors/call.rs:44:21: 44:75
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/call.rs:44:71: 44:74
    let _24: &std::string::String;       // in scope 0 at cita-chain/types/src/errors/call.rs:44:71: 44:74
    scope 1 {
        debug msg => _3;                 // in scope 1 at cita-chain/types/src/errors/call.rs:36:13: 36:16
        let mut _25: &[&str; 2];         // in scope 1 at cita-chain/types/src/errors/call.rs:44:34: 44:69
    }
    scope 2 {
        debug e => _9;                   // in scope 2 at cita-chain/types/src/errors/call.rs:41:23: 41:28
        let _10: std::string::String;    // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _26: &[&str; 1];         // in scope 2 at cita-chain/types/src/errors/call.rs:41:41: 41:45
        scope 3 {
            debug res => _10;            // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/call.rs:36:25: 36:30
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/call.rs:36:19: 36:30
    }

    bb1: {
        _9 = &(((*_1) as Execution).0: errors::execution::ExecutionError); // scope 0 at cita-chain/types/src/errors/call.rs:41:23: 41:28
        _26 = const _;                   // scope 2 at cita-chain/types/src/errors/call.rs:41:41: 41:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:41:41: 41:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::call::CallError as std::fmt::Display>::fmt, [], Some(promoted[1])) }
        _12 = _26 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/call.rs:41:41: 41:45
        _17 = &_9;                       // scope 2 at cita-chain/types/src/errors/call.rs:41:47: 41:48
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<&ExecutionError>(_17) -> bb7; // scope 2 at cita-chain/types/src/errors/call.rs:41:47: 41:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:41:47: 41:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &ExecutionError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&ExecutionError>}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/call.rs:36:25: 36:30
    }

    bb3: {
        _5 = const "Transaction couldn't be found in the chain"; // scope 0 at cita-chain/types/src/errors/call.rs:37:36: 37:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:37:36: 37:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <&str as Into<std::string::String>>::into(_5) -> bb10; // scope 0 at cita-chain/types/src/errors/call.rs:37:36: 37:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:37:81: 37:85
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = const "Couldn't find the transaction block's state in the chain"; // scope 0 at cita-chain/types/src/errors/call.rs:38:28: 38:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:38:28: 38:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <&str as Into<std::string::String>>::into(_6) -> bb10; // scope 0 at cita-chain/types/src/errors/call.rs:38:28: 38:93
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:38:87: 38:91
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = const "An exception happened in the execution"; // scope 0 at cita-chain/types/src/errors/call.rs:39:28: 39:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:39:28: 39:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <&str as Into<std::string::String>>::into(_7) -> bb10; // scope 0 at cita-chain/types/src/errors/call.rs:39:28: 39:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:39:69: 39:73
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = const "Stored state found to be corrupted."; // scope 0 at cita-chain/types/src/errors/call.rs:40:29: 40:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:40:29: 40:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <&str as Into<std::string::String>>::into(_8) -> bb10; // scope 0 at cita-chain/types/src/errors/call.rs:40:29: 40:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:40:67: 40:71
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = [move _16];                // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _14 = &_15;                      // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _13 = _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> bb8; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = format(move _11) -> bb9;   // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb9: {
        _3 = move _10;                   // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb10;                    // scope 0 at cita-chain/types/src/errors/call.rs:41:48: 41:49
    }

    bb10: {
        _25 = const _;                   // scope 1 at cita-chain/types/src/errors/call.rs:44:34: 44:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:34: 44:69
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<errors::call::CallError as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _19 = _25 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/call.rs:44:34: 44:69
        _24 = &_3;                       // scope 1 at cita-chain/types/src/errors/call.rs:44:71: 44:74
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_24) -> [return: bb11, unwind: bb15]; // scope 1 at cita-chain/types/src/errors/call.rs:44:71: 44:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:71: 44:74
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = [move _23];                // scope 1 at cita-chain/types/src/errors/call.rs:44:21: 44:75
        _21 = &_22;                      // scope 1 at cita-chain/types/src/errors/call.rs:44:21: 44:75
        _20 = _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/call.rs:44:21: 44:75
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb12, unwind: bb15]; // scope 1 at cita-chain/types/src/errors/call.rs:44:21: 44:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:21: 44:75
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _0 = Formatter::<'_>::write_fmt(_2, move _18) -> [return: bb13, unwind: bb15]; // scope 1 at cita-chain/types/src/errors/call.rs:44:9: 44:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:11: 44:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_3) -> bb14;                // scope 0 at cita-chain/types/src/errors/call.rs:45:5: 45:6
    }

    bb14: {
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:45:6: 45:6
    }

    bb15 (cleanup): {
        drop(_3) -> bb16;                // scope 0 at cita-chain/types/src/errors/call.rs:45:5: 45:6
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/call.rs:33:5: 45:6
    }
}

promoted[0] in errors::call::<impl at cita-chain/types/src/errors/call.rs:32:1: 32:32>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69

    bb0: {
        _1 = [const "Transaction execution error (", const ")."]; // scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:34: 44:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:44:34: 44:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:44:34: 44:69
    }
}

promoted[1] in errors::call::<impl at cita-chain/types/src/errors/call.rs:32:1: 32:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/call.rs:41:41: 41:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:41:41: 41:45
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:22:10: 22:15>::fmt(_1: &ExecutionError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _4: &std::string::String;        // in scope 0 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
    let _7: &&std::string::String;       // in scope 0 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
    let _8: &errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
    let _9: &str;                        // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
    let _11: &&errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
    let _12: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _13: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _14: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _15: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _16: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    let _17: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    }

    bb1: {
        _17 = const "AccountQuotaLimitReached"; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _17) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
    }

    bb3: {
        _4 = &(((*_1) as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _5 = const "Internal";           // scope 1 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb10; // scope 1 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &(((*_1) as Authentication).0: errors::authentication::AuthenticationError); // scope 0 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _9 = const "Authentication";     // scope 2 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb10; // scope 2 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = const "InvalidTransaction"; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _12) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = const "NotEnoughBaseGas";  // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _13) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = const "InvalidNonce";      // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _14) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = const "NotEnoughBalance";  // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _15) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = const "BlockQuotaLimitReached"; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _16) -> bb10; // scope 0 at cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:22:10: 22:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:22:15: 22:15
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:22:17: 22:26>::eq(_1: &ExecutionError, _2: &ExecutionError) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let _3: isize;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _7: (&errors::execution::ExecutionError, &errors::execution::ExecutionError); // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _9: isize;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _15: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _16: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _17: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _18: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _19: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _20: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    let mut _21: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        let _4: isize;                   // in scope 1 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
            let _11: &std::string::String; // in scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
            let _12: &std::string::String; // in scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
            let _13: &errors::authentication::AuthenticationError; // in scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
            let _14: &errors::authentication::AuthenticationError; // in scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
            scope 3 {
                debug __self_0 => _11;   // in scope 3 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
                debug __arg1_0 => _12;   // in scope 3 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
            }
            scope 4 {
                debug __self_0 => _13;   // in scope 4 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
                debug __arg1_0 => _14;   // in scope 4 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _5 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb1: {
        _0 = const false;                // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        goto -> bb3;                     // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb2: {
        _7 = (_1, _2);                   // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _15 = deref_copy (_7.0: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _10 = discriminant((*_15));      // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:22:26: 22:26
    }

    bb4: {
        _16 = deref_copy (_7.1: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _8 = discriminant((*_16));       // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        switchInt(move _8) -> [0: bb7, otherwise: bb5]; // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb5: {
        _6 = const true;                 // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        goto -> bb9;                     // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb6: {
        _17 = deref_copy (_7.1: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        _9 = discriminant((*_17));       // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        switchInt(move _9) -> [1: bb8, otherwise: bb5]; // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }

    bb7: {
        _18 = deref_copy (_7.0: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _11 = &(((*_18) as Internal).0: std::string::String); // scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _19 = deref_copy (_7.1: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _12 = &(((*_19) as Internal).0: std::string::String); // scope 2 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
        _6 = <std::string::String as PartialEq>::eq(_11, _12) -> bb9; // scope 3 at cita-chain/types/src/errors/execution.rs:24:14: 24:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:24:14: 24:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::string::String, &'b std::string::String) -> bool {<std::string::String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = deref_copy (_7.0: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _13 = &(((*_20) as Authentication).0: errors::authentication::AuthenticationError); // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _21 = deref_copy (_7.1: &errors::execution::ExecutionError); // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _14 = &(((*_21) as Authentication).0: errors::authentication::AuthenticationError); // scope 2 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
        _6 = <AuthenticationError as PartialEq>::eq(_13, _14) -> bb9; // scope 4 at cita-chain/types/src/errors/execution.rs:25:20: 25:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:25:20: 25:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a AuthenticationError, &'b AuthenticationError) -> bool {<AuthenticationError as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _6;                    // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
        goto -> bb3;                     // scope 2 at cita-chain/types/src/errors/execution.rs:22:17: 22:26
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:36:1: 36:37>::fmt(_1: &ExecutionError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/execution.rs:37:12: 37:17
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:37:19: 37:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:37:46: 37:57
    let _3: std::string::String;         // in scope 0 at cita-chain/types/src/errors/execution.rs:38:13: 38:22
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:39:13: 39:46
    let _5: &std::string::String;        // in scope 0 at cita-chain/types/src/errors/execution.rs:39:38: 39:45
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _8: &[&str];                 // in scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/execution.rs:39:82: 39:85
    let _13: &&std::string::String;      // in scope 0 at cita-chain/types/src/errors/execution.rs:39:82: 39:85
    let _14: &errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/execution.rs:40:44: 40:51
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _17: &[&str];                // in scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/execution.rs:40:88: 40:91
    let _22: &&errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/execution.rs:40:88: 40:91
    let _23: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:41:51: 41:72
    let _24: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:42:49: 42:70
    let _25: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:43:45: 43:60
    let _26: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:44:49: 44:69
    let _27: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:45:55: 45:82
    let _28: &str;                       // in scope 0 at cita-chain/types/src/errors/execution.rs:46:57: 46:86
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _30: &[&str];                // in scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _32: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _33: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/execution.rs:48:25: 48:34
    let _35: &std::string::String;       // in scope 0 at cita-chain/types/src/errors/execution.rs:48:25: 48:34
    scope 1 {
        debug printable => _3;           // in scope 1 at cita-chain/types/src/errors/execution.rs:38:13: 38:22
        let mut _36: &[&str; 1];         // in scope 1 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
    }
    scope 2 {
        debug err => _5;                 // in scope 2 at cita-chain/types/src/errors/execution.rs:39:38: 39:45
        let _6: std::string::String;     // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _37: &[&str; 1];         // in scope 2 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
        scope 3 {
            debug res => _6;             // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }
    scope 4 {
        debug err => _14;                // in scope 4 at cita-chain/types/src/errors/execution.rs:40:44: 40:51
        let _15: std::string::String;    // in scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _38: &[&str; 1];         // in scope 4 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
        scope 5 {
            debug res => _15;            // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/execution.rs:38:31: 38:36
        switchInt(move _4) -> [0: bb3, 1: bb7, 2: bb11, 3: bb12, 4: bb13, 5: bb14, 6: bb15, 7: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/execution.rs:38:25: 38:36
    }

    bb1: {
        _28 = const "account quota limit reached"; // scope 0 at cita-chain/types/src/errors/execution.rs:46:57: 46:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:46:57: 46:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_28) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:46:57: 46:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:46:87: 46:95
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/execution.rs:38:31: 38:36
    }

    bb3: {
        _5 = &(((*_1) as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/execution.rs:39:38: 39:45
        _37 = const _;                   // scope 2 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:39:58: 39:80
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ExecutionError as std::fmt::Display>::fmt, [], Some(promoted[1])) }
        _8 = _37 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
        _13 = &_5;                       // scope 2 at cita-chain/types/src/errors/execution.rs:39:82: 39:85
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<&std::string::String>(_13) -> bb4; // scope 2 at cita-chain/types/src/errors/execution.rs:39:82: 39:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:39:82: 39:85
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&std::string::String>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = [move _12];                // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = &_11;                      // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _9 = _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> bb5; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = format(move _7) -> bb6;     // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb16;                    // scope 0 at cita-chain/types/src/errors/execution.rs:39:85: 39:86
    }

    bb7: {
        _14 = &(((*_1) as Authentication).0: errors::authentication::AuthenticationError); // scope 0 at cita-chain/types/src/errors/execution.rs:40:44: 40:51
        _38 = const _;                   // scope 4 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:40:64: 40:86
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ExecutionError as std::fmt::Display>::fmt, [], Some(promoted[2])) }
        _17 = _38 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
        _22 = &_14;                      // scope 4 at cita-chain/types/src/errors/execution.rs:40:88: 40:91
        _21 = core::fmt::ArgumentV1::<'_>::new_debug::<&AuthenticationError>(_22) -> bb8; // scope 4 at cita-chain/types/src/errors/execution.rs:40:88: 40:91
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:40:88: 40:91
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &AuthenticationError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&AuthenticationError>}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = [move _21];                // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _19 = &_20;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _18 = _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> bb9; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = format(move _16) -> bb10;  // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb10: {
        _3 = move _15;                   // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb16;                    // scope 0 at cita-chain/types/src/errors/execution.rs:40:91: 40:92
    }

    bb11: {
        _23 = const "invalid transaction"; // scope 0 at cita-chain/types/src/errors/execution.rs:41:51: 41:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:41:51: 41:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_23) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:41:51: 41:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:41:73: 41:81
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = const "not enough base gas"; // scope 0 at cita-chain/types/src/errors/execution.rs:42:49: 42:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:42:49: 42:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_24) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:42:49: 42:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:42:71: 42:79
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = const "invalid nonce";     // scope 0 at cita-chain/types/src/errors/execution.rs:43:45: 43:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:43:45: 43:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_25) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:43:45: 43:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:43:61: 43:69
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = const "not enough balance"; // scope 0 at cita-chain/types/src/errors/execution.rs:44:49: 44:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:44:49: 44:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_26) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:44:49: 44:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:44:70: 44:78
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb15: {
        _27 = const "block quota limit reached"; // scope 0 at cita-chain/types/src/errors/execution.rs:45:55: 45:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:45:55: 45:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as ToOwned>::to_owned(_27) -> bb16; // scope 0 at cita-chain/types/src/errors/execution.rs:45:55: 45:93
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:45:83: 45:91
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb16: {
        _36 = const _;                   // scope 1 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:48:19: 48:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ExecutionError as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _30 = _36 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
        _35 = &_3;                       // scope 1 at cita-chain/types/src/errors/execution.rs:48:25: 48:34
        _34 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_35) -> [return: bb17, unwind: bb21]; // scope 1 at cita-chain/types/src/errors/execution.rs:48:25: 48:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:48:25: 48:34
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb17: {
        _33 = [move _34];                // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _32 = &_33;                      // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _31 = _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb18, unwind: bb21]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _0 = Formatter::<'_>::write_fmt(_2, move _29) -> [return: bb19, unwind: bb21]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_3) -> bb20;                // scope 0 at cita-chain/types/src/errors/execution.rs:49:5: 49:6
    }

    bb20: {
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:49:6: 49:6
    }

    bb21 (cleanup): {
        drop(_3) -> bb22;                // scope 0 at cita-chain/types/src/errors/execution.rs:49:5: 49:6
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/execution.rs:37:5: 49:6
    }
}

promoted[0] in execution::<impl at cita-chain/types/src/errors/execution.rs:36:1: 36:37>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:48:19: 48:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:48:19: 48:23
    }
}

promoted[1] in execution::<impl at cita-chain/types/src/errors/execution.rs:36:1: 36:37>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80

    bb0: {
        _1 = [const "internal error: "]; // scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:39:58: 39:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:39:58: 39:80
    }
}

promoted[2] in execution::<impl at cita-chain/types/src/errors/execution.rs:36:1: 36:37>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86

    bb0: {
        _1 = [const "internal error: "]; // scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:40:64: 40:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:40:64: 40:86
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:52:1: 52:42>::from(_1: NativeError) -> ExecutionError {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/execution.rs:53:13: 53:16
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:53:34: 53:38
    let _2: std::string::String;         // in scope 0 at cita-chain/types/src/errors/execution.rs:55:35: 55:42
    scope 1 {
        debug err_str => _2;             // in scope 1 at cita-chain/types/src/errors/execution.rs:55:35: 55:42
    }

    bb0: {
        _2 = move ((_1 as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/execution.rs:55:35: 55:42
        _0 = ExecutionError::Internal(move _2); // scope 1 at cita-chain/types/src/errors/execution.rs:55:47: 55:80
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:57:6: 57:6
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:60:1: 60:50>::from(_1: AuthenticationError) -> ExecutionError {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/execution.rs:61:13: 61:16
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:61:42: 61:46

    bb0: {
        _0 = ExecutionError::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:62:9: 62:44
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:63:6: 63:6
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:66:1: 66:41>::from(_1: cita_vm::state::Error) -> ExecutionError {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/execution.rs:67:13: 67:16
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:67:33: 67:37
    let mut _2: std::string::String;     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:119:23: 122:6
    let _3: std::string::String;         // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _5: &[&str];                 // in scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/execution.rs:68:48: 68:51
    let _10: &cita_vm::state::Error;     // in scope 0 at cita-chain/types/src/errors/execution.rs:68:48: 68:51
    let mut _11: &[&str; 1];             // in scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
    scope 1 {
        debug res => _3;                 // in scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
    }

    bb0: {
        _11 = const _;                   // scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:68:42: 68:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ExecutionError as From<cita_vm::state::Error>>::from, [], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
        _10 = &_1;                       // scope 0 at cita-chain/types/src/errors/execution.rs:68:48: 68:51
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<cita_vm::state::Error>(_10) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/types/src/errors/execution.rs:68:48: 68:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:68:48: 68:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b cita_vm::state::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<cita_vm::state::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb5]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = move _3;                    // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _0 = ExecutionError::Internal(move _2); // scope 0 at cita-chain/types/src/errors/execution.rs:68:9: 68:53
        drop(_1) -> bb4;                 // scope 0 at cita-chain/types/src/errors/execution.rs:69:5: 69:6
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:69:6: 69:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at cita-chain/types/src/errors/execution.rs:69:5: 69:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/execution.rs:67:5: 69:6
    }
}

promoted[0] in execution::<impl at cita-chain/types/src/errors/execution.rs:66:1: 66:41>::from: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/execution.rs:68:42: 68:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:68:42: 68:46
    }
}

fn execution::<impl at cita-chain/types/src/errors/execution.rs:72:1: 72:40>::from(_1: ExecutionError) -> errors::call::CallError {
    debug error => _1;                   // in scope 0 at cita-chain/types/src/errors/execution.rs:73:13: 73:18
    let mut _0: errors::call::CallError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:73:39: 73:43

    bb0: {
        _0 = errors::call::CallError::Execution(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:74:9: 74:36
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:75:6: 75:6
    }
}

fn errors::native::<impl at cita-chain/types/src/errors/native.rs:19:10: 19:15>::fmt(_1: &NativeError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/native.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/native.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/native.rs:19:10: 19:15
    let _3: &std::string::String;        // in scope 0 at cita-chain/types/src/errors/native.rs:21:14: 21:20
    let _4: &str;                        // in scope 0 at cita-chain/types/src/errors/native.rs:19:10: 19:15
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/errors/native.rs:21:14: 21:20
    let _6: &&std::string::String;       // in scope 0 at cita-chain/types/src/errors/native.rs:21:14: 21:20
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at cita-chain/types/src/errors/native.rs:21:14: 21:20
    }

    bb0: {
        _3 = &(((*_1) as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/native.rs:21:14: 21:20
        _4 = const "Internal";           // scope 1 at cita-chain/types/src/errors/native.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &_3;                        // scope 1 at cita-chain/types/src/errors/native.rs:21:14: 21:20
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/native.rs:21:14: 21:20
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _4, move _5) -> bb1; // scope 1 at cita-chain/types/src/errors/native.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:19:15: 19:15
    }
}

fn errors::native::<impl at cita-chain/types/src/errors/native.rs:24:1: 24:35>::into(_1: NativeError) -> cita_vm::Error {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/native.rs:25:13: 25:17
    let mut _0: cita_vm::Error;          // return place in scope 0 at cita-chain/types/src/errors/native.rs:25:22: 25:29
    let _2: std::string::String;         // in scope 0 at cita-chain/types/src/errors/native.rs:27:35: 27:38
    let mut _3: cita_vm::evm::Error;     // in scope 0 at cita-chain/types/src/errors/native.rs:27:56: 27:79
    scope 1 {
        debug str => _2;                 // in scope 1 at cita-chain/types/src/errors/native.rs:27:35: 27:38
    }

    bb0: {
        _2 = move ((_1 as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/native.rs:27:35: 27:38
        _3 = cita_vm::evm::Error::Internal(move _2); // scope 1 at cita-chain/types/src/errors/native.rs:27:56: 27:79
        _0 = Evm(move _3);               // scope 1 at cita-chain/types/src/errors/native.rs:27:43: 27:80
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:29:6: 29:6
    }
}

fn errors::native::<impl at cita-chain/types/src/errors/native.rs:32:1: 32:34>::fmt(_1: &NativeError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/native.rs:33:12: 33:17
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/native.rs:33:19: 33:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/native.rs:33:46: 33:57
    let _3: std::string::String;         // in scope 0 at cita-chain/types/src/errors/native.rs:34:13: 34:22
    let _4: &std::string::String;        // in scope 0 at cita-chain/types/src/errors/native.rs:35:35: 35:38
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _7: &[&str];                 // in scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/native.rs:35:74: 35:77
    let _12: &&std::string::String;      // in scope 0 at cita-chain/types/src/errors/native.rs:35:74: 35:77
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _14: &[&str];                // in scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/native.rs:37:25: 37:34
    let _19: &std::string::String;       // in scope 0 at cita-chain/types/src/errors/native.rs:37:25: 37:34
    scope 1 {
        debug printable => _3;           // in scope 1 at cita-chain/types/src/errors/native.rs:34:13: 34:22
        let mut _20: &[&str; 1];         // in scope 1 at cita-chain/types/src/errors/native.rs:37:19: 37:23
    }
    scope 2 {
        debug str => _4;                 // in scope 2 at cita-chain/types/src/errors/native.rs:35:35: 35:38
        let _5: std::string::String;     // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _21: &[&str; 1];         // in scope 2 at cita-chain/types/src/errors/native.rs:35:51: 35:72
        scope 3 {
            debug res => _5;             // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }

    bb0: {
        _4 = &(((*_1) as Internal).0: std::string::String); // scope 0 at cita-chain/types/src/errors/native.rs:35:35: 35:38
        _21 = const _;                   // scope 2 at cita-chain/types/src/errors/native.rs:35:51: 35:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:35:51: 35:72
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<NativeError as std::fmt::Display>::fmt, [], Some(promoted[1])) }
        _7 = _21 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/native.rs:35:51: 35:72
        _12 = &_4;                       // scope 2 at cita-chain/types/src/errors/native.rs:35:74: 35:77
        _11 = core::fmt::ArgumentV1::<'_>::new_debug::<&std::string::String>(_12) -> bb1; // scope 2 at cita-chain/types/src/errors/native.rs:35:74: 35:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:35:74: 35:77
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&std::string::String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _9 = &_10;                       // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _8 = _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> bb2; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = format(move _6) -> bb3;     // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _5;                    // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        _20 = const _;                   // scope 1 at cita-chain/types/src/errors/native.rs:37:19: 37:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:37:19: 37:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<NativeError as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _14 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/native.rs:37:19: 37:23
        _19 = &_3;                       // scope 1 at cita-chain/types/src/errors/native.rs:37:25: 37:34
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_19) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/types/src/errors/native.rs:37:25: 37:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:37:25: 37:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = [move _18];                // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _16 = &_17;                      // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Formatter::<'_>::write_fmt(_2, move _13) -> [return: bb6, unwind: bb8]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/types/src/errors/native.rs:38:5: 38:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:38:6: 38:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/types/src/errors/native.rs:38:5: 38:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/native.rs:33:5: 38:6
    }
}

promoted[0] in errors::native::<impl at cita-chain/types/src/errors/native.rs:32:1: 32:34>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:37:19: 37:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:37:19: 37:23
    }
}

promoted[1] in errors::native::<impl at cita-chain/types/src/errors/native.rs:32:1: 32:34>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72

    bb0: {
        _1 = [const "Internal error "];  // scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/native.rs:35:51: 35:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:35:51: 35:72
    }
}

const _IMPL_SERIALIZE_FOR_ReceiptError: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    }
}

fn _IMPL_SERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:10: 18:19>::serialize(_1: &errors::receipt::ReceiptError, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    debug __serializer => _2;            // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    let mut _0: std::result::Result<<__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Ok, <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 21:23

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    }

    bb1: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 18_u32, const "Reverted") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
    }

    bb3: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 0_u32, const "NotEnoughBaseQuota") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 1_u32, const "BlockQuotaLimitReached") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 2_u32, const "AccountQuotaLimitReached") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 3_u32, const "InvalidNonce") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 4_u32, const "NotEnoughCash") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 5_u32, const "NoTransactionPermission") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 6_u32, const "NoContractPermission") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 7_u32, const "NoCallPermission") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 8_u32, const "ExecutionInternal") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 9_u32, const "TransactionMalformed") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 10_u32, const "OutOfQuota") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 11_u32, const "BadJumpDestination") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 12_u32, const "BadInstruction") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 13_u32, const "StackUnderflow") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 14_u32, const "OutOfStack") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 15_u32, const "Internal") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 16_u32, const "MutableCallInStaticContext") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _0 = <__S as Serializer>::serialize_unit_variant(move _2, const "ReceiptError", const 17_u32, const "OutOfBounds") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, u32, &'static str) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {<__S as Serializer>::serialize_unit_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:19: 18:19
    }
}

const _IMPL_DESERIALIZE_FOR_ReceiptError: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize(_1: __D) -> Result<errors::receipt::ReceiptError, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::ReceiptError, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_enum::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>>(move _1, const "ReceiptError", const _, const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<errors::receipt::ReceiptError>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_enum::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _3 = const "variant identifier"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _3: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _4: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _5: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _6: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _7: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _8: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _9: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _10: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _11: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _12: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _13: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _14: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _15: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _16: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _17: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _18: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _19: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _20: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _21: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _22: __E;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _23: log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'_>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _24: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _25: &&str;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, 16: bb18, 17: bb19, 18: bb20, otherwise: bb1]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb1: {
        _23 = _IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _25 = const _;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _24 = _25 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _22 = <__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value(move _23, move _24) -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb5: {
        _6 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb6: {
        _7 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb7: {
        _8 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb8: {
        _9 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb9: {
        _10 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field7; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _10); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb10: {
        _11 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field8; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _11); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb11: {
        _12 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field9; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb12: {
        _13 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field10; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb13: {
        _14 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field11; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb14: {
        _15 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field12; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb15: {
        _16 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field13; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _16); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb16: {
        _17 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field14; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _17); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb17: {
        _18 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field15; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _18); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb18: {
        _19 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field16; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _19); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb19: {
        _20 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field17; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _20); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb20: {
        _21 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field18; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _21); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb21: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Err(move _22); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb22: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _1 = const "variant index 0 <= i < 19"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _13: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _15: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _16: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _17: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _18: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _19: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _21: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _22: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _23: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _24: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _25: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _26: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _27: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _28: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _29: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _30: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _31: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _32: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _33: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _34: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _35: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _36: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _37: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _38: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _39: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _40: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _41: __E;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "NotEnoughBaseQuota") -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb39]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "BlockQuotaLimitReached") -> bb3; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb40]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "AccountQuotaLimitReached") -> bb5; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb41]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "InvalidNonce") -> bb7; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb42]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "NotEnoughCash") -> bb9; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb43]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "NoTransactionPermission") -> bb11; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _8) -> [0: bb12, otherwise: bb44]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb12: {
        _9 = <str as PartialEq>::eq(_2, const "NoContractPermission") -> bb13; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _9) -> [0: bb14, otherwise: bb45]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb14: {
        _10 = <str as PartialEq>::eq(_2, const "NoCallPermission") -> bb15; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        switchInt(move _10) -> [0: bb16, otherwise: bb46]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb16: {
        _11 = <str as PartialEq>::eq(_2, const "ExecutionInternal") -> bb17; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        switchInt(move _11) -> [0: bb18, otherwise: bb47]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb18: {
        _12 = <str as PartialEq>::eq(_2, const "TransactionMalformed") -> bb19; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _12) -> [0: bb20, otherwise: bb48]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb20: {
        _13 = <str as PartialEq>::eq(_2, const "OutOfQuota") -> bb21; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        switchInt(move _13) -> [0: bb22, otherwise: bb49]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb22: {
        _14 = <str as PartialEq>::eq(_2, const "BadJumpDestination") -> bb23; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        switchInt(move _14) -> [0: bb24, otherwise: bb50]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb24: {
        _15 = <str as PartialEq>::eq(_2, const "BadInstruction") -> bb25; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        switchInt(move _15) -> [0: bb26, otherwise: bb51]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb26: {
        _16 = <str as PartialEq>::eq(_2, const "StackUnderflow") -> bb27; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        switchInt(move _16) -> [0: bb28, otherwise: bb52]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb28: {
        _17 = <str as PartialEq>::eq(_2, const "OutOfStack") -> bb29; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        switchInt(move _17) -> [0: bb30, otherwise: bb53]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb30: {
        _18 = <str as PartialEq>::eq(_2, const "Internal") -> bb31; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        switchInt(move _18) -> [0: bb32, otherwise: bb54]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb32: {
        _19 = <str as PartialEq>::eq(_2, const "MutableCallInStaticContext") -> bb33; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        switchInt(move _19) -> [0: bb34, otherwise: bb55]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb34: {
        _20 = <str as PartialEq>::eq(_2, const "OutOfBounds") -> bb35; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        switchInt(move _20) -> [0: bb36, otherwise: bb56]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb36: {
        _21 = <str as PartialEq>::eq(_2, const "Reverted") -> bb37; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        switchInt(move _21) -> [0: bb38, otherwise: bb57]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb38: {
        _41 = <__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::unknown_variant(_2, const _) -> bb58; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(&'a str, &'static [&'static str]) -> __E {<__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::unknown_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
    }

    bb39: {
        _22 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _22); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb40: {
        _23 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _23); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb41: {
        _24 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _24); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb42: {
        _25 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _25); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb43: {
        _26 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _26); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb44: {
        _27 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _27); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb45: {
        _28 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _28); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb46: {
        _29 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field7; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _29); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb47: {
        _30 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field8; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _30); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb48: {
        _31 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field9; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _31); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb49: {
        _32 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field10; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _32); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb50: {
        _33 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field11; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _33); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb51: {
        _34 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field12; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _34); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb52: {
        _35 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field13; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _35); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb53: {
        _36 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field14; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _36); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb54: {
        _37 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field15; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _37); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb55: {
        _38 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field16; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _38); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb56: {
        _39 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field17; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _39); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb57: {
        _40 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field18; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _40); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb58: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Err(move _41); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb59;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb59: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _3: usize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _4: usize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _7: usize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _9: usize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _10: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _12: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _13: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _15: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _16: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _17: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _18: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _19: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _21: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _22: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _23: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _24: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _25: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _26: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _27: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _28: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _29: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _30: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _31: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _32: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _33: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _34: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _35: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _36: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _37: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _38: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _39: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _40: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _41: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _42: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _43: usize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _44: bool;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _45: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _46: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _47: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _48: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _49: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _50: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _51: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _52: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _53: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _54: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _55: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _56: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _57: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _58: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _59: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _60: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _61: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _62: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _63: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _64: &std::borrow::Cow<'_, str>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _65: std::borrow::Cow<'_, str>;  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _66: __E;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _67: &str;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _68: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    scope 1 {
        debug __value => _64;            // in scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb0: {
        _42 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _43 = const 18_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _44 = Eq(move _42, move _43);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _44) -> [0: bb37, otherwise: bb1]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb1: {
        switchInt((*_2)[0 of 18]) -> [78: bb2, 66: bb20, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb2: {
        switchInt((*_2)[1 of 18]) -> [111: bb3, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb3: {
        switchInt((*_2)[2 of 18]) -> [116: bb4, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb4: {
        switchInt((*_2)[3 of 18]) -> [69: bb5, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb5: {
        switchInt((*_2)[4 of 18]) -> [110: bb6, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb6: {
        switchInt((*_2)[5 of 18]) -> [111: bb7, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb7: {
        switchInt((*_2)[6 of 18]) -> [117: bb8, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb8: {
        switchInt((*_2)[7 of 18]) -> [103: bb9, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb9: {
        switchInt((*_2)[8 of 18]) -> [104: bb10, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb10: {
        switchInt((*_2)[9 of 18]) -> [66: bb11, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb11: {
        switchInt((*_2)[10 of 18]) -> [97: bb12, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb12: {
        switchInt((*_2)[11 of 18]) -> [115: bb13, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb13: {
        switchInt((*_2)[12 of 18]) -> [101: bb14, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb14: {
        switchInt((*_2)[13 of 18]) -> [81: bb15, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb15: {
        switchInt((*_2)[14 of 18]) -> [117: bb16, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb16: {
        switchInt((*_2)[15 of 18]) -> [111: bb17, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb17: {
        switchInt((*_2)[16 of 18]) -> [116: bb18, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb18: {
        switchInt((*_2)[17 of 18]) -> [97: bb309, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb19: {
        _65 = from_utf8_lossy(_2) -> bb328; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb20: {
        switchInt((*_2)[1 of 18]) -> [97: bb21, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb21: {
        switchInt((*_2)[2 of 18]) -> [100: bb22, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb22: {
        switchInt((*_2)[3 of 18]) -> [74: bb23, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb23: {
        switchInt((*_2)[4 of 18]) -> [117: bb24, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb24: {
        switchInt((*_2)[5 of 18]) -> [109: bb25, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb25: {
        switchInt((*_2)[6 of 18]) -> [112: bb26, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb26: {
        switchInt((*_2)[7 of 18]) -> [68: bb27, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb27: {
        switchInt((*_2)[8 of 18]) -> [101: bb28, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb28: {
        switchInt((*_2)[9 of 18]) -> [115: bb29, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb29: {
        switchInt((*_2)[10 of 18]) -> [116: bb30, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb30: {
        switchInt((*_2)[11 of 18]) -> [105: bb31, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb31: {
        switchInt((*_2)[12 of 18]) -> [110: bb32, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb32: {
        switchInt((*_2)[13 of 18]) -> [97: bb33, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb33: {
        switchInt((*_2)[14 of 18]) -> [116: bb34, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb34: {
        switchInt((*_2)[15 of 18]) -> [105: bb35, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb35: {
        switchInt((*_2)[16 of 18]) -> [111: bb36, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb36: {
        switchInt((*_2)[17 of 18]) -> [110: bb320, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb37: {
        _39 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _40 = const 22_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _41 = Eq(move _39, move _40);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _41) -> [0: bb60, otherwise: bb38]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb38: {
        switchInt((*_2)[0 of 22]) -> [66: bb39, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb39: {
        switchInt((*_2)[1 of 22]) -> [108: bb40, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb40: {
        switchInt((*_2)[2 of 22]) -> [111: bb41, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb41: {
        switchInt((*_2)[3 of 22]) -> [99: bb42, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb42: {
        switchInt((*_2)[4 of 22]) -> [107: bb43, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb43: {
        switchInt((*_2)[5 of 22]) -> [81: bb44, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb44: {
        switchInt((*_2)[6 of 22]) -> [117: bb45, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb45: {
        switchInt((*_2)[7 of 22]) -> [111: bb46, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb46: {
        switchInt((*_2)[8 of 22]) -> [116: bb47, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb47: {
        switchInt((*_2)[9 of 22]) -> [97: bb48, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb48: {
        switchInt((*_2)[10 of 22]) -> [76: bb49, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb49: {
        switchInt((*_2)[11 of 22]) -> [105: bb50, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb50: {
        switchInt((*_2)[12 of 22]) -> [109: bb51, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb51: {
        switchInt((*_2)[13 of 22]) -> [105: bb52, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb52: {
        switchInt((*_2)[14 of 22]) -> [116: bb53, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb53: {
        switchInt((*_2)[15 of 22]) -> [82: bb54, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb54: {
        switchInt((*_2)[16 of 22]) -> [101: bb55, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb55: {
        switchInt((*_2)[17 of 22]) -> [97: bb56, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb56: {
        switchInt((*_2)[18 of 22]) -> [99: bb57, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb57: {
        switchInt((*_2)[19 of 22]) -> [104: bb58, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb58: {
        switchInt((*_2)[20 of 22]) -> [101: bb59, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb59: {
        switchInt((*_2)[21 of 22]) -> [100: bb310, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb60: {
        _36 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _37 = const 24_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _38 = Eq(move _36, move _37);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _38) -> [0: bb85, otherwise: bb61]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb61: {
        switchInt((*_2)[0 of 24]) -> [65: bb62, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb62: {
        switchInt((*_2)[1 of 24]) -> [99: bb63, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb63: {
        switchInt((*_2)[2 of 24]) -> [99: bb64, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb64: {
        switchInt((*_2)[3 of 24]) -> [111: bb65, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb65: {
        switchInt((*_2)[4 of 24]) -> [117: bb66, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb66: {
        switchInt((*_2)[5 of 24]) -> [110: bb67, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb67: {
        switchInt((*_2)[6 of 24]) -> [116: bb68, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb68: {
        switchInt((*_2)[7 of 24]) -> [81: bb69, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb69: {
        switchInt((*_2)[8 of 24]) -> [117: bb70, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb70: {
        switchInt((*_2)[9 of 24]) -> [111: bb71, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb71: {
        switchInt((*_2)[10 of 24]) -> [116: bb72, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb72: {
        switchInt((*_2)[11 of 24]) -> [97: bb73, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb73: {
        switchInt((*_2)[12 of 24]) -> [76: bb74, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb74: {
        switchInt((*_2)[13 of 24]) -> [105: bb75, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb75: {
        switchInt((*_2)[14 of 24]) -> [109: bb76, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb76: {
        switchInt((*_2)[15 of 24]) -> [105: bb77, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb77: {
        switchInt((*_2)[16 of 24]) -> [116: bb78, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb78: {
        switchInt((*_2)[17 of 24]) -> [82: bb79, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb79: {
        switchInt((*_2)[18 of 24]) -> [101: bb80, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb80: {
        switchInt((*_2)[19 of 24]) -> [97: bb81, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb81: {
        switchInt((*_2)[20 of 24]) -> [99: bb82, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb82: {
        switchInt((*_2)[21 of 24]) -> [104: bb83, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb83: {
        switchInt((*_2)[22 of 24]) -> [101: bb84, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb84: {
        switchInt((*_2)[23 of 24]) -> [100: bb311, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb85: {
        _33 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _34 = const 12_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _35 = Eq(move _33, move _34);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _35) -> [0: bb98, otherwise: bb86]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb86: {
        switchInt((*_2)[0 of 12]) -> [73: bb87, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb87: {
        switchInt((*_2)[1 of 12]) -> [110: bb88, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb88: {
        switchInt((*_2)[2 of 12]) -> [118: bb89, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb89: {
        switchInt((*_2)[3 of 12]) -> [97: bb90, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb90: {
        switchInt((*_2)[4 of 12]) -> [108: bb91, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb91: {
        switchInt((*_2)[5 of 12]) -> [105: bb92, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb92: {
        switchInt((*_2)[6 of 12]) -> [100: bb93, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb93: {
        switchInt((*_2)[7 of 12]) -> [78: bb94, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb94: {
        switchInt((*_2)[8 of 12]) -> [111: bb95, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb95: {
        switchInt((*_2)[9 of 12]) -> [110: bb96, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb96: {
        switchInt((*_2)[10 of 12]) -> [99: bb97, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb97: {
        switchInt((*_2)[11 of 12]) -> [101: bb312, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb98: {
        _30 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _31 = const 13_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _32 = Eq(move _30, move _31);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _32) -> [0: bb112, otherwise: bb99]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb99: {
        switchInt((*_2)[0 of 13]) -> [78: bb100, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb100: {
        switchInt((*_2)[1 of 13]) -> [111: bb101, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb101: {
        switchInt((*_2)[2 of 13]) -> [116: bb102, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb102: {
        switchInt((*_2)[3 of 13]) -> [69: bb103, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb103: {
        switchInt((*_2)[4 of 13]) -> [110: bb104, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb104: {
        switchInt((*_2)[5 of 13]) -> [111: bb105, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb105: {
        switchInt((*_2)[6 of 13]) -> [117: bb106, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb106: {
        switchInt((*_2)[7 of 13]) -> [103: bb107, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb107: {
        switchInt((*_2)[8 of 13]) -> [104: bb108, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb108: {
        switchInt((*_2)[9 of 13]) -> [67: bb109, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb109: {
        switchInt((*_2)[10 of 13]) -> [97: bb110, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb110: {
        switchInt((*_2)[11 of 13]) -> [115: bb111, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb111: {
        switchInt((*_2)[12 of 13]) -> [104: bb313, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb112: {
        _27 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _28 = const 23_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _29 = Eq(move _27, move _28);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _29) -> [0: bb136, otherwise: bb113]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb113: {
        switchInt((*_2)[0 of 23]) -> [78: bb114, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb114: {
        switchInt((*_2)[1 of 23]) -> [111: bb115, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb115: {
        switchInt((*_2)[2 of 23]) -> [84: bb116, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb116: {
        switchInt((*_2)[3 of 23]) -> [114: bb117, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb117: {
        switchInt((*_2)[4 of 23]) -> [97: bb118, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb118: {
        switchInt((*_2)[5 of 23]) -> [110: bb119, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb119: {
        switchInt((*_2)[6 of 23]) -> [115: bb120, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb120: {
        switchInt((*_2)[7 of 23]) -> [97: bb121, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb121: {
        switchInt((*_2)[8 of 23]) -> [99: bb122, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb122: {
        switchInt((*_2)[9 of 23]) -> [116: bb123, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb123: {
        switchInt((*_2)[10 of 23]) -> [105: bb124, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb124: {
        switchInt((*_2)[11 of 23]) -> [111: bb125, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb125: {
        switchInt((*_2)[12 of 23]) -> [110: bb126, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb126: {
        switchInt((*_2)[13 of 23]) -> [80: bb127, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb127: {
        switchInt((*_2)[14 of 23]) -> [101: bb128, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb128: {
        switchInt((*_2)[15 of 23]) -> [114: bb129, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb129: {
        switchInt((*_2)[16 of 23]) -> [109: bb130, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb130: {
        switchInt((*_2)[17 of 23]) -> [105: bb131, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb131: {
        switchInt((*_2)[18 of 23]) -> [115: bb132, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb132: {
        switchInt((*_2)[19 of 23]) -> [115: bb133, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb133: {
        switchInt((*_2)[20 of 23]) -> [105: bb134, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb134: {
        switchInt((*_2)[21 of 23]) -> [111: bb135, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb135: {
        switchInt((*_2)[22 of 23]) -> [110: bb314, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb136: {
        _24 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _25 = const 20_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _26 = Eq(move _24, move _25);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _26) -> [0: bb176, otherwise: bb137]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb137: {
        switchInt((*_2)[0 of 20]) -> [78: bb138, 84: bb157, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb138: {
        switchInt((*_2)[1 of 20]) -> [111: bb139, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb139: {
        switchInt((*_2)[2 of 20]) -> [67: bb140, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb140: {
        switchInt((*_2)[3 of 20]) -> [111: bb141, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb141: {
        switchInt((*_2)[4 of 20]) -> [110: bb142, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb142: {
        switchInt((*_2)[5 of 20]) -> [116: bb143, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb143: {
        switchInt((*_2)[6 of 20]) -> [114: bb144, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb144: {
        switchInt((*_2)[7 of 20]) -> [97: bb145, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb145: {
        switchInt((*_2)[8 of 20]) -> [99: bb146, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb146: {
        switchInt((*_2)[9 of 20]) -> [116: bb147, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb147: {
        switchInt((*_2)[10 of 20]) -> [80: bb148, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb148: {
        switchInt((*_2)[11 of 20]) -> [101: bb149, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb149: {
        switchInt((*_2)[12 of 20]) -> [114: bb150, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb150: {
        switchInt((*_2)[13 of 20]) -> [109: bb151, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb151: {
        switchInt((*_2)[14 of 20]) -> [105: bb152, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb152: {
        switchInt((*_2)[15 of 20]) -> [115: bb153, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb153: {
        switchInt((*_2)[16 of 20]) -> [115: bb154, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb154: {
        switchInt((*_2)[17 of 20]) -> [105: bb155, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb155: {
        switchInt((*_2)[18 of 20]) -> [111: bb156, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb156: {
        switchInt((*_2)[19 of 20]) -> [110: bb315, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb157: {
        switchInt((*_2)[1 of 20]) -> [114: bb158, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb158: {
        switchInt((*_2)[2 of 20]) -> [97: bb159, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb159: {
        switchInt((*_2)[3 of 20]) -> [110: bb160, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb160: {
        switchInt((*_2)[4 of 20]) -> [115: bb161, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb161: {
        switchInt((*_2)[5 of 20]) -> [97: bb162, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb162: {
        switchInt((*_2)[6 of 20]) -> [99: bb163, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb163: {
        switchInt((*_2)[7 of 20]) -> [116: bb164, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb164: {
        switchInt((*_2)[8 of 20]) -> [105: bb165, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb165: {
        switchInt((*_2)[9 of 20]) -> [111: bb166, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb166: {
        switchInt((*_2)[10 of 20]) -> [110: bb167, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb167: {
        switchInt((*_2)[11 of 20]) -> [77: bb168, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb168: {
        switchInt((*_2)[12 of 20]) -> [97: bb169, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb169: {
        switchInt((*_2)[13 of 20]) -> [108: bb170, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb170: {
        switchInt((*_2)[14 of 20]) -> [102: bb171, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb171: {
        switchInt((*_2)[15 of 20]) -> [111: bb172, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb172: {
        switchInt((*_2)[16 of 20]) -> [114: bb173, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb173: {
        switchInt((*_2)[17 of 20]) -> [109: bb174, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb174: {
        switchInt((*_2)[18 of 20]) -> [101: bb175, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb175: {
        switchInt((*_2)[19 of 20]) -> [100: bb318, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb176: {
        _21 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _22 = const 16_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _23 = Eq(move _21, move _22);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _23) -> [0: bb193, otherwise: bb177]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb177: {
        switchInt((*_2)[0 of 16]) -> [78: bb178, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb178: {
        switchInt((*_2)[1 of 16]) -> [111: bb179, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb179: {
        switchInt((*_2)[2 of 16]) -> [67: bb180, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb180: {
        switchInt((*_2)[3 of 16]) -> [97: bb181, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb181: {
        switchInt((*_2)[4 of 16]) -> [108: bb182, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb182: {
        switchInt((*_2)[5 of 16]) -> [108: bb183, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb183: {
        switchInt((*_2)[6 of 16]) -> [80: bb184, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb184: {
        switchInt((*_2)[7 of 16]) -> [101: bb185, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb185: {
        switchInt((*_2)[8 of 16]) -> [114: bb186, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb186: {
        switchInt((*_2)[9 of 16]) -> [109: bb187, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb187: {
        switchInt((*_2)[10 of 16]) -> [105: bb188, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb188: {
        switchInt((*_2)[11 of 16]) -> [115: bb189, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb189: {
        switchInt((*_2)[12 of 16]) -> [115: bb190, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb190: {
        switchInt((*_2)[13 of 16]) -> [105: bb191, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb191: {
        switchInt((*_2)[14 of 16]) -> [111: bb192, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb192: {
        switchInt((*_2)[15 of 16]) -> [110: bb316, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb193: {
        _18 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _19 = const 17_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _20 = Eq(move _18, move _19);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _20) -> [0: bb211, otherwise: bb194]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb194: {
        switchInt((*_2)[0 of 17]) -> [69: bb195, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb195: {
        switchInt((*_2)[1 of 17]) -> [120: bb196, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb196: {
        switchInt((*_2)[2 of 17]) -> [101: bb197, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb197: {
        switchInt((*_2)[3 of 17]) -> [99: bb198, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb198: {
        switchInt((*_2)[4 of 17]) -> [117: bb199, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb199: {
        switchInt((*_2)[5 of 17]) -> [116: bb200, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb200: {
        switchInt((*_2)[6 of 17]) -> [105: bb201, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb201: {
        switchInt((*_2)[7 of 17]) -> [111: bb202, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb202: {
        switchInt((*_2)[8 of 17]) -> [110: bb203, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb203: {
        switchInt((*_2)[9 of 17]) -> [73: bb204, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb204: {
        switchInt((*_2)[10 of 17]) -> [110: bb205, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb205: {
        switchInt((*_2)[11 of 17]) -> [116: bb206, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb206: {
        switchInt((*_2)[12 of 17]) -> [101: bb207, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb207: {
        switchInt((*_2)[13 of 17]) -> [114: bb208, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb208: {
        switchInt((*_2)[14 of 17]) -> [110: bb209, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb209: {
        switchInt((*_2)[15 of 17]) -> [97: bb210, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb210: {
        switchInt((*_2)[16 of 17]) -> [108: bb317, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb211: {
        _15 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _16 = const 10_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _17 = Eq(move _15, move _16);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _17) -> [0: bb226, otherwise: bb212]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb212: {
        switchInt((*_2)[0 of 10]) -> [79: bb213, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb213: {
        switchInt((*_2)[1 of 10]) -> [117: bb214, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb214: {
        switchInt((*_2)[2 of 10]) -> [116: bb215, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb215: {
        switchInt((*_2)[3 of 10]) -> [79: bb216, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb216: {
        switchInt((*_2)[4 of 10]) -> [102: bb217, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb217: {
        switchInt((*_2)[5 of 10]) -> [81: bb218, 83: bb222, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb218: {
        switchInt((*_2)[6 of 10]) -> [117: bb219, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb219: {
        switchInt((*_2)[7 of 10]) -> [111: bb220, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb220: {
        switchInt((*_2)[8 of 10]) -> [116: bb221, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb221: {
        switchInt((*_2)[9 of 10]) -> [97: bb319, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb222: {
        switchInt((*_2)[6 of 10]) -> [116: bb223, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb223: {
        switchInt((*_2)[7 of 10]) -> [97: bb224, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb224: {
        switchInt((*_2)[8 of 10]) -> [99: bb225, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb225: {
        switchInt((*_2)[9 of 10]) -> [107: bb323, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb226: {
        _12 = Len((*_2));                // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _13 = const 14_usize;            // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _14 = Eq(move _12, move _13);    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _14) -> [0: bb254, otherwise: bb227]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb227: {
        switchInt((*_2)[0 of 14]) -> [66: bb228, 83: bb241, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb228: {
        switchInt((*_2)[1 of 14]) -> [97: bb229, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb229: {
        switchInt((*_2)[2 of 14]) -> [100: bb230, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb230: {
        switchInt((*_2)[3 of 14]) -> [73: bb231, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb231: {
        switchInt((*_2)[4 of 14]) -> [110: bb232, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb232: {
        switchInt((*_2)[5 of 14]) -> [115: bb233, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb233: {
        switchInt((*_2)[6 of 14]) -> [116: bb234, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb234: {
        switchInt((*_2)[7 of 14]) -> [114: bb235, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb235: {
        switchInt((*_2)[8 of 14]) -> [117: bb236, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb236: {
        switchInt((*_2)[9 of 14]) -> [99: bb237, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb237: {
        switchInt((*_2)[10 of 14]) -> [116: bb238, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb238: {
        switchInt((*_2)[11 of 14]) -> [105: bb239, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb239: {
        switchInt((*_2)[12 of 14]) -> [111: bb240, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb240: {
        switchInt((*_2)[13 of 14]) -> [110: bb321, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb241: {
        switchInt((*_2)[1 of 14]) -> [116: bb242, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb242: {
        switchInt((*_2)[2 of 14]) -> [97: bb243, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb243: {
        switchInt((*_2)[3 of 14]) -> [99: bb244, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb244: {
        switchInt((*_2)[4 of 14]) -> [107: bb245, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb245: {
        switchInt((*_2)[5 of 14]) -> [85: bb246, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb246: {
        switchInt((*_2)[6 of 14]) -> [110: bb247, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb247: {
        switchInt((*_2)[7 of 14]) -> [100: bb248, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb248: {
        switchInt((*_2)[8 of 14]) -> [101: bb249, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb249: {
        switchInt((*_2)[9 of 14]) -> [114: bb250, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb250: {
        switchInt((*_2)[10 of 14]) -> [102: bb251, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb251: {
        switchInt((*_2)[11 of 14]) -> [108: bb252, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb252: {
        switchInt((*_2)[12 of 14]) -> [111: bb253, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb253: {
        switchInt((*_2)[13 of 14]) -> [119: bb322, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb254: {
        _9 = Len((*_2));                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _10 = const 8_usize;             // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _11) -> [0: bb270, otherwise: bb255]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb255: {
        switchInt((*_2)[0 of 8]) -> [73: bb256, 82: bb263, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb256: {
        switchInt((*_2)[1 of 8]) -> [110: bb257, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb257: {
        switchInt((*_2)[2 of 8]) -> [116: bb258, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb258: {
        switchInt((*_2)[3 of 8]) -> [101: bb259, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb259: {
        switchInt((*_2)[4 of 8]) -> [114: bb260, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb260: {
        switchInt((*_2)[5 of 8]) -> [110: bb261, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb261: {
        switchInt((*_2)[6 of 8]) -> [97: bb262, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb262: {
        switchInt((*_2)[7 of 8]) -> [108: bb324, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb263: {
        switchInt((*_2)[1 of 8]) -> [101: bb264, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb264: {
        switchInt((*_2)[2 of 8]) -> [118: bb265, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb265: {
        switchInt((*_2)[3 of 8]) -> [101: bb266, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb266: {
        switchInt((*_2)[4 of 8]) -> [114: bb267, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb267: {
        switchInt((*_2)[5 of 8]) -> [116: bb268, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb268: {
        switchInt((*_2)[6 of 8]) -> [101: bb269, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb269: {
        switchInt((*_2)[7 of 8]) -> [100: bb327, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb270: {
        _6 = Len((*_2));                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _7 = const 26_usize;             // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _8) -> [0: bb297, otherwise: bb271]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb271: {
        switchInt((*_2)[0 of 26]) -> [77: bb272, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb272: {
        switchInt((*_2)[1 of 26]) -> [117: bb273, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb273: {
        switchInt((*_2)[2 of 26]) -> [116: bb274, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb274: {
        switchInt((*_2)[3 of 26]) -> [97: bb275, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb275: {
        switchInt((*_2)[4 of 26]) -> [98: bb276, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb276: {
        switchInt((*_2)[5 of 26]) -> [108: bb277, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb277: {
        switchInt((*_2)[6 of 26]) -> [101: bb278, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb278: {
        switchInt((*_2)[7 of 26]) -> [67: bb279, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb279: {
        switchInt((*_2)[8 of 26]) -> [97: bb280, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb280: {
        switchInt((*_2)[9 of 26]) -> [108: bb281, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb281: {
        switchInt((*_2)[10 of 26]) -> [108: bb282, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb282: {
        switchInt((*_2)[11 of 26]) -> [73: bb283, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb283: {
        switchInt((*_2)[12 of 26]) -> [110: bb284, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb284: {
        switchInt((*_2)[13 of 26]) -> [83: bb285, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb285: {
        switchInt((*_2)[14 of 26]) -> [116: bb286, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb286: {
        switchInt((*_2)[15 of 26]) -> [97: bb287, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb287: {
        switchInt((*_2)[16 of 26]) -> [116: bb288, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb288: {
        switchInt((*_2)[17 of 26]) -> [105: bb289, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb289: {
        switchInt((*_2)[18 of 26]) -> [99: bb290, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb290: {
        switchInt((*_2)[19 of 26]) -> [67: bb291, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb291: {
        switchInt((*_2)[20 of 26]) -> [111: bb292, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb292: {
        switchInt((*_2)[21 of 26]) -> [110: bb293, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb293: {
        switchInt((*_2)[22 of 26]) -> [116: bb294, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb294: {
        switchInt((*_2)[23 of 26]) -> [101: bb295, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb295: {
        switchInt((*_2)[24 of 26]) -> [120: bb296, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb296: {
        switchInt((*_2)[25 of 26]) -> [116: bb325, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb297: {
        _3 = Len((*_2));                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _4 = const 11_usize;             // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _5) -> [0: bb19, otherwise: bb298]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb298: {
        switchInt((*_2)[0 of 11]) -> [79: bb299, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb299: {
        switchInt((*_2)[1 of 11]) -> [117: bb300, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb300: {
        switchInt((*_2)[2 of 11]) -> [116: bb301, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb301: {
        switchInt((*_2)[3 of 11]) -> [79: bb302, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb302: {
        switchInt((*_2)[4 of 11]) -> [102: bb303, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb303: {
        switchInt((*_2)[5 of 11]) -> [66: bb304, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb304: {
        switchInt((*_2)[6 of 11]) -> [111: bb305, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb305: {
        switchInt((*_2)[7 of 11]) -> [117: bb306, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb306: {
        switchInt((*_2)[8 of 11]) -> [110: bb307, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb307: {
        switchInt((*_2)[9 of 11]) -> [100: bb308, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb308: {
        switchInt((*_2)[10 of 11]) -> [115: bb326, otherwise: bb19]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb309: {
        _45 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _45); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb310: {
        _46 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _46); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb311: {
        _47 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _47); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb312: {
        _48 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _48); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb313: {
        _49 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _49); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb314: {
        _50 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _50); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb315: {
        _51 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _51); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb316: {
        _52 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field7; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _52); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb317: {
        _53 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field8; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _53); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb318: {
        _54 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field9; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _54); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb319: {
        _55 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field10; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _55); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb320: {
        _56 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field11; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _56); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb321: {
        _57 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field12; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _57); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb322: {
        _58 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field13; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _58); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb323: {
        _59 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field14; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _59); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb324: {
        _60 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field15; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _60); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb325: {
        _61 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field16; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _61); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb326: {
        _62 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field17; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _62); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb327: {
        _63 = const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field::__field18; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Ok(move _63); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb331;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb328: {
        _64 = &_65;                      // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _68 = <Cow<'_, str> as Deref>::deref(_64) -> [return: bb329, unwind: bb332]; // scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb329: {
        _67 = _68;                       // scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _66 = <__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::unknown_variant(move _67, const _) -> [return: bb330, unwind: bb332]; // scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(&'a str, &'static [&'static str]) -> __E {<__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::unknown_variant}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(VARIANTS, [], None) }
    }

    bb330: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, __E>::Err(move _66); // scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        drop(_65) -> bb331;              // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb331: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }

    bb332 (cleanup): {
        drop(_65) -> bb333;              // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb333 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _3 = const "enum ReceiptError";  // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ReceiptError::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::deserialize::<impl at cita-chain/types/src/errors/receipt.rs:18:21: 18:32>::visit_enum(_1: _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor<'_>, _2: __A) -> Result<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<errors::receipt::ReceiptError>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    debug __data => _2;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _0: std::result::Result<errors::receipt::ReceiptError, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _3: std::result::Result<(errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _5: (errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _6: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _7: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _8: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _9: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _12: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 21:23
    let _13: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _14: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _15: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _17: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 22:27
    let _18: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _19: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _20: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _22: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 23:29
    let _23: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _24: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _25: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _27: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 24:17
    let _28: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _29: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _30: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _32: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 25:18
    let _33: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _34: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _35: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _37: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 26:28
    let _38: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _39: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _40: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _42: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 27:25
    let _43: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _44: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _45: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _47: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 28:21
    let _48: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _49: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _50: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _52: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 29:22
    let _53: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _54: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _55: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _57: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 30:25
    let _58: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _59: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _60: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _62: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 32:15
    let _63: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _64: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _65: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _67: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 33:23
    let _68: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _69: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _70: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _72: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 34:19
    let _73: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _74: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _75: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _77: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 35:19
    let _78: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _79: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _80: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _82: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 36:15
    let _83: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _84: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _85: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _87: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 37:13
    let _88: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _89: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _90: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _92: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 38:31
    let _93: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _94: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _95: isize;                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _97: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 39:16
    let _98: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _99: std::result::Result<(), <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _100: isize;                 // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _102: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:19:10: 40:13
    scope 1 {
        debug __val => _5;               // in scope 1 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
    scope 2 {
        debug __err => _6;               // in scope 2 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
    scope 3 {
        debug __variant => _8;           // in scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _11: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 5 {
            debug __err => _11;          // in scope 5 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 6 {
        debug __variant => _13;          // in scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _16: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 7 {
            debug __val => const ();     // in scope 7 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 8 {
            debug __err => _16;          // in scope 8 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 9 {
        debug __variant => _18;          // in scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _21: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 10 {
            debug __val => const ();     // in scope 10 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 11 {
            debug __err => _21;          // in scope 11 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 12 {
        debug __variant => _23;          // in scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _26: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 13 {
            debug __val => const ();     // in scope 13 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 14 {
            debug __err => _26;          // in scope 14 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 15 {
        debug __variant => _28;          // in scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _31: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 16 {
            debug __val => const ();     // in scope 16 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 17 {
            debug __err => _31;          // in scope 17 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 18 {
        debug __variant => _33;          // in scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _36: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 19 {
            debug __val => const ();     // in scope 19 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 20 {
            debug __err => _36;          // in scope 20 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 21 {
        debug __variant => _38;          // in scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _41: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 22 {
            debug __val => const ();     // in scope 22 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 23 {
            debug __err => _41;          // in scope 23 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 24 {
        debug __variant => _43;          // in scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _46: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 25 {
            debug __val => const ();     // in scope 25 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 26 {
            debug __err => _46;          // in scope 26 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 27 {
        debug __variant => _48;          // in scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _51: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 28 {
            debug __val => const ();     // in scope 28 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 29 {
            debug __err => _51;          // in scope 29 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 30 {
        debug __variant => _53;          // in scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _56: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 31 {
            debug __val => const ();     // in scope 31 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 32 {
            debug __err => _56;          // in scope 32 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 33 {
        debug __variant => _58;          // in scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _61: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 34 {
            debug __val => const ();     // in scope 34 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 35 {
            debug __err => _61;          // in scope 35 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 36 {
        debug __variant => _63;          // in scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _66: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 37 {
            debug __val => const ();     // in scope 37 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 38 {
            debug __err => _66;          // in scope 38 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 39 {
        debug __variant => _68;          // in scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _71: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 40 {
            debug __val => const ();     // in scope 40 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 41 {
            debug __err => _71;          // in scope 41 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 42 {
        debug __variant => _73;          // in scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _76: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 43 {
            debug __val => const ();     // in scope 43 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 44 {
            debug __err => _76;          // in scope 44 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 45 {
        debug __variant => _78;          // in scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _81: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 46 {
            debug __val => const ();     // in scope 46 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 47 {
            debug __err => _81;          // in scope 47 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 48 {
        debug __variant => _83;          // in scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _86: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 49 {
            debug __val => const ();     // in scope 49 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 50 {
            debug __err => _86;          // in scope 50 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 51 {
        debug __variant => _88;          // in scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _91: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 52 {
            debug __val => const ();     // in scope 52 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 53 {
            debug __err => _91;          // in scope 53 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 54 {
        debug __variant => _93;          // in scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _96: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 55 {
            debug __val => const ();     // in scope 55 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 56 {
            debug __err => _96;          // in scope 56 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }
    scope 57 {
        debug __variant => _98;          // in scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        let _101: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error; // in scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        scope 58 {
            debug __val => const ();     // in scope 58 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
        scope 59 {
            debug __err => _101;         // in scope 59 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field>(move _2) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(__A) -> Result<(_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__A as EnumAccess<'_>>::Variant), <__A as EnumAccess<'_>>::Error> {<__A as EnumAccess<'_>>::variant::<_IMPL_DESERIALIZE_FOR_ReceiptError::<impl Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_3);           // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _6); // scope 2 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant)); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _7 = discriminant((_5.0: errors::receipt::_IMPL_DESERIALIZE_FOR_ReceiptError::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for errors::receipt::ReceiptError>::deserialize::__Field)); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _7) -> [0: bb7, 1: bb12, 2: bb17, 3: bb22, 4: bb27, 5: bb32, 6: bb37, 7: bb42, 8: bb47, 9: bb52, 10: bb57, 11: bb62, 12: bb67, 13: bb72, 14: bb77, 15: bb82, 16: bb87, 17: bb92, 18: bb5, otherwise: bb6]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb5: {
        _98 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _99 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _98) -> bb97; // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb7: {
        _8 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> bb8; // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = discriminant(_9);          // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _10) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb9: {
        _11 = move ((_9 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _11); // scope 5 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb10: {
        unreachable;                     // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb11: {
        _12 = const errors::receipt::ReceiptError::NotEnoughBaseQuota; // scope 3 at cita-chain/types/src/errors/receipt.rs:19:10: 21:23
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x00)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _12); // scope 3 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb12: {
        _13 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> bb13; // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = discriminant(_14);         // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _15) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb14: {
        _16 = move ((_14 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _16); // scope 8 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb15: {
        unreachable;                     // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb16: {
        _17 = const errors::receipt::ReceiptError::BlockQuotaLimitReached; // scope 6 at cita-chain/types/src/errors/receipt.rs:19:10: 22:27
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x01)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _17); // scope 6 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb17: {
        _18 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> bb18; // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = discriminant(_19);         // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _20) -> [0: bb21, 1: bb19, otherwise: bb20]; // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb19: {
        _21 = move ((_19 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _21); // scope 11 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb20: {
        unreachable;                     // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb21: {
        _22 = const errors::receipt::ReceiptError::AccountQuotaLimitReached; // scope 9 at cita-chain/types/src/errors/receipt.rs:19:10: 23:29
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x02)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _22); // scope 9 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb22: {
        _23 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> bb23; // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb23: {
        _25 = discriminant(_24);         // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _25) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb24: {
        _26 = move ((_24 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _26); // scope 14 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb25: {
        unreachable;                     // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb26: {
        _27 = const errors::receipt::ReceiptError::InvalidNonce; // scope 12 at cita-chain/types/src/errors/receipt.rs:19:10: 24:17
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x03)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _27); // scope 12 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb27: {
        _28 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _29 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _28) -> bb28; // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb28: {
        _30 = discriminant(_29);         // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _30) -> [0: bb31, 1: bb29, otherwise: bb30]; // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb29: {
        _31 = move ((_29 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _31); // scope 17 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb30: {
        unreachable;                     // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb31: {
        _32 = const errors::receipt::ReceiptError::NotEnoughCash; // scope 15 at cita-chain/types/src/errors/receipt.rs:19:10: 25:18
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x04)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _32); // scope 15 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb32: {
        _33 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _34 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _33) -> bb33; // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb33: {
        _35 = discriminant(_34);         // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _35) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb34: {
        _36 = move ((_34 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _36); // scope 20 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb35: {
        unreachable;                     // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb36: {
        _37 = const errors::receipt::ReceiptError::NoTransactionPermission; // scope 18 at cita-chain/types/src/errors/receipt.rs:19:10: 26:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x05)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _37); // scope 18 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb37: {
        _38 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _39 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _38) -> bb38; // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb38: {
        _40 = discriminant(_39);         // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _40) -> [0: bb41, 1: bb39, otherwise: bb40]; // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb39: {
        _41 = move ((_39 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _41); // scope 23 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb40: {
        unreachable;                     // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb41: {
        _42 = const errors::receipt::ReceiptError::NoContractPermission; // scope 21 at cita-chain/types/src/errors/receipt.rs:19:10: 27:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x06)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _42); // scope 21 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb42: {
        _43 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _44 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _43) -> bb43; // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb43: {
        _45 = discriminant(_44);         // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _45) -> [0: bb46, 1: bb44, otherwise: bb45]; // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb44: {
        _46 = move ((_44 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _46); // scope 26 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb45: {
        unreachable;                     // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb46: {
        _47 = const errors::receipt::ReceiptError::NoCallPermission; // scope 24 at cita-chain/types/src/errors/receipt.rs:19:10: 28:21
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x07)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _47); // scope 24 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb47: {
        _48 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _49 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _48) -> bb48; // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb48: {
        _50 = discriminant(_49);         // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _50) -> [0: bb51, 1: bb49, otherwise: bb50]; // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb49: {
        _51 = move ((_49 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _51); // scope 29 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb50: {
        unreachable;                     // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb51: {
        _52 = const errors::receipt::ReceiptError::ExecutionInternal; // scope 27 at cita-chain/types/src/errors/receipt.rs:19:10: 29:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x08)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _52); // scope 27 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb52: {
        _53 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _54 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _53) -> bb53; // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb53: {
        _55 = discriminant(_54);         // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _55) -> [0: bb56, 1: bb54, otherwise: bb55]; // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb54: {
        _56 = move ((_54 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _56); // scope 32 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb55: {
        unreachable;                     // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb56: {
        _57 = const errors::receipt::ReceiptError::TransactionMalformed; // scope 30 at cita-chain/types/src/errors/receipt.rs:19:10: 30:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x09)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _57); // scope 30 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb57: {
        _58 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _59 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _58) -> bb58; // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb58: {
        _60 = discriminant(_59);         // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _60) -> [0: bb61, 1: bb59, otherwise: bb60]; // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb59: {
        _61 = move ((_59 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _61); // scope 35 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb60: {
        unreachable;                     // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb61: {
        _62 = const errors::receipt::ReceiptError::OutOfQuota; // scope 33 at cita-chain/types/src/errors/receipt.rs:19:10: 32:15
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0a)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _62); // scope 33 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb62: {
        _63 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _64 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _63) -> bb63; // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb63: {
        _65 = discriminant(_64);         // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _65) -> [0: bb66, 1: bb64, otherwise: bb65]; // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb64: {
        _66 = move ((_64 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _66); // scope 38 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb65: {
        unreachable;                     // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb66: {
        _67 = const errors::receipt::ReceiptError::BadJumpDestination; // scope 36 at cita-chain/types/src/errors/receipt.rs:19:10: 33:23
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0b)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _67); // scope 36 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb67: {
        _68 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _69 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _68) -> bb68; // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb68: {
        _70 = discriminant(_69);         // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _70) -> [0: bb71, 1: bb69, otherwise: bb70]; // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb69: {
        _71 = move ((_69 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _71); // scope 41 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb70: {
        unreachable;                     // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb71: {
        _72 = const errors::receipt::ReceiptError::BadInstruction; // scope 39 at cita-chain/types/src/errors/receipt.rs:19:10: 34:19
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0c)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _72); // scope 39 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb72: {
        _73 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _74 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _73) -> bb73; // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb73: {
        _75 = discriminant(_74);         // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _75) -> [0: bb76, 1: bb74, otherwise: bb75]; // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb74: {
        _76 = move ((_74 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _76); // scope 44 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb75: {
        unreachable;                     // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb76: {
        _77 = const errors::receipt::ReceiptError::StackUnderflow; // scope 42 at cita-chain/types/src/errors/receipt.rs:19:10: 35:19
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0d)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _77); // scope 42 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb77: {
        _78 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _79 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _78) -> bb78; // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb78: {
        _80 = discriminant(_79);         // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _80) -> [0: bb81, 1: bb79, otherwise: bb80]; // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb79: {
        _81 = move ((_79 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _81); // scope 47 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb80: {
        unreachable;                     // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb81: {
        _82 = const errors::receipt::ReceiptError::OutOfStack; // scope 45 at cita-chain/types/src/errors/receipt.rs:19:10: 36:15
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0e)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _82); // scope 45 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb82: {
        _83 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _84 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _83) -> bb83; // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb83: {
        _85 = discriminant(_84);         // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _85) -> [0: bb86, 1: bb84, otherwise: bb85]; // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb84: {
        _86 = move ((_84 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _86); // scope 50 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb85: {
        unreachable;                     // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb86: {
        _87 = const errors::receipt::ReceiptError::Internal; // scope 48 at cita-chain/types/src/errors/receipt.rs:19:10: 37:13
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0f)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _87); // scope 48 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb87: {
        _88 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _89 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _88) -> bb88; // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb88: {
        _90 = discriminant(_89);         // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _90) -> [0: bb91, 1: bb89, otherwise: bb90]; // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb89: {
        _91 = move ((_89 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _91); // scope 53 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb90: {
        unreachable;                     // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb91: {
        _92 = const errors::receipt::ReceiptError::MutableCallInStaticContext; // scope 51 at cita-chain/types/src/errors/receipt.rs:19:10: 38:31
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x10)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _92); // scope 51 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb92: {
        _93 = move (_5.1: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Variant); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _94 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _93) -> bb93; // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(<__A as EnumAccess<'_>>::Variant) -> Result<(), <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::Error> {<<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant}, val: Value(<ZST>) }
    }

    bb93: {
        _95 = discriminant(_94);         // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _95) -> [0: bb96, 1: bb94, otherwise: bb95]; // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb94: {
        _96 = move ((_94 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _96); // scope 56 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb95: {
        unreachable;                     // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb96: {
        _97 = const errors::receipt::ReceiptError::OutOfBounds; // scope 54 at cita-chain/types/src/errors/receipt.rs:19:10: 39:16
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x11)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _97); // scope 54 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb97: {
        _100 = discriminant(_99);        // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        switchInt(move _100) -> [0: bb100, 1: bb98, otherwise: bb99]; // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb98: {
        _101 = move ((_99 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::EnumAccess<'_>>::Error); // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Err(move _101); // scope 59 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at no-location
    }

    bb99: {
        unreachable;                     // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }

    bb100: {
        _102 = const errors::receipt::ReceiptError::Reverted; // scope 57 at cita-chain/types/src/errors/receipt.rs:19:10: 40:13
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x12)) }
        _0 = Result::<errors::receipt::ReceiptError, <__A as EnumAccess<'_>>::Error>::Ok(move _102); // scope 57 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        goto -> bb101;                   // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
    }

    bb101: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:32: 18:32
    }
}

const VARIANTS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _1: &[&str; 19];             // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _2: &[&str; 19];                 // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let _3: [&str; 19];                  // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _4: &[&str; 19];             // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        StorageLive(_2);                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _4 = const _;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str; 19], val: Unevaluated(VARIANTS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _1 = &(*_2);                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        StorageDead(_2);                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
        StorageDead(_1);                 // scope 0 at cita-chain/types/src/errors/receipt.rs:18:31: 18:32
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
}

promoted[0] in VARIANTS: &[&str; 19] = {
    let mut _0: &[&str; 19];             // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    let mut _1: [&str; 19];              // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32

    bb0: {
        _1 = [const "NotEnoughBaseQuota", const "BlockQuotaLimitReached", const "AccountQuotaLimitReached", const "InvalidNonce", const "NotEnoughCash", const "NoTransactionPermission", const "NoContractPermission", const "NoCallPermission", const "ExecutionInternal", const "TransactionMalformed", const "OutOfQuota", const "BadJumpDestination", const "BadInstruction", const "StackUnderflow", const "OutOfStack", const "Internal", const "MutableCallInStaticContext", const "OutOfBounds", const "Reverted"]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:21: 18:32
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:18:34: 18:39>::fmt(_1: &errors::receipt::ReceiptError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _8: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _9: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _10: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _11: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _12: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _13: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _14: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _15: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _16: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _17: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _18: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _19: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _20: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _21: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _22: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    let _23: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    }

    bb1: {
        _23 = const "Reverted";          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _23;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
    }

    bb3: {
        _5 = const "NotEnoughBaseQuota"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb4: {
        _6 = const "BlockQuotaLimitReached"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb5: {
        _7 = const "AccountQuotaLimitReached"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb6: {
        _8 = const "InvalidNonce";       // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb7: {
        _9 = const "NotEnoughCash";      // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _9;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb8: {
        _10 = const "NoTransactionPermission"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _10;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb9: {
        _11 = const "NoContractPermission"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _11;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb10: {
        _12 = const "NoCallPermission";  // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _12;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb11: {
        _13 = const "ExecutionInternal"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _13;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb12: {
        _14 = const "TransactionMalformed"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _14;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb13: {
        _15 = const "OutOfQuota";        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _15;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb14: {
        _16 = const "BadJumpDestination"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _16;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb15: {
        _17 = const "BadInstruction";    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _17;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb16: {
        _18 = const "StackUnderflow";    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _18;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb17: {
        _19 = const "OutOfStack";        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _19;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb18: {
        _20 = const "Internal";          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _20;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb19: {
        _21 = const "MutableCallInStaticContext"; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _21;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb20: {
        _22 = const "OutOfBounds";       // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _22;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:18:38: 18:39
    }

    bb21: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb22; // scope 0 at cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:18:34: 18:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:39: 18:39
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:18:41: 18:50>::eq(_1: &errors::receipt::ReceiptError, _2: &errors::receipt::ReceiptError) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
    debug other => _2;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
    let _3: isize;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        let _4: isize;                   // in scope 1 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/errors/receipt.rs:18:41: 18:50
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:50: 18:50
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:18:52: 18:57>::clone(_1: &errors::receipt::ReceiptError) -> errors::receipt::ReceiptError {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:52: 18:57
    let mut _0: errors::receipt::ReceiptError; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:52: 18:57

    bb0: {
        _0 = (*_1);                      // scope 0 at cita-chain/types/src/errors/receipt.rs:18:52: 18:57
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:57: 18:57
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:18:65: 18:67>::assert_receiver_is_total_eq(_1: &errors::receipt::ReceiptError) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:18:65: 18:67
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:18:65: 18:67

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:18:67: 18:67
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:43:1: 43:18>::description(_1: errors::receipt::ReceiptError) -> std::string::String {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:45:24: 45:28
    let mut _0: std::string::String;     // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:45:33: 45:39
    let _2: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:46:13: 46:17
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:47:13: 47:45
    let _4: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:48:53: 48:81
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:49:55: 49:85
    let _6: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:50:43: 50:71
    let _7: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:51:44: 51:89
    let _8: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:52:54: 52:82
    let _9: &str;                        // in scope 0 at cita-chain/types/src/errors/receipt.rs:53:51: 53:76
    let _10: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:54:47: 54:77
    let _11: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:55:48: 55:75
    let _12: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:56:51: 56:75
    let _13: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:57:41: 57:56
    let _14: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:59:17: 59:73
    let _15: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:61:45: 61:76
    let _16: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:62:45: 62:96
    let _17: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:63:41: 63:86
    let _18: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:64:39: 64:60
    let _19: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:65:57: 65:90
    let _20: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:66:42: 66:58
    let _21: &str;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:67:39: 67:50
    let mut _22: &str;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:69:9: 69:25
    scope 1 {
        debug desc => _2;                // in scope 1 at cita-chain/types/src/errors/receipt.rs:46:13: 46:17
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at cita-chain/types/src/errors/receipt.rs:46:26: 46:30
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/receipt.rs:46:20: 46:30
    }

    bb1: {
        _21 = const "Reverted.";         // scope 0 at cita-chain/types/src/errors/receipt.rs:67:39: 67:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:67:39: 67:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _21;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:67:39: 67:50
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:67:49: 67:50
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:46:26: 46:30
    }

    bb3: {
        _2 = const "Not enough base quota."; // scope 0 at cita-chain/types/src/errors/receipt.rs:47:49: 47:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:47:49: 47:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:47:49: 47:73
    }

    bb4: {
        _4 = const "Block quota limit reached."; // scope 0 at cita-chain/types/src/errors/receipt.rs:48:53: 48:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:48:53: 48:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _4;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:48:53: 48:81
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:48:80: 48:81
    }

    bb5: {
        _5 = const "Account quota limit reached."; // scope 0 at cita-chain/types/src/errors/receipt.rs:49:55: 49:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:49:55: 49:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _5;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:49:55: 49:85
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:49:84: 49:85
    }

    bb6: {
        _6 = const "Invalid transaction nonce."; // scope 0 at cita-chain/types/src/errors/receipt.rs:50:43: 50:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:50:43: 50:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _6;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:50:43: 50:71
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:50:70: 50:71
    }

    bb7: {
        _7 = const "Cost of transaction exceeds sender balance."; // scope 0 at cita-chain/types/src/errors/receipt.rs:51:44: 51:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:51:44: 51:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _7;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:51:44: 51:89
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:51:88: 51:89
    }

    bb8: {
        _8 = const "No transaction permission."; // scope 0 at cita-chain/types/src/errors/receipt.rs:52:54: 52:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:52:54: 52:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _8;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:52:54: 52:82
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:52:81: 52:82
    }

    bb9: {
        _9 = const "No contract permission."; // scope 0 at cita-chain/types/src/errors/receipt.rs:53:51: 53:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:53:51: 53:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _9;                         // scope 0 at cita-chain/types/src/errors/receipt.rs:53:51: 53:76
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:53:75: 53:76
    }

    bb10: {
        _10 = const "No Call contract permission."; // scope 0 at cita-chain/types/src/errors/receipt.rs:54:47: 54:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:54:47: 54:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _10;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:54:47: 54:77
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:54:76: 54:77
    }

    bb11: {
        _11 = const "Execution internal error."; // scope 0 at cita-chain/types/src/errors/receipt.rs:55:48: 55:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:55:48: 55:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _11;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:55:48: 55:75
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:55:74: 55:75
    }

    bb12: {
        _12 = const "Malformed transaction."; // scope 0 at cita-chain/types/src/errors/receipt.rs:56:51: 56:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:56:51: 56:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _12;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:56:51: 56:75
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:56:74: 56:75
    }

    bb13: {
        _13 = const "Out of quota.";     // scope 0 at cita-chain/types/src/errors/receipt.rs:57:41: 57:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:57:41: 57:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _13;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:57:41: 57:56
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:57:55: 57:56
    }

    bb14: {
        _14 = const "Jump position wasn't marked with JUMPDEST instruction."; // scope 0 at cita-chain/types/src/errors/receipt.rs:59:17: 59:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:59:17: 59:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _14;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:59:17: 59:73
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:60:13: 60:14
    }

    bb15: {
        _15 = const "Instruction is not supported."; // scope 0 at cita-chain/types/src/errors/receipt.rs:61:45: 61:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:61:45: 61:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _15;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:61:45: 61:76
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:61:75: 61:76
    }

    bb16: {
        _16 = const "Not enough stack elements to execute instruction."; // scope 0 at cita-chain/types/src/errors/receipt.rs:62:45: 62:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:62:45: 62:96
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _16;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:62:45: 62:96
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:62:95: 62:96
    }

    bb17: {
        _17 = const "Execution would exceed defined Stack Limit."; // scope 0 at cita-chain/types/src/errors/receipt.rs:63:41: 63:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:63:41: 63:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _17;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:63:41: 63:86
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:63:85: 63:86
    }

    bb18: {
        _18 = const "EVM internal error."; // scope 0 at cita-chain/types/src/errors/receipt.rs:64:39: 64:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:64:39: 64:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _18;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:64:39: 64:60
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:64:59: 64:60
    }

    bb19: {
        _19 = const "Mutable call in static context."; // scope 0 at cita-chain/types/src/errors/receipt.rs:65:57: 65:90
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:65:57: 65:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _19;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:65:57: 65:90
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:65:89: 65:90
    }

    bb20: {
        _20 = const "Out of bounds.";    // scope 0 at cita-chain/types/src/errors/receipt.rs:66:42: 66:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:66:42: 66:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _20;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:66:42: 66:58
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:66:57: 66:58
    }

    bb21: {
        _22 = _2;                        // scope 1 at cita-chain/types/src/errors/receipt.rs:69:9: 69:25
        _0 = <str as ToString>::to_string(move _22) -> bb22; // scope 1 at cita-chain/types/src/errors/receipt.rs:69:9: 69:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:69:14: 69:23
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:70:6: 70:6
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:43:1: 43:18>::protobuf(_1: errors::receipt::ReceiptError) -> libproto::ReceiptError {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:72:21: 72:25
    let mut _0: libproto::ReceiptError;  // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:72:30: 72:47
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:74:13: 74:45

    bb0: {
        _2 = discriminant(_1);           // scope 0 at cita-chain/types/src/errors/receipt.rs:73:15: 73:19
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/receipt.rs:73:9: 73:19
    }

    bb1: {
        _0 = const Reverted;             // scope 0 at cita-chain/types/src/errors/receipt.rs:94:39: 94:66
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x12)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:94:39: 94:66
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:73:15: 73:19
    }

    bb3: {
        _0 = const NotEnoughBaseQuota;   // scope 0 at cita-chain/types/src/errors/receipt.rs:74:49: 74:86
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x00)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:74:49: 74:86
    }

    bb4: {
        _0 = const BlockQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:75:53: 75:94
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x01)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:75:53: 75:94
    }

    bb5: {
        _0 = const AccountQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:76:55: 76:98
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x02)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:76:55: 76:98
    }

    bb6: {
        _0 = const InvalidTransactionNonce; // scope 0 at cita-chain/types/src/errors/receipt.rs:77:43: 77:85
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x03)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:77:43: 77:85
    }

    bb7: {
        _0 = const NotEnoughCash;        // scope 0 at cita-chain/types/src/errors/receipt.rs:78:44: 78:76
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x04)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:78:44: 78:76
    }

    bb8: {
        _0 = const NoTransactionPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:79:54: 79:96
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x05)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:79:54: 79:96
    }

    bb9: {
        _0 = const NoContractPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:80:51: 80:90
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x06)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:80:51: 80:90
    }

    bb10: {
        _0 = const NoCallPermission;     // scope 0 at cita-chain/types/src/errors/receipt.rs:81:47: 81:82
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x07)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:81:47: 81:82
    }

    bb11: {
        _0 = const ExecutionInternal;    // scope 0 at cita-chain/types/src/errors/receipt.rs:82:48: 82:84
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x08)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:82:48: 82:84
    }

    bb12: {
        _0 = const TransactionMalformed; // scope 0 at cita-chain/types/src/errors/receipt.rs:83:51: 83:90
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x09)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:83:51: 83:90
    }

    bb13: {
        _0 = const OutOfQuota;           // scope 0 at cita-chain/types/src/errors/receipt.rs:84:41: 84:70
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0a)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:84:41: 84:70
    }

    bb14: {
        _0 = const BadJumpDestination;   // scope 0 at cita-chain/types/src/errors/receipt.rs:85:49: 85:86
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0b)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:85:49: 85:86
    }

    bb15: {
        _0 = const BadInstruction;       // scope 0 at cita-chain/types/src/errors/receipt.rs:86:45: 86:78
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0c)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:86:45: 86:78
    }

    bb16: {
        _0 = const libproto::ReceiptError::StackUnderflow; // scope 0 at cita-chain/types/src/errors/receipt.rs:87:45: 87:78
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0d)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:87:45: 87:78
    }

    bb17: {
        _0 = const libproto::ReceiptError::OutOfStack; // scope 0 at cita-chain/types/src/errors/receipt.rs:88:41: 88:70
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0e)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:88:41: 88:70
    }

    bb18: {
        _0 = const libproto::ReceiptError::Internal; // scope 0 at cita-chain/types/src/errors/receipt.rs:89:39: 89:66
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x0f)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:89:39: 89:66
    }

    bb19: {
        _0 = const libproto::ReceiptError::MutableCallInStaticContext; // scope 0 at cita-chain/types/src/errors/receipt.rs:91:17: 91:62
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x10)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:91:17: 91:62
    }

    bb20: {
        _0 = const libproto::ReceiptError::OutOfBounds; // scope 0 at cita-chain/types/src/errors/receipt.rs:93:42: 93:72
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: libproto::ReceiptError, val: Value(Scalar(0x11)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:93:42: 93:72
    }

    bb21: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:96:6: 96:6
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:43:1: 43:18>::from_proto(_1: libproto::ReceiptError) -> errors::receipt::ReceiptError {
    debug receipt_error => _1;           // in scope 0 at cita-chain/types/src/errors/receipt.rs:98:23: 98:36
    let mut _0: errors::receipt::ReceiptError; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:98:60: 98:64
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:100:13: 100:50

    bb0: {
        _2 = discriminant(_1);           // scope 0 at cita-chain/types/src/errors/receipt.rs:99:15: 99:28
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/receipt.rs:99:9: 99:28
    }

    bb1: {
        _0 = const errors::receipt::ReceiptError::Reverted; // scope 0 at cita-chain/types/src/errors/receipt.rs:120:44: 120:66
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x12)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:120:44: 120:66
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:99:15: 99:28
    }

    bb3: {
        _0 = const errors::receipt::ReceiptError::NotEnoughBaseQuota; // scope 0 at cita-chain/types/src/errors/receipt.rs:100:54: 100:86
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x00)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:100:54: 100:86
    }

    bb4: {
        _0 = const errors::receipt::ReceiptError::BlockQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:101:58: 101:94
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x01)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:101:58: 101:94
    }

    bb5: {
        _0 = const errors::receipt::ReceiptError::AccountQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:102:60: 102:98
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x02)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:102:60: 102:98
    }

    bb6: {
        _0 = const errors::receipt::ReceiptError::InvalidNonce; // scope 0 at cita-chain/types/src/errors/receipt.rs:103:59: 103:85
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x03)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:103:59: 103:85
    }

    bb7: {
        _0 = const errors::receipt::ReceiptError::NotEnoughCash; // scope 0 at cita-chain/types/src/errors/receipt.rs:104:49: 104:76
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x04)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:104:49: 104:76
    }

    bb8: {
        _0 = const errors::receipt::ReceiptError::NoTransactionPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:105:59: 105:96
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x05)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:105:59: 105:96
    }

    bb9: {
        _0 = const errors::receipt::ReceiptError::NoContractPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:106:56: 106:90
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x06)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:106:56: 106:90
    }

    bb10: {
        _0 = const errors::receipt::ReceiptError::NoCallPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:107:52: 107:82
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x07)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:107:52: 107:82
    }

    bb11: {
        _0 = const errors::receipt::ReceiptError::ExecutionInternal; // scope 0 at cita-chain/types/src/errors/receipt.rs:108:53: 108:84
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x08)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:108:53: 108:84
    }

    bb12: {
        _0 = const errors::receipt::ReceiptError::TransactionMalformed; // scope 0 at cita-chain/types/src/errors/receipt.rs:109:56: 109:90
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x09)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:109:56: 109:90
    }

    bb13: {
        _0 = const errors::receipt::ReceiptError::OutOfQuota; // scope 0 at cita-chain/types/src/errors/receipt.rs:110:46: 110:70
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0a)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:110:46: 110:70
    }

    bb14: {
        _0 = const errors::receipt::ReceiptError::BadJumpDestination; // scope 0 at cita-chain/types/src/errors/receipt.rs:111:54: 111:86
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0b)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:111:54: 111:86
    }

    bb15: {
        _0 = const errors::receipt::ReceiptError::BadInstruction; // scope 0 at cita-chain/types/src/errors/receipt.rs:112:50: 112:78
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0c)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:112:50: 112:78
    }

    bb16: {
        _0 = const errors::receipt::ReceiptError::StackUnderflow; // scope 0 at cita-chain/types/src/errors/receipt.rs:113:50: 113:78
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0d)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:113:50: 113:78
    }

    bb17: {
        _0 = const errors::receipt::ReceiptError::OutOfStack; // scope 0 at cita-chain/types/src/errors/receipt.rs:114:46: 114:70
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0e)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:114:46: 114:70
    }

    bb18: {
        _0 = const errors::receipt::ReceiptError::Internal; // scope 0 at cita-chain/types/src/errors/receipt.rs:115:44: 115:66
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0f)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:115:44: 115:66
    }

    bb19: {
        _0 = const errors::receipt::ReceiptError::MutableCallInStaticContext; // scope 0 at cita-chain/types/src/errors/receipt.rs:117:17: 117:57
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x10)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:117:17: 117:57
    }

    bb20: {
        _0 = const errors::receipt::ReceiptError::OutOfBounds; // scope 0 at cita-chain/types/src/errors/receipt.rs:119:47: 119:72
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x11)) }
        goto -> bb21;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:119:47: 119:72
    }

    bb21: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:122:6: 122:6
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:125:1: 125:32>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<errors::receipt::ReceiptError, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/errors/receipt.rs:126:15: 126:18
    let mut _0: std::result::Result<errors::receipt::ReceiptError, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:126:38: 126:64
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u8>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
    let mut _3: std::result::Result<u8, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:33
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:127:33: 127:34
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/errors/receipt.rs:127:33: 127:34
    let _6: u8;                          // in scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
    let mut _7: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:128:21: 128:53
    let mut _8: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:129:21: 129:57
    let mut _9: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:130:21: 130:59
    let mut _10: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:131:21: 131:47
    let mut _11: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:132:21: 132:48
    let mut _12: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:133:21: 133:58
    let mut _13: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:134:21: 134:55
    let mut _14: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:135:21: 135:51
    let mut _15: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:136:21: 136:52
    let mut _16: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:137:21: 137:55
    let mut _17: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:138:22: 138:46
    let mut _18: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:139:22: 139:54
    let mut _19: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:140:22: 140:50
    let mut _20: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:141:22: 141:50
    let mut _21: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:142:22: 142:46
    let mut _22: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:143:22: 143:44
    let mut _23: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:144:22: 144:62
    let mut _24: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:145:22: 145:47
    let mut _25: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:146:22: 146:44
    let mut _26: rlp::DecoderError;      // in scope 0 at cita-chain/types/src/errors/receipt.rs:147:22: 147:68
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/errors/receipt.rs:127:33: 127:34
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
        scope 4 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::as_val::<u8>(_1) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:127:19: 127:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<u8, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_val::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<u8, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:127:15: 127:34
                                         // + literal: Const { ty: fn(Result<u8, rlp::DecoderError>) -> ControlFlow<<Result<u8, rlp::DecoderError> as Try>::Residual, <Result<u8, rlp::DecoderError> as Try>::Output> {<Result<u8, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
    }

    bb3: {
        _6 = ((_2 as Continue).0: u8);   // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
        switchInt(_6) -> [0: bb7, 1: bb8, 2: bb9, 3: bb10, 4: bb11, 5: bb12, 6: bb13, 7: bb14, 8: bb15, 9: bb16, 10: bb17, 11: bb18, 12: bb19, 13: bb20, 14: bb21, 15: bb22, 16: bb23, 17: bb24, 18: bb25, otherwise: bb6]; // scope 0 at cita-chain/types/src/errors/receipt.rs:127:9: 127:34
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/errors/receipt.rs:127:33: 127:34
        _0 = <Result<errors::receipt::ReceiptError, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb26; // scope 2 at cita-chain/types/src/errors/receipt.rs:127:15: 127:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:127:33: 127:34
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<errors::receipt::ReceiptError, rlp::DecoderError> {<Result<errors::receipt::ReceiptError, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = Custom(const "Unknown Receipt error."); // scope 0 at cita-chain/types/src/errors/receipt.rs:147:22: 147:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:147:43: 147:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Err(move _26); // scope 0 at cita-chain/types/src/errors/receipt.rs:147:18: 147:69
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:147:68: 147:69
    }

    bb7: {
        _7 = const errors::receipt::ReceiptError::NotEnoughBaseQuota; // scope 0 at cita-chain/types/src/errors/receipt.rs:128:21: 128:53
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x00)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _7); // scope 0 at cita-chain/types/src/errors/receipt.rs:128:18: 128:54
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:128:53: 128:54
    }

    bb8: {
        _8 = const errors::receipt::ReceiptError::BlockQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:129:21: 129:57
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x01)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _8); // scope 0 at cita-chain/types/src/errors/receipt.rs:129:18: 129:58
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:129:57: 129:58
    }

    bb9: {
        _9 = const errors::receipt::ReceiptError::AccountQuotaLimitReached; // scope 0 at cita-chain/types/src/errors/receipt.rs:130:21: 130:59
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x02)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _9); // scope 0 at cita-chain/types/src/errors/receipt.rs:130:18: 130:60
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:130:59: 130:60
    }

    bb10: {
        _10 = const errors::receipt::ReceiptError::InvalidNonce; // scope 0 at cita-chain/types/src/errors/receipt.rs:131:21: 131:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x03)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _10); // scope 0 at cita-chain/types/src/errors/receipt.rs:131:18: 131:48
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:131:47: 131:48
    }

    bb11: {
        _11 = const errors::receipt::ReceiptError::NotEnoughCash; // scope 0 at cita-chain/types/src/errors/receipt.rs:132:21: 132:48
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x04)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _11); // scope 0 at cita-chain/types/src/errors/receipt.rs:132:18: 132:49
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:132:48: 132:49
    }

    bb12: {
        _12 = const errors::receipt::ReceiptError::NoTransactionPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:133:21: 133:58
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x05)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _12); // scope 0 at cita-chain/types/src/errors/receipt.rs:133:18: 133:59
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:133:58: 133:59
    }

    bb13: {
        _13 = const errors::receipt::ReceiptError::NoContractPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:134:21: 134:55
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x06)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _13); // scope 0 at cita-chain/types/src/errors/receipt.rs:134:18: 134:56
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:134:55: 134:56
    }

    bb14: {
        _14 = const errors::receipt::ReceiptError::NoCallPermission; // scope 0 at cita-chain/types/src/errors/receipt.rs:135:21: 135:51
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x07)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _14); // scope 0 at cita-chain/types/src/errors/receipt.rs:135:18: 135:52
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:135:51: 135:52
    }

    bb15: {
        _15 = const errors::receipt::ReceiptError::ExecutionInternal; // scope 0 at cita-chain/types/src/errors/receipt.rs:136:21: 136:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x08)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _15); // scope 0 at cita-chain/types/src/errors/receipt.rs:136:18: 136:53
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:136:52: 136:53
    }

    bb16: {
        _16 = const errors::receipt::ReceiptError::TransactionMalformed; // scope 0 at cita-chain/types/src/errors/receipt.rs:137:21: 137:55
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x09)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _16); // scope 0 at cita-chain/types/src/errors/receipt.rs:137:18: 137:56
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:137:55: 137:56
    }

    bb17: {
        _17 = const errors::receipt::ReceiptError::OutOfQuota; // scope 0 at cita-chain/types/src/errors/receipt.rs:138:22: 138:46
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0a)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _17); // scope 0 at cita-chain/types/src/errors/receipt.rs:138:19: 138:47
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:138:46: 138:47
    }

    bb18: {
        _18 = const errors::receipt::ReceiptError::BadJumpDestination; // scope 0 at cita-chain/types/src/errors/receipt.rs:139:22: 139:54
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0b)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _18); // scope 0 at cita-chain/types/src/errors/receipt.rs:139:19: 139:55
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:139:54: 139:55
    }

    bb19: {
        _19 = const errors::receipt::ReceiptError::BadInstruction; // scope 0 at cita-chain/types/src/errors/receipt.rs:140:22: 140:50
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0c)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _19); // scope 0 at cita-chain/types/src/errors/receipt.rs:140:19: 140:51
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:140:50: 140:51
    }

    bb20: {
        _20 = const errors::receipt::ReceiptError::StackUnderflow; // scope 0 at cita-chain/types/src/errors/receipt.rs:141:22: 141:50
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0d)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _20); // scope 0 at cita-chain/types/src/errors/receipt.rs:141:19: 141:51
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:141:50: 141:51
    }

    bb21: {
        _21 = const errors::receipt::ReceiptError::OutOfStack; // scope 0 at cita-chain/types/src/errors/receipt.rs:142:22: 142:46
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0e)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _21); // scope 0 at cita-chain/types/src/errors/receipt.rs:142:19: 142:47
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:142:46: 142:47
    }

    bb22: {
        _22 = const errors::receipt::ReceiptError::Internal; // scope 0 at cita-chain/types/src/errors/receipt.rs:143:22: 143:44
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x0f)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _22); // scope 0 at cita-chain/types/src/errors/receipt.rs:143:19: 143:45
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:143:44: 143:45
    }

    bb23: {
        _23 = const errors::receipt::ReceiptError::MutableCallInStaticContext; // scope 0 at cita-chain/types/src/errors/receipt.rs:144:22: 144:62
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x10)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _23); // scope 0 at cita-chain/types/src/errors/receipt.rs:144:19: 144:63
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:144:62: 144:63
    }

    bb24: {
        _24 = const errors::receipt::ReceiptError::OutOfBounds; // scope 0 at cita-chain/types/src/errors/receipt.rs:145:22: 145:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x11)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _24); // scope 0 at cita-chain/types/src/errors/receipt.rs:145:19: 145:48
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:145:47: 145:48
    }

    bb25: {
        _25 = const errors::receipt::ReceiptError::Reverted; // scope 0 at cita-chain/types/src/errors/receipt.rs:146:22: 146:44
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: errors::receipt::ReceiptError, val: Value(Scalar(0x12)) }
        _0 = Result::<errors::receipt::ReceiptError, rlp::DecoderError>::Ok(move _25); // scope 0 at cita-chain/types/src/errors/receipt.rs:146:19: 146:45
        goto -> bb26;                    // scope 0 at cita-chain/types/src/errors/receipt.rs:146:44: 146:45
    }

    bb26: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:149:6: 149:6
    }
}

fn errors::receipt::<impl at cita-chain/types/src/errors/receipt.rs:152:1: 152:32>::rlp_append(_1: &errors::receipt::ReceiptError, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:153:19: 153:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/errors/receipt.rs:153:26: 153:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/errors/receipt.rs:153:45: 153:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:9: 154:33
    let _4: &u8;                         // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:18: 154:32
    let _5: u8;                          // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
    let _6: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:20: 154:25
    let mut _7: isize;                   // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:20: 154:25
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32

    bb0: {
        _6 = (*_1);                      // scope 0 at cita-chain/types/src/errors/receipt.rs:154:20: 154:25
        _7 = discriminant(_6);           // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        _8 = Ge(const 18_isize, _7);     // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        assume(_8);                      // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        _9 = Le(const 0_isize, _7);      // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        assume(_9);                      // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        _5 = move _7 as u8 (IntToInt);   // scope 0 at cita-chain/types/src/errors/receipt.rs:154:19: 154:32
        _4 = &_5;                        // scope 0 at cita-chain/types/src/errors/receipt.rs:154:18: 154:32
        _3 = rlp::RlpStream::append::<u8>(_2, _4) -> bb1; // scope 0 at cita-chain/types/src/errors/receipt.rs:154:9: 154:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/receipt.rs:154:11: 154:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u8) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/errors/receipt.rs:155:6: 155:6
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:27:10: 27:15>::fmt(_1: &errors::Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let _4: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
    let _5: &str;                        // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
    let _7: &&errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
    let _8: &errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
    let _9: &str;                        // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
    let _11: &&errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
    let _12: &errors::call::CallError;   // in scope 0 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
    let _13: &str;                       // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
    let _15: &&errors::call::CallError;  // in scope 0 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
    let _16: &errors::native::NativeError; // in scope 0 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
    let _17: &str;                       // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
    let _19: &&errors::native::NativeError; // in scope 0 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
    let _20: &errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
    let _21: &str;                       // in scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
    let _23: &&errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
    }
    scope 3 {
        debug __self_0 => _12;           // in scope 3 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
    }
    scope 4 {
        debug __self_0 => _16;           // in scope 4 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
    }
    scope 5 {
        debug __self_0 => _20;           // in scope 5 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    }

    bb1: {
        _20 = &(((*_1) as Authentication).0: errors::authentication::AuthenticationError); // scope 0 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
        _21 = const "Authentication";    // scope 5 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = &_20;                      // scope 5 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
        _22 = _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 5 at cita-chain/types/src/errors/mod.rs:33:20: 33:39
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _21, move _22) -> bb7; // scope 5 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
    }

    bb3: {
        _4 = &(((*_1) as Execution).0: errors::execution::ExecutionError); // scope 0 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
        _5 = const "Execution";          // scope 1 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/mod.rs:29:15: 29:29
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb7; // scope 1 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &(((*_1) as Receipt).0: errors::receipt::ReceiptError); // scope 0 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
        _9 = const "Receipt";            // scope 2 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/mod.rs:30:13: 30:25
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb7; // scope 2 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &(((*_1) as Call).0: errors::call::CallError); // scope 0 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
        _13 = const "Call";              // scope 3 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = &_12;                      // scope 3 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at cita-chain/types/src/errors/mod.rs:31:10: 31:19
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> bb7; // scope 3 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &(((*_1) as Native).0: errors::native::NativeError); // scope 0 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
        _17 = const "Native";            // scope 4 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = &_16;                      // scope 4 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at cita-chain/types/src/errors/mod.rs:32:12: 32:23
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _17, move _18) -> bb7; // scope 4 at cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:27:10: 27:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:27:15: 27:15
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt(_1: &errors::Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/errors/mod.rs:37:12: 37:17
    debug f => _2;                       // in scope 0 at cita-chain/types/src/errors/mod.rs:37:19: 37:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/errors/mod.rs:37:51: 37:67
    let _3: std::string::String;         // in scope 0 at cita-chain/types/src/errors/mod.rs:38:13: 38:16
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/errors/mod.rs:39:13: 39:38
    let _5: &errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/mod.rs:39:30: 39:37
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _8: &[&str];                 // in scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:39:74: 39:77
    let _13: &&errors::execution::ExecutionError; // in scope 0 at cita-chain/types/src/errors/mod.rs:39:74: 39:77
    let _14: &errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/mod.rs:40:28: 40:35
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _17: &[&str];                // in scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:40:70: 40:73
    let _22: &&errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/errors/mod.rs:40:70: 40:73
    let _23: &errors::call::CallError;   // in scope 0 at cita-chain/types/src/errors/mod.rs:41:25: 41:32
    let mut _25: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _26: &[&str];                // in scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _29: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:41:64: 41:67
    let _31: &&errors::call::CallError;  // in scope 0 at cita-chain/types/src/errors/mod.rs:41:64: 41:67
    let _32: &errors::native::NativeError; // in scope 0 at cita-chain/types/src/errors/mod.rs:42:27: 42:34
    let mut _34: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _35: &[&str];                // in scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
    let mut _36: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _37: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _38: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _39: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:42:68: 42:71
    let _40: &&errors::native::NativeError; // in scope 0 at cita-chain/types/src/errors/mod.rs:42:68: 42:71
    let _41: &errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/mod.rs:43:35: 43:42
    let mut _43: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _44: &[&str];                // in scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
    let mut _45: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _46: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let _47: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
    let mut _48: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:43:84: 43:87
    let _49: &&errors::authentication::AuthenticationError; // in scope 0 at cita-chain/types/src/errors/mod.rs:43:84: 43:87
    let mut _50: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _51: &[&str];                // in scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
    let mut _52: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _53: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _54: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _55: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/types/src/errors/mod.rs:45:25: 45:28
    let _56: &std::string::String;       // in scope 0 at cita-chain/types/src/errors/mod.rs:45:25: 45:28
    scope 1 {
        debug err => _3;                 // in scope 1 at cita-chain/types/src/errors/mod.rs:38:13: 38:16
        let mut _57: &[&str; 1];         // in scope 1 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
    }
    scope 2 {
        debug err => _5;                 // in scope 2 at cita-chain/types/src/errors/mod.rs:39:30: 39:37
        let _6: std::string::String;     // in scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _58: &[&str; 1];         // in scope 2 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
        scope 3 {
            debug res => _6;             // in scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }
    scope 4 {
        debug err => _14;                // in scope 4 at cita-chain/types/src/errors/mod.rs:40:28: 40:35
        let _15: std::string::String;    // in scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _59: &[&str; 1];         // in scope 4 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
        scope 5 {
            debug res => _15;            // in scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }
    scope 6 {
        debug err => _23;                // in scope 6 at cita-chain/types/src/errors/mod.rs:41:25: 41:32
        let _24: std::string::String;    // in scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _60: &[&str; 1];         // in scope 6 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
        scope 7 {
            debug res => _24;            // in scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }
    scope 8 {
        debug err => _32;                // in scope 8 at cita-chain/types/src/errors/mod.rs:42:27: 42:34
        let _33: std::string::String;    // in scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _61: &[&str; 1];         // in scope 8 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
        scope 9 {
            debug res => _33;            // in scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }
    scope 10 {
        debug err => _41;                // in scope 10 at cita-chain/types/src/errors/mod.rs:43:35: 43:42
        let _42: std::string::String;    // in scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        let mut _62: &[&str; 1];         // in scope 10 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
        scope 11 {
            debug res => _42;            // in scope 11 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:13: 120:16
        }
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/errors/mod.rs:38:25: 38:29
        switchInt(move _4) -> [0: bb3, 1: bb7, 2: bb11, 3: bb15, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/errors/mod.rs:38:19: 38:29
    }

    bb1: {
        _41 = &(((*_1) as Authentication).0: errors::authentication::AuthenticationError); // scope 0 at cita-chain/types/src/errors/mod.rs:43:35: 43:42
        _62 = const _;                   // scope 10 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:43:55: 43:82
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[5])) }
        _44 = _62 as &[&str] (Pointer(Unsize)); // scope 10 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
        _49 = &_41;                      // scope 10 at cita-chain/types/src/errors/mod.rs:43:84: 43:87
        _48 = core::fmt::ArgumentV1::<'_>::new_debug::<&AuthenticationError>(_49) -> bb19; // scope 10 at cita-chain/types/src/errors/mod.rs:43:84: 43:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:43:84: 43:87
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b &AuthenticationError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&AuthenticationError>}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/errors/mod.rs:38:25: 38:29
    }

    bb3: {
        _5 = &(((*_1) as Execution).0: errors::execution::ExecutionError); // scope 0 at cita-chain/types/src/errors/mod.rs:39:30: 39:37
        _58 = const _;                   // scope 2 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:39:50: 39:72
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[1])) }
        _8 = _58 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
        _13 = &_5;                       // scope 2 at cita-chain/types/src/errors/mod.rs:39:74: 39:77
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<&ExecutionError>(_13) -> bb4; // scope 2 at cita-chain/types/src/errors/mod.rs:39:74: 39:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:39:74: 39:77
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &ExecutionError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&ExecutionError>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = [move _12];                // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _10 = &_11;                      // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _9 = _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> bb5; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = format(move _7) -> bb6;     // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/mod.rs:39:77: 39:78
    }

    bb7: {
        _14 = &(((*_1) as Receipt).0: errors::receipt::ReceiptError); // scope 0 at cita-chain/types/src/errors/mod.rs:40:28: 40:35
        _59 = const _;                   // scope 4 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:40:48: 40:68
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[2])) }
        _17 = _59 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
        _22 = &_14;                      // scope 4 at cita-chain/types/src/errors/mod.rs:40:70: 40:73
        _21 = core::fmt::ArgumentV1::<'_>::new_debug::<&errors::receipt::ReceiptError>(_22) -> bb8; // scope 4 at cita-chain/types/src/errors/mod.rs:40:70: 40:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:40:70: 40:73
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &errors::receipt::ReceiptError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&errors::receipt::ReceiptError>}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = [move _21];                // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _19 = &_20;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _18 = _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> bb9; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = format(move _16) -> bb10;  // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb10: {
        _3 = move _15;                   // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/mod.rs:40:73: 40:74
    }

    bb11: {
        _23 = &(((*_1) as Call).0: errors::call::CallError); // scope 0 at cita-chain/types/src/errors/mod.rs:41:25: 41:32
        _60 = const _;                   // scope 6 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:41:45: 41:62
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[3])) }
        _26 = _60 as &[&str] (Pointer(Unsize)); // scope 6 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
        _31 = &_23;                      // scope 6 at cita-chain/types/src/errors/mod.rs:41:64: 41:67
        _30 = core::fmt::ArgumentV1::<'_>::new_debug::<&errors::call::CallError>(_31) -> bb12; // scope 6 at cita-chain/types/src/errors/mod.rs:41:64: 41:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:41:64: 41:67
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &errors::call::CallError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&errors::call::CallError>}, val: Value(<ZST>) }
    }

    bb12: {
        _29 = [move _30];                // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _28 = &_29;                      // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _27 = _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> bb13; // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = format(move _25) -> bb14;  // scope 6 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb14: {
        _3 = move _24;                   // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/mod.rs:41:67: 41:68
    }

    bb15: {
        _32 = &(((*_1) as Native).0: errors::native::NativeError); // scope 0 at cita-chain/types/src/errors/mod.rs:42:27: 42:34
        _61 = const _;                   // scope 8 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:42:47: 42:66
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[4])) }
        _35 = _61 as &[&str] (Pointer(Unsize)); // scope 8 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
        _40 = &_32;                      // scope 8 at cita-chain/types/src/errors/mod.rs:42:68: 42:71
        _39 = core::fmt::ArgumentV1::<'_>::new_debug::<&NativeError>(_40) -> bb16; // scope 8 at cita-chain/types/src/errors/mod.rs:42:68: 42:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:42:68: 42:71
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &NativeError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&NativeError>}, val: Value(<ZST>) }
    }

    bb16: {
        _38 = [move _39];                // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _37 = &_38;                      // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _36 = _37 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> bb17; // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _33 = format(move _34) -> bb18;  // scope 8 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb18: {
        _3 = move _33;                   // scope 9 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/mod.rs:42:71: 42:72
    }

    bb19: {
        _47 = [move _48];                // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _46 = &_47;                      // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _45 = _46 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> bb20; // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:39: 120:79
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _42 = format(move _43) -> bb21;  // scope 10 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:80
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:120:19: 120:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> std::string::String {format}, val: Value(<ZST>) }
    }

    bb21: {
        _3 = move _42;                   // scope 11 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:121:9: 121:12
        goto -> bb22;                    // scope 0 at cita-chain/types/src/errors/mod.rs:43:87: 43:88
    }

    bb22: {
        _57 = const _;                   // scope 1 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:45:19: 45:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<errors::Error as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _51 = _57 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
        _56 = &_3;                       // scope 1 at cita-chain/types/src/errors/mod.rs:45:25: 45:28
        _55 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_56) -> [return: bb23, unwind: bb27]; // scope 1 at cita-chain/types/src/errors/mod.rs:45:25: 45:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:45:25: 45:28
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb23: {
        _54 = [move _55];                // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _53 = &_54;                      // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _52 = _53 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _50 = Arguments::<'_>::new_v1(move _51, move _52) -> [return: bb24, unwind: bb27]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Formatter::<'_>::write_fmt(_2, move _50) -> [return: bb25, unwind: bb27]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_3) -> bb26;                // scope 0 at cita-chain/types/src/errors/mod.rs:46:5: 46:6
    }

    bb26: {
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:46:6: 46:6
    }

    bb27 (cleanup): {
        drop(_3) -> bb28;                // scope 0 at cita-chain/types/src/errors/mod.rs:46:5: 46:6
    }

    bb28 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/errors/mod.rs:37:5: 46:6
    }
}

promoted[0] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:45:19: 45:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:45:19: 45:23
    }
}

promoted[1] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72

    bb0: {
        _1 = [const "Execution error "]; // scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:39:50: 39:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:39:50: 39:72
    }
}

promoted[2] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68

    bb0: {
        _1 = [const "Receipt error "];   // scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:40:48: 40:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:40:48: 40:68
    }
}

promoted[3] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62

    bb0: {
        _1 = [const "Call error "];      // scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:41:45: 41:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:41:45: 41:62
    }
}

promoted[4] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66

    bb0: {
        _1 = [const "Native error "];    // scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:42:47: 42:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:42:47: 42:66
    }
}

promoted[5] in errors::<impl at cita-chain/types/src/errors/mod.rs:36:1: 36:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82

    bb0: {
        _1 = [const "Authentication error "]; // scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/errors/mod.rs:43:55: 43:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:43:55: 43:82
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:49:1: 49:36>::from(_1: ExecutionError) -> errors::Error {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/mod.rs:50:13: 50:16
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:50:37: 50:42

    bb0: {
        _0 = errors::Error::Execution(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:51:9: 51:30
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:52:6: 52:6
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:55:1: 55:34>::from(_1: errors::receipt::ReceiptError) -> errors::Error {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/mod.rs:56:13: 56:16
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:56:35: 56:40

    bb0: {
        _0 = errors::Error::Receipt(_1); // scope 0 at cita-chain/types/src/errors/mod.rs:57:9: 57:28
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:58:6: 58:6
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:60:1: 60:31>::from(_1: errors::call::CallError) -> errors::Error {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/mod.rs:61:13: 61:16
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:61:32: 61:37

    bb0: {
        _0 = errors::Error::Call(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:62:9: 62:25
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:63:6: 63:6
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:65:1: 65:33>::from(_1: NativeError) -> errors::Error {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/mod.rs:66:13: 66:16
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:66:34: 66:39

    bb0: {
        _0 = errors::Error::Native(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:67:9: 67:27
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:68:6: 68:6
    }
}

fn errors::<impl at cita-chain/types/src/errors/mod.rs:70:1: 70:41>::from(_1: AuthenticationError) -> errors::Error {
    debug err => _1;                     // in scope 0 at cita-chain/types/src/errors/mod.rs:71:13: 71:16
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:71:42: 71:47

    bb0: {
        _0 = errors::Error::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:72:9: 72:35
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:73:6: 73:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:24:10: 24:15>::fmt(_1: &AddressFilter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
    let _6: &&std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
    let _7: &std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36

    bb0: {
        _3 = const "AddressFilter";      // scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "addresses";          // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:26:5: 26:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>); // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _6 = &_7;                        // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:24:10: 24:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:24:15: 24:15
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:24:17: 24:26>::eq(_1: &AddressFilter, _2: &AddressFilter) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:24:17: 24:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:24:17: 24:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:24:17: 24:26
    let mut _3: &std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
    let mut _4: &std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>); // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _4 = &((*_2).0: std::option::Option<std::vec::Vec<cita_types::H160>>); // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _0 = <std::option::Option<Vec<H160>> as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:26:5: 26:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::option::Option<Vec<H160>>, &'b std::option::Option<Vec<H160>>) -> bool {<std::option::Option<Vec<H160>> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:24:26: 24:26
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:24:28: 24:33>::clone(_1: &AddressFilter) -> AddressFilter {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:24:28: 24:33
    let mut _0: filter::AddressFilter;   // return place in scope 0 at cita-chain/types/src/filter.rs:24:28: 24:33
    let mut _2: std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
    let _3: &std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>); // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
        _2 = <std::option::Option<Vec<H160>> as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:26:5: 26:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:26:5: 26:36
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<Vec<H160>>) -> std::option::Option<Vec<H160>> {<std::option::Option<Vec<H160>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = AddressFilter { addresses: move _2 }; // scope 0 at cita-chain/types/src/filter.rs:24:28: 24:33
        return;                          // scope 0 at cita-chain/types/src/filter.rs:24:33: 24:33
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:29:1: 29:19>::new(_1: std::option::Option<Vec<H160>>) -> AddressFilter {
    debug addresses => _1;               // in scope 0 at cita-chain/types/src/filter.rs:30:16: 30:25
    let mut _0: filter::AddressFilter;   // return place in scope 0 at cita-chain/types/src/filter.rs:30:52: 30:56

    bb0: {
        _0 = AddressFilter { addresses: move _1 }; // scope 0 at cita-chain/types/src/filter.rs:31:9: 31:36
        return;                          // scope 0 at cita-chain/types/src/filter.rs:32:6: 32:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:29:1: 29:19>::blooms(_1: &AddressFilter) -> Vec<cita_types::Bloom> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:34:19: 34:24
    let mut _0: std::vec::Vec<cita_types::Bloom>; // return place in scope 0 at cita-chain/types/src/filter.rs:34:29: 34:39
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:36:13: 36:32
    let _3: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:36:18: 36:31
    let _4: &&std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:36:18: 36:31
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:36:36: 36:57
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:36:37: 36:57
    let mut _7: std::iter::Map<std::slice::Iter<'_, cita_types::H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]>; // in scope 0 at cita-chain/types/src/filter.rs:36:61: 38:61
    let mut _8: std::slice::Iter<'_, cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:36:61: 37:24
    let mut _9: &[cita_types::H160];     // in scope 0 at cita-chain/types/src/filter.rs:36:61: 37:24
    let _10: &[cita_types::H160];        // in scope 0 at cita-chain/types/src/filter.rs:36:61: 37:24
    let mut _11: std::boxed::Box<[cita_types::Bloom]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _12: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _13: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _14: *mut u8;                // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _15: std::boxed::Box<[cita_types::Bloom; 1]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _16: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/filter.rs:40:23: 40:39
    let mut _17: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:36:18: 36:31
    let mut _18: ();                     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
    let mut _19: *const [cita_types::Bloom; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug addresses => _3;           // in scope 1 at cita-chain/types/src/filter.rs:36:18: 36:31
        debug addresses => _4;           // in scope 1 at cita-chain/types/src/filter.rs:36:18: 36:31
    }
    scope 2 {
    }

    bb0: {
        _2 = discriminant(((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>)); // scope 0 at cita-chain/types/src/filter.rs:35:15: 35:29
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 0 at cita-chain/types/src/filter.rs:35:9: 35:29
    }

    bb1: {
        _12 = const 256_usize;           // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _13 = const 1_usize;             // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> bb8; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &((((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>) as Some).0: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/types/src/filter.rs:36:18: 36:31
        _4 = &_3;                        // scope 0 at cita-chain/types/src/filter.rs:36:18: 36:31
        _17 = deref_copy (*_4);          // scope 0 at cita-chain/types/src/filter.rs:36:37: 36:57
        _6 = Vec::<H160>::is_empty(_17) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:36:37: 36:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:36:47: 36:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> bool {Vec::<H160>::is_empty}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Not(move _6);               // scope 0 at cita-chain/types/src/filter.rs:36:36: 36:57
        switchInt(move _5) -> [0: bb1, otherwise: bb4]; // scope 0 at cita-chain/types/src/filter.rs:36:36: 36:57
    }

    bb4: {
        _10 = <Vec<H160> as Deref>::deref(_3) -> bb5; // scope 1 at cita-chain/types/src/filter.rs:36:61: 37:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:36:61: 37:24
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> &'a <Vec<H160> as Deref>::Target {<Vec<H160> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 1 at cita-chain/types/src/filter.rs:36:61: 37:24
        _8 = core::slice::<impl [H160]>::iter(move _9) -> bb6; // scope 1 at cita-chain/types/src/filter.rs:36:61: 37:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:37:18: 37:22
                                         // + literal: Const { ty: for<'a> fn(&'a [H160]) -> std::slice::Iter<'a, H160> {core::slice::<impl [H160]>::iter}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <std::slice::Iter<'_, H160> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]>(move _8, const ZeroSized: [closure@cita-chain/types/src/filter.rs:38:22: 38:35]) -> bb7; // scope 1 at cita-chain/types/src/filter.rs:36:61: 38:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:38:18: 38:21
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]) -> std::iter::Map<std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]> {<std::slice::Iter<'_, H160> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/filter.rs:38:22: 38:35], val: Value(<ZST>) }
    }

    bb7: {
        _0 = <std::iter::Map<std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]> as Iterator>::collect::<Vec<cita_types::Bloom>>(move _7) -> bb10; // scope 1 at cita-chain/types/src/filter.rs:36:61: 39:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:39:18: 39:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]>) -> Vec<cita_types::Bloom> {<std::iter::Map<std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:38:22: 38:35]> as Iterator>::collect::<Vec<cita_types::Bloom>>}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = ShallowInitBox(move _14, [cita_types::Bloom; 1]); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _16 = <cita_types::Bloom as Default>::default() -> [return: bb9, unwind: bb12]; // scope 0 at cita-chain/types/src/filter.rs:40:23: 40:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:40:23: 40:37
                                         // + literal: Const { ty: fn() -> cita_types::Bloom {<cita_types::Bloom as Default>::default}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = (((_15.0: std::ptr::Unique<[cita_types::Bloom; 1]>).0: std::ptr::NonNull<[cita_types::Bloom; 1]>).0: *const [cita_types::Bloom; 1]); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_19) = [move _16];             // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _11 = move _15 as std::boxed::Box<[cita_types::Bloom]> (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _0 = slice::<impl [cita_types::Bloom]>::into_vec::<std::alloc::Global>(move _11) -> bb10; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[cita_types::Bloom]>) -> Vec<cita_types::Bloom> {slice::<impl [cita_types::Bloom]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:42:6: 42:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:34:5: 42:6
    }

    bb12 (cleanup): {
        _18 = alloc::alloc::box_free::<[cita_types::Bloom; 1], std::alloc::Global>(move (_15.0: std::ptr::Unique<[cita_types::Bloom; 1]>), const std::alloc::Global) -> bb11; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // + literal: Const { ty: unsafe fn(Unique<[cita_types::Bloom; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[cita_types::Bloom; 1], std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:29:1: 29:19>::blooms::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:38:22: 38:35], _2: &H160) -> cita_types::Bloom {
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/filter.rs:38:36: 38:36
    let _3: &&cita_types::H160;          // in scope 0 at cita-chain/types/src/filter.rs:38:23: 38:34
    let mut _4: &[u8];                   // in scope 0 at cita-chain/types/src/filter.rs:38:52: 38:59
    let _5: &[u8];                       // in scope 0 at cita-chain/types/src/filter.rs:38:52: 38:59
    let mut _6: &cita_types::H160;       // in scope 0 at cita-chain/types/src/filter.rs:38:23: 38:34
    scope 1 {
        debug address => _3;             // in scope 1 at cita-chain/types/src/filter.rs:38:23: 38:34
    }

    bb0: {
        _3 = &_2;                        // scope 0 at cita-chain/types/src/filter.rs:38:23: 38:34
        _6 = deref_copy (*_3);           // scope 1 at cita-chain/types/src/filter.rs:38:52: 38:59
        _5 = <H160 as Deref>::deref(_6) -> bb1; // scope 1 at cita-chain/types/src/filter.rs:38:52: 38:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:38:52: 38:59
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 1 at cita-chain/types/src/filter.rs:38:52: 38:59
        _0 = <cita_types::Bloom as BloomTools>::from_raw(move _4) -> bb2; // scope 1 at cita-chain/types/src/filter.rs:38:36: 38:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:38:36: 38:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> cita_types::Bloom {<cita_types::Bloom as BloomTools>::from_raw}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:38:60: 38:60
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:29:1: 29:19>::matches(_1: &AddressFilter, _2: &log::Log) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:44:20: 44:25
    debug log => _2;                     // in scope 0 at cita-chain/types/src/filter.rs:44:27: 44:30
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:44:41: 44:45
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:46:13: 46:32
    let _4: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:46:18: 46:31
    let _5: &&std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:46:18: 46:31
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:46:36: 46:57
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:46:37: 46:57
    let mut _8: &mut std::slice::Iter<'_, cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:47:17: 47:72
    let mut _9: std::slice::Iter<'_, cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:47:17: 47:33
    let mut _10: &[cita_types::H160];    // in scope 0 at cita-chain/types/src/filter.rs:47:17: 47:33
    let _11: &[cita_types::H160];        // in scope 0 at cita-chain/types/src/filter.rs:47:17: 47:33
    let mut _12: [closure@cita-chain/types/src/filter.rs:47:38: 47:47]; // in scope 0 at cita-chain/types/src/filter.rs:47:38: 47:71
    let mut _13: &&log::Log;             // in scope 0 at cita-chain/types/src/filter.rs:47:38: 47:71
    let mut _14: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:46:18: 46:31
    scope 1 {
        debug addresses => _4;           // in scope 1 at cita-chain/types/src/filter.rs:46:18: 46:31
        debug addresses => _5;           // in scope 1 at cita-chain/types/src/filter.rs:46:18: 46:31
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>)); // scope 0 at cita-chain/types/src/filter.rs:45:15: 45:29
        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at cita-chain/types/src/filter.rs:45:9: 45:29
    }

    bb1: {
        _0 = const true;                 // scope 0 at cita-chain/types/src/filter.rs:49:18: 49:22
        goto -> bb7;                     // scope 0 at cita-chain/types/src/filter.rs:49:18: 49:22
    }

    bb2: {
        _4 = &((((*_1).0: std::option::Option<std::vec::Vec<cita_types::H160>>) as Some).0: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/types/src/filter.rs:46:18: 46:31
        _5 = &_4;                        // scope 0 at cita-chain/types/src/filter.rs:46:18: 46:31
        _14 = deref_copy (*_5);          // scope 0 at cita-chain/types/src/filter.rs:46:37: 46:57
        _7 = Vec::<H160>::is_empty(_14) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:46:37: 46:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:46:47: 46:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> bool {Vec::<H160>::is_empty}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Not(move _7);               // scope 0 at cita-chain/types/src/filter.rs:46:36: 46:57
        switchInt(move _6) -> [0: bb1, otherwise: bb4]; // scope 0 at cita-chain/types/src/filter.rs:46:36: 46:57
    }

    bb4: {
        _11 = <Vec<H160> as Deref>::deref(_4) -> bb5; // scope 1 at cita-chain/types/src/filter.rs:47:17: 47:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:47:17: 47:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> &'a <Vec<H160> as Deref>::Target {<Vec<H160> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _11;                       // scope 1 at cita-chain/types/src/filter.rs:47:17: 47:33
        _9 = core::slice::<impl [H160]>::iter(move _10) -> bb6; // scope 1 at cita-chain/types/src/filter.rs:47:17: 47:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:47:27: 47:31
                                         // + literal: Const { ty: for<'a> fn(&'a [H160]) -> std::slice::Iter<'a, H160> {core::slice::<impl [H160]>::iter}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = &mut _9;                    // scope 1 at cita-chain/types/src/filter.rs:47:17: 47:72
        _13 = &_2;                       // scope 1 at cita-chain/types/src/filter.rs:47:38: 47:71
        _12 = [closure@cita-chain/types/src/filter.rs:47:38: 47:47] { log: move _13 }; // scope 1 at cita-chain/types/src/filter.rs:47:38: 47:71
                                         // closure
                                         // + def_id: DefId(0:265 ~ common_types[6a4d]::filter::{impl#0}::matches::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&cita_types::H160,)) -> bool,
                                         //     (&&log::Log,),
                                         // ]
        _0 = <std::slice::Iter<'_, H160> as Iterator>::any::<[closure@cita-chain/types/src/filter.rs:47:38: 47:47]>(move _8, move _12) -> bb7; // scope 1 at cita-chain/types/src/filter.rs:47:17: 47:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:47:34: 47:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, H160>, [closure@cita-chain/types/src/filter.rs:47:38: 47:47]) -> bool {<std::slice::Iter<'_, H160> as Iterator>::any::<[closure@cita-chain/types/src/filter.rs:47:38: 47:47]>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:51:6: 51:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:29:1: 29:19>::matches::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:47:38: 47:47], _2: &H160) -> bool {
    debug address => _2;                 // in scope 0 at cita-chain/types/src/filter.rs:47:39: 47:46
    debug log => (*((*_1).0: &&log::Log)); // in scope 0 at cita-chain/types/src/filter.rs:44:27: 44:30
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:47:48: 47:48
    let mut _3: &&cita_types::H160;      // in scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
    let _4: &cita_types::H160;           // in scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
    let mut _5: &&cita_types::H160;      // in scope 0 at cita-chain/types/src/filter.rs:47:64: 47:71
    let mut _6: &&log::Log;              // in scope 0 at cita-chain/types/src/filter.rs:47:38: 47:71
    let mut _7: &log::Log;               // in scope 0 at cita-chain/types/src/filter.rs:47:38: 47:71

    bb0: {
        _6 = deref_copy ((*_1).0: &&log::Log); // scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
        _7 = deref_copy (*_6);           // scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
        _4 = &((*_7).0: cita_types::H160); // scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
        _3 = &_4;                        // scope 0 at cita-chain/types/src/filter.rs:47:48: 47:60
        _5 = &_2;                        // scope 0 at cita-chain/types/src/filter.rs:47:64: 47:71
        _0 = <&H160 as PartialEq>::eq(move _3, move _5) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:47:48: 47:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:47:48: 47:71
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H160, &'b &H160) -> bool {<&H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:47:71: 47:71
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:54:1: 54:51>::from(_1: std::option::Option<VariadicValue<Data20>>) -> AddressFilter {
    debug addresses => _1;               // in scope 0 at cita-chain/types/src/filter.rs:55:13: 55:22
    let mut _0: filter::AddressFilter;   // return place in scope 0 at cita-chain/types/src/filter.rs:55:50: 55:63
    let _2: std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:56:13: 56:22
    let mut _3: std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:62:25: 62:34
    scope 1 {
        debug addresses => _2;           // in scope 1 at cita-chain/types/src/filter.rs:56:13: 56:22
    }

    bb0: {
        _2 = std::option::Option::<VariadicValue<Data20>>::and_then::<Vec<H160>, [closure@cita-chain/types/src/filter.rs:56:44: 56:53]>(move _1, const ZeroSized: [closure@cita-chain/types/src/filter.rs:56:44: 56:53]) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:56:25: 60:11
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:56:35: 56:43
                                         // + literal: Const { ty: fn(std::option::Option<VariadicValue<Data20>>, [closure@cita-chain/types/src/filter.rs:56:44: 56:53]) -> std::option::Option<Vec<H160>> {std::option::Option::<VariadicValue<Data20>>::and_then::<Vec<H160>, [closure@cita-chain/types/src/filter.rs:56:44: 56:53]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/filter.rs:56:44: 56:53], val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _2;                    // scope 1 at cita-chain/types/src/filter.rs:62:25: 62:34
        _0 = AddressFilter { addresses: move _3 }; // scope 1 at cita-chain/types/src/filter.rs:62:9: 62:36
        return;                          // scope 0 at cita-chain/types/src/filter.rs:63:6: 63:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:54:1: 54:51>::from::{closure#0}(_1: [closure@cita-chain/types/src/filter.rs:56:44: 56:53], _2: VariadicValue<Data20>) -> std::option::Option<Vec<H160>> {
    debug address => _2;                 // in scope 0 at cita-chain/types/src/filter.rs:56:45: 56:52
    let mut _0: std::option::Option<std::vec::Vec<cita_types::H160>>; // return place in scope 0 at cita-chain/types/src/filter.rs:56:54: 56:54
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:57:13: 57:32
    let _4: jsonrpc_types::rpc_types::Data20; // in scope 0 at cita-chain/types/src/filter.rs:58:35: 58:39
    let mut _5: std::vec::Vec<cita_types::H160>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
    let mut _6: std::boxed::Box<[cita_types::H160]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _7: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _8: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _10: std::boxed::Box<[cita_types::H160; 1]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _11: cita_types::H160;       // in scope 0 at cita-chain/types/src/filter.rs:58:54: 58:65
    let _12: std::vec::Vec<jsonrpc_types::rpc_types::Data20>; // in scope 0 at cita-chain/types/src/filter.rs:59:37: 59:41
    let mut _13: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/types/src/filter.rs:59:51: 59:93
    let mut _14: std::iter::Map<std::vec::IntoIter<jsonrpc_types::rpc_types::Data20>, fn(jsonrpc_types::rpc_types::Data20) -> cita_types::H160 {<jsonrpc_types::rpc_types::Data20 as std::convert::Into<cita_types::H160>>::into}>; // in scope 0 at cita-chain/types/src/filter.rs:59:51: 59:83
    let mut _15: std::vec::IntoIter<jsonrpc_types::rpc_types::Data20>; // in scope 0 at cita-chain/types/src/filter.rs:59:51: 59:67
    let mut _16: ();                     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
    let mut _17: *const [cita_types::H160; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug addr => _4;                // in scope 1 at cita-chain/types/src/filter.rs:58:35: 58:39
        scope 2 {
        }
    }
    scope 3 {
        debug addr => _12;               // in scope 3 at cita-chain/types/src/filter.rs:59:37: 59:41
    }

    bb0: {
        _3 = discriminant(_2);           // scope 0 at cita-chain/types/src/filter.rs:56:60: 56:67
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/filter.rs:56:54: 56:67
    }

    bb1: {
        _12 = move ((_2 as Multiple).0: std::vec::Vec<jsonrpc_types::rpc_types::Data20>); // scope 0 at cita-chain/types/src/filter.rs:59:37: 59:41
        _15 = <Vec<Data20> as IntoIterator>::into_iter(move _12) -> bb8; // scope 3 at cita-chain/types/src/filter.rs:59:51: 59:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:59:56: 59:65
                                         // + literal: Const { ty: fn(Vec<Data20>) -> <Vec<Data20> as IntoIterator>::IntoIter {<Vec<Data20> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/filter.rs:56:60: 56:67
    }

    bb3: {
        _0 = std::option::Option::<Vec<H160>>::None; // scope 0 at cita-chain/types/src/filter.rs:57:36: 57:40
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:57:36: 57:40
    }

    bb4: {
        _4 = move ((_2 as Single).0: jsonrpc_types::rpc_types::Data20); // scope 0 at cita-chain/types/src/filter.rs:58:35: 58:39
        _7 = const 20_usize;             // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _8 = const 1_usize;              // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb5; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = ShallowInitBox(move _9, [cita_types::H160; 1]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _11 = <Data20 as Into<H160>>::into(move _4) -> [return: bb6, unwind: bb12]; // scope 1 at cita-chain/types/src/filter.rs:58:54: 58:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:58:59: 58:63
                                         // + literal: Const { ty: fn(Data20) -> H160 {<Data20 as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = (((_10.0: std::ptr::Unique<[cita_types::H160; 1]>).0: std::ptr::NonNull<[cita_types::H160; 1]>).0: *const [cita_types::H160; 1]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_17) = [move _11];             // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _6 = move _10 as std::boxed::Box<[cita_types::H160]> (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _5 = slice::<impl [H160]>::into_vec::<std::alloc::Global>(move _6) -> bb7; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[H160]>) -> Vec<H160> {slice::<impl [H160]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = std::option::Option::<Vec<H160>>::Some(move _5); // scope 1 at cita-chain/types/src/filter.rs:58:44: 58:67
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:58:66: 58:67
    }

    bb8: {
        _14 = <std::vec::IntoIter<Data20> as Iterator>::map::<H160, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}>(move _15, <Data20 as Into<H160>>::into) -> bb9; // scope 3 at cita-chain/types/src/filter.rs:59:51: 59:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:59:68: 59:71
                                         // + literal: Const { ty: fn(std::vec::IntoIter<Data20>, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}) -> std::iter::Map<std::vec::IntoIter<Data20>, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}> {<std::vec::IntoIter<Data20> as Iterator>::map::<H160, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:59:72: 59:82
                                         // + literal: Const { ty: fn(Data20) -> H160 {<Data20 as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = <std::iter::Map<std::vec::IntoIter<Data20>, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}> as Iterator>::collect::<Vec<H160>>(move _14) -> bb10; // scope 3 at cita-chain/types/src/filter.rs:59:51: 59:93
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:59:84: 59:91
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<Data20>, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}>) -> Vec<H160> {<std::iter::Map<std::vec::IntoIter<Data20>, fn(Data20) -> H160 {<Data20 as Into<H160>>::into}> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = std::option::Option::<Vec<H160>>::Some(move _13); // scope 3 at cita-chain/types/src/filter.rs:59:46: 59:94
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:59:93: 59:94
    }

    bb11: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:60:10: 60:10
    }

    bb12 (cleanup): {
        _16 = alloc::alloc::box_free::<[H160; 1], std::alloc::Global>(move (_10.0: std::ptr::Unique<[cita_types::H160; 1]>), const std::alloc::Global) -> bb13; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // + literal: Const { ty: unsafe fn(Unique<[H160; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[H160; 1], std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:56:44: 60:10
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:66:1: 66:31>::default() -> AddressFilter {
    let mut _0: filter::AddressFilter;   // return place in scope 0 at cita-chain/types/src/filter.rs:67:21: 67:25
    let mut _1: std::option::Option<std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/types/src/filter.rs:68:36: 68:40

    bb0: {
        _1 = std::option::Option::<Vec<H160>>::None; // scope 0 at cita-chain/types/src/filter.rs:68:36: 68:40
        _0 = AddressFilter { addresses: move _1 }; // scope 0 at cita-chain/types/src/filter.rs:68:9: 68:42
        return;                          // scope 0 at cita-chain/types/src/filter.rs:69:6: 69:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:73:10: 73:15>::fmt(_1: &TopicFilter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
    let _6: &&std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
    let _7: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35

    bb0: {
        _3 = const "TopicFilter";        // scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:73:10: 73:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "topics";             // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:75:5: 75:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &((*_1).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
        _6 = &_7;                        // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:73:10: 73:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:73:10: 73:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:73:15: 73:15
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:73:17: 73:26>::eq(_1: &TopicFilter, _2: &TopicFilter) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:73:17: 73:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:73:17: 73:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:73:17: 73:26
    let mut _3: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
    let mut _4: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
        _4 = &((*_2).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
        _0 = <Vec<std::option::Option<Vec<H256>>> as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:75:5: 75:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:75:5: 75:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<std::option::Option<Vec<H256>>>, &'b Vec<std::option::Option<Vec<H256>>>) -> bool {<Vec<std::option::Option<Vec<H256>>> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:73:26: 73:26
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::new(_1: Vec<std::option::Option<Vec<H256>>>) -> TopicFilter {
    debug topics => _1;                  // in scope 0 at cita-chain/types/src/filter.rs:79:16: 79:22
    let mut _0: filter::TopicFilter;     // return place in scope 0 at cita-chain/types/src/filter.rs:79:51: 79:55

    bb0: {
        _0 = TopicFilter { topics: move _1 }; // scope 0 at cita-chain/types/src/filter.rs:80:9: 80:31
        return;                          // scope 0 at cita-chain/types/src/filter.rs:81:6: 81:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::zip_blooms(_1: &TopicFilter, _2: Vec<cita_types::Bloom>) -> Vec<cita_types::Bloom> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:83:23: 83:28
    debug blooms => _2;                  // in scope 0 at cita-chain/types/src/filter.rs:83:30: 83:36
    let mut _0: std::vec::Vec<cita_types::Bloom>; // return place in scope 0 at cita-chain/types/src/filter.rs:83:53: 83:63
    let mut _3: std::slice::Iter<'_, std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
    let mut _4: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
    let _5: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
    let mut _6: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
    let mut _7: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/filter.rs:84:33: 84:39
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:100:5: 100:6

    bb0: {
        _8 = const false;                // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
        _8 = const true;                 // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
        _6 = &((*_1).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
        _5 = <Vec<std::option::Option<Vec<H256>>> as Deref>::deref(move _6) -> [return: bb1, unwind: bb6]; // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:84:9: 84:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<std::option::Option<Vec<H256>>>) -> &'a <Vec<std::option::Option<Vec<H256>>> as Deref>::Target {<Vec<std::option::Option<Vec<H256>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
        _3 = core::slice::<impl [std::option::Option<Vec<H256>>]>::iter(move _4) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/types/src/filter.rs:84:9: 84:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:84:21: 84:25
                                         // + literal: Const { ty: for<'a> fn(&'a [std::option::Option<Vec<H256>>]) -> std::slice::Iter<'a, std::option::Option<Vec<H256>>> {core::slice::<impl [std::option::Option<Vec<H256>>]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const false;                // scope 0 at cita-chain/types/src/filter.rs:84:33: 84:39
        _7 = move _2;                    // scope 0 at cita-chain/types/src/filter.rs:84:33: 84:39
        _0 = <std::slice::Iter<'_, std::option::Option<Vec<H256>>> as Iterator>::fold::<Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:84:41: 84:52]>(move _3, move _7, const ZeroSized: [closure@cita-chain/types/src/filter.rs:84:41: 84:52]) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/types/src/filter.rs:84:9: 99:11
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:84:28: 84:32
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, std::option::Option<Vec<H256>>>, Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:84:41: 84:52]) -> Vec<cita_types::Bloom> {<std::slice::Iter<'_, std::option::Option<Vec<H256>>> as Iterator>::fold::<Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:84:41: 84:52]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/filter.rs:84:41: 84:52], val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:100:6: 100:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:83:5: 100:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/filter.rs:100:5: 100:6
    }

    bb6 (cleanup): {
        switchInt(_8) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/filter.rs:100:5: 100:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::zip_blooms::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:84:41: 84:52], _2: Vec<cita_types::Bloom>, _3: &std::option::Option<Vec<H256>>) -> Vec<cita_types::Bloom> {
    debug bs => _2;                      // in scope 0 at cita-chain/types/src/filter.rs:84:42: 84:44
    debug topic => _3;                   // in scope 0 at cita-chain/types/src/filter.rs:84:46: 84:51
    let mut _0: std::vec::Vec<cita_types::Bloom>; // return place in scope 0 at cita-chain/types/src/filter.rs:84:53: 84:53
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:85:13: 85:17
    let _5: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:86:18: 86:28
    let mut _6: std::iter::FlatMap<std::vec::IntoIter<cita_types::Bloom>, std::vec::Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]>; // in scope 0 at cita-chain/types/src/filter.rs:86:33: 97:19
    let mut _7: std::vec::IntoIter<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/filter.rs:86:33: 87:29
    let mut _8: [closure@cita-chain/types/src/filter.rs:88:27: 88:34]; // in scope 0 at cita-chain/types/src/filter.rs:88:27: 97:18
    let mut _9: &&std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:88:27: 97:18
    scope 1 {
        debug topics => _5;              // in scope 1 at cita-chain/types/src/filter.rs:86:18: 86:28
    }

    bb0: {
        _4 = discriminant((*_3));        // scope 0 at cita-chain/types/src/filter.rs:84:59: 84:65
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/filter.rs:84:53: 84:65
    }

    bb1: {
        _5 = &(((*_3) as Some).0: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/filter.rs:86:18: 86:28
        _7 = <Vec<cita_types::Bloom> as IntoIterator>::into_iter(move _2) -> bb4; // scope 1 at cita-chain/types/src/filter.rs:86:33: 87:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:87:18: 87:27
                                         // + literal: Const { ty: fn(Vec<cita_types::Bloom>) -> <Vec<cita_types::Bloom> as IntoIterator>::IntoIter {<Vec<cita_types::Bloom> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/filter.rs:84:59: 84:65
    }

    bb3: {
        _0 = move _2;                    // scope 0 at cita-chain/types/src/filter.rs:85:21: 85:23
        goto -> bb6;                     // scope 0 at cita-chain/types/src/filter.rs:85:21: 85:23
    }

    bb4: {
        _9 = &_5;                        // scope 1 at cita-chain/types/src/filter.rs:88:27: 97:18
        _8 = [closure@cita-chain/types/src/filter.rs:88:27: 88:34] { topics: move _9 }; // scope 1 at cita-chain/types/src/filter.rs:88:27: 97:18
                                         // closure
                                         // + def_id: DefId(0:275 ~ common_types[6a4d]::filter::{impl#3}::zip_blooms::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((cita_types::Bloom,)) -> std::vec::Vec<cita_types::Bloom>,
                                         //     (&&std::vec::Vec<cita_types::H256>,),
                                         // ]
        _6 = <std::vec::IntoIter<cita_types::Bloom> as Iterator>::flat_map::<Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]>(move _7, move _8) -> bb5; // scope 1 at cita-chain/types/src/filter.rs:86:33: 97:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:88:18: 88:26
                                         // + literal: Const { ty: fn(std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]) -> FlatMap<std::vec::IntoIter<cita_types::Bloom>, Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]> {<std::vec::IntoIter<cita_types::Bloom> as Iterator>::flat_map::<Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = <FlatMap<std::vec::IntoIter<cita_types::Bloom>, Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]> as Iterator>::collect::<Vec<cita_types::Bloom>>(move _6) -> bb6; // scope 1 at cita-chain/types/src/filter.rs:86:33: 98:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:98:18: 98:25
                                         // + literal: Const { ty: fn(FlatMap<std::vec::IntoIter<cita_types::Bloom>, Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]>) -> Vec<cita_types::Bloom> {<FlatMap<std::vec::IntoIter<cita_types::Bloom>, Vec<cita_types::Bloom>, [closure@cita-chain/types/src/filter.rs:88:27: 88:34]> as Iterator>::collect::<Vec<cita_types::Bloom>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:99:10: 99:10
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::zip_blooms::{closure#0}::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:88:27: 88:34], _2: cita_types::Bloom) -> Vec<cita_types::Bloom> {
    debug bloom => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:88:28: 88:33
    debug topics => (*((*_1).0: &&std::vec::Vec<cita_types::H256>)); // in scope 0 at cita-chain/types/src/filter.rs:86:22: 86:28
    let mut _0: std::vec::Vec<cita_types::Bloom>; // return place in scope 0 at cita-chain/types/src/filter.rs:88:35: 88:35
    let mut _3: std::iter::Map<std::slice::Iter<'_, cita_types::H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]>; // in scope 0 at cita-chain/types/src/filter.rs:89:21: 95:27
    let mut _4: std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
    let mut _5: &[cita_types::H256];     // in scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
    let _6: &[cita_types::H256];         // in scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
    let mut _7: [closure@cita-chain/types/src/filter.rs:91:30: 91:37]; // in scope 0 at cita-chain/types/src/filter.rs:91:30: 95:26
    let mut _8: &cita_types::Bloom;      // in scope 0 at cita-chain/types/src/filter.rs:91:30: 95:26
    let mut _9: &&std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:88:27: 97:18
    let mut _10: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:88:27: 97:18

    bb0: {
        _9 = deref_copy ((*_1).0: &&std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
        _10 = deref_copy (*_9);          // scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
        _6 = <Vec<H256> as Deref>::deref(_10) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:89:21: 90:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
        _4 = core::slice::<impl [H256]>::iter(move _5) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:89:21: 90:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:90:26: 90:30
                                         // + literal: Const { ty: for<'a> fn(&'a [H256]) -> std::slice::Iter<'a, H256> {core::slice::<impl [H256]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_2;                        // scope 0 at cita-chain/types/src/filter.rs:91:30: 95:26
        _7 = [closure@cita-chain/types/src/filter.rs:91:30: 91:37] { bloom: move _8 }; // scope 0 at cita-chain/types/src/filter.rs:91:30: 95:26
                                         // closure
                                         // + def_id: DefId(0:276 ~ common_types[6a4d]::filter::{impl#3}::zip_blooms::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&cita_types::H256,)) -> cita_types::Bloom,
                                         //     (&cita_types::Bloom,),
                                         // ]
        _3 = <std::slice::Iter<'_, H256> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]>(move _4, move _7) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:89:21: 95:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:91:26: 91:29
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]) -> std::iter::Map<std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]> {<std::slice::Iter<'_, H256> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::iter::Map<std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]> as Iterator>::collect::<Vec<cita_types::Bloom>>(move _3) -> bb4; // scope 0 at cita-chain/types/src/filter.rs:89:21: 96:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:96:26: 96:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]>) -> Vec<cita_types::Bloom> {<std::iter::Map<std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:91:30: 91:37]> as Iterator>::collect::<Vec<cita_types::Bloom>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:97:18: 97:18
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::zip_blooms::{closure#0}::{closure#0}::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:91:30: 91:37], _2: &H256) -> cita_types::Bloom {
    debug topic => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:91:31: 91:36
    debug bloom => (*((*_1).0: &cita_types::Bloom)); // in scope 0 at cita-chain/types/src/filter.rs:88:28: 88:33
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/filter.rs:92:33: 92:42
    let _3: ();                          // in scope 0 at cita-chain/types/src/filter.rs:93:29: 93:52
    let mut _4: &mut cita_types::Bloom;  // in scope 0 at cita-chain/types/src/filter.rs:93:29: 93:52
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/filter.rs:93:46: 93:51
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/filter.rs:93:46: 93:51
    let mut _7: &cita_types::Bloom;      // in scope 0 at cita-chain/types/src/filter.rs:91:30: 95:26
    scope 1 {
        debug bloom => _0;               // in scope 1 at cita-chain/types/src/filter.rs:92:33: 92:42
    }

    bb0: {
        _7 = deref_copy ((*_1).0: &cita_types::Bloom); // scope 0 at cita-chain/types/src/filter.rs:92:45: 92:50
        _0 = (*_7);                      // scope 0 at cita-chain/types/src/filter.rs:92:45: 92:50
        _4 = &mut _0;                    // scope 1 at cita-chain/types/src/filter.rs:93:29: 93:52
        _6 = <H256 as Deref>::deref(_2) -> bb1; // scope 1 at cita-chain/types/src/filter.rs:93:46: 93:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:93:46: 93:51
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/filter.rs:93:46: 93:51
        _3 = <cita_types::Bloom as BloomTools>::accrue_raw(move _4, move _5) -> bb2; // scope 1 at cita-chain/types/src/filter.rs:93:29: 93:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:93:35: 93:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut cita_types::Bloom, &'b [u8]) {<cita_types::Bloom as BloomTools>::accrue_raw}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:95:26: 95:26
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::matches(_1: &TopicFilter, _2: &log::Log) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:102:20: 102:25
    debug log => _2;                     // in scope 0 at cita-chain/types/src/filter.rs:102:27: 102:30
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:102:41: 102:45
    let mut _3: &mut std::iter::Enumerate<std::slice::Iter<'_, std::option::Option<std::vec::Vec<cita_types::H256>>>>; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 111:15
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, std::option::Option<std::vec::Vec<cita_types::H256>>>>; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 105:25
    let mut _5: std::slice::Iter<'_, std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
    let mut _6: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
    let _7: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
    let mut _8: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
    let mut _9: [closure@cita-chain/types/src/filter.rs:106:18: 106:34]; // in scope 0 at cita-chain/types/src/filter.rs:106:18: 111:14
    let mut _10: &&log::Log;             // in scope 0 at cita-chain/types/src/filter.rs:106:18: 111:14

    bb0: {
        _8 = &((*_1).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
        _7 = <Vec<std::option::Option<Vec<H256>>> as Deref>::deref(move _8) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:103:9: 104:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<std::option::Option<Vec<H256>>>) -> &'a <Vec<std::option::Option<Vec<H256>>> as Deref>::Target {<Vec<std::option::Option<Vec<H256>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
        _5 = core::slice::<impl [std::option::Option<Vec<H256>>]>::iter(move _6) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:103:9: 104:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:104:14: 104:18
                                         // + literal: Const { ty: for<'a> fn(&'a [std::option::Option<Vec<H256>>]) -> std::slice::Iter<'a, std::option::Option<Vec<H256>>> {core::slice::<impl [std::option::Option<Vec<H256>>]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <std::slice::Iter<'_, std::option::Option<Vec<H256>>> as Iterator>::enumerate(move _5) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:103:9: 105:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:105:14: 105:23
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, std::option::Option<Vec<H256>>>) -> Enumerate<std::slice::Iter<'_, std::option::Option<Vec<H256>>>> {<std::slice::Iter<'_, std::option::Option<Vec<H256>>> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &mut _4;                    // scope 0 at cita-chain/types/src/filter.rs:103:9: 111:15
        _10 = &_2;                       // scope 0 at cita-chain/types/src/filter.rs:106:18: 111:14
        _9 = [closure@cita-chain/types/src/filter.rs:106:18: 106:34] { log: move _10 }; // scope 0 at cita-chain/types/src/filter.rs:106:18: 111:14
                                         // closure
                                         // + def_id: DefId(0:278 ~ common_types[6a4d]::filter::{impl#3}::matches::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((usize, &std::option::Option<std::vec::Vec<cita_types::H256>>),)) -> bool,
                                         //     (&&log::Log,),
                                         // ]
        _0 = <Enumerate<std::slice::Iter<'_, std::option::Option<Vec<H256>>>> as Iterator>::all::<[closure@cita-chain/types/src/filter.rs:106:18: 106:34]>(move _3, move _9) -> bb4; // scope 0 at cita-chain/types/src/filter.rs:103:9: 111:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:106:14: 106:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, std::option::Option<Vec<H256>>>>, [closure@cita-chain/types/src/filter.rs:106:18: 106:34]) -> bool {<Enumerate<std::slice::Iter<'_, std::option::Option<Vec<H256>>>> as Iterator>::all::<[closure@cita-chain/types/src/filter.rs:106:18: 106:34]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:112:6: 112:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::matches::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:106:18: 106:34], _2: (usize, &std::option::Option<Vec<H256>>)) -> bool {
    debug log => (*((*_1).0: &&log::Log)); // in scope 0 at cita-chain/types/src/filter.rs:102:27: 102:30
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:106:35: 106:35
    let _3: usize;                       // in scope 0 at cita-chain/types/src/filter.rs:106:20: 106:25
    let _4: &std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:106:27: 106:32
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:107:17: 107:33
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:107:37: 107:55
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:107:38: 107:55
    let mut _10: &mut std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:107:59: 109:71
    let mut _11: std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:107:59: 108:28
    let mut _12: &[cita_types::H256];    // in scope 0 at cita-chain/types/src/filter.rs:107:59: 108:28
    let _13: &[cita_types::H256];        // in scope 0 at cita-chain/types/src/filter.rs:107:59: 108:28
    let mut _14: [closure@cita-chain/types/src/filter.rs:109:26: 109:33]; // in scope 0 at cita-chain/types/src/filter.rs:109:26: 109:70
    let mut _15: &usize;                 // in scope 0 at cita-chain/types/src/filter.rs:109:26: 109:70
    let mut _16: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:107:22: 107:32
    let mut _17: &&log::Log;             // in scope 0 at cita-chain/types/src/filter.rs:106:18: 111:14
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/types/src/filter.rs:106:20: 106:25
        debug topic => _4;               // in scope 1 at cita-chain/types/src/filter.rs:106:27: 106:32
        let _6: &std::vec::Vec<cita_types::H256>; // in scope 1 at cita-chain/types/src/filter.rs:107:22: 107:32
        let _7: &&std::vec::Vec<cita_types::H256>; // in scope 1 at cita-chain/types/src/filter.rs:107:22: 107:32
        scope 2 {
            debug topics => _6;          // in scope 2 at cita-chain/types/src/filter.rs:107:22: 107:32
            debug topics => _7;          // in scope 2 at cita-chain/types/src/filter.rs:107:22: 107:32
        }
    }

    bb0: {
        _3 = (_2.0: usize);              // scope 0 at cita-chain/types/src/filter.rs:106:20: 106:25
        _4 = (_2.1: &std::option::Option<std::vec::Vec<cita_types::H256>>); // scope 0 at cita-chain/types/src/filter.rs:106:27: 106:32
        _5 = discriminant((*_4));        // scope 1 at cita-chain/types/src/filter.rs:106:41: 106:47
        switchInt(move _5) -> [1: bb2, otherwise: bb1]; // scope 1 at cita-chain/types/src/filter.rs:106:35: 106:47
    }

    bb1: {
        _0 = const true;                 // scope 1 at cita-chain/types/src/filter.rs:110:22: 110:26
        goto -> bb7;                     // scope 1 at cita-chain/types/src/filter.rs:110:22: 110:26
    }

    bb2: {
        _6 = &(((*_4) as Some).0: std::vec::Vec<cita_types::H256>); // scope 1 at cita-chain/types/src/filter.rs:107:22: 107:32
        _7 = &_6;                        // scope 1 at cita-chain/types/src/filter.rs:107:22: 107:32
        _16 = deref_copy (*_7);          // scope 1 at cita-chain/types/src/filter.rs:107:38: 107:55
        _9 = Vec::<H256>::is_empty(_16) -> bb3; // scope 1 at cita-chain/types/src/filter.rs:107:38: 107:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:107:45: 107:53
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> bool {Vec::<H256>::is_empty}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Not(move _9);               // scope 1 at cita-chain/types/src/filter.rs:107:37: 107:55
        switchInt(move _8) -> [0: bb1, otherwise: bb4]; // scope 1 at cita-chain/types/src/filter.rs:107:37: 107:55
    }

    bb4: {
        _13 = <Vec<H256> as Deref>::deref(_6) -> bb5; // scope 2 at cita-chain/types/src/filter.rs:107:59: 108:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:107:59: 108:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _13;                       // scope 2 at cita-chain/types/src/filter.rs:107:59: 108:28
        _11 = core::slice::<impl [H256]>::iter(move _12) -> bb6; // scope 2 at cita-chain/types/src/filter.rs:107:59: 108:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:108:22: 108:26
                                         // + literal: Const { ty: for<'a> fn(&'a [H256]) -> std::slice::Iter<'a, H256> {core::slice::<impl [H256]>::iter}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = &mut _11;                  // scope 2 at cita-chain/types/src/filter.rs:107:59: 109:71
        _17 = deref_copy ((*_1).0: &&log::Log); // scope 2 at cita-chain/types/src/filter.rs:109:26: 109:70
        _15 = &_3;                       // scope 2 at cita-chain/types/src/filter.rs:109:26: 109:70
        _14 = [closure@cita-chain/types/src/filter.rs:109:26: 109:33] { log: _17, index: move _15 }; // scope 2 at cita-chain/types/src/filter.rs:109:26: 109:70
                                         // closure
                                         // + def_id: DefId(0:279 ~ common_types[6a4d]::filter::{impl#3}::matches::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&cita_types::H256,)) -> bool,
                                         //     (&&log::Log, &usize),
                                         // ]
        _0 = <std::slice::Iter<'_, H256> as Iterator>::any::<[closure@cita-chain/types/src/filter.rs:109:26: 109:33]>(move _10, move _14) -> bb7; // scope 2 at cita-chain/types/src/filter.rs:107:59: 109:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:109:22: 109:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, H256>, [closure@cita-chain/types/src/filter.rs:109:26: 109:33]) -> bool {<std::slice::Iter<'_, H256> as Iterator>::any::<[closure@cita-chain/types/src/filter.rs:109:26: 109:33]>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:111:14: 111:14
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:78:1: 78:17>::matches::{closure#0}::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:109:26: 109:33], _2: &H256) -> bool {
    debug topic => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:109:27: 109:32
    debug log => (*((*_1).0: &&log::Log)); // in scope 0 at cita-chain/types/src/filter.rs:102:27: 102:30
    debug index => (*((*_1).1: &usize)); // in scope 0 at cita-chain/types/src/filter.rs:106:20: 106:25
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:34
    let mut _3: &std::option::Option<&cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
    let _4: std::option::Option<&cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
    let mut _5: &[cita_types::H256];     // in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
    let _6: &[cita_types::H256];         // in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
    let mut _7: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
    let mut _8: usize;                   // in scope 0 at cita-chain/types/src/filter.rs:109:49: 109:54
    let mut _9: &std::option::Option<&cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:109:59: 109:70
    let _10: std::option::Option<&cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:109:59: 109:70
    let mut _11: &&log::Log;             // in scope 0 at cita-chain/types/src/filter.rs:109:26: 109:70
    let mut _12: &log::Log;              // in scope 0 at cita-chain/types/src/filter.rs:109:26: 109:70
    let mut _13: &usize;                 // in scope 0 at cita-chain/types/src/filter.rs:109:26: 109:70

    bb0: {
        _11 = deref_copy ((*_1).0: &&log::Log); // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
        _12 = deref_copy (*_11);         // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
        _7 = &((*_12).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
        _6 = <Vec<H256> as Deref>::deref(move _7) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:109:34: 109:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
        _13 = deref_copy ((*_1).1: &usize); // scope 0 at cita-chain/types/src/filter.rs:109:49: 109:54
        _8 = (*_13);                     // scope 0 at cita-chain/types/src/filter.rs:109:49: 109:54
        _4 = core::slice::<impl [H256]>::get::<usize>(move _5, move _8) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:109:45: 109:48
                                         // + literal: Const { ty: for<'a> fn(&'a [H256], usize) -> std::option::Option<&'a <usize as SliceIndex<[H256]>>::Output> {core::slice::<impl [H256]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:55
        _10 = std::option::Option::<&H256>::Some(_2); // scope 0 at cita-chain/types/src/filter.rs:109:59: 109:70
        _9 = &_10;                       // scope 0 at cita-chain/types/src/filter.rs:109:59: 109:70
        _0 = <std::option::Option<&H256> as PartialEq>::eq(move _3, move _9) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:109:34: 109:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:109:34: 109:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::option::Option<&H256>, &'b std::option::Option<&H256>) -> bool {<std::option::Option<&H256> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:109:70: 109:70
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:115:1: 115:46>::from(_1: std::option::Option<Vec<VariadicValue<Data32>>>) -> TopicFilter {
    debug topics => _1;                  // in scope 0 at cita-chain/types/src/filter.rs:116:13: 116:19
    let mut _0: filter::TopicFilter;     // return place in scope 0 at cita-chain/types/src/filter.rs:116:44: 116:55
    let mut _2: std::vec::IntoIter<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:117:13: 117:21
    let mut _3: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:117:24: 128:15
    let mut _5: std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _6: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _7: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _9: std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _10: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:132:13: 132:40
    let mut _11: std::option::Option<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:132:13: 132:24
    let mut _12: &mut std::vec::IntoIter<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:132:13: 132:24
    let mut _13: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:132:35: 132:39
    let mut _14: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:133:13: 133:40
    let mut _15: std::option::Option<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:133:13: 133:24
    let mut _16: &mut std::vec::IntoIter<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:133:13: 133:24
    let mut _17: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:133:35: 133:39
    let mut _18: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:134:13: 134:40
    let mut _19: std::option::Option<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:134:13: 134:24
    let mut _20: &mut std::vec::IntoIter<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:134:13: 134:24
    let mut _21: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:134:35: 134:39
    let mut _22: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:135:13: 135:40
    let mut _23: std::option::Option<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:135:13: 135:24
    let mut _24: &mut std::vec::IntoIter<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:135:13: 135:24
    let mut _25: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:135:35: 135:39
    let mut _26: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:138:23: 138:29
    let mut _27: ();                     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
    let mut _28: *const [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug iter => _2;                // in scope 1 at cita-chain/types/src/filter.rs:117:13: 117:21
        let _4: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 1 at cita-chain/types/src/filter.rs:131:13: 131:19
        scope 2 {
            debug topics => _4;          // in scope 2 at cita-chain/types/src/filter.rs:131:13: 131:19
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = std::option::Option::<Vec<VariadicValue<Data32>>>::map_or_else::<Vec<std::option::Option<Vec<H256>>>, fn() -> Vec<std::option::Option<Vec<H256>>> {Vec::<std::option::Option<Vec<H256>>>::new}, [closure@cita-chain/types/src/filter.rs:118:36: 118:44]>(move _1, Vec::<std::option::Option<Vec<H256>>>::new, const ZeroSized: [closure@cita-chain/types/src/filter.rs:118:36: 118:44]) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:117:24: 128:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:118:14: 118:25
                                         // + literal: Const { ty: fn(std::option::Option<Vec<VariadicValue<Data32>>>, fn() -> Vec<std::option::Option<Vec<H256>>> {Vec::<std::option::Option<Vec<H256>>>::new}, [closure@cita-chain/types/src/filter.rs:118:36: 118:44]) -> Vec<std::option::Option<Vec<H256>>> {std::option::Option::<Vec<VariadicValue<Data32>>>::map_or_else::<Vec<std::option::Option<Vec<H256>>>, fn() -> Vec<std::option::Option<Vec<H256>>> {Vec::<std::option::Option<Vec<H256>>>::new}, [closure@cita-chain/types/src/filter.rs:118:36: 118:44]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:118:26: 118:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<std::option::Option<Vec<H256>>> {Vec::<std::option::Option<Vec<H256>>>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/filter.rs:118:36: 118:44], val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Vec<std::option::Option<Vec<H256>>> as IntoIterator>::into_iter(move _3) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:117:24: 129:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:129:14: 129:23
                                         // + literal: Const { ty: fn(Vec<std::option::Option<Vec<H256>>>) -> <Vec<std::option::Option<Vec<H256>>> as IntoIterator>::IntoIter {<Vec<std::option::Option<Vec<H256>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const 96_usize;             // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _7 = const 8_usize;              // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> [return: bb3, unwind: bb17]; // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = ShallowInitBox(move _8, [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _12 = &mut _2;                   // scope 1 at cita-chain/types/src/filter.rs:132:13: 132:24
        _11 = <std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next(move _12) -> [return: bb4, unwind: bb19]; // scope 1 at cita-chain/types/src/filter.rs:132:13: 132:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:132:18: 132:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<std::option::Option<Vec<H256>>>) -> std::option::Option<<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::Item> {<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = std::option::Option::<Vec<H256>>::None; // scope 1 at cita-chain/types/src/filter.rs:132:35: 132:39
        _10 = std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or(move _11, move _13) -> [return: bb5, unwind: bb19]; // scope 1 at cita-chain/types/src/filter.rs:132:13: 132:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:132:25: 132:34
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<Vec<H256>>>, std::option::Option<Vec<H256>>) -> std::option::Option<Vec<H256>> {std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = &mut _2;                   // scope 1 at cita-chain/types/src/filter.rs:133:13: 133:24
        _15 = <std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next(move _16) -> [return: bb6, unwind: bb16]; // scope 1 at cita-chain/types/src/filter.rs:133:13: 133:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:133:18: 133:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<std::option::Option<Vec<H256>>>) -> std::option::Option<<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::Item> {<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = std::option::Option::<Vec<H256>>::None; // scope 1 at cita-chain/types/src/filter.rs:133:35: 133:39
        _14 = std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or(move _15, move _17) -> [return: bb7, unwind: bb16]; // scope 1 at cita-chain/types/src/filter.rs:133:13: 133:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:133:25: 133:34
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<Vec<H256>>>, std::option::Option<Vec<H256>>) -> std::option::Option<Vec<H256>> {std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = &mut _2;                   // scope 1 at cita-chain/types/src/filter.rs:134:13: 134:24
        _19 = <std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next(move _20) -> [return: bb8, unwind: bb15]; // scope 1 at cita-chain/types/src/filter.rs:134:13: 134:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:134:18: 134:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<std::option::Option<Vec<H256>>>) -> std::option::Option<<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::Item> {<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = std::option::Option::<Vec<H256>>::None; // scope 1 at cita-chain/types/src/filter.rs:134:35: 134:39
        _18 = std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or(move _19, move _21) -> [return: bb9, unwind: bb15]; // scope 1 at cita-chain/types/src/filter.rs:134:13: 134:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:134:25: 134:34
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<Vec<H256>>>, std::option::Option<Vec<H256>>) -> std::option::Option<Vec<H256>> {std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = &mut _2;                   // scope 1 at cita-chain/types/src/filter.rs:135:13: 135:24
        _23 = <std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next(move _24) -> [return: bb10, unwind: bb14]; // scope 1 at cita-chain/types/src/filter.rs:135:13: 135:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:135:18: 135:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<std::option::Option<Vec<H256>>>) -> std::option::Option<<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::Item> {<std::vec::IntoIter<std::option::Option<Vec<H256>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _25 = std::option::Option::<Vec<H256>>::None; // scope 1 at cita-chain/types/src/filter.rs:135:35: 135:39
        _22 = std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or(move _23, move _25) -> [return: bb11, unwind: bb14]; // scope 1 at cita-chain/types/src/filter.rs:135:13: 135:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:135:25: 135:34
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<Vec<H256>>>, std::option::Option<Vec<H256>>) -> std::option::Option<Vec<H256>> {std::option::Option::<std::option::Option<Vec<H256>>>::unwrap_or}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = (((_9.0: std::ptr::Unique<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>).0: std::ptr::NonNull<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>).0: *const [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_28) = [move _10, move _14, move _18, move _22]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _5 = move _9 as std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>]> (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _4 = slice::<impl [std::option::Option<Vec<H256>>]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb12, unwind: bb17]; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[std::option::Option<Vec<H256>>]>) -> Vec<std::option::Option<Vec<H256>>> {slice::<impl [std::option::Option<Vec<H256>>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = move _4;                   // scope 2 at cita-chain/types/src/filter.rs:138:23: 138:29
        _0 = TopicFilter { topics: move _26 }; // scope 2 at cita-chain/types/src/filter.rs:138:9: 138:31
        drop(_2) -> bb13;                // scope 0 at cita-chain/types/src/filter.rs:139:5: 139:6
    }

    bb13: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:139:6: 139:6
    }

    bb14 (cleanup): {
        drop(_18) -> bb15;               // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:45: 54:46
    }

    bb15 (cleanup): {
        drop(_14) -> bb16;               // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:45: 54:46
    }

    bb16 (cleanup): {
        drop(_10) -> bb19;               // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:45: 54:46
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at cita-chain/types/src/filter.rs:139:5: 139:6
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:116:5: 139:6
    }

    bb19 (cleanup): {
        _27 = alloc::alloc::box_free::<[std::option::Option<Vec<H256>>; 4], std::alloc::Global>(move (_9.0: std::ptr::Unique<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>), const std::alloc::Global) -> bb17; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // + literal: Const { ty: unsafe fn(Unique<[std::option::Option<Vec<H256>>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[std::option::Option<Vec<H256>>; 4], std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:115:1: 115:46>::from::{closure#0}(_1: [closure@cita-chain/types/src/filter.rs:118:36: 118:44], _2: Vec<VariadicValue<Data32>>) -> Vec<std::option::Option<Vec<H256>>> {
    debug topics => _2;                  // in scope 0 at cita-chain/types/src/filter.rs:118:37: 118:43
    let mut _0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // return place in scope 0 at cita-chain/types/src/filter.rs:118:45: 118:45
    let mut _3: std::iter::Map<std::iter::Take<std::vec::IntoIter<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]>; // in scope 0 at cita-chain/types/src/filter.rs:119:17: 126:23
    let mut _4: std::iter::Take<std::vec::IntoIter<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>>; // in scope 0 at cita-chain/types/src/filter.rs:119:17: 121:29
    let mut _5: std::vec::IntoIter<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>; // in scope 0 at cita-chain/types/src/filter.rs:119:17: 120:33

    bb0: {
        _5 = <Vec<VariadicValue<Data32>> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:119:17: 120:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:120:22: 120:31
                                         // + literal: Const { ty: fn(Vec<VariadicValue<Data32>>) -> <Vec<VariadicValue<Data32>> as IntoIterator>::IntoIter {<Vec<VariadicValue<Data32>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::vec::IntoIter<VariadicValue<Data32>> as Iterator>::take(move _5, const 4_usize) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:119:17: 121:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:121:22: 121:26
                                         // + literal: Const { ty: fn(std::vec::IntoIter<VariadicValue<Data32>>, usize) -> std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>> {<std::vec::IntoIter<VariadicValue<Data32>> as Iterator>::take}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>> as Iterator>::map::<std::option::Option<Vec<H256>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]>(move _4, const ZeroSized: [closure@cita-chain/types/src/filter.rs:122:26: 122:33]) -> bb3; // scope 0 at cita-chain/types/src/filter.rs:119:17: 126:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:122:22: 122:25
                                         // + literal: Const { ty: fn(std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]) -> std::iter::Map<std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]> {<std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>> as Iterator>::map::<std::option::Option<Vec<H256>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/filter.rs:122:26: 122:33], val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::iter::Map<std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]> as Iterator>::collect::<Vec<std::option::Option<Vec<H256>>>>(move _3) -> bb4; // scope 0 at cita-chain/types/src/filter.rs:119:17: 127:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:127:22: 127:29
                                         // + literal: Const { ty: fn(std::iter::Map<std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]>) -> Vec<std::option::Option<Vec<H256>>> {<std::iter::Map<std::iter::Take<std::vec::IntoIter<VariadicValue<Data32>>>, [closure@cita-chain/types/src/filter.rs:122:26: 122:33]> as Iterator>::collect::<Vec<std::option::Option<Vec<H256>>>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:128:14: 128:14
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:115:1: 115:46>::from::{closure#0}::{closure#0}(_1: &mut [closure@cita-chain/types/src/filter.rs:122:26: 122:33], _2: VariadicValue<Data32>) -> std::option::Option<Vec<H256>> {
    debug topic => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:122:27: 122:32
    let mut _0: std::option::Option<std::vec::Vec<cita_types::H256>>; // return place in scope 0 at cita-chain/types/src/filter.rs:122:34: 122:34
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/filter.rs:123:25: 123:44
    let _4: jsonrpc_types::rpc_types::Data32; // in scope 0 at cita-chain/types/src/filter.rs:124:47: 124:48
    let mut _5: std::vec::Vec<cita_types::H256>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
    let mut _6: std::boxed::Box<[cita_types::H256]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _7: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _8: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _10: std::boxed::Box<[cita_types::H256; 1]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _11: cita_types::H256;       // in scope 0 at cita-chain/types/src/filter.rs:124:63: 124:71
    let _12: std::vec::Vec<jsonrpc_types::rpc_types::Data32>; // in scope 0 at cita-chain/types/src/filter.rs:125:49: 125:50
    let mut _13: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/filter.rs:125:60: 125:99
    let mut _14: std::iter::Map<std::vec::IntoIter<jsonrpc_types::rpc_types::Data32>, fn(jsonrpc_types::rpc_types::Data32) -> cita_types::H256 {<jsonrpc_types::rpc_types::Data32 as std::convert::Into<cita_types::H256>>::into}>; // in scope 0 at cita-chain/types/src/filter.rs:125:60: 125:89
    let mut _15: std::vec::IntoIter<jsonrpc_types::rpc_types::Data32>; // in scope 0 at cita-chain/types/src/filter.rs:125:60: 125:73
    let mut _16: ();                     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
    let mut _17: *const [cita_types::H256; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug t => _4;                   // in scope 1 at cita-chain/types/src/filter.rs:124:47: 124:48
        scope 2 {
        }
    }
    scope 3 {
        debug t => _12;                  // in scope 3 at cita-chain/types/src/filter.rs:125:49: 125:50
    }

    bb0: {
        _3 = discriminant(_2);           // scope 0 at cita-chain/types/src/filter.rs:122:40: 122:45
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/filter.rs:122:34: 122:45
    }

    bb1: {
        _12 = move ((_2 as Multiple).0: std::vec::Vec<jsonrpc_types::rpc_types::Data32>); // scope 0 at cita-chain/types/src/filter.rs:125:49: 125:50
        _15 = <Vec<Data32> as IntoIterator>::into_iter(move _12) -> bb8; // scope 3 at cita-chain/types/src/filter.rs:125:60: 125:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:125:62: 125:71
                                         // + literal: Const { ty: fn(Vec<Data32>) -> <Vec<Data32> as IntoIterator>::IntoIter {<Vec<Data32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/filter.rs:122:40: 122:45
    }

    bb3: {
        _0 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:123:48: 123:52
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:123:48: 123:52
    }

    bb4: {
        _4 = move ((_2 as Single).0: jsonrpc_types::rpc_types::Data32); // scope 0 at cita-chain/types/src/filter.rs:124:47: 124:48
        _7 = const 32_usize;             // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _8 = const 1_usize;              // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb5; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = ShallowInitBox(move _9, [cita_types::H256; 1]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _11 = <Data32 as Into<H256>>::into(move _4) -> [return: bb6, unwind: bb12]; // scope 1 at cita-chain/types/src/filter.rs:124:63: 124:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:124:65: 124:69
                                         // + literal: Const { ty: fn(Data32) -> H256 {<Data32 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = (((_10.0: std::ptr::Unique<[cita_types::H256; 1]>).0: std::ptr::NonNull<[cita_types::H256; 1]>).0: *const [cita_types::H256; 1]); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_17) = [move _11];             // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _6 = move _10 as std::boxed::Box<[cita_types::H256]> (Pointer(Unsize)); // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _5 = slice::<impl [H256]>::into_vec::<std::alloc::Global>(move _6) -> bb7; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[H256]>) -> Vec<H256> {slice::<impl [H256]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = std::option::Option::<Vec<H256>>::Some(move _5); // scope 1 at cita-chain/types/src/filter.rs:124:53: 124:73
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:124:72: 124:73
    }

    bb8: {
        _14 = <std::vec::IntoIter<Data32> as Iterator>::map::<H256, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}>(move _15, <Data32 as Into<H256>>::into) -> bb9; // scope 3 at cita-chain/types/src/filter.rs:125:60: 125:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:125:74: 125:77
                                         // + literal: Const { ty: fn(std::vec::IntoIter<Data32>, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}) -> std::iter::Map<std::vec::IntoIter<Data32>, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}> {<std::vec::IntoIter<Data32> as Iterator>::map::<H256, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:125:78: 125:88
                                         // + literal: Const { ty: fn(Data32) -> H256 {<Data32 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = <std::iter::Map<std::vec::IntoIter<Data32>, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>(move _14) -> bb10; // scope 3 at cita-chain/types/src/filter.rs:125:60: 125:99
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:125:90: 125:97
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<Data32>, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}>) -> Vec<H256> {<std::iter::Map<std::vec::IntoIter<Data32>, fn(Data32) -> H256 {<Data32 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = std::option::Option::<Vec<H256>>::Some(move _13); // scope 3 at cita-chain/types/src/filter.rs:125:55: 125:100
        goto -> bb11;                    // scope 0 at cita-chain/types/src/filter.rs:125:99: 125:100
    }

    bb11: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:126:22: 126:22
    }

    bb12 (cleanup): {
        _16 = alloc::alloc::box_free::<[H256; 1], std::alloc::Global>(move (_10.0: std::ptr::Unique<[cita_types::H256; 1]>), const std::alloc::Global) -> bb13; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // + literal: Const { ty: unsafe fn(Unique<[H256; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[H256; 1], std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:122:26: 126:22
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:142:1: 142:27>::clone(_1: &TopicFilter) -> TopicFilter {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:143:14: 143:19
    let mut _0: filter::TopicFilter;     // return place in scope 0 at cita-chain/types/src/filter.rs:143:24: 143:28
    let mut _2: [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]; // in scope 0 at cita-chain/types/src/filter.rs:144:13: 144:23
    let mut _3: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:144:27: 144:31
    let mut _4: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:144:33: 144:37
    let mut _5: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:144:39: 144:43
    let mut _6: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:144:45: 144:49
    let _7: ();                          // in scope 0 at cita-chain/types/src/filter.rs:145:9: 145:56
    let mut _8: &mut [std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:145:9: 145:56
    let mut _9: &mut [std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:145:9: 145:20
    let mut _10: &mut [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]; // in scope 0 at cita-chain/types/src/filter.rs:145:9: 145:15
    let mut _11: std::ops::RangeTo<usize>; // in scope 0 at cita-chain/types/src/filter.rs:145:16: 145:19
    let _12: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:145:38: 145:55
    let _13: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:145:39: 145:55
    let mut _14: &std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:145:39: 145:50
    let mut _15: std::ops::RangeTo<usize>; // in scope 0 at cita-chain/types/src/filter.rs:145:51: 145:54
    let mut _16: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:148:21: 148:36
    let mut _17: &[std::option::Option<std::vec::Vec<cita_types::H256>>]; // in scope 0 at cita-chain/types/src/filter.rs:148:21: 148:36
    let mut _18: &[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]; // in scope 0 at cita-chain/types/src/filter.rs:148:21: 148:36
    scope 1 {
        debug topics => _2;              // in scope 1 at cita-chain/types/src/filter.rs:144:13: 144:23
    }

    bb0: {
        _3 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:144:27: 144:31
        _4 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:144:33: 144:37
        _5 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:144:39: 144:43
        _6 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:144:45: 144:49
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at cita-chain/types/src/filter.rs:144:26: 144:50
        _10 = &mut _2;                   // scope 1 at cita-chain/types/src/filter.rs:145:9: 145:15
        _11 = const RangeTo::<usize> {{ end: 4_usize }}; // scope 1 at cita-chain/types/src/filter.rs:145:16: 145:19
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000004)) }
        _9 = <[std::option::Option<Vec<H256>>; 4] as IndexMut<RangeTo<usize>>>::index_mut(move _10, move _11) -> [return: bb1, unwind: bb6]; // scope 1 at cita-chain/types/src/filter.rs:145:9: 145:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:145:9: 145:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut [std::option::Option<Vec<H256>>; 4], RangeTo<usize>) -> &'a mut <[std::option::Option<Vec<H256>>; 4] as Index<RangeTo<usize>>>::Output {<[std::option::Option<Vec<H256>>; 4] as IndexMut<RangeTo<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 1 at cita-chain/types/src/filter.rs:145:9: 145:56
        _14 = &((*_1).0: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>); // scope 1 at cita-chain/types/src/filter.rs:145:39: 145:50
        _15 = const RangeTo::<usize> {{ end: 4_usize }}; // scope 1 at cita-chain/types/src/filter.rs:145:51: 145:54
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000004)) }
        _13 = <Vec<std::option::Option<Vec<H256>>> as Index<RangeTo<usize>>>::index(move _14, move _15) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/types/src/filter.rs:145:39: 145:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:145:39: 145:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<std::option::Option<Vec<H256>>>, RangeTo<usize>) -> &'a <Vec<std::option::Option<Vec<H256>>> as Index<RangeTo<usize>>>::Output {<Vec<std::option::Option<Vec<H256>>> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = _13;                       // scope 1 at cita-chain/types/src/filter.rs:145:38: 145:55
        _7 = core::slice::<impl [std::option::Option<Vec<H256>>]>::clone_from_slice(move _8, _12) -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/types/src/filter.rs:145:9: 145:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:145:21: 145:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut [std::option::Option<Vec<H256>>], &'b [std::option::Option<Vec<H256>>]) {core::slice::<impl [std::option::Option<Vec<H256>>]>::clone_from_slice}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = &_2;                       // scope 1 at cita-chain/types/src/filter.rs:148:21: 148:36
        _17 = move _18 as &[std::option::Option<std::vec::Vec<cita_types::H256>>] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/filter.rs:148:21: 148:36
        _16 = slice::<impl [std::option::Option<Vec<H256>>]>::to_vec(move _17) -> [return: bb4, unwind: bb6]; // scope 1 at cita-chain/types/src/filter.rs:148:21: 148:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:148:28: 148:34
                                         // + literal: Const { ty: for<'a> fn(&'a [std::option::Option<Vec<H256>>]) -> Vec<std::option::Option<Vec<H256>>> {slice::<impl [std::option::Option<Vec<H256>>]>::to_vec}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = TopicFilter { topics: move _16 }; // scope 1 at cita-chain/types/src/filter.rs:147:9: 149:10
        drop(_2) -> bb5;                 // scope 0 at cita-chain/types/src/filter.rs:150:5: 150:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:150:6: 150:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at cita-chain/types/src/filter.rs:150:5: 150:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:143:5: 150:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:153:1: 153:29>::default() -> TopicFilter {
    let mut _0: filter::TopicFilter;     // return place in scope 0 at cita-chain/types/src/filter.rs:154:21: 154:25
    let _1: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:155:13: 155:19
    let mut _2: std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _3: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _4: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _5: *mut u8;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _6: std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _7: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:155:27: 155:31
    let mut _8: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:155:33: 155:37
    let mut _9: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:155:39: 155:43
    let mut _10: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/filter.rs:155:45: 155:49
    let mut _11: std::vec::Vec<std::option::Option<std::vec::Vec<cita_types::H256>>>; // in scope 0 at cita-chain/types/src/filter.rs:157:23: 157:29
    let mut _12: *const [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug topics => _1;              // in scope 1 at cita-chain/types/src/filter.rs:155:13: 155:19
    }
    scope 2 {
    }

    bb0: {
        _3 = const 96_usize;             // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _4 = const 8_usize;              // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1; // scope 2 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _7 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:155:27: 155:31
        _8 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:155:33: 155:37
        _9 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:155:39: 155:43
        _10 = std::option::Option::<Vec<H256>>::None; // scope 0 at cita-chain/types/src/filter.rs:155:45: 155:49
        _12 = (((_6.0: std::ptr::Unique<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>).0: std::ptr::NonNull<[std::option::Option<std::vec::Vec<cita_types::H256>>; 4]>).0: *const [std::option::Option<std::vec::Vec<cita_types::H256>>; 4]); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_12) = [move _7, move _8, move _9, move _10]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _2 = move _6 as std::boxed::Box<[std::option::Option<std::vec::Vec<cita_types::H256>>]> (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _1 = slice::<impl [std::option::Option<Vec<H256>>]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[std::option::Option<Vec<H256>>]>) -> Vec<std::option::Option<Vec<H256>>> {slice::<impl [std::option::Option<Vec<H256>>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = move _1;                   // scope 1 at cita-chain/types/src/filter.rs:157:23: 157:29
        _0 = TopicFilter { topics: move _11 }; // scope 1 at cita-chain/types/src/filter.rs:157:9: 157:31
        return;                          // scope 0 at cita-chain/types/src/filter.rs:158:6: 158:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:162:10: 162:15>::fmt(_1: &filter::Filter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let _6: &block_number::BlockTag;     // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let _7: &str;                        // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let _9: &block_number::BlockTag;     // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let _10: &str;                       // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let _12: &filter::AddressFilter;     // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let _13: &str;                       // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let _15: &filter::TopicFilter;       // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let _16: &str;                       // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    let _18: &&std::option::Option<usize>; // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    let _19: &std::option::Option<usize>; // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29

    bb0: {
        _3 = const "Filter";             // scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:162:10: 162:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "from_block";         // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:164:5: 164:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
        _7 = const "to_block";           // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:165:5: 165:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        _10 = const "addresses";         // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:166:5: 166:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: filter::AddressFilter); // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        _13 = const "topics";            // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:167:5: 167:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = &((*_1).3: filter::TopicFilter); // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        _16 = const "limit";             // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:168:5: 168:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = &((*_1).4: std::option::Option<usize>); // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        _18 = &_19;                      // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        _17 = _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        _0 = Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:162:10: 162:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:162:10: 162:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j), &'k str, &'l (dyn Debug + 'l)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field5_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:162:15: 162:15
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:162:17: 162:26>::eq(_1: &filter::Filter, _2: &filter::Filter) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:162:17: 162:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/filter.rs:162:17: 162:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:162:17: 162:26
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let mut _7: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let mut _8: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let mut _10: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let mut _11: &block_number::BlockTag; // in scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let mut _13: &filter::AddressFilter; // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let mut _14: &filter::AddressFilter; // in scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    let mut _15: bool;                   // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let mut _16: &filter::TopicFilter;   // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let mut _17: &filter::TopicFilter;   // in scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    let mut _18: bool;                   // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    let mut _19: &std::option::Option<usize>; // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    let mut _20: &std::option::Option<usize>; // in scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29

    bb0: {
        _7 = &((*_1).0: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
        _8 = &((*_2).0: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
        _6 = <block_number::BlockTag as PartialEq>::eq(move _7, move _8) -> bb13; // scope 0 at cita-chain/types/src/filter.rs:164:5: 164:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:164:5: 164:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a block_number::BlockTag, &'b block_number::BlockTag) -> bool {<block_number::BlockTag as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        goto -> bb3;                     // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    }

    bb2: {
        _19 = &((*_1).4: std::option::Option<usize>); // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        _20 = &((*_2).4: std::option::Option<usize>); // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        _18 = <std::option::Option<usize> as PartialEq>::eq(move _19, move _20) -> bb17; // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:168:5: 168:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::option::Option<usize>, &'b std::option::Option<usize>) -> bool {<std::option::Option<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:162:26: 162:26
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    }

    bb5: {
        _16 = &((*_1).3: filter::TopicFilter); // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        _17 = &((*_2).3: filter::TopicFilter); // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        _15 = <TopicFilter as PartialEq>::eq(move _16, move _17) -> bb16; // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:167:5: 167:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TopicFilter, &'b TopicFilter) -> bool {<TopicFilter as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    }

    bb8: {
        _13 = &((*_1).2: filter::AddressFilter); // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        _14 = &((*_2).2: filter::AddressFilter); // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        _12 = <AddressFilter as PartialEq>::eq(move _13, move _14) -> bb15; // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:166:5: 166:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a AddressFilter, &'b AddressFilter) -> bool {<AddressFilter as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        goto -> bb12;                    // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    }

    bb11: {
        _10 = &((*_1).1: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        _11 = &((*_2).1: block_number::BlockTag); // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        _9 = <block_number::BlockTag as PartialEq>::eq(move _10, move _11) -> bb14; // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:165:5: 165:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a block_number::BlockTag, &'b block_number::BlockTag) -> bool {<block_number::BlockTag as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    }

    bb13: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    }

    bb14: {
        _5 = move _9;                    // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
        goto -> bb12;                    // scope 0 at cita-chain/types/src/filter.rs:165:5: 165:27
    }

    bb15: {
        _4 = move _12;                   // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/filter.rs:166:5: 166:33
    }

    bb16: {
        _3 = move _15;                   // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/filter.rs:167:5: 167:28
    }

    bb17: {
        _0 = move _18;                   // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
        goto -> bb3;                     // scope 0 at cita-chain/types/src/filter.rs:168:5: 168:29
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:171:1: 171:12>::zip_blooms(_1: &filter::Filter) -> Vec<cita_types::Bloom> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:173:23: 173:28
    let mut _0: std::vec::Vec<cita_types::Bloom>; // return place in scope 0 at cita-chain/types/src/filter.rs:173:33: 173:43
    let mut _2: &filter::TopicFilter;    // in scope 0 at cita-chain/types/src/filter.rs:174:9: 174:56
    let mut _3: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/filter.rs:174:32: 174:55
    let mut _4: &filter::AddressFilter;  // in scope 0 at cita-chain/types/src/filter.rs:174:32: 174:55

    bb0: {
        _2 = &((*_1).3: filter::TopicFilter); // scope 0 at cita-chain/types/src/filter.rs:174:9: 174:56
        _4 = &((*_1).2: filter::AddressFilter); // scope 0 at cita-chain/types/src/filter.rs:174:32: 174:55
        _3 = AddressFilter::blooms(move _4) -> bb1; // scope 0 at cita-chain/types/src/filter.rs:174:32: 174:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:174:47: 174:53
                                         // + literal: Const { ty: for<'a> fn(&'a AddressFilter) -> Vec<cita_types::Bloom> {AddressFilter::blooms}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = TopicFilter::zip_blooms(move _2, move _3) -> bb2; // scope 0 at cita-chain/types/src/filter.rs:174:9: 174:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:174:21: 174:31
                                         // + literal: Const { ty: for<'a> fn(&'a TopicFilter, Vec<cita_types::Bloom>) -> Vec<cita_types::Bloom> {TopicFilter::zip_blooms}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:175:6: 175:6
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:171:1: 171:12>::matches(_1: &filter::Filter, _2: &log::Log) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/filter.rs:178:20: 178:25
    debug log => _2;                     // in scope 0 at cita-chain/types/src/filter.rs:178:27: 178:30
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/filter.rs:178:41: 178:45
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:179:9: 179:36
    let mut _4: &filter::AddressFilter;  // in scope 0 at cita-chain/types/src/filter.rs:179:9: 179:36
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/filter.rs:179:40: 179:64
    let mut _6: &filter::TopicFilter;    // in scope 0 at cita-chain/types/src/filter.rs:179:40: 179:64

    bb0: {
        _4 = &((*_1).2: filter::AddressFilter); // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:36
        _3 = AddressFilter::matches(move _4, _2) -> bb4; // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:179:24: 179:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a AddressFilter, &'b log::Log) -> bool {AddressFilter::matches}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:64
        goto -> bb3;                     // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:64
    }

    bb2: {
        _6 = &((*_1).3: filter::TopicFilter); // scope 0 at cita-chain/types/src/filter.rs:179:40: 179:64
        _5 = TopicFilter::matches(move _6, _2) -> bb5; // scope 0 at cita-chain/types/src/filter.rs:179:40: 179:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:179:52: 179:59
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TopicFilter, &'b log::Log) -> bool {TopicFilter::matches}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/filter.rs:180:6: 180:6
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:64
    }

    bb5: {
        _0 = move _5;                    // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:64
        goto -> bb3;                     // scope 0 at cita-chain/types/src/filter.rs:179:9: 179:64
    }
}

fn filter::<impl at cita-chain/types/src/filter.rs:195:1: 195:32>::from(_1: jsonrpc_types::rpc_types::Filter) -> filter::Filter {
    debug v => _1;                       // in scope 0 at cita-chain/types/src/filter.rs:196:13: 196:14
    let mut _0: filter::Filter;          // return place in scope 0 at cita-chain/types/src/filter.rs:196:30: 196:36
    let mut _2: block_number::BlockTag;  // in scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
    let mut _3: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-chain/types/src/filter.rs:198:25: 198:37
    let mut _4: block_number::BlockTag;  // in scope 0 at cita-chain/types/src/filter.rs:199:23: 199:40
    let mut _5: jsonrpc_types::rpc_types::BlockNumber; // in scope 0 at cita-chain/types/src/filter.rs:199:23: 199:33
    let mut _6: filter::AddressFilter;   // in scope 0 at cita-chain/types/src/filter.rs:200:24: 200:40
    let mut _7: std::option::Option<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data20>>; // in scope 0 at cita-chain/types/src/filter.rs:200:24: 200:33
    let mut _8: filter::TopicFilter;     // in scope 0 at cita-chain/types/src/filter.rs:201:21: 201:36
    let mut _9: std::option::Option<std::vec::Vec<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>>; // in scope 0 at cita-chain/types/src/filter.rs:201:21: 201:29
    let mut _10: std::option::Option<usize>; // in scope 0 at cita-chain/types/src/filter.rs:202:20: 202:27
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6

    bb0: {
        _12 = const false;               // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
        _11 = const false;               // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
        _11 = const true;                // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
        _12 = const true;                // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
        _3 = move (_1.0: jsonrpc_types::rpc_types::BlockNumber); // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:37
        _2 = <jsonrpc_types::rpc_types::BlockNumber as Into<block_number::BlockTag>>::into(move _3) -> [return: bb1, unwind: bb10]; // scope 0 at cita-chain/types/src/filter.rs:198:25: 198:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:198:38: 198:42
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move (_1.1: jsonrpc_types::rpc_types::BlockNumber); // scope 0 at cita-chain/types/src/filter.rs:199:23: 199:33
        _4 = <jsonrpc_types::rpc_types::BlockNumber as Into<block_number::BlockTag>>::into(move _5) -> [return: bb2, unwind: bb10]; // scope 0 at cita-chain/types/src/filter.rs:199:23: 199:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:199:34: 199:38
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::BlockNumber) -> block_number::BlockTag {<jsonrpc_types::rpc_types::BlockNumber as Into<block_number::BlockTag>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 0 at cita-chain/types/src/filter.rs:200:24: 200:33
        _7 = move (_1.2: std::option::Option<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data20>>); // scope 0 at cita-chain/types/src/filter.rs:200:24: 200:33
        _6 = <std::option::Option<VariadicValue<Data20>> as Into<AddressFilter>>::into(move _7) -> [return: bb3, unwind: bb10]; // scope 0 at cita-chain/types/src/filter.rs:200:24: 200:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:200:34: 200:38
                                         // + literal: Const { ty: fn(std::option::Option<VariadicValue<Data20>>) -> AddressFilter {<std::option::Option<VariadicValue<Data20>> as Into<AddressFilter>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = const false;               // scope 0 at cita-chain/types/src/filter.rs:201:21: 201:29
        _9 = move (_1.3: std::option::Option<std::vec::Vec<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>>); // scope 0 at cita-chain/types/src/filter.rs:201:21: 201:29
        _8 = <std::option::Option<Vec<VariadicValue<Data32>>> as Into<TopicFilter>>::into(move _9) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/filter.rs:201:21: 201:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/filter.rs:201:30: 201:34
                                         // + literal: Const { ty: fn(std::option::Option<Vec<VariadicValue<Data32>>>) -> TopicFilter {<std::option::Option<Vec<VariadicValue<Data32>>> as Into<TopicFilter>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = (_1.4: std::option::Option<usize>); // scope 0 at cita-chain/types/src/filter.rs:202:20: 202:27
        _0 = filter::Filter { from_block: move _2, to_block: move _4, addresses: move _6, topics: move _8, limit: move _10 }; // scope 0 at cita-chain/types/src/filter.rs:197:9: 203:10
        return;                          // scope 0 at cita-chain/types/src/filter.rs:204:6: 204:6
    }

    bb5 (cleanup): {
        drop(_6) -> bb10;                // scope 0 at cita-chain/types/src/filter.rs:203:9: 203:10
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/filter.rs:196:5: 204:6
    }

    bb7 (cleanup): {
        switchInt(_11) -> [0: bb6, otherwise: bb8]; // scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6
    }

    bb8 (cleanup): {
        drop((_1.3: std::option::Option<std::vec::Vec<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data32>>>)) -> bb6; // scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6
    }

    bb9 (cleanup): {
        drop((_1.2: std::option::Option<jsonrpc_types::rpc_types::VariadicValue<jsonrpc_types::rpc_types::Data20>>)) -> bb7; // scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6
    }

    bb10 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb9]; // scope 0 at cita-chain/types/src/filter.rs:204:5: 204:6
    }
}

static ZERO_BLOOM: ZERO_BLOOM = {
    let mut _0: header::ZERO_BLOOM;      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:29: 161:31
    let mut _1: ();                      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:55: 161:57

    bb0: {
        StorageLive(_1);                 // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:55: 161:57
        _1 = ();                         // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:55: 161:57
        _0 = ZERO_BLOOM { __private_field: move _1 }; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:34: 161:58
        StorageDead(_1);                 // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:57: 161:58
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:161:58: 173:50
    }
}

fn header::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &ZERO_BLOOM) -> &cita_types::Bloom {
    debug self => _1;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:135:22: 135:27
    let mut _0: &cita_types::Bloom;      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:144:17: 144:30

    bb0: {
        _0 = __stability() -> bb1;       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:144:17: 144:30
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:144:17: 144:28
                                         // + literal: Const { ty: fn() -> &'static cita_types::Bloom {__stability}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:145:14: 145:14
    }
}

fn __static_ref_initialize() -> cita_types::Bloom {
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/header.rs:33:32: 33:37
    let mut _1: [u8; 256];               // in scope 0 at cita-chain/types/src/header.rs:33:52: 33:63

    bb0: {
        _1 = [const 0_u8; 256];          // scope 0 at cita-chain/types/src/header.rs:33:52: 33:63
        _0 = <cita_types::Bloom as From<[u8; 256]>>::from(move _1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:33:40: 33:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:33:40: 33:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u8; 256]) -> cita_types::Bloom {<cita_types::Bloom as From<[u8; 256]>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:137:58: 137:58
    }
}

__static_ref_initialize::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/header.rs:33:59: 33:62

    bb0: {
        _0 = const 256_usize;            // scope 0 at cita-chain/types/src/header.rs:33:59: 33:62
        return;                          // scope 0 at cita-chain/types/src/header.rs:33:59: 33:62
    }
}

fn __stability() -> &cita_types::Bloom {
    let mut _0: &cita_types::Bloom;      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:140:37: 140:48
    let _1: &lazy_static::lazy::Lazy<cita_types::Bloom>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:21: 142:25

    bb0: {
        _1 = const {alloc96: &Lazy<cita_types::Bloom>}; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:21: 142:25
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:21: 142:25
                                         // + literal: Const { ty: &Lazy<cita_types::Bloom>, val: Value(Scalar(alloc96)) }
        _0 = Lazy::<cita_types::Bloom>::get::<fn() -> cita_types::Bloom {__static_ref_initialize}>(_1, __static_ref_initialize) -> bb1; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:21: 142:54
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:26: 142:29
                                         // + literal: Const { ty: fn(&'static Lazy<cita_types::Bloom>, fn() -> cita_types::Bloom {__static_ref_initialize}) -> &'static cita_types::Bloom {Lazy::<cita_types::Bloom>::get::<fn() -> cita_types::Bloom {__static_ref_initialize}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:142:30: 142:53
                                         // + literal: Const { ty: fn() -> cita_types::Bloom {__static_ref_initialize}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:143:18: 143:18
    }
}

alloc96 (static: LAZY, size: 264, align: 4) {
    0x000 │ 00 00 00 00 00 __ __ __ __ __ __ __ __ __ __ __ │ .....░░░░░░░░░░░
    0x010 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x020 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x030 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x040 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x050 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x060 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x070 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x080 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x090 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0a0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0b0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0c0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0d0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0e0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x0f0 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x100 │ __ __ __ __ __ __ __ __                         │ ░░░░░░░░
}

static LAZY: Lazy<cita_types::Bloom> = {
    let mut _0: lazy_static::lazy::Lazy<cita_types::Bloom>; // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/inline_lazy.rs:55:23: 55:45

    bb0: {
        _0 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/inline_lazy.rs:55:48: 55:72
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/inline_lazy.rs:55:48: 55:72
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: Lazy<cita_types::Bloom>, val: Unevaluated(Lazy::<T>::INIT, [cita_types::Bloom], None) }
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/inline_lazy.rs:55:9: 55:73
    }
}

fn header::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &ZERO_BLOOM) -> () {
    debug lazy => _1;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:148:27: 148:31
    let mut _0: ();                      // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:148:40: 148:40
    let _2: &cita_types::Bloom;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:149:26: 149:32
    scope 1 {
    }

    bb0: {
        _2 = <ZERO_BLOOM as Deref>::deref(_1) -> bb1; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:149:26: 149:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:149:26: 149:32
                                         // + literal: Const { ty: for<'a> fn(&'a ZERO_BLOOM) -> &'a <ZERO_BLOOM as Deref>::Target {<ZERO_BLOOM as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:150:14: 150:14
    }
}

fn header::<impl at cita-chain/types/src/header.rs:36:10: 36:15>::fmt(_1: &OpenHeader, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let _4: &[&dyn std::fmt::Debug; 8];  // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let _5: [&dyn std::fmt::Debug; 8];   // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
    let _7: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let _9: &u64;                        // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let _11: &u64;                       // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let _13: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let _17: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let _19: &u32;                       // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
    let _21: &&cita_types::H160;         // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
    let _22: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
    let _23: &str;                       // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _24: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _25: &[&str; 8];             // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    scope 1 {
        debug names => _25;              // in scope 1 at cita-chain/types/src/header.rs:36:10: 36:15
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/header.rs:36:10: 36:15
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/header.rs:36:10: 36:15
        }
    }

    bb0: {
        _25 = const _;                   // scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:36:10: 36:15
                                         // + literal: Const { ty: &[&str; 8], val: Unevaluated(<OpenHeader as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:39:5: 39:22
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:39:5: 39:22
        _9 = &((*_1).1: u64);            // scope 1 at cita-chain/types/src/header.rs:41:5: 41:19
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:41:5: 41:19
        _11 = &((*_1).2: u64);           // scope 1 at cita-chain/types/src/header.rs:43:5: 43:24
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:43:5: 43:24
        _13 = &((*_1).3: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:45:5: 45:28
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:45:5: 45:28
        _15 = &((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/header.rs:47:5: 47:22
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:47:5: 47:22
        _17 = &((*_1).5: libproto::Proof); // scope 1 at cita-chain/types/src/header.rs:49:5: 49:22
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:49:5: 49:22
        _19 = &((*_1).6: u32);           // scope 1 at cita-chain/types/src/header.rs:51:5: 51:17
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:51:5: 51:17
        _22 = &((*_1).7: cita_types::H160); // scope 1 at cita-chain/types/src/header.rs:53:5: 53:22
        _21 = &_22;                      // scope 1 at cita-chain/types/src/header.rs:53:5: 53:22
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:53:5: 53:22
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20]; // scope 1 at cita-chain/types/src/header.rs:36:10: 36:15
        _4 = &_5;                        // scope 1 at cita-chain/types/src/header.rs:36:10: 36:15
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:36:10: 36:15
        _23 = const "OpenHeader";        // scope 2 at cita-chain/types/src/header.rs:36:10: 36:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:36:10: 36:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/header.rs:36:10: 36:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _23, move _24, _3) -> bb1; // scope 2 at cita-chain/types/src/header.rs:36:10: 36:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:36:10: 36:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:36:15: 36:15
    }
}

promoted[0] in header::<impl at cita-chain/types/src/header.rs:36:10: 36:15>::fmt: &[&str; 8] = {
    let mut _0: &[&str; 8];              // return place in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _1: [&str; 8];               // in scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let mut _14: &str;                   // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
    let mut _15: &str;                   // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22

    bb0: {
        _3 = const "timestamp";          // scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:41:5: 41:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
        _5 = const "number";             // scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:43:5: 43:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
        _7 = const "transactions_root";  // scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:45:5: 45:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
        _9 = const "quota_limit";        // scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:47:5: 47:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
        _11 = const "proof";             // scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:49:5: 49:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
        _13 = const "version";           // scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:51:5: 51:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
        _15 = const "proposer";          // scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:53:5: 53:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
        _1 = [const "parent_hash", move _2, move _4, move _6, move _8, move _10, move _12, move _14]; // scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:39:5: 39:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
        return;                          // scope 0 at cita-chain/types/src/header.rs:36:10: 36:15
    }
}

fn header::<impl at cita-chain/types/src/header.rs:36:17: 36:22>::clone(_1: &OpenHeader) -> OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:36:17: 36:22
    let mut _0: header::OpenHeader;      // return place in scope 0 at cita-chain/types/src/header.rs:36:17: 36:22
    let mut _2: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
    let _3: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let _5: &u64;                        // in scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let _7: &u64;                        // in scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
    let mut _10: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let _11: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
    let mut _12: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let _13: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
    let mut _14: u32;                    // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let _15: &u32;                       // in scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
    let mut _16: cita_types::H160;       // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
    let _17: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:53:5: 53:22

    bb0: {
        _3 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
        _2 = <H256 as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/header.rs:39:5: 39:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:39:5: 39:22
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: u64);            // scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
        _4 = (*_5);                      // scope 0 at cita-chain/types/src/header.rs:41:5: 41:19
        _7 = &((*_1).2: u64);            // scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
        _6 = (*_7);                      // scope 0 at cita-chain/types/src/header.rs:43:5: 43:24
        _9 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
        _8 = <H256 as Clone>::clone(_9) -> bb2; // scope 0 at cita-chain/types/src/header.rs:45:5: 45:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:45:5: 45:28
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
        _10 = <U256 as Clone>::clone(_11) -> bb3; // scope 0 at cita-chain/types/src/header.rs:47:5: 47:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:47:5: 47:22
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
        _12 = <libproto::Proof as Clone>::clone(_13) -> bb4; // scope 0 at cita-chain/types/src/header.rs:49:5: 49:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:49:5: 49:22
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &((*_1).6: u32);           // scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
        _14 = (*_15);                    // scope 0 at cita-chain/types/src/header.rs:51:5: 51:17
        _17 = &((*_1).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
        _16 = <H160 as Clone>::clone(_17) -> [return: bb5, unwind: bb6]; // scope 0 at cita-chain/types/src/header.rs:53:5: 53:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:53:5: 53:22
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = OpenHeader { parent_hash: move _2, timestamp: move _4, number: move _6, transactions_root: move _8, quota_limit: move _10, proof: move _12, version: move _14, proposer: move _16 }; // scope 0 at cita-chain/types/src/header.rs:36:17: 36:22
        return;                          // scope 0 at cita-chain/types/src/header.rs:36:22: 36:22
    }

    bb6 (cleanup): {
        drop(_12) -> bb7;                // scope 0 at cita-chain/types/src/header.rs:36:21: 36:22
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:36:17: 36:22
    }
}

fn header::<impl at cita-chain/types/src/header.rs:36:24: 36:26>::assert_receiver_is_total_eq(_1: &OpenHeader) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:36:24: 36:26
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:36:24: 36:26
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:36:26: 36:26
    }
}

fn header::<impl at cita-chain/types/src/header.rs:56:1: 56:30>::eq(_1: &OpenHeader, _2: &OpenHeader) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:57:11: 57:16
    debug c => _2;                       // in scope 0 at cita-chain/types/src/header.rs:57:18: 57:19
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/header.rs:57:37: 57:41
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/header.rs:58:9: 58:42
    let mut _10: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:58:9: 58:25
    let mut _11: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:58:29: 58:42
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/header.rs:59:16: 59:45
    let mut _13: u64;                    // in scope 0 at cita-chain/types/src/header.rs:59:16: 59:30
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/header.rs:59:34: 59:45
    let mut _15: bool;                   // in scope 0 at cita-chain/types/src/header.rs:60:16: 60:39
    let mut _16: u64;                    // in scope 0 at cita-chain/types/src/header.rs:60:16: 60:27
    let mut _17: u64;                    // in scope 0 at cita-chain/types/src/header.rs:60:31: 60:39
    let mut _18: bool;                   // in scope 0 at cita-chain/types/src/header.rs:61:16: 61:61
    let mut _19: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:61:16: 61:38
    let mut _20: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:61:42: 61:61
    let mut _21: bool;                   // in scope 0 at cita-chain/types/src/header.rs:62:16: 62:49
    let mut _22: &cita_types::U256;      // in scope 0 at cita-chain/types/src/header.rs:62:16: 62:32
    let mut _23: &cita_types::U256;      // in scope 0 at cita-chain/types/src/header.rs:62:36: 62:49
    let mut _24: bool;                   // in scope 0 at cita-chain/types/src/header.rs:63:16: 63:37
    let mut _25: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:63:16: 63:26
    let mut _26: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:63:30: 63:37
    let mut _27: bool;                   // in scope 0 at cita-chain/types/src/header.rs:64:16: 64:41
    let mut _28: u32;                    // in scope 0 at cita-chain/types/src/header.rs:64:16: 64:28
    let mut _29: u32;                    // in scope 0 at cita-chain/types/src/header.rs:64:32: 64:41
    let mut _30: bool;                   // in scope 0 at cita-chain/types/src/header.rs:65:16: 65:43
    let mut _31: &cita_types::H160;      // in scope 0 at cita-chain/types/src/header.rs:65:16: 65:29
    let mut _32: &cita_types::H160;      // in scope 0 at cita-chain/types/src/header.rs:65:33: 65:43

    bb0: {
        _10 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:58:9: 58:25
        _11 = &((*_2).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:58:29: 58:42
        _9 = <H256 as PartialEq>::eq(move _10, move _11) -> bb22; // scope 0 at cita-chain/types/src/header.rs:58:9: 58:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:58:9: 58:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 65:43
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 65:43
    }

    bb2: {
        _31 = &((*_1).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:65:16: 65:29
        _32 = &((*_2).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:65:33: 65:43
        _30 = <H160 as PartialEq>::eq(move _31, move _32) -> bb26; // scope 0 at cita-chain/types/src/header.rs:65:16: 65:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:65:16: 65:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:66:6: 66:6
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
    }

    bb5: {
        _28 = ((*_1).6: u32);            // scope 0 at cita-chain/types/src/header.rs:64:16: 64:28
        _29 = ((*_2).6: u32);            // scope 0 at cita-chain/types/src/header.rs:64:32: 64:41
        _27 = Eq(move _28, move _29);    // scope 0 at cita-chain/types/src/header.rs:64:16: 64:41
        _3 = move _27;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/header.rs:58:9: 65:43
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
    }

    bb8: {
        _25 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:63:16: 63:26
        _26 = &((*_2).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:63:30: 63:37
        _24 = <libproto::Proof as PartialEq>::eq(move _25, move _26) -> bb25; // scope 0 at cita-chain/types/src/header.rs:63:16: 63:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:63:16: 63:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a libproto::Proof, &'b libproto::Proof) -> bool {<libproto::Proof as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/header.rs:58:9: 64:41
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
    }

    bb11: {
        _22 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:62:16: 62:32
        _23 = &((*_2).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:62:36: 62:49
        _21 = <U256 as PartialEq>::eq(move _22, move _23) -> bb24; // scope 0 at cita-chain/types/src/header.rs:62:16: 62:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:62:16: 62:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
    }

    bb14: {
        _19 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:61:16: 61:38
        _20 = &((*_2).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:61:42: 61:61
        _18 = <H256 as PartialEq>::eq(move _19, move _20) -> bb23; // scope 0 at cita-chain/types/src/header.rs:61:16: 61:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:61:16: 61:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
    }

    bb16: {
        _7 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
        goto -> bb18;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
    }

    bb17: {
        _16 = ((*_1).2: u64);            // scope 0 at cita-chain/types/src/header.rs:60:16: 60:27
        _17 = ((*_2).2: u64);            // scope 0 at cita-chain/types/src/header.rs:60:31: 60:39
        _15 = Eq(move _16, move _17);    // scope 0 at cita-chain/types/src/header.rs:60:16: 60:39
        _7 = move _15;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
        goto -> bb18;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
    }

    bb19: {
        _8 = const false;                // scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
        goto -> bb21;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
    }

    bb20: {
        _13 = ((*_1).1: u64);            // scope 0 at cita-chain/types/src/header.rs:59:16: 59:30
        _14 = ((*_2).1: u64);            // scope 0 at cita-chain/types/src/header.rs:59:34: 59:45
        _12 = Eq(move _13, move _14);    // scope 0 at cita-chain/types/src/header.rs:59:16: 59:45
        _8 = move _12;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
        goto -> bb21;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
    }

    bb21: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-chain/types/src/header.rs:58:9: 60:39
    }

    bb22: {
        switchInt(move _9) -> [0: bb19, otherwise: bb20]; // scope 0 at cita-chain/types/src/header.rs:58:9: 59:45
    }

    bb23: {
        _6 = move _18;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 61:61
    }

    bb24: {
        _5 = move _21;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:58:9: 62:49
    }

    bb25: {
        _4 = move _24;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 63:37
    }

    bb26: {
        _0 = move _30;                   // scope 0 at cita-chain/types/src/header.rs:58:9: 65:43
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:58:9: 65:43
    }
}

fn header::<impl at cita-chain/types/src/header.rs:69:1: 69:28>::default() -> OpenHeader {
    let mut _0: header::OpenHeader;      // return place in scope 0 at cita-chain/types/src/header.rs:70:21: 70:25
    let mut _1: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:72:26: 72:41
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/types/src/header.rs:76:26: 76:54
    let mut _3: u64;                     // in scope 0 at cita-chain/types/src/header.rs:76:37: 76:53
    let mut _4: libproto::Proof;         // in scope 0 at cita-chain/types/src/header.rs:77:20: 77:37
    let mut _5: cita_types::H160;        // in scope 0 at cita-chain/types/src/header.rs:79:23: 79:41

    bb0: {
        _1 = <H256 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/header.rs:72:26: 72:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:72:26: 72:39
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = core::num::<impl u64>::max_value() -> bb2; // scope 0 at cita-chain/types/src/header.rs:76:37: 76:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:76:37: 76:51
                                         // + literal: Const { ty: fn() -> u64 {core::num::<impl u64>::max_value}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <U256 as From<u64>>::from(move _3) -> bb3; // scope 0 at cita-chain/types/src/header.rs:76:26: 76:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:76:26: 76:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = libproto::Proof::new() -> bb4; // scope 0 at cita-chain/types/src/header.rs:77:20: 77:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:77:20: 77:35
                                         // + literal: Const { ty: fn() -> libproto::Proof {libproto::Proof::new}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <H160 as Default>::default() -> [return: bb5, unwind: bb6]; // scope 0 at cita-chain/types/src/header.rs:79:23: 79:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:79:23: 79:39
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = OpenHeader { parent_hash: move _1, timestamp: const 0_u64, number: const 0_u64, transactions_root: const _, quota_limit: move _2, proof: move _4, version: const 0_u32, proposer: move _5 }; // scope 0 at cita-chain/types/src/header.rs:71:9: 80:10
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:75:32: 75:45
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
        return;                          // scope 0 at cita-chain/types/src/header.rs:81:6: 81:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/types/src/header.rs:80:9: 80:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:70:5: 81:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::from_protobuf(_1: &libproto::Block) -> OpenHeader {
    debug block => _1;                   // in scope 0 at cita-chain/types/src/header.rs:85:26: 85:31
    let mut _0: header::OpenHeader;      // return place in scope 0 at cita-chain/types/src/header.rs:85:49: 85:53
    let _2: &libproto::BlockHeader;      // in scope 0 at cita-chain/types/src/header.rs:86:13: 86:19
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:89:26: 89:59
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/header.rs:89:37: 89:58
    let mut _6: &libproto::BlockHeader;  // in scope 0 at cita-chain/types/src/header.rs:89:37: 89:58
    let mut _7: u64;                     // in scope 0 at cita-chain/types/src/header.rs:90:24: 90:46
    let mut _8: &libproto::BlockHeader;  // in scope 0 at cita-chain/types/src/header.rs:90:24: 90:46
    let mut _9: u64;                     // in scope 0 at cita-chain/types/src/header.rs:91:21: 91:40
    let mut _10: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:91:21: 91:40
    let mut _11: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:92:32: 92:74
    let mut _12: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:92:43: 92:73
    let mut _13: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:92:43: 92:73
    let mut _14: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:93:26: 93:62
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/header.rs:93:37: 93:61
    let mut _16: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:93:37: 93:61
    let mut _17: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:94:20: 94:46
    let mut _18: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:94:20: 94:46
    let _19: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:94:20: 94:38
    let mut _20: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:94:20: 94:38
    let mut _21: u32;                    // in scope 0 at cita-chain/types/src/header.rs:95:13: 95:20
    let mut _22: cita_types::H160;       // in scope 0 at cita-chain/types/src/header.rs:96:23: 96:59
    let mut _23: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:96:37: 96:58
    let mut _24: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:96:37: 96:58
    scope 1 {
        debug header => _2;              // in scope 1 at cita-chain/types/src/header.rs:86:13: 86:19
        let _3: u32;                     // in scope 1 at cita-chain/types/src/header.rs:87:13: 87:20
        scope 2 {
            debug version => _3;         // in scope 2 at cita-chain/types/src/header.rs:87:13: 87:20
        }
    }

    bb0: {
        _2 = libproto::Block::get_header(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:86:22: 86:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:86:28: 86:38
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Block) -> &'a libproto::BlockHeader {libproto::Block::get_header}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = libproto::Block::get_version(_1) -> bb2; // scope 1 at cita-chain/types/src/header.rs:87:23: 87:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:87:29: 87:40
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Block) -> u32 {libproto::Block::get_version}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _2;                         // scope 2 at cita-chain/types/src/header.rs:89:37: 89:58
        _5 = libproto::BlockHeader::get_prevhash(move _6) -> bb3; // scope 2 at cita-chain/types/src/header.rs:89:37: 89:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:89:44: 89:56
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> &'a [u8] {libproto::BlockHeader::get_prevhash}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <H256 as From<&[u8]>>::from(move _5) -> bb4; // scope 2 at cita-chain/types/src/header.rs:89:26: 89:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:89:26: 89:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = _2;                         // scope 2 at cita-chain/types/src/header.rs:90:24: 90:46
        _7 = libproto::BlockHeader::get_timestamp(move _8) -> bb5; // scope 2 at cita-chain/types/src/header.rs:90:24: 90:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:90:31: 90:44
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> u64 {libproto::BlockHeader::get_timestamp}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _2;                        // scope 2 at cita-chain/types/src/header.rs:91:21: 91:40
        _9 = libproto::BlockHeader::get_height(move _10) -> bb6; // scope 2 at cita-chain/types/src/header.rs:91:21: 91:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:91:28: 91:38
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> u64 {libproto::BlockHeader::get_height}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _2;                        // scope 2 at cita-chain/types/src/header.rs:92:43: 92:73
        _12 = libproto::BlockHeader::get_transactions_root(move _13) -> bb7; // scope 2 at cita-chain/types/src/header.rs:92:43: 92:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:92:50: 92:71
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> &'a [u8] {libproto::BlockHeader::get_transactions_root}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = <H256 as From<&[u8]>>::from(move _12) -> bb8; // scope 2 at cita-chain/types/src/header.rs:92:32: 92:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:92:32: 92:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = _2;                        // scope 2 at cita-chain/types/src/header.rs:93:37: 93:61
        _15 = libproto::BlockHeader::get_quota_limit(move _16) -> bb9; // scope 2 at cita-chain/types/src/header.rs:93:37: 93:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:93:44: 93:59
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> u64 {libproto::BlockHeader::get_quota_limit}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = <U256 as From<u64>>::from(move _15) -> bb10; // scope 2 at cita-chain/types/src/header.rs:93:26: 93:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:93:26: 93:36
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = _2;                        // scope 2 at cita-chain/types/src/header.rs:94:20: 94:38
        _19 = libproto::BlockHeader::get_proof(move _20) -> bb11; // scope 2 at cita-chain/types/src/header.rs:94:20: 94:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:94:27: 94:36
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> &'a libproto::Proof {libproto::BlockHeader::get_proof}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = _19;                       // scope 2 at cita-chain/types/src/header.rs:94:20: 94:46
        _17 = <libproto::Proof as Clone>::clone(move _18) -> bb12; // scope 2 at cita-chain/types/src/header.rs:94:20: 94:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:94:39: 94:44
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = _3;                        // scope 2 at cita-chain/types/src/header.rs:95:13: 95:20
        _24 = _2;                        // scope 2 at cita-chain/types/src/header.rs:96:37: 96:58
        _23 = libproto::BlockHeader::get_proposer(move _24) -> [return: bb13, unwind: bb15]; // scope 2 at cita-chain/types/src/header.rs:96:37: 96:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:96:44: 96:56
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> &'a [u8] {libproto::BlockHeader::get_proposer}, val: Value(<ZST>) }
    }

    bb13: {
        _22 = <H160 as From<&[u8]>>::from(move _23) -> [return: bb14, unwind: bb15]; // scope 2 at cita-chain/types/src/header.rs:96:23: 96:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:96:23: 96:36
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb14: {
        _0 = OpenHeader { parent_hash: move _4, timestamp: move _7, number: move _9, transactions_root: move _11, quota_limit: move _14, proof: move _17, version: move _21, proposer: move _22 }; // scope 2 at cita-chain/types/src/header.rs:88:9: 97:10
        return;                          // scope 0 at cita-chain/types/src/header.rs:98:6: 98:6
    }

    bb15 (cleanup): {
        drop(_17) -> bb16;               // scope 2 at cita-chain/types/src/header.rs:97:9: 97:10
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:85:5: 98:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::is_equivalent(_1: &OpenHeader, _2: &OpenHeader) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:100:26: 100:31
    debug header => _2;                  // in scope 0 at cita-chain/types/src/header.rs:100:33: 100:39
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/header.rs:100:57: 100:61
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/header.rs:101:9: 101:63
    let mut _8: &&cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:101:9: 101:33
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:101:9: 101:33
    let mut _10: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:101:37: 101:63
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:101:37: 101:63
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/header.rs:102:16: 102:54
    let mut _13: u64;                    // in scope 0 at cita-chain/types/src/header.rs:102:16: 102:32
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/header.rs:102:36: 102:54
    let mut _15: bool;                   // in scope 0 at cita-chain/types/src/header.rs:103:16: 103:52
    let mut _16: &&cita_types::H160;     // in scope 0 at cita-chain/types/src/header.rs:103:16: 103:31
    let _17: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:103:16: 103:31
    let mut _18: &&cita_types::H160;     // in scope 0 at cita-chain/types/src/header.rs:103:35: 103:52
    let _19: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:103:35: 103:52
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/header.rs:104:16: 104:58
    let mut _21: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:104:16: 104:34
    let _22: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:104:16: 104:34
    let mut _23: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:104:38: 104:58
    let _24: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:104:38: 104:58
    let mut _25: bool;                   // in scope 0 at cita-chain/types/src/header.rs:105:16: 105:48
    let mut _26: u64;                    // in scope 0 at cita-chain/types/src/header.rs:105:16: 105:29
    let mut _27: u64;                    // in scope 0 at cita-chain/types/src/header.rs:105:33: 105:48
    let mut _28: bool;                   // in scope 0 at cita-chain/types/src/header.rs:106:16: 106:50
    let mut _29: u32;                    // in scope 0 at cita-chain/types/src/header.rs:106:16: 106:30
    let mut _30: u32;                    // in scope 0 at cita-chain/types/src/header.rs:106:34: 106:50

    bb0: {
        _9 = OpenHeader::transactions_root(_1) -> bb16; // scope 0 at cita-chain/types/src/header.rs:101:9: 101:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:101:14: 101:31
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::transactions_root}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/header.rs:101:9: 106:50
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 106:50
    }

    bb2: {
        _29 = OpenHeader::version(_1) -> bb29; // scope 0 at cita-chain/types/src/header.rs:106:16: 106:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:106:21: 106:28
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u32 {OpenHeader::version}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:107:6: 107:6
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
    }

    bb5: {
        _26 = OpenHeader::number(_1) -> bb27; // scope 0 at cita-chain/types/src/header.rs:105:16: 105:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:105:21: 105:27
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/header.rs:101:9: 106:50
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
    }

    bb8: {
        _22 = OpenHeader::parent_hash(_1) -> bb24; // scope 0 at cita-chain/types/src/header.rs:104:16: 104:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:104:21: 104:32
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
    }

    bb11: {
        _17 = OpenHeader::proposer(_1) -> bb21; // scope 0 at cita-chain/types/src/header.rs:103:16: 103:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:103:21: 103:29
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H160 {OpenHeader::proposer}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
    }

    bb14: {
        _13 = OpenHeader::timestamp(_1) -> bb19; // scope 0 at cita-chain/types/src/header.rs:102:16: 102:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:102:21: 102:30
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::timestamp}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
    }

    bb16: {
        _8 = &_9;                        // scope 0 at cita-chain/types/src/header.rs:101:9: 101:33
        _11 = OpenHeader::transactions_root(_2) -> bb17; // scope 0 at cita-chain/types/src/header.rs:101:37: 101:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:101:44: 101:61
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::transactions_root}, val: Value(<ZST>) }
    }

    bb17: {
        _10 = &_11;                      // scope 0 at cita-chain/types/src/header.rs:101:37: 101:63
        _7 = <&H256 as PartialEq>::eq(move _8, move _10) -> bb18; // scope 0 at cita-chain/types/src/header.rs:101:9: 101:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:101:9: 101:63
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
    }

    bb19: {
        _14 = OpenHeader::timestamp(_2) -> bb20; // scope 0 at cita-chain/types/src/header.rs:102:36: 102:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:102:43: 102:52
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::timestamp}, val: Value(<ZST>) }
    }

    bb20: {
        _12 = Eq(move _13, move _14);    // scope 0 at cita-chain/types/src/header.rs:102:16: 102:54
        _6 = move _12;                   // scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:101:9: 102:54
    }

    bb21: {
        _16 = &_17;                      // scope 0 at cita-chain/types/src/header.rs:103:16: 103:31
        _19 = OpenHeader::proposer(_2) -> bb22; // scope 0 at cita-chain/types/src/header.rs:103:35: 103:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:103:42: 103:50
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H160 {OpenHeader::proposer}, val: Value(<ZST>) }
    }

    bb22: {
        _18 = &_19;                      // scope 0 at cita-chain/types/src/header.rs:103:35: 103:52
        _15 = <&H160 as PartialEq>::eq(move _16, move _18) -> bb23; // scope 0 at cita-chain/types/src/header.rs:103:16: 103:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:103:16: 103:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H160, &'b &H160) -> bool {<&H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _5 = move _15;                   // scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:101:9: 103:52
    }

    bb24: {
        _21 = &_22;                      // scope 0 at cita-chain/types/src/header.rs:104:16: 104:34
        _24 = OpenHeader::parent_hash(_2) -> bb25; // scope 0 at cita-chain/types/src/header.rs:104:38: 104:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:104:45: 104:56
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb25: {
        _23 = &_24;                      // scope 0 at cita-chain/types/src/header.rs:104:38: 104:58
        _20 = <&H256 as PartialEq>::eq(move _21, move _23) -> bb26; // scope 0 at cita-chain/types/src/header.rs:104:16: 104:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:104:16: 104:58
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _4 = move _20;                   // scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 104:58
    }

    bb27: {
        _27 = OpenHeader::number(_2) -> bb28; // scope 0 at cita-chain/types/src/header.rs:105:33: 105:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:105:40: 105:46
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb28: {
        _25 = Eq(move _26, move _27);    // scope 0 at cita-chain/types/src/header.rs:105:16: 105:48
        _3 = move _25;                   // scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 105:48
    }

    bb29: {
        _30 = OpenHeader::version(_2) -> bb30; // scope 0 at cita-chain/types/src/header.rs:106:34: 106:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:106:41: 106:48
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u32 {OpenHeader::version}, val: Value(<ZST>) }
    }

    bb30: {
        _28 = Eq(move _29, move _30);    // scope 0 at cita-chain/types/src/header.rs:106:16: 106:50
        _0 = move _28;                   // scope 0 at cita-chain/types/src/header.rs:101:9: 106:50
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:101:9: 106:50
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::parent_hash(_1: &OpenHeader) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:109:24: 109:29
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/types/src/header.rs:110:9: 110:26

    bb0: {
        _0 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:110:9: 110:26
        return;                          // scope 0 at cita-chain/types/src/header.rs:111:6: 111:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::timestamp(_1: &OpenHeader) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:113:22: 113:27
    let mut _0: u64;                     // return place in scope 0 at cita-chain/types/src/header.rs:113:32: 113:35

    bb0: {
        _0 = ((*_1).1: u64);             // scope 0 at cita-chain/types/src/header.rs:114:9: 114:23
        return;                          // scope 0 at cita-chain/types/src/header.rs:115:6: 115:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::number(_1: &OpenHeader) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:117:19: 117:24
    let mut _0: u64;                     // return place in scope 0 at cita-chain/types/src/header.rs:117:29: 117:40

    bb0: {
        _0 = ((*_1).2: u64);             // scope 0 at cita-chain/types/src/header.rs:118:9: 118:20
        return;                          // scope 0 at cita-chain/types/src/header.rs:119:6: 119:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::transactions_root(_1: &OpenHeader) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:121:30: 121:35
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/types/src/header.rs:122:9: 122:32

    bb0: {
        _0 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:122:9: 122:32
        return;                          // scope 0 at cita-chain/types/src/header.rs:123:6: 123:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::quota_limit(_1: &OpenHeader) -> &U256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:125:24: 125:29
    let mut _0: &cita_types::U256;       // return place in scope 0 at cita-chain/types/src/header.rs:126:9: 126:26

    bb0: {
        _0 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:126:9: 126:26
        return;                          // scope 0 at cita-chain/types/src/header.rs:127:6: 127:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::proof(_1: &OpenHeader) -> &libproto::Proof {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:129:18: 129:23
    let mut _0: &libproto::Proof;        // return place in scope 0 at cita-chain/types/src/header.rs:130:9: 130:20

    bb0: {
        _0 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:130:9: 130:20
        return;                          // scope 0 at cita-chain/types/src/header.rs:131:6: 131:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::version(_1: &OpenHeader) -> u32 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:133:20: 133:25
    let mut _0: u32;                     // return place in scope 0 at cita-chain/types/src/header.rs:133:30: 133:33

    bb0: {
        _0 = ((*_1).6: u32);             // scope 0 at cita-chain/types/src/header.rs:134:9: 134:21
        return;                          // scope 0 at cita-chain/types/src/header.rs:135:6: 135:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::proof_type(_1: &OpenHeader) -> std::option::Option<ProofType> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:136:23: 136:28
    let mut _0: std::option::Option<libproto::ProofType>; // return place in scope 0 at cita-chain/types/src/header.rs:136:33: 136:50
    let mut _2: bool;                    // in scope 0 at cita-chain/types/src/header.rs:137:12: 137:43
    let mut _3: &libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:137:12: 137:22
    let mut _4: &libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:137:26: 137:43
    let _5: libproto::Proof;             // in scope 0 at cita-chain/types/src/header.rs:137:26: 137:43
    let mut _6: libproto::ProofType;     // in scope 0 at cita-chain/types/src/header.rs:140:18: 140:45
    let mut _7: &libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:140:18: 140:45

    bb0: {
        _3 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:137:12: 137:22
        _5 = libproto::Proof::new() -> bb1; // scope 0 at cita-chain/types/src/header.rs:137:26: 137:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:137:26: 137:41
                                         // + literal: Const { ty: fn() -> libproto::Proof {libproto::Proof::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at cita-chain/types/src/header.rs:137:26: 137:43
        _2 = <libproto::Proof as PartialEq>::eq(move _3, move _4) -> [return: bb2, unwind: bb8]; // scope 0 at cita-chain/types/src/header.rs:137:12: 137:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:137:12: 137:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a libproto::Proof, &'b libproto::Proof) -> bool {<libproto::Proof as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_5) -> bb3;                 // scope 0 at cita-chain/types/src/header.rs:137:42: 137:43
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/header.rs:137:12: 137:43
    }

    bb4: {
        _0 = const std::option::Option::<ProofType>::None; // scope 0 at cita-chain/types/src/header.rs:138:13: 138:17
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<ProofType>, val: Value(Scalar(0x03)) }
        goto -> bb7;                     // scope 0 at cita-chain/types/src/header.rs:137:9: 141:10
    }

    bb5: {
        _7 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:140:18: 140:45
        _6 = libproto::Proof::get_field_type(move _7) -> bb6; // scope 0 at cita-chain/types/src/header.rs:140:18: 140:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:140:29: 140:43
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> ProofType {libproto::Proof::get_field_type}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = std::option::Option::<ProofType>::Some(move _6); // scope 0 at cita-chain/types/src/header.rs:140:13: 140:46
        goto -> bb7;                     // scope 0 at cita-chain/types/src/header.rs:137:9: 141:10
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:142:6: 142:6
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at cita-chain/types/src/header.rs:137:42: 137:43
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:136:5: 142:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::proposer(_1: &OpenHeader) -> &H160 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:143:21: 143:26
    let mut _0: &cita_types::H160;       // return place in scope 0 at cita-chain/types/src/header.rs:144:9: 144:23

    bb0: {
        _0 = &((*_1).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:144:9: 144:23
        return;                          // scope 0 at cita-chain/types/src/header.rs:145:6: 145:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_parent_hash(_1: &mut OpenHeader, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:147:28: 147:37
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:147:39: 147:40
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:147:48: 147:48

    bb0: {
        ((*_1).0: cita_types::H256) = _2; // scope 0 at cita-chain/types/src/header.rs:148:9: 148:29
        return;                          // scope 0 at cita-chain/types/src/header.rs:149:6: 149:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_quota_limit(_1: &mut OpenHeader, _2: U256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:150:28: 150:37
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:150:39: 150:40
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:150:48: 150:48

    bb0: {
        ((*_1).4: cita_types::U256) = _2; // scope 0 at cita-chain/types/src/header.rs:151:9: 151:29
        return;                          // scope 0 at cita-chain/types/src/header.rs:152:6: 152:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_version(_1: &mut OpenHeader, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:153:24: 153:33
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:153:35: 153:36
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:153:43: 153:43

    bb0: {
        ((*_1).6: u32) = _2;             // scope 0 at cita-chain/types/src/header.rs:154:9: 154:25
        return;                          // scope 0 at cita-chain/types/src/header.rs:155:6: 155:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_proof(_1: &mut OpenHeader, _2: libproto::Proof) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:156:22: 156:31
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:156:33: 156:34
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:156:48: 156:48

    bb0: {
        drop(((*_1).5: libproto::Proof)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/types/src/header.rs:157:9: 157:19
    }

    bb1: {
        ((*_1).5: libproto::Proof) = move _2; // scope 0 at cita-chain/types/src/header.rs:157:9: 157:19
        return;                          // scope 0 at cita-chain/types/src/header.rs:158:6: 158:6
    }

    bb2 (cleanup): {
        ((*_1).5: libproto::Proof) = move _2; // scope 0 at cita-chain/types/src/header.rs:157:9: 157:19
        resume;                          // scope 0 at cita-chain/types/src/header.rs:156:5: 158:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_timestamp(_1: &mut OpenHeader, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:159:26: 159:35
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:159:37: 159:38
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:159:45: 159:45

    bb0: {
        ((*_1).1: u64) = _2;             // scope 0 at cita-chain/types/src/header.rs:160:9: 160:27
        return;                          // scope 0 at cita-chain/types/src/header.rs:161:6: 161:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_timestamp_now(_1: &mut OpenHeader, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:162:30: 162:39
    debug but_later_than => _2;          // in scope 0 at cita-chain/types/src/header.rs:162:41: 162:55
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:162:62: 162:62
    let mut _3: u64;                     // in scope 0 at cita-chain/types/src/header.rs:163:26: 163:77
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/header.rs:163:35: 163:56
    let mut _5: i64;                     // in scope 0 at cita-chain/types/src/header.rs:163:35: 163:49
    let mut _6: time::Timespec;          // in scope 0 at cita-chain/types/src/header.rs:163:35: 163:45
    let mut _7: u64;                     // in scope 0 at cita-chain/types/src/header.rs:163:58: 163:76
    let mut _8: (u64, bool);             // in scope 0 at cita-chain/types/src/header.rs:163:58: 163:76

    bb0: {
        _6 = get_time() -> bb1;          // scope 0 at cita-chain/types/src/header.rs:163:35: 163:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:163:35: 163:43
                                         // + literal: Const { ty: fn() -> Timespec {get_time}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = (_6.0: i64);                // scope 0 at cita-chain/types/src/header.rs:163:35: 163:49
        _4 = move _5 as u64 (IntToInt);  // scope 0 at cita-chain/types/src/header.rs:163:35: 163:56
        _8 = CheckedAdd(_2, const 1_u64); // scope 0 at cita-chain/types/src/header.rs:163:58: 163:76
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_u64) -> bb2; // scope 0 at cita-chain/types/src/header.rs:163:58: 163:76
    }

    bb2: {
        _7 = move (_8.0: u64);           // scope 0 at cita-chain/types/src/header.rs:163:58: 163:76
        _3 = std::cmp::max::<u64>(move _4, move _7) -> bb3; // scope 0 at cita-chain/types/src/header.rs:163:26: 163:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:163:26: 163:34
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {std::cmp::max::<u64>}, val: Value(<ZST>) }
    }

    bb3: {
        ((*_1).1: u64) = move _3;        // scope 0 at cita-chain/types/src/header.rs:163:9: 163:77
        return;                          // scope 0 at cita-chain/types/src/header.rs:164:6: 164:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:84:1: 84:16>::set_number(_1: &mut OpenHeader, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:165:23: 165:32
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:165:34: 165:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:165:50: 165:50

    bb0: {
        ((*_1).2: u64) = _2;             // scope 0 at cita-chain/types/src/header.rs:166:9: 166:24
        return;                          // scope 0 at cita-chain/types/src/header.rs:167:6: 167:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:170:10: 170:15>::fmt(_1: &Header, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let _4: &[&dyn std::fmt::Debug; 6];  // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let _5: [&dyn std::fmt::Debug; 6];   // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
    let _7: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let _13: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
    let _17: &&std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
    let _18: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
    let _19: &str;                       // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _20: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _21: &[&str; 6];             // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    scope 1 {
        debug names => _21;              // in scope 1 at cita-chain/types/src/header.rs:170:10: 170:15
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/header.rs:170:10: 170:15
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/header.rs:170:10: 170:15
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:170:10: 170:15
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(<Header as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: header::OpenHeader); // scope 1 at cita-chain/types/src/header.rs:172:5: 172:28
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:172:5: 172:28
        _9 = &((*_1).1: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:173:5: 173:21
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:173:5: 173:21
        _11 = &((*_1).2: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:174:5: 174:24
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:174:5: 174:24
        _13 = &((*_1).3: cita_types::Bloom); // scope 1 at cita-chain/types/src/header.rs:175:5: 175:21
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:175:5: 175:21
        _15 = &((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/header.rs:176:5: 176:21
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:176:5: 176:21
        _18 = &((*_1).5: std::option::Option<cita_types::H256>); // scope 1 at cita-chain/types/src/header.rs:177:5: 177:23
        _17 = &_18;                      // scope 1 at cita-chain/types/src/header.rs:177:5: 177:23
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:177:5: 177:23
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16]; // scope 1 at cita-chain/types/src/header.rs:170:10: 170:15
        _4 = &_5;                        // scope 1 at cita-chain/types/src/header.rs:170:10: 170:15
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:170:10: 170:15
        _19 = const "Header";            // scope 2 at cita-chain/types/src/header.rs:170:10: 170:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:170:10: 170:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/header.rs:170:10: 170:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> bb1; // scope 2 at cita-chain/types/src/header.rs:170:10: 170:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:170:10: 170:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:170:15: 170:15
    }
}

promoted[0] in header::<impl at cita-chain/types/src/header.rs:170:10: 170:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _1: [&str; 6];               // in scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23

    bb0: {
        _3 = const "state_root";         // scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:173:5: 173:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
        _5 = const "receipts_root";      // scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:174:5: 174:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
        _7 = const "log_bloom";          // scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:175:5: 175:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
        _9 = const "quota_used";         // scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:176:5: 176:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
        _11 = const "hash";              // scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:177:5: 177:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
        _1 = [const "open_header", move _2, move _4, move _6, move _8, move _10]; // scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:172:5: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
        return;                          // scope 0 at cita-chain/types/src/header.rs:170:10: 170:15
    }
}

fn header::<impl at cita-chain/types/src/header.rs:170:17: 170:22>::clone(_1: &Header) -> Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:170:17: 170:22
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:170:17: 170:22
    let mut _2: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
    let _3: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let _7: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
    let mut _8: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let _9: &cita_types::Bloom;          // in scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
    let mut _10: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let _11: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
    let mut _12: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
    let _13: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:177:5: 177:23

    bb0: {
        _3 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
        _2 = <OpenHeader as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/header.rs:172:5: 172:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:172:5: 172:28
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> OpenHeader {<OpenHeader as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
        _4 = <H256 as Clone>::clone(_5) -> [return: bb2, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:173:5: 173:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:173:5: 173:21
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
        _6 = <H256 as Clone>::clone(_7) -> [return: bb3, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:174:5: 174:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:174:5: 174:24
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: cita_types::Bloom); // scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
        _8 = <cita_types::Bloom as Clone>::clone(_9) -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:175:5: 175:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:175:5: 175:21
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> cita_types::Bloom {<cita_types::Bloom as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
        _10 = <U256 as Clone>::clone(_11) -> [return: bb5, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:176:5: 176:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:176:5: 176:21
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).5: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
        _12 = <std::option::Option<H256> as Clone>::clone(_13) -> [return: bb6, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:177:5: 177:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:177:5: 177:23
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H256>) -> std::option::Option<H256> {<std::option::Option<H256> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Header { open_header: move _2, state_root: move _4, receipts_root: move _6, log_bloom: move _8, quota_used: move _10, hash: move _12 }; // scope 0 at cita-chain/types/src/header.rs:170:17: 170:22
        return;                          // scope 0 at cita-chain/types/src/header.rs:170:22: 170:22
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at cita-chain/types/src/header.rs:170:21: 170:22
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:170:17: 170:22
    }
}

fn header::<impl at cita-chain/types/src/header.rs:170:24: 170:26>::assert_receiver_is_total_eq(_1: &Header) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:170:24: 170:26
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:170:24: 170:26
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:170:26: 170:26
    }
}

fn header::<impl at cita-chain/types/src/header.rs:180:1: 180:22>::deref(_1: &Header) -> &OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:183:14: 183:19
    let mut _0: &header::OpenHeader;     // return place in scope 0 at cita-chain/types/src/header.rs:184:9: 184:26

    bb0: {
        _0 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/header.rs:184:9: 184:26
        return;                          // scope 0 at cita-chain/types/src/header.rs:185:6: 185:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:188:1: 188:25>::deref_mut(_1: &mut Header) -> &mut OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:189:18: 189:27
    let mut _0: &mut header::OpenHeader; // return place in scope 0 at cita-chain/types/src/header.rs:190:9: 190:30

    bb0: {
        _0 = &mut ((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/header.rs:190:9: 190:30
        return;                          // scope 0 at cita-chain/types/src/header.rs:191:6: 191:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:194:1: 194:26>::eq(_1: &Header, _2: &Header) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:195:11: 195:16
    debug c => _2;                       // in scope 0 at cita-chain/types/src/header.rs:195:18: 195:19
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/header.rs:195:33: 195:37
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
    let mut _12: bool;                   // in scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
    let mut _13: bool;                   // in scope 0 at cita-chain/types/src/header.rs:196:9: 196:46
    let mut _14: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
    let _15: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
    let mut _16: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
    let _17: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
    let mut _18: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
    let _19: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
    let mut _20: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
    let _21: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
    let mut _22: bool;                   // in scope 0 at cita-chain/types/src/header.rs:197:16: 197:49
    let mut _23: u64;                    // in scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
    let mut _24: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
    let _25: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
    let mut _26: u64;                    // in scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
    let mut _27: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
    let _28: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
    let mut _29: bool;                   // in scope 0 at cita-chain/types/src/header.rs:198:16: 198:43
    let mut _30: u64;                    // in scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
    let mut _31: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
    let _32: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
    let mut _33: u64;                    // in scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
    let mut _34: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
    let _35: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
    let mut _36: bool;                   // in scope 0 at cita-chain/types/src/header.rs:199:16: 199:65
    let mut _37: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
    let _38: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
    let mut _39: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
    let _40: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
    let mut _41: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
    let _42: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
    let mut _43: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
    let _44: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
    let mut _45: bool;                   // in scope 0 at cita-chain/types/src/header.rs:200:16: 200:51
    let mut _46: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:200:16: 200:33
    let _47: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:200:16: 200:33
    let mut _48: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:200:37: 200:51
    let _49: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:200:37: 200:51
    let mut _50: bool;                   // in scope 0 at cita-chain/types/src/header.rs:201:16: 201:57
    let mut _51: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:201:16: 201:36
    let _52: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:201:16: 201:36
    let mut _53: &&cita_types::H256;     // in scope 0 at cita-chain/types/src/header.rs:201:40: 201:57
    let _54: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:201:40: 201:57
    let mut _55: bool;                   // in scope 0 at cita-chain/types/src/header.rs:202:16: 202:49
    let mut _56: &&cita_types::Bloom;    // in scope 0 at cita-chain/types/src/header.rs:202:16: 202:32
    let _57: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/header.rs:202:16: 202:32
    let mut _58: &&cita_types::Bloom;    // in scope 0 at cita-chain/types/src/header.rs:202:36: 202:49
    let _59: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/header.rs:202:36: 202:49
    let mut _60: bool;                   // in scope 0 at cita-chain/types/src/header.rs:203:16: 203:51
    let mut _61: &&cita_types::U256;     // in scope 0 at cita-chain/types/src/header.rs:203:16: 203:33
    let _62: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:203:16: 203:33
    let mut _63: &&cita_types::U256;     // in scope 0 at cita-chain/types/src/header.rs:203:37: 203:51
    let _64: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:203:37: 203:51
    let mut _65: bool;                   // in scope 0 at cita-chain/types/src/header.rs:204:16: 204:53
    let mut _66: &&cita_types::U256;     // in scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
    let _67: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
    let mut _68: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
    let _69: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
    let mut _70: &&cita_types::U256;     // in scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
    let _71: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
    let mut _72: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
    let _73: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
    let mut _74: bool;                   // in scope 0 at cita-chain/types/src/header.rs:205:16: 205:41
    let mut _75: &&libproto::Proof;      // in scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
    let _76: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
    let mut _77: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
    let _78: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
    let mut _79: &&libproto::Proof;      // in scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
    let _80: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
    let mut _81: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
    let _82: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
    let mut _83: bool;                   // in scope 0 at cita-chain/types/src/header.rs:206:16: 206:45
    let mut _84: u32;                    // in scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
    let mut _85: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
    let _86: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
    let mut _87: u32;                    // in scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
    let mut _88: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
    let _89: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
    let mut _90: bool;                   // in scope 0 at cita-chain/types/src/header.rs:207:16: 207:47
    let mut _91: &&cita_types::H160;     // in scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
    let _92: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
    let mut _93: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
    let _94: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
    let mut _95: &&cita_types::H160;     // in scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
    let _96: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
    let mut _97: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
    let _98: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:207:35: 207:47

    bb0: {
        _17 = <Header as Deref>::deref(_1) -> bb34; // scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:196:9: 196:27
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 207:47
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 207:47
    }

    bb2: {
        _94 = <Header as Deref>::deref(_1) -> bb78; // scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:207:16: 207:31
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:208:6: 208:6
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
    }

    bb5: {
        _86 = <Header as Deref>::deref(_1) -> bb74; // scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:206:16: 206:30
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/header.rs:196:9: 207:47
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
    }

    bb8: {
        _78 = <Header as Deref>::deref(_1) -> bb69; // scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:205:16: 205:28
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
    }

    bb11: {
        _69 = <Header as Deref>::deref(_1) -> bb64; // scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:204:16: 204:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
    }

    bb14: {
        _62 = Header::quota_used(_1) -> bb61; // scope 0 at cita-chain/types/src/header.rs:203:16: 203:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:203:21: 203:31
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a U256 {Header::quota_used}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
    }

    bb16: {
        _7 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
        goto -> bb18;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
    }

    bb17: {
        _57 = Header::log_bloom(_1) -> bb58; // scope 0 at cita-chain/types/src/header.rs:202:16: 202:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:202:21: 202:30
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a cita_types::Bloom {Header::log_bloom}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
    }

    bb19: {
        _8 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
        goto -> bb21;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
    }

    bb20: {
        _52 = Header::receipts_root(_1) -> bb55; // scope 0 at cita-chain/types/src/header.rs:201:16: 201:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:201:21: 201:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::receipts_root}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
    }

    bb22: {
        _9 = const false;                // scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
        goto -> bb24;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
    }

    bb23: {
        _47 = Header::state_root(_1) -> bb52; // scope 0 at cita-chain/types/src/header.rs:200:16: 200:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:200:21: 200:31
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::state_root}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _9) -> [0: bb19, otherwise: bb20]; // scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
    }

    bb25: {
        _10 = const false;               // scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
        goto -> bb27;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
    }

    bb26: {
        _40 = <Header as Deref>::deref(_1) -> bb47; // scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:199:16: 199:40
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb27: {
        switchInt(move _10) -> [0: bb22, otherwise: bb23]; // scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
    }

    bb28: {
        _11 = const false;               // scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
        goto -> bb30;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
    }

    bb29: {
        _32 = <Header as Deref>::deref(_1) -> bb43; // scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:198:16: 198:29
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _11) -> [0: bb25, otherwise: bb26]; // scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
    }

    bb31: {
        _12 = const false;               // scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
        goto -> bb33;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
    }

    bb32: {
        _25 = <Header as Deref>::deref(_1) -> bb39; // scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:197:16: 197:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        switchInt(move _12) -> [0: bb28, otherwise: bb29]; // scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
    }

    bb34: {
        _16 = _17;                       // scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
        _15 = OpenHeader::parent_hash(move _16) -> bb35; // scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:196:14: 196:25
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb35: {
        _14 = &_15;                      // scope 0 at cita-chain/types/src/header.rs:196:9: 196:27
        _21 = <Header as Deref>::deref(_2) -> bb36; // scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:196:31: 196:46
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb36: {
        _20 = _21;                       // scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
        _19 = OpenHeader::parent_hash(move _20) -> bb37; // scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:196:33: 196:44
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb37: {
        _18 = &_19;                      // scope 0 at cita-chain/types/src/header.rs:196:31: 196:46
        _13 = <&H256 as PartialEq>::eq(move _14, move _18) -> bb38; // scope 0 at cita-chain/types/src/header.rs:196:9: 196:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:196:9: 196:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        switchInt(move _13) -> [0: bb31, otherwise: bb32]; // scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
    }

    bb39: {
        _24 = _25;                       // scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
        _23 = OpenHeader::timestamp(move _24) -> bb40; // scope 0 at cita-chain/types/src/header.rs:197:16: 197:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:197:21: 197:30
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::timestamp}, val: Value(<ZST>) }
    }

    bb40: {
        _28 = <Header as Deref>::deref(_2) -> bb41; // scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:197:36: 197:49
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb41: {
        _27 = _28;                       // scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
        _26 = OpenHeader::timestamp(move _27) -> bb42; // scope 0 at cita-chain/types/src/header.rs:197:36: 197:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:197:38: 197:47
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::timestamp}, val: Value(<ZST>) }
    }

    bb42: {
        _22 = Eq(move _23, move _26);    // scope 0 at cita-chain/types/src/header.rs:197:16: 197:49
        _12 = move _22;                  // scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
        goto -> bb33;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 197:49
    }

    bb43: {
        _31 = _32;                       // scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
        _30 = OpenHeader::number(move _31) -> bb44; // scope 0 at cita-chain/types/src/header.rs:198:16: 198:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:198:21: 198:27
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb44: {
        _35 = <Header as Deref>::deref(_2) -> bb45; // scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:198:33: 198:43
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _34 = _35;                       // scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
        _33 = OpenHeader::number(move _34) -> bb46; // scope 0 at cita-chain/types/src/header.rs:198:33: 198:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:198:35: 198:41
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb46: {
        _29 = Eq(move _30, move _33);    // scope 0 at cita-chain/types/src/header.rs:198:16: 198:43
        _11 = move _29;                  // scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
        goto -> bb30;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 198:43
    }

    bb47: {
        _39 = _40;                       // scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
        _38 = OpenHeader::transactions_root(move _39) -> bb48; // scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:199:21: 199:38
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::transactions_root}, val: Value(<ZST>) }
    }

    bb48: {
        _37 = &_38;                      // scope 0 at cita-chain/types/src/header.rs:199:16: 199:40
        _44 = <Header as Deref>::deref(_2) -> bb49; // scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:199:44: 199:65
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb49: {
        _43 = _44;                       // scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
        _42 = OpenHeader::transactions_root(move _43) -> bb50; // scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:199:46: 199:63
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::transactions_root}, val: Value(<ZST>) }
    }

    bb50: {
        _41 = &_42;                      // scope 0 at cita-chain/types/src/header.rs:199:44: 199:65
        _36 = <&H256 as PartialEq>::eq(move _37, move _41) -> bb51; // scope 0 at cita-chain/types/src/header.rs:199:16: 199:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:199:16: 199:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb51: {
        _10 = move _36;                  // scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
        goto -> bb27;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 199:65
    }

    bb52: {
        _46 = &_47;                      // scope 0 at cita-chain/types/src/header.rs:200:16: 200:33
        _49 = Header::state_root(_2) -> bb53; // scope 0 at cita-chain/types/src/header.rs:200:37: 200:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:200:39: 200:49
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::state_root}, val: Value(<ZST>) }
    }

    bb53: {
        _48 = &_49;                      // scope 0 at cita-chain/types/src/header.rs:200:37: 200:51
        _45 = <&H256 as PartialEq>::eq(move _46, move _48) -> bb54; // scope 0 at cita-chain/types/src/header.rs:200:16: 200:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:200:16: 200:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb54: {
        _9 = move _45;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
        goto -> bb24;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 200:51
    }

    bb55: {
        _51 = &_52;                      // scope 0 at cita-chain/types/src/header.rs:201:16: 201:36
        _54 = Header::receipts_root(_2) -> bb56; // scope 0 at cita-chain/types/src/header.rs:201:40: 201:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:201:42: 201:55
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::receipts_root}, val: Value(<ZST>) }
    }

    bb56: {
        _53 = &_54;                      // scope 0 at cita-chain/types/src/header.rs:201:40: 201:57
        _50 = <&H256 as PartialEq>::eq(move _51, move _53) -> bb57; // scope 0 at cita-chain/types/src/header.rs:201:16: 201:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:201:16: 201:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H256, &'b &H256) -> bool {<&H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb57: {
        _8 = move _50;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
        goto -> bb21;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 201:57
    }

    bb58: {
        _56 = &_57;                      // scope 0 at cita-chain/types/src/header.rs:202:16: 202:32
        _59 = Header::log_bloom(_2) -> bb59; // scope 0 at cita-chain/types/src/header.rs:202:36: 202:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:202:38: 202:47
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a cita_types::Bloom {Header::log_bloom}, val: Value(<ZST>) }
    }

    bb59: {
        _58 = &_59;                      // scope 0 at cita-chain/types/src/header.rs:202:36: 202:49
        _55 = <&cita_types::Bloom as PartialEq>::eq(move _56, move _58) -> bb60; // scope 0 at cita-chain/types/src/header.rs:202:16: 202:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:202:16: 202:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &cita_types::Bloom, &'b &cita_types::Bloom) -> bool {<&cita_types::Bloom as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb60: {
        _7 = move _55;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
        goto -> bb18;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 202:49
    }

    bb61: {
        _61 = &_62;                      // scope 0 at cita-chain/types/src/header.rs:203:16: 203:33
        _64 = Header::quota_used(_2) -> bb62; // scope 0 at cita-chain/types/src/header.rs:203:37: 203:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:203:39: 203:49
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a U256 {Header::quota_used}, val: Value(<ZST>) }
    }

    bb62: {
        _63 = &_64;                      // scope 0 at cita-chain/types/src/header.rs:203:37: 203:51
        _60 = <&U256 as PartialEq>::eq(move _61, move _63) -> bb63; // scope 0 at cita-chain/types/src/header.rs:203:16: 203:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:203:16: 203:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &U256, &'b &U256) -> bool {<&U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb63: {
        _6 = move _60;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
        goto -> bb15;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 203:51
    }

    bb64: {
        _68 = _69;                       // scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
        _67 = OpenHeader::quota_limit(move _68) -> bb65; // scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:204:21: 204:32
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a U256 {OpenHeader::quota_limit}, val: Value(<ZST>) }
    }

    bb65: {
        _66 = &_67;                      // scope 0 at cita-chain/types/src/header.rs:204:16: 204:34
        _73 = <Header as Deref>::deref(_2) -> bb66; // scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:204:38: 204:53
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb66: {
        _72 = _73;                       // scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
        _71 = OpenHeader::quota_limit(move _72) -> bb67; // scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:204:40: 204:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a U256 {OpenHeader::quota_limit}, val: Value(<ZST>) }
    }

    bb67: {
        _70 = &_71;                      // scope 0 at cita-chain/types/src/header.rs:204:38: 204:53
        _65 = <&U256 as PartialEq>::eq(move _66, move _70) -> bb68; // scope 0 at cita-chain/types/src/header.rs:204:16: 204:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:204:16: 204:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &U256, &'b &U256) -> bool {<&U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb68: {
        _5 = move _65;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
        goto -> bb12;                    // scope 0 at cita-chain/types/src/header.rs:196:9: 204:53
    }

    bb69: {
        _77 = _78;                       // scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
        _76 = OpenHeader::proof(move _77) -> bb70; // scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:205:21: 205:26
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb70: {
        _75 = &_76;                      // scope 0 at cita-chain/types/src/header.rs:205:16: 205:28
        _82 = <Header as Deref>::deref(_2) -> bb71; // scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:205:32: 205:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb71: {
        _81 = _82;                       // scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
        _80 = OpenHeader::proof(move _81) -> bb72; // scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:205:34: 205:39
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb72: {
        _79 = &_80;                      // scope 0 at cita-chain/types/src/header.rs:205:32: 205:41
        _74 = <&libproto::Proof as PartialEq>::eq(move _75, move _79) -> bb73; // scope 0 at cita-chain/types/src/header.rs:205:16: 205:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:205:16: 205:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &libproto::Proof, &'b &libproto::Proof) -> bool {<&libproto::Proof as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb73: {
        _4 = move _74;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
        goto -> bb9;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 205:41
    }

    bb74: {
        _85 = _86;                       // scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
        _84 = OpenHeader::version(move _85) -> bb75; // scope 0 at cita-chain/types/src/header.rs:206:16: 206:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:206:21: 206:28
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u32 {OpenHeader::version}, val: Value(<ZST>) }
    }

    bb75: {
        _89 = <Header as Deref>::deref(_2) -> bb76; // scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:206:34: 206:45
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb76: {
        _88 = _89;                       // scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
        _87 = OpenHeader::version(move _88) -> bb77; // scope 0 at cita-chain/types/src/header.rs:206:34: 206:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:206:36: 206:43
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u32 {OpenHeader::version}, val: Value(<ZST>) }
    }

    bb77: {
        _83 = Eq(move _84, move _87);    // scope 0 at cita-chain/types/src/header.rs:206:16: 206:45
        _3 = move _83;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
        goto -> bb6;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 206:45
    }

    bb78: {
        _93 = _94;                       // scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
        _92 = OpenHeader::proposer(move _93) -> bb79; // scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:207:21: 207:29
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H160 {OpenHeader::proposer}, val: Value(<ZST>) }
    }

    bb79: {
        _91 = &_92;                      // scope 0 at cita-chain/types/src/header.rs:207:16: 207:31
        _98 = <Header as Deref>::deref(_2) -> bb80; // scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:207:35: 207:47
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb80: {
        _97 = _98;                       // scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
        _96 = OpenHeader::proposer(move _97) -> bb81; // scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:207:37: 207:45
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H160 {OpenHeader::proposer}, val: Value(<ZST>) }
    }

    bb81: {
        _95 = &_96;                      // scope 0 at cita-chain/types/src/header.rs:207:35: 207:47
        _90 = <&H160 as PartialEq>::eq(move _91, move _95) -> bb82; // scope 0 at cita-chain/types/src/header.rs:207:16: 207:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:207:16: 207:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &H160, &'b &H160) -> bool {<&H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb82: {
        _0 = move _90;                   // scope 0 at cita-chain/types/src/header.rs:196:9: 207:47
        goto -> bb3;                     // scope 0 at cita-chain/types/src/header.rs:196:9: 207:47
    }
}

fn header::<impl at cita-chain/types/src/header.rs:211:1: 211:24>::default() -> Header {
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:213:13: 213:23
    let mut _1: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:214:26: 214:47
    let mut _2: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/header.rs:217:24: 217:35
    let mut _3: &cita_types::Bloom;      // in scope 0 at cita-chain/types/src/header.rs:217:24: 217:35
    let _4: &header::ZERO_BLOOM;         // in scope 0 at cita-chain/types/src/header.rs:217:25: 217:35
    let mut _5: cita_types::U256;        // in scope 0 at cita-chain/types/src/header.rs:218:25: 218:40
    let mut _6: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:219:19: 219:23
    let _7: ();                          // in scope 0 at cita-chain/types/src/header.rs:221:9: 221:24
    let mut _8: &mut header::Header;     // in scope 0 at cita-chain/types/src/header.rs:221:9: 221:24
    scope 1 {
        debug header => _0;              // in scope 1 at cita-chain/types/src/header.rs:213:13: 213:23
    }

    bb0: {
        _1 = <OpenHeader as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/header.rs:214:26: 214:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:214:26: 214:45
                                         // + literal: Const { ty: fn() -> OpenHeader {<OpenHeader as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const {alloc97: &ZERO_BLOOM}; // scope 0 at cita-chain/types/src/header.rs:217:25: 217:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:217:25: 217:35
                                         // + literal: Const { ty: &ZERO_BLOOM, val: Value(Scalar(alloc97)) }
        _3 = <ZERO_BLOOM as Deref>::deref(_4) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/types/src/header.rs:217:24: 217:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:217:24: 217:35
                                         // + literal: Const { ty: for<'a> fn(&'a ZERO_BLOOM) -> &'a <ZERO_BLOOM as Deref>::Target {<ZERO_BLOOM as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = (*_3);                      // scope 0 at cita-chain/types/src/header.rs:217:24: 217:35
        _5 = <U256 as Default>::default() -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/types/src/header.rs:218:25: 218:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:218:25: 218:38
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/header.rs:219:19: 219:23
        _0 = Header { open_header: move _1, state_root: const _, receipts_root: const _, log_bloom: move _2, quota_used: move _5, hash: move _6 }; // scope 0 at cita-chain/types/src/header.rs:213:26: 220:10
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:215:25: 215:38
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:216:28: 216:41
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
        _8 = &mut _0;                    // scope 1 at cita-chain/types/src/header.rs:221:9: 221:24
        _7 = Header::rehash(move _8) -> [return: bb4, unwind: bb5]; // scope 1 at cita-chain/types/src/header.rs:221:9: 221:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:221:16: 221:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) {Header::rehash}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:223:6: 223:6
    }

    bb5 (cleanup): {
        drop(_0) -> bb7;                 // scope 0 at cita-chain/types/src/header.rs:223:5: 223:6
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at cita-chain/types/src/header.rs:220:9: 220:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:212:5: 223:6
    }
}

alloc97 (static: ZERO_BLOOM, size: 0, align: 1) {}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::new(_1: OpenHeader) -> Header {
    debug header => _1;                  // in scope 0 at cita-chain/types/src/header.rs:227:16: 227:22
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:227:39: 227:43
    let mut _2: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:229:26: 229:32
    let mut _3: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/header.rs:232:24: 232:35
    let mut _4: &cita_types::Bloom;      // in scope 0 at cita-chain/types/src/header.rs:232:24: 232:35
    let _5: &header::ZERO_BLOOM;         // in scope 0 at cita-chain/types/src/header.rs:232:25: 232:35
    let mut _6: cita_types::U256;        // in scope 0 at cita-chain/types/src/header.rs:233:25: 233:40
    let mut _7: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:234:19: 234:23

    bb0: {
        _2 = move _1;                    // scope 0 at cita-chain/types/src/header.rs:229:26: 229:32
        _5 = const {alloc97: &ZERO_BLOOM}; // scope 0 at cita-chain/types/src/header.rs:232:25: 232:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:232:25: 232:35
                                         // + literal: Const { ty: &ZERO_BLOOM, val: Value(Scalar(alloc97)) }
        _4 = <ZERO_BLOOM as Deref>::deref(_5) -> [return: bb1, unwind: bb3]; // scope 0 at cita-chain/types/src/header.rs:232:24: 232:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:232:24: 232:35
                                         // + literal: Const { ty: for<'a> fn(&'a ZERO_BLOOM) -> &'a <ZERO_BLOOM as Deref>::Target {<ZERO_BLOOM as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (*_4);                      // scope 0 at cita-chain/types/src/header.rs:232:24: 232:35
        _6 = <U256 as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/header.rs:233:25: 233:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:233:25: 233:38
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/header.rs:234:19: 234:23
        _0 = Header { open_header: move _2, state_root: const _, receipts_root: const _, log_bloom: move _3, quota_used: move _6, hash: move _7 }; // scope 0 at cita-chain/types/src/header.rs:228:9: 235:10
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:230:25: 230:38
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:231:28: 231:41
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
        return;                          // scope 0 at cita-chain/types/src/header.rs:236:6: 236:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/header.rs:235:9: 235:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:227:5: 236:6
    }
}

alloc97 (static: ZERO_BLOOM, size: 0, align: 1) {}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::open_header(_1: &Header) -> &OpenHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:238:24: 238:29
    let mut _0: &header::OpenHeader;     // return place in scope 0 at cita-chain/types/src/header.rs:239:9: 239:26

    bb0: {
        _0 = &((*_1).0: header::OpenHeader); // scope 0 at cita-chain/types/src/header.rs:239:9: 239:26
        return;                          // scope 0 at cita-chain/types/src/header.rs:240:6: 240:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::state_root(_1: &Header) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:242:23: 242:28
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/types/src/header.rs:243:9: 243:25

    bb0: {
        _0 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:243:9: 243:25
        return;                          // scope 0 at cita-chain/types/src/header.rs:244:6: 244:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::receipts_root(_1: &Header) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:246:26: 246:31
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/types/src/header.rs:247:9: 247:28

    bb0: {
        _0 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:247:9: 247:28
        return;                          // scope 0 at cita-chain/types/src/header.rs:248:6: 248:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::log_bloom(_1: &Header) -> &cita_types::Bloom {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:249:22: 249:27
    let mut _0: &cita_types::Bloom;      // return place in scope 0 at cita-chain/types/src/header.rs:250:9: 250:24

    bb0: {
        _0 = &((*_1).3: cita_types::Bloom); // scope 0 at cita-chain/types/src/header.rs:250:9: 250:24
        return;                          // scope 0 at cita-chain/types/src/header.rs:251:6: 251:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::quota_used(_1: &Header) -> &U256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:252:23: 252:28
    let mut _0: &cita_types::U256;       // return place in scope 0 at cita-chain/types/src/header.rs:253:9: 253:25

    bb0: {
        _0 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:253:9: 253:25
        return;                          // scope 0 at cita-chain/types/src/header.rs:254:6: 254:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_state_root(_1: &mut Header, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:256:27: 256:36
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:256:38: 256:39
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:256:47: 256:47
    let _3: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:258:9: 258:25

    bb0: {
        ((*_1).1: cita_types::H256) = _2; // scope 0 at cita-chain/types/src/header.rs:257:9: 257:28
        _3 = Header::new_dirty(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:258:9: 258:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:258:14: 258:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:259:6: 259:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_receipts_root(_1: &mut Header, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:260:30: 260:39
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:260:41: 260:42
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:260:50: 260:50
    let _3: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:262:9: 262:25

    bb0: {
        ((*_1).2: cita_types::H256) = _2; // scope 0 at cita-chain/types/src/header.rs:261:9: 261:31
        _3 = Header::new_dirty(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:262:9: 262:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:262:14: 262:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:263:6: 263:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_log_bloom(_1: &mut Header, _2: cita_types::Bloom) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:264:26: 264:35
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:264:37: 264:38
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:264:47: 264:47

    bb0: {
        ((*_1).3: cita_types::Bloom) = _2; // scope 0 at cita-chain/types/src/header.rs:265:9: 265:27
        return;                          // scope 0 at cita-chain/types/src/header.rs:266:6: 266:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_quota_used(_1: &mut Header, _2: U256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:267:27: 267:36
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:267:38: 267:39
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:267:47: 267:47
    let _3: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:269:9: 269:25

    bb0: {
        ((*_1).4: cita_types::U256) = _2; // scope 0 at cita-chain/types/src/header.rs:268:9: 268:28
        _3 = Header::new_dirty(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:269:9: 269:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:269:14: 269:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:270:6: 270:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_quota_limit(_1: &mut Header, _2: U256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:271:28: 271:37
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:271:39: 271:40
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:271:48: 271:48
    let mut _3: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:272:9: 272:25
    let _4: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:273:9: 273:25

    bb0: {
        _3 = <Header as DerefMut>::deref_mut(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:272:9: 272:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:272:9: 272:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        ((*_3).4: cita_types::U256) = _2; // scope 0 at cita-chain/types/src/header.rs:272:9: 272:29
        _4 = Header::new_dirty(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:273:9: 273:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:273:14: 273:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:274:6: 274:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_version(_1: &mut Header, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:275:24: 275:33
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:275:35: 275:36
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:275:43: 275:43
    let mut _3: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:276:9: 276:21
    let _4: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:277:9: 277:25

    bb0: {
        _3 = <Header as DerefMut>::deref_mut(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:276:9: 276:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:276:9: 276:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        ((*_3).6: u32) = _2;             // scope 0 at cita-chain/types/src/header.rs:276:9: 276:25
        _4 = Header::new_dirty(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:277:9: 277:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:277:14: 277:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:278:6: 278:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_proof(_1: &mut Header, _2: libproto::Proof) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:279:22: 279:31
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:279:33: 279:34
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:279:48: 279:48
    let mut _3: libproto::Proof;         // in scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
    let mut _4: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
    let _5: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:281:9: 281:25
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/header.rs:280:22: 280:23

    bb0: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
        _6 = const true;                 // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
        _3 = move _2;                    // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
        _4 = <Header as DerefMut>::deref_mut(_1) -> [return: bb1, unwind: bb7]; // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:280:9: 280:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        drop(((*_4).5: libproto::Proof)) -> [return: bb2, unwind: bb3]; // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
    }

    bb2: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
        ((*_4).5: libproto::Proof) = move _3; // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
        _5 = Header::new_dirty(_1) -> bb4; // scope 0 at cita-chain/types/src/header.rs:281:9: 281:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:281:14: 281:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
        ((*_4).5: libproto::Proof) = move _3; // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
        goto -> bb7;                     // scope 0 at cita-chain/types/src/header.rs:280:9: 280:19
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:282:6: 282:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:279:5: 282:6
    }

    bb6 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
    }

    bb7 (cleanup): {
        switchInt(_6) -> [0: bb5, otherwise: bb6]; // scope 0 at cita-chain/types/src/header.rs:280:22: 280:23
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_timestamp(_1: &mut Header, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:283:26: 283:35
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:283:37: 283:38
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:283:45: 283:45
    let mut _3: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:284:9: 284:23
    let _4: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:285:9: 285:25

    bb0: {
        _3 = <Header as DerefMut>::deref_mut(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:284:9: 284:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:284:9: 284:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        ((*_3).1: u64) = _2;             // scope 0 at cita-chain/types/src/header.rs:284:9: 284:27
        _4 = Header::new_dirty(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:285:9: 285:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:285:14: 285:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:286:6: 286:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_timestamp_now(_1: &mut Header, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:287:30: 287:39
    debug but_later_than => _2;          // in scope 0 at cita-chain/types/src/header.rs:287:41: 287:55
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:287:62: 287:62
    let mut _3: u64;                     // in scope 0 at cita-chain/types/src/header.rs:288:26: 288:77
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/header.rs:288:35: 288:56
    let mut _5: i64;                     // in scope 0 at cita-chain/types/src/header.rs:288:35: 288:49
    let mut _6: time::Timespec;          // in scope 0 at cita-chain/types/src/header.rs:288:35: 288:45
    let mut _7: u64;                     // in scope 0 at cita-chain/types/src/header.rs:288:58: 288:76
    let mut _8: (u64, bool);             // in scope 0 at cita-chain/types/src/header.rs:288:58: 288:76
    let mut _9: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:288:9: 288:23
    let _10: &header::Header;            // in scope 0 at cita-chain/types/src/header.rs:289:9: 289:25

    bb0: {
        _6 = get_time() -> bb1;          // scope 0 at cita-chain/types/src/header.rs:288:35: 288:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:288:35: 288:43
                                         // + literal: Const { ty: fn() -> Timespec {get_time}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = (_6.0: i64);                // scope 0 at cita-chain/types/src/header.rs:288:35: 288:49
        _4 = move _5 as u64 (IntToInt);  // scope 0 at cita-chain/types/src/header.rs:288:35: 288:56
        _8 = CheckedAdd(_2, const 1_u64); // scope 0 at cita-chain/types/src/header.rs:288:58: 288:76
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_u64) -> bb2; // scope 0 at cita-chain/types/src/header.rs:288:58: 288:76
    }

    bb2: {
        _7 = move (_8.0: u64);           // scope 0 at cita-chain/types/src/header.rs:288:58: 288:76
        _3 = std::cmp::max::<u64>(move _4, move _7) -> bb3; // scope 0 at cita-chain/types/src/header.rs:288:26: 288:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:288:26: 288:34
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {std::cmp::max::<u64>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <Header as DerefMut>::deref_mut(_1) -> bb4; // scope 0 at cita-chain/types/src/header.rs:288:9: 288:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:288:9: 288:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        ((*_9).1: u64) = move _3;        // scope 0 at cita-chain/types/src/header.rs:288:9: 288:77
        _10 = Header::new_dirty(_1) -> bb5; // scope 0 at cita-chain/types/src/header.rs:289:9: 289:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:289:14: 289:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:290:6: 290:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_number(_1: &mut Header, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:291:23: 291:32
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:291:34: 291:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:291:50: 291:50
    let mut _3: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:292:9: 292:20
    let _4: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:293:9: 293:25

    bb0: {
        _3 = <Header as DerefMut>::deref_mut(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:292:9: 292:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:292:9: 292:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        ((*_3).2: u64) = _2;             // scope 0 at cita-chain/types/src/header.rs:292:9: 292:24
        _4 = Header::new_dirty(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:293:9: 293:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:293:14: 293:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:294:6: 294:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::set_parent_hash(_1: &mut Header, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:295:28: 295:37
    debug a => _2;                       // in scope 0 at cita-chain/types/src/header.rs:295:39: 295:40
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:295:48: 295:48
    let mut _3: &mut header::OpenHeader; // in scope 0 at cita-chain/types/src/header.rs:296:9: 296:25
    let _4: &header::Header;             // in scope 0 at cita-chain/types/src/header.rs:297:9: 297:25

    bb0: {
        _3 = <Header as DerefMut>::deref_mut(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:296:9: 296:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:296:9: 296:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a mut <Header as Deref>::Target {<Header as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        ((*_3).0: cita_types::H256) = _2; // scope 0 at cita-chain/types/src/header.rs:296:9: 296:29
        _4 = Header::new_dirty(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:297:9: 297:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:297:14: 297:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) -> &'a Header {Header::new_dirty}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:298:6: 298:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::hash(_1: &Header) -> std::option::Option<H256> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:299:17: 299:22
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at cita-chain/types/src/header.rs:299:27: 299:39

    bb0: {
        _0 = ((*_1).5: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/header.rs:300:9: 300:18
        return;                          // scope 0 at cita-chain/types/src/header.rs:301:6: 301:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::rehash(_1: &mut Header) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:303:19: 303:28
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:303:30: 303:30
    let mut _2: bool;                    // in scope 0 at cita-chain/types/src/header.rs:304:12: 304:33
    let mut _3: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:304:12: 304:33
    let _4: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:304:12: 304:23
    let mut _5: &header::Header;         // in scope 0 at cita-chain/types/src/header.rs:304:12: 304:23
    let _6: cita_types::H256;            // in scope 0 at cita-chain/types/src/header.rs:305:17: 305:18
    let mut _7: &header::Header;         // in scope 0 at cita-chain/types/src/header.rs:305:21: 305:36
    let mut _8: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:306:25: 306:32
    let mut _9: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:306:30: 306:31
    scope 1 {
        debug h => _6;                   // in scope 1 at cita-chain/types/src/header.rs:305:17: 305:18
    }

    bb0: {
        _5 = &(*_1);                     // scope 0 at cita-chain/types/src/header.rs:304:12: 304:23
        _4 = Header::hash(move _5) -> bb1; // scope 0 at cita-chain/types/src/header.rs:304:12: 304:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:304:17: 304:21
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at cita-chain/types/src/header.rs:304:12: 304:33
        _2 = std::option::Option::<H256>::is_none(move _3) -> bb2; // scope 0 at cita-chain/types/src/header.rs:304:12: 304:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:304:24: 304:31
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H256>) -> bool {std::option::Option::<H256>::is_none}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3]; // scope 0 at cita-chain/types/src/header.rs:304:12: 304:33
    }

    bb3: {
        _7 = &(*_1);                     // scope 0 at cita-chain/types/src/header.rs:305:21: 305:36
        _6 = Header::rlp_hash(move _7) -> bb4; // scope 0 at cita-chain/types/src/header.rs:305:21: 305:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:305:26: 305:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> H256 {Header::rlp_hash}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _6;                         // scope 1 at cita-chain/types/src/header.rs:306:30: 306:31
        _8 = std::option::Option::<H256>::Some(move _9); // scope 1 at cita-chain/types/src/header.rs:306:25: 306:32
        ((*_1).5: std::option::Option<cita_types::H256>) = move _8; // scope 1 at cita-chain/types/src/header.rs:306:13: 306:32
        goto -> bb5;                     // scope 0 at cita-chain/types/src/header.rs:304:9: 307:10
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:308:6: 308:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::new_dirty(_1: &mut Header) -> &Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:310:22: 310:31
    let mut _0: &header::Header;         // return place in scope 0 at cita-chain/types/src/header.rs:310:36: 310:41
    let mut _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:311:21: 311:25

    bb0: {
        _2 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/header.rs:311:21: 311:25
        ((*_1).5: std::option::Option<cita_types::H256>) = move _2; // scope 0 at cita-chain/types/src/header.rs:311:9: 311:25
        _0 = &(*_1);                     // scope 0 at cita-chain/types/src/header.rs:312:9: 312:13
        return;                          // scope 0 at cita-chain/types/src/header.rs:313:6: 313:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::stream_rlp(_1: &Header, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:315:23: 315:28
    debug s => _2;                       // in scope 0 at cita-chain/types/src/header.rs:315:30: 315:31
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:315:49: 315:49
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/header.rs:316:9: 316:25
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/header.rs:317:9: 317:36
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:317:18: 317:35
    let _6: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:317:19: 317:35
    let _7: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/header.rs:318:9: 318:35
    let _8: &cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:318:18: 318:34
    let _9: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/header.rs:319:9: 319:42
    let _10: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:319:18: 319:41
    let _11: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:319:19: 319:41
    let _12: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:320:9: 320:38
    let _13: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:320:18: 320:37
    let _14: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:321:9: 321:34
    let _15: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/header.rs:321:18: 321:33
    let _16: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:322:9: 322:31
    let _17: &u64;                       // in scope 0 at cita-chain/types/src/header.rs:322:18: 322:30
    let _18: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:322:19: 322:30
    let _19: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:323:9: 323:36
    let _20: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:323:18: 323:35
    let _21: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:323:19: 323:35
    let _22: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:324:9: 324:35
    let _23: &cita_types::U256;          // in scope 0 at cita-chain/types/src/header.rs:324:18: 324:34
    let _24: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:325:9: 325:34
    let _25: &u64;                       // in scope 0 at cita-chain/types/src/header.rs:325:18: 325:33
    let _26: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:325:19: 325:33
    let _27: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:326:9: 326:32
    let _28: &u32;                       // in scope 0 at cita-chain/types/src/header.rs:326:18: 326:31
    let _29: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:326:19: 326:31
    let _30: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:327:9: 327:30
    let _31: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:327:18: 327:29
    let _32: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:327:19: 327:29
    let _33: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/header.rs:328:9: 328:33
    let _34: &cita_types::H160;          // in scope 0 at cita-chain/types/src/header.rs:328:18: 328:32
    let _35: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:328:19: 328:32

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 12_usize) -> bb1; // scope 0 at cita-chain/types/src/header.rs:316:9: 316:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:316:11: 316:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = <Header as Deref>::deref(_1) -> bb2; // scope 0 at cita-chain/types/src/header.rs:317:19: 317:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:317:19: 317:35
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &((*_6).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:317:18: 317:35
        _4 = rlp::RlpStream::append::<H256>(_2, _5) -> bb3; // scope 0 at cita-chain/types/src/header.rs:317:9: 317:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:317:11: 317:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:318:18: 318:34
        _7 = rlp::RlpStream::append::<H256>(_2, _8) -> bb4; // scope 0 at cita-chain/types/src/header.rs:318:9: 318:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:318:11: 318:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = <Header as Deref>::deref(_1) -> bb5; // scope 0 at cita-chain/types/src/header.rs:319:19: 319:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:319:19: 319:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &((*_11).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:319:18: 319:41
        _9 = rlp::RlpStream::append::<H256>(_2, _10) -> bb6; // scope 0 at cita-chain/types/src/header.rs:319:9: 319:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:319:11: 319:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:320:18: 320:37
        _12 = rlp::RlpStream::append::<H256>(_2, _13) -> bb7; // scope 0 at cita-chain/types/src/header.rs:320:9: 320:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:320:11: 320:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &((*_1).3: cita_types::Bloom); // scope 0 at cita-chain/types/src/header.rs:321:18: 321:33
        _14 = rlp::RlpStream::append::<cita_types::Bloom>(_2, _15) -> bb8; // scope 0 at cita-chain/types/src/header.rs:321:9: 321:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:321:11: 321:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b cita_types::Bloom) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = <Header as Deref>::deref(_1) -> bb9; // scope 0 at cita-chain/types/src/header.rs:322:19: 322:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:322:19: 322:30
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = &((*_18).2: u64);          // scope 0 at cita-chain/types/src/header.rs:322:18: 322:30
        _16 = rlp::RlpStream::append::<u64>(_2, _17) -> bb10; // scope 0 at cita-chain/types/src/header.rs:322:9: 322:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:322:11: 322:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u64) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u64>}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = <Header as Deref>::deref(_1) -> bb11; // scope 0 at cita-chain/types/src/header.rs:323:19: 323:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:323:19: 323:35
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = &((*_21).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:323:18: 323:35
        _19 = rlp::RlpStream::append::<U256>(_2, _20) -> bb12; // scope 0 at cita-chain/types/src/header.rs:323:9: 323:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:323:11: 323:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:324:18: 324:34
        _22 = rlp::RlpStream::append::<U256>(_2, _23) -> bb13; // scope 0 at cita-chain/types/src/header.rs:324:9: 324:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:324:11: 324:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb13: {
        _26 = <Header as Deref>::deref(_1) -> bb14; // scope 0 at cita-chain/types/src/header.rs:325:19: 325:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:325:19: 325:33
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = &((*_26).1: u64);          // scope 0 at cita-chain/types/src/header.rs:325:18: 325:33
        _24 = rlp::RlpStream::append::<u64>(_2, _25) -> bb15; // scope 0 at cita-chain/types/src/header.rs:325:9: 325:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:325:11: 325:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u64) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u64>}, val: Value(<ZST>) }
    }

    bb15: {
        _29 = <Header as Deref>::deref(_1) -> bb16; // scope 0 at cita-chain/types/src/header.rs:326:19: 326:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:326:19: 326:31
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _28 = &((*_29).6: u32);          // scope 0 at cita-chain/types/src/header.rs:326:18: 326:31
        _27 = rlp::RlpStream::append::<u32>(_2, _28) -> bb17; // scope 0 at cita-chain/types/src/header.rs:326:9: 326:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:326:11: 326:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u32) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u32>}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = <Header as Deref>::deref(_1) -> bb18; // scope 0 at cita-chain/types/src/header.rs:327:19: 327:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:327:19: 327:29
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb18: {
        _31 = &((*_32).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:327:18: 327:29
        _30 = rlp::RlpStream::append::<libproto::Proof>(_2, _31) -> bb19; // scope 0 at cita-chain/types/src/header.rs:327:9: 327:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:327:11: 327:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b libproto::Proof) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb19: {
        _35 = <Header as Deref>::deref(_1) -> bb20; // scope 0 at cita-chain/types/src/header.rs:328:19: 328:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:328:19: 328:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _34 = &((*_35).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:328:18: 328:32
        _33 = rlp::RlpStream::append::<H160>(_2, _34) -> bb21; // scope 0 at cita-chain/types/src/header.rs:328:9: 328:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:328:11: 328:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H160>}, val: Value(<ZST>) }
    }

    bb21: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:329:6: 329:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::rlp(_1: &Header) -> Vec<u8> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:331:16: 331:21
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/header.rs:331:26: 331:31
    let mut _2: rlp::RlpStream;          // in scope 0 at cita-chain/types/src/header.rs:332:13: 332:18
    let _3: ();                          // in scope 0 at cita-chain/types/src/header.rs:333:9: 333:32
    let mut _4: &mut rlp::RlpStream;     // in scope 0 at cita-chain/types/src/header.rs:333:25: 333:31
    let mut _5: rlp::RlpStream;          // in scope 0 at cita-chain/types/src/header.rs:334:9: 334:10
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/header.rs:335:5: 335:6
    scope 1 {
        debug s => _2;                   // in scope 1 at cita-chain/types/src/header.rs:332:13: 332:18
    }

    bb0: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:332:13: 332:18
        _6 = const true;                 // scope 0 at cita-chain/types/src/header.rs:332:21: 332:37
        _2 = rlp::RlpStream::new() -> bb1; // scope 0 at cita-chain/types/src/header.rs:332:21: 332:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:332:21: 332:35
                                         // + literal: Const { ty: fn() -> rlp::RlpStream {rlp::RlpStream::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at cita-chain/types/src/header.rs:333:25: 333:31
        _3 = Header::stream_rlp(_1, _4) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/types/src/header.rs:333:9: 333:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:333:14: 333:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Header, &'b mut rlp::RlpStream) {Header::stream_rlp}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const false;                // scope 1 at cita-chain/types/src/header.rs:334:9: 334:10
        _5 = move _2;                    // scope 1 at cita-chain/types/src/header.rs:334:9: 334:10
        _0 = rlp::RlpStream::out(move _5) -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/types/src/header.rs:334:9: 334:16
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:334:11: 334:14
                                         // + literal: Const { ty: fn(rlp::RlpStream) -> Vec<u8> {rlp::RlpStream::out}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = const false;                // scope 0 at cita-chain/types/src/header.rs:335:5: 335:6
        return;                          // scope 0 at cita-chain/types/src/header.rs:335:6: 335:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:331:5: 335:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/header.rs:335:5: 335:6
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/header.rs:335:5: 335:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::rlp_hash(_1: &Header) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:338:21: 338:26
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/header.rs:338:31: 338:35
    let mut _2: &std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:339:9: 339:32
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/types/src/header.rs:339:9: 339:19

    bb0: {
        _3 = Header::rlp(_1) -> bb1;     // scope 0 at cita-chain/types/src/header.rs:339:9: 339:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:339:14: 339:17
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Vec<u8> {Header::rlp}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at cita-chain/types/src/header.rs:339:9: 339:32
        _0 = <Vec<u8> as Hashable>::crypt_hash(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/types/src/header.rs:339:9: 339:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:339:20: 339:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 0 at cita-chain/types/src/header.rs:340:5: 340:6
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:340:6: 340:6
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at cita-chain/types/src/header.rs:340:5: 340:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:338:5: 340:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::protobuf(_1: &Header) -> libproto::BlockHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:343:21: 343:26
    let mut _0: libproto::BlockHeader;   // return place in scope 0 at cita-chain/types/src/header.rs:344:13: 344:19
    let _2: ();                          // in scope 0 at cita-chain/types/src/header.rs:345:9: 345:51
    let mut _3: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:345:9: 345:51
    let mut _4: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/header.rs:345:25: 345:50
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/header.rs:345:25: 345:50
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/header.rs:345:25: 345:50
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:345:25: 345:50
    let _8: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:345:25: 345:41
    let _9: ();                          // in scope 0 at cita-chain/types/src/header.rs:346:9: 346:41
    let mut _10: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:346:9: 346:41
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/header.rs:346:26: 346:40
    let mut _12: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:346:26: 346:40
    let _13: ();                         // in scope 0 at cita-chain/types/src/header.rs:347:9: 347:35
    let mut _14: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:347:9: 347:35
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/header.rs:347:23: 347:34
    let mut _16: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:347:23: 347:34
    let _17: ();                         // in scope 0 at cita-chain/types/src/header.rs:348:9: 348:52
    let mut _18: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:348:9: 348:52
    let mut _19: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:348:27: 348:51
    let mut _20: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:348:27: 348:51
    let _21: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:348:27: 348:51
    let mut _22: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:348:27: 348:51
    let _23: ();                         // in scope 0 at cita-chain/types/src/header.rs:349:9: 349:58
    let mut _24: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:349:9: 349:58
    let mut _25: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:349:30: 349:57
    let mut _26: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:349:30: 349:57
    let _27: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:349:30: 349:57
    let mut _28: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:349:30: 349:57
    let _29: ();                         // in scope 0 at cita-chain/types/src/header.rs:350:9: 350:66
    let mut _30: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:350:9: 350:66
    let mut _31: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:350:34: 350:65
    let mut _32: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:350:34: 350:65
    let _33: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:350:34: 350:65
    let mut _34: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:350:34: 350:65
    let _35: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:350:34: 350:56
    let _36: ();                         // in scope 0 at cita-chain/types/src/header.rs:351:9: 351:54
    let mut _37: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:351:9: 351:54
    let mut _38: u64;                    // in scope 0 at cita-chain/types/src/header.rs:351:27: 351:53
    let mut _39: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:351:37: 351:52
    let _40: ();                         // in scope 0 at cita-chain/types/src/header.rs:352:9: 352:55
    let mut _41: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:352:9: 352:55
    let mut _42: u64;                    // in scope 0 at cita-chain/types/src/header.rs:352:28: 352:54
    let mut _43: &cita_types::U256;      // in scope 0 at cita-chain/types/src/header.rs:352:28: 352:54
    let _44: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:352:28: 352:44
    let _45: ();                         // in scope 0 at cita-chain/types/src/header.rs:353:9: 353:41
    let mut _46: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:353:9: 353:41
    let mut _47: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:353:22: 353:40
    let mut _48: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:353:22: 353:40
    let _49: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:353:22: 353:32
    let _50: ();                         // in scope 0 at cita-chain/types/src/header.rs:354:9: 354:48
    let mut _51: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:354:9: 354:48
    let mut _52: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:354:25: 354:47
    let mut _53: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:354:25: 354:47
    let _54: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:354:25: 354:47
    let mut _55: &cita_types::H160;      // in scope 0 at cita-chain/types/src/header.rs:354:25: 354:47
    let _56: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:354:25: 354:38
    scope 1 {
        debug bh => _0;                  // in scope 1 at cita-chain/types/src/header.rs:344:13: 344:19
    }

    bb0: {
        _0 = libproto::BlockHeader::new() -> bb1; // scope 0 at cita-chain/types/src/header.rs:344:22: 344:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:344:22: 344:43
                                         // + literal: Const { ty: fn() -> libproto::BlockHeader {libproto::BlockHeader::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/header.rs:345:9: 345:51
        _8 = <Header as Deref>::deref(_1) -> [return: bb2, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:345:25: 345:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:345:25: 345:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_8).0: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:345:25: 345:50
        _6 = <H256 as Deref>::deref(move _7) -> [return: bb3, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:345:25: 345:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:345:25: 345:50
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/header.rs:345:25: 345:50
        _4 = slice::<impl [u8]>::to_vec(move _5) -> [return: bb4, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:345:25: 345:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:345:42: 345:48
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = libproto::BlockHeader::set_prevhash(move _3, move _4) -> [return: bb5, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:345:9: 345:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:345:12: 345:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_prevhash}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:346:9: 346:41
        _12 = <Header as Deref>::deref(_1) -> [return: bb6, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:346:26: 346:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:346:26: 346:40
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = ((*_12).1: u64);           // scope 1 at cita-chain/types/src/header.rs:346:26: 346:40
        _9 = libproto::BlockHeader::set_timestamp(move _10, move _11) -> [return: bb7, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:346:9: 346:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:346:12: 346:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_timestamp}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:347:9: 347:35
        _16 = <Header as Deref>::deref(_1) -> [return: bb8, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:347:23: 347:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:347:23: 347:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = ((*_16).2: u64);           // scope 1 at cita-chain/types/src/header.rs:347:23: 347:34
        _13 = libproto::BlockHeader::set_height(move _14, move _15) -> [return: bb9, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:347:9: 347:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:347:12: 347:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_height}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:348:9: 348:52
        _22 = &((*_1).1: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:348:27: 348:51
        _21 = <H256 as Deref>::deref(move _22) -> [return: bb10, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:348:27: 348:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:348:27: 348:51
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = _21;                       // scope 1 at cita-chain/types/src/header.rs:348:27: 348:51
        _19 = slice::<impl [u8]>::to_vec(move _20) -> [return: bb11, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:348:27: 348:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:348:43: 348:49
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb11: {
        _17 = libproto::BlockHeader::set_state_root(move _18, move _19) -> [return: bb12, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:348:9: 348:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:348:12: 348:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_state_root}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:349:9: 349:58
        _28 = &((*_1).2: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:349:30: 349:57
        _27 = <H256 as Deref>::deref(move _28) -> [return: bb13, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:349:30: 349:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:349:30: 349:57
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _26 = _27;                       // scope 1 at cita-chain/types/src/header.rs:349:30: 349:57
        _25 = slice::<impl [u8]>::to_vec(move _26) -> [return: bb14, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:349:30: 349:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:349:49: 349:55
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = libproto::BlockHeader::set_receipts_root(move _24, move _25) -> [return: bb15, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:349:9: 349:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:349:12: 349:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_receipts_root}, val: Value(<ZST>) }
    }

    bb15: {
        _30 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:350:9: 350:66
        _35 = <Header as Deref>::deref(_1) -> [return: bb16, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:350:34: 350:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:350:34: 350:56
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &((*_35).3: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:350:34: 350:65
        _33 = <H256 as Deref>::deref(move _34) -> [return: bb17, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:350:34: 350:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:350:34: 350:65
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = _33;                       // scope 1 at cita-chain/types/src/header.rs:350:34: 350:65
        _31 = slice::<impl [u8]>::to_vec(move _32) -> [return: bb18, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:350:34: 350:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:350:57: 350:63
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = libproto::BlockHeader::set_transactions_root(move _30, move _31) -> [return: bb19, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:350:9: 350:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:350:12: 350:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_transactions_root}, val: Value(<ZST>) }
    }

    bb19: {
        _37 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:351:9: 351:54
        _39 = ((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/header.rs:351:37: 351:52
        _38 = <u64 as From<U256>>::from(move _39) -> [return: bb20, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:351:27: 351:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:351:27: 351:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(U256) -> u64 {<u64 as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb20: {
        _36 = libproto::BlockHeader::set_quota_used(move _37, move _38) -> [return: bb21, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:351:9: 351:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:351:12: 351:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_quota_used}, val: Value(<ZST>) }
    }

    bb21: {
        _41 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:352:9: 352:55
        _44 = <Header as Deref>::deref(_1) -> [return: bb22, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:352:28: 352:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:352:28: 352:44
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb22: {
        _43 = &((*_44).4: cita_types::U256); // scope 1 at cita-chain/types/src/header.rs:352:28: 352:54
        _42 = U256::low_u64(move _43) -> [return: bb23, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:352:28: 352:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:352:45: 352:52
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::low_u64}, val: Value(<ZST>) }
    }

    bb23: {
        _40 = libproto::BlockHeader::set_quota_limit(move _41, move _42) -> [return: bb24, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:352:9: 352:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:352:12: 352:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_quota_limit}, val: Value(<ZST>) }
    }

    bb24: {
        _46 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:353:9: 353:41
        _49 = <Header as Deref>::deref(_1) -> [return: bb25, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:353:22: 353:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:353:22: 353:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _48 = &((*_49).5: libproto::Proof); // scope 1 at cita-chain/types/src/header.rs:353:22: 353:40
        _47 = <libproto::Proof as Clone>::clone(move _48) -> [return: bb26, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:353:22: 353:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:353:33: 353:38
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb26: {
        _45 = libproto::BlockHeader::set_proof(move _46, move _47) -> [return: bb27, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:353:9: 353:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:353:12: 353:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, libproto::Proof) {libproto::BlockHeader::set_proof}, val: Value(<ZST>) }
    }

    bb27: {
        _51 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:354:9: 354:48
        _56 = <Header as Deref>::deref(_1) -> [return: bb28, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:354:25: 354:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:354:25: 354:38
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _55 = &((*_56).7: cita_types::H160); // scope 1 at cita-chain/types/src/header.rs:354:25: 354:47
        _54 = <H160 as Deref>::deref(move _55) -> [return: bb29, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:354:25: 354:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:354:25: 354:47
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _53 = _54;                       // scope 1 at cita-chain/types/src/header.rs:354:25: 354:47
        _52 = slice::<impl [u8]>::to_vec(move _53) -> [return: bb30, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:354:25: 354:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:354:39: 354:45
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb30: {
        _50 = libproto::BlockHeader::set_proposer(move _51, move _52) -> [return: bb31, unwind: bb32]; // scope 1 at cita-chain/types/src/header.rs:354:9: 354:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:354:12: 354:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_proposer}, val: Value(<ZST>) }
    }

    bb31: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:356:6: 356:6
    }

    bb32 (cleanup): {
        drop(_0) -> bb33;                // scope 0 at cita-chain/types/src/header.rs:356:5: 356:6
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:343:5: 356:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::proposal(_1: &Header) -> Header {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:359:21: 359:26
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:360:13: 360:23
    let mut _2: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:361:26: 370:14
    let mut _3: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:362:30: 362:58
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/header.rs:363:28: 363:54
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/header.rs:364:25: 364:48
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/types/src/header.rs:365:36: 365:70
    let mut _7: cita_types::U256;        // in scope 0 at cita-chain/types/src/header.rs:366:30: 366:58
    let mut _8: libproto::Proof;         // in scope 0 at cita-chain/types/src/header.rs:367:24: 367:44
    let mut _9: &libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:367:24: 367:44
    let _10: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
    let mut _11: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
    let _12: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
    let mut _13: u32;                    // in scope 0 at cita-chain/types/src/header.rs:368:26: 368:50
    let mut _14: cita_types::H160;       // in scope 0 at cita-chain/types/src/header.rs:369:27: 369:52
    let mut _15: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:371:19: 371:23
    let mut _16: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/header.rs:372:24: 372:35
    let mut _17: &cita_types::Bloom;     // in scope 0 at cita-chain/types/src/header.rs:372:24: 372:35
    let _18: &header::ZERO_BLOOM;        // in scope 0 at cita-chain/types/src/header.rs:372:25: 372:35
    let mut _19: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:375:25: 375:37
    let _20: ();                         // in scope 0 at cita-chain/types/src/header.rs:377:9: 377:24
    let mut _21: &mut header::Header;    // in scope 0 at cita-chain/types/src/header.rs:377:9: 377:24
    scope 1 {
        debug header => _0;              // in scope 1 at cita-chain/types/src/header.rs:360:13: 360:23
    }

    bb0: {
        _3 = (((*_1).0: header::OpenHeader).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:362:30: 362:58
        _4 = (((*_1).0: header::OpenHeader).1: u64); // scope 0 at cita-chain/types/src/header.rs:363:28: 363:54
        _5 = (((*_1).0: header::OpenHeader).2: u64); // scope 0 at cita-chain/types/src/header.rs:364:25: 364:48
        _6 = (((*_1).0: header::OpenHeader).3: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:365:36: 365:70
        _7 = (((*_1).0: header::OpenHeader).4: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:366:30: 366:58
        _12 = <Header as Deref>::deref(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:367:24: 367:36
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = _12;                       // scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
        _10 = OpenHeader::proof(move _11) -> bb2; // scope 0 at cita-chain/types/src/header.rs:367:24: 367:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:367:29: 367:34
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 0 at cita-chain/types/src/header.rs:367:24: 367:44
        _8 = <libproto::Proof as Clone>::clone(move _9) -> bb3; // scope 0 at cita-chain/types/src/header.rs:367:24: 367:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:367:37: 367:42
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = (((*_1).0: header::OpenHeader).6: u32); // scope 0 at cita-chain/types/src/header.rs:368:26: 368:50
        _14 = (((*_1).0: header::OpenHeader).7: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:369:27: 369:52
        _2 = OpenHeader { parent_hash: move _3, timestamp: move _4, number: move _5, transactions_root: move _6, quota_limit: move _7, proof: move _8, version: move _13, proposer: move _14 }; // scope 0 at cita-chain/types/src/header.rs:361:26: 370:14
        _15 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/header.rs:371:19: 371:23
        _18 = const {alloc97: &ZERO_BLOOM}; // scope 0 at cita-chain/types/src/header.rs:372:25: 372:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:372:25: 372:35
                                         // + literal: Const { ty: &ZERO_BLOOM, val: Value(Scalar(alloc97)) }
        _17 = <ZERO_BLOOM as Deref>::deref(_18) -> [return: bb4, unwind: bb8]; // scope 0 at cita-chain/types/src/header.rs:372:24: 372:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:372:24: 372:35
                                         // + literal: Const { ty: for<'a> fn(&'a ZERO_BLOOM) -> &'a <ZERO_BLOOM as Deref>::Target {<ZERO_BLOOM as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = (*_17);                    // scope 0 at cita-chain/types/src/header.rs:372:24: 372:35
        _19 = U256::zero() -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/types/src/header.rs:375:25: 375:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:375:25: 375:35
                                         // + literal: Const { ty: fn() -> U256 {U256::zero}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Header { open_header: move _2, state_root: const _, receipts_root: const _, log_bloom: move _16, quota_used: move _19, hash: move _15 }; // scope 0 at cita-chain/types/src/header.rs:360:26: 376:10
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:373:25: 373:38
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:374:28: 374:41
                                         // + literal: Const { ty: H256, val: Unevaluated(HASH_NULL_RLP, [], None) }
        _21 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:377:9: 377:24
        _20 = Header::rehash(move _21) -> [return: bb6, unwind: bb7]; // scope 1 at cita-chain/types/src/header.rs:377:9: 377:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:377:16: 377:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) {Header::rehash}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:379:6: 379:6
    }

    bb7 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at cita-chain/types/src/header.rs:379:5: 379:6
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-chain/types/src/header.rs:376:9: 376:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:359:5: 379:6
    }
}

alloc97 (static: ZERO_BLOOM, size: 0, align: 1) {}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::proposal_protobuf(_1: &Header) -> libproto::BlockHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:382:30: 382:35
    let mut _0: libproto::BlockHeader;   // return place in scope 0 at cita-chain/types/src/header.rs:383:13: 383:19
    let _2: ();                          // in scope 0 at cita-chain/types/src/header.rs:384:9: 384:51
    let mut _3: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:384:9: 384:51
    let mut _4: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/header.rs:384:25: 384:50
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/header.rs:384:25: 384:50
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/header.rs:384:25: 384:50
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:384:25: 384:50
    let _8: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:384:25: 384:41
    let _9: ();                          // in scope 0 at cita-chain/types/src/header.rs:385:9: 385:41
    let mut _10: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:385:9: 385:41
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/header.rs:385:26: 385:40
    let mut _12: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:385:26: 385:40
    let _13: ();                         // in scope 0 at cita-chain/types/src/header.rs:386:9: 386:35
    let mut _14: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:386:9: 386:35
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/header.rs:386:23: 386:34
    let mut _16: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:386:23: 386:34
    let _17: ();                         // in scope 0 at cita-chain/types/src/header.rs:387:9: 387:66
    let mut _18: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:387:9: 387:66
    let mut _19: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:387:34: 387:65
    let mut _20: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:387:34: 387:65
    let _21: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:387:34: 387:65
    let mut _22: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:387:34: 387:65
    let _23: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:387:34: 387:56
    let _24: ();                         // in scope 0 at cita-chain/types/src/header.rs:388:9: 388:41
    let mut _25: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:388:9: 388:41
    let mut _26: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:388:22: 388:40
    let mut _27: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:388:22: 388:40
    let _28: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:388:22: 388:32
    let _29: ();                         // in scope 0 at cita-chain/types/src/header.rs:389:9: 389:48
    let mut _30: &mut libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:389:9: 389:48
    let mut _31: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:389:25: 389:47
    let mut _32: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:389:25: 389:47
    let _33: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:389:25: 389:47
    let mut _34: &cita_types::H160;      // in scope 0 at cita-chain/types/src/header.rs:389:25: 389:47
    let _35: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:389:25: 389:38
    scope 1 {
        debug bh => _0;                  // in scope 1 at cita-chain/types/src/header.rs:383:13: 383:19
    }

    bb0: {
        _0 = libproto::BlockHeader::new() -> bb1; // scope 0 at cita-chain/types/src/header.rs:383:22: 383:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:383:22: 383:43
                                         // + literal: Const { ty: fn() -> libproto::BlockHeader {libproto::BlockHeader::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/header.rs:384:9: 384:51
        _8 = <Header as Deref>::deref(_1) -> [return: bb2, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:384:25: 384:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:384:25: 384:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_8).0: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:384:25: 384:50
        _6 = <H256 as Deref>::deref(move _7) -> [return: bb3, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:384:25: 384:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:384:25: 384:50
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/header.rs:384:25: 384:50
        _4 = slice::<impl [u8]>::to_vec(move _5) -> [return: bb4, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:384:25: 384:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:384:42: 384:48
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = libproto::BlockHeader::set_prevhash(move _3, move _4) -> [return: bb5, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:384:9: 384:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:384:12: 384:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_prevhash}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:385:9: 385:41
        _12 = <Header as Deref>::deref(_1) -> [return: bb6, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:385:26: 385:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:385:26: 385:40
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = ((*_12).1: u64);           // scope 1 at cita-chain/types/src/header.rs:385:26: 385:40
        _9 = libproto::BlockHeader::set_timestamp(move _10, move _11) -> [return: bb7, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:385:9: 385:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:385:12: 385:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_timestamp}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:386:9: 386:35
        _16 = <Header as Deref>::deref(_1) -> [return: bb8, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:386:23: 386:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:386:23: 386:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = ((*_16).2: u64);           // scope 1 at cita-chain/types/src/header.rs:386:23: 386:34
        _13 = libproto::BlockHeader::set_height(move _14, move _15) -> [return: bb9, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:386:9: 386:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:386:12: 386:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, u64) {libproto::BlockHeader::set_height}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:387:9: 387:66
        _23 = <Header as Deref>::deref(_1) -> [return: bb10, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:387:34: 387:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:387:34: 387:56
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = &((*_23).3: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:387:34: 387:65
        _21 = <H256 as Deref>::deref(move _22) -> [return: bb11, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:387:34: 387:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:387:34: 387:65
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = _21;                       // scope 1 at cita-chain/types/src/header.rs:387:34: 387:65
        _19 = slice::<impl [u8]>::to_vec(move _20) -> [return: bb12, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:387:34: 387:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:387:57: 387:63
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = libproto::BlockHeader::set_transactions_root(move _18, move _19) -> [return: bb13, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:387:9: 387:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:387:12: 387:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_transactions_root}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:388:9: 388:41
        _28 = <Header as Deref>::deref(_1) -> [return: bb14, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:388:22: 388:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:388:22: 388:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = &((*_28).5: libproto::Proof); // scope 1 at cita-chain/types/src/header.rs:388:22: 388:40
        _26 = <libproto::Proof as Clone>::clone(move _27) -> [return: bb15, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:388:22: 388:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:388:33: 388:38
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb15: {
        _24 = libproto::BlockHeader::set_proof(move _25, move _26) -> [return: bb16, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:388:9: 388:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:388:12: 388:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, libproto::Proof) {libproto::BlockHeader::set_proof}, val: Value(<ZST>) }
    }

    bb16: {
        _30 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:389:9: 389:48
        _35 = <Header as Deref>::deref(_1) -> [return: bb17, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:389:25: 389:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:389:25: 389:38
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _34 = &((*_35).7: cita_types::H160); // scope 1 at cita-chain/types/src/header.rs:389:25: 389:47
        _33 = <H160 as Deref>::deref(move _34) -> [return: bb18, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:389:25: 389:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:389:25: 389:47
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb18: {
        _32 = _33;                       // scope 1 at cita-chain/types/src/header.rs:389:25: 389:47
        _31 = slice::<impl [u8]>::to_vec(move _32) -> [return: bb19, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:389:25: 389:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:389:39: 389:45
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb19: {
        _29 = libproto::BlockHeader::set_proposer(move _30, move _31) -> [return: bb20, unwind: bb21]; // scope 1 at cita-chain/types/src/header.rs:389:9: 389:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:389:12: 389:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockHeader, Vec<u8>) {libproto::BlockHeader::set_proposer}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:391:6: 391:6
    }

    bb21 (cleanup): {
        drop(_0) -> bb22;                // scope 0 at cita-chain/types/src/header.rs:391:5: 391:6
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:382:5: 391:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::generate_executed_header(_1: Header) -> ExecutedHeader {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:393:37: 393:41
    let mut _0: libproto::ExecutedHeader; // return place in scope 0 at cita-chain/types/src/header.rs:394:13: 394:32
    let _2: ();                          // in scope 0 at cita-chain/types/src/header.rs:395:9: 395:64
    let mut _3: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:395:9: 395:64
    let mut _4: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:63
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:63
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:63
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:63
    let _8: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:54
    let mut _9: &header::Header;         // in scope 0 at cita-chain/types/src/header.rs:395:38: 395:42
    let _10: ();                         // in scope 0 at cita-chain/types/src/header.rs:396:9: 396:54
    let mut _11: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:396:9: 396:54
    let mut _12: u64;                    // in scope 0 at cita-chain/types/src/header.rs:396:39: 396:53
    let mut _13: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:396:39: 396:53
    let mut _14: &header::Header;        // in scope 0 at cita-chain/types/src/header.rs:396:39: 396:43
    let _15: ();                         // in scope 0 at cita-chain/types/src/header.rs:397:9: 397:48
    let mut _16: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:397:9: 397:48
    let mut _17: u64;                    // in scope 0 at cita-chain/types/src/header.rs:397:36: 397:47
    let mut _18: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:397:36: 397:47
    let mut _19: &header::Header;        // in scope 0 at cita-chain/types/src/header.rs:397:36: 397:40
    let _20: ();                         // in scope 0 at cita-chain/types/src/header.rs:398:9: 398:65
    let mut _21: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:398:9: 398:65
    let mut _22: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:398:40: 398:64
    let mut _23: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:398:40: 398:64
    let _24: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:398:40: 398:64
    let mut _25: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:398:40: 398:64
    let _26: ();                         // in scope 0 at cita-chain/types/src/header.rs:399:9: 399:79
    let mut _27: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:399:9: 399:79
    let mut _28: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:78
    let mut _29: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:78
    let _30: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:78
    let mut _31: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:78
    let _32: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:69
    let mut _33: &header::Header;        // in scope 0 at cita-chain/types/src/header.rs:399:47: 399:51
    let _34: ();                         // in scope 0 at cita-chain/types/src/header.rs:400:9: 400:71
    let mut _35: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:400:9: 400:71
    let mut _36: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:400:43: 400:70
    let mut _37: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:400:43: 400:70
    let _38: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:400:43: 400:70
    let mut _39: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:400:43: 400:70
    let _40: ();                         // in scope 0 at cita-chain/types/src/header.rs:401:9: 401:63
    let mut _41: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:401:9: 401:63
    let mut _42: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:401:39: 401:62
    let mut _43: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:401:39: 401:62
    let _44: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:401:39: 401:62
    let mut _45: &cita_types::Bloom;     // in scope 0 at cita-chain/types/src/header.rs:401:39: 401:62
    let _46: ();                         // in scope 0 at cita-chain/types/src/header.rs:402:9: 402:67
    let mut _47: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:402:9: 402:67
    let mut _48: u64;                    // in scope 0 at cita-chain/types/src/header.rs:402:40: 402:66
    let mut _49: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:402:50: 402:65
    let _50: ();                         // in scope 0 at cita-chain/types/src/header.rs:403:9: 403:68
    let mut _51: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:403:9: 403:68
    let mut _52: u64;                    // in scope 0 at cita-chain/types/src/header.rs:403:41: 403:67
    let mut _53: &cita_types::U256;      // in scope 0 at cita-chain/types/src/header.rs:403:41: 403:67
    let _54: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:403:41: 403:57
    let mut _55: &header::Header;        // in scope 0 at cita-chain/types/src/header.rs:403:41: 403:45
    let _56: ();                         // in scope 0 at cita-chain/types/src/header.rs:404:9: 404:61
    let mut _57: &mut libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:404:9: 404:61
    let mut _58: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:60
    let mut _59: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:60
    let _60: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:60
    let mut _61: &cita_types::H160;      // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:60
    let _62: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:51
    let mut _63: &header::Header;        // in scope 0 at cita-chain/types/src/header.rs:404:38: 404:42
    scope 1 {
        debug executed_header => _0;     // in scope 1 at cita-chain/types/src/header.rs:394:13: 394:32
    }

    bb0: {
        _0 = ExecutedHeader::new() -> [return: bb1, unwind: bb34]; // scope 0 at cita-chain/types/src/header.rs:394:35: 394:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:394:35: 394:54
                                         // + literal: Const { ty: fn() -> ExecutedHeader {ExecutedHeader::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/header.rs:395:9: 395:64
        _9 = &_1;                        // scope 1 at cita-chain/types/src/header.rs:395:38: 395:42
        _8 = <Header as Deref>::deref(move _9) -> [return: bb2, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:395:38: 395:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:395:38: 395:54
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_8).0: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:395:38: 395:63
        _6 = <H256 as Deref>::deref(move _7) -> [return: bb3, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:395:38: 395:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:395:38: 395:63
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/header.rs:395:38: 395:63
        _4 = slice::<impl [u8]>::to_vec(move _5) -> [return: bb4, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:395:38: 395:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:395:55: 395:61
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = ExecutedHeader::set_prevhash(move _3, move _4) -> [return: bb5, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:395:9: 395:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:395:25: 395:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_prevhash}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:396:9: 396:54
        _14 = &_1;                       // scope 1 at cita-chain/types/src/header.rs:396:39: 396:43
        _13 = <Header as Deref>::deref(move _14) -> [return: bb6, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:396:39: 396:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:396:39: 396:53
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = ((*_13).1: u64);           // scope 1 at cita-chain/types/src/header.rs:396:39: 396:53
        _10 = ExecutedHeader::set_timestamp(move _11, move _12) -> [return: bb7, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:396:9: 396:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:396:25: 396:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, u64) {ExecutedHeader::set_timestamp}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:397:9: 397:48
        _19 = &_1;                       // scope 1 at cita-chain/types/src/header.rs:397:36: 397:40
        _18 = <Header as Deref>::deref(move _19) -> [return: bb8, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:397:36: 397:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:397:36: 397:47
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = ((*_18).2: u64);           // scope 1 at cita-chain/types/src/header.rs:397:36: 397:47
        _15 = ExecutedHeader::set_height(move _16, move _17) -> [return: bb9, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:397:9: 397:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:397:25: 397:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, u64) {ExecutedHeader::set_height}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:398:9: 398:65
        _25 = &(_1.1: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:398:40: 398:64
        _24 = <H256 as Deref>::deref(move _25) -> [return: bb10, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:398:40: 398:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:398:40: 398:64
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = _24;                       // scope 1 at cita-chain/types/src/header.rs:398:40: 398:64
        _22 = slice::<impl [u8]>::to_vec(move _23) -> [return: bb11, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:398:40: 398:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:398:56: 398:62
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = ExecutedHeader::set_state_root(move _21, move _22) -> [return: bb12, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:398:9: 398:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:398:25: 398:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_state_root}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:399:9: 399:79
        _33 = &_1;                       // scope 1 at cita-chain/types/src/header.rs:399:47: 399:51
        _32 = <Header as Deref>::deref(move _33) -> [return: bb13, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:399:47: 399:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:399:47: 399:69
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = &((*_32).3: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:399:47: 399:78
        _30 = <H256 as Deref>::deref(move _31) -> [return: bb14, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:399:47: 399:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:399:47: 399:78
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = _30;                       // scope 1 at cita-chain/types/src/header.rs:399:47: 399:78
        _28 = slice::<impl [u8]>::to_vec(move _29) -> [return: bb15, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:399:47: 399:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:399:70: 399:76
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb15: {
        _26 = ExecutedHeader::set_transactions_root(move _27, move _28) -> [return: bb16, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:399:9: 399:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:399:25: 399:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_transactions_root}, val: Value(<ZST>) }
    }

    bb16: {
        _35 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:400:9: 400:71
        _39 = &(_1.2: cita_types::H256); // scope 1 at cita-chain/types/src/header.rs:400:43: 400:70
        _38 = <H256 as Deref>::deref(move _39) -> [return: bb17, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:400:43: 400:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:400:43: 400:70
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _37 = _38;                       // scope 1 at cita-chain/types/src/header.rs:400:43: 400:70
        _36 = slice::<impl [u8]>::to_vec(move _37) -> [return: bb18, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:400:43: 400:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:400:62: 400:68
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb18: {
        _34 = ExecutedHeader::set_receipts_root(move _35, move _36) -> [return: bb19, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:400:9: 400:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:400:25: 400:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_receipts_root}, val: Value(<ZST>) }
    }

    bb19: {
        _41 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:401:9: 401:63
        _45 = &(_1.3: cita_types::Bloom); // scope 1 at cita-chain/types/src/header.rs:401:39: 401:62
        _44 = <cita_types::Bloom as Deref>::deref(move _45) -> [return: bb20, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:401:39: 401:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:401:39: 401:62
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> &'a <cita_types::Bloom as Deref>::Target {<cita_types::Bloom as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _43 = _44;                       // scope 1 at cita-chain/types/src/header.rs:401:39: 401:62
        _42 = slice::<impl [u8]>::to_vec(move _43) -> [return: bb21, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:401:39: 401:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:401:54: 401:60
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb21: {
        _40 = ExecutedHeader::set_log_bloom(move _41, move _42) -> [return: bb22, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:401:9: 401:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:401:25: 401:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_log_bloom}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:402:9: 402:67
        _49 = (_1.4: cita_types::U256);  // scope 1 at cita-chain/types/src/header.rs:402:50: 402:65
        _48 = <u64 as From<U256>>::from(move _49) -> [return: bb23, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:402:40: 402:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:402:40: 402:49
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(U256) -> u64 {<u64 as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = ExecutedHeader::set_quota_used(move _47, move _48) -> [return: bb24, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:402:9: 402:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:402:25: 402:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, u64) {ExecutedHeader::set_quota_used}, val: Value(<ZST>) }
    }

    bb24: {
        _51 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:403:9: 403:68
        _55 = &_1;                       // scope 1 at cita-chain/types/src/header.rs:403:41: 403:45
        _54 = <Header as Deref>::deref(move _55) -> [return: bb25, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:403:41: 403:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:403:41: 403:57
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _53 = &((*_54).4: cita_types::U256); // scope 1 at cita-chain/types/src/header.rs:403:41: 403:67
        _52 = U256::low_u64(move _53) -> [return: bb26, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:403:41: 403:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:403:58: 403:65
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::low_u64}, val: Value(<ZST>) }
    }

    bb26: {
        _50 = ExecutedHeader::set_quota_limit(move _51, move _52) -> [return: bb27, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:403:9: 403:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:403:25: 403:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, u64) {ExecutedHeader::set_quota_limit}, val: Value(<ZST>) }
    }

    bb27: {
        _57 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:404:9: 404:61
        _63 = &_1;                       // scope 1 at cita-chain/types/src/header.rs:404:38: 404:42
        _62 = <Header as Deref>::deref(move _63) -> [return: bb28, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:404:38: 404:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:404:38: 404:51
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _61 = &((*_62).7: cita_types::H160); // scope 1 at cita-chain/types/src/header.rs:404:38: 404:60
        _60 = <H160 as Deref>::deref(move _61) -> [return: bb29, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:404:38: 404:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:404:38: 404:60
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _59 = _60;                       // scope 1 at cita-chain/types/src/header.rs:404:38: 404:60
        _58 = slice::<impl [u8]>::to_vec(move _59) -> [return: bb30, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:404:38: 404:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:404:52: 404:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb30: {
        _56 = ExecutedHeader::set_proposer(move _57, move _58) -> [return: bb31, unwind: bb33]; // scope 1 at cita-chain/types/src/header.rs:404:9: 404:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:404:25: 404:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut ExecutedHeader, Vec<u8>) {ExecutedHeader::set_proposer}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_1) -> bb32;                // scope 0 at cita-chain/types/src/header.rs:406:5: 406:6
    }

    bb32: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:406:6: 406:6
    }

    bb33 (cleanup): {
        drop(_0) -> bb34;                // scope 0 at cita-chain/types/src/header.rs:406:5: 406:6
    }

    bb34 (cleanup): {
        drop(_1) -> bb35;                // scope 0 at cita-chain/types/src/header.rs:406:5: 406:6
    }

    bb35 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:393:5: 406:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::from_executed_info(_1: &ExecutedInfo, _2: &OpenHeader) -> Header {
    debug info => _1;                    // in scope 0 at cita-chain/types/src/header.rs:408:31: 408:35
    debug open_header => _2;             // in scope 0 at cita-chain/types/src/header.rs:408:52: 408:63
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:409:13: 409:23
    let mut _3: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:410:26: 419:14
    let mut _4: u64;                     // in scope 0 at cita-chain/types/src/header.rs:411:25: 411:55
    let mut _5: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:411:25: 411:55
    let _6: &libproto::ExecutedHeader;   // in scope 0 at cita-chain/types/src/header.rs:411:25: 411:42
    let mut _7: cita_types::U256;        // in scope 0 at cita-chain/types/src/header.rs:412:30: 412:77
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/header.rs:412:41: 412:76
    let mut _9: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:412:41: 412:76
    let _10: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:412:41: 412:58
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/header.rs:413:28: 413:61
    let mut _12: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:413:28: 413:61
    let _13: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:413:28: 413:45
    let mut _14: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:414:36: 414:89
    let mut _15: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:414:47: 414:88
    let mut _16: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:414:47: 414:88
    let _17: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:414:47: 414:64
    let mut _18: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:415:24: 415:49
    let mut _19: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:415:24: 415:49
    let mut _20: cita_types::H160;       // in scope 0 at cita-chain/types/src/header.rs:416:27: 416:74
    let mut _21: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:416:41: 416:73
    let mut _22: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:416:41: 416:73
    let _23: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:416:41: 416:58
    let mut _24: u32;                    // in scope 0 at cita-chain/types/src/header.rs:417:26: 417:45
    let mut _25: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:418:30: 418:80
    let mut _26: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
    let _27: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
    let mut _28: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
    let _29: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:418:47: 418:64
    let mut _30: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/header.rs:420:24: 420:70
    let mut _31: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:420:36: 420:69
    let mut _32: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:420:36: 420:69
    let _33: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:420:36: 420:53
    let mut _34: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:421:25: 421:71
    let mut _35: u64;                    // in scope 0 at cita-chain/types/src/header.rs:421:36: 421:70
    let mut _36: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:421:36: 421:70
    let _37: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:421:36: 421:53
    let mut _38: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:422:28: 422:77
    let mut _39: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:422:39: 422:76
    let mut _40: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:422:39: 422:76
    let _41: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:422:39: 422:56
    let mut _42: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:423:25: 423:71
    let mut _43: &[u8];                  // in scope 0 at cita-chain/types/src/header.rs:423:36: 423:70
    let mut _44: &libproto::ExecutedHeader; // in scope 0 at cita-chain/types/src/header.rs:423:36: 423:70
    let _45: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/types/src/header.rs:423:36: 423:53
    let mut _46: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:424:19: 424:23
    let _47: ();                         // in scope 0 at cita-chain/types/src/header.rs:426:9: 426:24
    let mut _48: &mut header::Header;    // in scope 0 at cita-chain/types/src/header.rs:426:9: 426:24
    scope 1 {
        debug header => _0;              // in scope 1 at cita-chain/types/src/header.rs:409:13: 409:23
    }

    bb0: {
        _6 = ExecutedInfo::get_header(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:411:25: 411:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:411:30: 411:40
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/types/src/header.rs:411:25: 411:55
        _4 = ExecutedHeader::get_height(move _5) -> bb2; // scope 0 at cita-chain/types/src/header.rs:411:25: 411:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:411:43: 411:53
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_height}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = ExecutedInfo::get_header(_1) -> bb3; // scope 0 at cita-chain/types/src/header.rs:412:41: 412:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:412:46: 412:56
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 0 at cita-chain/types/src/header.rs:412:41: 412:76
        _8 = ExecutedHeader::get_quota_limit(move _9) -> bb4; // scope 0 at cita-chain/types/src/header.rs:412:41: 412:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:412:59: 412:74
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_quota_limit}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <U256 as From<u64>>::from(move _8) -> bb5; // scope 0 at cita-chain/types/src/header.rs:412:30: 412:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:412:30: 412:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = ExecutedInfo::get_header(_1) -> bb6; // scope 0 at cita-chain/types/src/header.rs:413:28: 413:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:413:33: 413:43
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = _13;                       // scope 0 at cita-chain/types/src/header.rs:413:28: 413:61
        _11 = ExecutedHeader::get_timestamp(move _12) -> bb7; // scope 0 at cita-chain/types/src/header.rs:413:28: 413:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:413:46: 413:59
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_timestamp}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = ExecutedInfo::get_header(_1) -> bb8; // scope 0 at cita-chain/types/src/header.rs:414:47: 414:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:414:52: 414:62
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = _17;                       // scope 0 at cita-chain/types/src/header.rs:414:47: 414:88
        _15 = ExecutedHeader::get_transactions_root(move _16) -> bb9; // scope 0 at cita-chain/types/src/header.rs:414:47: 414:88
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:414:65: 414:86
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_transactions_root}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = <H256 as From<&[u8]>>::from(move _15) -> bb10; // scope 0 at cita-chain/types/src/header.rs:414:36: 414:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:414:36: 414:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = &((*_2).5: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:415:24: 415:49
        _18 = <libproto::Proof as Clone>::clone(move _19) -> bb11; // scope 0 at cita-chain/types/src/header.rs:415:24: 415:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:415:42: 415:47
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = ExecutedInfo::get_header(_1) -> [return: bb12, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:416:41: 416:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:416:46: 416:56
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = _23;                       // scope 0 at cita-chain/types/src/header.rs:416:41: 416:73
        _21 = ExecutedHeader::get_proposer(move _22) -> [return: bb13, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:416:41: 416:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:416:59: 416:71
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_proposer}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = <H160 as From<&[u8]>>::from(move _21) -> [return: bb14, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:416:27: 416:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:416:27: 416:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = ((*_2).6: u32);            // scope 0 at cita-chain/types/src/header.rs:417:26: 417:45
        _29 = ExecutedInfo::get_header(_1) -> [return: bb15, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:418:47: 418:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:418:52: 418:62
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb15: {
        _28 = _29;                       // scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
        _27 = ExecutedHeader::get_prevhash(move _28) -> [return: bb16, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:418:65: 418:77
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_prevhash}, val: Value(<ZST>) }
    }

    bb16: {
        _26 = _27;                       // scope 0 at cita-chain/types/src/header.rs:418:47: 418:79
        _25 = H256::from_slice(move _26) -> [return: bb17, unwind: bb33]; // scope 0 at cita-chain/types/src/header.rs:418:30: 418:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:418:30: 418:46
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {H256::from_slice}, val: Value(<ZST>) }
    }

    bb17: {
        _3 = OpenHeader { parent_hash: move _25, timestamp: move _11, number: move _4, transactions_root: move _14, quota_limit: move _7, proof: move _18, version: move _24, proposer: move _20 }; // scope 0 at cita-chain/types/src/header.rs:410:26: 419:14
        _33 = ExecutedInfo::get_header(_1) -> [return: bb18, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:420:36: 420:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:420:41: 420:51
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb18: {
        _32 = _33;                       // scope 0 at cita-chain/types/src/header.rs:420:36: 420:69
        _31 = ExecutedHeader::get_log_bloom(move _32) -> [return: bb19, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:420:36: 420:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:420:54: 420:67
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_log_bloom}, val: Value(<ZST>) }
    }

    bb19: {
        _30 = <cita_types::Bloom as From<&[u8]>>::from(move _31) -> [return: bb20, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:420:24: 420:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:420:24: 420:35
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[u8]) -> cita_types::Bloom {<cita_types::Bloom as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb20: {
        _37 = ExecutedInfo::get_header(_1) -> [return: bb21, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:421:36: 421:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:421:41: 421:51
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb21: {
        _36 = _37;                       // scope 0 at cita-chain/types/src/header.rs:421:36: 421:70
        _35 = ExecutedHeader::get_quota_used(move _36) -> [return: bb22, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:421:36: 421:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:421:54: 421:68
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_quota_used}, val: Value(<ZST>) }
    }

    bb22: {
        _34 = <U256 as From<u64>>::from(move _35) -> [return: bb23, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:421:25: 421:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:421:25: 421:35
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb23: {
        _41 = ExecutedInfo::get_header(_1) -> [return: bb24, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:422:39: 422:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:422:44: 422:54
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb24: {
        _40 = _41;                       // scope 0 at cita-chain/types/src/header.rs:422:39: 422:76
        _39 = ExecutedHeader::get_receipts_root(move _40) -> [return: bb25, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:422:39: 422:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:422:57: 422:74
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_receipts_root}, val: Value(<ZST>) }
    }

    bb25: {
        _38 = <H256 as From<&[u8]>>::from(move _39) -> [return: bb26, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:422:28: 422:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:422:28: 422:38
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb26: {
        _45 = ExecutedInfo::get_header(_1) -> [return: bb27, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:423:36: 423:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:423:41: 423:51
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb27: {
        _44 = _45;                       // scope 0 at cita-chain/types/src/header.rs:423:36: 423:70
        _43 = ExecutedHeader::get_state_root(move _44) -> [return: bb28, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:423:36: 423:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:423:54: 423:68
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_state_root}, val: Value(<ZST>) }
    }

    bb28: {
        _42 = <H256 as From<&[u8]>>::from(move _43) -> [return: bb29, unwind: bb32]; // scope 0 at cita-chain/types/src/header.rs:423:25: 423:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:423:25: 423:35
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb29: {
        _46 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/header.rs:424:19: 424:23
        _0 = Header { open_header: move _3, state_root: move _42, receipts_root: move _38, log_bloom: move _30, quota_used: move _34, hash: move _46 }; // scope 0 at cita-chain/types/src/header.rs:409:26: 425:10
        _48 = &mut _0;                   // scope 1 at cita-chain/types/src/header.rs:426:9: 426:24
        _47 = Header::rehash(move _48) -> [return: bb30, unwind: bb31]; // scope 1 at cita-chain/types/src/header.rs:426:9: 426:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:426:16: 426:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Header) {Header::rehash}, val: Value(<ZST>) }
    }

    bb30: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:428:6: 428:6
    }

    bb31 (cleanup): {
        drop(_0) -> bb34;                // scope 0 at cita-chain/types/src/header.rs:428:5: 428:6
    }

    bb32 (cleanup): {
        drop(_3) -> bb34;                // scope 0 at cita-chain/types/src/header.rs:425:9: 425:10
    }

    bb33 (cleanup): {
        drop(_18) -> bb34;               // scope 0 at cita-chain/types/src/header.rs:419:13: 419:14
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:408:5: 428:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::from_bytes(_1: &[u8]) -> Header {
    debug bytes => _1;                   // in scope 0 at cita-chain/types/src/header.rs:431:23: 431:28
    let mut _0: header::Header;          // return place in scope 0 at cita-chain/types/src/header.rs:431:40: 431:44

    bb0: {
        _0 = rlp::decode::<Header>(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:432:9: 432:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:432:9: 432:20
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Header {rlp::decode::<Header>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:433:6: 433:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next(_1: &Header, _2: &Header, _3: &[H160]) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:436:24: 436:29
    debug next => _2;                    // in scope 0 at cita-chain/types/src/header.rs:436:31: 436:35
    debug authorities => _3;             // in scope 0 at cita-chain/types/src/header.rs:436:46: 436:57
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/header.rs:436:74: 436:78
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:46
    let mut _5: u64;                     // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:29
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
    let mut _7: &header::OpenHeader;     // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
    let _8: &header::OpenHeader;         // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
    let mut _9: (u64, bool);             // in scope 0 at cita-chain/types/src/header.rs:438:12: 438:29
    let mut _10: u64;                    // in scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
    let mut _11: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
    let _12: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
    let _13: log::Level;                 // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _15: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _16: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _17: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _18: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _19: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _20: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _21: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _22: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _23: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:439:19: 439:65
    let mut _24: bool;                   // in scope 0 at cita-chain/types/src/header.rs:442:12: 442:55
    let mut _25: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:442:12: 442:32
    let _26: cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:442:12: 442:32
    let mut _27: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:442:12: 442:23
    let mut _28: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:442:36: 442:55
    let _29: &cita_types::H256;          // in scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
    let mut _30: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
    let _31: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
    let _32: log::Level;                 // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _33: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _34: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _35: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _36: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _37: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _38: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _39: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _40: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _41: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _42: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:443:19: 443:64
    let _43: proof::BftProof;            // in scope 0 at cita-chain/types/src/header.rs:448:13: 448:23
    let mut _44: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:448:41: 448:61
    let mut _45: &libproto::Proof;       // in scope 0 at cita-chain/types/src/header.rs:448:41: 448:61
    let _46: &libproto::Proof;           // in scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
    let mut _47: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
    let _48: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
    let mut _49: bool;                   // in scope 0 at cita-chain/types/src/header.rs:449:12: 449:94
    let mut _50: u64;                    // in scope 0 at cita-chain/types/src/header.rs:449:12: 449:25
    let mut _51: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:449:12: 449:25
    let _52: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:449:12: 449:25
    let mut _53: bool;                   // in scope 0 at cita-chain/types/src/header.rs:449:34: 449:94
    let mut _54: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:449:34: 449:71
    let _55: cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:449:34: 449:71
    let mut _56: &libproto::BlockHeader; // in scope 0 at cita-chain/types/src/header.rs:449:34: 449:71
    let _57: libproto::BlockHeader;      // in scope 0 at cita-chain/types/src/header.rs:449:34: 449:58
    let mut _58: &cita_types::H256;      // in scope 0 at cita-chain/types/src/header.rs:449:75: 449:94
    let mut _60: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _61: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _62: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _63: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _64: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _65: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _66: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _67: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _68: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _69: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:450:19: 450:61
    let mut _70: bool;                   // in scope 0 at cita-chain/types/src/header.rs:454:12: 454:66
    let mut _71: bool;                   // in scope 0 at cita-chain/types/src/header.rs:454:13: 454:66
    let mut _72: &proof::BftProof;       // in scope 0 at cita-chain/types/src/header.rs:454:13: 454:66
    let mut _73: usize;                  // in scope 0 at cita-chain/types/src/header.rs:454:30: 454:52
    let mut _74: u64;                    // in scope 0 at cita-chain/types/src/header.rs:454:30: 454:43
    let mut _75: &header::OpenHeader;    // in scope 0 at cita-chain/types/src/header.rs:454:30: 454:43
    let _76: &header::OpenHeader;        // in scope 0 at cita-chain/types/src/header.rs:454:30: 454:43
    let mut _78: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _79: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _80: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _81: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _82: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _83: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _84: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _85: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _86: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _87: &[&str];                // in scope 0 at cita-chain/types/src/header.rs:455:19: 455:67
    scope 1 {
        debug lvl => _13;                // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _97: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _98: &[&str; 1];         // in scope 1 at cita-chain/types/src/header.rs:439:19: 439:65
        let mut _99: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug lvl => _32;                // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _94: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _95: &[&str; 1];         // in scope 2 at cita-chain/types/src/header.rs:443:19: 443:64
        let mut _96: &log::LevelFilter;  // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 3 {
        debug next_proof => _43;         // in scope 3 at cita-chain/types/src/header.rs:448:13: 448:23
        let _59: log::Level;             // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _77: log::Level;             // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 4 {
            debug lvl => _59;            // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _91: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _92: &[&str; 1];     // in scope 4 at cita-chain/types/src/header.rs:450:19: 450:61
            let mut _93: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 5 {
            debug lvl => _77;            // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _88: &(&str, &str, &str, u32); // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _89: &[&str; 1];     // in scope 5 at cita-chain/types/src/header.rs:455:19: 455:67
            let mut _90: &log::LevelFilter; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _8 = <Header as Deref>::deref(_1) -> bb1; // scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:438:12: 438:25
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
        _6 = OpenHeader::number(move _7) -> bb2; // scope 0 at cita-chain/types/src/header.rs:438:12: 438:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:438:17: 438:23
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = CheckedAdd(_6, const 1_u64); // scope 0 at cita-chain/types/src/header.rs:438:12: 438:29
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_u64) -> bb3; // scope 0 at cita-chain/types/src/header.rs:438:12: 438:29
    }

    bb3: {
        _5 = move (_9.0: u64);           // scope 0 at cita-chain/types/src/header.rs:438:12: 438:29
        _12 = <Header as Deref>::deref(_2) -> bb4; // scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:438:33: 438:46
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _12;                       // scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
        _10 = OpenHeader::number(move _11) -> bb5; // scope 0 at cita-chain/types/src/header.rs:438:33: 438:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:438:38: 438:44
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = Ne(move _5, move _10);      // scope 0 at cita-chain/types/src/header.rs:438:12: 438:46
        switchInt(move _4) -> [0: bb16, otherwise: bb6]; // scope 0 at cita-chain/types/src/header.rs:438:12: 438:46
    }

    bb6: {
        _13 = log::Level::Warn;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _16 = &_13;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _99 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Header::verify_next, [], Some(promoted[11])) }
        _15 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _16, _99) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = const false;               // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _18 = &_13;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _20 = log::max_level() -> bb11;  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _14) -> [0: bb15, otherwise: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        switchInt(move _15) -> [0: bb7, otherwise: bb8]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _19 = &_20;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _17 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _18, move _19) -> bb12; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _14 = move _17;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb9;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _98 = const _;                   // scope 1 at cita-chain/types/src/header.rs:439:19: 439:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:439:19: 439:65
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Header::verify_next, [], Some(promoted[10])) }
        _23 = _98 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/header.rs:439:19: 439:65
        _22 = Arguments::<'_>::new_const(move _23) -> bb14; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb14: {
        _97 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Header::verify_next, [], Some(promoted[9])) }
        _21 = log::__private_api_log(move _22, _13, _97) -> bb15; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb15: {
        _0 = const false;                // scope 0 at cita-chain/types/src/header.rs:440:20: 440:25
        goto -> bb72;                    // scope 0 at no-location
    }

    bb16: {
        _27 = Header::hash(_1) -> bb17;  // scope 0 at cita-chain/types/src/header.rs:442:12: 442:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:442:17: 442:21
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = std::option::Option::<H256>::unwrap(move _27) -> bb18; // scope 0 at cita-chain/types/src/header.rs:442:12: 442:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:442:24: 442:30
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb18: {
        _25 = &_26;                      // scope 0 at cita-chain/types/src/header.rs:442:12: 442:32
        _31 = <Header as Deref>::deref(_2) -> bb19; // scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:442:37: 442:55
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _30 = _31;                       // scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
        _29 = OpenHeader::parent_hash(move _30) -> bb20; // scope 0 at cita-chain/types/src/header.rs:442:37: 442:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:442:42: 442:53
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb20: {
        _28 = _29;                       // scope 0 at cita-chain/types/src/header.rs:442:36: 442:55
        _24 = <H256 as PartialEq>::ne(move _25, move _28) -> bb21; // scope 0 at cita-chain/types/src/header.rs:442:12: 442:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:442:12: 442:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _24) -> [0: bb32, otherwise: bb22]; // scope 0 at cita-chain/types/src/header.rs:442:12: 442:55
    }

    bb22: {
        _32 = log::Level::Warn;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _35 = &_32;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _96 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Header::verify_next, [], Some(promoted[8])) }
        _34 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _35, _96) -> bb26; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb23: {
        _33 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb25;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb24: {
        _37 = &_32;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _39 = log::max_level() -> bb27;  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb25: {
        switchInt(move _33) -> [0: bb31, otherwise: bb29]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb26: {
        switchInt(move _34) -> [0: bb23, otherwise: bb24]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb27: {
        _38 = &_39;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _36 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _37, move _38) -> bb28; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb28: {
        _33 = move _36;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb25;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb29: {
        _95 = const _;                   // scope 2 at cita-chain/types/src/header.rs:443:19: 443:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:443:19: 443:64
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Header::verify_next, [], Some(promoted[7])) }
        _42 = _95 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/header.rs:443:19: 443:64
        _41 = Arguments::<'_>::new_const(move _42) -> bb30; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb30: {
        _94 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Header::verify_next, [], Some(promoted[6])) }
        _40 = log::__private_api_log(move _41, _32, _94) -> bb31; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb31: {
        _0 = const false;                // scope 0 at cita-chain/types/src/header.rs:444:20: 444:25
        goto -> bb72;                    // scope 0 at no-location
    }

    bb32: {
        _48 = <Header as Deref>::deref(_2) -> bb33; // scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:448:41: 448:53
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        _47 = _48;                       // scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
        _46 = OpenHeader::proof(move _47) -> bb34; // scope 0 at cita-chain/types/src/header.rs:448:41: 448:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:448:46: 448:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb34: {
        _45 = _46;                       // scope 0 at cita-chain/types/src/header.rs:448:41: 448:61
        _44 = <libproto::Proof as Clone>::clone(move _45) -> bb35; // scope 0 at cita-chain/types/src/header.rs:448:41: 448:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:448:54: 448:59
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb35: {
        _43 = <proof::BftProof as From<libproto::Proof>>::from(move _44) -> bb36; // scope 0 at cita-chain/types/src/header.rs:448:26: 448:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:448:26: 448:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb36: {
        _52 = <Header as Deref>::deref(_1) -> [return: bb40, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:449:12: 449:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:449:12: 449:25
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _49 = const false;               // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
        goto -> bb39;                    // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
    }

    bb38: {
        _57 = Header::proposal_protobuf(_1) -> [return: bb42, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:449:34: 449:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:449:39: 449:56
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> libproto::BlockHeader {Header::proposal_protobuf}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _49) -> [0: bb56, otherwise: bb46]; // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
    }

    bb40: {
        _51 = _52;                       // scope 3 at cita-chain/types/src/header.rs:449:12: 449:25
        _50 = OpenHeader::number(move _51) -> [return: bb41, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:449:12: 449:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:449:17: 449:23
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb41: {
        switchInt(move _50) -> [0: bb37, otherwise: bb38]; // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
    }

    bb42: {
        _56 = &_57;                      // scope 3 at cita-chain/types/src/header.rs:449:34: 449:71
        _55 = libproto::<impl libproto::BlockHeader>::crypt_hash(move _56) -> [return: bb43, unwind: bb73]; // scope 3 at cita-chain/types/src/header.rs:449:34: 449:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:449:59: 449:69
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> H256 {libproto::<impl libproto::BlockHeader>::crypt_hash}, val: Value(<ZST>) }
    }

    bb43: {
        _54 = &_55;                      // scope 3 at cita-chain/types/src/header.rs:449:34: 449:71
        _58 = &(_43.0: cita_types::H256); // scope 3 at cita-chain/types/src/header.rs:449:75: 449:94
        _53 = <H256 as PartialEq>::ne(move _54, move _58) -> [return: bb44, unwind: bb73]; // scope 3 at cita-chain/types/src/header.rs:449:34: 449:94
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:449:34: 449:94
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb44: {
        drop(_57) -> [return: bb45, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:449:93: 449:94
    }

    bb45: {
        _49 = move _53;                  // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
        goto -> bb39;                    // scope 3 at cita-chain/types/src/header.rs:449:12: 449:94
    }

    bb46: {
        _59 = log::Level::Warn;          // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _62 = &_59;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _93 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Header::verify_next, [], Some(promoted[5])) }
        _61 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _62, _93) -> [return: bb50, unwind: bb74]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb47: {
        _60 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb49;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _64 = &_59;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _66 = log::max_level() -> [return: bb51, unwind: bb74]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb49: {
        switchInt(move _60) -> [0: bb55, otherwise: bb53]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb50: {
        switchInt(move _61) -> [0: bb47, otherwise: bb48]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb51: {
        _65 = &_66;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _63 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _64, move _65) -> [return: bb52, unwind: bb74]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb52: {
        _60 = move _63;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb49;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb53: {
        _92 = const _;                   // scope 4 at cita-chain/types/src/header.rs:450:19: 450:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:450:19: 450:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Header::verify_next, [], Some(promoted[4])) }
        _69 = _92 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/types/src/header.rs:450:19: 450:61
        _68 = Arguments::<'_>::new_const(move _69) -> [return: bb54, unwind: bb74]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb54: {
        _91 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Header::verify_next, [], Some(promoted[3])) }
        _67 = log::__private_api_log(move _68, _59, _91) -> [return: bb76, unwind: bb74]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb55: {
        _0 = const false;                // scope 3 at cita-chain/types/src/header.rs:451:20: 451:25
        goto -> bb71;                    // scope 3 at no-location
    }

    bb56: {
        _72 = &_43;                      // scope 3 at cita-chain/types/src/header.rs:454:13: 454:66
        _76 = <Header as Deref>::deref(_1) -> [return: bb57, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:454:30: 454:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:454:30: 454:43
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb57: {
        _75 = _76;                       // scope 3 at cita-chain/types/src/header.rs:454:30: 454:43
        _74 = OpenHeader::number(move _75) -> [return: bb58, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:454:30: 454:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:454:35: 454:41
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb58: {
        _73 = move _74 as usize (IntToInt); // scope 3 at cita-chain/types/src/header.rs:454:30: 454:52
        _71 = proof::BftProof::check(move _72, move _73, _3) -> [return: bb59, unwind: bb74]; // scope 3 at cita-chain/types/src/header.rs:454:13: 454:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:454:24: 454:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a proof::BftProof, usize, &'b [H160]) -> bool {proof::BftProof::check}, val: Value(<ZST>) }
    }

    bb59: {
        _70 = Not(move _71);             // scope 3 at cita-chain/types/src/header.rs:454:12: 454:66
        switchInt(move _70) -> [0: bb70, otherwise: bb60]; // scope 3 at cita-chain/types/src/header.rs:454:12: 454:66
    }

    bb60: {
        _77 = log::Level::Warn;          // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _80 = &_77;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _90 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Header::verify_next, [], Some(promoted[2])) }
        _79 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _80, _90) -> [return: bb64, unwind: bb74]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb61: {
        _78 = const false;               // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb63;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb62: {
        _82 = &_77;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _84 = log::max_level() -> [return: bb65, unwind: bb74]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb63: {
        switchInt(move _78) -> [0: bb69, otherwise: bb67]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb64: {
        switchInt(move _79) -> [0: bb61, otherwise: bb62]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb65: {
        _83 = &_84;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _81 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _82, move _83) -> [return: bb66, unwind: bb74]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb66: {
        _78 = move _81;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb63;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb67: {
        _89 = const _;                   // scope 5 at cita-chain/types/src/header.rs:455:19: 455:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:455:19: 455:67
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Header::verify_next, [], Some(promoted[1])) }
        _87 = _89 as &[&str] (Pointer(Unsize)); // scope 5 at cita-chain/types/src/header.rs:455:19: 455:67
        _86 = Arguments::<'_>::new_const(move _87) -> [return: bb68, unwind: bb74]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb68: {
        _88 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Header::verify_next, [], Some(promoted[0])) }
        _85 = log::__private_api_log(move _86, _77, _88) -> [return: bb77, unwind: bb74]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb69: {
        _0 = const false;                // scope 3 at cita-chain/types/src/header.rs:456:20: 456:25
        goto -> bb71;                    // scope 3 at no-location
    }

    bb70: {
        _0 = const true;                 // scope 3 at cita-chain/types/src/header.rs:458:9: 458:13
        drop(_43) -> bb72;               // scope 0 at cita-chain/types/src/header.rs:459:5: 459:6
    }

    bb71: {
        drop(_43) -> bb72;               // scope 0 at cita-chain/types/src/header.rs:459:5: 459:6
    }

    bb72: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:459:6: 459:6
    }

    bb73 (cleanup): {
        drop(_57) -> bb74;               // scope 3 at cita-chain/types/src/header.rs:449:93: 449:94
    }

    bb74 (cleanup): {
        drop(_43) -> bb75;               // scope 0 at cita-chain/types/src/header.rs:459:5: 459:6
    }

    bb75 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:436:5: 459:6
    }

    bb76: {
        goto -> bb55;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb77: {
        goto -> bb69;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:455:13: 455:68
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:455:13: 455:68

    bb0: {
        _3 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/types/src/header.rs"; // scope 0 at cita-chain/types/src/header.rs:455:13: 455:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:455:13: 455:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:455:13: 455:68
        _1 = (move _2, move _4, move _6, const 455_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/header.rs:455:19: 455:67
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/header.rs:455:19: 455:67

    bb0: {
        _1 = [const "verify signatures for next block header failed"]; // scope 0 at cita-chain/types/src/header.rs:455:19: 455:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:455:19: 455:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:455:19: 455:67
        return;                          // scope 0 at cita-chain/types/src/header.rs:455:19: 455:67
    }
}

promoted[2] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:450:13: 450:62
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:450:13: 450:62

    bb0: {
        _3 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/types/src/header.rs"; // scope 0 at cita-chain/types/src/header.rs:450:13: 450:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:450:13: 450:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:450:13: 450:62
        _1 = (move _2, move _4, move _6, const 450_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/header.rs:450:19: 450:61
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/header.rs:450:19: 450:61

    bb0: {
        _1 = [const "verify next block header proposal failed"]; // scope 0 at cita-chain/types/src/header.rs:450:19: 450:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:450:19: 450:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:450:19: 450:61
        return;                          // scope 0 at cita-chain/types/src/header.rs:450:19: 450:61
    }
}

promoted[5] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:443:13: 443:65
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:443:13: 443:65

    bb0: {
        _3 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/types/src/header.rs"; // scope 0 at cita-chain/types/src/header.rs:443:13: 443:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:443:13: 443:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:443:13: 443:65
        _1 = (move _2, move _4, move _6, const 443_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/header.rs:443:19: 443:64
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/header.rs:443:19: 443:64

    bb0: {
        _1 = [const "verify next block header parent hash failed"]; // scope 0 at cita-chain/types/src/header.rs:443:19: 443:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:443:19: 443:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:443:19: 443:64
        return;                          // scope 0 at cita-chain/types/src/header.rs:443:19: 443:64
    }
}

promoted[8] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/header.rs:439:13: 439:66
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/header.rs:439:13: 439:66

    bb0: {
        _3 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "common_types::header"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/types/src/header.rs"; // scope 0 at cita-chain/types/src/header.rs:439:13: 439:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:439:13: 439:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/header.rs:439:13: 439:66
        _1 = (move _2, move _4, move _6, const 439_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/types/src/header.rs:439:19: 439:65
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/types/src/header.rs:439:19: 439:65

    bb0: {
        _1 = [const "verify next block header block number failed"]; // scope 0 at cita-chain/types/src/header.rs:439:19: 439:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:439:19: 439:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/header.rs:439:19: 439:65
        return;                          // scope 0 at cita-chain/types/src/header.rs:439:19: 439:65
    }
}

promoted[11] in header::<impl at cita-chain/types/src/header.rs:226:1: 226:12>::verify_next: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn header::<impl at cita-chain/types/src/header.rs:462:1: 462:26>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<Header, rlp::DecoderError> {
    debug r => _1;                       // in scope 0 at cita-chain/types/src/header.rs:463:15: 463:16
    let mut _0: std::result::Result<header::Header, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/header.rs:463:36: 463:62
    let _2: header::Header;              // in scope 0 at cita-chain/types/src/header.rs:464:13: 464:24
    let mut _3: header::OpenHeader;      // in scope 0 at cita-chain/types/src/header.rs:465:26: 474:14
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
    let mut _5: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:466:30: 466:41
    let mut _6: isize;                   // in scope 0 at cita-chain/types/src/header.rs:466:41: 466:42
    let _7: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:466:41: 466:42
    let _8: cita_types::H256;            // in scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
    let mut _10: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:467:36: 467:47
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/header.rs:467:47: 467:48
    let _12: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:467:47: 467:48
    let _13: cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u64>; // in scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
    let mut _15: std::result::Result<u64, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:468:25: 468:36
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/header.rs:468:36: 468:37
    let _17: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:468:36: 468:37
    let _18: u64;                        // in scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
    let mut _20: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:469:30: 469:41
    let mut _21: isize;                  // in scope 0 at cita-chain/types/src/header.rs:469:41: 469:42
    let _22: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:469:41: 469:42
    let _23: cita_types::U256;           // in scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
    let mut _24: u64;                    // in scope 0 at cita-chain/types/src/header.rs:470:28: 470:92
    let mut _25: &cita_types::U256;      // in scope 0 at cita-chain/types/src/header.rs:470:28: 470:92
    let _26: cita_types::U256;           // in scope 0 at cita-chain/types/src/header.rs:470:28: 470:83
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
    let mut _28: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:470:37: 470:56
    let mut _29: isize;                  // in scope 0 at cita-chain/types/src/header.rs:470:56: 470:57
    let _30: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:470:56: 470:57
    let _31: cita_types::U256;           // in scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
    let mut _32: cita_types::U256;       // in scope 0 at cita-chain/types/src/header.rs:470:59: 470:82
    let mut _33: u64;                    // in scope 0 at cita-chain/types/src/header.rs:470:59: 470:75
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u32>; // in scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
    let mut _35: std::result::Result<u32, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:471:26: 471:37
    let mut _36: isize;                  // in scope 0 at cita-chain/types/src/header.rs:471:37: 471:38
    let _37: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:471:37: 471:38
    let _38: u32;                        // in scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
    let mut _39: libproto::Proof;        // in scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, libproto::Proof>; // in scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
    let mut _41: std::result::Result<libproto::Proof, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:472:24: 472:36
    let mut _42: isize;                  // in scope 0 at cita-chain/types/src/header.rs:472:36: 472:37
    let _43: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:472:36: 472:37
    let _44: libproto::Proof;            // in scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H160>; // in scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
    let mut _46: std::result::Result<cita_types::H160, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:473:27: 473:39
    let mut _47: isize;                  // in scope 0 at cita-chain/types/src/header.rs:473:39: 473:40
    let _48: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:473:39: 473:40
    let _49: cita_types::H160;           // in scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
    let mut _51: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:475:25: 475:36
    let mut _52: isize;                  // in scope 0 at cita-chain/types/src/header.rs:475:36: 475:37
    let _53: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:475:36: 475:37
    let _54: cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
    let mut _56: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:476:28: 476:39
    let mut _57: isize;                  // in scope 0 at cita-chain/types/src/header.rs:476:39: 476:40
    let _58: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:476:39: 476:40
    let _59: cita_types::H256;           // in scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::Bloom>; // in scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
    let mut _61: std::result::Result<cita_types::Bloom, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:477:24: 477:35
    let mut _62: isize;                  // in scope 0 at cita-chain/types/src/header.rs:477:35: 477:36
    let _63: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:477:35: 477:36
    let _64: cita_types::Bloom;          // in scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
    let mut _66: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:478:25: 478:36
    let mut _67: isize;                  // in scope 0 at cita-chain/types/src/header.rs:478:36: 478:37
    let _68: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/header.rs:478:36: 478:37
    let _69: cita_types::U256;           // in scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
    let mut _70: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/header.rs:479:19: 479:48
    let mut _71: cita_types::H256;       // in scope 0 at cita-chain/types/src/header.rs:479:24: 479:47
    let mut _72: &&[u8];                 // in scope 0 at cita-chain/types/src/header.rs:479:24: 479:47
    let _73: &[u8];                      // in scope 0 at cita-chain/types/src/header.rs:479:24: 479:34
    scope 1 {
        debug blockheader => _2;         // in scope 1 at cita-chain/types/src/header.rs:464:13: 464:24
    }
    scope 2 {
        debug residual => _7;            // in scope 2 at cita-chain/types/src/header.rs:466:41: 466:42
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;                 // in scope 4 at cita-chain/types/src/header.rs:466:30: 466:42
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _12;           // in scope 6 at cita-chain/types/src/header.rs:467:47: 467:48
        scope 7 {
        }
    }
    scope 8 {
        debug val => _13;                // in scope 8 at cita-chain/types/src/header.rs:467:36: 467:48
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _17;           // in scope 10 at cita-chain/types/src/header.rs:468:36: 468:37
        scope 11 {
        }
    }
    scope 12 {
        debug val => _18;                // in scope 12 at cita-chain/types/src/header.rs:468:25: 468:37
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _22;           // in scope 14 at cita-chain/types/src/header.rs:469:41: 469:42
        scope 15 {
        }
    }
    scope 16 {
        debug val => _23;                // in scope 16 at cita-chain/types/src/header.rs:469:30: 469:42
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _30;           // in scope 18 at cita-chain/types/src/header.rs:470:56: 470:57
        scope 19 {
        }
    }
    scope 20 {
        debug val => _31;                // in scope 20 at cita-chain/types/src/header.rs:470:37: 470:57
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _37;           // in scope 22 at cita-chain/types/src/header.rs:471:37: 471:38
        scope 23 {
        }
    }
    scope 24 {
        debug val => _38;                // in scope 24 at cita-chain/types/src/header.rs:471:26: 471:38
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _43;           // in scope 26 at cita-chain/types/src/header.rs:472:36: 472:37
        scope 27 {
        }
    }
    scope 28 {
        debug val => _44;                // in scope 28 at cita-chain/types/src/header.rs:472:24: 472:37
        scope 29 {
        }
    }
    scope 30 {
        debug residual => _48;           // in scope 30 at cita-chain/types/src/header.rs:473:39: 473:40
        scope 31 {
        }
    }
    scope 32 {
        debug val => _49;                // in scope 32 at cita-chain/types/src/header.rs:473:27: 473:40
        scope 33 {
        }
    }
    scope 34 {
        debug residual => _53;           // in scope 34 at cita-chain/types/src/header.rs:475:36: 475:37
        scope 35 {
        }
    }
    scope 36 {
        debug val => _54;                // in scope 36 at cita-chain/types/src/header.rs:475:25: 475:37
        scope 37 {
        }
    }
    scope 38 {
        debug residual => _58;           // in scope 38 at cita-chain/types/src/header.rs:476:39: 476:40
        scope 39 {
        }
    }
    scope 40 {
        debug val => _59;                // in scope 40 at cita-chain/types/src/header.rs:476:28: 476:40
        scope 41 {
        }
    }
    scope 42 {
        debug residual => _63;           // in scope 42 at cita-chain/types/src/header.rs:477:35: 477:36
        scope 43 {
        }
    }
    scope 44 {
        debug val => _64;                // in scope 44 at cita-chain/types/src/header.rs:477:24: 477:36
        scope 45 {
        }
    }
    scope 46 {
        debug residual => _68;           // in scope 46 at cita-chain/types/src/header.rs:478:36: 478:37
        scope 47 {
        }
    }
    scope 48 {
        debug val => _69;                // in scope 48 at cita-chain/types/src/header.rs:478:25: 478:37
        scope 49 {
        }
    }

    bb0: {
        _5 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 0_usize) -> bb1; // scope 0 at cita-chain/types/src/header.rs:466:30: 466:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:466:32: 466:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <Result<H256, rlp::DecoderError> as Try>::branch(move _5) -> bb2; // scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:466:30: 466:42
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_4);           // scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
    }

    bb3: {
        _8 = ((_4 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
        _10 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 2_usize) -> bb6; // scope 0 at cita-chain/types/src/header.rs:467:36: 467:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:467:38: 467:44
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:466:30: 466:42
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:466:41: 466:42
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _7) -> bb72; // scope 3 at cita-chain/types/src/header.rs:466:30: 466:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:466:41: 466:42
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = <Result<H256, rlp::DecoderError> as Try>::branch(move _10) -> bb7; // scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:467:36: 467:48
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = discriminant(_9);          // scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
        switchInt(move _11) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
    }

    bb8: {
        _13 = ((_9 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
        _15 = rlp::UntrustedRlp::<'_>::val_at::<u64>(_1, const 5_usize) -> bb11; // scope 0 at cita-chain/types/src/header.rs:468:25: 468:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:468:27: 468:33
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u64, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u64>}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:467:36: 467:48
    }

    bb10: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:467:47: 467:48
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _12) -> bb72; // scope 7 at cita-chain/types/src/header.rs:467:36: 467:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:467:47: 467:48
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = <Result<u64, rlp::DecoderError> as Try>::branch(move _15) -> bb12; // scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:468:25: 468:37
                                         // + literal: Const { ty: fn(Result<u64, rlp::DecoderError>) -> ControlFlow<<Result<u64, rlp::DecoderError> as Try>::Residual, <Result<u64, rlp::DecoderError> as Try>::Output> {<Result<u64, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb12: {
        _16 = discriminant(_14);         // scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
        switchInt(move _16) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
    }

    bb13: {
        _18 = ((_14 as Continue).0: u64); // scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
        _20 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 6_usize) -> bb16; // scope 0 at cita-chain/types/src/header.rs:469:30: 469:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:469:32: 469:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:468:25: 468:37
    }

    bb15: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:468:36: 468:37
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _17) -> bb72; // scope 11 at cita-chain/types/src/header.rs:468:25: 468:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:468:36: 468:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb16: {
        _19 = <Result<U256, rlp::DecoderError> as Try>::branch(move _20) -> bb17; // scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:469:30: 469:42
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb17: {
        _21 = discriminant(_19);         // scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
        switchInt(move _21) -> [0: bb18, 1: bb20, otherwise: bb19]; // scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
    }

    bb18: {
        _23 = ((_19 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
        _28 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 8_usize) -> bb21; // scope 0 at cita-chain/types/src/header.rs:470:37: 470:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:39: 470:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb19: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:469:30: 469:42
    }

    bb20: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:469:41: 469:42
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _22) -> bb72; // scope 15 at cita-chain/types/src/header.rs:469:30: 469:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:469:41: 469:42
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb21: {
        _27 = <Result<U256, rlp::DecoderError> as Try>::branch(move _28) -> bb22; // scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:37: 470:57
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb22: {
        _29 = discriminant(_27);         // scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
        switchInt(move _29) -> [0: bb23, 1: bb25, otherwise: bb24]; // scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
    }

    bb23: {
        _31 = ((_27 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
        _33 = core::num::<impl u64>::max_value() -> bb26; // scope 0 at cita-chain/types/src/header.rs:470:59: 470:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:59: 470:73
                                         // + literal: Const { ty: fn() -> u64 {core::num::<impl u64>::max_value}, val: Value(<ZST>) }
    }

    bb24: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:470:37: 470:57
    }

    bb25: {
        _30 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:470:56: 470:57
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _30) -> bb72; // scope 19 at cita-chain/types/src/header.rs:470:37: 470:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:56: 470:57
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb26: {
        _32 = <u64 as Into<U256>>::into(move _33) -> bb27; // scope 0 at cita-chain/types/src/header.rs:470:59: 470:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:76: 470:80
                                         // + literal: Const { ty: fn(u64) -> U256 {<u64 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb27: {
        _26 = std::cmp::min::<U256>(_31, move _32) -> bb28; // scope 0 at cita-chain/types/src/header.rs:470:28: 470:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:28: 470:36
                                         // + literal: Const { ty: fn(U256, U256) -> U256 {std::cmp::min::<U256>}, val: Value(<ZST>) }
    }

    bb28: {
        _25 = &_26;                      // scope 0 at cita-chain/types/src/header.rs:470:28: 470:92
        _24 = U256::as_u64(move _25) -> bb29; // scope 0 at cita-chain/types/src/header.rs:470:28: 470:92
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:470:84: 470:90
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::as_u64}, val: Value(<ZST>) }
    }

    bb29: {
        _35 = rlp::UntrustedRlp::<'_>::val_at::<u32>(_1, const 9_usize) -> bb30; // scope 0 at cita-chain/types/src/header.rs:471:26: 471:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:471:28: 471:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u32, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u32>}, val: Value(<ZST>) }
    }

    bb30: {
        _34 = <Result<u32, rlp::DecoderError> as Try>::branch(move _35) -> bb31; // scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:471:26: 471:38
                                         // + literal: Const { ty: fn(Result<u32, rlp::DecoderError>) -> ControlFlow<<Result<u32, rlp::DecoderError> as Try>::Residual, <Result<u32, rlp::DecoderError> as Try>::Output> {<Result<u32, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb31: {
        _36 = discriminant(_34);         // scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
        switchInt(move _36) -> [0: bb32, 1: bb34, otherwise: bb33]; // scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
    }

    bb32: {
        _38 = ((_34 as Continue).0: u32); // scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
        _41 = rlp::UntrustedRlp::<'_>::val_at::<libproto::Proof>(_1, const 10_usize) -> bb35; // scope 0 at cita-chain/types/src/header.rs:472:24: 472:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:472:26: 472:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<libproto::Proof, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb33: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:471:26: 471:38
    }

    bb34: {
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:471:37: 471:38
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _37) -> bb72; // scope 23 at cita-chain/types/src/header.rs:471:26: 471:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:471:37: 471:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb35: {
        _40 = <Result<libproto::Proof, rlp::DecoderError> as Try>::branch(move _41) -> bb36; // scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:472:24: 472:37
                                         // + literal: Const { ty: fn(Result<libproto::Proof, rlp::DecoderError>) -> ControlFlow<<Result<libproto::Proof, rlp::DecoderError> as Try>::Residual, <Result<libproto::Proof, rlp::DecoderError> as Try>::Output> {<Result<libproto::Proof, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb36: {
        _42 = discriminant(_40);         // scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
        switchInt(move _42) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
    }

    bb37: {
        _44 = move ((_40 as Continue).0: libproto::Proof); // scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
        _39 = move _44;                  // scope 29 at cita-chain/types/src/header.rs:472:24: 472:37
        _46 = rlp::UntrustedRlp::<'_>::val_at::<H160>(_1, const 11_usize) -> [return: bb40, unwind: bb74]; // scope 0 at cita-chain/types/src/header.rs:473:27: 473:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:473:29: 473:35
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H160, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H160>}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:472:24: 472:37
    }

    bb39: {
        _43 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:472:36: 472:37
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _43) -> bb72; // scope 27 at cita-chain/types/src/header.rs:472:24: 472:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:472:36: 472:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb40: {
        _45 = <Result<H160, rlp::DecoderError> as Try>::branch(move _46) -> [return: bb41, unwind: bb74]; // scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:473:27: 473:40
                                         // + literal: Const { ty: fn(Result<H160, rlp::DecoderError>) -> ControlFlow<<Result<H160, rlp::DecoderError> as Try>::Residual, <Result<H160, rlp::DecoderError> as Try>::Output> {<Result<H160, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb41: {
        _47 = discriminant(_45);         // scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
        switchInt(move _47) -> [0: bb42, 1: bb44, otherwise: bb43]; // scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
    }

    bb42: {
        _49 = ((_45 as Continue).0: cita_types::H160); // scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
        _3 = OpenHeader { parent_hash: _8, timestamp: move _24, number: _18, transactions_root: _13, quota_limit: _23, proof: move _39, version: _38, proposer: _49 }; // scope 0 at cita-chain/types/src/header.rs:465:26: 474:14
        _51 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 1_usize) -> [return: bb46, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:475:25: 475:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:475:27: 475:33
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb43: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:473:27: 473:40
    }

    bb44: {
        _48 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:473:39: 473:40
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _48) -> [return: bb45, unwind: bb74]; // scope 31 at cita-chain/types/src/header.rs:473:27: 473:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:473:39: 473:40
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb45: {
        drop(_39) -> bb72;               // scope 0 at cita-chain/types/src/header.rs:474:13: 474:14
    }

    bb46: {
        _50 = <Result<H256, rlp::DecoderError> as Try>::branch(move _51) -> [return: bb47, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:475:25: 475:37
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb47: {
        _52 = discriminant(_50);         // scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
        switchInt(move _52) -> [0: bb48, 1: bb50, otherwise: bb49]; // scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
    }

    bb48: {
        _54 = ((_50 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
        _56 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 3_usize) -> [return: bb52, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:476:28: 476:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:476:30: 476:36
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb49: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:475:25: 475:37
    }

    bb50: {
        _53 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:475:36: 475:37
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _53) -> [return: bb51, unwind: bb73]; // scope 35 at cita-chain/types/src/header.rs:475:25: 475:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:475:36: 475:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb51: {
        drop(_3) -> bb72;                // scope 0 at cita-chain/types/src/header.rs:480:9: 480:10
    }

    bb52: {
        _55 = <Result<H256, rlp::DecoderError> as Try>::branch(move _56) -> [return: bb53, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:476:28: 476:40
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb53: {
        _57 = discriminant(_55);         // scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
        switchInt(move _57) -> [0: bb54, 1: bb56, otherwise: bb55]; // scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
    }

    bb54: {
        _59 = ((_55 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
        _61 = rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>(_1, const 4_usize) -> [return: bb58, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:477:24: 477:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:477:26: 477:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<cita_types::Bloom, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb55: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:476:28: 476:40
    }

    bb56: {
        _58 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:476:39: 476:40
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _58) -> [return: bb57, unwind: bb73]; // scope 39 at cita-chain/types/src/header.rs:476:28: 476:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:476:39: 476:40
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb57: {
        drop(_3) -> bb72;                // scope 0 at cita-chain/types/src/header.rs:480:9: 480:10
    }

    bb58: {
        _60 = <Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch(move _61) -> [return: bb59, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:477:24: 477:36
                                         // + literal: Const { ty: fn(Result<cita_types::Bloom, rlp::DecoderError>) -> ControlFlow<<Result<cita_types::Bloom, rlp::DecoderError> as Try>::Residual, <Result<cita_types::Bloom, rlp::DecoderError> as Try>::Output> {<Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb59: {
        _62 = discriminant(_60);         // scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
        switchInt(move _62) -> [0: bb60, 1: bb62, otherwise: bb61]; // scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
    }

    bb60: {
        _64 = ((_60 as Continue).0: cita_types::Bloom); // scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
        _66 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 7_usize) -> [return: bb64, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:478:25: 478:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:478:27: 478:33
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb61: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:477:24: 477:36
    }

    bb62: {
        _63 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:477:35: 477:36
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _63) -> [return: bb63, unwind: bb73]; // scope 43 at cita-chain/types/src/header.rs:477:24: 477:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:477:35: 477:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb63: {
        drop(_3) -> bb72;                // scope 0 at cita-chain/types/src/header.rs:480:9: 480:10
    }

    bb64: {
        _65 = <Result<U256, rlp::DecoderError> as Try>::branch(move _66) -> [return: bb65, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:478:25: 478:37
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb65: {
        _67 = discriminant(_65);         // scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
        switchInt(move _67) -> [0: bb66, 1: bb68, otherwise: bb67]; // scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
    }

    bb66: {
        _69 = ((_65 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
        _73 = rlp::UntrustedRlp::<'_>::as_raw(_1) -> [return: bb70, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:479:24: 479:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:479:26: 479:32
                                         // + literal: Const { ty: fn(&rlp::UntrustedRlp<'_>) -> &[u8] {rlp::UntrustedRlp::<'_>::as_raw}, val: Value(<ZST>) }
    }

    bb67: {
        unreachable;                     // scope 0 at cita-chain/types/src/header.rs:478:25: 478:37
    }

    bb68: {
        _68 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/header.rs:478:36: 478:37
        _0 = <Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _68) -> [return: bb69, unwind: bb73]; // scope 47 at cita-chain/types/src/header.rs:478:25: 478:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:478:36: 478:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Header, rlp::DecoderError> {<Result<Header, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb69: {
        drop(_3) -> bb72;                // scope 0 at cita-chain/types/src/header.rs:480:9: 480:10
    }

    bb70: {
        _72 = &_73;                      // scope 0 at cita-chain/types/src/header.rs:479:24: 479:47
        _71 = <&[u8] as Hashable>::crypt_hash(move _72) -> [return: bb71, unwind: bb73]; // scope 0 at cita-chain/types/src/header.rs:479:24: 479:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:479:35: 479:45
                                         // + literal: Const { ty: for<'a> fn(&'a &[u8]) -> H256 {<&[u8] as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb71: {
        _70 = std::option::Option::<H256>::Some(move _71); // scope 0 at cita-chain/types/src/header.rs:479:19: 479:48
        _2 = Header { open_header: move _3, state_root: _54, receipts_root: _59, log_bloom: _64, quota_used: _69, hash: move _70 }; // scope 0 at cita-chain/types/src/header.rs:464:27: 480:10
        _0 = Result::<Header, rlp::DecoderError>::Ok(move _2); // scope 1 at cita-chain/types/src/header.rs:482:9: 482:24
        goto -> bb72;                    // scope 0 at cita-chain/types/src/header.rs:483:6: 483:6
    }

    bb72: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:483:6: 483:6
    }

    bb73 (cleanup): {
        drop(_3) -> bb75;                // scope 0 at cita-chain/types/src/header.rs:480:9: 480:10
    }

    bb74 (cleanup): {
        drop(_39) -> bb75;               // scope 0 at cita-chain/types/src/header.rs:474:13: 474:14
    }

    bb75 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/header.rs:463:5: 483:6
    }
}

fn header::<impl at cita-chain/types/src/header.rs:486:1: 486:26>::rlp_append(_1: &Header, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/header.rs:487:19: 487:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/header.rs:487:26: 487:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/header.rs:487:45: 487:45
    let _3: ();                          // in scope 0 at cita-chain/types/src/header.rs:488:9: 488:27

    bb0: {
        _3 = Header::stream_rlp(_1, _2) -> bb1; // scope 0 at cita-chain/types/src/header.rs:488:9: 488:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/header.rs:488:14: 488:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Header, &'b mut rlp::RlpStream) {Header::stream_rlp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/header.rs:489:6: 489:6
    }
}

const _IMPL_SERIALIZE_FOR_Log: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    }
}

fn _IMPL_SERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:10: 26:19>::serialize(_1: &log::Log, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    debug __serializer => _2;            // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _0: std::result::Result<<__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Ok, <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _3: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _4: std::result::Result<<__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct, <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _5: __S;                     // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _7: isize;                   // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let _8: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let _9: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _10: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _11: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let _12: &cita_types::H160;          // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _13: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _15: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _16: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let _17: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _18: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _20: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _21: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let _22: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _23: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _25: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    let mut _26: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    let mut _27: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        let _14: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        let _19: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        let _24: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-chain/types/src/log.rs:26:10: 26:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-chain/types/src/log.rs:26:10: 26:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-chain/types/src/log.rs:26:10: 26:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-chain/types/src/log.rs:26:10: 26:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-chain/types/src/log.rs:26:10: 26:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-chain/types/src/log.rs:26:10: 26:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-chain/types/src/log.rs:26:10: 26:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb0: {
        _27 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _26 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _27 = const true;                // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _5 = move _2;                    // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _6 = const 3_usize;              // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _27 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Log", move _6) -> [return: bb1, unwind: bb25]; // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as Serializer>::SerializeStruct, <__S as Serializer>::Error> {<__S as Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _27 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
        _7 = discriminant(_4);           // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _9); // scope 3 at cita-chain/types/src/log.rs:26:10: 26:19
        goto -> bb19;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct); // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
        _26 = const true;                // scope 2 at cita-chain/types/src/log.rs:26:10: 26:19
        _3 = move _8;                    // scope 2 at cita-chain/types/src/log.rs:26:10: 26:19
        _11 = &mut _3;                   // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _12 = &((*_1).0: cita_types::H160); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _10 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<H160>(_11, const "address", _12) -> [return: bb5, unwind: bb23]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b H160) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<H160>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _14); // scope 5 at cita-chain/types/src/log.rs:26:10: 26:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _17 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _15 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<H256>>(_16, const "topics", _17) -> [return: bb9, unwind: bb23]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b Vec<H256>) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<H256>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _19); // scope 7 at cita-chain/types/src/log.rs:26:10: 26:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _22 = &((*_1).2: std::vec::Vec<u8>); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _20 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<u8>>(_21, const "data", _22) -> [return: bb13, unwind: bb23]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b Vec<u8>) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<u8>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _24); // scope 9 at cita-chain/types/src/log.rs:26:10: 26:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb16: {
        _26 = const false;               // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _25 = move _3;                   // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _25) -> [return: bb17, unwind: bb23]; // scope 1 at cita-chain/types/src/log.rs:26:10: 26:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:10: 26:19
                                         // + literal: Const { ty: fn(<__S as Serializer>::SerializeStruct) -> Result<<<__S as Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
        goto -> bb20;                    // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb18: {
        drop(_3) -> bb19;                // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb19: {
        _26 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
        goto -> bb20;                    // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb20: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:19: 26:19
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:26:10: 26:19
    }

    bb22 (cleanup): {
        drop(_3) -> bb21;                // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb23 (cleanup): {
        switchInt(_26) -> [0: bb21, otherwise: bb22]; // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb24 (cleanup): {
        drop(_5) -> bb21;                // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }

    bb25 (cleanup): {
        switchInt(_27) -> [0: bb21, otherwise: bb24]; // scope 0 at cita-chain/types/src/log.rs:26:18: 26:19
    }
}

const _IMPL_DESERIALIZE_FOR_Log: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize(_1: __D) -> Result<log::Log, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::Log, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>>(move _1, const "Log", const _, const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<log::Log>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _3: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _4: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _5: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _6: __E;                     // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _7: log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'_>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _8: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _9: &&str;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb1: {
        _7 = _IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _9 = const _;                    // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _8 = _9 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _6 = <__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value(move _7, move _8) -> bb5; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a, 'b> fn(_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb5: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Err(move _6); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _1 = const "field index 0 <= i < 3"; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _6: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _7: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _8: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _9: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "address") -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb7]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "topics") -> bb3; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "data") -> bb5; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb9]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb6: {
        _9 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__ignore; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb7: {
        _6 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb8: {
        _7 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb9: {
        _8 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _3: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _4: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _7: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _9: usize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _10: usize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _12: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _13: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _14: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _15: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _9 = Len((*_2));                 // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _10 = const 7_usize;             // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _11) -> [0: bb9, otherwise: bb1]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [97: bb2, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [100: bb3, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [100: bb4, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [114: bb5, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [101: bb6, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [115: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [115: bb21, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb8: {
        _15 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__ignore; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb24;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb9: {
        _6 = Len((*_2));                 // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _7 = const 6_usize;              // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _8) -> [0: bb16, otherwise: bb10]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb10: {
        switchInt((*_2)[0 of 6]) -> [116: bb11, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb11: {
        switchInt((*_2)[1 of 6]) -> [111: bb12, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb12: {
        switchInt((*_2)[2 of 6]) -> [112: bb13, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb13: {
        switchInt((*_2)[3 of 6]) -> [105: bb14, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb14: {
        switchInt((*_2)[4 of 6]) -> [99: bb15, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb15: {
        switchInt((*_2)[5 of 6]) -> [115: bb22, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb16: {
        _3 = Len((*_2));                 // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _4 = const 4_usize;              // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _5) -> [0: bb8, otherwise: bb17]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb17: {
        switchInt((*_2)[0 of 4]) -> [100: bb18, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb18: {
        switchInt((*_2)[1 of 4]) -> [97: bb19, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb19: {
        switchInt((*_2)[2 of 4]) -> [116: bb20, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb20: {
        switchInt((*_2)[3 of 4]) -> [97: bb23, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb21: {
        _12 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb24;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb22: {
        _13 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb24;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb23: {
        _14 = const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb24;                    // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb24: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _3 = const "struct Log";         // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>, _2: __A) -> Result<log::Log, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<log::Log>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __seq => _2;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::Log, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _3: std::result::Result<std::option::Option<cita_types::H160>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _4: &mut __A;                // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _6: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _7: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _9: cita_types::H160;            // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _10: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _11: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _13: std::result::Result<std::option::Option<std::vec::Vec<cita_types::H256>>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _14: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _15: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _18: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _20: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _21: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _22: std::result::Result<std::option::Option<std::vec::Vec<u8>>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _23: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _24: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _27: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _29: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _30: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _31: log::Log;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _32: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _33: &&str;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let _12: std::vec::Vec<cita_types::H256>; // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let _16: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let _17: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let _19: std::vec::Vec<cita_types::H256>; // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let mut _34: &&str;              // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        scope 5 {
            debug __field1 => _12;       // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
            let _25: std::option::Option<std::vec::Vec<u8>>; // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
            let _26: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
            let _28: std::vec::Vec<u8>;  // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
            let mut _35: &&str;          // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
            scope 9 {
                debug __field2 => _28;   // in scope 9 at cita-chain/types/src/log.rs:26:21: 26:32
            }
            scope 10 {
                debug __val => _25;      // in scope 10 at cita-chain/types/src/log.rs:26:21: 26:32
            }
            scope 11 {
                debug __err => _26;      // in scope 11 at cita-chain/types/src/log.rs:26:21: 26:32
            }
            scope 12 {
                debug __value => _28;    // in scope 12 at cita-chain/types/src/log.rs:26:21: 26:32
            }
        }
        scope 6 {
            debug __val => _16;          // in scope 6 at cita-chain/types/src/log.rs:26:21: 26:32
        }
        scope 7 {
            debug __err => _17;          // in scope 7 at cita-chain/types/src/log.rs:26:21: 26:32
        }
        scope 8 {
            debug __value => _19;        // in scope 8 at cita-chain/types/src/log.rs:26:21: 26:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-chain/types/src/log.rs:26:21: 26:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _3 = <__A as SeqAccess<'_>>::next_element::<H160>(_4) -> [return: bb1, unwind: bb29]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<H160>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<H160>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<cita_types::H160>); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _8 = discriminant(_6);           // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb5: {
        _33 = const _;                   // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _33 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb29]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb7: {
        _9 = ((_6 as Some).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _14 = &mut _2;                   // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _13 = <__A as SeqAccess<'_>>::next_element::<Vec<H256>>(_14) -> [return: bb9, unwind: bb29]; // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<Vec<H256>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb26;                    // scope 0 at no-location
    }

    bb9: {
        _15 = discriminant(_13);         // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _15) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb10: {
        _17 = move ((_13 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _17); // scope 7 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb26;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb12: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::vec::Vec<cita_types::H256>>); // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _18 = discriminant(_16);         // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _18) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb13: {
        _34 = const _;                   // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _21 = _34 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _20 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb16, unwind: bb29]; // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb15: {
        _19 = move ((_16 as Some).0: std::vec::Vec<cita_types::H256>); // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _12 = move _19;                  // scope 8 at cita-chain/types/src/log.rs:26:21: 26:32
        _23 = &mut _2;                   // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        _22 = <__A as SeqAccess<'_>>::next_element::<Vec<u8>>(_23) -> [return: bb17, unwind: bb28]; // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<Vec<u8>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _20); // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb26;                    // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb17: {
        _24 = discriminant(_22);         // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _24) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb18: {
        _26 = move ((_22 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _26); // scope 11 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb25;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb20: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::vec::Vec<u8>>); // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        _27 = discriminant(_25);         // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _27) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb21: {
        _35 = const _;                   // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _30 = _35 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        _29 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb24, unwind: bb28]; // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb23: {
        _28 = move ((_25 as Some).0: std::vec::Vec<u8>); // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        _32 = move _12;                  // scope 9 at cita-chain/types/src/log.rs:26:21: 26:32
        _31 = log::Log { address: _9, topics: move _32, data: move _28 }; // scope 9 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Ok(move _31); // scope 9 at cita-chain/types/src/log.rs:26:21: 26:32
        drop(_2) -> bb27;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb24: {
        _0 = Result::<log::Log, <__A as SeqAccess<'_>>::Error>::Err(move _29); // scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb25;                    // scope 5 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb25: {
        drop(_12) -> [return: bb26, unwind: bb29]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb26: {
        drop(_2) -> bb27;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb27: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }

    bb28 (cleanup): {
        drop(_12) -> bb29;               // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb29 (cleanup): {
        drop(_2) -> bb30;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _1 = const "struct Log with 3 elements"; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _1 = const "struct Log with 3 elements"; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _1 = const "struct Log with 3 elements"; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor<'_>, _2: __A) -> Result<log::Log, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<log::Log>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    debug __map => _2;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _0: std::result::Result<log::Log, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _3: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _6: std::result::Result<std::option::Option<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _7: &mut __A;                // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _13: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _15: &std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _16: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _17: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _18: std::result::Result<cita_types::H160, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _19: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _20: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _23: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _24: &std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _25: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _26: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _27: std::result::Result<std::vec::Vec<cita_types::H256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _28: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _29: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _32: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _33: &std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _34: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _35: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _36: std::result::Result<std::vec::Vec<u8>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _37: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _38: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _41: std::result::Result<log::_IMPL_SERIALIZE_FOR_Log::_serde::de::IgnoredAny, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _42: &mut __A;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _43: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _46: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _48: std::result::Result<cita_types::H160, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _49: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _53: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _55: std::result::Result<std::vec::Vec<cita_types::H256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _56: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _60: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _62: std::result::Result<std::vec::Vec<u8>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _63: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _66: log::Log;               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _67: cita_types::H160;       // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _68: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _69: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _70: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    let mut _71: bool;                   // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    let mut _72: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    let mut _73: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    let mut _74: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    let mut _75: isize;                  // in scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        let mut _4: std::option::Option<std::vec::Vec<cita_types::H256>>; // in scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-chain/types/src/log.rs:26:21: 26:32
            let mut _5: std::option::Option<std::vec::Vec<u8>>; // in scope 2 at cita-chain/types/src/log.rs:26:21: 26:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                let _45: cita_types::H160; // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                let _47: cita_types::H160; // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                let _50: cita_types::H160; // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                let _51: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                scope 4 {
                    debug __key => _12;  // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _9: std::option::Option<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field>; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _10: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _12: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _21: cita_types::H160; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _22: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _30: std::vec::Vec<cita_types::H256>; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _31: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _39: std::vec::Vec<u8>; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _40: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _44: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                    scope 5 {
                        debug __val => _9; // in scope 5 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 6 {
                        debug __err => _10; // in scope 6 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 7 {
                        debug __val => _21; // in scope 7 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 8 {
                        debug __err => _22; // in scope 8 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 9 {
                        debug __val => _30; // in scope 9 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 10 {
                        debug __err => _31; // in scope 10 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 11 {
                        debug __val => _39; // in scope 11 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 12 {
                        debug __err => _40; // in scope 12 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny; // in scope 14 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 15 {
                        debug __err => _44; // in scope 15 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                }
                scope 16 {
                    debug __field0 => _45; // in scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _52: std::vec::Vec<cita_types::H256>; // in scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _54: std::vec::Vec<cita_types::H256>; // in scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _57: std::vec::Vec<cita_types::H256>; // in scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                    let _58: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                    scope 20 {
                        debug __field1 => _52; // in scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                        let _59: std::vec::Vec<u8>; // in scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                        let _61: std::vec::Vec<u8>; // in scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                        let _64: std::vec::Vec<u8>; // in scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                        let _65: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                        scope 24 {
                            debug __field2 => _59; // in scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
                        }
                        scope 25 {
                            debug __field2 => _61; // in scope 25 at cita-chain/types/src/log.rs:26:21: 26:32
                        }
                        scope 26 {
                            debug __val => _64; // in scope 26 at cita-chain/types/src/log.rs:26:21: 26:32
                        }
                        scope 27 {
                            debug __err => _65; // in scope 27 at cita-chain/types/src/log.rs:26:21: 26:32
                        }
                    }
                    scope 21 {
                        debug __field1 => _54; // in scope 21 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 22 {
                        debug __val => _57; // in scope 22 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                    scope 23 {
                        debug __err => _58; // in scope 23 at cita-chain/types/src/log.rs:26:21: 26:32
                    }
                }
                scope 17 {
                    debug __field0 => _47; // in scope 17 at cita-chain/types/src/log.rs:26:21: 26:32
                }
                scope 18 {
                    debug __val => _50;  // in scope 18 at cita-chain/types/src/log.rs:26:21: 26:32
                }
                scope 19 {
                    debug __err => _51;  // in scope 19 at cita-chain/types/src/log.rs:26:21: 26:32
                }
            }
        }
    }

    bb0: {
        _70 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _71 = const false;               // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _3 = std::option::Option::<H160>::None; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _71 = const true;                // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _4 = std::option::Option::<Vec<H256>>::None; // scope 1 at cita-chain/types/src/log.rs:26:21: 26:32
        _70 = const true;                // scope 2 at cita-chain/types/src/log.rs:26:21: 26:32
        _5 = std::option::Option::<Vec<u8>>::None; // scope 2 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb1;                     // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb1: {
        _7 = &mut _2;                    // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _6 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_6);           // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _10); // scope 6 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb4: {
        unreachable;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field>); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _11 = discriminant(_9);          // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _11) -> [1: bb7, otherwise: bb6]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb6: {
        _46 = discriminant(_3);          // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _46) -> [0: bb43, 1: bb45, otherwise: bb44]; // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb7: {
        _12 = move ((_9 as Some).0: log::_IMPL_DESERIALIZE_FOR_Log::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for log::Log>::deserialize::__Field); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _13 = discriminant(_12);         // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _13) -> [0: bb9, 1: bb18, 2: bb29, otherwise: bb8]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb8: {
        _42 = &mut _2;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb40, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = &_3;                       // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _14 = std::option::Option::<H160>::is_some(_15) -> [return: bb10, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H160>) -> bool {std::option::Option::<H160>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "address") -> [return: bb12, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _16); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb13: {
        _19 = &mut _2;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _18 = <__A as MapAccess<'_>>::next_value::<H160>(_19) -> [return: bb14, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:8
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<H160, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<H160>}, val: Value(<ZST>) }
    }

    bb14: {
        _20 = discriminant(_18);         // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _20) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _22); // scope 8 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb16: {
        unreachable;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb17: {
        _21 = ((_18 as Ok).0: cita_types::H160); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _17 = std::option::Option::<H160>::Some(_21); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _3 = move _17;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb1;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb18: {
        _24 = &_4;                       // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _23 = std::option::Option::<Vec<H256>>::is_some(_24) -> [return: bb19, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<Vec<H256>>) -> bool {std::option::Option::<Vec<H256>>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _23) -> [0: bb22, otherwise: bb20]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb20: {
        _25 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "topics") -> [return: bb21, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _25); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb22: {
        _28 = &mut _2;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _27 = <__A as MapAccess<'_>>::next_value::<Vec<H256>>(_28) -> [return: bb23, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:8
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<Vec<H256>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb23: {
        _29 = discriminant(_27);         // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _29) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb24: {
        _31 = move ((_27 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _31); // scope 10 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb25: {
        unreachable;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb26: {
        _30 = move ((_27 as Ok).0: std::vec::Vec<cita_types::H256>); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _26 = std::option::Option::<Vec<H256>>::Some(move _30); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        drop(_4) -> [return: bb27, unwind: bb28]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb27: {
        _71 = const true;                // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _4 = move _26;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb1;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb28 (cleanup): {
        _71 = const true;                // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _4 = move _26;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb81;                    // scope 4 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb29: {
        _33 = &_5;                       // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _32 = std::option::Option::<Vec<u8>>::is_some(_33) -> [return: bb30, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<Vec<u8>>) -> bool {std::option::Option::<Vec<u8>>::is_some}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _32) -> [0: bb33, otherwise: bb31]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb31: {
        _34 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "data") -> [return: bb32, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _34); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb33: {
        _37 = &mut _2;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _36 = <__A as MapAccess<'_>>::next_value::<Vec<u8>>(_37) -> [return: bb34, unwind: bb81]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:8
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<Vec<u8>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb34: {
        _38 = discriminant(_36);         // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _38) -> [0: bb37, 1: bb35, otherwise: bb36]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb35: {
        _40 = move ((_36 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _40); // scope 12 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb36: {
        unreachable;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb37: {
        _39 = move ((_36 as Ok).0: std::vec::Vec<u8>); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _35 = std::option::Option::<Vec<u8>>::Some(move _39); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        drop(_5) -> [return: bb38, unwind: bb39]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb38: {
        _70 = const true;                // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _5 = move _35;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb1;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb39 (cleanup): {
        _70 = const true;                // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _5 = move _35;                   // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb81;                    // scope 4 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb40: {
        _43 = discriminant(_41);         // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _43) -> [0: bb1, 1: bb41, otherwise: bb42]; // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb41: {
        _44 = move ((_41 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _44); // scope 15 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 4 at no-location
    }

    bb42: {
        unreachable;                     // scope 4 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb43: {
        _48 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, H160, <__A as MapAccess<'_>>::Error>(const "address") -> [return: bb46, unwind: bb81]; // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<H160, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, H160, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb44: {
        unreachable;                     // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb45: {
        _47 = ((_3 as Some).0: cita_types::H160); // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        _45 = _47;                       // scope 17 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb50;                    // scope 3 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb46: {
        _49 = discriminant(_48);         // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _49) -> [0: bb49, 1: bb47, otherwise: bb48]; // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb47: {
        _51 = move ((_48 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _51); // scope 19 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 3 at no-location
    }

    bb48: {
        unreachable;                     // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb49: {
        _50 = ((_48 as Ok).0: cita_types::H160); // scope 3 at cita-chain/types/src/log.rs:26:21: 26:32
        _45 = _50;                       // scope 18 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb50;                    // scope 3 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb50: {
        _53 = discriminant(_4);          // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _53) -> [0: bb51, 1: bb53, otherwise: bb52]; // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb51: {
        _55 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<H256>, <__A as MapAccess<'_>>::Error>(const "topics") -> [return: bb54, unwind: bb81]; // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<Vec<H256>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<H256>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        unreachable;                     // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb53: {
        _71 = const false;               // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        _54 = move ((_4 as Some).0: std::vec::Vec<cita_types::H256>); // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        _52 = move _54;                  // scope 21 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb58;                    // scope 16 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb54: {
        _56 = discriminant(_55);         // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _56) -> [0: bb57, 1: bb55, otherwise: bb56]; // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb55: {
        _58 = move ((_55 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _58); // scope 23 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb75;                    // scope 16 at no-location
    }

    bb56: {
        unreachable;                     // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb57: {
        _57 = move ((_55 as Ok).0: std::vec::Vec<cita_types::H256>); // scope 16 at cita-chain/types/src/log.rs:26:21: 26:32
        _52 = move _57;                  // scope 22 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb58;                    // scope 16 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb58: {
        _60 = discriminant(_5);          // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _60) -> [0: bb59, 1: bb61, otherwise: bb60]; // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb59: {
        _62 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<u8>, <__A as MapAccess<'_>>::Error>(const "data") -> [return: bb62, unwind: bb68]; // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<Vec<u8>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<u8>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        unreachable;                     // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb61: {
        _70 = const false;               // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        _61 = move ((_5 as Some).0: std::vec::Vec<u8>); // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        _59 = move _61;                  // scope 25 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb66;                    // scope 20 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb62: {
        _63 = discriminant(_62);         // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        switchInt(move _63) -> [0: bb65, 1: bb63, otherwise: bb64]; // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb63: {
        _65 = move ((_62 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Err(move _65); // scope 27 at cita-chain/types/src/log.rs:26:21: 26:32
        drop(_52) -> [return: bb75, unwind: bb81]; // scope 16 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb64: {
        unreachable;                     // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb65: {
        _64 = move ((_62 as Ok).0: std::vec::Vec<u8>); // scope 20 at cita-chain/types/src/log.rs:26:21: 26:32
        _59 = move _64;                  // scope 26 at cita-chain/types/src/log.rs:26:21: 26:32
        goto -> bb66;                    // scope 20 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb66: {
        _67 = _45;                       // scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
        _68 = move _52;                  // scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
        _69 = move _59;                  // scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
        _66 = log::Log { address: move _67, topics: move _68, data: move _69 }; // scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = Result::<log::Log, <__A as MapAccess<'_>>::Error>::Ok(move _66); // scope 24 at cita-chain/types/src/log.rs:26:21: 26:32
        _70 = const false;               // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
        _71 = const false;               // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
        drop(_2) -> bb67;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb67: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:32: 26:32
    }

    bb68 (cleanup): {
        drop(_52) -> bb81;               // scope 16 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb69 (cleanup): {
        _75 = discriminant(_4);          // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
        switchInt(move _75) -> [1: bb82, otherwise: bb70]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb70 (cleanup): {
        drop(_2) -> bb71;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb71 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }

    bb72: {
        _70 = const false;               // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
        _73 = discriminant(_4);          // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
        switchInt(move _73) -> [1: bb77, otherwise: bb76]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb73: {
        switchInt(_70) -> [0: bb72, otherwise: bb74]; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb74: {
        drop(((_5 as Some).0: std::vec::Vec<u8>)) -> [return: bb72, unwind: bb69]; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb75: {
        _72 = discriminant(_5);          // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
        switchInt(move _72) -> [1: bb73, otherwise: bb72]; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb76: {
        _71 = const false;               // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
        drop(_2) -> bb67;                // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb77: {
        switchInt(_71) -> [0: bb76, otherwise: bb78]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb78: {
        drop(((_4 as Some).0: std::vec::Vec<cita_types::H256>)) -> [return: bb76, unwind: bb70]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb79 (cleanup): {
        switchInt(_70) -> [0: bb69, otherwise: bb80]; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb80 (cleanup): {
        drop(((_5 as Some).0: std::vec::Vec<u8>)) -> bb69; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb81 (cleanup): {
        _74 = discriminant(_5);          // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
        switchInt(move _74) -> [1: bb79, otherwise: bb69]; // scope 2 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb82 (cleanup): {
        switchInt(_71) -> [0: bb70, otherwise: bb83]; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }

    bb83 (cleanup): {
        drop(((_4 as Some).0: std::vec::Vec<cita_types::H256>)) -> bb70; // scope 1 at cita-chain/types/src/log.rs:26:31: 26:32
    }
}

const _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: &[&str; 3];              // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _2: &[&str; 3];                  // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let _3: [&str; 3];                   // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _4: &[&str; 3];              // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        StorageLive(_2);                 // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _4 = const _;                    // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Log::<impl Deserialize<'de> for log::Log>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _1 = &(*_2);                     // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        StorageDead(_2);                 // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
        StorageDead(_1);                 // scope 0 at cita-chain/types/src/log.rs:26:31: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Log::<impl at cita-chain/types/src/log.rs:26:21: 26:32>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    let mut _1: [&str; 3];               // in scope 0 at cita-chain/types/src/log.rs:26:21: 26:32

    bb0: {
        _1 = [const "address", const "topics", const "data"]; // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:21: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:21: 26:32
    }
}

fn log::<impl at cita-chain/types/src/log.rs:26:34: 26:41>::default() -> log::Log {
    let mut _0: log::Log;                // return place in scope 0 at cita-chain/types/src/log.rs:26:34: 26:41
    let mut _1: cita_types::H160;        // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _2: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _3: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20

    bb0: {
        _1 = <H160 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:25
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Vec<H256> as Default>::default() -> bb2; // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:22
                                         // + literal: Const { ty: fn() -> Vec<H256> {<Vec<H256> as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Vec<u8> as Default>::default() -> [return: bb3, unwind: bb4]; // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:20
                                         // + literal: Const { ty: fn() -> Vec<u8> {<Vec<u8> as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = log::Log { address: move _1, topics: move _2, data: move _3 }; // scope 0 at cita-chain/types/src/log.rs:26:34: 26:41
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:41: 26:41
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/types/src/log.rs:26:40: 26:41
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:26:34: 26:41
    }
}

fn log::<impl at cita-chain/types/src/log.rs:26:43: 26:48>::fmt(_1: &log::Log, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
    debug f => _2;                       // in scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
    let _3: &str;                        // in scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
    let _4: &str;                        // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let _6: &cita_types::H160;           // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let _7: &str;                        // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let _9: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let _10: &str;                       // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let _12: &&std::vec::Vec<u8>;        // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let _13: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20

    bb0: {
        _3 = const "Log";                // scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:43: 26:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "address";            // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
        _7 = const "topics";             // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        _10 = const "data";              // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _12 = &_13;                      // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1; // scope 0 at cita-chain/types/src/log.rs:26:43: 26:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:26:43: 26:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:48: 26:48
    }
}

fn log::<impl at cita-chain/types/src/log.rs:26:50: 26:55>::clone(_1: &log::Log) -> log::Log {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:50: 26:55
    let mut _0: log::Log;                // return place in scope 0 at cita-chain/types/src/log.rs:26:50: 26:55
    let mut _2: cita_types::H160;        // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let _3: &cita_types::H160;           // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _4: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let _5: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _6: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let _7: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20

    bb0: {
        _3 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
        _2 = <H160 as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:25
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        _4 = <Vec<H256> as Clone>::clone(_5) -> bb2; // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> Vec<H256> {<Vec<H256> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _6 = <Vec<u8> as Clone>::clone(_7) -> [return: bb3, unwind: bb4]; // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = log::Log { address: move _2, topics: move _4, data: move _6 }; // scope 0 at cita-chain/types/src/log.rs:26:50: 26:55
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:55: 26:55
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at cita-chain/types/src/log.rs:26:54: 26:55
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:26:50: 26:55
    }
}

fn log::<impl at cita-chain/types/src/log.rs:26:57: 26:66>::eq(_1: &log::Log, _2: &log::Log) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:57: 26:66
    debug other => _2;                   // in scope 0 at cita-chain/types/src/log.rs:26:57: 26:66
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/log.rs:26:57: 26:66
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _5: &cita_types::H160;       // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _6: &cita_types::H160;       // in scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _8: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _9: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let mut _11: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    let mut _12: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/log.rs:30:5: 30:20

    bb0: {
        _5 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
        _6 = &((*_2).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
        _4 = <H160 as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at cita-chain/types/src/log.rs:28:5: 28:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:28:5: 28:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        goto -> bb3;                     // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    }

    bb2: {
        _11 = &((*_1).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _12 = &((*_2).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        _10 = <Vec<u8> as PartialEq>::eq(move _11, move _12) -> bb9; // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:30:5: 30:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b Vec<u8>) -> bool {<Vec<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:66: 26:66
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    }

    bb5: {
        _8 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        _9 = &((*_2).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        _7 = <Vec<H256> as PartialEq>::eq(move _8, move _9) -> bb8; // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:29:5: 29:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<H256>, &'b Vec<H256>) -> bool {<Vec<H256> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    }

    bb8: {
        _3 = move _7;                    // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:29:5: 29:22
    }

    bb9: {
        _0 = move _10;                   // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
        goto -> bb3;                     // scope 0 at cita-chain/types/src/log.rs:30:5: 30:20
    }
}

fn log::<impl at cita-chain/types/src/log.rs:26:68: 26:70>::assert_receiver_is_total_eq(_1: &log::Log) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:26:68: 26:70
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/log.rs:26:68: 26:70
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:26:70: 26:70
    }
}

fn log::<impl at cita-chain/types/src/log.rs:33:1: 33:23>::rlp_append(_1: &log::Log, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:34:19: 34:24
    debug stream => _2;                  // in scope 0 at cita-chain/types/src/log.rs:34:26: 34:32
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/log.rs:34:50: 34:50
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/log.rs:35:9: 35:29
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/log.rs:36:9: 36:37
    let _5: &cita_types::H160;           // in scope 0 at cita-chain/types/src/log.rs:36:23: 36:36
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/log.rs:37:9: 37:41
    let mut _7: &[cita_types::H256];     // in scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
    let _8: &[cita_types::H256];         // in scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
    let _9: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/log.rs:38:9: 38:34
    let _11: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/log.rs:38:23: 38:33

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 3_usize) -> bb1; // scope 0 at cita-chain/types/src/log.rs:35:9: 35:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:35:16: 35:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:36:23: 36:36
        _4 = rlp::RlpStream::append::<H160>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/log.rs:36:9: 36:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:36:16: 36:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H160>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
        _8 = <Vec<H256> as Deref>::deref(_9) -> bb3; // scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:37:28: 37:40
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 0 at cita-chain/types/src/log.rs:37:28: 37:40
        _6 = rlp::RlpStream::append_list::<H256, H256>(_2, move _7) -> bb4; // scope 0 at cita-chain/types/src/log.rs:37:9: 37:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:37:16: 37:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [H256]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<H256, H256>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:38:23: 38:33
        _10 = rlp::RlpStream::append::<Vec<u8>>(_2, _11) -> bb5; // scope 0 at cita-chain/types/src/log.rs:38:9: 38:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:38:16: 38:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Vec<u8>) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:39:6: 39:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:42:1: 42:23>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<log::Log, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/log.rs:43:15: 43:18
    let mut _0: std::result::Result<log::Log, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/log.rs:43:38: 43:64
    let mut _2: log::Log;                // in scope 0 at cita-chain/types/src/log.rs:44:12: 48:10
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H160>; // in scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
    let mut _4: std::result::Result<cita_types::H160, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:45:22: 45:35
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/log.rs:45:35: 45:36
    let _6: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:45:35: 45:36
    let _7: cita_types::H160;            // in scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
    let mut _8: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<cita_types::H256>>; // in scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
    let mut _10: std::result::Result<std::vec::Vec<cita_types::H256>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:46:21: 46:35
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/log.rs:46:35: 46:36
    let _12: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:46:35: 46:36
    let _13: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
    let mut _15: std::result::Result<std::vec::Vec<u8>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:47:19: 47:32
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/log.rs:47:32: 47:33
    let _17: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log.rs:47:32: 47:33
    let _18: std::vec::Vec<u8>;          // in scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
    scope 1 {
        debug residual => _6;            // in scope 1 at cita-chain/types/src/log.rs:45:35: 45:36
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;                 // in scope 3 at cita-chain/types/src/log.rs:45:22: 45:36
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;           // in scope 5 at cita-chain/types/src/log.rs:46:35: 46:36
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;                // in scope 7 at cita-chain/types/src/log.rs:46:21: 46:36
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;           // in scope 9 at cita-chain/types/src/log.rs:47:32: 47:33
        scope 10 {
        }
    }
    scope 11 {
        debug val => _18;                // in scope 11 at cita-chain/types/src/log.rs:47:19: 47:33
        scope 12 {
        }
    }

    bb0: {
        _4 = rlp::UntrustedRlp::<'_>::val_at::<H160>(_1, const 0_usize) -> bb1; // scope 0 at cita-chain/types/src/log.rs:45:22: 45:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:45:26: 45:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H160, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H160>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<H160, rlp::DecoderError> as Try>::branch(move _4) -> bb2; // scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:45:22: 45:36
                                         // + literal: Const { ty: fn(Result<H160, rlp::DecoderError>) -> ControlFlow<<Result<H160, rlp::DecoderError> as Try>::Residual, <Result<H160, rlp::DecoderError> as Try>::Output> {<Result<H160, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
    }

    bb3: {
        _7 = ((_3 as Continue).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
        _10 = rlp::UntrustedRlp::<'_>::list_at::<H256>(_1, const 1_usize) -> bb6; // scope 0 at cita-chain/types/src/log.rs:46:21: 46:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:46:25: 46:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<H256>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::list_at::<H256>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:45:22: 45:36
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/log.rs:45:35: 45:36
        _0 = <Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _6) -> bb17; // scope 2 at cita-chain/types/src/log.rs:45:22: 45:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:45:35: 45:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<log::Log, rlp::DecoderError> {<Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = <Result<Vec<H256>, rlp::DecoderError> as Try>::branch(move _10) -> bb7; // scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:46:21: 46:36
                                         // + literal: Const { ty: fn(Result<Vec<H256>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<H256>, rlp::DecoderError> as Try>::Residual, <Result<Vec<H256>, rlp::DecoderError> as Try>::Output> {<Result<Vec<H256>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = discriminant(_9);          // scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
        switchInt(move _11) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
    }

    bb8: {
        _13 = move ((_9 as Continue).0: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
        _8 = move _13;                   // scope 8 at cita-chain/types/src/log.rs:46:21: 46:36
        _15 = rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>(_1, const 2_usize) -> [return: bb11, unwind: bb19]; // scope 0 at cita-chain/types/src/log.rs:47:19: 47:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:47:23: 47:29
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<u8>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:46:21: 46:36
    }

    bb10: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/log.rs:46:35: 46:36
        _0 = <Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _12) -> bb17; // scope 6 at cita-chain/types/src/log.rs:46:21: 46:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:46:35: 46:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<log::Log, rlp::DecoderError> {<Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = <Result<Vec<u8>, rlp::DecoderError> as Try>::branch(move _15) -> [return: bb12, unwind: bb19]; // scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:47:19: 47:33
                                         // + literal: Const { ty: fn(Result<Vec<u8>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<u8>, rlp::DecoderError> as Try>::Residual, <Result<Vec<u8>, rlp::DecoderError> as Try>::Output> {<Result<Vec<u8>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb12: {
        _16 = discriminant(_14);         // scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
        switchInt(move _16) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
    }

    bb13: {
        _18 = move ((_14 as Continue).0: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
        _2 = log::Log { address: _7, topics: move _8, data: move _18 }; // scope 0 at cita-chain/types/src/log.rs:44:12: 48:10
        _0 = Result::<log::Log, rlp::DecoderError>::Ok(move _2); // scope 0 at cita-chain/types/src/log.rs:44:9: 48:11
        goto -> bb17;                    // scope 0 at cita-chain/types/src/log.rs:49:6: 49:6
    }

    bb14: {
        unreachable;                     // scope 0 at cita-chain/types/src/log.rs:47:19: 47:33
    }

    bb15: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/log.rs:47:32: 47:33
        _0 = <Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _17) -> [return: bb16, unwind: bb18]; // scope 10 at cita-chain/types/src/log.rs:47:19: 47:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:47:32: 47:33
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<log::Log, rlp::DecoderError> {<Result<log::Log, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_8) -> bb17;                // scope 0 at cita-chain/types/src/log.rs:48:9: 48:10
    }

    bb17: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:49:6: 49:6
    }

    bb18 (cleanup): {
        drop(_8) -> bb20;                // scope 0 at cita-chain/types/src/log.rs:48:9: 48:10
    }

    bb19 (cleanup): {
        drop(_8) -> bb20;                // scope 0 at cita-chain/types/src/log.rs:48:9: 48:10
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:43:5: 49:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:52:1: 52:9>::bloom(_1: &log::Log) -> cita_types::Bloom {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:53:18: 53:23
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/log.rs:53:28: 53:33
    let mut _2: std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
    let mut _3: &[cita_types::H256];     // in scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
    let _4: &[cita_types::H256];         // in scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
    let mut _5: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
    let mut _6: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/log.rs:56:19: 56:49
    let mut _7: &[u8];                   // in scope 0 at cita-chain/types/src/log.rs:56:35: 56:48
    let _8: &[u8];                       // in scope 0 at cita-chain/types/src/log.rs:56:35: 56:48
    let _9: &cita_types::H160;           // in scope 0 at cita-chain/types/src/log.rs:56:35: 56:48

    bb0: {
        _5 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
        _4 = <Vec<H256> as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:54:9: 55:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
        _2 = core::slice::<impl [H256]>::iter(move _3) -> bb2; // scope 0 at cita-chain/types/src/log.rs:54:9: 55:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:55:14: 55:18
                                         // + literal: Const { ty: for<'a> fn(&'a [H256]) -> std::slice::Iter<'a, H256> {core::slice::<impl [H256]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:56:35: 56:48
        _8 = <H160 as Deref>::deref(_9) -> bb3; // scope 0 at cita-chain/types/src/log.rs:56:35: 56:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:56:35: 56:48
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 0 at cita-chain/types/src/log.rs:56:35: 56:48
        _6 = <cita_types::Bloom as BloomTools>::from_raw(move _7) -> bb4; // scope 0 at cita-chain/types/src/log.rs:56:19: 56:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:56:19: 56:34
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> cita_types::Bloom {<cita_types::Bloom as BloomTools>::from_raw}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = <std::slice::Iter<'_, H256> as Iterator>::fold::<cita_types::Bloom, [closure@cita-chain/types/src/log.rs:56:51: 56:65]>(move _2, move _6, const ZeroSized: [closure@cita-chain/types/src/log.rs:56:51: 56:65]) -> bb5; // scope 0 at cita-chain/types/src/log.rs:54:9: 60:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:56:14: 56:18
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, H256>, cita_types::Bloom, [closure@cita-chain/types/src/log.rs:56:51: 56:65]) -> cita_types::Bloom {<std::slice::Iter<'_, H256> as Iterator>::fold::<cita_types::Bloom, [closure@cita-chain/types/src/log.rs:56:51: 56:65]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/log.rs:56:51: 56:65], val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:61:6: 61:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:52:1: 52:9>::bloom::{closure#0}(_1: &mut [closure@cita-chain/types/src/log.rs:56:51: 56:65], _2: cita_types::Bloom, _3: &H256) -> cita_types::Bloom {
    debug bloom => _2;                   // in scope 0 at cita-chain/types/src/log.rs:56:52: 56:57
    debug topic => _3;                   // in scope 0 at cita-chain/types/src/log.rs:56:59: 56:64
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/log.rs:57:21: 57:30
    let _4: ();                          // in scope 0 at cita-chain/types/src/log.rs:58:17: 58:41
    let mut _5: &mut cita_types::Bloom;  // in scope 0 at cita-chain/types/src/log.rs:58:17: 58:41
    let mut _6: &[u8];                   // in scope 0 at cita-chain/types/src/log.rs:58:34: 58:40
    let _7: &[u8];                       // in scope 0 at cita-chain/types/src/log.rs:58:34: 58:40
    let _8: &&cita_types::H256;          // in scope 0 at cita-chain/types/src/log.rs:58:34: 58:40
    let mut _9: &cita_types::H256;       // in scope 0 at cita-chain/types/src/log.rs:58:34: 58:40
    scope 1 {
        debug bloom => _0;               // in scope 1 at cita-chain/types/src/log.rs:57:21: 57:30
    }

    bb0: {
        _0 = _2;                         // scope 0 at cita-chain/types/src/log.rs:57:33: 57:38
        _5 = &mut _0;                    // scope 1 at cita-chain/types/src/log.rs:58:17: 58:41
        _8 = &_3;                        // scope 1 at cita-chain/types/src/log.rs:58:34: 58:40
        _9 = deref_copy (*_8);           // scope 1 at cita-chain/types/src/log.rs:58:34: 58:40
        _7 = <H256 as Deref>::deref(_9) -> bb1; // scope 1 at cita-chain/types/src/log.rs:58:34: 58:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:58:34: 58:40
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 1 at cita-chain/types/src/log.rs:58:34: 58:40
        _4 = <cita_types::Bloom as BloomTools>::accrue_raw(move _5, move _6) -> bb2; // scope 1 at cita-chain/types/src/log.rs:58:17: 58:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:58:23: 58:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut cita_types::Bloom, &'b [u8]) {<cita_types::Bloom as BloomTools>::accrue_raw}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:60:14: 60:14
    }
}

fn log::<impl at cita-chain/types/src/log.rs:52:1: 52:9>::protobuf(_1: &log::Log) -> LogEntry {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:63:21: 63:26
    let mut _0: libproto::LogEntry;      // return place in scope 0 at cita-chain/types/src/log.rs:64:13: 64:26
    let _2: ();                          // in scope 0 at cita-chain/types/src/log.rs:66:9: 66:53
    let mut _3: &mut libproto::LogEntry; // in scope 0 at cita-chain/types/src/log.rs:66:9: 66:53
    let mut _4: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/log.rs:66:31: 66:52
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/log.rs:66:31: 66:52
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/log.rs:66:31: 66:52
    let mut _7: &cita_types::H160;       // in scope 0 at cita-chain/types/src/log.rs:66:31: 66:52
    let mut _8: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/log.rs:67:28: 72:23
    let mut _9: std::iter::Map<std::vec::IntoIter<cita_types::H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]>; // in scope 0 at cita-chain/types/src/log.rs:67:28: 71:41
    let mut _10: std::vec::IntoIter<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:67:28: 70:25
    let mut _11: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:67:28: 69:21
    let mut _12: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:67:28: 69:21
    let _13: ();                         // in scope 0 at cita-chain/types/src/log.rs:73:9: 73:46
    let mut _14: &mut libproto::LogEntry; // in scope 0 at cita-chain/types/src/log.rs:73:9: 73:46
    let mut _15: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/log.rs:73:28: 73:45
    let mut _16: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/log.rs:73:28: 73:45
    scope 1 {
        debug proto_log => _0;           // in scope 1 at cita-chain/types/src/log.rs:64:13: 64:26
    }

    bb0: {
        _0 = LogEntry::new() -> bb1;     // scope 0 at cita-chain/types/src/log.rs:64:29: 64:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:64:29: 64:42
                                         // + literal: Const { ty: fn() -> LogEntry {LogEntry::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/log.rs:66:9: 66:53
        _7 = &((*_1).0: cita_types::H160); // scope 1 at cita-chain/types/src/log.rs:66:31: 66:52
        _6 = <H160 as Deref>::deref(move _7) -> [return: bb2, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:66:31: 66:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:66:31: 66:52
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 1 at cita-chain/types/src/log.rs:66:31: 66:52
        _4 = slice::<impl [u8]>::to_vec(move _5) -> [return: bb3, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:66:31: 66:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:66:44: 66:50
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = LogEntry::set_address(move _3, move _4) -> [return: bb4, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:66:9: 66:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:66:19: 66:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut LogEntry, Vec<u8>) {LogEntry::set_address}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &((*_1).1: std::vec::Vec<cita_types::H256>); // scope 1 at cita-chain/types/src/log.rs:67:28: 69:21
        _11 = <Vec<H256> as Clone>::clone(move _12) -> [return: bb5, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:67:28: 69:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:69:14: 69:19
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> Vec<H256> {<Vec<H256> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = <Vec<H256> as IntoIterator>::into_iter(move _11) -> [return: bb6, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:67:28: 70:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:70:14: 70:23
                                         // + literal: Const { ty: fn(Vec<H256>) -> <Vec<H256> as IntoIterator>::IntoIter {<Vec<H256> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = <std::vec::IntoIter<H256> as Iterator>::map::<Vec<u8>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]>(move _10, const ZeroSized: [closure@cita-chain/types/src/log.rs:71:18: 71:25]) -> [return: bb7, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:67:28: 71:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:71:14: 71:17
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]) -> std::iter::Map<std::vec::IntoIter<H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]> {<std::vec::IntoIter<H256> as Iterator>::map::<Vec<u8>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/log.rs:71:18: 71:25], val: Value(<ZST>) }
    }

    bb7: {
        _8 = <std::iter::Map<std::vec::IntoIter<H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>(move _9) -> [return: bb8, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:67:28: 72:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:72:14: 72:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]>) -> protobuf::repeated::RepeatedField<Vec<u8>> {<std::iter::Map<std::vec::IntoIter<H256>, [closure@cita-chain/types/src/log.rs:71:18: 71:25]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop((_0.1: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>)) -> [return: bb9, unwind: bb10]; // scope 1 at cita-chain/types/src/log.rs:67:9: 67:25
    }

    bb9: {
        (_0.1: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>) = move _8; // scope 1 at cita-chain/types/src/log.rs:67:9: 67:25
        _14 = &mut _0;                   // scope 1 at cita-chain/types/src/log.rs:73:9: 73:46
        _16 = &((*_1).2: std::vec::Vec<u8>); // scope 1 at cita-chain/types/src/log.rs:73:28: 73:45
        _15 = <Vec<u8> as Clone>::clone(move _16) -> [return: bb11, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:73:28: 73:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:73:38: 73:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10 (cleanup): {
        (_0.1: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>) = move _8; // scope 1 at cita-chain/types/src/log.rs:67:9: 67:25
        goto -> bb13;                    // scope 1 at cita-chain/types/src/log.rs:72:22: 72:23
    }

    bb11: {
        _13 = LogEntry::set_data(move _14, move _15) -> [return: bb12, unwind: bb13]; // scope 1 at cita-chain/types/src/log.rs:73:9: 73:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:73:19: 73:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut LogEntry, Vec<u8>) {LogEntry::set_data}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:75:6: 75:6
    }

    bb13 (cleanup): {
        drop(_0) -> bb14;                // scope 0 at cita-chain/types/src/log.rs:75:5: 75:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:63:5: 75:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:52:1: 52:9>::protobuf::{closure#0}(_1: &mut [closure@cita-chain/types/src/log.rs:71:18: 71:25], _2: H256) -> Vec<u8> {
    debug topic => _2;                   // in scope 0 at cita-chain/types/src/log.rs:71:19: 71:24
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/types/src/log.rs:71:26: 71:26
    let mut _3: &[u8];                   // in scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
    let _4: &[u8];                       // in scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
    let mut _5: &cita_types::H256;       // in scope 0 at cita-chain/types/src/log.rs:71:26: 71:40

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
        _4 = <H256 as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:71:26: 71:40
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
        _0 = slice::<impl [u8]>::to_vec(move _3) -> bb2; // scope 0 at cita-chain/types/src/log.rs:71:26: 71:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:71:32: 71:38
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:71:40: 71:40
    }
}

fn log::<impl at cita-chain/types/src/log.rs:78:1: 78:26>::into(_1: log::Log) -> jsonrpc_types::rpc_types::Log {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:79:13: 79:17
    let mut _0: jsonrpc_types::rpc_types::Log; // return place in scope 0 at cita-chain/types/src/log.rs:79:22: 79:28
    let mut _2: cita_types::H160;        // in scope 0 at cita-chain/types/src/log.rs:81:22: 81:34
    let mut _3: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:82:21: 82:70
    let mut _4: std::iter::Map<std::vec::IntoIter<cita_types::H256>, fn(cita_types::H256) -> cita_types::H256 {<cita_types::H256 as std::convert::Into<cita_types::H256>>::into}>; // in scope 0 at cita-chain/types/src/log.rs:82:21: 82:60
    let mut _5: std::vec::IntoIter<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:82:21: 82:44
    let mut _6: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:82:21: 82:32
    let mut _7: jsonrpc_types::rpc_types::Data; // in scope 0 at cita-chain/types/src/log.rs:83:19: 83:35
    let mut _8: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/log.rs:83:19: 83:28
    let mut _9: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:84:25: 84:29
    let mut _10: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:85:27: 85:31
    let mut _11: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:86:31: 86:35
    let mut _12: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:87:32: 87:36
    let mut _13: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:88:24: 88:28
    let mut _14: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:89:36: 89:40
    let mut _15: bool;                   // in scope 0 at cita-chain/types/src/log.rs:91:5: 91:6

    bb0: {
        _15 = const false;               // scope 0 at cita-chain/types/src/log.rs:81:22: 81:34
        _15 = const true;                // scope 0 at cita-chain/types/src/log.rs:81:22: 81:34
        _2 = (_1.0: cita_types::H160);   // scope 0 at cita-chain/types/src/log.rs:81:22: 81:34
        _6 = move (_1.1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:82:21: 82:32
        _5 = <Vec<H256> as IntoIterator>::into_iter(move _6) -> [return: bb1, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:82:21: 82:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:82:33: 82:42
                                         // + literal: Const { ty: fn(Vec<H256>) -> <Vec<H256> as IntoIterator>::IntoIter {<Vec<H256> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::vec::IntoIter<H256> as Iterator>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>(move _5, <H256 as Into<H256>>::into) -> [return: bb2, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:82:21: 82:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:82:45: 82:48
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}) -> std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> {<std::vec::IntoIter<H256> as Iterator>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:82:49: 82:59
                                         // + literal: Const { ty: fn(H256) -> H256 {<H256 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>(move _4) -> [return: bb3, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:82:21: 82:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:82:61: 82:68
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}>) -> Vec<H256> {<std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = const false;               // scope 0 at cita-chain/types/src/log.rs:83:19: 83:28
        _8 = move (_1.2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:83:19: 83:28
        _7 = <Vec<u8> as Into<jsonrpc_types::rpc_types::Data>>::into(move _8) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/log.rs:83:19: 83:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:83:29: 83:33
                                         // + literal: Const { ty: fn(Vec<u8>) -> jsonrpc_types::rpc_types::Data {<Vec<u8> as Into<jsonrpc_types::rpc_types::Data>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/log.rs:84:25: 84:29
        _10 = std::option::Option::<U256>::None; // scope 0 at cita-chain/types/src/log.rs:85:27: 85:31
        _11 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/log.rs:86:31: 86:35
        _12 = std::option::Option::<U256>::None; // scope 0 at cita-chain/types/src/log.rs:87:32: 87:36
        _13 = std::option::Option::<U256>::None; // scope 0 at cita-chain/types/src/log.rs:88:24: 88:28
        _14 = std::option::Option::<U256>::None; // scope 0 at cita-chain/types/src/log.rs:89:36: 89:40
        _0 = jsonrpc_types::rpc_types::Log { address: move _2, topics: move _3, data: move _7, block_hash: move _9, block_number: move _10, transaction_hash: move _11, transaction_index: move _12, log_index: move _13, transaction_log_index: move _14 }; // scope 0 at cita-chain/types/src/log.rs:80:9: 90:10
        return;                          // scope 0 at cita-chain/types/src/log.rs:91:6: 91:6
    }

    bb5 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at cita-chain/types/src/log.rs:90:9: 90:10
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:79:5: 91:6
    }

    bb7 (cleanup): {
        drop((_1.2: std::vec::Vec<u8>)) -> bb6; // scope 0 at cita-chain/types/src/log.rs:91:5: 91:6
    }

    bb8 (cleanup): {
        switchInt(_15) -> [0: bb6, otherwise: bb7]; // scope 0 at cita-chain/types/src/log.rs:91:5: 91:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:95:10: 95:17>::default() -> LocalizedLog {
    let mut _0: log::LocalizedLog;       // return place in scope 0 at cita-chain/types/src/log.rs:95:10: 95:17
    let mut _1: log::Log;                // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _2: cita_types::H256;        // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _3: u64;                     // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _5: usize;                   // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _7: usize;                   // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37

    bb0: {
        _1 = <log::Log as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:97:5: 97:17
                                         // + literal: Const { ty: fn() -> log::Log {<log::Log as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <H256 as Default>::default() -> [return: bb2, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:98:5: 98:25
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <u64 as Default>::default() -> [return: bb3, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:99:5: 99:34
                                         // + literal: Const { ty: fn() -> u64 {<u64 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <H256 as Default>::default() -> [return: bb4, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:100:5: 100:31
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <usize as Default>::default() -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:101:5: 101:33
                                         // + literal: Const { ty: fn() -> usize {<usize as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <usize as Default>::default() -> [return: bb6, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:102:5: 102:25
                                         // + literal: Const { ty: fn() -> usize {<usize as Default>::default}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <usize as Default>::default() -> [return: bb7, unwind: bb8]; // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:103:5: 103:37
                                         // + literal: Const { ty: fn() -> usize {<usize as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = LocalizedLog { log: move _1, block_hash: move _2, block_number: move _3, transaction_hash: move _4, transaction_index: move _5, log_index: move _6, transaction_log_index: move _7 }; // scope 0 at cita-chain/types/src/log.rs:95:10: 95:17
        return;                          // scope 0 at cita-chain/types/src/log.rs:95:17: 95:17
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at cita-chain/types/src/log.rs:95:16: 95:17
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:95:10: 95:17
    }
}

fn log::<impl at cita-chain/types/src/log.rs:95:19: 95:24>::fmt(_1: &LocalizedLog, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let _4: &[&dyn std::fmt::Debug; 7];  // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let _5: [&dyn std::fmt::Debug; 7];   // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let _7: &log::Log;                   // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let _11: &u64;                       // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let _13: &cita_types::H256;          // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let _15: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let _17: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let _19: &&usize;                    // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let _20: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let _21: &str;                       // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _22: &[&str];                // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _23: &[&str; 7];             // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    scope 1 {
        debug names => _23;              // in scope 1 at cita-chain/types/src/log.rs:95:19: 95:24
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/log.rs:95:19: 95:24
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/log.rs:95:19: 95:24
        }
    }

    bb0: {
        _23 = const _;                   // scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:95:19: 95:24
                                         // + literal: Const { ty: &[&str; 7], val: Unevaluated(<LocalizedLog as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: log::Log);       // scope 1 at cita-chain/types/src/log.rs:97:5: 97:17
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:97:5: 97:17
        _9 = &((*_1).1: cita_types::H256); // scope 1 at cita-chain/types/src/log.rs:98:5: 98:25
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:98:5: 98:25
        _11 = &((*_1).2: u64);           // scope 1 at cita-chain/types/src/log.rs:99:5: 99:34
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:99:5: 99:34
        _13 = &((*_1).3: cita_types::H256); // scope 1 at cita-chain/types/src/log.rs:100:5: 100:31
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:100:5: 100:31
        _15 = &((*_1).4: usize);         // scope 1 at cita-chain/types/src/log.rs:101:5: 101:33
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:101:5: 101:33
        _17 = &((*_1).5: usize);         // scope 1 at cita-chain/types/src/log.rs:102:5: 102:25
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:102:5: 102:25
        _20 = &((*_1).6: usize);         // scope 1 at cita-chain/types/src/log.rs:103:5: 103:37
        _19 = &_20;                      // scope 1 at cita-chain/types/src/log.rs:103:5: 103:37
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:103:5: 103:37
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18]; // scope 1 at cita-chain/types/src/log.rs:95:19: 95:24
        _4 = &_5;                        // scope 1 at cita-chain/types/src/log.rs:95:19: 95:24
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/log.rs:95:19: 95:24
        _21 = const "LocalizedLog";      // scope 2 at cita-chain/types/src/log.rs:95:19: 95:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:95:19: 95:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/log.rs:95:19: 95:24
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _21, move _22, _3) -> bb1; // scope 2 at cita-chain/types/src/log.rs:95:19: 95:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:95:19: 95:24
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:95:24: 95:24
    }
}

promoted[0] in log::<impl at cita-chain/types/src/log.rs:95:19: 95:24>::fmt: &[&str; 7] = {
    let mut _0: &[&str; 7];              // return place in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _1: [&str; 7];               // in scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37

    bb0: {
        _3 = const "block_hash";         // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:98:5: 98:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        _5 = const "block_number";       // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:99:5: 99:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _7 = const "transaction_hash";   // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:100:5: 100:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        _9 = const "transaction_index";  // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:101:5: 101:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _11 = const "log_index";         // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:102:5: 102:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _13 = const "transaction_log_index"; // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:103:5: 103:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _1 = [const "log", move _2, move _4, move _6, move _8, move _10, move _12]; // scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:97:5: 97:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
        return;                          // scope 0 at cita-chain/types/src/log.rs:95:19: 95:24
    }
}

fn log::<impl at cita-chain/types/src/log.rs:95:26: 95:35>::eq(_1: &LocalizedLog, _2: &LocalizedLog) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:95:26: 95:35
    debug other => _2;                   // in scope 0 at cita-chain/types/src/log.rs:95:26: 95:35
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/log.rs:95:26: 95:35
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _9: &log::Log;               // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _10: &log::Log;              // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _12: &cita_types::H256;      // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _13: &cita_types::H256;      // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _16: u64;                    // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _17: bool;                   // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _18: &cita_types::H256;      // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _19: &cita_types::H256;      // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _21: usize;                  // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _22: usize;                  // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _23: bool;                   // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _24: usize;                  // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _25: usize;                  // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _26: bool;                   // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let mut _27: usize;                  // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let mut _28: usize;                  // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37

    bb0: {
        _9 = &((*_1).0: log::Log);       // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
        _10 = &((*_2).0: log::Log);      // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
        _8 = <log::Log as PartialEq>::eq(move _9, move _10) -> bb19; // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:97:5: 97:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Log, &'b log::Log) -> bool {<log::Log as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        goto -> bb3;                     // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    }

    bb2: {
        _27 = ((*_1).6: usize);          // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _28 = ((*_2).6: usize);          // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _26 = Eq(move _27, move _28);    // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _0 = move _26;                   // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        goto -> bb3;                     // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/log.rs:95:35: 95:35
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    }

    bb5: {
        _24 = ((*_1).5: usize);          // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _25 = ((*_2).5: usize);          // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _23 = Eq(move _24, move _25);    // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _3 = move _23;                   // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    }

    bb8: {
        _21 = ((*_1).4: usize);          // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _22 = ((*_2).4: usize);          // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _20 = Eq(move _21, move _22);    // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _4 = move _20;                   // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        goto -> bb12;                    // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    }

    bb11: {
        _18 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        _19 = &((*_2).3: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        _17 = <H256 as PartialEq>::eq(move _18, move _19) -> bb21; // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:100:5: 100:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        goto -> bb15;                    // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    }

    bb14: {
        _15 = ((*_1).2: u64);            // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _16 = ((*_2).2: u64);            // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _14 = Eq(move _15, move _16);    // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _6 = move _14;                   // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        goto -> bb15;                    // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    }

    bb16: {
        _7 = const false;                // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        goto -> bb18;                    // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    }

    bb17: {
        _12 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        _13 = &((*_2).1: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        _11 = <H256 as PartialEq>::eq(move _12, move _13) -> bb20; // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:98:5: 98:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    }

    bb19: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    }

    bb20: {
        _7 = move _11;                   // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        goto -> bb18;                    // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    }

    bb21: {
        _5 = move _17;                   // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        goto -> bb12;                    // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    }
}

fn log::<impl at cita-chain/types/src/log.rs:95:37: 95:42>::clone(_1: &LocalizedLog) -> LocalizedLog {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:95:37: 95:42
    let mut _0: log::LocalizedLog;       // return place in scope 0 at cita-chain/types/src/log.rs:95:37: 95:42
    let mut _2: log::Log;                // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let _3: &log::Log;                   // in scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
    let mut _6: u64;                     // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let _7: &u64;                        // in scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
    let mut _10: usize;                  // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let _11: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
    let mut _12: usize;                  // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let _13: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
    let mut _14: usize;                  // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
    let _15: &usize;                     // in scope 0 at cita-chain/types/src/log.rs:103:5: 103:37

    bb0: {
        _3 = &((*_1).0: log::Log);       // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
        _2 = <log::Log as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/log.rs:97:5: 97:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:97:5: 97:17
                                         // + literal: Const { ty: for<'a> fn(&'a log::Log) -> log::Log {<log::Log as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
        _4 = <H256 as Clone>::clone(_5) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/types/src/log.rs:98:5: 98:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:98:5: 98:25
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: u64);            // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _6 = (*_7);                      // scope 0 at cita-chain/types/src/log.rs:99:5: 99:34
        _9 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
        _8 = <H256 as Clone>::clone(_9) -> [return: bb3, unwind: bb4]; // scope 0 at cita-chain/types/src/log.rs:100:5: 100:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:100:5: 100:31
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &((*_1).4: usize);         // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _10 = (*_11);                    // scope 0 at cita-chain/types/src/log.rs:101:5: 101:33
        _13 = &((*_1).5: usize);         // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _12 = (*_13);                    // scope 0 at cita-chain/types/src/log.rs:102:5: 102:25
        _15 = &((*_1).6: usize);         // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _14 = (*_15);                    // scope 0 at cita-chain/types/src/log.rs:103:5: 103:37
        _0 = LocalizedLog { log: move _2, block_hash: move _4, block_number: move _6, transaction_hash: move _8, transaction_index: move _10, log_index: move _12, transaction_log_index: move _14 }; // scope 0 at cita-chain/types/src/log.rs:95:37: 95:42
        return;                          // scope 0 at cita-chain/types/src/log.rs:95:42: 95:42
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/types/src/log.rs:95:41: 95:42
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:95:37: 95:42
    }
}

fn log::<impl at cita-chain/types/src/log.rs:106:1: 106:28>::deref(_1: &LocalizedLog) -> &log::Log {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:109:14: 109:19
    let mut _0: &log::Log;               // return place in scope 0 at cita-chain/types/src/log.rs:110:9: 110:18

    bb0: {
        _0 = &((*_1).0: log::Log);       // scope 0 at cita-chain/types/src/log.rs:110:9: 110:18
        return;                          // scope 0 at cita-chain/types/src/log.rs:111:6: 111:6
    }
}

fn log::<impl at cita-chain/types/src/log.rs:114:1: 114:35>::into(_1: LocalizedLog) -> jsonrpc_types::rpc_types::Log {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log.rs:115:13: 115:17
    let mut _0: jsonrpc_types::rpc_types::Log; // return place in scope 0 at cita-chain/types/src/log.rs:115:22: 115:28
    let mut _2: cita_types::H160;        // in scope 0 at cita-chain/types/src/log.rs:117:22: 117:38
    let mut _3: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:118:21: 118:74
    let mut _4: std::iter::Map<std::vec::IntoIter<cita_types::H256>, fn(cita_types::H256) -> cita_types::H256 {<cita_types::H256 as std::convert::Into<cita_types::H256>>::into}>; // in scope 0 at cita-chain/types/src/log.rs:118:21: 118:64
    let mut _5: std::vec::IntoIter<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:118:21: 118:48
    let mut _6: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:118:21: 118:36
    let mut _7: jsonrpc_types::rpc_types::Data; // in scope 0 at cita-chain/types/src/log.rs:119:19: 119:39
    let mut _8: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/log.rs:119:19: 119:32
    let mut _9: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:120:25: 120:46
    let mut _10: cita_types::H256;       // in scope 0 at cita-chain/types/src/log.rs:120:30: 120:45
    let mut _11: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:121:27: 121:57
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/log.rs:121:32: 121:56
    let mut _13: u64;                    // in scope 0 at cita-chain/types/src/log.rs:121:32: 121:49
    let mut _14: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/log.rs:122:31: 122:58
    let mut _15: cita_types::H256;       // in scope 0 at cita-chain/types/src/log.rs:122:36: 122:57
    let mut _16: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:123:32: 123:67
    let mut _17: cita_types::U256;       // in scope 0 at cita-chain/types/src/log.rs:123:37: 123:66
    let mut _18: usize;                  // in scope 0 at cita-chain/types/src/log.rs:123:37: 123:59
    let mut _19: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:124:24: 124:51
    let mut _20: cita_types::U256;       // in scope 0 at cita-chain/types/src/log.rs:124:29: 124:50
    let mut _21: usize;                  // in scope 0 at cita-chain/types/src/log.rs:124:29: 124:43
    let mut _22: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/log.rs:125:36: 125:75
    let mut _23: cita_types::U256;       // in scope 0 at cita-chain/types/src/log.rs:125:41: 125:74
    let mut _24: usize;                  // in scope 0 at cita-chain/types/src/log.rs:125:41: 125:67
    let mut _25: bool;                   // in scope 0 at cita-chain/types/src/log.rs:127:5: 127:6

    bb0: {
        _25 = const false;               // scope 0 at cita-chain/types/src/log.rs:117:22: 117:38
        _25 = const true;                // scope 0 at cita-chain/types/src/log.rs:117:22: 117:38
        _2 = ((_1.0: log::Log).0: cita_types::H160); // scope 0 at cita-chain/types/src/log.rs:117:22: 117:38
        _6 = move ((_1.0: log::Log).1: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/types/src/log.rs:118:21: 118:36
        _5 = <Vec<H256> as IntoIterator>::into_iter(move _6) -> [return: bb1, unwind: bb13]; // scope 0 at cita-chain/types/src/log.rs:118:21: 118:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:118:37: 118:46
                                         // + literal: Const { ty: fn(Vec<H256>) -> <Vec<H256> as IntoIterator>::IntoIter {<Vec<H256> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::vec::IntoIter<H256> as Iterator>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>(move _5, <H256 as Into<H256>>::into) -> [return: bb2, unwind: bb13]; // scope 0 at cita-chain/types/src/log.rs:118:21: 118:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:118:49: 118:52
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}) -> std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> {<std::vec::IntoIter<H256> as Iterator>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:118:53: 118:63
                                         // + literal: Const { ty: fn(H256) -> H256 {<H256 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>(move _4) -> [return: bb3, unwind: bb13]; // scope 0 at cita-chain/types/src/log.rs:118:21: 118:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:118:65: 118:72
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}>) -> Vec<H256> {<std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = const false;               // scope 0 at cita-chain/types/src/log.rs:119:19: 119:32
        _8 = move ((_1.0: log::Log).2: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/log.rs:119:19: 119:32
        _7 = <Vec<u8> as Into<jsonrpc_types::rpc_types::Data>>::into(move _8) -> [return: bb4, unwind: bb10]; // scope 0 at cita-chain/types/src/log.rs:119:19: 119:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:119:33: 119:37
                                         // + literal: Const { ty: fn(Vec<u8>) -> jsonrpc_types::rpc_types::Data {<Vec<u8> as Into<jsonrpc_types::rpc_types::Data>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = (_1.1: cita_types::H256);  // scope 0 at cita-chain/types/src/log.rs:120:30: 120:45
        _9 = std::option::Option::<H256>::Some(move _10); // scope 0 at cita-chain/types/src/log.rs:120:25: 120:46
        _13 = (_1.2: u64);               // scope 0 at cita-chain/types/src/log.rs:121:32: 121:49
        _12 = <u64 as Into<U256>>::into(move _13) -> [return: bb5, unwind: bb9]; // scope 0 at cita-chain/types/src/log.rs:121:32: 121:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:121:50: 121:54
                                         // + literal: Const { ty: fn(u64) -> U256 {<u64 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = std::option::Option::<U256>::Some(move _12); // scope 0 at cita-chain/types/src/log.rs:121:27: 121:57
        _15 = (_1.3: cita_types::H256);  // scope 0 at cita-chain/types/src/log.rs:122:36: 122:57
        _14 = std::option::Option::<H256>::Some(move _15); // scope 0 at cita-chain/types/src/log.rs:122:31: 122:58
        _18 = (_1.4: usize);             // scope 0 at cita-chain/types/src/log.rs:123:37: 123:59
        _17 = <usize as Into<U256>>::into(move _18) -> [return: bb6, unwind: bb9]; // scope 0 at cita-chain/types/src/log.rs:123:37: 123:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:123:60: 123:64
                                         // + literal: Const { ty: fn(usize) -> U256 {<usize as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = std::option::Option::<U256>::Some(move _17); // scope 0 at cita-chain/types/src/log.rs:123:32: 123:67
        _21 = (_1.5: usize);             // scope 0 at cita-chain/types/src/log.rs:124:29: 124:43
        _20 = <usize as Into<U256>>::into(move _21) -> [return: bb7, unwind: bb9]; // scope 0 at cita-chain/types/src/log.rs:124:29: 124:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:124:44: 124:48
                                         // + literal: Const { ty: fn(usize) -> U256 {<usize as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = std::option::Option::<U256>::Some(move _20); // scope 0 at cita-chain/types/src/log.rs:124:24: 124:51
        _24 = (_1.6: usize);             // scope 0 at cita-chain/types/src/log.rs:125:41: 125:67
        _23 = <usize as Into<U256>>::into(move _24) -> [return: bb8, unwind: bb9]; // scope 0 at cita-chain/types/src/log.rs:125:41: 125:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log.rs:125:68: 125:72
                                         // + literal: Const { ty: fn(usize) -> U256 {<usize as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = std::option::Option::<U256>::Some(move _23); // scope 0 at cita-chain/types/src/log.rs:125:36: 125:75
        _0 = jsonrpc_types::rpc_types::Log { address: move _2, topics: move _3, data: move _7, block_hash: move _9, block_number: move _11, transaction_hash: move _14, transaction_index: move _16, log_index: move _19, transaction_log_index: move _22 }; // scope 0 at cita-chain/types/src/log.rs:116:9: 126:10
        return;                          // scope 0 at cita-chain/types/src/log.rs:127:6: 127:6
    }

    bb9 (cleanup): {
        drop(_7) -> bb10;                // scope 0 at cita-chain/types/src/log.rs:126:9: 126:10
    }

    bb10 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at cita-chain/types/src/log.rs:126:9: 126:10
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/log.rs:115:5: 127:6
    }

    bb12 (cleanup): {
        drop(((_1.0: log::Log).2: std::vec::Vec<u8>)) -> bb11; // scope 0 at cita-chain/types/src/log.rs:127:5: 127:6
    }

    bb13 (cleanup): {
        switchInt(_25) -> [0: bb11, otherwise: bb12]; // scope 0 at cita-chain/types/src/log.rs:127:5: 127:6
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:20:10: 20:15>::fmt(_1: &LogBloomGroup, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
    let _6: &&std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
    let _7: &std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26

    bb0: {
        _3 = const "LogBloomGroup";      // scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:20:10: 20:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "blooms";             // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:22:5: 22:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &((*_1).0: std::vec::Vec<cita_types::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
        _6 = &_7;                        // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:20:10: 20:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:20:10: 20:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:20:15: 20:15
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:20:17: 20:22>::clone(_1: &LogBloomGroup) -> LogBloomGroup {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log_blooms.rs:20:17: 20:22
    let mut _0: log_blooms::LogBloomGroup; // return place in scope 0 at cita-chain/types/src/log_blooms.rs:20:17: 20:22
    let mut _2: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
    let _3: &std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<cita_types::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
        _2 = <Vec<cita_types::Bloom> as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:22:5: 22:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:22:5: 22:26
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<cita_types::Bloom>) -> Vec<cita_types::Bloom> {<Vec<cita_types::Bloom> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = LogBloomGroup { blooms: move _2 }; // scope 0 at cita-chain/types/src/log_blooms.rs:20:17: 20:22
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:20:22: 20:22
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:25:1: 25:40>::from(_1: BloomGroup) -> LogBloomGroup {
    debug group => _1;                   // in scope 0 at cita-chain/types/src/log_blooms.rs:26:13: 26:18
    let mut _0: log_blooms::LogBloomGroup; // return place in scope 0 at cita-chain/types/src/log_blooms.rs:26:35: 26:39
    let _2: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:27:13: 27:19
    let mut _3: std::iter::Map<std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]>; // in scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 30:65
    let mut _4: std::vec::IntoIter<bloomchain::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 29:25
    let mut _5: std::vec::Vec<bloomchain::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 28:20
    let mut _6: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:32:25: 32:31
    scope 1 {
        debug blooms => _2;              // in scope 1 at cita-chain/types/src/log_blooms.rs:27:13: 27:19
    }

    bb0: {
        _5 = move (_1.0: std::vec::Vec<bloomchain::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 28:20
        _4 = <Vec<bloomchain::Bloom> as IntoIterator>::into_iter(move _5) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 29:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:29:14: 29:23
                                         // + literal: Const { ty: fn(Vec<bloomchain::Bloom>) -> <Vec<bloomchain::Bloom> as IntoIterator>::IntoIter {<Vec<bloomchain::Bloom> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::vec::IntoIter<bloomchain::Bloom> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]>(move _4, const ZeroSized: [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 30:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:30:14: 30:17
                                         // + literal: Const { ty: fn(std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]) -> std::iter::Map<std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]> {<std::vec::IntoIter<bloomchain::Bloom> as Iterator>::map::<cita_types::Bloom, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21], val: Value(<ZST>) }
    }

    bb2: {
        _2 = <std::iter::Map<std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]> as Iterator>::collect::<Vec<cita_types::Bloom>>(move _3) -> bb3; // scope 0 at cita-chain/types/src/log_blooms.rs:27:22: 31:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:31:14: 31:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]>) -> Vec<cita_types::Bloom> {<std::iter::Map<std::vec::IntoIter<bloomchain::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21]> as Iterator>::collect::<Vec<cita_types::Bloom>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _2;                    // scope 1 at cita-chain/types/src/log_blooms.rs:32:25: 32:31
        _0 = LogBloomGroup { blooms: move _6 }; // scope 1 at cita-chain/types/src/log_blooms.rs:32:9: 32:33
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:33:6: 33:6
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:25:1: 25:40>::from::{closure#0}(_1: &mut [closure@cita-chain/types/src/log_blooms.rs:30:18: 30:21], _2: bloomchain::Bloom) -> cita_types::Bloom {
    debug x => _2;                       // in scope 0 at cita-chain/types/src/log_blooms.rs:30:19: 30:20
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/log_blooms.rs:30:22: 30:22
    let mut _3: [u8; 256];               // in scope 0 at cita-chain/types/src/log_blooms.rs:30:37: 30:63

    bb0: {
        _3 = <bloomchain::Bloom as Into<[u8; 256]>>::into(move _2) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:30:37: 30:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:30:37: 30:60
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(bloomchain::Bloom) -> [u8; 256] {<bloomchain::Bloom as Into<[u8; 256]>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <cita_types::Bloom as From<[u8; 256]>>::from(move _3) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:30:22: 30:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:30:22: 30:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u8; 256]) -> cita_types::Bloom {<cita_types::Bloom as From<[u8; 256]>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:30:64: 30:64
    }
}

log_blooms::<impl at cita-chain/types/src/log_blooms.rs:25:1: 25:40>::from::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/log_blooms.rs:30:49: 30:52

    bb0: {
        _0 = const 256_usize;            // scope 0 at cita-chain/types/src/log_blooms.rs:30:49: 30:52
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:30:49: 30:52
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:36:1: 36:40>::into(_1: LogBloomGroup) -> BloomGroup {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log_blooms.rs:37:13: 37:17
    let mut _0: bloomchain::group::BloomGroup; // return place in scope 0 at cita-chain/types/src/log_blooms.rs:37:22: 37:32
    let _2: std::vec::Vec<bloomchain::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:38:13: 38:19
    let mut _3: std::iter::Map<std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]>; // in scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 41:62
    let mut _4: std::vec::IntoIter<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 40:25
    let mut _5: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 39:20
    let mut _6: std::vec::Vec<bloomchain::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:43:22: 43:28
    scope 1 {
        debug blooms => _2;              // in scope 1 at cita-chain/types/src/log_blooms.rs:38:13: 38:19
    }

    bb0: {
        _5 = move (_1.0: std::vec::Vec<cita_types::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 39:20
        _4 = <Vec<cita_types::Bloom> as IntoIterator>::into_iter(move _5) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 40:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:40:14: 40:23
                                         // + literal: Const { ty: fn(Vec<cita_types::Bloom>) -> <Vec<cita_types::Bloom> as IntoIterator>::IntoIter {<Vec<cita_types::Bloom> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::vec::IntoIter<cita_types::Bloom> as Iterator>::map::<bloomchain::Bloom, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]>(move _4, const ZeroSized: [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 41:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:41:14: 41:17
                                         // + literal: Const { ty: fn(std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]) -> std::iter::Map<std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]> {<std::vec::IntoIter<cita_types::Bloom> as Iterator>::map::<bloomchain::Bloom, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21], val: Value(<ZST>) }
    }

    bb2: {
        _2 = <std::iter::Map<std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]> as Iterator>::collect::<Vec<bloomchain::Bloom>>(move _3) -> bb3; // scope 0 at cita-chain/types/src/log_blooms.rs:38:22: 42:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:42:14: 42:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]>) -> Vec<bloomchain::Bloom> {<std::iter::Map<std::vec::IntoIter<cita_types::Bloom>, [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21]> as Iterator>::collect::<Vec<bloomchain::Bloom>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _2;                    // scope 1 at cita-chain/types/src/log_blooms.rs:43:22: 43:28
        _0 = BloomGroup { blooms: move _6 }; // scope 1 at cita-chain/types/src/log_blooms.rs:43:9: 43:30
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:44:6: 44:6
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:36:1: 36:40>::into::{closure#0}(_1: &mut [closure@cita-chain/types/src/log_blooms.rs:41:18: 41:21], _2: cita_types::Bloom) -> bloomchain::Bloom {
    debug x => _2;                       // in scope 0 at cita-chain/types/src/log_blooms.rs:41:19: 41:20
    let mut _0: bloomchain::Bloom;       // return place in scope 0 at cita-chain/types/src/log_blooms.rs:41:22: 41:22
    let mut _3: [u8; 256];               // in scope 0 at cita-chain/types/src/log_blooms.rs:41:34: 41:60

    bb0: {
        _3 = <cita_types::Bloom as Into<[u8; 256]>>::into(_2) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:41:34: 41:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:41:34: 41:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(cita_types::Bloom) -> [u8; 256] {<cita_types::Bloom as Into<[u8; 256]>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <bloomchain::Bloom as From<[u8; 256]>>::from(move _3) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:41:22: 41:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:41:22: 41:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u8; 256]) -> bloomchain::Bloom {<bloomchain::Bloom as From<[u8; 256]>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:41:61: 41:61
    }
}

log_blooms::<impl at cita-chain/types/src/log_blooms.rs:36:1: 36:40>::into::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/log_blooms.rs:41:46: 41:49

    bb0: {
        _0 = const 256_usize;            // scope 0 at cita-chain/types/src/log_blooms.rs:41:46: 41:49
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:41:46: 41:49
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:47:1: 47:33>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<LogBloomGroup, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/log_blooms.rs:48:15: 48:18
    let mut _0: std::result::Result<log_blooms::LogBloomGroup, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/log_blooms.rs:48:38: 48:64
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<cita_types::Bloom>>; // in scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
    let mut _3: std::result::Result<std::vec::Vec<cita_types::Bloom>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:35
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/log_blooms.rs:49:35: 49:36
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/log_blooms.rs:49:35: 49:36
    let _6: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
    scope 1 {
        debug blooms => _6;              // in scope 1 at cita-chain/types/src/log_blooms.rs:49:13: 49:19
        let _7: log_blooms::LogBloomGroup; // in scope 1 at cita-chain/types/src/log_blooms.rs:50:13: 50:18
        scope 6 {
            debug group => _7;           // in scope 6 at cita-chain/types/src/log_blooms.rs:50:13: 50:18
        }
    }
    scope 2 {
        debug residual => _5;            // in scope 2 at cita-chain/types/src/log_blooms.rs:49:35: 49:36
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;                 // in scope 4 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
        scope 5 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::as_list::<cita_types::Bloom>(_1) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:49:26: 49:33
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<Vec<cita_types::Bloom>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_list::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<Vec<cita_types::Bloom>, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:49:22: 49:36
                                         // + literal: Const { ty: fn(Result<Vec<cita_types::Bloom>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<cita_types::Bloom>, rlp::DecoderError> as Try>::Residual, <Result<Vec<cita_types::Bloom>, rlp::DecoderError> as Try>::Output> {<Result<Vec<cita_types::Bloom>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
    }

    bb3: {
        _6 = move ((_2 as Continue).0: std::vec::Vec<cita_types::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
        _7 = LogBloomGroup { blooms: move _6 }; // scope 1 at cita-chain/types/src/log_blooms.rs:50:21: 50:45
        _0 = Result::<LogBloomGroup, rlp::DecoderError>::Ok(move _7); // scope 6 at cita-chain/types/src/log_blooms.rs:51:9: 51:18
        goto -> bb6;                     // scope 0 at cita-chain/types/src/log_blooms.rs:52:6: 52:6
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/log_blooms.rs:49:35: 49:36
        _0 = <Result<LogBloomGroup, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb6; // scope 3 at cita-chain/types/src/log_blooms.rs:49:22: 49:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:49:35: 49:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<LogBloomGroup, rlp::DecoderError> {<Result<LogBloomGroup, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:52:6: 52:6
    }
}

fn log_blooms::<impl at cita-chain/types/src/log_blooms.rs:55:1: 55:33>::rlp_append(_1: &LogBloomGroup, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/log_blooms.rs:56:19: 56:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/log_blooms.rs:56:26: 56:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/log_blooms.rs:56:45: 56:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/log_blooms.rs:57:9: 57:36
    let mut _4: &[cita_types::Bloom];    // in scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35
    let _5: &[cita_types::Bloom];        // in scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35
    let _6: &std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35

    bb0: {
        _6 = &((*_1).0: std::vec::Vec<cita_types::Bloom>); // scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35
        _5 = <Vec<cita_types::Bloom> as Deref>::deref(_6) -> bb1; // scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:57:23: 57:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<cita_types::Bloom>) -> &'a <Vec<cita_types::Bloom> as Deref>::Target {<Vec<cita_types::Bloom> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/log_blooms.rs:57:23: 57:35
        _3 = rlp::RlpStream::append_list::<cita_types::Bloom, cita_types::Bloom>(_2, move _4) -> bb2; // scope 0 at cita-chain/types/src/log_blooms.rs:57:9: 57:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/log_blooms.rs:57:11: 57:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [cita_types::Bloom]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<cita_types::Bloom, cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/log_blooms.rs:58:6: 58:6
    }
}

const _IMPL_SERIALIZE_FOR_Receipt: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }
}

fn _IMPL_SERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:10: 30:19>::serialize(_1: &receipt::Receipt, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    debug __serializer => _2;            // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _0: std::result::Result<<__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Ok, <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _3: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _4: std::result::Result<<__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct, <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _5: __S;                     // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _7: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _8: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _9: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _10: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _11: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _12: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _13: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _15: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _16: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _18: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _20: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _21: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _22: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _23: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _25: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _26: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _27: &std::vec::Vec<log::Log>;   // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _28: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _30: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _31: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _32: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _33: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _35: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _36: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _37: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _38: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _40: std::result::Result<(), <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _41: &mut <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let _42: &cita_types::H256;          // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _43: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _45: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    let mut _46: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    let mut _47: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _14: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _19: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _24: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _29: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _34: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _39: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        let _44: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 10 {
            debug __val => const ();     // in scope 10 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 11 {
            debug __err => _29;          // in scope 11 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 12 {
            debug __val => const ();     // in scope 12 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 13 {
            debug __err => _34;          // in scope 13 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 14 {
            debug __val => const ();     // in scope 14 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 15 {
            debug __err => _39;          // in scope 15 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 16 {
            debug __val => const ();     // in scope 16 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
        scope 17 {
            debug __err => _44;          // in scope 17 at cita-chain/types/src/receipt.rs:30:10: 30:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb0: {
        _47 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _46 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _47 = const true;                // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _5 = move _2;                    // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _6 = const 7_usize;              // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _47 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Receipt", move _6) -> [return: bb1, unwind: bb41]; // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as Serializer>::SerializeStruct, <__S as Serializer>::Error> {<__S as Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _47 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
        _7 = discriminant(_4);           // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _9); // scope 3 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb35;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::SerializeStruct); // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _46 = const true;                // scope 2 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _3 = move _8;                    // scope 2 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _11 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _12 = &((*_1).0: std::option::Option<cita_types::H256>); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _10 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<H256>>(_11, const "state_root", _12) -> [return: bb5, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b std::option::Option<H256>) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<H256>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _14); // scope 5 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _17 = &((*_1).1: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _15 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<U256>(_16, const "quota_used", _17) -> [return: bb9, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b U256) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<U256>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _19); // scope 7 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _22 = &((*_1).2: cita_types::Bloom); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _20 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<cita_types::Bloom>(_21, const "log_bloom", _22) -> [return: bb13, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b cita_types::Bloom) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<cita_types::Bloom>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _24); // scope 9 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb16: {
        _26 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _27 = &((*_1).3: std::vec::Vec<log::Log>); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _25 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<log::Log>>(_26, const "logs", _27) -> [return: bb17, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b Vec<log::Log>) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<log::Log>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _28 = discriminant(_25);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _28) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb18: {
        _29 = move ((_25 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _29); // scope 11 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb19: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb20: {
        _31 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _32 = &((*_1).4: std::option::Option<errors::receipt::ReceiptError>); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _30 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<errors::receipt::ReceiptError>>(_31, const "error", _32) -> [return: bb21, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b std::option::Option<errors::receipt::ReceiptError>) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _33 = discriminant(_30);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _33) -> [0: bb24, 1: bb22, otherwise: bb23]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb22: {
        _34 = move ((_30 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _34); // scope 13 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb23: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb24: {
        _36 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _37 = &((*_1).5: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _35 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<U256>(_36, const "account_nonce", _37) -> [return: bb25, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b U256) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<U256>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _38 = discriminant(_35);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _38) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb26: {
        _39 = move ((_35 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _39); // scope 15 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb27: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb28: {
        _41 = &mut _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _42 = &((*_1).6: cita_types::H256); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _40 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<H256>(_41, const "transaction_hash", _42) -> [return: bb29, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as Serializer>::SerializeStruct, &'static str, &'b H256) -> Result<(), <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<H256>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _43 = discriminant(_40);         // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        switchInt(move _43) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb30: {
        _44 = move ((_40 as Err).0: <__S as log::_IMPL_SERIALIZE_FOR_Log::_serde::Serializer>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _44); // scope 17 at cita-chain/types/src/receipt.rs:30:10: 30:19
        goto -> bb34;                    // scope 1 at no-location
    }

    bb31: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb32: {
        _46 = const false;               // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _45 = move _3;                   // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _45) -> [return: bb33, unwind: bb39]; // scope 1 at cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:10: 30:19
                                         // + literal: Const { ty: fn(<__S as Serializer>::SerializeStruct) -> Result<<<__S as Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb33: {
        _46 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
        goto -> bb36;                    // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb34: {
        drop(_3) -> bb35;                // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb35: {
        _46 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
        goto -> bb36;                    // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb36: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:19: 30:19
    }

    bb37 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:30:10: 30:19
    }

    bb38 (cleanup): {
        drop(_3) -> bb37;                // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb39 (cleanup): {
        switchInt(_46) -> [0: bb37, otherwise: bb38]; // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb40 (cleanup): {
        drop(_5) -> bb37;                // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }

    bb41 (cleanup): {
        switchInt(_47) -> [0: bb37, otherwise: bb40]; // scope 0 at cita-chain/types/src/receipt.rs:30:18: 30:19
    }
}

const _IMPL_DESERIALIZE_FOR_Receipt: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize(_1: __D) -> Result<receipt::Receipt, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::Receipt, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>>(move _1, const "Receipt", const _, const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<receipt::Receipt>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _3: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _4: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _5: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _6: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _7: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _8: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _9: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _10: __E;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _11: log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'_>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _12: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _13: &&str;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb1: {
        _11 = _IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _13 = const _;                   // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _12 = _13 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _10 = <__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value(move _11, move _12) -> bb9; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(_IMPL_SERIALIZE_FOR_Log::_serde::de::Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb5: {
        _6 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb6: {
        _7 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb7: {
        _8 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb8: {
        _9 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb9: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Err(move _10); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb10;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "field index 0 <= i < 7"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _10: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _11: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _12: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _13: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _14: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _15: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _16: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _17: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "state_root") -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb15]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "quota_used") -> bb3; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb16]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "log_bloom") -> bb5; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb17]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "logs") -> bb7; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb18]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "error") -> bb9; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb19]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "account_nonce") -> bb11; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _8) -> [0: bb12, otherwise: bb20]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb12: {
        _9 = <str as PartialEq>::eq(_2, const "transaction_hash") -> bb13; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _9) -> [0: bb14, otherwise: bb21]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb14: {
        _17 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__ignore; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _17); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb15: {
        _10 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _10); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb16: {
        _11 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _11); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb17: {
        _12 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb18: {
        _13 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb19: {
        _14 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb20: {
        _15 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb21: {
        _16 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _16); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb22;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb22: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __value => _2;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _3: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _4: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _7: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _9: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _10: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _12: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _13: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _15: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _16: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _17: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _18: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _19: usize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _21: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _22: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _23: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _24: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _25: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _26: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _27: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _28: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _18 = Len((*_2));                // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _19 = const 10_usize;            // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _20 = Eq(move _18, move _19);    // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _20) -> [0: bb21, otherwise: bb1]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb1: {
        switchInt((*_2)[0 of 10]) -> [115: bb2, 113: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb2: {
        switchInt((*_2)[1 of 10]) -> [116: bb3, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb3: {
        switchInt((*_2)[2 of 10]) -> [97: bb4, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb4: {
        switchInt((*_2)[3 of 10]) -> [116: bb5, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb5: {
        switchInt((*_2)[4 of 10]) -> [101: bb6, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb6: {
        switchInt((*_2)[5 of 10]) -> [95: bb7, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb7: {
        switchInt((*_2)[6 of 10]) -> [114: bb8, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb8: {
        switchInt((*_2)[7 of 10]) -> [111: bb9, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb9: {
        switchInt((*_2)[8 of 10]) -> [111: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb10: {
        switchInt((*_2)[9 of 10]) -> [116: bb73, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb11: {
        _28 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__ignore; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _28); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb12: {
        switchInt((*_2)[1 of 10]) -> [117: bb13, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb13: {
        switchInt((*_2)[2 of 10]) -> [111: bb14, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb14: {
        switchInt((*_2)[3 of 10]) -> [116: bb15, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb15: {
        switchInt((*_2)[4 of 10]) -> [97: bb16, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb16: {
        switchInt((*_2)[5 of 10]) -> [95: bb17, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb17: {
        switchInt((*_2)[6 of 10]) -> [117: bb18, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb18: {
        switchInt((*_2)[7 of 10]) -> [115: bb19, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb19: {
        switchInt((*_2)[8 of 10]) -> [101: bb20, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb20: {
        switchInt((*_2)[9 of 10]) -> [100: bb74, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb21: {
        _15 = Len((*_2));                // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _16 = const 9_usize;             // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _17 = Eq(move _15, move _16);    // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _17) -> [0: bb31, otherwise: bb22]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb22: {
        switchInt((*_2)[0 of 9]) -> [108: bb23, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb23: {
        switchInt((*_2)[1 of 9]) -> [111: bb24, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb24: {
        switchInt((*_2)[2 of 9]) -> [103: bb25, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb25: {
        switchInt((*_2)[3 of 9]) -> [95: bb26, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb26: {
        switchInt((*_2)[4 of 9]) -> [98: bb27, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb27: {
        switchInt((*_2)[5 of 9]) -> [108: bb28, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb28: {
        switchInt((*_2)[6 of 9]) -> [111: bb29, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb29: {
        switchInt((*_2)[7 of 9]) -> [111: bb30, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb30: {
        switchInt((*_2)[8 of 9]) -> [109: bb75, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb31: {
        _12 = Len((*_2));                // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _13 = const 4_usize;             // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _14 = Eq(move _12, move _13);    // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _14) -> [0: bb36, otherwise: bb32]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb32: {
        switchInt((*_2)[0 of 4]) -> [108: bb33, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb33: {
        switchInt((*_2)[1 of 4]) -> [111: bb34, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb34: {
        switchInt((*_2)[2 of 4]) -> [103: bb35, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb35: {
        switchInt((*_2)[3 of 4]) -> [115: bb76, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb36: {
        _9 = Len((*_2));                 // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _10 = const 5_usize;             // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _11) -> [0: bb42, otherwise: bb37]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb37: {
        switchInt((*_2)[0 of 5]) -> [101: bb38, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb38: {
        switchInt((*_2)[1 of 5]) -> [114: bb39, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb39: {
        switchInt((*_2)[2 of 5]) -> [114: bb40, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb40: {
        switchInt((*_2)[3 of 5]) -> [111: bb41, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb41: {
        switchInt((*_2)[4 of 5]) -> [114: bb77, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb42: {
        _6 = Len((*_2));                 // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _7 = const 13_usize;             // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _8) -> [0: bb56, otherwise: bb43]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb43: {
        switchInt((*_2)[0 of 13]) -> [97: bb44, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb44: {
        switchInt((*_2)[1 of 13]) -> [99: bb45, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb45: {
        switchInt((*_2)[2 of 13]) -> [99: bb46, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb46: {
        switchInt((*_2)[3 of 13]) -> [111: bb47, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb47: {
        switchInt((*_2)[4 of 13]) -> [117: bb48, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb48: {
        switchInt((*_2)[5 of 13]) -> [110: bb49, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb49: {
        switchInt((*_2)[6 of 13]) -> [116: bb50, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb50: {
        switchInt((*_2)[7 of 13]) -> [95: bb51, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb51: {
        switchInt((*_2)[8 of 13]) -> [110: bb52, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb52: {
        switchInt((*_2)[9 of 13]) -> [111: bb53, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb53: {
        switchInt((*_2)[10 of 13]) -> [110: bb54, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb54: {
        switchInt((*_2)[11 of 13]) -> [99: bb55, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb55: {
        switchInt((*_2)[12 of 13]) -> [101: bb78, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb56: {
        _3 = Len((*_2));                 // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _4 = const 16_usize;             // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _5) -> [0: bb11, otherwise: bb57]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb57: {
        switchInt((*_2)[0 of 16]) -> [116: bb58, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb58: {
        switchInt((*_2)[1 of 16]) -> [114: bb59, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb59: {
        switchInt((*_2)[2 of 16]) -> [97: bb60, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb60: {
        switchInt((*_2)[3 of 16]) -> [110: bb61, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb61: {
        switchInt((*_2)[4 of 16]) -> [115: bb62, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb62: {
        switchInt((*_2)[5 of 16]) -> [97: bb63, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb63: {
        switchInt((*_2)[6 of 16]) -> [99: bb64, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb64: {
        switchInt((*_2)[7 of 16]) -> [116: bb65, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb65: {
        switchInt((*_2)[8 of 16]) -> [105: bb66, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb66: {
        switchInt((*_2)[9 of 16]) -> [111: bb67, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb67: {
        switchInt((*_2)[10 of 16]) -> [110: bb68, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb68: {
        switchInt((*_2)[11 of 16]) -> [95: bb69, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb69: {
        switchInt((*_2)[12 of 16]) -> [104: bb70, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb70: {
        switchInt((*_2)[13 of 16]) -> [97: bb71, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb71: {
        switchInt((*_2)[14 of 16]) -> [115: bb72, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb72: {
        switchInt((*_2)[15 of 16]) -> [104: bb79, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb73: {
        _21 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field0; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _21); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb74: {
        _22 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _22); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb75: {
        _23 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field2; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _23); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb76: {
        _24 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field3; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _24); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb77: {
        _25 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field4; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _25); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb78: {
        _26 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field5; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _26); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb79: {
        _27 = const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field::__field6; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, __E>::Ok(move _27); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb80;                    // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb80: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field, <__D as log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __formatter => _2;             // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _3: &str;                        // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _3 = const "struct Receipt";     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>, _2: __A) -> Result<receipt::Receipt, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<receipt::Receipt>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __seq => _2;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::Receipt, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _3: std::result::Result<std::option::Option<std::option::Option<cita_types::H256>>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _4: &mut __A;                // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _6: std::option::Option<std::option::Option<cita_types::H256>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _7: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _9: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _10: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _11: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _12: std::result::Result<std::option::Option<cita_types::U256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _13: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _14: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _17: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _19: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _20: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _21: std::result::Result<std::option::Option<cita_types::Bloom>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _22: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _23: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _26: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _28: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _29: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _31: std::result::Result<std::option::Option<std::vec::Vec<log::Log>>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _32: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _33: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _36: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _38: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _39: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _40: std::result::Result<std::option::Option<std::option::Option<errors::receipt::ReceiptError>>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _41: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _42: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _45: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _47: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _48: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _49: std::result::Result<std::option::Option<cita_types::U256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _50: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _51: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _54: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _56: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _57: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _58: std::result::Result<std::option::Option<cita_types::H256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _59: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _60: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _63: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _65: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _66: &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _67: receipt::Receipt;       // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _68: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _69: &&str;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        let _15: std::option::Option<cita_types::U256>; // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        let _16: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        let _18: cita_types::U256;       // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        let mut _70: &&str;              // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
            let _24: std::option::Option<cita_types::Bloom>; // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
            let _25: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
            let _27: cita_types::Bloom;  // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
            let mut _71: &&str;          // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
            scope 9 {
                debug __field2 => _27;   // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let _30: std::vec::Vec<log::Log>; // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let _34: std::option::Option<std::vec::Vec<log::Log>>; // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let _35: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let _37: std::vec::Vec<log::Log>; // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let mut _72: &&str;      // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                scope 13 {
                    debug __field3 => _30; // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    let _43: std::option::Option<std::option::Option<errors::receipt::ReceiptError>>; // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    let _44: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    let _46: std::option::Option<errors::receipt::ReceiptError>; // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    let mut _73: &&str;  // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    scope 17 {
                        debug __field4 => _46; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        let _52: std::option::Option<cita_types::U256>; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        let _53: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        let _55: cita_types::U256; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        let mut _74: &&str; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        scope 21 {
                            debug __field5 => _55; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            let _61: std::option::Option<cita_types::H256>; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            let _62: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            let _64: cita_types::H256; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            let mut _75: &&str; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            scope 25 {
                                debug __field6 => _64; // in scope 25 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            }
                            scope 26 {
                                debug __val => _61; // in scope 26 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            }
                            scope 27 {
                                debug __err => _62; // in scope 27 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            }
                            scope 28 {
                                debug __value => _64; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            }
                        }
                        scope 22 {
                            debug __val => _52; // in scope 22 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        }
                        scope 23 {
                            debug __err => _53; // in scope 23 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        }
                        scope 24 {
                            debug __value => _55; // in scope 24 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        }
                    }
                    scope 18 {
                        debug __val => _43; // in scope 18 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    }
                    scope 19 {
                        debug __err => _44; // in scope 19 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    }
                    scope 20 {
                        debug __value => _46; // in scope 20 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    }
                }
                scope 14 {
                    debug __val => _34;  // in scope 14 at cita-chain/types/src/receipt.rs:30:21: 30:32
                }
                scope 15 {
                    debug __err => _35;  // in scope 15 at cita-chain/types/src/receipt.rs:30:21: 30:32
                }
                scope 16 {
                    debug __value => _37; // in scope 16 at cita-chain/types/src/receipt.rs:30:21: 30:32
                }
            }
            scope 10 {
                debug __val => _24;      // in scope 10 at cita-chain/types/src/receipt.rs:30:21: 30:32
            }
            scope 11 {
                debug __err => _25;      // in scope 11 at cita-chain/types/src/receipt.rs:30:21: 30:32
            }
            scope 12 {
                debug __value => _27;    // in scope 12 at cita-chain/types/src/receipt.rs:30:21: 30:32
            }
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-chain/types/src/receipt.rs:30:21: 30:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<H256>>(_4) -> [return: bb1, unwind: bb61]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::option::Option<H256>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::option::Option<H256>>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<cita_types::H256>>); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _8 = discriminant(_6);           // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb5: {
        _69 = const _;                   // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _69 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb61]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb7: {
        _9 = ((_6 as Some).0: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _13 = &mut _2;                   // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _12 = <__A as SeqAccess<'_>>::next_element::<U256>(_13) -> [return: bb9, unwind: bb61]; // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<U256>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<U256>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<cita_types::U256>); // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _17 = discriminant(_15);         // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb13: {
        _70 = const _;                   // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _70 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb61]; // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb15: {
        _18 = ((_15 as Some).0: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _22 = &mut _2;                   // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _21 = <__A as SeqAccess<'_>>::next_element::<cita_types::Bloom>(_22) -> [return: bb17, unwind: bb61]; // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<cita_types::Bloom>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 1 at no-location
    }

    bb17: {
        _23 = discriminant(_21);         // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _23) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb18: {
        _25 = move ((_21 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _25); // scope 11 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb20: {
        _24 = ((_21 as Ok).0: std::option::Option<cita_types::Bloom>); // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _26 = discriminant(_24);         // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _26) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb21: {
        _71 = const _;                   // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _29 = _71 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _28 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb24, unwind: bb61]; // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb23: {
        _27 = ((_24 as Some).0: cita_types::Bloom); // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _32 = &mut _2;                   // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _31 = <__A as SeqAccess<'_>>::next_element::<Vec<log::Log>>(_32) -> [return: bb25, unwind: bb61]; // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:8
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<Vec<log::Log>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<Vec<log::Log>>}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _28); // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 5 at no-location
    }

    bb25: {
        _33 = discriminant(_31);         // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _33) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb26: {
        _35 = move ((_31 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _35); // scope 15 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb28: {
        _34 = move ((_31 as Ok).0: std::option::Option<std::vec::Vec<log::Log>>); // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _36 = discriminant(_34);         // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _36) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb29: {
        _72 = const _;                   // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3])) }
        _39 = _72 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _38 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb32, unwind: bb61]; // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb31: {
        _37 = move ((_34 as Some).0: std::vec::Vec<log::Log>); // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _30 = move _37;                  // scope 16 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _41 = &mut _2;                   // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _40 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<errors::receipt::ReceiptError>>(_41) -> [return: bb33, unwind: bb60]; // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:8
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::option::Option<errors::receipt::ReceiptError>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _38); // scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb58;                    // scope 9 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb33: {
        _42 = discriminant(_40);         // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _42) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb34: {
        _44 = move ((_40 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _44); // scope 19 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb36: {
        _43 = ((_40 as Ok).0: std::option::Option<std::option::Option<errors::receipt::ReceiptError>>); // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _45 = discriminant(_43);         // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _45) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb37: {
        _73 = const _;                   // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4])) }
        _48 = _73 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _47 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 4_usize, move _48) -> [return: bb40, unwind: bb60]; // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb39: {
        _46 = ((_43 as Some).0: std::option::Option<errors::receipt::ReceiptError>); // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _50 = &mut _2;                   // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _49 = <__A as SeqAccess<'_>>::next_element::<U256>(_50) -> [return: bb41, unwind: bb60]; // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:8
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<U256>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<U256>}, val: Value(<ZST>) }
    }

    bb40: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _47); // scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 13 at no-location
    }

    bb41: {
        _51 = discriminant(_49);         // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _51) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb42: {
        _53 = move ((_49 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _53); // scope 23 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 17 at no-location
    }

    bb43: {
        unreachable;                     // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb44: {
        _52 = ((_49 as Ok).0: std::option::Option<cita_types::U256>); // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _54 = discriminant(_52);         // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _54) -> [0: bb45, 1: bb47, otherwise: bb46]; // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb45: {
        _74 = const _;                   // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[5])) }
        _57 = _74 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _56 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 5_usize, move _57) -> [return: bb48, unwind: bb60]; // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb46: {
        unreachable;                     // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb47: {
        _55 = ((_52 as Some).0: cita_types::U256); // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _59 = &mut _2;                   // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _58 = <__A as SeqAccess<'_>>::next_element::<H256>(_59) -> [return: bb49, unwind: bb60]; // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:8
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<H256>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<H256>}, val: Value(<ZST>) }
    }

    bb48: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _56); // scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 17 at no-location
    }

    bb49: {
        _60 = discriminant(_58);         // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _60) -> [0: bb52, 1: bb50, otherwise: bb51]; // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb50: {
        _62 = move ((_58 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::SeqAccess<'_>>::Error); // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _62); // scope 27 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 21 at no-location
    }

    bb51: {
        unreachable;                     // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb52: {
        _61 = ((_58 as Ok).0: std::option::Option<cita_types::H256>); // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _63 = discriminant(_61);         // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _63) -> [0: bb53, 1: bb55, otherwise: bb54]; // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb53: {
        _75 = const _;                   // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[6])) }
        _66 = _75 as &dyn log::_IMPL_SERIALIZE_FOR_Log::_serde::de::Expected (Pointer(Unsize)); // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _65 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length(const 6_usize, move _66) -> [return: bb56, unwind: bb60]; // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb54: {
        unreachable;                     // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb55: {
        _64 = ((_61 as Some).0: cita_types::H256); // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _68 = move _30;                  // scope 25 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _67 = receipt::Receipt { state_root: _9, quota_used: _18, log_bloom: _27, logs: move _68, error: _46, account_nonce: _55, transaction_hash: _64 }; // scope 25 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Ok(move _67); // scope 25 at cita-chain/types/src/receipt.rs:30:21: 30:32
        drop(_2) -> bb59;                // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb56: {
        _0 = Result::<receipt::Receipt, <__A as SeqAccess<'_>>::Error>::Err(move _65); // scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb57;                    // scope 21 at no-location
    }

    bb57: {
        drop(_30) -> [return: bb58, unwind: bb61]; // scope 9 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb58: {
        drop(_2) -> bb59;                // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb59: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }

    bb60 (cleanup): {
        drop(_30) -> bb61;               // scope 9 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb61 (cleanup): {
        drop(_2) -> bb62;                // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb62 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[6] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = const "struct Receipt with 7 elements"; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor<'_>, _2: __A) -> Result<receipt::Receipt, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<receipt::Receipt>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    debug __map => _2;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _0: std::result::Result<receipt::Receipt, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _3: std::option::Option<std::option::Option<cita_types::H256>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _10: std::result::Result<std::option::Option<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _11: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _12: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _15: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _17: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _18: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _19: &std::option::Option<std::option::Option<cita_types::H256>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _20: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _21: std::option::Option<std::option::Option<cita_types::H256>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _22: std::result::Result<std::option::Option<cita_types::H256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _23: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _24: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _27: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _28: &std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _29: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _30: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _31: std::result::Result<cita_types::U256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _32: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _33: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _36: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _37: &std::option::Option<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _38: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _39: std::option::Option<cita_types::Bloom>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _40: std::result::Result<cita_types::Bloom, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _41: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _42: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _45: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _46: &std::option::Option<std::vec::Vec<log::Log>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _47: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _48: std::option::Option<std::vec::Vec<log::Log>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _49: std::result::Result<std::vec::Vec<log::Log>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _50: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _51: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _54: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _55: &std::option::Option<std::option::Option<errors::receipt::ReceiptError>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _56: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _57: std::option::Option<std::option::Option<errors::receipt::ReceiptError>>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _58: std::result::Result<std::option::Option<errors::receipt::ReceiptError>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _59: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _60: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _63: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _64: &std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _65: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _66: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _67: std::result::Result<cita_types::U256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _68: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _69: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _72: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _73: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _74: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _75: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _76: std::result::Result<cita_types::H256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _77: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _78: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _81: std::result::Result<log::_IMPL_SERIALIZE_FOR_Log::_serde::de::IgnoredAny, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _82: &mut __A;               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _83: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _86: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _88: std::result::Result<std::option::Option<cita_types::H256>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _89: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _93: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _95: std::result::Result<cita_types::U256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _96: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _100: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _102: std::result::Result<cita_types::Bloom, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _103: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _107: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _109: std::result::Result<std::vec::Vec<log::Log>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _110: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _114: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _116: std::result::Result<std::option::Option<errors::receipt::ReceiptError>, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _117: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _121: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _123: std::result::Result<cita_types::U256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _124: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _128: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _130: std::result::Result<cita_types::H256, <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _131: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _134: receipt::Receipt;      // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _135: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _136: cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _137: cita_types::Bloom;     // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _138: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _139: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _140: cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _141: cita_types::H256;      // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _142: bool;                  // in scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    let mut _143: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    let mut _144: isize;                 // in scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        let mut _4: std::option::Option<cita_types::U256>; // in scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-chain/types/src/receipt.rs:30:21: 30:32
            let mut _5: std::option::Option<cita_types::Bloom>; // in scope 2 at cita-chain/types/src/receipt.rs:30:21: 30:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
                let mut _6: std::option::Option<std::vec::Vec<log::Log>>; // in scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
                scope 4 {
                    debug __field3 => _6; // in scope 4 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    let mut _7: std::option::Option<std::option::Option<errors::receipt::ReceiptError>>; // in scope 4 at cita-chain/types/src/receipt.rs:30:21: 30:32
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        let mut _8: std::option::Option<cita_types::U256>; // in scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
                        scope 6 {
                            debug __field5 => _8; // in scope 6 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            let mut _9: std::option::Option<cita_types::H256>; // in scope 6 at cita-chain/types/src/receipt.rs:30:21: 30:32
                            scope 7 {
                                debug __field6 => _9; // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                let _85: std::option::Option<cita_types::H256>; // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                let _87: std::option::Option<cita_types::H256>; // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                let _90: std::option::Option<cita_types::H256>; // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                let _91: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                scope 8 {
                                    debug __key => _16; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _13: std::option::Option<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field>; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _14: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _16: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _25: std::option::Option<cita_types::H256>; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _26: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _34: cita_types::U256; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _35: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _43: cita_types::Bloom; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _44: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _52: std::vec::Vec<log::Log>; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _53: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _61: std::option::Option<errors::receipt::ReceiptError>; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _62: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _70: cita_types::U256; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _71: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _79: cita_types::H256; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _80: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _84: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    scope 9 {
                                        debug __val => _13; // in scope 9 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 10 {
                                        debug __err => _14; // in scope 10 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 11 {
                                        debug __val => _25; // in scope 11 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 12 {
                                        debug __err => _26; // in scope 12 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 13 {
                                        debug __val => _34; // in scope 13 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 14 {
                                        debug __err => _35; // in scope 14 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 15 {
                                        debug __val => _43; // in scope 15 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 16 {
                                        debug __err => _44; // in scope 16 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 17 {
                                        debug __val => _52; // in scope 17 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 18 {
                                        debug __err => _53; // in scope 18 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 19 {
                                        debug __val => _61; // in scope 19 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 20 {
                                        debug __err => _62; // in scope 20 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 21 {
                                        debug __val => _70; // in scope 21 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 22 {
                                        debug __err => _71; // in scope 22 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 23 {
                                        debug __val => _79; // in scope 23 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 24 {
                                        debug __err => _80; // in scope 24 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny; // in scope 26 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 27 {
                                        debug __err => _84; // in scope 27 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                }
                                scope 28 {
                                    debug __field0 => _85; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _92: cita_types::U256; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _94: cita_types::U256; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _97: cita_types::U256; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    let _98: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    scope 32 {
                                        debug __field1 => _92; // in scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        let _99: cita_types::Bloom; // in scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        let _101: cita_types::Bloom; // in scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        let _104: cita_types::Bloom; // in scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        let _105: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        scope 36 {
                                            debug __field2 => _99; // in scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            let _106: std::vec::Vec<log::Log>; // in scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            let _108: std::vec::Vec<log::Log>; // in scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            let _111: std::vec::Vec<log::Log>; // in scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            let _112: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            scope 40 {
                                                debug __field3 => _106; // in scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                let _113: std::option::Option<errors::receipt::ReceiptError>; // in scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                let _115: std::option::Option<errors::receipt::ReceiptError>; // in scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                let _118: std::option::Option<errors::receipt::ReceiptError>; // in scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                let _119: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                scope 44 {
                                                    debug __field4 => _113; // in scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    let _120: cita_types::U256; // in scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    let _122: cita_types::U256; // in scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    let _125: cita_types::U256; // in scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    let _126: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    scope 48 {
                                                        debug __field5 => _120; // in scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        let _127: cita_types::H256; // in scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        let _129: cita_types::H256; // in scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        let _132: cita_types::H256; // in scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        let _133: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error; // in scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        scope 52 {
                                                            debug __field6 => _127; // in scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        }
                                                        scope 53 {
                                                            debug __field6 => _129; // in scope 53 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        }
                                                        scope 54 {
                                                            debug __val => _132; // in scope 54 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        }
                                                        scope 55 {
                                                            debug __err => _133; // in scope 55 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug __field5 => _122; // in scope 49 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    }
                                                    scope 50 {
                                                        debug __val => _125; // in scope 50 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    }
                                                    scope 51 {
                                                        debug __err => _126; // in scope 51 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                    }
                                                }
                                                scope 45 {
                                                    debug __field4 => _115; // in scope 45 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                }
                                                scope 46 {
                                                    debug __val => _118; // in scope 46 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                }
                                                scope 47 {
                                                    debug __err => _119; // in scope 47 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                                }
                                            }
                                            scope 41 {
                                                debug __field3 => _108; // in scope 41 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            }
                                            scope 42 {
                                                debug __val => _111; // in scope 42 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            }
                                            scope 43 {
                                                debug __err => _112; // in scope 43 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                            }
                                        }
                                        scope 37 {
                                            debug __field2 => _101; // in scope 37 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        }
                                        scope 38 {
                                            debug __val => _104; // in scope 38 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        }
                                        scope 39 {
                                            debug __err => _105; // in scope 39 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                        }
                                    }
                                    scope 33 {
                                        debug __field1 => _94; // in scope 33 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 34 {
                                        debug __val => _97; // in scope 34 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                    scope 35 {
                                        debug __err => _98; // in scope 35 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                    }
                                }
                                scope 29 {
                                    debug __field0 => _87; // in scope 29 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                }
                                scope 30 {
                                    debug __val => _90; // in scope 30 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                }
                                scope 31 {
                                    debug __err => _91; // in scope 31 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _142 = const false;              // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _3 = std::option::Option::<std::option::Option<H256>>::None; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _4 = std::option::Option::<U256>::None; // scope 1 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _5 = std::option::Option::<cita_types::Bloom>::None; // scope 2 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _142 = const true;               // scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _6 = std::option::Option::<Vec<log::Log>>::None; // scope 3 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _7 = std::option::Option::<std::option::Option<errors::receipt::ReceiptError>>::None; // scope 4 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _8 = std::option::Option::<U256>::None; // scope 5 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _9 = std::option::Option::<H256>::None; // scope 6 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb1: {
        _11 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _10 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = discriminant(_10);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _14); // scope 10 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb4: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field>); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _15 = discriminant(_13);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _15) -> [1: bb7, otherwise: bb6]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb6: {
        _86 = discriminant(_3);          // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _86) -> [0: bb77, 1: bb79, otherwise: bb78]; // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb7: {
        _16 = move ((_13 as Some).0: receipt::_IMPL_DESERIALIZE_FOR_Receipt::<impl log::_IMPL_SERIALIZE_FOR_Log::_serde::Deserialize<'de> for receipt::Receipt>::deserialize::__Field); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _17 = discriminant(_16);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _17) -> [0: bb9, 1: bb18, 2: bb27, 3: bb36, 4: bb47, 5: bb56, 6: bb65, otherwise: bb8]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb8: {
        _82 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb74, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = &_3;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _18 = std::option::Option::<std::option::Option<H256>>::is_some(_19) -> [return: bb10, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::option::Option<H256>>) -> bool {std::option::Option::<std::option::Option<H256>>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "state_root") -> [return: bb12, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _20); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb13: {
        _23 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _22 = <__A as MapAccess<'_>>::next_value::<std::option::Option<H256>>(_23) -> [return: bb14, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:8
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<H256>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::option::Option<H256>>}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = discriminant(_22);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _24) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _26); // scope 12 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb16: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb17: {
        _25 = ((_22 as Ok).0: std::option::Option<cita_types::H256>); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _21 = std::option::Option::<std::option::Option<H256>>::Some(_25); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _3 = move _21;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb18: {
        _28 = &_4;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _27 = std::option::Option::<U256>::is_some(_28) -> [return: bb19, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<U256>) -> bool {std::option::Option::<U256>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _27) -> [0: bb22, otherwise: bb20]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb20: {
        _29 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "quota_used") -> [return: bb21, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _29); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb22: {
        _32 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _31 = <__A as MapAccess<'_>>::next_value::<U256>(_32) -> [return: bb23, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:8
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<U256, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<U256>}, val: Value(<ZST>) }
    }

    bb23: {
        _33 = discriminant(_31);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _33) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb24: {
        _35 = move ((_31 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _35); // scope 14 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb25: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb26: {
        _34 = ((_31 as Ok).0: cita_types::U256); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _30 = std::option::Option::<U256>::Some(_34); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _4 = move _30;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb27: {
        _37 = &_5;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _36 = std::option::Option::<cita_types::Bloom>::is_some(_37) -> [return: bb28, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<cita_types::Bloom>) -> bool {std::option::Option::<cita_types::Bloom>::is_some}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _36) -> [0: bb31, otherwise: bb29]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb29: {
        _38 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "log_bloom") -> [return: bb30, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _38); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb31: {
        _41 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _40 = <__A as MapAccess<'_>>::next_value::<cita_types::Bloom>(_41) -> [return: bb32, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:8
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<cita_types::Bloom, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb32: {
        _42 = discriminant(_40);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _42) -> [0: bb35, 1: bb33, otherwise: bb34]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb33: {
        _44 = move ((_40 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _44); // scope 16 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb34: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb35: {
        _43 = ((_40 as Ok).0: cita_types::Bloom); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _39 = std::option::Option::<cita_types::Bloom>::Some(_43); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _5 = move _39;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb36: {
        _46 = &_6;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _45 = std::option::Option::<Vec<log::Log>>::is_some(_46) -> [return: bb37, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<Vec<log::Log>>) -> bool {std::option::Option::<Vec<log::Log>>::is_some}, val: Value(<ZST>) }
    }

    bb37: {
        switchInt(move _45) -> [0: bb40, otherwise: bb38]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb38: {
        _47 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "logs") -> [return: bb39, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _47); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb40: {
        _50 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _49 = <__A as MapAccess<'_>>::next_value::<Vec<log::Log>>(_50) -> [return: bb41, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:8
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<Vec<log::Log>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<Vec<log::Log>>}, val: Value(<ZST>) }
    }

    bb41: {
        _51 = discriminant(_49);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _51) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb42: {
        _53 = move ((_49 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _53); // scope 18 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb43: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb44: {
        _52 = move ((_49 as Ok).0: std::vec::Vec<log::Log>); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _48 = std::option::Option::<Vec<log::Log>>::Some(move _52); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        drop(_6) -> [return: bb45, unwind: bb46]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb45: {
        _142 = const true;               // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _6 = move _48;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb46 (cleanup): {
        _142 = const true;               // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _6 = move _48;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb144;                   // scope 8 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb47: {
        _55 = &_7;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _54 = std::option::Option::<std::option::Option<errors::receipt::ReceiptError>>::is_some(_55) -> [return: bb48, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::option::Option<errors::receipt::ReceiptError>>) -> bool {std::option::Option::<std::option::Option<errors::receipt::ReceiptError>>::is_some}, val: Value(<ZST>) }
    }

    bb48: {
        switchInt(move _54) -> [0: bb51, otherwise: bb49]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb49: {
        _56 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "error") -> [return: bb50, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _56); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb51: {
        _59 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _58 = <__A as MapAccess<'_>>::next_value::<std::option::Option<errors::receipt::ReceiptError>>(_59) -> [return: bb52, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:8
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<errors::receipt::ReceiptError>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
    }

    bb52: {
        _60 = discriminant(_58);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _60) -> [0: bb55, 1: bb53, otherwise: bb54]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb53: {
        _62 = move ((_58 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _62); // scope 20 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb54: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb55: {
        _61 = ((_58 as Ok).0: std::option::Option<errors::receipt::ReceiptError>); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _57 = std::option::Option::<std::option::Option<errors::receipt::ReceiptError>>::Some(_61); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _7 = move _57;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb56: {
        _64 = &_8;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _63 = std::option::Option::<U256>::is_some(_64) -> [return: bb57, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<U256>) -> bool {std::option::Option::<U256>::is_some}, val: Value(<ZST>) }
    }

    bb57: {
        switchInt(move _63) -> [0: bb60, otherwise: bb58]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb58: {
        _65 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "account_nonce") -> [return: bb59, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb59: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _65); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb60: {
        _68 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _67 = <__A as MapAccess<'_>>::next_value::<U256>(_68) -> [return: bb61, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:8
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<U256, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<U256>}, val: Value(<ZST>) }
    }

    bb61: {
        _69 = discriminant(_67);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _69) -> [0: bb64, 1: bb62, otherwise: bb63]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb62: {
        _71 = move ((_67 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _71); // scope 22 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb63: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb64: {
        _70 = ((_67 as Ok).0: cita_types::U256); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _66 = std::option::Option::<U256>::Some(_70); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _8 = move _66;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb65: {
        _73 = &_9;                       // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _72 = std::option::Option::<H256>::is_some(_73) -> [return: bb66, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H256>) -> bool {std::option::Option::<H256>::is_some}, val: Value(<ZST>) }
    }

    bb66: {
        switchInt(move _72) -> [0: bb69, otherwise: bb67]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb67: {
        _74 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field(const "transaction_hash") -> [return: bb68, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + user_ty: UserType(34)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Log::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb68: {
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _74); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb69: {
        _77 = &mut _2;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _76 = <__A as MapAccess<'_>>::next_value::<H256>(_77) -> [return: bb70, unwind: bb144]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:8
                                         // + user_ty: UserType(35)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<H256, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<H256>}, val: Value(<ZST>) }
    }

    bb70: {
        _78 = discriminant(_76);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _78) -> [0: bb73, 1: bb71, otherwise: bb72]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb71: {
        _80 = move ((_76 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _80); // scope 24 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb72: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb73: {
        _79 = ((_76 as Ok).0: cita_types::H256); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _75 = std::option::Option::<H256>::Some(_79); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _9 = move _75;                   // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb1;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb74: {
        _83 = discriminant(_81);         // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _83) -> [0: bb1, 1: bb75, otherwise: bb76]; // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb75: {
        _84 = move ((_81 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _84); // scope 27 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 8 at no-location
    }

    bb76: {
        unreachable;                     // scope 8 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb77: {
        _88 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, std::option::Option<H256>, <__A as MapAccess<'_>>::Error>(const "state_root") -> [return: bb80, unwind: bb144]; // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::option::Option<H256>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, std::option::Option<H256>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        unreachable;                     // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb79: {
        _87 = ((_3 as Some).0: std::option::Option<cita_types::H256>); // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _85 = _87;                       // scope 29 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb84;                    // scope 7 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb80: {
        _89 = discriminant(_88);         // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _89) -> [0: bb83, 1: bb81, otherwise: bb82]; // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb81: {
        _91 = move ((_88 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _91); // scope 31 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 7 at no-location
    }

    bb82: {
        unreachable;                     // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb83: {
        _90 = ((_88 as Ok).0: std::option::Option<cita_types::H256>); // scope 7 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _85 = _90;                       // scope 30 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb84;                    // scope 7 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb84: {
        _93 = discriminant(_4);          // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _93) -> [0: bb85, 1: bb87, otherwise: bb86]; // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb85: {
        _95 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, U256, <__A as MapAccess<'_>>::Error>(const "quota_used") -> [return: bb88, unwind: bb144]; // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<U256, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, U256, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb86: {
        unreachable;                     // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb87: {
        _94 = ((_4 as Some).0: cita_types::U256); // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _92 = _94;                       // scope 33 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb92;                    // scope 28 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb88: {
        _96 = discriminant(_95);         // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _96) -> [0: bb91, 1: bb89, otherwise: bb90]; // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb89: {
        _98 = move ((_95 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _98); // scope 35 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 28 at no-location
    }

    bb90: {
        unreachable;                     // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb91: {
        _97 = ((_95 as Ok).0: cita_types::U256); // scope 28 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _92 = _97;                       // scope 34 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb92;                    // scope 28 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb92: {
        _100 = discriminant(_5);         // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _100) -> [0: bb93, 1: bb95, otherwise: bb94]; // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb93: {
        _102 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, cita_types::Bloom, <__A as MapAccess<'_>>::Error>(const "log_bloom") -> [return: bb96, unwind: bb144]; // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<cita_types::Bloom, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, cita_types::Bloom, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb94: {
        unreachable;                     // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb95: {
        _101 = ((_5 as Some).0: cita_types::Bloom); // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _99 = _101;                      // scope 37 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb100;                   // scope 32 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb96: {
        _103 = discriminant(_102);       // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _103) -> [0: bb99, 1: bb97, otherwise: bb98]; // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb97: {
        _105 = move ((_102 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _105); // scope 39 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 32 at no-location
    }

    bb98: {
        unreachable;                     // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb99: {
        _104 = ((_102 as Ok).0: cita_types::Bloom); // scope 32 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _99 = _104;                      // scope 38 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb100;                   // scope 32 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb100: {
        _107 = discriminant(_6);         // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _107) -> [0: bb101, 1: bb103, otherwise: bb102]; // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb101: {
        _109 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<log::Log>, <__A as MapAccess<'_>>::Error>(const "logs") -> [return: bb104, unwind: bb144]; // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<Vec<log::Log>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, Vec<log::Log>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb102: {
        unreachable;                     // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb103: {
        _142 = const false;              // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _108 = move ((_6 as Some).0: std::vec::Vec<log::Log>); // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _106 = move _108;                // scope 41 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb108;                   // scope 36 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb104: {
        _110 = discriminant(_109);       // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _110) -> [0: bb107, 1: bb105, otherwise: bb106]; // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb105: {
        _112 = move ((_109 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _112); // scope 43 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb134;                   // scope 36 at no-location
    }

    bb106: {
        unreachable;                     // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb107: {
        _111 = move ((_109 as Ok).0: std::vec::Vec<log::Log>); // scope 36 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _106 = move _111;                // scope 42 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb108;                   // scope 36 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb108: {
        _114 = discriminant(_7);         // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _114) -> [0: bb109, 1: bb111, otherwise: bb110]; // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb109: {
        _116 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, std::option::Option<errors::receipt::ReceiptError>, <__A as MapAccess<'_>>::Error>(const "error") -> [return: bb112, unwind: bb136]; // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::option::Option<errors::receipt::ReceiptError>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, std::option::Option<errors::receipt::ReceiptError>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb110: {
        unreachable;                     // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb111: {
        _115 = ((_7 as Some).0: std::option::Option<errors::receipt::ReceiptError>); // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _113 = _115;                     // scope 45 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb116;                   // scope 40 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb112: {
        _117 = discriminant(_116);       // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _117) -> [0: bb115, 1: bb113, otherwise: bb114]; // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb113: {
        _119 = move ((_116 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _119); // scope 47 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb133;                   // scope 40 at no-location
    }

    bb114: {
        unreachable;                     // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb115: {
        _118 = ((_116 as Ok).0: std::option::Option<errors::receipt::ReceiptError>); // scope 40 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _113 = _118;                     // scope 46 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb116;                   // scope 40 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb116: {
        _121 = discriminant(_8);         // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _121) -> [0: bb117, 1: bb119, otherwise: bb118]; // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb117: {
        _123 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, U256, <__A as MapAccess<'_>>::Error>(const "account_nonce") -> [return: bb120, unwind: bb136]; // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<U256, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, U256, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb118: {
        unreachable;                     // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb119: {
        _122 = ((_8 as Some).0: cita_types::U256); // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _120 = _122;                     // scope 49 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb124;                   // scope 44 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb120: {
        _124 = discriminant(_123);       // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _124) -> [0: bb123, 1: bb121, otherwise: bb122]; // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb121: {
        _126 = move ((_123 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _126); // scope 51 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb133;                   // scope 44 at no-location
    }

    bb122: {
        unreachable;                     // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb123: {
        _125 = ((_123 as Ok).0: cita_types::U256); // scope 44 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _120 = _125;                     // scope 50 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb124;                   // scope 44 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb124: {
        _128 = discriminant(_9);         // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _128) -> [0: bb125, 1: bb127, otherwise: bb126]; // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb125: {
        _130 = _IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, H256, <__A as MapAccess<'_>>::Error>(const "transaction_hash") -> [return: bb128, unwind: bb136]; // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<H256, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Log::_serde::private::de::missing_field::<'_, H256, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb126: {
        unreachable;                     // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb127: {
        _129 = ((_9 as Some).0: cita_types::H256); // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _127 = _129;                     // scope 53 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb132;                   // scope 48 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb128: {
        _131 = discriminant(_130);       // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
        switchInt(move _131) -> [0: bb131, 1: bb129, otherwise: bb130]; // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb129: {
        _133 = move ((_130 as Err).0: <__A as log::_IMPL_SERIALIZE_FOR_Log::_serde::de::MapAccess<'_>>::Error); // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Err(move _133); // scope 55 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb133;                   // scope 48 at no-location
    }

    bb130: {
        unreachable;                     // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb131: {
        _132 = ((_130 as Ok).0: cita_types::H256); // scope 48 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _127 = _132;                     // scope 54 at cita-chain/types/src/receipt.rs:30:21: 30:32
        goto -> bb132;                   // scope 48 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb132: {
        _135 = _85;                      // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _136 = _92;                      // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _137 = _99;                      // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _138 = move _106;                // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _139 = _113;                     // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _140 = _120;                     // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _141 = _127;                     // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _134 = receipt::Receipt { state_root: move _135, quota_used: move _136, log_bloom: move _137, logs: move _138, error: move _139, account_nonce: move _140, transaction_hash: move _141 }; // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = Result::<receipt::Receipt, <__A as MapAccess<'_>>::Error>::Ok(move _134); // scope 52 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _142 = const false;              // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
        drop(_2) -> bb135;               // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb133: {
        drop(_106) -> [return: bb134, unwind: bb144]; // scope 36 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb134: {
        _143 = discriminant(_6);         // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
        switchInt(move _143) -> [1: bb140, otherwise: bb139]; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb135: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:32: 30:32
    }

    bb136 (cleanup): {
        drop(_106) -> bb144;             // scope 36 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb137 (cleanup): {
        drop(_2) -> bb138;               // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb138 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }

    bb139: {
        _142 = const false;              // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
        drop(_2) -> bb135;               // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb140: {
        switchInt(_142) -> [0: bb139, otherwise: bb141]; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb141: {
        drop(((_6 as Some).0: std::vec::Vec<log::Log>)) -> [return: bb139, unwind: bb137]; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb142 (cleanup): {
        switchInt(_142) -> [0: bb137, otherwise: bb143]; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb143 (cleanup): {
        drop(((_6 as Some).0: std::vec::Vec<log::Log>)) -> bb137; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }

    bb144 (cleanup): {
        _144 = discriminant(_6);         // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
        switchInt(move _144) -> [1: bb142, otherwise: bb137]; // scope 3 at cita-chain/types/src/receipt.rs:30:31: 30:32
    }
}

const _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: &[&str; 7];              // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _2: &[&str; 7];                  // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let _3: [&str; 7];                   // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _4: &[&str; 7];              // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        StorageLive(_2);                 // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _4 = const _;                    // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &[&str; 7], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Receipt::<impl Deserialize<'de> for receipt::Receipt>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _1 = &(*_2);                     // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        StorageDead(_2);                 // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
        StorageDead(_1);                 // scope 0 at cita-chain/types/src/receipt.rs:30:31: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Receipt::<impl at cita-chain/types/src/receipt.rs:30:21: 30:32>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];              // return place in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    let mut _1: [&str; 7];               // in scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32

    bb0: {
        _1 = [const "state_root", const "quota_used", const "log_bloom", const "logs", const "error", const "account_nonce", const "transaction_hash"]; // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:21: 30:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:21: 30:32
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:30:34: 30:41>::default() -> receipt::Receipt {
    let mut _0: receipt::Receipt;        // return place in scope 0 at cita-chain/types/src/receipt.rs:30:34: 30:41
    let mut _1: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _3: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _4: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _5: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _6: cita_types::U256;        // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _7: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31

    bb0: {
        _1 = <std::option::Option<H256> as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // + literal: Const { ty: fn() -> std::option::Option<H256> {<std::option::Option<H256> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <U256 as Default>::default() -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <cita_types::Bloom as Default>::default() -> bb3; // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // + literal: Const { ty: fn() -> cita_types::Bloom {<cita_types::Bloom as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <Vec<log::Log> as Default>::default() -> bb4; // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // + literal: Const { ty: fn() -> Vec<log::Log> {<Vec<log::Log> as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <std::option::Option<errors::receipt::ReceiptError> as Default>::default() -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // + literal: Const { ty: fn() -> std::option::Option<errors::receipt::ReceiptError> {<std::option::Option<errors::receipt::ReceiptError> as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <U256 as Default>::default() -> [return: bb6, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <H256 as Default>::default() -> [return: bb7, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = receipt::Receipt { state_root: move _1, quota_used: move _2, log_bloom: move _3, logs: move _4, error: move _5, account_nonce: move _6, transaction_hash: move _7 }; // scope 0 at cita-chain/types/src/receipt.rs:30:34: 30:41
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:41: 30:41
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 0 at cita-chain/types/src/receipt.rs:30:40: 30:41
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:30:34: 30:41
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:30:43: 30:48>::fmt(_1: &receipt::Receipt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    debug f => _2;                       // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let _4: &[&dyn std::fmt::Debug; 7];  // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let _5: [&dyn std::fmt::Debug; 7];   // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let _7: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let _11: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let _13: &std::vec::Vec<log::Log>;   // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let _15: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let _19: &&cita_types::H256;         // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let _20: &cita_types::H256;          // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let _21: &str;                       // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _22: &[&str];                // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _23: &[&str; 7];             // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    scope 1 {
        debug names => _23;              // in scope 1 at cita-chain/types/src/receipt.rs:30:43: 30:48
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/receipt.rs:30:43: 30:48
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/receipt.rs:30:43: 30:48
        }
    }

    bb0: {
        _23 = const _;                   // scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // + literal: Const { ty: &[&str; 7], val: Unevaluated(<receipt::Receipt as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: std::option::Option<cita_types::H256>); // scope 1 at cita-chain/types/src/receipt.rs:32:5: 32:33
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:32:5: 32:33
        _9 = &((*_1).1: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _11 = &((*_1).2: cita_types::Bloom); // scope 1 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _13 = &((*_1).3: std::vec::Vec<log::Log>); // scope 1 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _15 = &((*_1).4: std::option::Option<errors::receipt::ReceiptError>); // scope 1 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _17 = &((*_1).5: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _20 = &((*_1).6: cita_types::H256); // scope 1 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _19 = &_20;                      // scope 1 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18]; // scope 1 at cita-chain/types/src/receipt.rs:30:43: 30:48
        _4 = &_5;                        // scope 1 at cita-chain/types/src/receipt.rs:30:43: 30:48
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:30:43: 30:48
        _21 = const "Receipt";           // scope 2 at cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/receipt.rs:30:43: 30:48
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _21, move _22, _3) -> bb1; // scope 2 at cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:48: 30:48
    }
}

promoted[0] in receipt::<impl at cita-chain/types/src/receipt.rs:30:43: 30:48>::fmt: &[&str; 7] = {
    let mut _0: &[&str; 7];              // return place in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _1: [&str; 7];               // in scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31

    bb0: {
        _3 = const "quota_used";         // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _5 = const "log_bloom";          // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _7 = const "logs";               // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _9 = const "error";              // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _11 = const "account_nonce";     // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _13 = const "transaction_hash";  // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _1 = [const "state_root", move _2, move _4, move _6, move _8, move _10, move _12]; // scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:43: 30:48
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:30:50: 30:55>::clone(_1: &receipt::Receipt) -> receipt::Receipt {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:50: 30:55
    let mut _0: receipt::Receipt;        // return place in scope 0 at cita-chain/types/src/receipt.rs:30:50: 30:55
    let mut _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let _3: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _4: cita_types::U256;        // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let _5: &cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _6: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let _7: &cita_types::Bloom;          // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _8: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let _9: &std::vec::Vec<log::Log>;    // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _10: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let _11: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let _13: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _14: cita_types::H256;       // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let _15: &cita_types::H256;          // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31

    bb0: {
        _3 = &((*_1).0: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
        _2 = <std::option::Option<H256> as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H256>) -> std::option::Option<H256> {<std::option::Option<H256> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _4 = <U256 as Clone>::clone(_5) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _6 = <cita_types::Bloom as Clone>::clone(_7) -> bb3; // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> cita_types::Bloom {<cita_types::Bloom as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _8 = <Vec<log::Log> as Clone>::clone(_9) -> bb4; // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<log::Log>) -> Vec<log::Log> {<Vec<log::Log> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).4: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _10 = <std::option::Option<errors::receipt::ReceiptError> as Clone>::clone(_11) -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<errors::receipt::ReceiptError>) -> std::option::Option<errors::receipt::ReceiptError> {<std::option::Option<errors::receipt::ReceiptError> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).5: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _12 = <U256 as Clone>::clone(_13) -> [return: bb6, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).6: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _14 = <H256 as Clone>::clone(_15) -> [return: bb7, unwind: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = receipt::Receipt { state_root: move _2, quota_used: move _4, log_bloom: move _6, logs: move _8, error: move _10, account_nonce: move _12, transaction_hash: move _14 }; // scope 0 at cita-chain/types/src/receipt.rs:30:50: 30:55
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:55: 30:55
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at cita-chain/types/src/receipt.rs:30:54: 30:55
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:30:50: 30:55
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:30:57: 30:66>::eq(_1: &receipt::Receipt, _2: &receipt::Receipt) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:57: 30:66
    debug other => _2;                   // in scope 0 at cita-chain/types/src/receipt.rs:30:57: 30:66
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/receipt.rs:30:57: 30:66
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _9: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _10: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _12: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _13: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _15: &cita_types::Bloom;     // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _16: &cita_types::Bloom;     // in scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    let mut _17: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _18: &std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _19: &std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _21: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _22: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    let mut _23: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _24: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _25: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    let mut _26: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let mut _27: &cita_types::H256;      // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    let mut _28: &cita_types::H256;      // in scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31

    bb0: {
        _9 = &((*_1).0: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
        _10 = &((*_2).0: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
        _8 = <std::option::Option<H256> as PartialEq>::eq(move _9, move _10) -> bb19; // scope 0 at cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:32:5: 32:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::option::Option<H256>, &'b std::option::Option<H256>) -> bool {<std::option::Option<H256> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        goto -> bb3;                     // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    }

    bb2: {
        _27 = &((*_1).6: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _28 = &((*_2).6: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        _26 = <H256 as PartialEq>::eq(move _27, move _28) -> bb25; // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:38:5: 38:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:66: 30:66
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    }

    bb5: {
        _24 = &((*_1).5: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _25 = &((*_2).5: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        _23 = <U256 as PartialEq>::eq(move _24, move _25) -> bb24; // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:37:5: 37:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        goto -> bb9;                     // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    }

    bb8: {
        _21 = &((*_1).4: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _22 = &((*_2).4: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        _20 = <std::option::Option<errors::receipt::ReceiptError> as PartialEq>::eq(move _21, move _22) -> bb23; // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:36:5: 36:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::option::Option<errors::receipt::ReceiptError>, &'b std::option::Option<errors::receipt::ReceiptError>) -> bool {<std::option::Option<errors::receipt::ReceiptError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        goto -> bb12;                    // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    }

    bb11: {
        _18 = &((*_1).3: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _19 = &((*_2).3: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        _17 = <Vec<log::Log> as PartialEq>::eq(move _18, move _19) -> bb22; // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:35:5: 35:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<log::Log>, &'b Vec<log::Log>) -> bool {<Vec<log::Log> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        goto -> bb15;                    // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    }

    bb14: {
        _15 = &((*_1).2: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _16 = &((*_2).2: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        _14 = <cita_types::Bloom as PartialEq>::eq(move _15, move _16) -> bb21; // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:34:5: 34:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cita_types::Bloom, &'b cita_types::Bloom) -> bool {<cita_types::Bloom as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    }

    bb16: {
        _7 = const false;                // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        goto -> bb18;                    // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    }

    bb17: {
        _12 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _13 = &((*_2).1: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        _11 = <U256 as PartialEq>::eq(move _12, move _13) -> bb20; // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:33:5: 33:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    }

    bb19: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    }

    bb20: {
        _7 = move _11;                   // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
        goto -> bb18;                    // scope 0 at cita-chain/types/src/receipt.rs:33:5: 33:25
    }

    bb21: {
        _6 = move _14;                   // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
        goto -> bb15;                    // scope 0 at cita-chain/types/src/receipt.rs:34:5: 34:28
    }

    bb22: {
        _5 = move _17;                   // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
        goto -> bb12;                    // scope 0 at cita-chain/types/src/receipt.rs:35:5: 35:23
    }

    bb23: {
        _4 = move _20;                   // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
        goto -> bb9;                     // scope 0 at cita-chain/types/src/receipt.rs:36:5: 36:36
    }

    bb24: {
        _3 = move _23;                   // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/receipt.rs:37:5: 37:28
    }

    bb25: {
        _0 = move _26;                   // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
        goto -> bb3;                     // scope 0 at cita-chain/types/src/receipt.rs:38:5: 38:31
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:30:68: 30:70>::assert_receiver_is_total_eq(_1: &receipt::Receipt) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:30:68: 30:70
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/receipt.rs:30:68: 30:70
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:30:70: 30:70
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:41:1: 41:13>::new(_1: std::option::Option<H256>, _2: U256, _3: Vec<log::Log>, _4: std::option::Option<errors::receipt::ReceiptError>, _5: U256, _6: H256) -> receipt::Receipt {
    debug state_root => _1;              // in scope 0 at cita-chain/types/src/receipt.rs:43:9: 43:19
    debug quota_used => _2;              // in scope 0 at cita-chain/types/src/receipt.rs:44:9: 44:19
    debug logs => _3;                    // in scope 0 at cita-chain/types/src/receipt.rs:45:9: 45:13
    debug error => _4;                   // in scope 0 at cita-chain/types/src/receipt.rs:46:9: 46:14
    debug account_nonce => _5;           // in scope 0 at cita-chain/types/src/receipt.rs:47:9: 47:22
    debug transaction_hash => _6;        // in scope 0 at cita-chain/types/src/receipt.rs:48:9: 48:25
    let mut _0: receipt::Receipt;        // return place in scope 0 at cita-chain/types/src/receipt.rs:49:10: 49:17
    let mut _7: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:83
    let mut _8: std::slice::Iter<'_, log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
    let mut _9: &[log::Log];             // in scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
    let _10: &[log::Log];                // in scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
    let mut _11: &std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
    let mut _12: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/receipt.rs:53:41: 53:60
    let mut _13: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:54:13: 54:17

    bb0: {
        _11 = &_3;                       // scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
        _10 = <Vec<log::Log> as Deref>::deref(move _11) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:24: 53:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<log::Log>) -> &'a <Vec<log::Log> as Deref>::Target {<Vec<log::Log> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
        _8 = core::slice::<impl [log::Log]>::iter(move _9) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:29: 53:33
                                         // + literal: Const { ty: for<'a> fn(&'a [log::Log]) -> std::slice::Iter<'a, log::Log> {core::slice::<impl [log::Log]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = <cita_types::Bloom as Default>::default() -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/types/src/receipt.rs:53:41: 53:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:41: 53:58
                                         // + literal: Const { ty: fn() -> cita_types::Bloom {<cita_types::Bloom as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = <std::slice::Iter<'_, log::Log> as Iterator>::fold::<cita_types::Bloom, [closure@cita-chain/types/src/receipt.rs:53:62: 53:68]>(move _8, move _12, const ZeroSized: [closure@cita-chain/types/src/receipt.rs:53:62: 53:68]) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/receipt.rs:53:24: 53:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:36: 53:40
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, log::Log>, cita_types::Bloom, [closure@cita-chain/types/src/receipt.rs:53:62: 53:68]) -> cita_types::Bloom {<std::slice::Iter<'_, log::Log> as Iterator>::fold::<cita_types::Bloom, [closure@cita-chain/types/src/receipt.rs:53:62: 53:68]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/receipt.rs:53:62: 53:68], val: Value(<ZST>) }
    }

    bb4: {
        _13 = move _3;                   // scope 0 at cita-chain/types/src/receipt.rs:54:13: 54:17
        _0 = receipt::Receipt { state_root: _1, quota_used: _2, log_bloom: move _7, logs: move _13, error: _4, account_nonce: _5, transaction_hash: _6 }; // scope 0 at cita-chain/types/src/receipt.rs:50:9: 58:10
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:59:6: 59:6
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at cita-chain/types/src/receipt.rs:59:5: 59:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:42:5: 59:6
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:41:1: 41:13>::new::{closure#0}(_1: &mut [closure@cita-chain/types/src/receipt.rs:53:62: 53:68], _2: cita_types::Bloom, _3: &log::Log) -> cita_types::Bloom {
    debug b => _2;                       // in scope 0 at cita-chain/types/src/receipt.rs:53:63: 53:64
    debug l => _3;                       // in scope 0 at cita-chain/types/src/receipt.rs:53:66: 53:67
    let mut _0: cita_types::Bloom;       // return place in scope 0 at cita-chain/types/src/receipt.rs:53:69: 53:69
    let mut _4: cita_types::Bloom;       // in scope 0 at cita-chain/types/src/receipt.rs:53:73: 53:82

    bb0: {
        _4 = log::Log::bloom(_3) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:53:73: 53:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:75: 53:80
                                         // + literal: Const { ty: for<'a> fn(&'a log::Log) -> cita_types::Bloom {log::Log::bloom}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <cita_types::Bloom as BitOr>::bitor(_2, move _4) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:53:69: 53:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:53:69: 53:82
                                         // + literal: Const { ty: fn(cita_types::Bloom, cita_types::Bloom) -> <cita_types::Bloom as BitOr>::Output {<cita_types::Bloom as BitOr>::bitor}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:53:82: 53:82
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:41:1: 41:13>::protobuf(_1: &receipt::Receipt) -> libproto::Receipt {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:61:21: 61:26
    let mut _0: libproto::Receipt;       // return place in scope 0 at cita-chain/types/src/receipt.rs:61:31: 61:43
    let mut _2: libproto::Receipt;       // in scope 0 at cita-chain/types/src/receipt.rs:62:13: 62:30
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:66:16: 66:32
    let _7: ();                          // in scope 0 at cita-chain/types/src/receipt.rs:67:13: 67:66
    let mut _8: &mut libproto::StateRoot; // in scope 0 at cita-chain/types/src/receipt.rs:67:13: 67:66
    let mut _9: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/receipt.rs:67:46: 67:65
    let mut _10: &[u8];                  // in scope 0 at cita-chain/types/src/receipt.rs:67:46: 67:65
    let _11: &[u8];                      // in scope 0 at cita-chain/types/src/receipt.rs:67:46: 67:65
    let mut _12: &cita_types::H256;      // in scope 0 at cita-chain/types/src/receipt.rs:67:46: 67:65
    let _13: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:68:13: 68:60
    let mut _14: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:68:13: 68:60
    let mut _15: libproto::StateRoot;    // in scope 0 at cita-chain/types/src/receipt.rs:68:42: 68:59
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:71:16: 71:27
    let _18: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:72:13: 72:66
    let mut _19: &mut libproto::ReceiptErrorWithOption; // in scope 0 at cita-chain/types/src/receipt.rs:72:13: 72:66
    let mut _20: libproto::ReceiptError; // in scope 0 at cita-chain/types/src/receipt.rs:72:49: 72:65
    let _21: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:73:13: 73:63
    let mut _22: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:73:13: 73:63
    let mut _23: libproto::ReceiptErrorWithOption; // in scope 0 at cita-chain/types/src/receipt.rs:73:37: 73:62
    let _24: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:76:9: 76:66
    let mut _25: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:76:9: 76:66
    let mut _26: std::string::String;    // in scope 0 at cita-chain/types/src/receipt.rs:76:38: 76:65
    let mut _27: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:76:38: 76:65
    let _28: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:77:9: 77:61
    let mut _29: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:77:9: 77:61
    let mut _30: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/receipt.rs:77:37: 77:60
    let mut _31: &[u8];                  // in scope 0 at cita-chain/types/src/receipt.rs:77:37: 77:60
    let _32: &[u8];                      // in scope 0 at cita-chain/types/src/receipt.rs:77:37: 77:60
    let mut _33: &cita_types::Bloom;     // in scope 0 at cita-chain/types/src/receipt.rs:77:37: 77:60
    let mut _34: protobuf::repeated::RepeatedField<libproto::LogEntry>; // in scope 0 at cita-chain/types/src/receipt.rs:78:30: 83:23
    let mut _35: std::iter::Map<std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]>; // in scope 0 at cita-chain/types/src/receipt.rs:78:30: 82:51
    let mut _36: std::vec::IntoIter<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:78:30: 81:25
    let mut _37: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:78:30: 80:21
    let mut _38: &std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:78:30: 80:21
    let _39: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:84:9: 84:69
    let mut _40: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:84:9: 84:69
    let mut _41: u64;                    // in scope 0 at cita-chain/types/src/receipt.rs:84:41: 84:68
    let mut _42: &cita_types::U256;      // in scope 0 at cita-chain/types/src/receipt.rs:84:41: 84:68
    let _43: ();                         // in scope 0 at cita-chain/types/src/receipt.rs:85:9: 85:75
    let mut _44: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:85:9: 85:75
    let mut _45: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/receipt.rs:85:44: 85:74
    let mut _46: &[u8];                  // in scope 0 at cita-chain/types/src/receipt.rs:85:44: 85:74
    let _47: &[u8];                      // in scope 0 at cita-chain/types/src/receipt.rs:85:44: 85:74
    let mut _48: &cita_types::H256;      // in scope 0 at cita-chain/types/src/receipt.rs:85:44: 85:74
    let mut _49: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    let mut _50: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    let mut _51: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    let mut _52: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    scope 1 {
        debug receipt_proto => _2;       // in scope 1 at cita-chain/types/src/receipt.rs:62:13: 62:30
        let mut _3: libproto::StateRoot; // in scope 1 at cita-chain/types/src/receipt.rs:63:13: 63:34
        scope 2 {
            debug state_root_option => _3; // in scope 2 at cita-chain/types/src/receipt.rs:63:13: 63:34
            let mut _4: libproto::ReceiptErrorWithOption; // in scope 2 at cita-chain/types/src/receipt.rs:64:13: 64:42
            scope 3 {
                debug receipt_error_with_option => _4; // in scope 3 at cita-chain/types/src/receipt.rs:64:13: 64:42
                scope 4 {
                    debug state_root => _6; // in scope 4 at cita-chain/types/src/receipt.rs:66:21: 66:31
                    let _6: cita_types::H256; // in scope 4 at cita-chain/types/src/receipt.rs:66:21: 66:31
                }
                scope 5 {
                    debug error => _17;  // in scope 5 at cita-chain/types/src/receipt.rs:71:21: 71:26
                    let _17: errors::receipt::ReceiptError; // in scope 5 at cita-chain/types/src/receipt.rs:71:21: 71:26
                }
            }
        }
    }

    bb0: {
        _52 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:62:13: 62:30
        _51 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:62:13: 62:30
        _49 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:62:13: 62:30
        _50 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:62:13: 62:30
        _51 = const true;                // scope 0 at cita-chain/types/src/receipt.rs:62:33: 62:52
        _52 = const true;                // scope 0 at cita-chain/types/src/receipt.rs:62:33: 62:52
        _2 = libproto::Receipt::new() -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:62:33: 62:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:62:33: 62:50
                                         // + literal: Const { ty: fn() -> libproto::Receipt {libproto::Receipt::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = StateRoot::new() -> [return: bb2, unwind: bb51]; // scope 1 at cita-chain/types/src/receipt.rs:63:37: 63:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:63:37: 63:51
                                         // + literal: Const { ty: fn() -> StateRoot {StateRoot::new}, val: Value(<ZST>) }
    }

    bb2: {
        _50 = const true;                // scope 2 at cita-chain/types/src/receipt.rs:64:13: 64:42
        _4 = ReceiptErrorWithOption::new() -> [return: bb3, unwind: bb37]; // scope 2 at cita-chain/types/src/receipt.rs:64:45: 64:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:64:45: 64:72
                                         // + literal: Const { ty: fn() -> ReceiptErrorWithOption {ReceiptErrorWithOption::new}, val: Value(<ZST>) }
    }

    bb3: {
        _49 = const true;                // scope 3 at cita-chain/types/src/receipt.rs:66:9: 69:10
        _5 = discriminant(((*_1).0: std::option::Option<cita_types::H256>)); // scope 4 at cita-chain/types/src/receipt.rs:66:16: 66:32
        switchInt(move _5) -> [1: bb4, otherwise: bb8]; // scope 4 at cita-chain/types/src/receipt.rs:66:16: 66:32
    }

    bb4: {
        _6 = ((((*_1).0: std::option::Option<cita_types::H256>) as Some).0: cita_types::H256); // scope 4 at cita-chain/types/src/receipt.rs:66:21: 66:31
        _8 = &mut _3;                    // scope 4 at cita-chain/types/src/receipt.rs:67:13: 67:66
        _12 = &_6;                       // scope 4 at cita-chain/types/src/receipt.rs:67:46: 67:65
        _11 = <H256 as Deref>::deref(move _12) -> [return: bb5, unwind: bb35]; // scope 4 at cita-chain/types/src/receipt.rs:67:46: 67:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:67:46: 67:65
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _11;                       // scope 4 at cita-chain/types/src/receipt.rs:67:46: 67:65
        _9 = slice::<impl [u8]>::to_vec(move _10) -> [return: bb6, unwind: bb35]; // scope 4 at cita-chain/types/src/receipt.rs:67:46: 67:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:67:57: 67:63
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = StateRoot::set_state_root(move _8, move _9) -> [return: bb7, unwind: bb35]; // scope 4 at cita-chain/types/src/receipt.rs:67:13: 67:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:67:31: 67:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut StateRoot, Vec<u8>) {StateRoot::set_state_root}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &mut _2;                   // scope 4 at cita-chain/types/src/receipt.rs:68:13: 68:60
        _50 = const false;               // scope 4 at cita-chain/types/src/receipt.rs:68:42: 68:59
        _15 = move _3;                   // scope 4 at cita-chain/types/src/receipt.rs:68:42: 68:59
        _13 = libproto::Receipt::set_state_root(move _14, move _15) -> [return: bb52, unwind: bb35]; // scope 4 at cita-chain/types/src/receipt.rs:68:13: 68:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:68:27: 68:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, StateRoot) {libproto::Receipt::set_state_root}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = discriminant(((*_1).4: std::option::Option<errors::receipt::ReceiptError>)); // scope 5 at cita-chain/types/src/receipt.rs:71:16: 71:27
        switchInt(move _16) -> [1: bb9, otherwise: bb12]; // scope 5 at cita-chain/types/src/receipt.rs:71:16: 71:27
    }

    bb9: {
        _17 = ((((*_1).4: std::option::Option<errors::receipt::ReceiptError>) as Some).0: errors::receipt::ReceiptError); // scope 5 at cita-chain/types/src/receipt.rs:71:21: 71:26
        _19 = &mut _4;                   // scope 5 at cita-chain/types/src/receipt.rs:72:13: 72:66
        _20 = errors::receipt::ReceiptError::protobuf(_17) -> [return: bb10, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:72:49: 72:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:72:55: 72:63
                                         // + literal: Const { ty: fn(errors::receipt::ReceiptError) -> libproto::ReceiptError {errors::receipt::ReceiptError::protobuf}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = ReceiptErrorWithOption::set_error(move _19, move _20) -> [return: bb11, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:72:13: 72:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:72:39: 72:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut ReceiptErrorWithOption, libproto::ReceiptError) {ReceiptErrorWithOption::set_error}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = &mut _2;                   // scope 5 at cita-chain/types/src/receipt.rs:73:13: 73:63
        _49 = const false;               // scope 5 at cita-chain/types/src/receipt.rs:73:37: 73:62
        _23 = move _4;                   // scope 5 at cita-chain/types/src/receipt.rs:73:37: 73:62
        _21 = libproto::Receipt::set_error(move _22, move _23) -> [return: bb53, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:73:13: 73:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:73:27: 73:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, ReceiptErrorWithOption) {libproto::Receipt::set_error}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = &mut _2;                   // scope 3 at cita-chain/types/src/receipt.rs:76:9: 76:66
        _27 = &((*_1).1: cita_types::U256); // scope 3 at cita-chain/types/src/receipt.rs:76:38: 76:65
        _26 = <U256 as cita_types::traits::LowerHex>::lower_hex(move _27) -> [return: bb13, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:76:38: 76:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:76:54: 76:63
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> std::string::String {<U256 as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = libproto::Receipt::set_quota_used(move _25, move _26) -> [return: bb14, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:76:9: 76:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:76:23: 76:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, std::string::String) {libproto::Receipt::set_quota_used}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = &mut _2;                   // scope 3 at cita-chain/types/src/receipt.rs:77:9: 77:61
        _33 = &((*_1).2: cita_types::Bloom); // scope 3 at cita-chain/types/src/receipt.rs:77:37: 77:60
        _32 = <cita_types::Bloom as Deref>::deref(move _33) -> [return: bb15, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:77:37: 77:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:77:37: 77:60
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> &'a <cita_types::Bloom as Deref>::Target {<cita_types::Bloom as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _31 = _32;                       // scope 3 at cita-chain/types/src/receipt.rs:77:37: 77:60
        _30 = slice::<impl [u8]>::to_vec(move _31) -> [return: bb16, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:77:37: 77:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:77:52: 77:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb16: {
        _28 = libproto::Receipt::set_log_bloom(move _29, move _30) -> [return: bb17, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:77:9: 77:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:77:23: 77:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, Vec<u8>) {libproto::Receipt::set_log_bloom}, val: Value(<ZST>) }
    }

    bb17: {
        _38 = &((*_1).3: std::vec::Vec<log::Log>); // scope 3 at cita-chain/types/src/receipt.rs:78:30: 80:21
        _37 = <Vec<log::Log> as Clone>::clone(move _38) -> [return: bb18, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:78:30: 80:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:80:14: 80:19
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<log::Log>) -> Vec<log::Log> {<Vec<log::Log> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb18: {
        _36 = <Vec<log::Log> as IntoIterator>::into_iter(move _37) -> [return: bb19, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:78:30: 81:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:81:14: 81:23
                                         // + literal: Const { ty: fn(Vec<log::Log>) -> <Vec<log::Log> as IntoIterator>::IntoIter {<Vec<log::Log> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb19: {
        _35 = <std::vec::IntoIter<log::Log> as Iterator>::map::<LogEntry, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]>(move _36, const ZeroSized: [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]) -> [return: bb20, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:78:30: 82:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:82:14: 82:17
                                         // + literal: Const { ty: fn(std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]) -> std::iter::Map<std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]> {<std::vec::IntoIter<log::Log> as Iterator>::map::<LogEntry, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/receipt.rs:82:18: 82:29], val: Value(<ZST>) }
    }

    bb20: {
        _34 = <std::iter::Map<std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]> as Iterator>::collect::<protobuf::repeated::RepeatedField<LogEntry>>(move _35) -> [return: bb21, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:78:30: 83:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:83:14: 83:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]>) -> protobuf::repeated::RepeatedField<LogEntry> {<std::iter::Map<std::vec::IntoIter<log::Log>, [closure@cita-chain/types/src/receipt.rs:82:18: 82:29]> as Iterator>::collect::<protobuf::repeated::RepeatedField<LogEntry>>}, val: Value(<ZST>) }
    }

    bb21: {
        drop((_2.3: protobuf::repeated::RepeatedField<libproto::LogEntry>)) -> [return: bb22, unwind: bb23]; // scope 3 at cita-chain/types/src/receipt.rs:78:9: 78:27
    }

    bb22: {
        _52 = const true;                // scope 3 at cita-chain/types/src/receipt.rs:78:9: 78:27
        (_2.3: protobuf::repeated::RepeatedField<libproto::LogEntry>) = move _34; // scope 3 at cita-chain/types/src/receipt.rs:78:9: 78:27
        _40 = &mut _2;                   // scope 3 at cita-chain/types/src/receipt.rs:84:9: 84:69
        _42 = &((*_1).5: cita_types::U256); // scope 3 at cita-chain/types/src/receipt.rs:84:41: 84:68
        _41 = U256::as_u64(move _42) -> [return: bb24, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:84:41: 84:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:84:60: 84:66
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::as_u64}, val: Value(<ZST>) }
    }

    bb23 (cleanup): {
        _52 = const true;                // scope 3 at cita-chain/types/src/receipt.rs:78:9: 78:27
        (_2.3: protobuf::repeated::RepeatedField<libproto::LogEntry>) = move _34; // scope 3 at cita-chain/types/src/receipt.rs:78:9: 78:27
        goto -> bb35;                    // scope 3 at cita-chain/types/src/receipt.rs:83:22: 83:23
    }

    bb24: {
        _39 = libproto::Receipt::set_account_nonce(move _40, move _41) -> [return: bb25, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:84:9: 84:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:84:23: 84:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, u64) {libproto::Receipt::set_account_nonce}, val: Value(<ZST>) }
    }

    bb25: {
        _44 = &mut _2;                   // scope 3 at cita-chain/types/src/receipt.rs:85:9: 85:75
        _48 = &((*_1).6: cita_types::H256); // scope 3 at cita-chain/types/src/receipt.rs:85:44: 85:74
        _47 = <H256 as Deref>::deref(move _48) -> [return: bb26, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:85:44: 85:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:85:44: 85:74
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        _46 = _47;                       // scope 3 at cita-chain/types/src/receipt.rs:85:44: 85:74
        _45 = slice::<impl [u8]>::to_vec(move _46) -> [return: bb27, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:85:44: 85:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:85:66: 85:72
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb27: {
        _43 = libproto::Receipt::set_transaction_hash(move _44, move _45) -> [return: bb28, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:85:9: 85:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:85:23: 85:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt, Vec<u8>) {libproto::Receipt::set_transaction_hash}, val: Value(<ZST>) }
    }

    bb28: {
        _51 = const false;               // scope 3 at cita-chain/types/src/receipt.rs:86:9: 86:22
        _52 = const false;               // scope 3 at cita-chain/types/src/receipt.rs:86:9: 86:22
        _0 = move _2;                    // scope 3 at cita-chain/types/src/receipt.rs:86:9: 86:22
        switchInt(_49) -> [0: bb29, otherwise: bb32]; // scope 2 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb29: {
        _49 = const false;               // scope 2 at cita-chain/types/src/receipt.rs:87:5: 87:6
        switchInt(_50) -> [0: bb30, otherwise: bb33]; // scope 1 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb30: {
        _50 = const false;               // scope 1 at cita-chain/types/src/receipt.rs:87:5: 87:6
        _51 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
        _52 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:87:6: 87:6
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:61:5: 87:6
    }

    bb32: {
        drop(_4) -> [return: bb29, unwind: bb37]; // scope 2 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb33: {
        drop(_3) -> [return: bb30, unwind: bb51]; // scope 1 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb34 (cleanup): {
        drop(_4) -> bb37;                // scope 2 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb35 (cleanup): {
        switchInt(_49) -> [0: bb37, otherwise: bb34]; // scope 2 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb36 (cleanup): {
        drop(_3) -> bb51;                // scope 1 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb37 (cleanup): {
        switchInt(_50) -> [0: bb51, otherwise: bb36]; // scope 1 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb38 (cleanup): {
        drop((_2.7: protobuf::unknown::UnknownFields)) -> bb31; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb39 (cleanup): {
        switchInt(_51) -> [0: bb31, otherwise: bb38]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb40 (cleanup): {
        drop((_2.6: std::vec::Vec<u8>)) -> bb39; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb41 (cleanup): {
        switchInt(_51) -> [0: bb39, otherwise: bb40]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb42 (cleanup): {
        drop((_2.4: protobuf::singular::SingularPtrField<libproto::ReceiptErrorWithOption>)) -> bb41; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb43 (cleanup): {
        switchInt(_51) -> [0: bb41, otherwise: bb42]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb44 (cleanup): {
        switchInt(_52) -> [0: bb43, otherwise: bb45]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb45 (cleanup): {
        drop((_2.3: protobuf::repeated::RepeatedField<libproto::LogEntry>)) -> bb43; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb46 (cleanup): {
        drop((_2.2: std::vec::Vec<u8>)) -> bb44; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb47 (cleanup): {
        switchInt(_51) -> [0: bb44, otherwise: bb46]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb48 (cleanup): {
        drop((_2.1: std::string::String)) -> bb47; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb49 (cleanup): {
        switchInt(_51) -> [0: bb47, otherwise: bb48]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb50 (cleanup): {
        drop((_2.0: protobuf::singular::SingularPtrField<libproto::StateRoot>)) -> bb49; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb51 (cleanup): {
        switchInt(_51) -> [0: bb49, otherwise: bb50]; // scope 0 at cita-chain/types/src/receipt.rs:87:5: 87:6
    }

    bb52: {
        goto -> bb8;                     // scope 4 at cita-chain/types/src/receipt.rs:68:13: 68:60
    }

    bb53: {
        goto -> bb12;                    // scope 5 at cita-chain/types/src/receipt.rs:73:13: 73:63
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:41:1: 41:13>::protobuf::{closure#0}(_1: &mut [closure@cita-chain/types/src/receipt.rs:82:18: 82:29], _2: log::Log) -> LogEntry {
    debug log_entry => _2;               // in scope 0 at cita-chain/types/src/receipt.rs:82:19: 82:28
    let mut _0: libproto::LogEntry;      // return place in scope 0 at cita-chain/types/src/receipt.rs:82:30: 82:30
    let mut _3: &log::Log;               // in scope 0 at cita-chain/types/src/receipt.rs:82:30: 82:50

    bb0: {
        _3 = &_2;                        // scope 0 at cita-chain/types/src/receipt.rs:82:30: 82:50
        _0 = log::Log::protobuf(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-chain/types/src/receipt.rs:82:30: 82:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:82:40: 82:48
                                         // + literal: Const { ty: for<'a> fn(&'a log::Log) -> LogEntry {log::Log::protobuf}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at cita-chain/types/src/receipt.rs:82:49: 82:50
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:82:50: 82:50
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/types/src/receipt.rs:82:49: 82:50
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:82:18: 82:50
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:90:1: 90:36>::from(_1: libproto::Receipt) -> receipt::Receipt {
    debug receipt => _1;                 // in scope 0 at cita-chain/types/src/receipt.rs:91:13: 91:20
    let mut _0: receipt::Receipt;        // return place in scope 0 at cita-chain/types/src/receipt.rs:91:39: 91:43
    let _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:92:13: 92:23
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/receipt.rs:92:29: 92:57
    let mut _4: &protobuf::singular::SingularPtrField<libproto::StateRoot>; // in scope 0 at cita-chain/types/src/receipt.rs:92:29: 92:57
    let mut _5: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:93:18: 95:14
    let mut _6: &[u8];                   // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
    let _7: &[u8];                       // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
    let mut _8: &libproto::StateRoot;    // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
    let _9: libproto::StateRoot;         // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:50
    let mut _10: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:50
    let mut _11: libproto::Receipt;      // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:32
    let mut _12: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:32
    let mut _14: std::result::Result<cita_types::U256, rustc_hex::FromHexError>; // in scope 0 at cita-chain/types/src/receipt.rs:100:32: 100:72
    let mut _15: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:100:47: 100:71
    let _16: &str;                       // in scope 0 at cita-chain/types/src/receipt.rs:100:47: 100:71
    let mut _17: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:100:47: 100:71
    let mut _19: u64;                    // in scope 0 at cita-chain/types/src/receipt.rs:101:46: 101:73
    let mut _20: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:101:46: 101:73
    let mut _22: &[u8];                  // in scope 0 at cita-chain/types/src/receipt.rs:102:55: 102:85
    let _23: &[u8];                      // in scope 0 at cita-chain/types/src/receipt.rs:102:55: 102:85
    let mut _24: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:102:55: 102:85
    let mut _27: std::iter::Map<std::slice::Iter<'_, libproto::LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]>; // in scope 0 at cita-chain/types/src/receipt.rs:105:20: 121:15
    let mut _28: std::slice::Iter<'_, libproto::LogEntry>; // in scope 0 at cita-chain/types/src/receipt.rs:105:20: 107:20
    let mut _29: &[libproto::LogEntry];  // in scope 0 at cita-chain/types/src/receipt.rs:105:20: 107:20
    let _30: &[libproto::LogEntry];      // in scope 0 at cita-chain/types/src/receipt.rs:105:20: 106:24
    let mut _31: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:105:20: 106:24
    let mut _32: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:124:12: 124:35
    let mut _33: &protobuf::singular::SingularPtrField<libproto::ReceiptErrorWithOption>; // in scope 0 at cita-chain/types/src/receipt.rs:124:12: 124:35
    let mut _34: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:125:21: 127:15
    let mut _35: errors::receipt::ReceiptError; // in scope 0 at cita-chain/types/src/receipt.rs:125:26: 127:14
    let mut _36: libproto::ReceiptError; // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:57
    let mut _37: &libproto::ReceiptErrorWithOption; // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:57
    let _38: libproto::ReceiptErrorWithOption; // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:45
    let mut _39: &mut libproto::Receipt; // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:45
    let mut _40: libproto::Receipt;      // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:32
    let mut _41: &libproto::Receipt;     // in scope 0 at cita-chain/types/src/receipt.rs:126:17: 126:32
    let mut _42: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:131:13: 131:23
    let mut _43: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:132:13: 132:23
    let mut _44: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:133:13: 133:17
    let mut _45: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:134:13: 134:18
    let mut _46: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:135:13: 135:26
    let mut _47: cita_types::H256;       // in scope 0 at cita-chain/types/src/receipt.rs:136:13: 136:29
    let mut _48: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:138:5: 138:6
    scope 1 {
        debug state_root => _2;          // in scope 1 at cita-chain/types/src/receipt.rs:92:13: 92:23
        let _13: cita_types::U256;       // in scope 1 at cita-chain/types/src/receipt.rs:100:13: 100:23
        scope 2 {
            debug quota_used => _13;     // in scope 2 at cita-chain/types/src/receipt.rs:100:13: 100:23
            let _18: cita_types::U256;   // in scope 2 at cita-chain/types/src/receipt.rs:101:13: 101:26
            scope 3 {
                debug account_nonce => _18; // in scope 3 at cita-chain/types/src/receipt.rs:101:13: 101:26
                let _21: cita_types::H256; // in scope 3 at cita-chain/types/src/receipt.rs:102:13: 102:29
                scope 4 {
                    debug transaction_hash => _21; // in scope 4 at cita-chain/types/src/receipt.rs:102:13: 102:29
                    let mut _25: std::option::Option<errors::receipt::ReceiptError>; // in scope 4 at cita-chain/types/src/receipt.rs:103:13: 103:22
                    scope 5 {
                        debug error => _25; // in scope 5 at cita-chain/types/src/receipt.rs:103:13: 103:22
                        let _26: std::vec::Vec<log::Log>; // in scope 5 at cita-chain/types/src/receipt.rs:105:13: 105:17
                        scope 6 {
                            debug logs => _26; // in scope 6 at cita-chain/types/src/receipt.rs:105:13: 105:17
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _48 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:92:13: 92:23
        _4 = &(_1.0: protobuf::singular::SingularPtrField<libproto::StateRoot>); // scope 0 at cita-chain/types/src/receipt.rs:92:29: 92:57
        _3 = protobuf::singular::SingularPtrField::<StateRoot>::is_some(move _4) -> [return: bb1, unwind: bb35]; // scope 0 at cita-chain/types/src/receipt.rs:92:29: 92:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:92:48: 92:55
                                         // + literal: Const { ty: for<'a> fn(&'a protobuf::singular::SingularPtrField<StateRoot>) -> bool {protobuf::singular::SingularPtrField::<StateRoot>::is_some}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb8, otherwise: bb2]; // scope 0 at cita-chain/types/src/receipt.rs:92:29: 92:57
    }

    bb2: {
        _12 = &_1;                       // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:32
        _11 = <libproto::Receipt as Clone>::clone(move _12) -> [return: bb3, unwind: bb35]; // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:94:25: 94:30
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> libproto::Receipt {<libproto::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut _11;                  // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:50
        _9 = libproto::Receipt::take_state_root(move _10) -> [return: bb4, unwind: bb34]; // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:94:33: 94:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt) -> StateRoot {libproto::Receipt::take_state_root}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &_9;                        // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
        _7 = StateRoot::get_state_root(move _8) -> [return: bb5, unwind: bb33]; // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:94:51: 94:65
                                         // + literal: Const { ty: for<'a> fn(&'a StateRoot) -> &'a [u8] {StateRoot::get_state_root}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = _7;                         // scope 0 at cita-chain/types/src/receipt.rs:94:17: 94:67
        _5 = H256::from_slice(move _6) -> [return: bb6, unwind: bb33]; // scope 0 at cita-chain/types/src/receipt.rs:93:18: 95:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:93:18: 93:34
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {H256::from_slice}, val: Value(<ZST>) }
    }

    bb6: {
        _2 = std::option::Option::<H256>::Some(move _5); // scope 0 at cita-chain/types/src/receipt.rs:93:13: 95:15
        drop(_9) -> [return: bb7, unwind: bb34]; // scope 0 at cita-chain/types/src/receipt.rs:96:9: 96:10
    }

    bb7: {
        drop(_11) -> [return: bb9, unwind: bb35]; // scope 0 at cita-chain/types/src/receipt.rs:96:9: 96:10
    }

    bb8: {
        _2 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/receipt.rs:97:13: 97:17
        goto -> bb9;                     // scope 0 at cita-chain/types/src/receipt.rs:92:26: 98:10
    }

    bb9: {
        _17 = &_1;                       // scope 1 at cita-chain/types/src/receipt.rs:100:47: 100:71
        _16 = libproto::Receipt::get_quota_used(move _17) -> [return: bb10, unwind: bb35]; // scope 1 at cita-chain/types/src/receipt.rs:100:47: 100:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:100:55: 100:69
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> &'a str {libproto::Receipt::get_quota_used}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = _16;                       // scope 1 at cita-chain/types/src/receipt.rs:100:47: 100:71
        _14 = <U256 as FromStr>::from_str(move _15) -> [return: bb11, unwind: bb35]; // scope 1 at cita-chain/types/src/receipt.rs:100:32: 100:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:100:32: 100:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<U256, <U256 as FromStr>::Err> {<U256 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = Result::<U256, rustc_hex::FromHexError>::unwrap(move _14) -> [return: bb12, unwind: bb35]; // scope 1 at cita-chain/types/src/receipt.rs:100:32: 100:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:100:73: 100:79
                                         // + literal: Const { ty: fn(Result<U256, rustc_hex::FromHexError>) -> U256 {Result::<U256, rustc_hex::FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = &_1;                       // scope 2 at cita-chain/types/src/receipt.rs:101:46: 101:73
        _19 = libproto::Receipt::get_account_nonce(move _20) -> [return: bb13, unwind: bb35]; // scope 2 at cita-chain/types/src/receipt.rs:101:46: 101:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:101:54: 101:71
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> u64 {libproto::Receipt::get_account_nonce}, val: Value(<ZST>) }
    }

    bb13: {
        _18 = <U256 as From<u64>>::from(move _19) -> [return: bb14, unwind: bb35]; // scope 2 at cita-chain/types/src/receipt.rs:101:35: 101:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:101:35: 101:45
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = &_1;                       // scope 3 at cita-chain/types/src/receipt.rs:102:55: 102:85
        _23 = libproto::Receipt::get_transaction_hash(move _24) -> [return: bb15, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:102:55: 102:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:102:63: 102:83
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> &'a [u8] {libproto::Receipt::get_transaction_hash}, val: Value(<ZST>) }
    }

    bb15: {
        _22 = _23;                       // scope 3 at cita-chain/types/src/receipt.rs:102:55: 102:85
        _21 = H256::from_slice(move _22) -> [return: bb16, unwind: bb35]; // scope 3 at cita-chain/types/src/receipt.rs:102:38: 102:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:102:38: 102:54
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {H256::from_slice}, val: Value(<ZST>) }
    }

    bb16: {
        _25 = const std::option::Option::<errors::receipt::ReceiptError>::None; // scope 4 at cita-chain/types/src/receipt.rs:103:25: 103:29
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<errors::receipt::ReceiptError>, val: Value(Scalar(0x13)) }
        _31 = &_1;                       // scope 5 at cita-chain/types/src/receipt.rs:105:20: 106:24
        _30 = libproto::Receipt::get_logs(move _31) -> [return: bb17, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:105:20: 106:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:106:14: 106:22
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> &'a [LogEntry] {libproto::Receipt::get_logs}, val: Value(<ZST>) }
    }

    bb17: {
        _29 = _30;                       // scope 5 at cita-chain/types/src/receipt.rs:105:20: 107:20
        _28 = core::slice::<impl [LogEntry]>::iter(move _29) -> [return: bb18, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:105:20: 107:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:107:14: 107:18
                                         // + literal: Const { ty: for<'a> fn(&'a [LogEntry]) -> std::slice::Iter<'a, LogEntry> {core::slice::<impl [LogEntry]>::iter}, val: Value(<ZST>) }
    }

    bb18: {
        _27 = <std::slice::Iter<'_, LogEntry> as Iterator>::map::<log::Log, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]>(move _28, const ZeroSized: [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]) -> [return: bb19, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:105:20: 121:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:108:14: 108:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]) -> std::iter::Map<std::slice::Iter<'_, LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]> {<std::slice::Iter<'_, LogEntry> as Iterator>::map::<log::Log, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/receipt.rs:108:18: 108:29], val: Value(<ZST>) }
    }

    bb19: {
        _26 = <std::iter::Map<std::slice::Iter<'_, LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]> as Iterator>::collect::<Vec<log::Log>>(move _27) -> [return: bb20, unwind: bb35]; // scope 5 at cita-chain/types/src/receipt.rs:105:20: 122:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:122:14: 122:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]>) -> Vec<log::Log> {<std::iter::Map<std::slice::Iter<'_, LogEntry>, [closure@cita-chain/types/src/receipt.rs:108:18: 108:29]> as Iterator>::collect::<Vec<log::Log>>}, val: Value(<ZST>) }
    }

    bb20: {
        _48 = const true;                // scope 5 at cita-chain/types/src/receipt.rs:122:22: 122:23
        _33 = &(_1.4: protobuf::singular::SingularPtrField<libproto::ReceiptErrorWithOption>); // scope 6 at cita-chain/types/src/receipt.rs:124:12: 124:35
        _32 = protobuf::singular::SingularPtrField::<ReceiptErrorWithOption>::is_some(move _33) -> [return: bb21, unwind: bb38]; // scope 6 at cita-chain/types/src/receipt.rs:124:12: 124:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:124:26: 124:33
                                         // + literal: Const { ty: for<'a> fn(&'a protobuf::singular::SingularPtrField<ReceiptErrorWithOption>) -> bool {protobuf::singular::SingularPtrField::<ReceiptErrorWithOption>::is_some}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _32) -> [0: bb28, otherwise: bb22]; // scope 6 at cita-chain/types/src/receipt.rs:124:12: 124:35
    }

    bb22: {
        _41 = &_1;                       // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:32
        _40 = <libproto::Receipt as Clone>::clone(move _41) -> [return: bb23, unwind: bb38]; // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:126:25: 126:30
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> libproto::Receipt {<libproto::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb23: {
        _39 = &mut _40;                  // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:45
        _38 = libproto::Receipt::take_error(move _39) -> [return: bb24, unwind: bb32]; // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:126:33: 126:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Receipt) -> ReceiptErrorWithOption {libproto::Receipt::take_error}, val: Value(<ZST>) }
    }

    bb24: {
        _37 = &_38;                      // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:57
        _36 = ReceiptErrorWithOption::get_error(move _37) -> [return: bb25, unwind: bb31]; // scope 6 at cita-chain/types/src/receipt.rs:126:17: 126:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:126:46: 126:55
                                         // + literal: Const { ty: for<'a> fn(&'a ReceiptErrorWithOption) -> libproto::ReceiptError {ReceiptErrorWithOption::get_error}, val: Value(<ZST>) }
    }

    bb25: {
        _35 = errors::receipt::ReceiptError::from_proto(move _36) -> [return: bb26, unwind: bb31]; // scope 6 at cita-chain/types/src/receipt.rs:125:26: 127:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:125:26: 125:50
                                         // + literal: Const { ty: fn(libproto::ReceiptError) -> errors::receipt::ReceiptError {errors::receipt::ReceiptError::from_proto}, val: Value(<ZST>) }
    }

    bb26: {
        _34 = std::option::Option::<errors::receipt::ReceiptError>::Some(move _35); // scope 6 at cita-chain/types/src/receipt.rs:125:21: 127:15
        _25 = move _34;                  // scope 6 at cita-chain/types/src/receipt.rs:125:13: 127:15
        drop(_38) -> [return: bb27, unwind: bb32]; // scope 6 at cita-chain/types/src/receipt.rs:127:15: 127:16
    }

    bb27: {
        drop(_40) -> [return: bb28, unwind: bb38]; // scope 6 at cita-chain/types/src/receipt.rs:127:15: 127:16
    }

    bb28: {
        _42 = _2;                        // scope 6 at cita-chain/types/src/receipt.rs:131:13: 131:23
        _43 = _13;                       // scope 6 at cita-chain/types/src/receipt.rs:132:13: 132:23
        _48 = const false;               // scope 6 at cita-chain/types/src/receipt.rs:133:13: 133:17
        _44 = move _26;                  // scope 6 at cita-chain/types/src/receipt.rs:133:13: 133:17
        _45 = _25;                       // scope 6 at cita-chain/types/src/receipt.rs:134:13: 134:18
        _46 = _18;                       // scope 6 at cita-chain/types/src/receipt.rs:135:13: 135:26
        _47 = _21;                       // scope 6 at cita-chain/types/src/receipt.rs:136:13: 136:29
        _0 = receipt::Receipt::new(move _42, move _43, move _44, move _45, move _46, move _47) -> [return: bb29, unwind: bb38]; // scope 6 at cita-chain/types/src/receipt.rs:130:9: 137:10
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:130:9: 130:21
                                         // + literal: Const { ty: fn(std::option::Option<H256>, U256, Vec<log::Log>, std::option::Option<errors::receipt::ReceiptError>, U256, H256) -> receipt::Receipt {receipt::Receipt::new}, val: Value(<ZST>) }
    }

    bb29: {
        _48 = const false;               // scope 5 at cita-chain/types/src/receipt.rs:138:5: 138:6
        drop(_1) -> bb30;                // scope 0 at cita-chain/types/src/receipt.rs:138:5: 138:6
    }

    bb30: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:138:6: 138:6
    }

    bb31 (cleanup): {
        drop(_38) -> bb32;               // scope 6 at cita-chain/types/src/receipt.rs:127:15: 127:16
    }

    bb32 (cleanup): {
        drop(_40) -> bb38;               // scope 6 at cita-chain/types/src/receipt.rs:127:15: 127:16
    }

    bb33 (cleanup): {
        drop(_9) -> bb34;                // scope 0 at cita-chain/types/src/receipt.rs:96:9: 96:10
    }

    bb34 (cleanup): {
        drop(_11) -> bb35;               // scope 0 at cita-chain/types/src/receipt.rs:96:9: 96:10
    }

    bb35 (cleanup): {
        drop(_1) -> bb36;                // scope 0 at cita-chain/types/src/receipt.rs:138:5: 138:6
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:91:5: 138:6
    }

    bb37 (cleanup): {
        drop(_26) -> bb35;               // scope 5 at cita-chain/types/src/receipt.rs:138:5: 138:6
    }

    bb38 (cleanup): {
        switchInt(_48) -> [0: bb35, otherwise: bb37]; // scope 5 at cita-chain/types/src/receipt.rs:138:5: 138:6
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:90:1: 90:36>::from::{closure#0}(_1: &mut [closure@cita-chain/types/src/receipt.rs:108:18: 108:29], _2: &LogEntry) -> log::Log {
    debug log_entry => _2;               // in scope 0 at cita-chain/types/src/receipt.rs:108:19: 108:28
    let mut _0: log::Log;                // return place in scope 0 at cita-chain/types/src/receipt.rs:108:30: 108:30
    let _3: cita_types::H160;            // in scope 0 at cita-chain/types/src/receipt.rs:109:21: 109:28
    let mut _4: &[u8];                   // in scope 0 at cita-chain/types/src/receipt.rs:109:60: 109:83
    let _5: &[u8];                       // in scope 0 at cita-chain/types/src/receipt.rs:109:60: 109:83
    let mut _7: std::iter::Map<std::slice::Iter<'_, std::vec::Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]>; // in scope 0 at cita-chain/types/src/receipt.rs:110:41: 113:58
    let mut _8: std::slice::Iter<'_, std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/receipt.rs:110:41: 112:28
    let mut _9: &[std::vec::Vec<u8>];    // in scope 0 at cita-chain/types/src/receipt.rs:110:41: 112:28
    let _10: &[std::vec::Vec<u8>];       // in scope 0 at cita-chain/types/src/receipt.rs:110:41: 111:34
    let mut _12: &[u8];                  // in scope 0 at cita-chain/types/src/receipt.rs:115:47: 115:67
    let mut _13: cita_types::H160;       // in scope 0 at cita-chain/types/src/receipt.rs:117:21: 117:28
    let mut _14: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:118:21: 118:27
    let mut _15: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/receipt.rs:119:21: 119:25
    scope 1 {
        debug address => _3;             // in scope 1 at cita-chain/types/src/receipt.rs:109:21: 109:28
        let _6: std::vec::Vec<cita_types::H256>; // in scope 1 at cita-chain/types/src/receipt.rs:110:21: 110:27
        scope 2 {
            debug topics => _6;          // in scope 2 at cita-chain/types/src/receipt.rs:110:21: 110:27
            let _11: std::vec::Vec<u8>;  // in scope 2 at cita-chain/types/src/receipt.rs:115:21: 115:25
            scope 3 {
                debug data => _11;       // in scope 3 at cita-chain/types/src/receipt.rs:115:21: 115:25
            }
        }
    }

    bb0: {
        _5 = LogEntry::get_address(_2) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:109:60: 109:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:109:70: 109:81
                                         // + literal: Const { ty: for<'a> fn(&'a LogEntry) -> &'a [u8] {LogEntry::get_address}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/receipt.rs:109:60: 109:83
        _3 = H160::from_slice(move _4) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:109:40: 109:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:109:40: 109:59
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = LogEntry::get_topics(_2) -> bb3; // scope 1 at cita-chain/types/src/receipt.rs:110:41: 111:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:111:22: 111:32
                                         // + literal: Const { ty: for<'a> fn(&'a LogEntry) -> &'a [Vec<u8>] {LogEntry::get_topics}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 1 at cita-chain/types/src/receipt.rs:110:41: 112:28
        _8 = core::slice::<impl [Vec<u8>]>::iter(move _9) -> bb4; // scope 1 at cita-chain/types/src/receipt.rs:110:41: 112:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:112:22: 112:26
                                         // + literal: Const { ty: for<'a> fn(&'a [Vec<u8>]) -> std::slice::Iter<'a, Vec<u8>> {core::slice::<impl [Vec<u8>]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H256, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]>(move _8, const ZeroSized: [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]) -> bb5; // scope 1 at cita-chain/types/src/receipt.rs:110:41: 113:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:113:22: 113:25
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]) -> std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]> {<std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H256, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/receipt.rs:113:26: 113:33], val: Value(<ZST>) }
    }

    bb5: {
        _6 = <std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]> as Iterator>::collect::<Vec<H256>>(move _7) -> bb6; // scope 1 at cita-chain/types/src/receipt.rs:110:41: 114:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:114:22: 114:29
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]>) -> Vec<H256> {<std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/types/src/receipt.rs:113:26: 113:33]> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = LogEntry::get_data(_2) -> [return: bb7, unwind: bb9]; // scope 2 at cita-chain/types/src/receipt.rs:115:47: 115:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:115:57: 115:65
                                         // + literal: Const { ty: for<'a> fn(&'a LogEntry) -> &'a [u8] {LogEntry::get_data}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = <Vec<u8> as From<&[u8]>>::from(move _12) -> [return: bb8, unwind: bb9]; // scope 2 at cita-chain/types/src/receipt.rs:115:35: 115:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:115:35: 115:46
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[u8]) -> Vec<u8> {<Vec<u8> as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = _3;                        // scope 3 at cita-chain/types/src/receipt.rs:117:21: 117:28
        _14 = move _6;                   // scope 3 at cita-chain/types/src/receipt.rs:118:21: 118:27
        _15 = move _11;                  // scope 3 at cita-chain/types/src/receipt.rs:119:21: 119:25
        _0 = log::Log { address: move _13, topics: move _14, data: move _15 }; // scope 3 at cita-chain/types/src/receipt.rs:116:17: 120:18
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:121:14: 121:14
    }

    bb9 (cleanup): {
        drop(_6) -> bb10;                // scope 1 at cita-chain/types/src/receipt.rs:121:13: 121:14
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:108:18: 121:14
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:90:1: 90:36>::from::{closure#0}::{closure#0}(_1: &mut [closure@cita-chain/types/src/receipt.rs:113:26: 113:33], _2: &Vec<u8>) -> H256 {
    debug topic => _2;                   // in scope 0 at cita-chain/types/src/receipt.rs:113:27: 113:32
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/receipt.rs:113:34: 113:34
    let mut _3: &[u8];                   // in scope 0 at cita-chain/types/src/receipt.rs:113:51: 113:56
    let _4: &[u8];                       // in scope 0 at cita-chain/types/src/receipt.rs:113:51: 113:56

    bb0: {
        _4 = <Vec<u8> as Deref>::deref(_2) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:113:51: 113:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:113:51: 113:56
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/types/src/receipt.rs:113:51: 113:56
        _0 = H256::from_slice(move _3) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:113:34: 113:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:113:34: 113:50
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {H256::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:113:57: 113:57
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:141:1: 141:27>::rlp_append(_1: &receipt::Receipt, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:142:19: 142:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/receipt.rs:142:26: 142:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/receipt.rs:142:45: 142:45
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:143:16: 143:30
    let _5: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/receipt.rs:144:13: 144:28
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/receipt.rs:145:13: 145:27
    let _7: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/receipt.rs:147:13: 147:28
    let _8: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/receipt.rs:149:9: 149:35
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:149:18: 149:34
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/receipt.rs:150:9: 150:34
    let _11: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/receipt.rs:150:18: 150:33
    let _12: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/receipt.rs:151:9: 151:34
    let mut _13: &[log::Log];            // in scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
    let _14: &[log::Log];                // in scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
    let _15: &std::vec::Vec<log::Log>;   // in scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
    let _16: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/receipt.rs:152:9: 152:30
    let _17: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:152:18: 152:29
    let _18: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/receipt.rs:153:9: 153:38
    let _19: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:153:18: 153:37
    let _20: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/receipt.rs:154:9: 154:41
    let _21: &cita_types::H256;          // in scope 0 at cita-chain/types/src/receipt.rs:154:18: 154:40
    scope 1 {
        debug root => _4;                // in scope 1 at cita-chain/types/src/receipt.rs:143:21: 143:29
        let _4: &cita_types::H256;       // in scope 1 at cita-chain/types/src/receipt.rs:143:21: 143:29
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<cita_types::H256>)); // scope 1 at cita-chain/types/src/receipt.rs:143:16: 143:30
        switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 1 at cita-chain/types/src/receipt.rs:143:16: 143:30
    }

    bb1: {
        _4 = &((((*_1).0: std::option::Option<cita_types::H256>) as Some).0: cita_types::H256); // scope 1 at cita-chain/types/src/receipt.rs:143:21: 143:29
        _5 = rlp::RlpStream::begin_list(_2, const 7_usize) -> bb2; // scope 1 at cita-chain/types/src/receipt.rs:144:13: 144:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:144:15: 144:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = rlp::RlpStream::append::<H256>(_2, _4) -> bb4; // scope 1 at cita-chain/types/src/receipt.rs:145:13: 145:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:145:15: 145:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = rlp::RlpStream::begin_list(_2, const 6_usize) -> bb4; // scope 0 at cita-chain/types/src/receipt.rs:147:13: 147:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:147:15: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:149:18: 149:34
        _8 = rlp::RlpStream::append::<U256>(_2, _9) -> bb5; // scope 0 at cita-chain/types/src/receipt.rs:149:9: 149:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:149:11: 149:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &((*_1).2: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:150:18: 150:33
        _10 = rlp::RlpStream::append::<cita_types::Bloom>(_2, _11) -> bb6; // scope 0 at cita-chain/types/src/receipt.rs:150:9: 150:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:150:11: 150:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b cita_types::Bloom) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).3: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
        _14 = <Vec<log::Log> as Deref>::deref(_15) -> bb7; // scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:151:23: 151:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<log::Log>) -> &'a <Vec<log::Log> as Deref>::Target {<Vec<log::Log> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = _14;                       // scope 0 at cita-chain/types/src/receipt.rs:151:23: 151:33
        _12 = rlp::RlpStream::append_list::<log::Log, log::Log>(_2, move _13) -> bb8; // scope 0 at cita-chain/types/src/receipt.rs:151:9: 151:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:151:11: 151:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [log::Log]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<log::Log, log::Log>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = &((*_1).4: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:152:18: 152:29
        _16 = rlp::RlpStream::append::<std::option::Option<errors::receipt::ReceiptError>>(_2, _17) -> bb9; // scope 0 at cita-chain/types/src/receipt.rs:152:9: 152:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:152:11: 152:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b std::option::Option<errors::receipt::ReceiptError>) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = &((*_1).5: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:153:18: 153:37
        _18 = rlp::RlpStream::append::<U256>(_2, _19) -> bb10; // scope 0 at cita-chain/types/src/receipt.rs:153:9: 153:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:153:11: 153:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &((*_1).6: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:154:18: 154:40
        _20 = rlp::RlpStream::append::<H256>(_2, _21) -> bb11; // scope 0 at cita-chain/types/src/receipt.rs:154:9: 154:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:154:11: 154:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:155:6: 155:6
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:158:1: 158:27>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<receipt::Receipt, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/receipt.rs:159:15: 159:18
    let mut _0: std::result::Result<receipt::Receipt, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/receipt.rs:159:38: 159:64
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:28
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/receipt.rs:160:28: 160:29
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:160:28: 160:29
    let _6: usize;                       // in scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
    let mut _7: receipt::Receipt;        // in scope 0 at cita-chain/types/src/receipt.rs:161:16: 169:14
    let mut _8: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:162:29: 162:33
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
    let mut _10: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:42
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:163:42: 163:43
    let _12: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:163:42: 163:43
    let _13: cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::Bloom>; // in scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
    let mut _15: std::result::Result<cita_types::Bloom, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:41
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:164:41: 164:42
    let _17: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:164:41: 164:42
    let _18: cita_types::Bloom;          // in scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
    let mut _19: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<log::Log>>; // in scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
    let mut _21: std::result::Result<std::vec::Vec<log::Log>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:37
    let mut _22: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:165:37: 165:38
    let _23: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:165:37: 165:38
    let _24: std::vec::Vec<log::Log>;    // in scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::option::Option<errors::receipt::ReceiptError>>; // in scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
    let mut _26: std::result::Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:37
    let mut _27: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:166:37: 166:38
    let _28: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:166:37: 166:38
    let _29: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
    let mut _31: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:45
    let mut _32: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:167:45: 167:46
    let _33: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:167:45: 167:46
    let _34: cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
    let mut _36: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:48
    let mut _37: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:168:48: 168:49
    let _38: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:168:48: 168:49
    let _39: cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
    let mut _40: receipt::Receipt;       // in scope 0 at cita-chain/types/src/receipt.rs:171:16: 179:14
    let mut _41: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:172:29: 172:49
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
    let mut _43: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:47
    let mut _44: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:172:47: 172:48
    let _45: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:172:47: 172:48
    let _46: cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
    let mut _48: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:42
    let mut _49: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:173:42: 173:43
    let _50: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:173:42: 173:43
    let _51: cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::Bloom>; // in scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
    let mut _53: std::result::Result<cita_types::Bloom, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:41
    let mut _54: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:174:41: 174:42
    let _55: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:174:41: 174:42
    let _56: cita_types::Bloom;          // in scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
    let mut _57: std::vec::Vec<log::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<log::Log>>; // in scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
    let mut _59: std::result::Result<std::vec::Vec<log::Log>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:37
    let mut _60: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:175:37: 175:38
    let _61: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:175:37: 175:38
    let _62: std::vec::Vec<log::Log>;    // in scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::option::Option<errors::receipt::ReceiptError>>; // in scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
    let mut _64: std::result::Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:37
    let mut _65: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:176:37: 176:38
    let _66: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:176:37: 176:38
    let _67: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
    let mut _69: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:45
    let mut _70: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:177:45: 177:46
    let _71: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:177:45: 177:46
    let _72: cita_types::U256;           // in scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
    let mut _74: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:48
    let mut _75: isize;                  // in scope 0 at cita-chain/types/src/receipt.rs:178:48: 178:49
    let _76: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/receipt.rs:178:48: 178:49
    let _77: cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/receipt.rs:160:28: 160:29
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/receipt.rs:160:12: 160:29
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;           // in scope 5 at cita-chain/types/src/receipt.rs:163:42: 163:43
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;                // in scope 7 at cita-chain/types/src/receipt.rs:163:29: 163:43
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;           // in scope 9 at cita-chain/types/src/receipt.rs:164:41: 164:42
        scope 10 {
        }
    }
    scope 11 {
        debug val => _18;                // in scope 11 at cita-chain/types/src/receipt.rs:164:28: 164:42
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _23;           // in scope 13 at cita-chain/types/src/receipt.rs:165:37: 165:38
        scope 14 {
        }
    }
    scope 15 {
        debug val => _24;                // in scope 15 at cita-chain/types/src/receipt.rs:165:23: 165:38
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _28;           // in scope 17 at cita-chain/types/src/receipt.rs:166:37: 166:38
        scope 18 {
        }
    }
    scope 19 {
        debug val => _29;                // in scope 19 at cita-chain/types/src/receipt.rs:166:24: 166:38
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _33;           // in scope 21 at cita-chain/types/src/receipt.rs:167:45: 167:46
        scope 22 {
        }
    }
    scope 23 {
        debug val => _34;                // in scope 23 at cita-chain/types/src/receipt.rs:167:32: 167:46
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _38;           // in scope 25 at cita-chain/types/src/receipt.rs:168:48: 168:49
        scope 26 {
        }
    }
    scope 27 {
        debug val => _39;                // in scope 27 at cita-chain/types/src/receipt.rs:168:35: 168:49
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _45;           // in scope 29 at cita-chain/types/src/receipt.rs:172:47: 172:48
        scope 30 {
        }
    }
    scope 31 {
        debug val => _46;                // in scope 31 at cita-chain/types/src/receipt.rs:172:34: 172:48
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _50;           // in scope 33 at cita-chain/types/src/receipt.rs:173:42: 173:43
        scope 34 {
        }
    }
    scope 35 {
        debug val => _51;                // in scope 35 at cita-chain/types/src/receipt.rs:173:29: 173:43
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _55;           // in scope 37 at cita-chain/types/src/receipt.rs:174:41: 174:42
        scope 38 {
        }
    }
    scope 39 {
        debug val => _56;                // in scope 39 at cita-chain/types/src/receipt.rs:174:28: 174:42
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _61;           // in scope 41 at cita-chain/types/src/receipt.rs:175:37: 175:38
        scope 42 {
        }
    }
    scope 43 {
        debug val => _62;                // in scope 43 at cita-chain/types/src/receipt.rs:175:23: 175:38
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _66;           // in scope 45 at cita-chain/types/src/receipt.rs:176:37: 176:38
        scope 46 {
        }
    }
    scope 47 {
        debug val => _67;                // in scope 47 at cita-chain/types/src/receipt.rs:176:24: 176:38
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _71;           // in scope 49 at cita-chain/types/src/receipt.rs:177:45: 177:46
        scope 50 {
        }
    }
    scope 51 {
        debug val => _72;                // in scope 51 at cita-chain/types/src/receipt.rs:177:32: 177:46
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _76;           // in scope 53 at cita-chain/types/src/receipt.rs:178:48: 178:49
        scope 54 {
        }
    }
    scope 55 {
        debug val => _77;                // in scope 55 at cita-chain/types/src/receipt.rs:178:35: 178:49
        scope 56 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:160:16: 160:26
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:160:12: 160:29
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
        switchInt(move _6) -> [6: bb6, otherwise: bb7]; // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:34
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:160:12: 160:29
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:160:28: 160:29
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb79; // scope 2 at cita-chain/types/src/receipt.rs:160:12: 160:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:160:28: 160:29
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/receipt.rs:162:29: 162:33
        _10 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 0_usize) -> bb8; // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:163:33: 163:39
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb7: {
        _43 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 0_usize) -> bb41; // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:172:38: 172:44
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = <Result<U256, rlp::DecoderError> as Try>::branch(move _10) -> bb9; // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:163:29: 163:43
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = discriminant(_9);          // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
        switchInt(move _11) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
    }

    bb10: {
        _13 = ((_9 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
        _15 = rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>(_1, const 1_usize) -> bb13; // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:164:32: 164:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<cita_types::Bloom, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:163:29: 163:43
    }

    bb12: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:163:42: 163:43
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _12) -> bb79; // scope 6 at cita-chain/types/src/receipt.rs:163:29: 163:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:163:42: 163:43
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = <Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch(move _15) -> bb14; // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:164:28: 164:42
                                         // + literal: Const { ty: fn(Result<cita_types::Bloom, rlp::DecoderError>) -> ControlFlow<<Result<cita_types::Bloom, rlp::DecoderError> as Try>::Residual, <Result<cita_types::Bloom, rlp::DecoderError> as Try>::Output> {<Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _16 = discriminant(_14);         // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
        switchInt(move _16) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
    }

    bb15: {
        _18 = ((_14 as Continue).0: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
        _21 = rlp::UntrustedRlp::<'_>::list_at::<log::Log>(_1, const 2_usize) -> bb18; // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:165:27: 165:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<log::Log>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::list_at::<log::Log>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:164:28: 164:42
    }

    bb17: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:164:41: 164:42
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _17) -> bb79; // scope 10 at cita-chain/types/src/receipt.rs:164:28: 164:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:164:41: 164:42
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = <Result<Vec<log::Log>, rlp::DecoderError> as Try>::branch(move _21) -> bb19; // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:165:23: 165:38
                                         // + literal: Const { ty: fn(Result<Vec<log::Log>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<log::Log>, rlp::DecoderError> as Try>::Residual, <Result<Vec<log::Log>, rlp::DecoderError> as Try>::Output> {<Result<Vec<log::Log>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb19: {
        _22 = discriminant(_20);         // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
        switchInt(move _22) -> [0: bb20, 1: bb22, otherwise: bb21]; // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
    }

    bb20: {
        _24 = move ((_20 as Continue).0: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
        _19 = move _24;                  // scope 16 at cita-chain/types/src/receipt.rs:165:23: 165:38
        _26 = rlp::UntrustedRlp::<'_>::val_at::<std::option::Option<errors::receipt::ReceiptError>>(_1, const 3_usize) -> [return: bb23, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:166:28: 166:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
    }

    bb21: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:165:23: 165:38
    }

    bb22: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:165:37: 165:38
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _23) -> bb79; // scope 14 at cita-chain/types/src/receipt.rs:165:23: 165:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:165:37: 165:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb23: {
        _25 = <Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::branch(move _26) -> [return: bb24, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:166:24: 166:38
                                         // + literal: Const { ty: fn(Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError>) -> ControlFlow<<Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::Residual, <Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::Output> {<Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb24: {
        _27 = discriminant(_25);         // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
        switchInt(move _27) -> [0: bb25, 1: bb27, otherwise: bb26]; // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
    }

    bb25: {
        _29 = ((_25 as Continue).0: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
        _31 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 4_usize) -> [return: bb29, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:167:36: 167:42
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb26: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:166:24: 166:38
    }

    bb27: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:166:37: 166:38
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _28) -> [return: bb28, unwind: bb81]; // scope 18 at cita-chain/types/src/receipt.rs:166:24: 166:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:166:37: 166:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_19) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:169:13: 169:14
    }

    bb29: {
        _30 = <Result<U256, rlp::DecoderError> as Try>::branch(move _31) -> [return: bb30, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:167:32: 167:46
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb30: {
        _32 = discriminant(_30);         // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
        switchInt(move _32) -> [0: bb31, 1: bb33, otherwise: bb32]; // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
    }

    bb31: {
        _34 = ((_30 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
        _36 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 5_usize) -> [return: bb35, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:168:39: 168:45
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb32: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:167:32: 167:46
    }

    bb33: {
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:167:45: 167:46
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _33) -> [return: bb34, unwind: bb81]; // scope 22 at cita-chain/types/src/receipt.rs:167:32: 167:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:167:45: 167:46
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_19) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:169:13: 169:14
    }

    bb35: {
        _35 = <Result<H256, rlp::DecoderError> as Try>::branch(move _36) -> [return: bb36, unwind: bb81]; // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:168:35: 168:49
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb36: {
        _37 = discriminant(_35);         // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
        switchInt(move _37) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
    }

    bb37: {
        _39 = ((_35 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
        _7 = receipt::Receipt { state_root: move _8, quota_used: _13, log_bloom: _18, logs: move _19, error: _29, account_nonce: _34, transaction_hash: _39 }; // scope 0 at cita-chain/types/src/receipt.rs:161:16: 169:14
        _0 = Result::<receipt::Receipt, rlp::DecoderError>::Ok(move _7); // scope 0 at cita-chain/types/src/receipt.rs:161:13: 169:15
        goto -> bb79;                    // scope 0 at cita-chain/types/src/receipt.rs:160:9: 180:10
    }

    bb38: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:168:35: 168:49
    }

    bb39: {
        _38 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:168:48: 168:49
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _38) -> [return: bb40, unwind: bb81]; // scope 26 at cita-chain/types/src/receipt.rs:168:35: 168:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:168:48: 168:49
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb40: {
        drop(_19) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:169:13: 169:14
    }

    bb41: {
        _42 = <Result<H256, rlp::DecoderError> as Try>::branch(move _43) -> bb42; // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:172:34: 172:48
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb42: {
        _44 = discriminant(_42);         // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
        switchInt(move _44) -> [0: bb43, 1: bb45, otherwise: bb44]; // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
    }

    bb43: {
        _46 = ((_42 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
        _41 = std::option::Option::<H256>::Some(_46); // scope 0 at cita-chain/types/src/receipt.rs:172:29: 172:49
        _48 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 1_usize) -> bb46; // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:173:33: 173:39
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb44: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:172:34: 172:48
    }

    bb45: {
        _45 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:172:47: 172:48
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _45) -> bb79; // scope 30 at cita-chain/types/src/receipt.rs:172:34: 172:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:172:47: 172:48
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb46: {
        _47 = <Result<U256, rlp::DecoderError> as Try>::branch(move _48) -> bb47; // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:173:29: 173:43
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb47: {
        _49 = discriminant(_47);         // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
        switchInt(move _49) -> [0: bb48, 1: bb50, otherwise: bb49]; // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
    }

    bb48: {
        _51 = ((_47 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
        _53 = rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>(_1, const 2_usize) -> bb51; // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:174:32: 174:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<cita_types::Bloom, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<cita_types::Bloom>}, val: Value(<ZST>) }
    }

    bb49: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:173:29: 173:43
    }

    bb50: {
        _50 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:173:42: 173:43
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _50) -> bb79; // scope 34 at cita-chain/types/src/receipt.rs:173:29: 173:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:173:42: 173:43
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb51: {
        _52 = <Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch(move _53) -> bb52; // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:174:28: 174:42
                                         // + literal: Const { ty: fn(Result<cita_types::Bloom, rlp::DecoderError>) -> ControlFlow<<Result<cita_types::Bloom, rlp::DecoderError> as Try>::Residual, <Result<cita_types::Bloom, rlp::DecoderError> as Try>::Output> {<Result<cita_types::Bloom, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb52: {
        _54 = discriminant(_52);         // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
        switchInt(move _54) -> [0: bb53, 1: bb55, otherwise: bb54]; // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
    }

    bb53: {
        _56 = ((_52 as Continue).0: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
        _59 = rlp::UntrustedRlp::<'_>::list_at::<log::Log>(_1, const 3_usize) -> bb56; // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:175:27: 175:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<log::Log>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::list_at::<log::Log>}, val: Value(<ZST>) }
    }

    bb54: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:174:28: 174:42
    }

    bb55: {
        _55 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:174:41: 174:42
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _55) -> bb79; // scope 38 at cita-chain/types/src/receipt.rs:174:28: 174:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:174:41: 174:42
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb56: {
        _58 = <Result<Vec<log::Log>, rlp::DecoderError> as Try>::branch(move _59) -> bb57; // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:175:23: 175:38
                                         // + literal: Const { ty: fn(Result<Vec<log::Log>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<log::Log>, rlp::DecoderError> as Try>::Residual, <Result<Vec<log::Log>, rlp::DecoderError> as Try>::Output> {<Result<Vec<log::Log>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb57: {
        _60 = discriminant(_58);         // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
        switchInt(move _60) -> [0: bb58, 1: bb60, otherwise: bb59]; // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
    }

    bb58: {
        _62 = move ((_58 as Continue).0: std::vec::Vec<log::Log>); // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
        _57 = move _62;                  // scope 44 at cita-chain/types/src/receipt.rs:175:23: 175:38
        _64 = rlp::UntrustedRlp::<'_>::val_at::<std::option::Option<errors::receipt::ReceiptError>>(_1, const 4_usize) -> [return: bb61, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:176:28: 176:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<std::option::Option<errors::receipt::ReceiptError>>}, val: Value(<ZST>) }
    }

    bb59: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:175:23: 175:38
    }

    bb60: {
        _61 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:175:37: 175:38
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _61) -> bb79; // scope 42 at cita-chain/types/src/receipt.rs:175:23: 175:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:175:37: 175:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb61: {
        _63 = <Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::branch(move _64) -> [return: bb62, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:176:24: 176:38
                                         // + literal: Const { ty: fn(Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError>) -> ControlFlow<<Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::Residual, <Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::Output> {<Result<std::option::Option<errors::receipt::ReceiptError>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb62: {
        _65 = discriminant(_63);         // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
        switchInt(move _65) -> [0: bb63, 1: bb65, otherwise: bb64]; // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
    }

    bb63: {
        _67 = ((_63 as Continue).0: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
        _69 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 5_usize) -> [return: bb67, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:177:36: 177:42
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb64: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:176:24: 176:38
    }

    bb65: {
        _66 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:176:37: 176:38
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _66) -> [return: bb66, unwind: bb80]; // scope 46 at cita-chain/types/src/receipt.rs:176:24: 176:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:176:37: 176:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb66: {
        drop(_57) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:179:13: 179:14
    }

    bb67: {
        _68 = <Result<U256, rlp::DecoderError> as Try>::branch(move _69) -> [return: bb68, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:177:32: 177:46
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb68: {
        _70 = discriminant(_68);         // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
        switchInt(move _70) -> [0: bb69, 1: bb71, otherwise: bb70]; // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
    }

    bb69: {
        _72 = ((_68 as Continue).0: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
        _74 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 6_usize) -> [return: bb73, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:178:39: 178:45
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb70: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:177:32: 177:46
    }

    bb71: {
        _71 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:177:45: 177:46
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _71) -> [return: bb72, unwind: bb80]; // scope 50 at cita-chain/types/src/receipt.rs:177:32: 177:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:177:45: 177:46
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb72: {
        drop(_57) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:179:13: 179:14
    }

    bb73: {
        _73 = <Result<H256, rlp::DecoderError> as Try>::branch(move _74) -> [return: bb74, unwind: bb80]; // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:178:35: 178:49
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb74: {
        _75 = discriminant(_73);         // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
        switchInt(move _75) -> [0: bb75, 1: bb77, otherwise: bb76]; // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
    }

    bb75: {
        _77 = ((_73 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
        _40 = receipt::Receipt { state_root: move _41, quota_used: _51, log_bloom: _56, logs: move _57, error: _67, account_nonce: _72, transaction_hash: _77 }; // scope 0 at cita-chain/types/src/receipt.rs:171:16: 179:14
        _0 = Result::<receipt::Receipt, rlp::DecoderError>::Ok(move _40); // scope 0 at cita-chain/types/src/receipt.rs:171:13: 179:15
        goto -> bb79;                    // scope 0 at cita-chain/types/src/receipt.rs:160:9: 180:10
    }

    bb76: {
        unreachable;                     // scope 0 at cita-chain/types/src/receipt.rs:178:35: 178:49
    }

    bb77: {
        _76 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/receipt.rs:178:48: 178:49
        _0 = <Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _76) -> [return: bb78, unwind: bb80]; // scope 54 at cita-chain/types/src/receipt.rs:178:35: 178:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:178:48: 178:49
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<receipt::Receipt, rlp::DecoderError> {<Result<receipt::Receipt, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb78: {
        drop(_57) -> bb79;               // scope 0 at cita-chain/types/src/receipt.rs:179:13: 179:14
    }

    bb79: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:181:6: 181:6
    }

    bb80 (cleanup): {
        drop(_57) -> bb82;               // scope 0 at cita-chain/types/src/receipt.rs:179:13: 179:14
    }

    bb81 (cleanup): {
        drop(_19) -> bb82;               // scope 0 at cita-chain/types/src/receipt.rs:169:13: 169:14
    }

    bb82 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:159:5: 181:6
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:184:10: 184:15>::fmt(_1: &RichReceipt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let _4: &[&dyn std::fmt::Debug; 11]; // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let _5: [&dyn std::fmt::Debug; 11];  // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
    let _7: &cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let _9: &usize;                      // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let _13: &u64;                       // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let _19: &std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let _21: &std::vec::Vec<log::LocalizedLog>; // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let _23: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let _25: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let mut _26: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
    let _27: &&std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
    let _28: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
    let _29: &str;                       // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _30: &[&str];                // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _31: &[&str; 11];            // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    scope 1 {
        debug names => _31;              // in scope 1 at cita-chain/types/src/receipt.rs:184:10: 184:15
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/receipt.rs:184:10: 184:15
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/receipt.rs:184:10: 184:15
        }
    }

    bb0: {
        _31 = const _;                   // scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // + literal: Const { ty: &[&str; 11], val: Unevaluated(<RichReceipt as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: cita_types::H256); // scope 1 at cita-chain/types/src/receipt.rs:186:5: 186:31
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:186:5: 186:31
        _9 = &((*_1).1: usize);          // scope 1 at cita-chain/types/src/receipt.rs:187:5: 187:33
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:187:5: 187:33
        _11 = &((*_1).2: cita_types::H256); // scope 1 at cita-chain/types/src/receipt.rs:188:5: 188:25
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:188:5: 188:25
        _13 = &((*_1).3: u64);           // scope 1 at cita-chain/types/src/receipt.rs:189:5: 189:34
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:189:5: 189:34
        _15 = &((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:190:5: 190:36
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:190:5: 190:36
        _17 = &((*_1).5: cita_types::U256); // scope 1 at cita-chain/types/src/receipt.rs:191:5: 191:25
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:191:5: 191:25
        _19 = &((*_1).6: std::option::Option<cita_types::H160>); // scope 1 at cita-chain/types/src/receipt.rs:192:5: 192:42
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:192:5: 192:42
        _21 = &((*_1).7: std::vec::Vec<log::LocalizedLog>); // scope 1 at cita-chain/types/src/receipt.rs:193:5: 193:32
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:193:5: 193:32
        _23 = &((*_1).8: cita_types::Bloom); // scope 1 at cita-chain/types/src/receipt.rs:194:5: 194:28
        _22 = _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:194:5: 194:28
        _25 = &((*_1).9: std::option::Option<cita_types::H256>); // scope 1 at cita-chain/types/src/receipt.rs:195:5: 195:33
        _24 = _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:195:5: 195:33
        _28 = &((*_1).10: std::option::Option<errors::receipt::ReceiptError>); // scope 1 at cita-chain/types/src/receipt.rs:196:5: 196:36
        _27 = &_28;                      // scope 1 at cita-chain/types/src/receipt.rs:196:5: 196:36
        _26 = _27 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:196:5: 196:36
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26]; // scope 1 at cita-chain/types/src/receipt.rs:184:10: 184:15
        _4 = &_5;                        // scope 1 at cita-chain/types/src/receipt.rs:184:10: 184:15
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/receipt.rs:184:10: 184:15
        _29 = const "RichReceipt";       // scope 2 at cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _30 = _31 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/receipt.rs:184:10: 184:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _29, move _30, _3) -> bb1; // scope 2 at cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:184:15: 184:15
    }
}

promoted[0] in receipt::<impl at cita-chain/types/src/receipt.rs:184:10: 184:15>::fmt: &[&str; 11] = {
    let mut _0: &[&str; 11];             // return place in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _1: [&str; 11];              // in scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let mut _14: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let mut _15: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let mut _16: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let mut _17: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let mut _18: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let mut _19: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let mut _20: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
    let mut _21: &str;                   // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36

    bb0: {
        _3 = const "transaction_index";  // scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:187:5: 187:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
        _5 = const "block_hash";         // scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:188:5: 188:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
        _7 = const "block_number";       // scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:189:5: 189:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
        _9 = const "cumulative_quota_used"; // scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:190:5: 190:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
        _11 = const "quota_used";        // scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:191:5: 191:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
        _13 = const "contract_address";  // scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:192:5: 192:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
        _15 = const "logs";              // scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:193:5: 193:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
        _17 = const "log_bloom";         // scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:194:5: 194:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &(*_17);                   // scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
        _19 = const "state_root";        // scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:195:5: 195:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = &(*_19);                   // scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
        _21 = const "error";             // scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:196:5: 196:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = &(*_21);                   // scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
        _1 = [const "transaction_hash", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20]; // scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:186:5: 186:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:184:10: 184:15
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:184:17: 184:22>::clone(_1: &RichReceipt) -> RichReceipt {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:184:17: 184:22
    let mut _0: receipt::RichReceipt;    // return place in scope 0 at cita-chain/types/src/receipt.rs:184:17: 184:22
    let mut _2: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
    let _3: &cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
    let mut _4: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let _5: &usize;                      // in scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let _7: &cita_types::H256;           // in scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let _9: &u64;                        // in scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
    let mut _10: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let _11: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let _13: &cita_types::U256;          // in scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
    let mut _14: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let _15: &std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
    let mut _16: std::vec::Vec<log::LocalizedLog>; // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let _17: &std::vec::Vec<log::LocalizedLog>; // in scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
    let mut _18: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let _19: &cita_types::Bloom;         // in scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
    let mut _20: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let _21: &std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
    let mut _22: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
    let _23: &std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36

    bb0: {
        _3 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
        _2 = <H256 as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/receipt.rs:186:5: 186:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:186:5: 186:31
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: usize);          // scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
        _4 = (*_5);                      // scope 0 at cita-chain/types/src/receipt.rs:187:5: 187:33
        _7 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
        _6 = <H256 as Clone>::clone(_7) -> bb2; // scope 0 at cita-chain/types/src/receipt.rs:188:5: 188:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:188:5: 188:25
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).3: u64);            // scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
        _8 = (*_9);                      // scope 0 at cita-chain/types/src/receipt.rs:189:5: 189:34
        _11 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
        _10 = <U256 as Clone>::clone(_11) -> bb3; // scope 0 at cita-chain/types/src/receipt.rs:190:5: 190:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:190:5: 190:36
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &((*_1).5: cita_types::U256); // scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
        _12 = <U256 as Clone>::clone(_13) -> bb4; // scope 0 at cita-chain/types/src/receipt.rs:191:5: 191:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:191:5: 191:25
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &((*_1).6: std::option::Option<cita_types::H160>); // scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
        _14 = <std::option::Option<H160> as Clone>::clone(_15) -> bb5; // scope 0 at cita-chain/types/src/receipt.rs:192:5: 192:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:192:5: 192:42
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H160>) -> std::option::Option<H160> {<std::option::Option<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &((*_1).7: std::vec::Vec<log::LocalizedLog>); // scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
        _16 = <Vec<LocalizedLog> as Clone>::clone(_17) -> bb6; // scope 0 at cita-chain/types/src/receipt.rs:193:5: 193:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:193:5: 193:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<LocalizedLog>) -> Vec<LocalizedLog> {<Vec<LocalizedLog> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &((*_1).8: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
        _18 = <cita_types::Bloom as Clone>::clone(_19) -> [return: bb7, unwind: bb10]; // scope 0 at cita-chain/types/src/receipt.rs:194:5: 194:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:194:5: 194:28
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> cita_types::Bloom {<cita_types::Bloom as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = &((*_1).9: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
        _20 = <std::option::Option<H256> as Clone>::clone(_21) -> [return: bb8, unwind: bb10]; // scope 0 at cita-chain/types/src/receipt.rs:195:5: 195:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:195:5: 195:33
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<H256>) -> std::option::Option<H256> {<std::option::Option<H256> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = &((*_1).10: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
        _22 = <std::option::Option<errors::receipt::ReceiptError> as Clone>::clone(_23) -> [return: bb9, unwind: bb10]; // scope 0 at cita-chain/types/src/receipt.rs:196:5: 196:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:196:5: 196:36
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<errors::receipt::ReceiptError>) -> std::option::Option<errors::receipt::ReceiptError> {<std::option::Option<errors::receipt::ReceiptError> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = RichReceipt { transaction_hash: move _2, transaction_index: move _4, block_hash: move _6, block_number: move _8, cumulative_quota_used: move _10, quota_used: move _12, contract_address: move _14, logs: move _16, log_bloom: move _18, state_root: move _20, error: move _22 }; // scope 0 at cita-chain/types/src/receipt.rs:184:17: 184:22
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:184:22: 184:22
    }

    bb10 (cleanup): {
        drop(_16) -> bb11;               // scope 0 at cita-chain/types/src/receipt.rs:184:21: 184:22
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:184:17: 184:22
    }
}

fn receipt::<impl at cita-chain/types/src/receipt.rs:199:1: 199:38>::into(_1: RichReceipt) -> jsonrpc_types::rpc_types::Receipt {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/receipt.rs:200:13: 200:17
    let mut _0: jsonrpc_types::rpc_types::Receipt; // return place in scope 0 at cita-chain/types/src/receipt.rs:200:22: 200:32
    let mut _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:202:31: 202:58
    let mut _3: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:202:36: 202:57
    let mut _4: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:203:32: 203:67
    let mut _5: cita_types::U256;        // in scope 0 at cita-chain/types/src/receipt.rs:203:37: 203:66
    let mut _6: usize;                   // in scope 0 at cita-chain/types/src/receipt.rs:203:37: 203:59
    let mut _7: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:204:25: 204:46
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/types/src/receipt.rs:204:30: 204:45
    let mut _9: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:205:27: 205:57
    let mut _10: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:205:32: 205:56
    let mut _11: u64;                    // in scope 0 at cita-chain/types/src/receipt.rs:205:32: 205:49
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:206:36: 206:62
    let mut _13: std::option::Option<cita_types::U256>; // in scope 0 at cita-chain/types/src/receipt.rs:207:25: 207:46
    let mut _14: cita_types::U256;       // in scope 0 at cita-chain/types/src/receipt.rs:207:30: 207:45
    let mut _15: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/receipt.rs:208:31: 208:68
    let mut _16: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/types/src/receipt.rs:208:31: 208:52
    let mut _17: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:66
    let mut _18: std::iter::Map<std::vec::IntoIter<log::LocalizedLog>, fn(log::LocalizedLog) -> jsonrpc_types::rpc_types::Log {<log::LocalizedLog as std::convert::Into<jsonrpc_types::rpc_types::Log>>::into}>; // in scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:56
    let mut _19: std::vec::IntoIter<log::LocalizedLog>; // in scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:40
    let mut _20: std::vec::Vec<log::LocalizedLog>; // in scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:28
    let mut _21: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:210:25: 210:56
    let mut _22: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/types/src/receipt.rs:210:25: 210:40
    let mut _23: cita_types::Bloom;      // in scope 0 at cita-chain/types/src/receipt.rs:211:25: 211:39
    let mut _24: std::option::Option<std::string::String>; // in scope 0 at cita-chain/types/src/receipt.rs:212:28: 212:69
    let mut _25: std::option::Option<errors::receipt::ReceiptError>; // in scope 0 at cita-chain/types/src/receipt.rs:212:28: 212:38
    let mut _26: bool;                   // in scope 0 at cita-chain/types/src/receipt.rs:214:5: 214:6

    bb0: {
        _26 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:202:31: 202:58
        _26 = const true;                // scope 0 at cita-chain/types/src/receipt.rs:202:31: 202:58
        _3 = (_1.0: cita_types::H256);   // scope 0 at cita-chain/types/src/receipt.rs:202:36: 202:57
        _2 = std::option::Option::<H256>::Some(move _3); // scope 0 at cita-chain/types/src/receipt.rs:202:31: 202:58
        _6 = (_1.1: usize);              // scope 0 at cita-chain/types/src/receipt.rs:203:37: 203:59
        _5 = <usize as Into<U256>>::into(move _6) -> [return: bb1, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:203:37: 203:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:203:60: 203:64
                                         // + literal: Const { ty: fn(usize) -> U256 {<usize as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = std::option::Option::<U256>::Some(move _5); // scope 0 at cita-chain/types/src/receipt.rs:203:32: 203:67
        _8 = (_1.2: cita_types::H256);   // scope 0 at cita-chain/types/src/receipt.rs:204:30: 204:45
        _7 = std::option::Option::<H256>::Some(move _8); // scope 0 at cita-chain/types/src/receipt.rs:204:25: 204:46
        _11 = (_1.3: u64);               // scope 0 at cita-chain/types/src/receipt.rs:205:32: 205:49
        _10 = <u64 as Into<U256>>::into(move _11) -> [return: bb2, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:205:32: 205:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:205:50: 205:54
                                         // + literal: Const { ty: fn(u64) -> U256 {<u64 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = std::option::Option::<U256>::Some(move _10); // scope 0 at cita-chain/types/src/receipt.rs:205:27: 205:57
        _12 = (_1.4: cita_types::U256);  // scope 0 at cita-chain/types/src/receipt.rs:206:36: 206:62
        _14 = (_1.5: cita_types::U256);  // scope 0 at cita-chain/types/src/receipt.rs:207:30: 207:45
        _13 = std::option::Option::<U256>::Some(move _14); // scope 0 at cita-chain/types/src/receipt.rs:207:25: 207:46
        _16 = (_1.6: std::option::Option<cita_types::H160>); // scope 0 at cita-chain/types/src/receipt.rs:208:31: 208:52
        _15 = std::option::Option::<H160>::map::<H160, fn(H160) -> H160 {<H160 as Into<H160>>::into}>(move _16, <H160 as Into<H160>>::into) -> [return: bb3, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:208:31: 208:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:208:53: 208:56
                                         // + literal: Const { ty: fn(std::option::Option<H160>, fn(H160) -> H160 {<H160 as Into<H160>>::into}) -> std::option::Option<H160> {std::option::Option::<H160>::map::<H160, fn(H160) -> H160 {<H160 as Into<H160>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:208:57: 208:67
                                         // + literal: Const { ty: fn(H160) -> H160 {<H160 as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _26 = const false;               // scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:28
        _20 = move (_1.7: std::vec::Vec<log::LocalizedLog>); // scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:28
        _19 = <Vec<LocalizedLog> as IntoIterator>::into_iter(move _20) -> [return: bb4, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:209:29: 209:38
                                         // + literal: Const { ty: fn(Vec<LocalizedLog>) -> <Vec<LocalizedLog> as IntoIterator>::IntoIter {<Vec<LocalizedLog> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = <std::vec::IntoIter<LocalizedLog> as Iterator>::map::<jsonrpc_types::rpc_types::Log, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>(move _19, <LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into) -> [return: bb5, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:209:41: 209:44
                                         // + literal: Const { ty: fn(std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}) -> std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> {<std::vec::IntoIter<LocalizedLog> as Iterator>::map::<jsonrpc_types::rpc_types::Log, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:209:45: 209:55
                                         // + literal: Const { ty: fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = <std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> as Iterator>::collect::<Vec<jsonrpc_types::rpc_types::Log>>(move _18) -> [return: bb6, unwind: bb12]; // scope 0 at cita-chain/types/src/receipt.rs:209:19: 209:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:209:57: 209:64
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>) -> Vec<jsonrpc_types::rpc_types::Log> {<std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> as Iterator>::collect::<Vec<jsonrpc_types::rpc_types::Log>>}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = (_1.9: std::option::Option<cita_types::H256>); // scope 0 at cita-chain/types/src/receipt.rs:210:25: 210:40
        _21 = std::option::Option::<H256>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>(move _22, <H256 as Into<H256>>::into) -> [return: bb7, unwind: bb9]; // scope 0 at cita-chain/types/src/receipt.rs:210:25: 210:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:210:41: 210:44
                                         // + literal: Const { ty: fn(std::option::Option<H256>, fn(H256) -> H256 {<H256 as Into<H256>>::into}) -> std::option::Option<H256> {std::option::Option::<H256>::map::<H256, fn(H256) -> H256 {<H256 as Into<H256>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:210:45: 210:55
                                         // + literal: Const { ty: fn(H256) -> H256 {<H256 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = (_1.8: cita_types::Bloom); // scope 0 at cita-chain/types/src/receipt.rs:211:25: 211:39
        _25 = (_1.10: std::option::Option<errors::receipt::ReceiptError>); // scope 0 at cita-chain/types/src/receipt.rs:212:28: 212:38
        _24 = std::option::Option::<errors::receipt::ReceiptError>::map::<std::string::String, fn(errors::receipt::ReceiptError) -> std::string::String {errors::receipt::ReceiptError::description}>(move _25, errors::receipt::ReceiptError::description) -> [return: bb8, unwind: bb9]; // scope 0 at cita-chain/types/src/receipt.rs:212:28: 212:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:212:39: 212:42
                                         // + literal: Const { ty: fn(std::option::Option<errors::receipt::ReceiptError>, fn(errors::receipt::ReceiptError) -> std::string::String {errors::receipt::ReceiptError::description}) -> std::option::Option<std::string::String> {std::option::Option::<errors::receipt::ReceiptError>::map::<std::string::String, fn(errors::receipt::ReceiptError) -> std::string::String {errors::receipt::ReceiptError::description}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/receipt.rs:212:43: 212:68
                                         // + literal: Const { ty: fn(errors::receipt::ReceiptError) -> std::string::String {errors::receipt::ReceiptError::description}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = jsonrpc_types::rpc_types::Receipt { transaction_hash: move _2, transaction_index: move _4, block_hash: move _7, block_number: move _9, cumulative_quota_used: move _12, quota_used: move _13, contract_address: move _15, logs: move _17, state_root: move _21, logs_bloom: move _23, error_message: move _24 }; // scope 0 at cita-chain/types/src/receipt.rs:201:9: 213:10
        return;                          // scope 0 at cita-chain/types/src/receipt.rs:214:6: 214:6
    }

    bb9 (cleanup): {
        drop(_17) -> bb12;               // scope 0 at cita-chain/types/src/receipt.rs:213:9: 213:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/receipt.rs:200:5: 214:6
    }

    bb11 (cleanup): {
        drop((_1.7: std::vec::Vec<log::LocalizedLog>)) -> bb10; // scope 0 at cita-chain/types/src/receipt.rs:214:5: 214:6
    }

    bb12 (cleanup): {
        switchInt(_26) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/receipt.rs:214:5: 214:6
    }
}

const ECRECOVER_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:71:30: 71:34

    bb0: {
        _0 = const "0000000000000000000000000000000000000001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:71:37: 71:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:71:37: 71:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:71:1: 71:80
    }
}

const SHA256_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:72:27: 72:31

    bb0: {
        _0 = const "0000000000000000000000000000000000000002"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:72:34: 72:76
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:72:34: 72:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:72:1: 72:77
    }
}

const RIPEMD160_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:73:30: 73:34

    bb0: {
        _0 = const "0000000000000000000000000000000000000003"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:73:37: 73:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:73:37: 73:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:73:1: 73:80
    }
}

const IDENTITY_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:74:29: 74:33

    bb0: {
        _0 = const "0000000000000000000000000000000000000004"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:74:36: 74:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:74:36: 74:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:74:1: 74:79
    }
}

const EDRECOVER_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:77:30: 77:34

    bb0: {
        _0 = const "0000000000000000000000000000000000ff0001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:77:37: 77:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:77:37: 77:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:77:1: 77:80
    }
}

const STORE_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:80:26: 80:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff010000"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:80:33: 80:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:80:33: 80:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:80:1: 80:76
    }
}

const ABI_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:81:24: 81:28

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff010001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:81:31: 81:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:81:31: 81:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:81:1: 81:74
    }
}

const AMEND_ADDRESS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:82:26: 82:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff010002"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:82:33: 82:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:82:33: 82:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:82:1: 82:76
    }
}

const SYS_CONFIG: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:84:23: 84:27

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020000"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:84:30: 84:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:84:30: 84:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:84:1: 84:73
    }
}

const NODE_MANAGER: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:85:25: 85:29

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:85:32: 85:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:85:32: 85:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:85:1: 85:75
    }
}

const CHAIN_MANAGER: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:86:26: 86:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020002"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:86:33: 86:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:86:33: 86:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:86:1: 86:76
    }
}

const QUOTA_MANAGER: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:87:26: 87:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020003"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:87:33: 87:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:87:33: 87:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:87:1: 87:76
    }
}

const PERMISSION_MANAGEMENT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:88:34: 88:38

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020004"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:88:41: 88:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:88:41: 88:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:88:1: 88:84
    }
}

const PERMISSION_CREATOR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:89:31: 89:35

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020005"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:89:38: 89:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:89:38: 89:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:89:1: 89:81
    }
}

const AUTHORIZATION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:90:26: 90:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020006"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:90:33: 90:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:90:33: 90:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:90:1: 90:76
    }
}

const ROLE_MANAGEMENT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:91:28: 91:32

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020007"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:91:35: 91:77
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:91:35: 91:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:91:1: 91:78
    }
}

const ROLE_CREATOR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:92:25: 92:29

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020008"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:92:32: 92:74
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:92:32: 92:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:92:1: 92:75
    }
}

const GROUP: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:93:18: 93:22

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020009"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:93:25: 93:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:93:25: 93:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:93:1: 93:68
    }
}

const GROUP_MANAGEMENT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:94:29: 94:33

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000a"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:94:36: 94:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:94:36: 94:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:94:1: 94:79
    }
}

const GROUP_CREATOR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:95:26: 95:30

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000b"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:95:33: 95:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:95:33: 95:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:95:1: 95:76
    }
}

const ADMIN: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:96:18: 96:22

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000c"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:96:25: 96:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:96:25: 96:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:96:1: 96:68
    }
}

const ROLE_AUTH: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:97:22: 97:26

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000d"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:97:29: 97:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:97:29: 97:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:97:1: 97:72
    }
}

const BATCH_TX: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:98:21: 98:25

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000e"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:98:28: 98:70
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:98:28: 98:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:98:1: 98:71
    }
}

const EMERGENCY_INTERVENTION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:99:35: 99:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02000f"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:99:42: 99:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:99:42: 99:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:99:1: 99:85
    }
}

const PRICE_MANAGEMENT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:100:29: 100:33

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020010"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:100:36: 100:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:100:36: 100:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:100:1: 100:79
    }
}

const VERSION_MANAGEMENT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:101:31: 101:35

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020011"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:101:38: 101:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:101:38: 101:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:101:1: 101:81
    }
}

const ALL_GROUPS: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:102:23: 102:27

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020012"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:102:30: 102:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:102:30: 102:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:102:1: 102:73
    }
}

const AUTO_EXEC: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:103:22: 103:26

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff020013"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:103:29: 103:71
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:103:29: 103:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:103:1: 103:72
    }
}

const PERMISSION_SEND_TX: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:105:31: 105:35

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021000"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:105:38: 105:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:105:38: 105:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:105:1: 105:81
    }
}

const PERMISSION_CREATE_CONTRACT: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:106:39: 106:43

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:106:46: 106:88
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:106:46: 106:88
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:106:1: 106:89
    }
}

const PERMISSION_NEW_PERMISSION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:107:38: 107:42

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021010"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:107:45: 107:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:107:45: 107:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:107:1: 107:88
    }
}

const PERMISSION_DELETE_PERMISSION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:108:41: 108:45

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021011"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:108:48: 108:90
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:108:48: 108:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:108:1: 108:91
    }
}

const PERMISSION_UPDATE_PERMISSION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:109:41: 109:45

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021012"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:109:48: 109:90
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:109:48: 109:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:109:1: 109:91
    }
}

const PERMISSION_SET_AUTH: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:110:32: 110:36

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021013"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:110:39: 110:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:110:39: 110:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:110:1: 110:82
    }
}

const PERMISSION_CANCEL_AUTH: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:111:35: 111:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021014"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:111:42: 111:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:111:42: 111:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:111:1: 111:85
    }
}

const PERMISSION_NEW_ROLE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:112:32: 112:36

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021015"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:112:39: 112:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:112:39: 112:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:112:1: 112:82
    }
}

const PERMISSION_DELETE_ROLE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:113:35: 113:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021016"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:113:42: 113:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:113:42: 113:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:113:1: 113:85
    }
}

const PERMISSION_UPDATE_ROLE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:114:35: 114:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021017"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:114:42: 114:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:114:42: 114:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:114:1: 114:85
    }
}

const PERMISSION_SET_ROLE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:115:32: 115:36

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021018"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:115:39: 115:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:115:39: 115:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:115:1: 115:82
    }
}

const PERMISSION_CANCEL_ROLE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:116:35: 116:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021019"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:116:42: 116:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:116:42: 116:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:116:1: 116:85
    }
}

const PERMISSION_NEW_GROUP: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:117:33: 117:37

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02101a"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:117:40: 117:82
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:117:40: 117:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:117:1: 117:83
    }
}

const PERMISSION_DELETE_GROUP: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:118:36: 118:40

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02101b"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:118:43: 118:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:118:43: 118:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:118:1: 118:86
    }
}

const PERMISSION_UPDATE_GROUP: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:119:36: 119:40

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff02101c"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:119:43: 119:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:119:43: 119:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:119:1: 119:86
    }
}

const PERMISSION_NEW_NODE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:120:32: 120:36

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021020"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:120:39: 120:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:120:39: 120:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:120:1: 120:82
    }
}

const PERMISSION_DELETE_NODE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:121:35: 121:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021021"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:121:42: 121:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:121:42: 121:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:121:1: 121:85
    }
}

const PERMISSION_UPDATE_NODE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:122:35: 122:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021022"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:122:42: 122:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:122:42: 122:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:122:1: 122:85
    }
}

const PERMISSION_ACCOUNT_QUOTA: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:123:37: 123:41

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021023"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:123:44: 123:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:123:44: 123:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:123:1: 123:87
    }
}

const PERMISSION_BLOCK_QUOTA: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:124:35: 124:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021024"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:124:42: 124:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:124:42: 124:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:124:1: 124:85
    }
}

const PERMISSION_BATCH_TX: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:125:32: 125:36

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021025"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:125:39: 125:81
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:125:39: 125:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:125:1: 125:82
    }
}

const PERMISSION_EMERGENCY_INTERVENTION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:126:46: 126:50

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021026"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:126:53: 126:95
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:126:53: 126:95
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:126:1: 126:96
    }
}

const PERMISSION_QUOTA_PRICE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:127:35: 127:39

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021027"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:127:42: 127:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:127:42: 127:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:127:1: 127:85
    }
}

const PERMISSION_VERSION: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:128:31: 128:35

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff021028"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:128:38: 128:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:128:38: 128:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:128:1: 128:81
    }
}

const NATIVE_SIMPLE_STORAGE: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:131:34: 131:38

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff030000"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:131:41: 131:83
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:131:41: 131:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:131:1: 131:84
    }
}

const NATIVE_ZK_PRIVACY: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:132:30: 132:34

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff030001"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:132:37: 132:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:132:37: 132:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:132:1: 132:80
    }
}

const NATIVE_CROSS_CHAIN_VERIFY: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-chain/types/src/reserved_addresses.rs:133:38: 133:42

    bb0: {
        _0 = const "ffffffffffffffffffffffffffffffffff030002"; // scope 0 at cita-chain/types/src/reserved_addresses.rs:133:45: 133:87
                                         // mir::Constant
                                         // + span: cita-chain/types/src/reserved_addresses.rs:133:45: 133:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-chain/types/src/reserved_addresses.rs:133:1: 133:88
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:5:10: 5:17>::default() -> state_proof::StateProof {
    let mut _0: state_proof::StateProof; // return place in scope 0 at cita-chain/types/src/state_proof.rs:5:10: 5:17
    let mut _1: cita_types::H160;        // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let mut _2: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let mut _3: cita_types::H256;        // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let mut _4: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28

    bb0: {
        _1 = <H160 as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Vec<Vec<u8>> as Default>::default() -> bb2; // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // + literal: Const { ty: fn() -> Vec<Vec<u8>> {<Vec<Vec<u8>> as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <H256 as Default>::default() -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <Vec<Vec<u8>> as Default>::default() -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // + literal: Const { ty: fn() -> Vec<Vec<u8>> {<Vec<Vec<u8>> as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = state_proof::StateProof { address: move _1, account_proof: move _2, key: move _3, value_proof: move _4 }; // scope 0 at cita-chain/types/src/state_proof.rs:5:10: 5:17
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:5:17: 5:17
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-chain/types/src/state_proof.rs:5:16: 5:17
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/state_proof.rs:5:10: 5:17
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:5:19: 5:24>::fmt(_1: &state_proof::StateProof, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let _6: &cita_types::H160;           // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let _7: &str;                        // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let _9: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let _10: &str;                       // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let _12: &cita_types::H256;          // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let _13: &str;                       // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
    let _15: &&std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
    let _16: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28

    bb0: {
        _3 = const "StateProof";         // scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:5:19: 5:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "address";            // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
        _7 = const "account_proof";      // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
        _10 = const "key";               // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
        _13 = const "value_proof";       // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &((*_1).3: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
        _15 = &_16;                      // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:5:19: 5:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:5:19: 5:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field4_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:5:24: 5:24
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:5:26: 5:31>::clone(_1: &state_proof::StateProof) -> state_proof::StateProof {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:5:26: 5:31
    let mut _0: state_proof::StateProof; // return place in scope 0 at cita-chain/types/src/state_proof.rs:5:26: 5:31
    let mut _2: cita_types::H160;        // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let _3: &cita_types::H160;           // in scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
    let mut _4: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let _5: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let _7: &cita_types::H256;           // in scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
    let mut _8: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
    let _9: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28

    bb0: {
        _3 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
        _2 = <H160 as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:7:5: 7:21
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
        _4 = <Vec<Vec<u8>> as Clone>::clone(_5) -> bb2; // scope 0 at cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:8:5: 8:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<u8>>) -> Vec<Vec<u8>> {<Vec<Vec<u8>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
        _6 = <H256 as Clone>::clone(_7) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:9:5: 9:14
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
        _8 = <Vec<Vec<u8>> as Clone>::clone(_9) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:10:5: 10:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<u8>>) -> Vec<Vec<u8>> {<Vec<Vec<u8>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = state_proof::StateProof { address: move _2, account_proof: move _4, key: move _6, value_proof: move _8 }; // scope 0 at cita-chain/types/src/state_proof.rs:5:26: 5:31
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:5:31: 5:31
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at cita-chain/types/src/state_proof.rs:5:30: 5:31
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/state_proof.rs:5:26: 5:31
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:13:1: 13:30>::rlp_append(_1: &state_proof::StateProof, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:14:19: 14:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/state_proof.rs:14:26: 14:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/state_proof.rs:14:45: 14:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/state_proof.rs:15:9: 15:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/state_proof.rs:16:9: 16:32
    let _5: &cita_types::H160;           // in scope 0 at cita-chain/types/src/state_proof.rs:16:18: 16:31
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/state_proof.rs:17:9: 17:59
    let mut _7: &[std::vec::Vec<u8>];    // in scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
    let _8: &[std::vec::Vec<u8>];        // in scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
    let _9: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/state_proof.rs:18:9: 18:28
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/types/src/state_proof.rs:18:18: 18:27
    let _12: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/state_proof.rs:19:9: 19:57
    let mut _13: &[std::vec::Vec<u8>];   // in scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56
    let _14: &[std::vec::Vec<u8>];       // in scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56
    let _15: &std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 4_usize) -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:15:9: 15:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:15:11: 15:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/state_proof.rs:16:18: 16:31
        _4 = rlp::RlpStream::append::<H160>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/state_proof.rs:16:9: 16:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:16:11: 16:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H160>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).1: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
        _8 = <Vec<Vec<u8>> as Deref>::deref(_9) -> bb3; // scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:17:39: 17:58
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<u8>>) -> &'a <Vec<Vec<u8>> as Deref>::Target {<Vec<Vec<u8>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 0 at cita-chain/types/src/state_proof.rs:17:39: 17:58
        _6 = rlp::RlpStream::append_list::<Vec<u8>, Vec<u8>>(_2, move _7) -> bb4; // scope 0 at cita-chain/types/src/state_proof.rs:17:9: 17:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:17:11: 17:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [Vec<u8>]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<Vec<u8>, Vec<u8>>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/state_proof.rs:18:18: 18:27
        _10 = rlp::RlpStream::append::<H256>(_2, _11) -> bb5; // scope 0 at cita-chain/types/src/state_proof.rs:18:9: 18:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:18:11: 18:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = &((*_1).3: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56
        _14 = <Vec<Vec<u8>> as Deref>::deref(_15) -> bb6; // scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:19:39: 19:56
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<u8>>) -> &'a <Vec<Vec<u8>> as Deref>::Target {<Vec<Vec<u8>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _14;                       // scope 0 at cita-chain/types/src/state_proof.rs:19:39: 19:56
        _12 = rlp::RlpStream::append_list::<Vec<u8>, Vec<u8>>(_2, move _13) -> bb7; // scope 0 at cita-chain/types/src/state_proof.rs:19:9: 19:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:19:11: 19:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b [Vec<u8>]) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_list::<Vec<u8>, Vec<u8>>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:20:6: 20:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:23:1: 23:30>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<state_proof::StateProof, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/state_proof.rs:24:15: 24:18
    let mut _0: std::result::Result<state_proof::StateProof, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/state_proof.rs:24:38: 24:64
    let mut _2: state_proof::StateProof; // in scope 0 at cita-chain/types/src/state_proof.rs:25:12: 30:10
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H160>; // in scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
    let mut _4: std::result::Result<cita_types::H160, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:35
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/state_proof.rs:26:35: 26:36
    let _6: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:26:35: 26:36
    let _7: cita_types::H160;            // in scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
    let mut _8: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<std::vec::Vec<u8>>>; // in scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
    let mut _10: std::result::Result<std::vec::Vec<std::vec::Vec<u8>>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:42
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/state_proof.rs:27:42: 27:43
    let _12: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:27:42: 27:43
    let _13: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
    let mut _15: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:31
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/state_proof.rs:28:31: 28:32
    let _17: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:28:31: 28:32
    let _18: cita_types::H256;           // in scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<std::vec::Vec<u8>>>; // in scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
    let mut _20: std::result::Result<std::vec::Vec<std::vec::Vec<u8>>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:40
    let mut _21: isize;                  // in scope 0 at cita-chain/types/src/state_proof.rs:29:40: 29:41
    let _22: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/state_proof.rs:29:40: 29:41
    let _23: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
    scope 1 {
        debug residual => _6;            // in scope 1 at cita-chain/types/src/state_proof.rs:26:35: 26:36
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;                 // in scope 3 at cita-chain/types/src/state_proof.rs:26:22: 26:36
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;           // in scope 5 at cita-chain/types/src/state_proof.rs:27:42: 27:43
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;                // in scope 7 at cita-chain/types/src/state_proof.rs:27:28: 27:43
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;           // in scope 9 at cita-chain/types/src/state_proof.rs:28:31: 28:32
        scope 10 {
        }
    }
    scope 11 {
        debug val => _18;                // in scope 11 at cita-chain/types/src/state_proof.rs:28:18: 28:32
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;           // in scope 13 at cita-chain/types/src/state_proof.rs:29:40: 29:41
        scope 14 {
        }
    }
    scope 15 {
        debug val => _23;                // in scope 15 at cita-chain/types/src/state_proof.rs:29:26: 29:41
        scope 16 {
        }
    }

    bb0: {
        _4 = rlp::UntrustedRlp::<'_>::val_at::<H160>(_1, const 0_usize) -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:26:26: 26:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H160, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H160>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<H160, rlp::DecoderError> as Try>::branch(move _4) -> bb2; // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:26:22: 26:36
                                         // + literal: Const { ty: fn(Result<H160, rlp::DecoderError>) -> ControlFlow<<Result<H160, rlp::DecoderError> as Try>::Residual, <Result<H160, rlp::DecoderError> as Try>::Output> {<Result<H160, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
    }

    bb3: {
        _7 = ((_3 as Continue).0: cita_types::H160); // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
        _10 = rlp::UntrustedRlp::<'_>::list_at::<Vec<u8>>(_1, const 1_usize) -> bb6; // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:27:32: 27:39
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<Vec<u8>>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::list_at::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/state_proof.rs:26:22: 26:36
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/state_proof.rs:26:35: 26:36
        _0 = <Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _6) -> bb23; // scope 2 at cita-chain/types/src/state_proof.rs:26:22: 26:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:26:35: 26:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<state_proof::StateProof, rlp::DecoderError> {<Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = <Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::branch(move _10) -> bb7; // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:27:28: 27:43
                                         // + literal: Const { ty: fn(Result<Vec<Vec<u8>>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::Residual, <Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::Output> {<Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = discriminant(_9);          // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
        switchInt(move _11) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
    }

    bb8: {
        _13 = move ((_9 as Continue).0: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
        _8 = move _13;                   // scope 8 at cita-chain/types/src/state_proof.rs:27:28: 27:43
        _15 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 2_usize) -> [return: bb11, unwind: bb25]; // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:28:22: 28:28
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 0 at cita-chain/types/src/state_proof.rs:27:28: 27:43
    }

    bb10: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/state_proof.rs:27:42: 27:43
        _0 = <Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _12) -> bb23; // scope 6 at cita-chain/types/src/state_proof.rs:27:28: 27:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:27:42: 27:43
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<state_proof::StateProof, rlp::DecoderError> {<Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = <Result<H256, rlp::DecoderError> as Try>::branch(move _15) -> [return: bb12, unwind: bb25]; // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:28:18: 28:32
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb12: {
        _16 = discriminant(_14);         // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
        switchInt(move _16) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
    }

    bb13: {
        _18 = ((_14 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
        _20 = rlp::UntrustedRlp::<'_>::list_at::<Vec<u8>>(_1, const 3_usize) -> [return: bb17, unwind: bb25]; // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:29:30: 29:37
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<Vec<u8>>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::list_at::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 0 at cita-chain/types/src/state_proof.rs:28:18: 28:32
    }

    bb15: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/state_proof.rs:28:31: 28:32
        _0 = <Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _17) -> [return: bb16, unwind: bb25]; // scope 10 at cita-chain/types/src/state_proof.rs:28:18: 28:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:28:31: 28:32
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<state_proof::StateProof, rlp::DecoderError> {<Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_8) -> bb23;                // scope 0 at cita-chain/types/src/state_proof.rs:30:9: 30:10
    }

    bb17: {
        _19 = <Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::branch(move _20) -> [return: bb18, unwind: bb25]; // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:29:26: 29:41
                                         // + literal: Const { ty: fn(Result<Vec<Vec<u8>>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::Residual, <Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::Output> {<Result<Vec<Vec<u8>>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb18: {
        _21 = discriminant(_19);         // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
        switchInt(move _21) -> [0: bb19, 1: bb21, otherwise: bb20]; // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
    }

    bb19: {
        _23 = move ((_19 as Continue).0: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
        _2 = state_proof::StateProof { address: _7, account_proof: move _8, key: _18, value_proof: move _23 }; // scope 0 at cita-chain/types/src/state_proof.rs:25:12: 30:10
        _0 = Result::<state_proof::StateProof, rlp::DecoderError>::Ok(move _2); // scope 0 at cita-chain/types/src/state_proof.rs:25:9: 30:11
        goto -> bb23;                    // scope 0 at cita-chain/types/src/state_proof.rs:31:6: 31:6
    }

    bb20: {
        unreachable;                     // scope 0 at cita-chain/types/src/state_proof.rs:29:26: 29:41
    }

    bb21: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/state_proof.rs:29:40: 29:41
        _0 = <Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _22) -> [return: bb22, unwind: bb24]; // scope 14 at cita-chain/types/src/state_proof.rs:29:26: 29:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:29:40: 29:41
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<state_proof::StateProof, rlp::DecoderError> {<Result<state_proof::StateProof, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_8) -> bb23;                // scope 0 at cita-chain/types/src/state_proof.rs:30:9: 30:10
    }

    bb23: {
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:31:6: 31:6
    }

    bb24 (cleanup): {
        drop(_8) -> bb26;                // scope 0 at cita-chain/types/src/state_proof.rs:30:9: 30:10
    }

    bb25 (cleanup): {
        drop(_8) -> bb26;                // scope 0 at cita-chain/types/src/state_proof.rs:30:9: 30:10
    }

    bb26 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/state_proof.rs:24:5: 31:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:34:1: 34:16>::from_bytes(_1: &[u8]) -> state_proof::StateProof {
    debug bytes => _1;                   // in scope 0 at cita-chain/types/src/state_proof.rs:35:23: 35:28
    let mut _0: state_proof::StateProof; // return place in scope 0 at cita-chain/types/src/state_proof.rs:35:40: 35:44

    bb0: {
        _0 = rlp::decode::<state_proof::StateProof>(_1) -> bb1; // scope 0 at cita-chain/types/src/state_proof.rs:36:9: 36:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/state_proof.rs:36:9: 36:20
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> state_proof::StateProof {rlp::decode::<state_proof::StateProof>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:37:6: 37:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:34:1: 34:16>::verify(_1: &state_proof::StateProof, _2: H256) -> std::option::Option<H256> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:40:19: 40:24
    debug _state_root => _2;             // in scope 0 at cita-chain/types/src/state_proof.rs:40:26: 40:37
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at cita-chain/types/src/state_proof.rs:40:48: 40:60

    bb0: {
        _0 = std::option::Option::<H256>::None; // scope 0 at cita-chain/types/src/state_proof.rs:55:9: 55:13
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:56:6: 56:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:34:1: 34:16>::address(_1: &state_proof::StateProof) -> &H160 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:58:20: 58:25
    let mut _0: &cita_types::H160;       // return place in scope 0 at cita-chain/types/src/state_proof.rs:59:9: 59:22

    bb0: {
        _0 = &((*_1).0: cita_types::H160); // scope 0 at cita-chain/types/src/state_proof.rs:59:9: 59:22
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:60:6: 60:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:34:1: 34:16>::account_proof(_1: &state_proof::StateProof) -> &Vec<Vec<u8>> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:62:26: 62:31
    let mut _0: &std::vec::Vec<std::vec::Vec<u8>>; // return place in scope 0 at cita-chain/types/src/state_proof.rs:63:9: 63:28

    bb0: {
        _0 = &((*_1).1: std::vec::Vec<std::vec::Vec<u8>>); // scope 0 at cita-chain/types/src/state_proof.rs:63:9: 63:28
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:64:6: 64:6
    }
}

fn state_proof::<impl at cita-chain/types/src/state_proof.rs:34:1: 34:16>::key(_1: &state_proof::StateProof) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/state_proof.rs:66:16: 66:21
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/types/src/state_proof.rs:67:9: 67:18

    bb0: {
        _0 = &((*_1).2: cita_types::H256); // scope 0 at cita-chain/types/src/state_proof.rs:67:9: 67:18
        return;                          // scope 0 at cita-chain/types/src/state_proof.rs:68:6: 68:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:31:10: 31:15>::fmt(_1: &transaction::Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let _6: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    let _8: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    }

    bb1: {
        _8 = const "InvalidPubKey";      // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _8;                         // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:14: 31:15
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
    }

    bb3: {
        _5 = const "ParseError";         // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:14: 31:15
    }

    bb4: {
        _6 = const "InvalidHash";        // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:14: 31:15
    }

    bb5: {
        _7 = const "InvalidSignature";   // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _7;                         // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:14: 31:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:31:10: 31:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:31:15: 31:15
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:31:17: 31:26>::eq(_1: &transaction::Error, _2: &transaction::Error) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:31:17: 31:26
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:31:17: 31:26
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:31:17: 31:26
    let _3: isize;                       // in scope 0 at cita-chain/types/src/transaction.rs:31:17: 31:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/transaction.rs:31:17: 31:26
        let _4: isize;                   // in scope 1 at cita-chain/types/src/transaction.rs:31:17: 31:26
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/transaction.rs:31:17: 31:26
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:31:17: 31:26
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/transaction.rs:31:17: 31:26
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/transaction.rs:31:17: 31:26
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:31:26: 31:26
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:31:28: 31:33>::clone(_1: &transaction::Error) -> transaction::Error {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    let mut _0: transaction::Error;      // return place in scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb1: {
        _0 = const transaction::Error::InvalidPubKey; // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x03)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb3: {
        _0 = const transaction::Error::ParseError; // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x00)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb4: {
        _0 = const transaction::Error::InvalidHash; // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x01)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb5: {
        _0 = const transaction::Error::InvalidSignature; // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x02)) }
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:31:28: 31:33
    }

    bb6: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:31:33: 31:33
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:39:10: 39:15>::fmt(_1: &Action, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let mut _3: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let _6: &cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
    let _9: &&cita_types::H160;          // in scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
    let _10: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    let _11: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at cita-chain/types/src/transaction.rs:48:10: 48:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    }

    bb1: {
        _11 = const "AmendData";         // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _11) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
    }

    bb3: {
        _4 = const "Store";              // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _4) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = const "Create";             // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _5) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = &(((*_1) as Call).0: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _7 = const "Call";               // scope 1 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &_6;                        // scope 1 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _7, move _8) -> bb7; // scope 1 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = const "AbiStore";          // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _10) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:39:10: 39:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:39:15: 39:15
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:39:17: 39:22>::clone(_1: &Action) -> Action {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    let mut _0: transaction::Action;     // return place in scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    let _3: &cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
    let mut _4: cita_types::H160;        // in scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at cita-chain/types/src/transaction.rs:48:10: 48:17
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb7, 4: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb1: {
        _0 = Action::AmendData;          // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
        goto -> bb8;                     // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb3: {
        _0 = Action::Store;              // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
        goto -> bb8;                     // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb4: {
        _0 = Action::Create;             // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
        goto -> bb8;                     // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb5: {
        _3 = &(((*_1) as Call).0: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _4 = <H160 as Clone>::clone(_3) -> bb6; // scope 1 at cita-chain/types/src/transaction.rs:48:10: 48:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:48:10: 48:17
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Action::Call(move _4);      // scope 1 at cita-chain/types/src/transaction.rs:39:17: 39:22
        goto -> bb8;                     // scope 0 at cita-chain/types/src/transaction.rs:39:21: 39:22
    }

    bb7: {
        _0 = Action::AbiStore;           // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
        goto -> bb8;                     // scope 0 at cita-chain/types/src/transaction.rs:39:17: 39:22
    }

    bb8: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:39:22: 39:22
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:39:24: 39:33>::eq(_1: &Action, _2: &Action) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let _3: isize;                       // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _7: (&transaction::Action, &transaction::Action); // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _8: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _9: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _12: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _13: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _14: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    let mut _15: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/transaction.rs:39:24: 39:33
        let _4: isize;                   // in scope 1 at cita-chain/types/src/transaction.rs:39:24: 39:33
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
            let _10: &cita_types::H160;  // in scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
            let _11: &cita_types::H160;  // in scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
            scope 3 {
                debug __self_0 => _10;   // in scope 3 at cita-chain/types/src/transaction.rs:48:10: 48:17
                debug __arg1_0 => _11;   // in scope 3 at cita-chain/types/src/transaction.rs:48:10: 48:17
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:39:24: 39:33
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/transaction.rs:39:24: 39:33
        _5 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }

    bb1: {
        _0 = const false;                // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        goto -> bb3;                     // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }

    bb2: {
        _7 = (_1, _2);                   // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        _12 = deref_copy (_7.0: &transaction::Action); // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        _9 = discriminant((*_12));       // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        switchInt(move _9) -> [2: bb5, otherwise: bb4]; // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:39:33: 39:33
    }

    bb4: {
        _6 = const true;                 // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        goto -> bb7;                     // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }

    bb5: {
        _13 = deref_copy (_7.1: &transaction::Action); // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        _8 = discriminant((*_13));       // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        switchInt(move _8) -> [2: bb6, otherwise: bb4]; // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }

    bb6: {
        _14 = deref_copy (_7.0: &transaction::Action); // scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _10 = &(((*_14) as Call).0: cita_types::H160); // scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _15 = deref_copy (_7.1: &transaction::Action); // scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _11 = &(((*_15) as Call).0: cita_types::H160); // scope 2 at cita-chain/types/src/transaction.rs:48:10: 48:17
        _6 = <H160 as PartialEq>::eq(_10, _11) -> bb7; // scope 3 at cita-chain/types/src/transaction.rs:48:10: 48:17
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:48:10: 48:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _6;                    // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
        goto -> bb3;                     // scope 2 at cita-chain/types/src/transaction.rs:39:24: 39:33
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:39:35: 39:37>::assert_receiver_is_total_eq(_1: &Action) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:39:35: 39:37
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:39:35: 39:37
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:39:37: 39:37
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:55:1: 55:24>::default() -> Action {
    let mut _0: transaction::Action;     // return place in scope 0 at cita-chain/types/src/transaction.rs:56:21: 56:27

    bb0: {
        _0 = Action::Store;              // scope 0 at cita-chain/types/src/transaction.rs:57:9: 57:22
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:58:6: 58:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:61:1: 61:26>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<Action, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/transaction.rs:62:15: 62:18
    let mut _0: std::result::Result<transaction::Action, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction.rs:62:38: 62:64
    let mut _2: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:63:12: 63:26
    let mut _3: transaction::Action;     // in scope 0 at cita-chain/types/src/transaction.rs:64:16: 64:30
    let _4: cita_types::H160;            // in scope 0 at cita-chain/types/src/transaction.rs:66:17: 66:27
    let _5: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:66:39: 66:52
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:67:37: 67:48
    let _9: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:68:39: 68:52
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H160>; // in scope 0 at cita-chain/types/src/transaction.rs:69:33: 69:46
    let mut _12: std::result::Result<cita_types::H160, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:69:33: 69:45
    let mut _13: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:69:45: 69:46
    let mut _16: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:70:16: 70:34
    let mut _17: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:70:16: 70:20
    let mut _18: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:70:24: 70:34
    let mut _19: transaction::Action;    // in scope 0 at cita-chain/types/src/transaction.rs:71:20: 71:33
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:72:23: 72:39
    let mut _21: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:72:23: 72:27
    let mut _22: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:72:31: 72:39
    let mut _23: transaction::Action;    // in scope 0 at cita-chain/types/src/transaction.rs:73:20: 73:36
    let mut _24: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:74:23: 74:41
    let mut _25: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:74:23: 74:27
    let mut _26: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:74:31: 74:41
    let mut _27: transaction::Action;    // in scope 0 at cita-chain/types/src/transaction.rs:75:20: 75:37
    let mut _28: transaction::Action;    // in scope 0 at cita-chain/types/src/transaction.rs:77:20: 77:38
    scope 1 {
        debug store_addr => _4;          // in scope 1 at cita-chain/types/src/transaction.rs:66:17: 66:27
        let _6: cita_types::H160;        // in scope 1 at cita-chain/types/src/transaction.rs:67:17: 67:25
        scope 2 {
            debug abi_addr => _6;        // in scope 2 at cita-chain/types/src/transaction.rs:67:17: 67:25
            let _8: cita_types::H160;    // in scope 2 at cita-chain/types/src/transaction.rs:68:17: 68:27
            scope 3 {
                debug amend_addr => _8;  // in scope 3 at cita-chain/types/src/transaction.rs:68:17: 68:27
                let _10: cita_types::H160; // in scope 3 at cita-chain/types/src/transaction.rs:69:17: 69:21
                let _14: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 3 at cita-chain/types/src/transaction.rs:69:45: 69:46
                let _15: cita_types::H160; // in scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
                scope 4 {
                    debug addr => _10;   // in scope 4 at cita-chain/types/src/transaction.rs:69:17: 69:21
                }
                scope 5 {
                    debug residual => _14; // in scope 5 at cita-chain/types/src/transaction.rs:69:45: 69:46
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _15;    // in scope 7 at cita-chain/types/src/transaction.rs:69:33: 69:46
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        _2 = rlp::UntrustedRlp::<'_>::is_empty(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:63:12: 63:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:63:16: 63:24
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> bool {rlp::UntrustedRlp::<'_>::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:63:12: 63:26
    }

    bb2: {
        _3 = Action::Create;             // scope 0 at cita-chain/types/src/transaction.rs:64:16: 64:30
        _0 = Result::<Action, rlp::DecoderError>::Ok(move _3); // scope 0 at cita-chain/types/src/transaction.rs:64:13: 64:31
        goto -> bb21;                    // scope 0 at cita-chain/types/src/transaction.rs:63:9: 79:10
    }

    bb3: {
        _5 = const _;                    // scope 0 at cita-chain/types/src/transaction.rs:66:39: 66:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:66:39: 66:52
                                         // + literal: Const { ty: &str, val: Unevaluated(STORE_ADDRESS, [], None) }
        _4 = <&str as Into<H160>>::into(_5) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:66:39: 66:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:66:53: 66:57
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = const _;                    // scope 1 at cita-chain/types/src/transaction.rs:67:37: 67:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:67:37: 67:48
                                         // + literal: Const { ty: &str, val: Unevaluated(ABI_ADDRESS, [], None) }
        _6 = <&str as Into<H160>>::into(_7) -> bb5; // scope 1 at cita-chain/types/src/transaction.rs:67:37: 67:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:67:49: 67:53
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = const _;                    // scope 2 at cita-chain/types/src/transaction.rs:68:39: 68:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:68:39: 68:52
                                         // + literal: Const { ty: &str, val: Unevaluated(AMEND_ADDRESS, [], None) }
        _8 = <&str as Into<H160>>::into(_9) -> bb6; // scope 2 at cita-chain/types/src/transaction.rs:68:39: 68:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:68:53: 68:57
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = rlp::UntrustedRlp::<'_>::as_val::<H160>(_1) -> bb7; // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:69:37: 69:43
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<H160, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_val::<H160>}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = <Result<H160, rlp::DecoderError> as Try>::branch(move _12) -> bb8; // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:69:33: 69:46
                                         // + literal: Const { ty: fn(Result<H160, rlp::DecoderError>) -> ControlFlow<<Result<H160, rlp::DecoderError> as Try>::Residual, <Result<H160, rlp::DecoderError> as Try>::Output> {<Result<H160, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = discriminant(_11);         // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
        switchInt(move _13) -> [0: bb9, 1: bb11, otherwise: bb10]; // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
    }

    bb9: {
        _15 = ((_11 as Continue).0: cita_types::H160); // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
        _10 = _15;                       // scope 8 at cita-chain/types/src/transaction.rs:69:33: 69:46
        _17 = &_10;                      // scope 4 at cita-chain/types/src/transaction.rs:70:16: 70:20
        _18 = &_4;                       // scope 4 at cita-chain/types/src/transaction.rs:70:24: 70:34
        _16 = <H160 as PartialEq>::eq(move _17, move _18) -> bb12; // scope 4 at cita-chain/types/src/transaction.rs:70:16: 70:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:70:16: 70:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        unreachable;                     // scope 3 at cita-chain/types/src/transaction.rs:69:33: 69:46
    }

    bb11: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 3 at cita-chain/types/src/transaction.rs:69:45: 69:46
        _0 = <Result<Action, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _14) -> bb21; // scope 6 at cita-chain/types/src/transaction.rs:69:33: 69:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:69:45: 69:46
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<Action, rlp::DecoderError> {<Result<Action, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _16) -> [0: bb14, otherwise: bb13]; // scope 4 at cita-chain/types/src/transaction.rs:70:16: 70:34
    }

    bb13: {
        _19 = Action::Store;             // scope 4 at cita-chain/types/src/transaction.rs:71:20: 71:33
        _0 = Result::<Action, rlp::DecoderError>::Ok(move _19); // scope 4 at cita-chain/types/src/transaction.rs:71:17: 71:34
        goto -> bb21;                    // scope 4 at cita-chain/types/src/transaction.rs:70:13: 78:14
    }

    bb14: {
        _21 = &_10;                      // scope 4 at cita-chain/types/src/transaction.rs:72:23: 72:27
        _22 = &_6;                       // scope 4 at cita-chain/types/src/transaction.rs:72:31: 72:39
        _20 = <H160 as PartialEq>::eq(move _21, move _22) -> bb15; // scope 4 at cita-chain/types/src/transaction.rs:72:23: 72:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:72:23: 72:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _20) -> [0: bb17, otherwise: bb16]; // scope 4 at cita-chain/types/src/transaction.rs:72:23: 72:39
    }

    bb16: {
        _23 = Action::AbiStore;          // scope 4 at cita-chain/types/src/transaction.rs:73:20: 73:36
        _0 = Result::<Action, rlp::DecoderError>::Ok(move _23); // scope 4 at cita-chain/types/src/transaction.rs:73:17: 73:37
        goto -> bb21;                    // scope 4 at cita-chain/types/src/transaction.rs:72:20: 78:14
    }

    bb17: {
        _25 = &_10;                      // scope 4 at cita-chain/types/src/transaction.rs:74:23: 74:27
        _26 = &_8;                       // scope 4 at cita-chain/types/src/transaction.rs:74:31: 74:41
        _24 = <H160 as PartialEq>::eq(move _25, move _26) -> bb18; // scope 4 at cita-chain/types/src/transaction.rs:74:23: 74:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:74:23: 74:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _24) -> [0: bb20, otherwise: bb19]; // scope 4 at cita-chain/types/src/transaction.rs:74:23: 74:41
    }

    bb19: {
        _27 = Action::AmendData;         // scope 4 at cita-chain/types/src/transaction.rs:75:20: 75:37
        _0 = Result::<Action, rlp::DecoderError>::Ok(move _27); // scope 4 at cita-chain/types/src/transaction.rs:75:17: 75:38
        goto -> bb21;                    // scope 4 at cita-chain/types/src/transaction.rs:74:20: 78:14
    }

    bb20: {
        _28 = Action::Call(_15);         // scope 4 at cita-chain/types/src/transaction.rs:77:20: 77:38
        _0 = Result::<Action, rlp::DecoderError>::Ok(move _28); // scope 4 at cita-chain/types/src/transaction.rs:77:17: 77:39
        goto -> bb21;                    // scope 4 at cita-chain/types/src/transaction.rs:74:20: 78:14
    }

    bb21: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:80:6: 80:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:83:1: 83:26>::rlp_append(_1: &Action, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:84:19: 84:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:84:26: 84:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:84:45: 84:45
    let _3: cita_types::H160;            // in scope 0 at cita-chain/types/src/transaction.rs:85:13: 85:23
    let _4: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:85:35: 85:48
    let _6: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:86:33: 86:44
    let _8: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:87:35: 87:48
    let _9: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:88:9: 94:10
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:89:13: 89:27
    let mut _12: &mut rlp::RlpStream;    // in scope 0 at cita-chain/types/src/transaction.rs:90:39: 90:62
    let mut _13: &mut rlp::RlpStream;    // in scope 0 at cita-chain/types/src/transaction.rs:91:30: 91:60
    let _14: &cita_types::H160;          // in scope 0 at cita-chain/types/src/transaction.rs:91:48: 91:59
    let mut _15: &mut rlp::RlpStream;    // in scope 0 at cita-chain/types/src/transaction.rs:92:33: 92:61
    let _16: &cita_types::H160;          // in scope 0 at cita-chain/types/src/transaction.rs:92:51: 92:60
    let mut _17: &mut rlp::RlpStream;    // in scope 0 at cita-chain/types/src/transaction.rs:93:34: 93:64
    let _18: &cita_types::H160;          // in scope 0 at cita-chain/types/src/transaction.rs:93:52: 93:63
    scope 1 {
        debug store_addr => _3;          // in scope 1 at cita-chain/types/src/transaction.rs:85:13: 85:23
        let _5: cita_types::H160;        // in scope 1 at cita-chain/types/src/transaction.rs:86:13: 86:21
        scope 2 {
            debug abi_addr => _5;        // in scope 2 at cita-chain/types/src/transaction.rs:86:13: 86:21
            let _7: cita_types::H160;    // in scope 2 at cita-chain/types/src/transaction.rs:87:13: 87:23
            scope 3 {
                debug amend_addr => _7;  // in scope 3 at cita-chain/types/src/transaction.rs:87:13: 87:23
                let _11: &cita_types::H160; // in scope 3 at cita-chain/types/src/transaction.rs:90:26: 90:34
                let mut _19: &&str;      // in scope 3 at cita-chain/types/src/transaction.rs:89:49: 89:52
                scope 4 {
                    debug addr => _11;   // in scope 4 at cita-chain/types/src/transaction.rs:90:26: 90:34
                }
            }
        }
    }

    bb0: {
        _4 = const _;                    // scope 0 at cita-chain/types/src/transaction.rs:85:35: 85:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:85:35: 85:48
                                         // + literal: Const { ty: &str, val: Unevaluated(STORE_ADDRESS, [], None) }
        _3 = <&str as Into<H160>>::into(_4) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:85:35: 85:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:85:49: 85:53
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const _;                    // scope 1 at cita-chain/types/src/transaction.rs:86:33: 86:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:86:33: 86:44
                                         // + literal: Const { ty: &str, val: Unevaluated(ABI_ADDRESS, [], None) }
        _5 = <&str as Into<H160>>::into(_6) -> bb2; // scope 1 at cita-chain/types/src/transaction.rs:86:33: 86:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:86:45: 86:49
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const _;                    // scope 2 at cita-chain/types/src/transaction.rs:87:35: 87:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:87:35: 87:48
                                         // + literal: Const { ty: &str, val: Unevaluated(AMEND_ADDRESS, [], None) }
        _7 = <&str as Into<H160>>::into(_8) -> bb3; // scope 2 at cita-chain/types/src/transaction.rs:87:35: 87:55
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:87:49: 87:53
                                         // + literal: Const { ty: fn(&str) -> H160 {<&str as Into<H160>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant((*_1));       // scope 3 at cita-chain/types/src/transaction.rs:88:15: 88:20
        switchInt(move _10) -> [0: bb9, 1: bb6, 2: bb7, 3: bb11, 4: bb4, otherwise: bb5]; // scope 3 at cita-chain/types/src/transaction.rs:88:9: 88:20
    }

    bb4: {
        _18 = &_7;                       // scope 3 at cita-chain/types/src/transaction.rs:93:52: 93:63
        _17 = rlp::RlpStream::append_internal::<H160>(_2, _18) -> bb13; // scope 3 at cita-chain/types/src/transaction.rs:93:34: 93:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:93:36: 93:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<H160>}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 3 at cita-chain/types/src/transaction.rs:88:15: 88:20
    }

    bb6: {
        _19 = const _;                   // scope 3 at cita-chain/types/src/transaction.rs:89:49: 89:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:89:49: 89:52
                                         // + literal: Const { ty: &&str, val: Unevaluated(<Action as rlp::Encodable>::rlp_append, [], Some(promoted[0])) }
        _9 = rlp::RlpStream::append_internal::<&str>(_2, _19) -> bb14; // scope 3 at cita-chain/types/src/transaction.rs:89:31: 89:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:89:33: 89:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b &str) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<&str>}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = &(((*_1) as Call).0: cita_types::H160); // scope 3 at cita-chain/types/src/transaction.rs:90:26: 90:34
        _12 = rlp::RlpStream::append_internal::<H160>(_2, _11) -> bb8; // scope 4 at cita-chain/types/src/transaction.rs:90:39: 90:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:90:41: 90:56
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<H160>}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = _12;                        // scope 4 at cita-chain/types/src/transaction.rs:90:39: 90:62
        goto -> bb14;                    // scope 3 at cita-chain/types/src/transaction.rs:90:61: 90:62
    }

    bb9: {
        _14 = &_3;                       // scope 3 at cita-chain/types/src/transaction.rs:91:48: 91:59
        _13 = rlp::RlpStream::append_internal::<H160>(_2, _14) -> bb10; // scope 3 at cita-chain/types/src/transaction.rs:91:30: 91:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:91:32: 91:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<H160>}, val: Value(<ZST>) }
    }

    bb10: {
        _9 = _13;                        // scope 3 at cita-chain/types/src/transaction.rs:91:30: 91:60
        goto -> bb14;                    // scope 3 at cita-chain/types/src/transaction.rs:91:59: 91:60
    }

    bb11: {
        _16 = &_5;                       // scope 3 at cita-chain/types/src/transaction.rs:92:51: 92:60
        _15 = rlp::RlpStream::append_internal::<H160>(_2, _16) -> bb12; // scope 3 at cita-chain/types/src/transaction.rs:92:33: 92:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:92:35: 92:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H160) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<H160>}, val: Value(<ZST>) }
    }

    bb12: {
        _9 = _15;                        // scope 3 at cita-chain/types/src/transaction.rs:92:33: 92:61
        goto -> bb14;                    // scope 3 at cita-chain/types/src/transaction.rs:92:60: 92:61
    }

    bb13: {
        _9 = _17;                        // scope 3 at cita-chain/types/src/transaction.rs:93:34: 93:64
        goto -> bb14;                    // scope 3 at cita-chain/types/src/transaction.rs:93:63: 93:64
    }

    bb14: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:95:6: 95:6
    }
}

promoted[0] in transaction::<impl at cita-chain/types/src/transaction.rs:83:1: 83:26>::rlp_append: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/types/src/transaction.rs:89:49: 89:52
    let mut _1: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:89:50: 89:52

    bb0: {
        _1 = const "";                   // scope 0 at cita-chain/types/src/transaction.rs:89:50: 89:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:89:50: 89:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/transaction.rs:89:49: 89:52
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:89:49: 89:52
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:98:10: 98:15>::fmt(_1: &CryptoType, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    let _5: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    let _6: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    }

    bb1: {
        _6 = const "RESERVED";           // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:98:14: 98:15
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
    }

    bb3: {
        _5 = const "DEFAULT";            // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:98:14: 98:15
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:98:10: 98:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:98:15: 98:15
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:98:17: 98:22>::clone(_1: &CryptoType) -> CryptoType {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    let mut _0: transaction::CryptoType; // return place in scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    }

    bb1: {
        _0 = const CryptoType::RESERVED; // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x01)) }
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    }

    bb3: {
        _0 = const CryptoType::DEFAULT;  // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x00)) }
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:98:17: 98:22
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:98:22: 98:22
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:98:24: 98:33>::eq(_1: &CryptoType, _2: &CryptoType) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:98:24: 98:33
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:98:24: 98:33
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:98:24: 98:33
    let _3: isize;                       // in scope 0 at cita-chain/types/src/transaction.rs:98:24: 98:33
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/types/src/transaction.rs:98:24: 98:33
        let _4: isize;                   // in scope 1 at cita-chain/types/src/transaction.rs:98:24: 98:33
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/types/src/transaction.rs:98:24: 98:33
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:98:24: 98:33
        _4 = discriminant((*_2));        // scope 1 at cita-chain/types/src/transaction.rs:98:24: 98:33
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/types/src/transaction.rs:98:24: 98:33
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:98:33: 98:33
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:98:35: 98:37>::assert_receiver_is_total_eq(_1: &CryptoType) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:98:35: 98:37
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:98:35: 98:37

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:98:37: 98:37
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:105:1: 105:28>::default() -> CryptoType {
    let mut _0: transaction::CryptoType; // return place in scope 0 at cita-chain/types/src/transaction.rs:106:21: 106:31

    bb0: {
        _0 = const CryptoType::DEFAULT;  // scope 0 at cita-chain/types/src/transaction.rs:107:9: 107:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:108:6: 108:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:111:1: 111:30>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<CryptoType, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/transaction.rs:112:15: 112:18
    let mut _0: std::result::Result<transaction::CryptoType, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction.rs:112:38: 112:64
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u8>; // in scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
    let mut _3: std::result::Result<u8, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:33
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:113:33: 113:34
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:113:33: 113:34
    let _6: u8;                          // in scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
    let mut _7: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:114:21: 114:40
    let mut _8: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:115:21: 115:41
    let mut _9: rlp::DecoderError;       // in scope 0 at cita-chain/types/src/transaction.rs:116:22: 116:59
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/transaction.rs:113:33: 113:34
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/transaction.rs:113:15: 113:34
        scope 4 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::as_val::<u8>(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:113:19: 113:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<u8, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::as_val::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<u8, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:113:15: 113:34
                                         // + literal: Const { ty: fn(Result<u8, rlp::DecoderError>) -> ControlFlow<<Result<u8, rlp::DecoderError> as Try>::Residual, <Result<u8, rlp::DecoderError> as Try>::Output> {<Result<u8, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
    }

    bb3: {
        _6 = ((_2 as Continue).0: u8);   // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
        switchInt(_6) -> [0: bb7, 1: bb8, otherwise: bb6]; // scope 0 at cita-chain/types/src/transaction.rs:113:9: 113:34
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:113:15: 113:34
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:113:33: 113:34
        _0 = <Result<CryptoType, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb9; // scope 2 at cita-chain/types/src/transaction.rs:113:15: 113:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:113:33: 113:34
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<CryptoType, rlp::DecoderError> {<Result<CryptoType, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Custom(const "Unknown Type."); // scope 0 at cita-chain/types/src/transaction.rs:116:22: 116:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:116:43: 116:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Result::<CryptoType, rlp::DecoderError>::Err(move _9); // scope 0 at cita-chain/types/src/transaction.rs:116:18: 116:60
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:116:59: 116:60
    }

    bb7: {
        _7 = const CryptoType::DEFAULT;  // scope 0 at cita-chain/types/src/transaction.rs:114:21: 114:40
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x00)) }
        _0 = Result::<CryptoType, rlp::DecoderError>::Ok(move _7); // scope 0 at cita-chain/types/src/transaction.rs:114:18: 114:41
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:114:40: 114:41
    }

    bb8: {
        _8 = const CryptoType::RESERVED; // scope 0 at cita-chain/types/src/transaction.rs:115:21: 115:41
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x01)) }
        _0 = Result::<CryptoType, rlp::DecoderError>::Ok(move _8); // scope 0 at cita-chain/types/src/transaction.rs:115:18: 115:42
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:115:41: 115:42
    }

    bb9: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:118:6: 118:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:121:1: 121:30>::rlp_append(_1: &CryptoType, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:122:19: 122:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:122:26: 122:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:122:45: 122:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:123:9: 126:10
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:124:13: 124:32
    let mut _5: &mut rlp::RlpStream;     // in scope 0 at cita-chain/types/src/transaction.rs:125:37: 125:62
    let mut _6: &u8;                     // in scope 0 at cita-chain/types/src/transaction.rs:124:54: 124:60
    let mut _7: &u8;                     // in scope 0 at cita-chain/types/src/transaction.rs:125:55: 125:61

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/types/src/transaction.rs:123:15: 123:20
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:123:9: 123:20
    }

    bb1: {
        _7 = const _;                    // scope 0 at cita-chain/types/src/transaction.rs:125:55: 125:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:125:55: 125:61
                                         // + literal: Const { ty: &u8, val: Unevaluated(<CryptoType as rlp::Encodable>::rlp_append, [], Some(promoted[1])) }
        _5 = rlp::RlpStream::append_internal::<u8>(_2, _7) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:125:37: 125:62
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:125:39: 125:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u8) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<u8>}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:123:15: 123:20
    }

    bb3: {
        _6 = const _;                    // scope 0 at cita-chain/types/src/transaction.rs:124:54: 124:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:124:54: 124:60
                                         // + literal: Const { ty: &u8, val: Unevaluated(<CryptoType as rlp::Encodable>::rlp_append, [], Some(promoted[0])) }
        _3 = rlp::RlpStream::append_internal::<u8>(_2, _6) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:124:36: 124:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:124:38: 124:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u8) -> &'a mut rlp::RlpStream {rlp::RlpStream::append_internal::<u8>}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = _5;                         // scope 0 at cita-chain/types/src/transaction.rs:125:37: 125:62
        goto -> bb5;                     // scope 0 at cita-chain/types/src/transaction.rs:125:61: 125:62
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:127:6: 127:6
    }
}

promoted[0] in transaction::<impl at cita-chain/types/src/transaction.rs:121:1: 121:30>::rlp_append: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at cita-chain/types/src/transaction.rs:124:54: 124:60
    let mut _1: u8;                      // in scope 0 at cita-chain/types/src/transaction.rs:124:55: 124:60

    bb0: {
        _1 = const 0_u8;                 // scope 0 at cita-chain/types/src/transaction.rs:124:55: 124:60
        _0 = &_1;                        // scope 0 at cita-chain/types/src/transaction.rs:124:54: 124:60
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:124:54: 124:60
    }
}

promoted[1] in transaction::<impl at cita-chain/types/src/transaction.rs:121:1: 121:30>::rlp_append: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at cita-chain/types/src/transaction.rs:125:55: 125:61
    let mut _1: u8;                      // in scope 0 at cita-chain/types/src/transaction.rs:125:56: 125:61

    bb0: {
        _1 = const 1_u8;                 // scope 0 at cita-chain/types/src/transaction.rs:125:56: 125:61
        _0 = &_1;                        // scope 0 at cita-chain/types/src/transaction.rs:125:55: 125:61
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:125:55: 125:61
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:130:1: 130:38>::from(_1: Crypto) -> CryptoType {
    debug c => _1;                       // in scope 0 at cita-chain/types/src/transaction.rs:131:13: 131:14
    let mut _0: transaction::CryptoType; // return place in scope 0 at cita-chain/types/src/transaction.rs:131:32: 131:42
    let mut _2: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:133:13: 133:33

    bb0: {
        _2 = discriminant(_1);           // scope 0 at cita-chain/types/src/transaction.rs:132:15: 132:16
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:132:9: 132:16
    }

    bb1: {
        _0 = const CryptoType::RESERVED; // scope 0 at cita-chain/types/src/transaction.rs:134:38: 134:58
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x01)) }
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:134:38: 134:58
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:132:15: 132:16
    }

    bb3: {
        _0 = const CryptoType::DEFAULT;  // scope 0 at cita-chain/types/src/transaction.rs:133:37: 133:56
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: CryptoType, val: Value(Scalar(0x00)) }
        goto -> bb4;                     // scope 0 at cita-chain/types/src/transaction.rs:133:37: 133:56
    }

    bb4: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:136:6: 136:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:141:10: 141:17>::default() -> transaction::Transaction {
    let mut _0: transaction::Transaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:141:10: 141:17
    let mut _1: std::string::String;     // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _3: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _4: transaction::Action;     // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _5: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _6: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _7: u64;                     // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _8: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _9: u32;                     // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21

    bb0: {
        _1 = <std::string::String as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // + literal: Const { ty: fn() -> std::string::String {<std::string::String as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <U256 as Default>::default() -> [return: bb2, unwind: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <U256 as Default>::default() -> [return: bb3, unwind: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <Action as Default>::default() -> [return: bb4, unwind: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // + literal: Const { ty: fn() -> Action {<Action as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <U256 as Default>::default() -> [return: bb5, unwind: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <Vec<u8> as Default>::default() -> [return: bb6, unwind: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // + literal: Const { ty: fn() -> Vec<u8> {<Vec<u8> as Default>::default}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <u64 as Default>::default() -> [return: bb7, unwind: bb10]; // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:156:5: 156:33
                                         // + literal: Const { ty: fn() -> u64 {<u64 as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = <U256 as Default>::default() -> [return: bb8, unwind: bb10]; // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = <u32 as Default>::default() -> [return: bb9, unwind: bb10]; // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:161:5: 161:21
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = transaction::Transaction { nonce: move _1, gas_price: move _2, gas: move _3, action: move _4, value: move _5, data: move _6, block_limit: move _7, chain_id: move _8, version: move _9 }; // scope 0 at cita-chain/types/src/transaction.rs:141:10: 141:17
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:17: 141:17
    }

    bb10 (cleanup): {
        drop(_6) -> bb11;                // scope 0 at cita-chain/types/src/transaction.rs:141:16: 141:17
    }

    bb11 (cleanup): {
        drop(_1) -> bb12;                // scope 0 at cita-chain/types/src/transaction.rs:141:16: 141:17
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:141:10: 141:17
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:141:19: 141:24>::fmt(_1: &transaction::Transaction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let _4: &[&dyn std::fmt::Debug; 9];  // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let _5: [&dyn std::fmt::Debug; 9];   // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let _7: &std::string::String;        // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let _11: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let _13: &transaction::Action;       // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let _17: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let _19: &u64;                       // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let _21: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let _23: &&u32;                      // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let _24: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let _25: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _26: &[&str];                // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _27: &[&str; 9];             // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    scope 1 {
        debug names => _27;              // in scope 1 at cita-chain/types/src/transaction.rs:141:19: 141:24
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/types/src/transaction.rs:141:19: 141:24
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/types/src/transaction.rs:141:19: 141:24
        }
    }

    bb0: {
        _27 = const _;                   // scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // + literal: Const { ty: &[&str; 9], val: Unevaluated(<transaction::Transaction as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: std::string::String); // scope 1 at cita-chain/types/src/transaction.rs:144:5: 144:22
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:144:5: 144:22
        _9 = &((*_1).1: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _11 = &((*_1).2: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _13 = &((*_1).3: transaction::Action); // scope 1 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _15 = &((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _17 = &((*_1).5: std::vec::Vec<u8>); // scope 1 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _19 = &((*_1).6: u64);           // scope 1 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _21 = &((*_1).7: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _24 = &((*_1).8: u32);           // scope 1 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _23 = &_24;                      // scope 1 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _22 = _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22]; // scope 1 at cita-chain/types/src/transaction.rs:141:19: 141:24
        _4 = &_5;                        // scope 1 at cita-chain/types/src/transaction.rs:141:19: 141:24
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:141:19: 141:24
        _25 = const "Transaction";       // scope 2 at cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = _27 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/transaction.rs:141:19: 141:24
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _25, move _26, _3) -> bb1; // scope 2 at cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:24: 141:24
    }
}

promoted[0] in transaction::<impl at cita-chain/types/src/transaction.rs:141:19: 141:24>::fmt: &[&str; 9] = {
    let mut _0: &[&str; 9];              // return place in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _1: [&str; 9];               // in scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    let mut _2: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _3: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _4: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _5: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _6: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _7: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _8: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _9: &str;                    // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _11: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _12: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _13: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _14: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _15: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _16: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let mut _17: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21

    bb0: {
        _3 = const "gas_price";          // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _5 = const "gas";                // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _7 = const "action";             // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _9 = const "value";              // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _11 = const "data";              // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _13 = const "block_limit";       // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:156:5: 156:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _15 = const "chain_id";          // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _17 = const "version";           // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:161:5: 161:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &(*_17);                   // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _1 = [const "nonce", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16]; // scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:19: 141:24
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:141:26: 141:31>::clone(_1: &transaction::Transaction) -> transaction::Transaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:141:26: 141:31
    let mut _0: transaction::Transaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:141:26: 141:31
    let mut _2: std::string::String;     // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let _3: &std::string::String;        // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _4: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let _5: &cita_types::U256;           // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _6: cita_types::U256;        // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let _7: &cita_types::U256;           // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _8: transaction::Action;     // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let _9: &transaction::Action;        // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _10: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let _11: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let _13: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let _15: &u64;                       // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _16: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let _17: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _18: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let _19: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21

    bb0: {
        _3 = &((*_1).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
        _2 = <std::string::String as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _4 = <U256 as Clone>::clone(_5) -> [return: bb2, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _6 = <U256 as Clone>::clone(_7) -> [return: bb3, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _8 = <Action as Clone>::clone(_9) -> [return: bb4, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // + literal: Const { ty: for<'a> fn(&'a Action) -> Action {<Action as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _10 = <U256 as Clone>::clone(_11) -> [return: bb5, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).5: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _12 = <Vec<u8> as Clone>::clone(_13) -> [return: bb6, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).6: u64);           // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _14 = (*_15);                    // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _17 = &((*_1).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _16 = <U256 as Clone>::clone(_17) -> [return: bb7, unwind: bb8]; // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = &((*_1).8: u32);           // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _18 = (*_19);                    // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _0 = transaction::Transaction { nonce: move _2, gas_price: move _4, gas: move _6, action: move _8, value: move _10, data: move _12, block_limit: move _14, chain_id: move _16, version: move _18 }; // scope 0 at cita-chain/types/src/transaction.rs:141:26: 141:31
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:31: 141:31
    }

    bb8 (cleanup): {
        drop(_12) -> bb9;                // scope 0 at cita-chain/types/src/transaction.rs:141:30: 141:31
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at cita-chain/types/src/transaction.rs:141:30: 141:31
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:141:26: 141:31
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:141:33: 141:42>::eq(_1: &transaction::Transaction, _2: &transaction::Transaction) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:141:33: 141:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:141:33: 141:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:141:33: 141:42
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _6: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _9: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _11: &std::string::String;   // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _12: &std::string::String;   // in scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
    let mut _13: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _14: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _15: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    let mut _16: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _17: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _18: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    let mut _19: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _20: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _21: &transaction::Action;   // in scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    let mut _22: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _23: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _24: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    let mut _25: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _26: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _27: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    let mut _28: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _29: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _30: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    let mut _31: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _32: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _33: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    let mut _34: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let mut _35: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    let mut _36: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21

    bb0: {
        _11 = &((*_1).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
        _12 = &((*_2).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
        _10 = <std::string::String as PartialEq>::eq(move _11, move _12) -> bb25; // scope 0 at cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:144:5: 144:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::string::String, &'b std::string::String) -> bool {<std::string::String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    }

    bb2: {
        _35 = ((*_1).8: u32);            // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _36 = ((*_2).8: u32);            // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _34 = Eq(move _35, move _36);    // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        _0 = move _34;                   // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:42: 141:42
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    }

    bb5: {
        _32 = &((*_1).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _33 = &((*_2).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        _31 = <U256 as PartialEq>::eq(move _32, move _33) -> bb31; // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:159:5: 159:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:161:5: 161:21
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    }

    bb8: {
        _29 = ((*_1).6: u64);            // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _30 = ((*_2).6: u64);            // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _28 = Eq(move _29, move _30);    // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        _4 = move _28;                   // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    }

    bb10: {
        _5 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        goto -> bb12;                    // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    }

    bb11: {
        _26 = &((*_1).5: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _27 = &((*_2).5: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        _25 = <Vec<u8> as PartialEq>::eq(move _26, move _27) -> bb30; // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:154:5: 154:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b Vec<u8>) -> bool {<Vec<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/transaction.rs:156:5: 156:33
    }

    bb13: {
        _6 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        goto -> bb15;                    // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    }

    bb14: {
        _23 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _24 = &((*_2).4: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        _22 = <U256 as PartialEq>::eq(move _23, move _24) -> bb29; // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:152:5: 152:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    }

    bb16: {
        _7 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        goto -> bb18;                    // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    }

    bb17: {
        _20 = &((*_1).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _21 = &((*_2).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        _19 = <Action as PartialEq>::eq(move _20, move _21) -> bb28; // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:150:5: 150:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Action, &'b Action) -> bool {<Action as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    }

    bb19: {
        _8 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        goto -> bb21;                    // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    }

    bb20: {
        _17 = &((*_1).2: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _18 = &((*_2).2: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        _16 = <U256 as PartialEq>::eq(move _17, move _18) -> bb27; // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:148:5: 148:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    }

    bb22: {
        _9 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        goto -> bb24;                    // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    }

    bb23: {
        _14 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _15 = &((*_2).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        _13 = <U256 as PartialEq>::eq(move _14, move _15) -> bb26; // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:146:5: 146:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(move _9) -> [0: bb19, otherwise: bb20]; // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    }

    bb25: {
        switchInt(move _10) -> [0: bb22, otherwise: bb23]; // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    }

    bb26: {
        _9 = move _13;                   // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
        goto -> bb24;                    // scope 0 at cita-chain/types/src/transaction.rs:146:5: 146:24
    }

    bb27: {
        _8 = move _16;                   // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
        goto -> bb21;                    // scope 0 at cita-chain/types/src/transaction.rs:148:5: 148:18
    }

    bb28: {
        _7 = move _19;                   // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
        goto -> bb18;                    // scope 0 at cita-chain/types/src/transaction.rs:150:5: 150:23
    }

    bb29: {
        _6 = move _22;                   // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
        goto -> bb15;                    // scope 0 at cita-chain/types/src/transaction.rs:152:5: 152:20
    }

    bb30: {
        _5 = move _25;                   // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
        goto -> bb12;                    // scope 0 at cita-chain/types/src/transaction.rs:154:5: 154:20
    }

    bb31: {
        _3 = move _31;                   // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:159:5: 159:23
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:141:44: 141:46>::assert_receiver_is_total_eq(_1: &transaction::Transaction) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:141:44: 141:46
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:141:44: 141:46
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:141:46: 141:46
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:164:1: 164:31>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<transaction::Transaction, rlp::DecoderError> {
    debug d => _1;                       // in scope 0 at cita-chain/types/src/transaction.rs:165:15: 165:16
    let mut _0: std::result::Result<transaction::Transaction, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction.rs:165:36: 165:62
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:26
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:166:26: 166:27
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:166:26: 166:27
    let _6: usize;                       // in scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
    let mut _7: rlp::DecoderError;       // in scope 0 at cita-chain/types/src/transaction.rs:167:24: 167:57
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u32>; // in scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
    let mut _9: std::result::Result<u32, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:34
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:169:34: 169:35
    let _11: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:169:34: 169:35
    let _12: u32;                        // in scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
    let mut _13: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:171:12: 185:10
    let mut _14: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:172:20: 172:32
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::string::String>; // in scope 0 at cita-chain/types/src/transaction.rs:172:20: 172:32
    let mut _16: std::result::Result<std::string::String, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:172:20: 172:31
    let mut _17: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:172:31: 172:32
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:173:24: 173:36
    let mut _21: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:173:24: 173:35
    let mut _22: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:173:35: 173:36
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:174:18: 174:30
    let mut _26: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:174:18: 174:29
    let mut _27: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:174:29: 174:30
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, transaction::Action>; // in scope 0 at cita-chain/types/src/transaction.rs:175:21: 175:33
    let mut _31: std::result::Result<transaction::Action, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:175:21: 175:32
    let mut _32: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:175:32: 175:33
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:176:20: 176:32
    let mut _36: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:176:20: 176:31
    let mut _37: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:176:31: 176:32
    let mut _40: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:177:19: 177:31
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/transaction.rs:177:19: 177:31
    let mut _42: std::result::Result<std::vec::Vec<u8>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:177:19: 177:30
    let mut _43: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:177:30: 177:31
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u64>; // in scope 0 at cita-chain/types/src/transaction.rs:178:26: 178:38
    let mut _47: std::result::Result<u64, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:178:26: 178:37
    let mut _48: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:178:37: 178:38
    let mut _51: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:179:23: 183:14
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u32>; // in scope 0 at cita-chain/types/src/transaction.rs:180:17: 180:36
    let mut _53: std::result::Result<u32, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:180:17: 180:35
    let mut _54: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:180:35: 180:36
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:182:17: 182:37
    let mut _58: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:182:17: 182:36
    let mut _59: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:182:36: 182:37
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/transaction.rs:166:26: 166:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/transaction.rs:166:12: 166:27
        scope 4 {
        }
    }
    scope 5 {
        debug version => _12;            // in scope 5 at cita-chain/types/src/transaction.rs:169:13: 169:20
        let _18: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:172:31: 172:32
        let _19: std::string::String;    // in scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
        let _23: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:173:35: 173:36
        let _24: cita_types::U256;       // in scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
        let _28: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:174:29: 174:30
        let _29: cita_types::U256;       // in scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
        let _33: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:175:32: 175:33
        let _34: transaction::Action;    // in scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
        let _38: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:176:31: 176:32
        let _39: cita_types::U256;       // in scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
        let _44: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:177:30: 177:31
        let _45: std::vec::Vec<u8>;      // in scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
        let _49: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:178:37: 178:38
        let _50: u64;                    // in scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
        let _55: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:180:35: 180:36
        let _56: u32;                    // in scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
        let _60: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:182:36: 182:37
        let _61: cita_types::U256;       // in scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
        scope 10 {
            debug residual => _18;       // in scope 10 at cita-chain/types/src/transaction.rs:172:31: 172:32
            scope 11 {
            }
        }
        scope 12 {
            debug val => _19;            // in scope 12 at cita-chain/types/src/transaction.rs:172:20: 172:32
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _23;       // in scope 14 at cita-chain/types/src/transaction.rs:173:35: 173:36
            scope 15 {
            }
        }
        scope 16 {
            debug val => _24;            // in scope 16 at cita-chain/types/src/transaction.rs:173:24: 173:36
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _28;       // in scope 18 at cita-chain/types/src/transaction.rs:174:29: 174:30
            scope 19 {
            }
        }
        scope 20 {
            debug val => _29;            // in scope 20 at cita-chain/types/src/transaction.rs:174:18: 174:30
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _33;       // in scope 22 at cita-chain/types/src/transaction.rs:175:32: 175:33
            scope 23 {
            }
        }
        scope 24 {
            debug val => _34;            // in scope 24 at cita-chain/types/src/transaction.rs:175:21: 175:33
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _38;       // in scope 26 at cita-chain/types/src/transaction.rs:176:31: 176:32
            scope 27 {
            }
        }
        scope 28 {
            debug val => _39;            // in scope 28 at cita-chain/types/src/transaction.rs:176:20: 176:32
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _44;       // in scope 30 at cita-chain/types/src/transaction.rs:177:30: 177:31
            scope 31 {
            }
        }
        scope 32 {
            debug val => _45;            // in scope 32 at cita-chain/types/src/transaction.rs:177:19: 177:31
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _49;       // in scope 34 at cita-chain/types/src/transaction.rs:178:37: 178:38
            scope 35 {
            }
        }
        scope 36 {
            debug val => _50;            // in scope 36 at cita-chain/types/src/transaction.rs:178:26: 178:38
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _55;       // in scope 38 at cita-chain/types/src/transaction.rs:180:35: 180:36
            scope 39 {
            }
        }
        scope 40 {
            debug val => _56;            // in scope 40 at cita-chain/types/src/transaction.rs:180:17: 180:36
            scope 41 {
            }
        }
        scope 42 {
            debug residual => _60;       // in scope 42 at cita-chain/types/src/transaction.rs:182:36: 182:37
            scope 43 {
            }
        }
        scope 44 {
            debug val => _61;            // in scope 44 at cita-chain/types/src/transaction.rs:182:17: 182:37
            scope 45 {
            }
        }
    }
    scope 6 {
        debug residual => _11;           // in scope 6 at cita-chain/types/src/transaction.rs:169:34: 169:35
        scope 7 {
        }
    }
    scope 8 {
        debug val => _12;                // in scope 8 at cita-chain/types/src/transaction.rs:169:23: 169:35
        scope 9 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:166:14: 166:24
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:166:12: 166:27
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
        switchInt(move _6) -> [9: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:32
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:166:12: 166:27
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:166:26: 166:27
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb68; // scope 2 at cita-chain/types/src/transaction.rs:166:12: 166:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:166:26: 166:27
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = RlpIncorrectListLen;        // scope 0 at cita-chain/types/src/transaction.rs:167:24: 167:57
        _0 = Result::<transaction::Transaction, rlp::DecoderError>::Err(move _7); // scope 0 at cita-chain/types/src/transaction.rs:167:20: 167:58
        goto -> bb68;                    // scope 0 at cita-chain/types/src/transaction.rs:167:13: 167:58
    }

    bb7: {
        _9 = rlp::UntrustedRlp::<'_>::val_at::<u32>(_1, const 8_usize) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:169:25: 169:31
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u32, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u32>}, val: Value(<ZST>) }
    }

    bb8: {
        _8 = <Result<u32, rlp::DecoderError> as Try>::branch(move _9) -> bb9; // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:169:23: 169:35
                                         // + literal: Const { ty: fn(Result<u32, rlp::DecoderError>) -> ControlFlow<<Result<u32, rlp::DecoderError> as Try>::Residual, <Result<u32, rlp::DecoderError> as Try>::Output> {<Result<u32, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = discriminant(_8);          // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
        switchInt(move _10) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
    }

    bb10: {
        _12 = ((_8 as Continue).0: u32); // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
        _16 = rlp::UntrustedRlp::<'_>::val_at::<std::string::String>(_1, const 0_usize) -> bb13; // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:172:22: 172:28
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<std::string::String, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<std::string::String>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:169:23: 169:35
    }

    bb12: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:169:34: 169:35
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _11) -> bb68; // scope 7 at cita-chain/types/src/transaction.rs:169:23: 169:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:169:34: 169:35
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = <Result<std::string::String, rlp::DecoderError> as Try>::branch(move _16) -> bb14; // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:172:20: 172:32
                                         // + literal: Const { ty: fn(Result<std::string::String, rlp::DecoderError>) -> ControlFlow<<Result<std::string::String, rlp::DecoderError> as Try>::Residual, <Result<std::string::String, rlp::DecoderError> as Try>::Output> {<Result<std::string::String, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = discriminant(_15);         // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
        switchInt(move _17) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
    }

    bb15: {
        _19 = move ((_15 as Continue).0: std::string::String); // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
        _14 = move _19;                  // scope 13 at cita-chain/types/src/transaction.rs:172:20: 172:32
        _21 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 1_usize) -> [return: bb18, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:173:26: 173:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:172:20: 172:32
    }

    bb17: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:172:31: 172:32
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _18) -> bb68; // scope 11 at cita-chain/types/src/transaction.rs:172:20: 172:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:172:31: 172:32
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = <Result<U256, rlp::DecoderError> as Try>::branch(move _21) -> [return: bb19, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:173:24: 173:36
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb19: {
        _22 = discriminant(_20);         // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
        switchInt(move _22) -> [0: bb20, 1: bb22, otherwise: bb21]; // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
    }

    bb20: {
        _24 = ((_20 as Continue).0: cita_types::U256); // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
        _26 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 2_usize) -> [return: bb24, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:174:20: 174:26
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb21: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:173:24: 173:36
    }

    bb22: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:173:35: 173:36
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _23) -> [return: bb23, unwind: bb71]; // scope 15 at cita-chain/types/src/transaction.rs:173:24: 173:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:173:35: 173:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb24: {
        _25 = <Result<U256, rlp::DecoderError> as Try>::branch(move _26) -> [return: bb25, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:174:18: 174:30
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb25: {
        _27 = discriminant(_25);         // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
        switchInt(move _27) -> [0: bb26, 1: bb28, otherwise: bb27]; // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
    }

    bb26: {
        _29 = ((_25 as Continue).0: cita_types::U256); // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
        _31 = rlp::UntrustedRlp::<'_>::val_at::<Action>(_1, const 3_usize) -> [return: bb30, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:175:23: 175:29
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Action, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Action>}, val: Value(<ZST>) }
    }

    bb27: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:174:18: 174:30
    }

    bb28: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:174:29: 174:30
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _28) -> [return: bb29, unwind: bb71]; // scope 19 at cita-chain/types/src/transaction.rs:174:18: 174:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:174:29: 174:30
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb30: {
        _30 = <Result<Action, rlp::DecoderError> as Try>::branch(move _31) -> [return: bb31, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:175:21: 175:33
                                         // + literal: Const { ty: fn(Result<Action, rlp::DecoderError>) -> ControlFlow<<Result<Action, rlp::DecoderError> as Try>::Residual, <Result<Action, rlp::DecoderError> as Try>::Output> {<Result<Action, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb31: {
        _32 = discriminant(_30);         // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
        switchInt(move _32) -> [0: bb32, 1: bb34, otherwise: bb33]; // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
    }

    bb32: {
        _34 = move ((_30 as Continue).0: transaction::Action); // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
        _36 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 4_usize) -> [return: bb36, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:176:22: 176:28
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb33: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:175:21: 175:33
    }

    bb34: {
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:175:32: 175:33
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _33) -> [return: bb35, unwind: bb71]; // scope 23 at cita-chain/types/src/transaction.rs:175:21: 175:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:175:32: 175:33
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb36: {
        _35 = <Result<U256, rlp::DecoderError> as Try>::branch(move _36) -> [return: bb37, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:176:20: 176:32
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb37: {
        _37 = discriminant(_35);         // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
        switchInt(move _37) -> [0: bb38, 1: bb40, otherwise: bb39]; // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
    }

    bb38: {
        _39 = ((_35 as Continue).0: cita_types::U256); // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
        _42 = rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>(_1, const 5_usize) -> [return: bb42, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:177:21: 177:27
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<u8>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb39: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:176:20: 176:32
    }

    bb40: {
        _38 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:176:31: 176:32
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _38) -> [return: bb41, unwind: bb71]; // scope 27 at cita-chain/types/src/transaction.rs:176:20: 176:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:176:31: 176:32
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb41: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb42: {
        _41 = <Result<Vec<u8>, rlp::DecoderError> as Try>::branch(move _42) -> [return: bb43, unwind: bb71]; // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:177:19: 177:31
                                         // + literal: Const { ty: fn(Result<Vec<u8>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<u8>, rlp::DecoderError> as Try>::Residual, <Result<Vec<u8>, rlp::DecoderError> as Try>::Output> {<Result<Vec<u8>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb43: {
        _43 = discriminant(_41);         // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
        switchInt(move _43) -> [0: bb44, 1: bb46, otherwise: bb45]; // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
    }

    bb44: {
        _45 = move ((_41 as Continue).0: std::vec::Vec<u8>); // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
        _40 = move _45;                  // scope 33 at cita-chain/types/src/transaction.rs:177:19: 177:31
        _47 = rlp::UntrustedRlp::<'_>::val_at::<u64>(_1, const 6_usize) -> [return: bb48, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:178:28: 178:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u64, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u64>}, val: Value(<ZST>) }
    }

    bb45: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:177:19: 177:31
    }

    bb46: {
        _44 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:177:30: 177:31
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _44) -> [return: bb47, unwind: bb70]; // scope 31 at cita-chain/types/src/transaction.rs:177:19: 177:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:177:30: 177:31
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb47: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb48: {
        _46 = <Result<u64, rlp::DecoderError> as Try>::branch(move _47) -> [return: bb49, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:178:26: 178:38
                                         // + literal: Const { ty: fn(Result<u64, rlp::DecoderError>) -> ControlFlow<<Result<u64, rlp::DecoderError> as Try>::Residual, <Result<u64, rlp::DecoderError> as Try>::Output> {<Result<u64, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb49: {
        _48 = discriminant(_46);         // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
        switchInt(move _48) -> [0: bb50, 1: bb52, otherwise: bb51]; // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
    }

    bb50: {
        _50 = ((_46 as Continue).0: u64); // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
        switchInt(move _12) -> [0: bb53, otherwise: bb54]; // scope 5 at cita-chain/types/src/transaction.rs:179:26: 179:38
    }

    bb51: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:178:26: 178:38
    }

    bb52: {
        _49 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:178:37: 178:38
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _49) -> [return: bb73, unwind: bb69]; // scope 35 at cita-chain/types/src/transaction.rs:178:26: 178:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:178:37: 178:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb53: {
        _53 = rlp::UntrustedRlp::<'_>::val_at::<u32>(_1, const 7_usize) -> [return: bb55, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:180:19: 180:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u32, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u32>}, val: Value(<ZST>) }
    }

    bb54: {
        _58 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 7_usize) -> [return: bb60, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:182:19: 182:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb55: {
        _52 = <Result<u32, rlp::DecoderError> as Try>::branch(move _53) -> [return: bb56, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:180:17: 180:36
                                         // + literal: Const { ty: fn(Result<u32, rlp::DecoderError>) -> ControlFlow<<Result<u32, rlp::DecoderError> as Try>::Residual, <Result<u32, rlp::DecoderError> as Try>::Output> {<Result<u32, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb56: {
        _54 = discriminant(_52);         // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
        switchInt(move _54) -> [0: bb57, 1: bb59, otherwise: bb58]; // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
    }

    bb57: {
        _56 = ((_52 as Continue).0: u32); // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
        _51 = <u32 as Into<U256>>::into(_56) -> [return: bb74, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:180:37: 180:41
                                         // + literal: Const { ty: fn(u32) -> U256 {<u32 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:36
    }

    bb59: {
        _55 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:180:35: 180:36
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _55) -> [return: bb75, unwind: bb69]; // scope 39 at cita-chain/types/src/transaction.rs:180:17: 180:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:180:35: 180:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb60: {
        _57 = <Result<U256, rlp::DecoderError> as Try>::branch(move _58) -> [return: bb61, unwind: bb69]; // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:182:17: 182:37
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb61: {
        _59 = discriminant(_57);         // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
        switchInt(move _59) -> [0: bb62, 1: bb64, otherwise: bb63]; // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
    }

    bb62: {
        _61 = ((_57 as Continue).0: cita_types::U256); // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
        _51 = _61;                       // scope 45 at cita-chain/types/src/transaction.rs:182:17: 182:37
        goto -> bb65;                    // scope 5 at cita-chain/types/src/transaction.rs:179:23: 183:14
    }

    bb63: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:182:17: 182:37
    }

    bb64: {
        _60 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:182:36: 182:37
        _0 = <Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _60) -> [return: bb76, unwind: bb69]; // scope 43 at cita-chain/types/src/transaction.rs:182:17: 182:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:182:36: 182:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::Transaction, rlp::DecoderError> {<Result<transaction::Transaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb65: {
        _13 = transaction::Transaction { nonce: move _14, gas_price: _24, gas: _29, action: move _34, value: _39, data: move _40, block_limit: _50, chain_id: move _51, version: _12 }; // scope 5 at cita-chain/types/src/transaction.rs:171:12: 185:10
        _0 = Result::<transaction::Transaction, rlp::DecoderError>::Ok(move _13); // scope 5 at cita-chain/types/src/transaction.rs:171:9: 185:11
        goto -> bb68;                    // scope 0 at cita-chain/types/src/transaction.rs:186:6: 186:6
    }

    bb66: {
        drop(_40) -> [return: bb67, unwind: bb70]; // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb67: {
        drop(_14) -> bb68;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb68: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:186:6: 186:6
    }

    bb69 (cleanup): {
        drop(_40) -> bb70;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb70 (cleanup): {
        drop(_14) -> bb72;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb71 (cleanup): {
        drop(_14) -> bb72;               // scope 5 at cita-chain/types/src/transaction.rs:185:9: 185:10
    }

    bb72 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:165:5: 186:6
    }

    bb73: {
        goto -> bb66;                    // scope 35 at cita-chain/types/src/transaction.rs:178:26: 178:38
    }

    bb74: {
        goto -> bb65;                    // scope 5 at cita-chain/types/src/transaction.rs:180:17: 180:43
    }

    bb75: {
        goto -> bb66;                    // scope 39 at cita-chain/types/src/transaction.rs:180:17: 180:36
    }

    bb76: {
        goto -> bb66;                    // scope 43 at cita-chain/types/src/transaction.rs:182:17: 182:37
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:189:1: 189:31>::rlp_append(_1: &transaction::Transaction, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:190:19: 190:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:190:26: 190:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:190:45: 190:45

    bb0: {
        _0 = transaction::Transaction::rlp_append_unsigned_transaction(_1, _2) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:191:9: 191:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:191:14: 191:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a transaction::Transaction, &'b mut rlp::RlpStream) {transaction::Transaction::rlp_append_unsigned_transaction}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:192:6: 192:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::create(_1: &libproto::Transaction) -> Result<transaction::Transaction, transaction::Error> {
    debug plain_transaction => _1;       // in scope 0 at cita-chain/types/src/transaction.rs:197:19: 197:36
    let mut _0: std::result::Result<transaction::Transaction, transaction::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:197:60: 197:79
    let mut _2: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:52
    let mut _3: usize;                   // in scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:47
    let mut _4: &[u8];                   // in scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:47
    let _5: &[u8];                       // in scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:41
    let mut _6: transaction::Error;      // in scope 0 at cita-chain/types/src/transaction.rs:199:24: 199:41
    let _7: u32;                         // in scope 0 at cita-chain/types/src/transaction.rs:202:13: 202:20
    let mut _8: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:203:12: 241:10
    let mut _9: std::string::String;     // in scope 0 at cita-chain/types/src/transaction.rs:204:20: 204:60
    let mut _10: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:204:20: 204:60
    let _11: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:204:20: 204:49
    let mut _12: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:205:24: 205:39
    let mut _13: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:206:18: 206:59
    let mut _14: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:206:29: 206:58
    let mut _15: transaction::Action;    // in scope 0 at cita-chain/types/src/transaction.rs:207:21: 231:14
    let mut _16: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:208:20: 208:27
    let mut _18: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:209:39: 209:65
    let _19: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:209:39: 209:65
    let mut _20: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:211:25: 211:27
    let mut _21: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:212:25: 212:38
    let mut _22: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:213:25: 213:36
    let mut _23: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:214:25: 214:38
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, transaction::Error>, cita_types::H160>; // in scope 0 at cita-chain/types/src/transaction.rs:215:43: 215:96
    let mut _25: std::result::Result<cita_types::H160, transaction::Error>; // in scope 0 at cita-chain/types/src/transaction.rs:215:43: 215:95
    let mut _26: std::result::Result<cita_types::H160, rustc_hex::FromHexError>; // in scope 0 at cita-chain/types/src/transaction.rs:215:43: 215:64
    let mut _27: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:215:61: 215:63
    let mut _28: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:215:95: 215:96
    let mut _32: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:219:24: 219:37
    let mut _33: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:219:24: 219:37
    let mut _35: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:222:53: 222:55
    let mut _36: &str;                   // in scope 0 at cita-chain/types/src/transaction.rs:223:31: 223:59
    let mut _37: &std::string::String;   // in scope 0 at cita-chain/types/src/transaction.rs:223:31: 223:59
    let _38: std::string::String;        // in scope 0 at cita-chain/types/src/transaction.rs:223:31: 223:50
    let mut _39: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:223:31: 223:50
    let mut _40: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:224:29: 224:42
    let mut _41: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:225:29: 225:40
    let mut _42: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:226:29: 226:42
    let mut _43: cita_types::H160;       // in scope 0 at cita-chain/types/src/transaction.rs:227:47: 227:54
    let mut _44: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:232:20: 232:61
    let mut _45: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:232:31: 232:60
    let mut _46: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:233:19: 233:60
    let mut _47: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:233:31: 233:59
    let mut _48: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:234:26: 234:67
    let mut _49: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:235:23: 239:14
    let mut _50: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:235:26: 235:33
    let mut _51: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:236:17: 236:49
    let mut _52: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:238:17: 238:59
    let _53: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:238:17: 238:52
    let mut _54: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:240:13: 240:20
    scope 1 {
        debug version => _7;             // in scope 1 at cita-chain/types/src/transaction.rs:202:13: 202:20
        let _17: &str;                   // in scope 1 at cita-chain/types/src/transaction.rs:209:25: 209:27
        let _31: &[u8];                  // in scope 1 at cita-chain/types/src/transaction.rs:218:25: 218:27
        scope 2 {
            debug to => _17;             // in scope 2 at cita-chain/types/src/transaction.rs:209:25: 209:27
            let _29: std::result::Result<std::convert::Infallible, transaction::Error>; // in scope 2 at cita-chain/types/src/transaction.rs:215:95: 215:96
            let _30: cita_types::H160;   // in scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
            scope 3 {
                debug residual => _29;   // in scope 3 at cita-chain/types/src/transaction.rs:215:95: 215:96
                scope 4 {
                }
            }
            scope 5 {
                debug val => _30;        // in scope 5 at cita-chain/types/src/transaction.rs:215:43: 215:96
                scope 6 {
                }
            }
        }
        scope 7 {
            debug to => _31;             // in scope 7 at cita-chain/types/src/transaction.rs:218:25: 218:27
            let _34: cita_types::H160;   // in scope 7 at cita-chain/types/src/transaction.rs:222:29: 222:36
            scope 8 {
                debug to_addr => _34;    // in scope 8 at cita-chain/types/src/transaction.rs:222:29: 222:36
            }
        }
    }

    bb0: {
        _5 = libproto::Transaction::get_value(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:198:30: 198:39
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a [u8] {libproto::Transaction::get_value}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:47
        _3 = Len((*_4));                 // scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:47
        _2 = Gt(move _3, const 32_usize); // scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:52
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:198:12: 198:52
    }

    bb2: {
        _6 = const transaction::Error::ParseError; // scope 0 at cita-chain/types/src/transaction.rs:199:24: 199:41
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x00)) }
        _0 = Result::<transaction::Transaction, transaction::Error>::Err(move _6); // scope 0 at cita-chain/types/src/transaction.rs:199:20: 199:42
        goto -> bb61;                    // scope 0 at no-location
    }

    bb3: {
        _7 = libproto::Transaction::get_version(_1) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:202:23: 202:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:202:41: 202:52
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> u32 {libproto::Transaction::get_version}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = libproto::Transaction::get_nonce(_1) -> bb5; // scope 1 at cita-chain/types/src/transaction.rs:204:20: 204:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:204:38: 204:47
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a str {libproto::Transaction::get_nonce}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _11;                       // scope 1 at cita-chain/types/src/transaction.rs:204:20: 204:60
        _9 = <str as ToOwned>::to_owned(move _10) -> bb6; // scope 1 at cita-chain/types/src/transaction.rs:204:20: 204:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:204:50: 204:58
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = <U256 as Default>::default() -> [return: bb7, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:205:24: 205:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:205:24: 205:37
                                         // + literal: Const { ty: fn() -> U256 {<U256 as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = libproto::Transaction::get_quota(_1) -> [return: bb8, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:206:29: 206:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:206:47: 206:56
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> u64 {libproto::Transaction::get_quota}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = <U256 as From<u64>>::from(move _14) -> [return: bb9, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:206:18: 206:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:206:18: 206:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> U256 {<U256 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = _7;                        // scope 1 at cita-chain/types/src/transaction.rs:208:20: 208:27
        switchInt(move _16) -> [0: bb10, otherwise: bb32]; // scope 1 at cita-chain/types/src/transaction.rs:208:20: 208:32
    }

    bb10: {
        _19 = libproto::Transaction::get_to(_1) -> [return: bb11, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:209:39: 209:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:209:57: 209:63
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a str {libproto::Transaction::get_to}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = _19;                       // scope 1 at cita-chain/types/src/transaction.rs:209:39: 209:65
        _17 = clean_0x(move _18) -> [return: bb12, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:209:30: 209:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:209:30: 209:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {clean_0x}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = <str as PartialEq>::eq(_17, const "") -> [return: bb13, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:211:25: 211:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:211:25: 211:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:211:25: 211:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _20) -> [0: bb14, otherwise: bb21]; // scope 2 at cita-chain/types/src/transaction.rs:211:25: 211:27
    }

    bb14: {
        _21 = <str as PartialEq>::eq(_17, const "ffffffffffffffffffffffffffffffffff010000") -> [return: bb15, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:212:25: 212:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:212:25: 212:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:212:25: 212:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        switchInt(move _21) -> [0: bb16, otherwise: bb22]; // scope 2 at cita-chain/types/src/transaction.rs:212:25: 212:38
    }

    bb16: {
        _22 = <str as PartialEq>::eq(_17, const "ffffffffffffffffffffffffffffffffff010001") -> [return: bb17, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:213:25: 213:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:213:25: 213:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:213:25: 213:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        switchInt(move _22) -> [0: bb18, otherwise: bb23]; // scope 2 at cita-chain/types/src/transaction.rs:213:25: 213:36
    }

    bb18: {
        _23 = <str as PartialEq>::eq(_17, const "ffffffffffffffffffffffffffffffffff010002") -> [return: bb19, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:214:25: 214:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:214:25: 214:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:214:25: 214:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _23) -> [0: bb20, otherwise: bb24]; // scope 2 at cita-chain/types/src/transaction.rs:214:25: 214:38
    }

    bb20: {
        _27 = _17;                       // scope 2 at cita-chain/types/src/transaction.rs:215:61: 215:63
        _26 = <H160 as FromStr>::from_str(move _27) -> [return: bb25, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:215:43: 215:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H160, <H160 as FromStr>::Err> {<H160 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb21: {
        _15 = Action::Create;            // scope 2 at cita-chain/types/src/transaction.rs:211:31: 211:45
        goto -> bb50;                    // scope 2 at cita-chain/types/src/transaction.rs:211:31: 211:45
    }

    bb22: {
        _15 = Action::Store;             // scope 2 at cita-chain/types/src/transaction.rs:212:42: 212:55
        goto -> bb50;                    // scope 2 at cita-chain/types/src/transaction.rs:212:42: 212:55
    }

    bb23: {
        _15 = Action::AbiStore;          // scope 2 at cita-chain/types/src/transaction.rs:213:40: 213:56
        goto -> bb50;                    // scope 2 at cita-chain/types/src/transaction.rs:213:40: 213:56
    }

    bb24: {
        _15 = Action::AmendData;         // scope 2 at cita-chain/types/src/transaction.rs:214:42: 214:59
        goto -> bb50;                    // scope 2 at cita-chain/types/src/transaction.rs:214:42: 214:59
    }

    bb25: {
        _25 = Result::<H160, rustc_hex::FromHexError>::map_err::<transaction::Error, [closure@cita-chain/types/src/transaction.rs:215:73: 215:76]>(move _26, const ZeroSized: [closure@cita-chain/types/src/transaction.rs:215:73: 215:76]) -> [return: bb26, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:95
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:215:65: 215:72
                                         // + literal: Const { ty: fn(Result<H160, rustc_hex::FromHexError>, [closure@cita-chain/types/src/transaction.rs:215:73: 215:76]) -> Result<H160, transaction::Error> {Result::<H160, rustc_hex::FromHexError>::map_err::<transaction::Error, [closure@cita-chain/types/src/transaction.rs:215:73: 215:76]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/types/src/transaction.rs:215:73: 215:76], val: Value(<ZST>) }
    }

    bb26: {
        _24 = <Result<H160, transaction::Error> as Try>::branch(move _25) -> [return: bb27, unwind: bb64]; // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:215:43: 215:96
                                         // + literal: Const { ty: fn(Result<H160, transaction::Error>) -> ControlFlow<<Result<H160, transaction::Error> as Try>::Residual, <Result<H160, transaction::Error> as Try>::Output> {<Result<H160, transaction::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb27: {
        _28 = discriminant(_24);         // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
        switchInt(move _28) -> [0: bb28, 1: bb30, otherwise: bb29]; // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
    }

    bb28: {
        _30 = ((_24 as Continue).0: cita_types::H160); // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
        _15 = Action::Call(_30);         // scope 2 at cita-chain/types/src/transaction.rs:215:30: 215:97
        goto -> bb50;                    // scope 2 at cita-chain/types/src/transaction.rs:215:96: 215:97
    }

    bb29: {
        unreachable;                     // scope 2 at cita-chain/types/src/transaction.rs:215:43: 215:96
    }

    bb30: {
        _29 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, transaction::Error>); // scope 2 at cita-chain/types/src/transaction.rs:215:95: 215:96
        _0 = <Result<transaction::Transaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual(move _29) -> [return: bb31, unwind: bb64]; // scope 4 at cita-chain/types/src/transaction.rs:215:43: 215:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:215:95: 215:96
                                         // + literal: Const { ty: fn(Result<Infallible, transaction::Error>) -> Result<transaction::Transaction, transaction::Error> {<Result<transaction::Transaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_9) -> bb61;                // scope 1 at cita-chain/types/src/transaction.rs:241:9: 241:10
    }

    bb32: {
        _31 = libproto::Transaction::get_to_v1(_1) -> [return: bb33, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:218:30: 218:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:218:48: 218:57
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a [u8] {libproto::Transaction::get_to_v1}, val: Value(<ZST>) }
    }

    bb33: {
        _33 = _31;                       // scope 7 at cita-chain/types/src/transaction.rs:219:24: 219:37
        _32 = core::slice::<impl [u8]>::is_empty(move _33) -> [return: bb34, unwind: bb64]; // scope 7 at cita-chain/types/src/transaction.rs:219:24: 219:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:219:27: 219:35
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> bool {core::slice::<impl [u8]>::is_empty}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _32) -> [0: bb36, otherwise: bb35]; // scope 7 at cita-chain/types/src/transaction.rs:219:24: 219:37
    }

    bb35: {
        _15 = Action::Create;            // scope 7 at cita-chain/types/src/transaction.rs:220:25: 220:39
        goto -> bb50;                    // scope 7 at cita-chain/types/src/transaction.rs:219:21: 229:22
    }

    bb36: {
        _35 = _31;                       // scope 7 at cita-chain/types/src/transaction.rs:222:53: 222:55
        _34 = <H160 as From<&[u8]>>::from(move _35) -> [return: bb37, unwind: bb64]; // scope 7 at cita-chain/types/src/transaction.rs:222:39: 222:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:222:39: 222:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb37: {
        _39 = &_34;                      // scope 8 at cita-chain/types/src/transaction.rs:223:31: 223:50
        _38 = <H160 as cita_types::traits::LowerHex>::lower_hex(move _39) -> [return: bb38, unwind: bb64]; // scope 8 at cita-chain/types/src/transaction.rs:223:31: 223:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:223:39: 223:48
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> std::string::String {<H160 as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb38: {
        _37 = &_38;                      // scope 8 at cita-chain/types/src/transaction.rs:223:31: 223:59
        _36 = std::string::String::as_str(move _37) -> [return: bb39, unwind: bb63]; // scope 8 at cita-chain/types/src/transaction.rs:223:31: 223:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:223:51: 223:57
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a str {std::string::String::as_str}, val: Value(<ZST>) }
    }

    bb39: {
        _40 = <str as PartialEq>::eq(_36, const "ffffffffffffffffffffffffffffffffff010000") -> [return: bb40, unwind: bb63]; // scope 8 at cita-chain/types/src/transaction.rs:224:29: 224:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:224:29: 224:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:224:29: 224:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        switchInt(move _40) -> [0: bb41, otherwise: bb46]; // scope 8 at cita-chain/types/src/transaction.rs:224:29: 224:42
    }

    bb41: {
        _41 = <str as PartialEq>::eq(_36, const "ffffffffffffffffffffffffffffffffff010001") -> [return: bb42, unwind: bb63]; // scope 8 at cita-chain/types/src/transaction.rs:225:29: 225:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:225:29: 225:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:225:29: 225:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        switchInt(move _41) -> [0: bb43, otherwise: bb47]; // scope 8 at cita-chain/types/src/transaction.rs:225:29: 225:40
    }

    bb43: {
        _42 = <str as PartialEq>::eq(_36, const "ffffffffffffffffffffffffffffffffff010002") -> [return: bb44, unwind: bb63]; // scope 8 at cita-chain/types/src/transaction.rs:226:29: 226:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:226:29: 226:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:226:29: 226:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb44: {
        switchInt(move _42) -> [0: bb45, otherwise: bb48]; // scope 8 at cita-chain/types/src/transaction.rs:226:29: 226:42
    }

    bb45: {
        _43 = _34;                       // scope 8 at cita-chain/types/src/transaction.rs:227:47: 227:54
        _15 = Action::Call(move _43);    // scope 8 at cita-chain/types/src/transaction.rs:227:34: 227:55
        goto -> bb49;                    // scope 8 at cita-chain/types/src/transaction.rs:227:54: 227:55
    }

    bb46: {
        _15 = Action::Store;             // scope 8 at cita-chain/types/src/transaction.rs:224:46: 224:59
        goto -> bb49;                    // scope 8 at cita-chain/types/src/transaction.rs:224:46: 224:59
    }

    bb47: {
        _15 = Action::AbiStore;          // scope 8 at cita-chain/types/src/transaction.rs:225:44: 225:60
        goto -> bb49;                    // scope 8 at cita-chain/types/src/transaction.rs:225:44: 225:60
    }

    bb48: {
        _15 = Action::AmendData;         // scope 8 at cita-chain/types/src/transaction.rs:226:46: 226:63
        goto -> bb49;                    // scope 8 at cita-chain/types/src/transaction.rs:226:46: 226:63
    }

    bb49: {
        drop(_38) -> [return: bb50, unwind: bb64]; // scope 7 at cita-chain/types/src/transaction.rs:229:21: 229:22
    }

    bb50: {
        _45 = libproto::Transaction::get_value(_1) -> [return: bb51, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:232:31: 232:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:232:49: 232:58
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a [u8] {libproto::Transaction::get_value}, val: Value(<ZST>) }
    }

    bb51: {
        _44 = <U256 as From<&[u8]>>::from(move _45) -> [return: bb52, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:232:20: 232:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:232:20: 232:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<U256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb52: {
        _47 = libproto::Transaction::get_data(_1) -> [return: bb53, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:233:31: 233:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:233:49: 233:57
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a [u8] {libproto::Transaction::get_data}, val: Value(<ZST>) }
    }

    bb53: {
        _46 = <Vec<u8> as From<&[u8]>>::from(move _47) -> [return: bb54, unwind: bb64]; // scope 1 at cita-chain/types/src/transaction.rs:233:19: 233:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:233:19: 233:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[u8]) -> Vec<u8> {<Vec<u8> as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb54: {
        _48 = libproto::Transaction::get_valid_until_block(_1) -> [return: bb55, unwind: bb62]; // scope 1 at cita-chain/types/src/transaction.rs:234:26: 234:67
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:234:44: 234:65
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> u64 {libproto::Transaction::get_valid_until_block}, val: Value(<ZST>) }
    }

    bb55: {
        _50 = _7;                        // scope 1 at cita-chain/types/src/transaction.rs:235:26: 235:33
        switchInt(move _50) -> [0: bb56, otherwise: bb58]; // scope 1 at cita-chain/types/src/transaction.rs:235:26: 235:38
    }

    bb56: {
        _51 = libproto::Transaction::get_chain_id(_1) -> [return: bb57, unwind: bb62]; // scope 1 at cita-chain/types/src/transaction.rs:236:17: 236:49
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:236:35: 236:47
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> u32 {libproto::Transaction::get_chain_id}, val: Value(<ZST>) }
    }

    bb57: {
        _49 = <u32 as Into<U256>>::into(move _51) -> [return: bb66, unwind: bb62]; // scope 1 at cita-chain/types/src/transaction.rs:236:17: 236:56
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:236:50: 236:54
                                         // + literal: Const { ty: fn(u32) -> U256 {<u32 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb58: {
        _53 = libproto::Transaction::get_chain_id_v1(_1) -> [return: bb59, unwind: bb62]; // scope 1 at cita-chain/types/src/transaction.rs:238:17: 238:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:238:35: 238:50
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> &'a [u8] {libproto::Transaction::get_chain_id_v1}, val: Value(<ZST>) }
    }

    bb59: {
        _52 = _53;                       // scope 1 at cita-chain/types/src/transaction.rs:238:17: 238:59
        _49 = <&[u8] as Into<U256>>::into(move _52) -> [return: bb67, unwind: bb62]; // scope 1 at cita-chain/types/src/transaction.rs:238:17: 238:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:238:53: 238:57
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<&[u8] as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb60: {
        _54 = _7;                        // scope 1 at cita-chain/types/src/transaction.rs:240:13: 240:20
        _8 = transaction::Transaction { nonce: move _9, gas_price: move _12, gas: move _13, action: move _15, value: move _44, data: move _46, block_limit: move _48, chain_id: move _49, version: move _54 }; // scope 1 at cita-chain/types/src/transaction.rs:203:12: 241:10
        _0 = Result::<transaction::Transaction, transaction::Error>::Ok(move _8); // scope 1 at cita-chain/types/src/transaction.rs:203:9: 241:11
        goto -> bb61;                    // scope 0 at cita-chain/types/src/transaction.rs:242:6: 242:6
    }

    bb61: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:242:6: 242:6
    }

    bb62 (cleanup): {
        drop(_46) -> bb64;               // scope 1 at cita-chain/types/src/transaction.rs:241:9: 241:10
    }

    bb63 (cleanup): {
        drop(_38) -> bb64;               // scope 7 at cita-chain/types/src/transaction.rs:229:21: 229:22
    }

    bb64 (cleanup): {
        drop(_9) -> bb65;                // scope 1 at cita-chain/types/src/transaction.rs:241:9: 241:10
    }

    bb65 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:197:5: 242:6
    }

    bb66: {
        goto -> bb60;                    // scope 1 at cita-chain/types/src/transaction.rs:236:17: 236:56
    }

    bb67: {
        goto -> bb60;                    // scope 1 at cita-chain/types/src/transaction.rs:238:17: 238:59
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::create::{closure#0}(_1: [closure@cita-chain/types/src/transaction.rs:215:73: 215:76], _2: rustc_hex::FromHexError) -> transaction::Error {
    let mut _0: transaction::Error;      // return place in scope 0 at cita-chain/types/src/transaction.rs:215:77: 215:77

    bb0: {
        _0 = const transaction::Error::ParseError; // scope 0 at cita-chain/types/src/transaction.rs:215:77: 215:94
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:215:94: 215:94
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::nonce(_1: &transaction::Transaction) -> &std::string::String {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:244:18: 244:23
    let mut _0: &std::string::String;    // return place in scope 0 at cita-chain/types/src/transaction.rs:245:9: 245:20

    bb0: {
        _0 = &((*_1).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:245:9: 245:20
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:246:6: 246:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::action(_1: &transaction::Transaction) -> &Action {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:248:19: 248:24
    let mut _0: &transaction::Action;    // return place in scope 0 at cita-chain/types/src/transaction.rs:249:9: 249:21

    bb0: {
        _0 = &((*_1).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:249:9: 249:21
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:250:6: 250:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::gas_price(_1: &transaction::Transaction) -> U256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:252:22: 252:27
    let mut _0: cita_types::U256;        // return place in scope 0 at cita-chain/types/src/transaction.rs:252:32: 252:36

    bb0: {
        _0 = ((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:253:9: 253:23
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:254:6: 254:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::fake_sign(_1: transaction::Transaction, _2: H160) -> transaction::SignedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:257:22: 257:26
    debug from => _2;                    // in scope 0 at cita-chain/types/src/transaction.rs:257:28: 257:32
    let mut _0: transaction::SignedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:257:46: 257:63
    let _3: crypto::Signature;           // in scope 0 at cita-chain/types/src/transaction.rs:258:13: 258:22
    let mut _4: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:260:26: 265:14
    let mut _5: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:261:27: 261:31
    let mut _6: crypto::Signature;       // in scope 0 at cita-chain/types/src/transaction.rs:262:17: 262:26
    let mut _7: cita_types::H256;        // in scope 0 at cita-chain/types/src/transaction.rs:263:23: 263:31
    let mut _8: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:264:30: 264:51
    let mut _9: cita_types::H512;        // in scope 0 at cita-chain/types/src/transaction.rs:267:21: 267:38
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:269:5: 269:6
    scope 1 {
        debug signature => _3;           // in scope 1 at cita-chain/types/src/transaction.rs:258:13: 258:22
    }

    bb0: {
        _10 = const false;               // scope 0 at cita-chain/types/src/transaction.rs:258:13: 258:22
        _10 = const true;                // scope 0 at cita-chain/types/src/transaction.rs:258:13: 258:22
        _3 = <Signature as Default>::default() -> [return: bb1, unwind: bb9]; // scope 0 at cita-chain/types/src/transaction.rs:258:25: 258:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:258:25: 258:43
                                         // + literal: Const { ty: fn() -> Signature {<Signature as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const false;               // scope 1 at cita-chain/types/src/transaction.rs:261:27: 261:31
        _5 = move _1;                    // scope 1 at cita-chain/types/src/transaction.rs:261:27: 261:31
        _6 = move _3;                    // scope 1 at cita-chain/types/src/transaction.rs:262:17: 262:26
        _7 = <u64 as Into<H256>>::into(const 0_u64) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/types/src/transaction.rs:263:23: 263:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:263:25: 263:29
                                         // + literal: Const { ty: fn(u64) -> H256 {<u64 as Into<H256>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = <CryptoType as Default>::default() -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/types/src/transaction.rs:264:30: 264:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:264:30: 264:49
                                         // + literal: Const { ty: fn() -> CryptoType {<CryptoType as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = transaction::UnverifiedTransaction { unsigned: move _5, signature: move _6, crypto_type: move _8, hash: move _7 }; // scope 1 at cita-chain/types/src/transaction.rs:260:26: 265:14
        _9 = <H512 as Default>::default() -> [return: bb4, unwind: bb5]; // scope 1 at cita-chain/types/src/transaction.rs:267:21: 267:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:267:21: 267:36
                                         // + literal: Const { ty: fn() -> H512 {<H512 as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = transaction::SignedTransaction { transaction: move _4, sender: _2, public: move _9 }; // scope 1 at cita-chain/types/src/transaction.rs:259:9: 268:10
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:269:6: 269:6
    }

    bb5 (cleanup): {
        drop(_4) -> bb9;                 // scope 1 at cita-chain/types/src/transaction.rs:268:9: 268:10
    }

    bb6 (cleanup): {
        drop(_5) -> bb9;                 // scope 1 at cita-chain/types/src/transaction.rs:265:13: 265:14
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:257:5: 269:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at cita-chain/types/src/transaction.rs:269:5: 269:6
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/transaction.rs:269:5: 269:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::rlp_append_unsigned_transaction(_1: &transaction::Transaction, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:272:44: 272:49
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:272:51: 272:52
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:272:70: 272:70
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:273:9: 273:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:274:9: 274:30
    let _5: &std::string::String;        // in scope 0 at cita-chain/types/src/transaction.rs:274:18: 274:29
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:275:9: 275:34
    let _7: &cita_types::U256;           // in scope 0 at cita-chain/types/src/transaction.rs:275:18: 275:33
    let _8: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:276:9: 276:28
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/types/src/transaction.rs:276:18: 276:27
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:277:9: 277:31
    let _11: &transaction::Action;       // in scope 0 at cita-chain/types/src/transaction.rs:277:18: 277:30
    let _12: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:278:9: 278:30
    let _13: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:278:18: 278:29
    let _14: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:279:9: 279:29
    let _15: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/transaction.rs:279:18: 279:28
    let _16: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:280:9: 280:36
    let _17: &u64;                       // in scope 0 at cita-chain/types/src/transaction.rs:280:18: 280:35
    let mut _18: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:281:12: 281:24
    let _19: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:282:13: 282:54
    let _20: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:282:29: 282:53
    let _21: u32;                        // in scope 0 at cita-chain/types/src/transaction.rs:282:30: 282:53
    let mut _22: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:282:30: 282:53
    let _23: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:284:13: 284:45
    let _24: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:284:30: 284:44
    let _25: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:286:9: 286:32
    let _26: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:286:18: 286:31

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 9_usize) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:273:9: 273:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:273:11: 273:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:274:18: 274:29
        _4 = rlp::RlpStream::append::<std::string::String>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:274:9: 274:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:274:11: 274:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b std::string::String) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<std::string::String>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:275:18: 275:33
        _6 = rlp::RlpStream::append::<U256>(_2, _7) -> bb3; // scope 0 at cita-chain/types/src/transaction.rs:275:9: 275:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:275:11: 275:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).2: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:276:18: 276:27
        _8 = rlp::RlpStream::append::<U256>(_2, _9) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:276:9: 276:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:276:11: 276:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:277:18: 277:30
        _10 = rlp::RlpStream::append::<Action>(_2, _11) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:277:9: 277:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:277:11: 277:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Action) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Action>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).4: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:278:18: 278:29
        _12 = rlp::RlpStream::append::<U256>(_2, _13) -> bb6; // scope 0 at cita-chain/types/src/transaction.rs:278:9: 278:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:278:11: 278:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).5: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/transaction.rs:279:18: 279:28
        _14 = rlp::RlpStream::append::<Vec<u8>>(_2, _15) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:279:9: 279:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:279:11: 279:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Vec<u8>) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = &((*_1).6: u64);           // scope 0 at cita-chain/types/src/transaction.rs:280:18: 280:35
        _16 = rlp::RlpStream::append::<u64>(_2, _17) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:280:9: 280:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:280:11: 280:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u64) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u64>}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = ((*_1).8: u32);            // scope 0 at cita-chain/types/src/transaction.rs:281:12: 281:24
        switchInt(move _18) -> [0: bb9, otherwise: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:281:12: 281:32
    }

    bb9: {
        _22 = &((*_1).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:282:30: 282:53
        _21 = U256::low_u32(move _22) -> bb10; // scope 0 at cita-chain/types/src/transaction.rs:282:30: 282:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:282:44: 282:51
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u32 {U256::low_u32}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = &_21;                      // scope 0 at cita-chain/types/src/transaction.rs:282:29: 282:53
        _19 = rlp::RlpStream::append::<u32>(_2, _20) -> bb12; // scope 0 at cita-chain/types/src/transaction.rs:282:13: 282:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:282:15: 282:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u32) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u32>}, val: Value(<ZST>) }
    }

    bb11: {
        _24 = &((*_1).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:284:30: 284:44
        _23 = rlp::RlpStream::append::<U256>(_2, _24) -> bb12; // scope 0 at cita-chain/types/src/transaction.rs:284:13: 284:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:284:15: 284:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = &((*_1).8: u32);           // scope 0 at cita-chain/types/src/transaction.rs:286:18: 286:31
        _25 = rlp::RlpStream::append::<u32>(_2, _26) -> bb13; // scope 0 at cita-chain/types/src/transaction.rs:286:9: 286:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:286:11: 286:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u32) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u32>}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:287:6: 287:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::proto_transaction(_1: &transaction::Transaction) -> libproto::Transaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:290:30: 290:35
    let mut _0: libproto::Transaction;   // return place in scope 0 at cita-chain/types/src/transaction.rs:291:13: 291:19
    let _2: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:292:9: 292:41
    let mut _3: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:292:9: 292:41
    let mut _4: std::string::String;     // in scope 0 at cita-chain/types/src/transaction.rs:292:22: 292:40
    let mut _5: &std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:292:22: 292:40
    let _6: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:293:9: 293:51
    let mut _7: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:293:9: 293:51
    let mut _8: u64;                     // in scope 0 at cita-chain/types/src/transaction.rs:293:34: 293:50
    let _9: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:294:9: 294:39
    let mut _10: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:294:9: 294:39
    let mut _11: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:294:21: 294:38
    let mut _12: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/types/src/transaction.rs:294:21: 294:38
    let _13: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:295:9: 295:40
    let mut _14: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:295:9: 295:40
    let mut _15: u64;                    // in scope 0 at cita-chain/types/src/transaction.rs:295:22: 295:39
    let mut _16: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:295:22: 295:39
    let _17: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:296:9: 296:60
    let mut _18: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:296:9: 296:60
    let mut _19: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:296:22: 296:59
    let mut _20: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:296:22: 296:59
    let mut _21: &[u8; 32];              // in scope 0 at cita-chain/types/src/transaction.rs:296:22: 296:59
    let _22: [u8; 32];                   // in scope 0 at cita-chain/types/src/transaction.rs:296:22: 296:50
    let mut _23: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:296:39: 296:49
    let mut _24: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:297:12: 297:24
    let _25: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:298:13: 298:53
    let mut _26: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:298:13: 298:53
    let mut _27: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:298:29: 298:52
    let mut _28: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:298:29: 298:52
    let _29: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:300:13: 300:73
    let mut _30: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:300:13: 300:73
    let mut _31: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:300:32: 300:72
    let mut _32: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:300:32: 300:72
    let mut _33: &[u8; 32];              // in scope 0 at cita-chain/types/src/transaction.rs:300:32: 300:72
    let _34: [u8; 32];                   // in scope 0 at cita-chain/types/src/transaction.rs:300:32: 300:63
    let mut _35: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:300:49: 300:62
    let _36: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:302:9: 302:37
    let mut _37: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:302:9: 302:37
    let mut _38: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:302:24: 302:36
    let _39: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:304:9: 322:10
    let mut _40: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:304:12: 304:24
    let mut _41: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:306:17: 306:31
    let mut _42: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:306:35: 306:48
    let mut _44: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:307:41: 307:66
    let mut _45: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:307:51: 307:65
    let mut _46: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:308:34: 308:65
    let mut _47: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:308:44: 308:64
    let _48: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:308:44: 308:57
    let mut _49: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:309:37: 309:66
    let mut _50: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:309:47: 309:65
    let _51: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:309:47: 309:58
    let mut _52: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:310:38: 310:69
    let mut _53: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:310:48: 310:68
    let _54: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:310:48: 310:61
    let mut _55: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:314:17: 314:31
    let mut _56: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:314:35: 314:48
    let mut _58: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:315:41: 315:66
    let mut _59: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:315:54: 315:65
    let mut _60: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:315:54: 315:65
    let _61: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:315:54: 315:65
    let mut _62: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:316:34: 316:98
    let mut _63: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:97
    let mut _64: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:97
    let _65: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:97
    let mut _66: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:97
    let _67: cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:88
    let mut _68: std::result::Result<cita_types::H160, rustc_hex::FromHexError>; // in scope 0 at cita-chain/types/src/transaction.rs:316:47: 316:79
    let _69: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:316:65: 316:78
    let mut _70: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:317:37: 317:99
    let mut _71: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:98
    let mut _72: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:98
    let _73: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:98
    let mut _74: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:98
    let _75: cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:89
    let mut _76: std::result::Result<cita_types::H160, rustc_hex::FromHexError>; // in scope 0 at cita-chain/types/src/transaction.rs:317:50: 317:80
    let _77: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:317:68: 317:79
    let mut _78: &mut libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:319:21: 319:85
    let mut _79: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:84
    let mut _80: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:84
    let _81: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:84
    let mut _82: &cita_types::H160;      // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:84
    let _83: cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:75
    let mut _84: std::result::Result<cita_types::H160, rustc_hex::FromHexError>; // in scope 0 at cita-chain/types/src/transaction.rs:319:34: 319:66
    let _85: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:319:52: 319:65
    scope 1 {
        debug pt => _0;                  // in scope 1 at cita-chain/types/src/transaction.rs:291:13: 291:19
        let _43: &cita_types::H160;      // in scope 1 at cita-chain/types/src/transaction.rs:307:30: 307:36
        let _57: &cita_types::H160;      // in scope 1 at cita-chain/types/src/transaction.rs:315:30: 315:36
        scope 2 {
            debug to => _43;             // in scope 2 at cita-chain/types/src/transaction.rs:307:30: 307:36
        }
        scope 3 {
            debug to => _57;             // in scope 3 at cita-chain/types/src/transaction.rs:315:30: 315:36
        }
    }

    bb0: {
        _0 = libproto::Transaction::new() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:291:22: 291:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:291:22: 291:43
                                         // + literal: Const { ty: fn() -> libproto::Transaction {libproto::Transaction::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/types/src/transaction.rs:292:9: 292:41
        _5 = &((*_1).0: std::string::String); // scope 1 at cita-chain/types/src/transaction.rs:292:22: 292:40
        _4 = <std::string::String as Clone>::clone(move _5) -> [return: bb2, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:292:22: 292:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:292:33: 292:38
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = libproto::Transaction::set_nonce(move _3, move _4) -> [return: bb3, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:292:9: 292:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:292:12: 292:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, std::string::String) {libproto::Transaction::set_nonce}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &mut _0;                    // scope 1 at cita-chain/types/src/transaction.rs:293:9: 293:51
        _8 = ((*_1).6: u64);             // scope 1 at cita-chain/types/src/transaction.rs:293:34: 293:50
        _6 = libproto::Transaction::set_valid_until_block(move _7, move _8) -> [return: bb4, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:293:9: 293:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:293:12: 293:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, u64) {libproto::Transaction::set_valid_until_block}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:294:9: 294:39
        _12 = &((*_1).5: std::vec::Vec<u8>); // scope 1 at cita-chain/types/src/transaction.rs:294:21: 294:38
        _11 = <Vec<u8> as Clone>::clone(move _12) -> [return: bb5, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:294:21: 294:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:294:31: 294:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = libproto::Transaction::set_data(move _10, move _11) -> [return: bb6, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:294:9: 294:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:294:12: 294:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_data}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:295:9: 295:40
        _16 = &((*_1).2: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:295:22: 295:39
        _15 = U256::as_u64(move _16) -> [return: bb7, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:295:22: 295:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:295:31: 295:37
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::as_u64}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = libproto::Transaction::set_quota(move _14, move _15) -> [return: bb8, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:295:9: 295:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:295:12: 295:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, u64) {libproto::Transaction::set_quota}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:296:9: 296:60
        _23 = ((*_1).4: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:296:39: 296:49
        _22 = <[u8; 32] as From<U256>>::from(move _23) -> [return: bb9, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:296:22: 296:50
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:296:22: 296:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(U256) -> [u8; 32] {<[u8; 32] as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = &_22;                      // scope 1 at cita-chain/types/src/transaction.rs:296:22: 296:59
        _20 = move _21 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:296:22: 296:59
        _19 = slice::<impl [u8]>::to_vec(move _20) -> [return: bb10, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:296:22: 296:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:296:51: 296:57
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = libproto::Transaction::set_value(move _18, move _19) -> [return: bb11, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:296:9: 296:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:296:12: 296:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_value}, val: Value(<ZST>) }
    }

    bb11: {
        _24 = ((*_1).8: u32);            // scope 1 at cita-chain/types/src/transaction.rs:297:12: 297:24
        switchInt(move _24) -> [0: bb12, otherwise: bb14]; // scope 1 at cita-chain/types/src/transaction.rs:297:12: 297:29
    }

    bb12: {
        _26 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:298:13: 298:53
        _28 = &((*_1).7: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:298:29: 298:52
        _27 = U256::low_u32(move _28) -> [return: bb13, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:298:29: 298:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:298:43: 298:50
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u32 {U256::low_u32}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = libproto::Transaction::set_chain_id(move _26, move _27) -> [return: bb54, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:298:13: 298:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:298:16: 298:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, u32) {libproto::Transaction::set_chain_id}, val: Value(<ZST>) }
    }

    bb14: {
        _30 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:300:13: 300:73
        _35 = ((*_1).7: cita_types::U256); // scope 1 at cita-chain/types/src/transaction.rs:300:49: 300:62
        _34 = <[u8; 32] as From<U256>>::from(move _35) -> [return: bb15, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:300:32: 300:63
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:300:32: 300:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(U256) -> [u8; 32] {<[u8; 32] as From<U256>>::from}, val: Value(<ZST>) }
    }

    bb15: {
        _33 = &_34;                      // scope 1 at cita-chain/types/src/transaction.rs:300:32: 300:72
        _32 = move _33 as &[u8] (Pointer(Unsize)); // scope 1 at cita-chain/types/src/transaction.rs:300:32: 300:72
        _31 = slice::<impl [u8]>::to_vec(move _32) -> [return: bb16, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:300:32: 300:72
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:300:64: 300:70
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = libproto::Transaction::set_chain_id_v1(move _30, move _31) -> [return: bb55, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:300:13: 300:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:300:16: 300:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_chain_id_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _37 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:302:9: 302:37
        _38 = ((*_1).8: u32);            // scope 1 at cita-chain/types/src/transaction.rs:302:24: 302:36
        _36 = libproto::Transaction::set_version(move _37, move _38) -> [return: bb18, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:302:9: 302:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:302:12: 302:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, u32) {libproto::Transaction::set_version}, val: Value(<ZST>) }
    }

    bb18: {
        _40 = ((*_1).8: u32);            // scope 1 at cita-chain/types/src/transaction.rs:304:12: 304:24
        switchInt(move _40) -> [0: bb19, otherwise: bb30]; // scope 1 at cita-chain/types/src/transaction.rs:304:12: 304:29
    }

    bb19: {
        _41 = discriminant(((*_1).3: transaction::Action)); // scope 1 at cita-chain/types/src/transaction.rs:305:19: 305:30
        switchInt(move _41) -> [0: bb25, 1: bb22, 2: bb23, 3: bb27, 4: bb20, otherwise: bb21]; // scope 1 at cita-chain/types/src/transaction.rs:305:13: 305:30
    }

    bb20: {
        _52 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:310:38: 310:69
        _54 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:310:48: 310:61
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:310:48: 310:61
                                         // + literal: Const { ty: &str, val: Unevaluated(AMEND_ADDRESS, [], None) }
        _53 = <&str as Into<std::string::String>>::into(_54) -> [return: bb29, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:310:48: 310:68
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:310:62: 310:66
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        unreachable;                     // scope 1 at cita-chain/types/src/transaction.rs:305:19: 305:30
    }

    bb22: {
        _42 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:306:35: 306:48
        _39 = libproto::Transaction::clear_to(move _42) -> [return: bb56, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:306:35: 306:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:306:38: 306:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction) {libproto::Transaction::clear_to}, val: Value(<ZST>) }
    }

    bb23: {
        _43 = &((((*_1).3: transaction::Action) as Call).0: cita_types::H160); // scope 1 at cita-chain/types/src/transaction.rs:307:30: 307:36
        _44 = &mut _0;                   // scope 2 at cita-chain/types/src/transaction.rs:307:41: 307:66
        _45 = <H160 as cita_types::traits::LowerHex>::lower_hex(_43) -> [return: bb24, unwind: bb52]; // scope 2 at cita-chain/types/src/transaction.rs:307:51: 307:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:307:54: 307:63
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> std::string::String {<H160 as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb24: {
        _39 = libproto::Transaction::set_to(move _44, move _45) -> [return: bb57, unwind: bb52]; // scope 2 at cita-chain/types/src/transaction.rs:307:41: 307:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:307:44: 307:50
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, std::string::String) {libproto::Transaction::set_to}, val: Value(<ZST>) }
    }

    bb25: {
        _46 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:308:34: 308:65
        _48 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:308:44: 308:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:308:44: 308:57
                                         // + literal: Const { ty: &str, val: Unevaluated(STORE_ADDRESS, [], None) }
        _47 = <&str as Into<std::string::String>>::into(_48) -> [return: bb26, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:308:44: 308:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:308:58: 308:62
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb26: {
        _39 = libproto::Transaction::set_to(move _46, move _47) -> [return: bb58, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:308:34: 308:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:308:37: 308:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, std::string::String) {libproto::Transaction::set_to}, val: Value(<ZST>) }
    }

    bb27: {
        _49 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:309:37: 309:66
        _51 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:309:47: 309:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:309:47: 309:58
                                         // + literal: Const { ty: &str, val: Unevaluated(ABI_ADDRESS, [], None) }
        _50 = <&str as Into<std::string::String>>::into(_51) -> [return: bb28, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:309:47: 309:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:309:59: 309:63
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<&str as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb28: {
        _39 = libproto::Transaction::set_to(move _49, move _50) -> [return: bb59, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:309:37: 309:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:309:40: 309:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, std::string::String) {libproto::Transaction::set_to}, val: Value(<ZST>) }
    }

    bb29: {
        _39 = libproto::Transaction::set_to(move _52, move _53) -> [return: bb60, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:310:38: 310:69
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:310:41: 310:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, std::string::String) {libproto::Transaction::set_to}, val: Value(<ZST>) }
    }

    bb30: {
        _55 = discriminant(((*_1).3: transaction::Action)); // scope 1 at cita-chain/types/src/transaction.rs:313:19: 313:30
        switchInt(move _55) -> [0: bb37, 1: bb33, 2: bb34, 3: bb42, 4: bb31, otherwise: bb32]; // scope 1 at cita-chain/types/src/transaction.rs:313:13: 313:30
    }

    bb31: {
        _78 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:319:21: 319:85
        _85 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:319:52: 319:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:52: 319:65
                                         // + literal: Const { ty: &str, val: Unevaluated(AMEND_ADDRESS, [], None) }
        _84 = <H160 as FromStr>::from_str(_85) -> [return: bb47, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:34: 319:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H160, <H160 as FromStr>::Err> {<H160 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb32: {
        unreachable;                     // scope 1 at cita-chain/types/src/transaction.rs:313:19: 313:30
    }

    bb33: {
        _56 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:314:35: 314:48
        _39 = libproto::Transaction::clear_to(move _56) -> [return: bb61, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:314:35: 314:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:314:38: 314:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction) {libproto::Transaction::clear_to}, val: Value(<ZST>) }
    }

    bb34: {
        _57 = &((((*_1).3: transaction::Action) as Call).0: cita_types::H160); // scope 1 at cita-chain/types/src/transaction.rs:315:30: 315:36
        _58 = &mut _0;                   // scope 3 at cita-chain/types/src/transaction.rs:315:41: 315:66
        _61 = <H160 as Deref>::deref(_57) -> [return: bb35, unwind: bb52]; // scope 3 at cita-chain/types/src/transaction.rs:315:54: 315:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:315:54: 315:65
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb35: {
        _60 = _61;                       // scope 3 at cita-chain/types/src/transaction.rs:315:54: 315:65
        _59 = slice::<impl [u8]>::to_vec(move _60) -> [return: bb36, unwind: bb52]; // scope 3 at cita-chain/types/src/transaction.rs:315:54: 315:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:315:57: 315:63
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb36: {
        _39 = libproto::Transaction::set_to_v1(move _58, move _59) -> [return: bb62, unwind: bb52]; // scope 3 at cita-chain/types/src/transaction.rs:315:41: 315:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:315:44: 315:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_to_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _62 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:316:34: 316:98
        _69 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:316:65: 316:78
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:65: 316:78
                                         // + literal: Const { ty: &str, val: Unevaluated(STORE_ADDRESS, [], None) }
        _68 = <H160 as FromStr>::from_str(_69) -> [return: bb38, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:47: 316:64
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H160, <H160 as FromStr>::Err> {<H160 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb38: {
        _67 = Result::<H160, rustc_hex::FromHexError>::unwrap(move _68) -> [return: bb39, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:88
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:80: 316:86
                                         // + literal: Const { ty: fn(Result<H160, rustc_hex::FromHexError>) -> H160 {Result::<H160, rustc_hex::FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb39: {
        _66 = &_67;                      // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:97
        _65 = <H160 as Deref>::deref(move _66) -> [return: bb40, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:47: 316:97
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb40: {
        _64 = _65;                       // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:97
        _63 = slice::<impl [u8]>::to_vec(move _64) -> [return: bb41, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:316:47: 316:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:89: 316:95
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb41: {
        _39 = libproto::Transaction::set_to_v1(move _62, move _63) -> [return: bb63, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:316:34: 316:98
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:316:37: 316:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_to_v1}, val: Value(<ZST>) }
    }

    bb42: {
        _70 = &mut _0;                   // scope 1 at cita-chain/types/src/transaction.rs:317:37: 317:99
        _77 = const _;                   // scope 1 at cita-chain/types/src/transaction.rs:317:68: 317:79
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:68: 317:79
                                         // + literal: Const { ty: &str, val: Unevaluated(ABI_ADDRESS, [], None) }
        _76 = <H160 as FromStr>::from_str(_77) -> [return: bb43, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:80
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:50: 317:67
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<H160, <H160 as FromStr>::Err> {<H160 as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb43: {
        _75 = Result::<H160, rustc_hex::FromHexError>::unwrap(move _76) -> [return: bb44, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:89
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:81: 317:87
                                         // + literal: Const { ty: fn(Result<H160, rustc_hex::FromHexError>) -> H160 {Result::<H160, rustc_hex::FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb44: {
        _74 = &_75;                      // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:98
        _73 = <H160 as Deref>::deref(move _74) -> [return: bb45, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:98
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:50: 317:98
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _72 = _73;                       // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:98
        _71 = slice::<impl [u8]>::to_vec(move _72) -> [return: bb46, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:317:50: 317:98
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:90: 317:96
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb46: {
        _39 = libproto::Transaction::set_to_v1(move _70, move _71) -> [return: bb64, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:317:37: 317:99
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:317:40: 317:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_to_v1}, val: Value(<ZST>) }
    }

    bb47: {
        _83 = Result::<H160, rustc_hex::FromHexError>::unwrap(move _84) -> [return: bb48, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:67: 319:73
                                         // + literal: Const { ty: fn(Result<H160, rustc_hex::FromHexError>) -> H160 {Result::<H160, rustc_hex::FromHexError>::unwrap}, val: Value(<ZST>) }
    }

    bb48: {
        _82 = &_83;                      // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:84
        _81 = <H160 as Deref>::deref(move _82) -> [return: bb49, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:34: 319:84
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb49: {
        _80 = _81;                       // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:84
        _79 = slice::<impl [u8]>::to_vec(move _80) -> [return: bb50, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:319:34: 319:84
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:76: 319:82
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb50: {
        _39 = libproto::Transaction::set_to_v1(move _78, move _79) -> [return: bb65, unwind: bb52]; // scope 1 at cita-chain/types/src/transaction.rs:319:21: 319:85
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:319:24: 319:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Transaction, Vec<u8>) {libproto::Transaction::set_to_v1}, val: Value(<ZST>) }
    }

    bb51: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:324:6: 324:6
    }

    bb52 (cleanup): {
        drop(_0) -> bb53;                // scope 0 at cita-chain/types/src/transaction.rs:324:5: 324:6
    }

    bb53 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:290:5: 324:6
    }

    bb54: {
        goto -> bb17;                    // scope 1 at cita-chain/types/src/transaction.rs:298:13: 298:53
    }

    bb55: {
        goto -> bb17;                    // scope 1 at cita-chain/types/src/transaction.rs:300:13: 300:73
    }

    bb56: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:306:35: 306:48
    }

    bb57: {
        goto -> bb51;                    // scope 2 at cita-chain/types/src/transaction.rs:307:41: 307:66
    }

    bb58: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:308:34: 308:65
    }

    bb59: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:309:37: 309:66
    }

    bb60: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:310:38: 310:69
    }

    bb61: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:314:35: 314:48
    }

    bb62: {
        goto -> bb51;                    // scope 3 at cita-chain/types/src/transaction.rs:315:41: 315:66
    }

    bb63: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:316:34: 316:98
    }

    bb64: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:317:37: 317:99
    }

    bb65: {
        goto -> bb51;                    // scope 1 at cita-chain/types/src/transaction.rs:319:21: 319:85
    }
}

transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::proto_transaction::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/transaction.rs:296:28: 296:30

    bb0: {
        _0 = const 32_usize;             // scope 0 at cita-chain/types/src/transaction.rs:296:28: 296:30
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:296:28: 296:30
    }
}

transaction::<impl at cita-chain/types/src/transaction.rs:195:1: 195:17>::proto_transaction::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/types/src/transaction.rs:300:38: 300:40

    bb0: {
        _0 = const 32_usize;             // scope 0 at cita-chain/types/src/transaction.rs:300:38: 300:40
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:300:38: 300:40
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:328:10: 328:17>::default() -> transaction::UnverifiedTransaction {
    let mut _0: transaction::UnverifiedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:328:10: 328:17
    let mut _1: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _2: crypto::Signature;       // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _3: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15

    bb0: {
        _1 = <transaction::Transaction as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // + literal: Const { ty: fn() -> transaction::Transaction {<transaction::Transaction as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Signature as Default>::default() -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // + literal: Const { ty: fn() -> Signature {<Signature as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <CryptoType as Default>::default() -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // + literal: Const { ty: fn() -> CryptoType {<CryptoType as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <H256 as Default>::default() -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = transaction::UnverifiedTransaction { unsigned: move _1, signature: move _2, crypto_type: move _3, hash: move _4 }; // scope 0 at cita-chain/types/src/transaction.rs:328:10: 328:17
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:328:17: 328:17
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at cita-chain/types/src/transaction.rs:328:16: 328:17
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:328:10: 328:17
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:328:19: 328:24>::fmt(_1: &transaction::UnverifiedTransaction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let _6: &transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let _9: &crypto::Signature;          // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let _10: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let _12: &transaction::CryptoType;   // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let _13: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let _15: &&cita_types::H256;         // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let _16: &cita_types::H256;          // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15

    bb0: {
        _3 = const "UnverifiedTransaction"; // scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:328:19: 328:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "unsigned";           // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
        _7 = const "signature";          // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        _10 = const "crypto_type";       // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        _13 = const "hash";              // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _15 = &_16;                      // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:328:19: 328:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:328:19: 328:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field4_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:328:24: 328:24
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:328:26: 328:31>::clone(_1: &transaction::UnverifiedTransaction) -> transaction::UnverifiedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:328:26: 328:31
    let mut _0: transaction::UnverifiedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:328:26: 328:31
    let mut _2: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let _3: &transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _4: crypto::Signature;       // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let _5: &crypto::Signature;          // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _6: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let _7: &transaction::CryptoType;    // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15

    bb0: {
        _3 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
        _2 = <transaction::Transaction as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::Transaction) -> transaction::Transaction {<transaction::Transaction as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        _4 = <Signature as Clone>::clone(_5) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // + literal: Const { ty: for<'a> fn(&'a Signature) -> Signature {<Signature as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        _6 = <CryptoType as Clone>::clone(_7) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // + literal: Const { ty: for<'a> fn(&'a CryptoType) -> CryptoType {<CryptoType as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _8 = <H256 as Clone>::clone(_9) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = transaction::UnverifiedTransaction { unsigned: move _2, signature: move _4, crypto_type: move _6, hash: move _8 }; // scope 0 at cita-chain/types/src/transaction.rs:328:26: 328:31
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:328:31: 328:31
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-chain/types/src/transaction.rs:328:30: 328:31
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:328:26: 328:31
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:328:33: 328:42>::eq(_1: &transaction::UnverifiedTransaction, _2: &transaction::UnverifiedTransaction) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:328:33: 328:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:328:33: 328:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:328:33: 328:42
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _5: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _6: &transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _7: &transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
    let mut _8: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _9: &crypto::Signature;      // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _10: &crypto::Signature;     // in scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    let mut _11: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _12: &transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _13: &transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    let mut _14: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let mut _15: &cita_types::H256;      // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    let mut _16: &cita_types::H256;      // in scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15

    bb0: {
        _6 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
        _7 = &((*_2).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
        _5 = <transaction::Transaction as PartialEq>::eq(move _6, move _7) -> bb10; // scope 0 at cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:331:5: 331:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a transaction::Transaction, &'b transaction::Transaction) -> bool {<transaction::Transaction as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    }

    bb2: {
        _15 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _16 = &((*_2).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        _14 = <H256 as PartialEq>::eq(move _15, move _16) -> bb13; // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:337:5: 337:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:328:42: 328:42
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    }

    bb5: {
        _12 = &((*_1).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        _13 = &((*_2).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        _11 = <CryptoType as PartialEq>::eq(move _12, move _13) -> bb12; // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:335:5: 335:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a CryptoType, &'b CryptoType) -> bool {<CryptoType as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    }

    bb7: {
        _4 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    }

    bb8: {
        _9 = &((*_1).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        _10 = &((*_2).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        _8 = <Signature as PartialEq>::eq(move _9, move _10) -> bb11; // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:333:5: 333:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Signature, &'b Signature) -> bool {<Signature as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    }

    bb10: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    }

    bb11: {
        _4 = move _8;                    // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
        goto -> bb9;                     // scope 0 at cita-chain/types/src/transaction.rs:333:5: 333:25
    }

    bb12: {
        _3 = move _11;                   // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:335:5: 335:28
    }

    bb13: {
        _0 = move _14;                   // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:337:5: 337:15
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:328:44: 328:46>::assert_receiver_is_total_eq(_1: &transaction::UnverifiedTransaction) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:328:44: 328:46
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:328:44: 328:46
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:328:46: 328:46
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:340:1: 340:37>::deref(_1: &transaction::UnverifiedTransaction) -> &transaction::Transaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:343:14: 343:19
    let mut _0: &transaction::Transaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:344:9: 344:23

    bb0: {
        _0 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:344:9: 344:23
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:345:6: 345:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:348:1: 348:40>::deref_mut(_1: &mut transaction::UnverifiedTransaction) -> &mut transaction::Transaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:349:18: 349:27
    let mut _0: &mut transaction::Transaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:350:9: 350:27

    bb0: {
        _0 = &mut ((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:350:9: 350:27
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:351:6: 351:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:354:1: 354:41>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {
    debug d => _1;                       // in scope 0 at cita-chain/types/src/transaction.rs:355:15: 355:16
    let mut _0: std::result::Result<transaction::UnverifiedTransaction, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction.rs:355:36: 355:62
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:26
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:356:26: 356:27
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:356:26: 356:27
    let _6: usize;                       // in scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
    let mut _7: rlp::DecoderError;       // in scope 0 at cita-chain/types/src/transaction.rs:357:24: 357:57
    let mut _8: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:359:12: 364:10
    let mut _9: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, transaction::Transaction>; // in scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
    let mut _11: std::result::Result<transaction::Transaction, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:34
    let mut _12: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:360:34: 360:35
    let _13: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:360:34: 360:35
    let _14: transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, crypto::Signature>; // in scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
    let mut _16: std::result::Result<crypto::Signature, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:35
    let mut _17: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:361:35: 361:36
    let _18: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:361:35: 361:36
    let _19: crypto::Signature;          // in scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, transaction::CryptoType>; // in scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
    let mut _21: std::result::Result<transaction::CryptoType, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:37
    let mut _22: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:362:37: 362:38
    let _23: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:362:37: 362:38
    let _24: transaction::CryptoType;    // in scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
    let mut _26: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:30
    let mut _27: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:363:30: 363:31
    let _28: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:363:30: 363:31
    let _29: cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/transaction.rs:356:26: 356:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/transaction.rs:356:12: 356:27
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _13;           // in scope 5 at cita-chain/types/src/transaction.rs:360:34: 360:35
        scope 6 {
        }
    }
    scope 7 {
        debug val => _14;                // in scope 7 at cita-chain/types/src/transaction.rs:360:23: 360:35
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _18;           // in scope 9 at cita-chain/types/src/transaction.rs:361:35: 361:36
        scope 10 {
        }
    }
    scope 11 {
        debug val => _19;                // in scope 11 at cita-chain/types/src/transaction.rs:361:24: 361:36
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _23;           // in scope 13 at cita-chain/types/src/transaction.rs:362:37: 362:38
        scope 14 {
        }
    }
    scope 15 {
        debug val => _24;                // in scope 15 at cita-chain/types/src/transaction.rs:362:26: 362:38
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _28;           // in scope 17 at cita-chain/types/src/transaction.rs:363:30: 363:31
        scope 18 {
        }
    }
    scope 19 {
        debug val => _29;                // in scope 19 at cita-chain/types/src/transaction.rs:363:19: 363:31
        scope 20 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:356:14: 356:24
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:356:12: 356:27
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
        switchInt(move _6) -> [4: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:32
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:356:12: 356:27
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:356:26: 356:27
        _0 = <Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb31; // scope 2 at cita-chain/types/src/transaction.rs:356:12: 356:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:356:26: 356:27
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {<Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = RlpIncorrectListLen;        // scope 0 at cita-chain/types/src/transaction.rs:357:24: 357:57
        _0 = Result::<transaction::UnverifiedTransaction, rlp::DecoderError>::Err(move _7); // scope 0 at cita-chain/types/src/transaction.rs:357:20: 357:58
        goto -> bb31;                    // scope 0 at cita-chain/types/src/transaction.rs:357:13: 357:58
    }

    bb7: {
        _11 = rlp::UntrustedRlp::<'_>::val_at::<transaction::Transaction>(_1, const 0_usize) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:360:25: 360:31
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<transaction::Transaction, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<transaction::Transaction>}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = <Result<transaction::Transaction, rlp::DecoderError> as Try>::branch(move _11) -> bb9; // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:360:23: 360:35
                                         // + literal: Const { ty: fn(Result<transaction::Transaction, rlp::DecoderError>) -> ControlFlow<<Result<transaction::Transaction, rlp::DecoderError> as Try>::Residual, <Result<transaction::Transaction, rlp::DecoderError> as Try>::Output> {<Result<transaction::Transaction, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = discriminant(_10);         // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
        switchInt(move _12) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
    }

    bb10: {
        _14 = move ((_10 as Continue).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
        _9 = move _14;                   // scope 8 at cita-chain/types/src/transaction.rs:360:23: 360:35
        _16 = rlp::UntrustedRlp::<'_>::val_at::<Signature>(_1, const 1_usize) -> [return: bb13, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:361:26: 361:32
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Signature, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Signature>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:360:23: 360:35
    }

    bb12: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:360:34: 360:35
        _0 = <Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _13) -> bb31; // scope 6 at cita-chain/types/src/transaction.rs:360:23: 360:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:360:34: 360:35
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {<Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = <Result<Signature, rlp::DecoderError> as Try>::branch(move _16) -> [return: bb14, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:361:24: 361:36
                                         // + literal: Const { ty: fn(Result<Signature, rlp::DecoderError>) -> ControlFlow<<Result<Signature, rlp::DecoderError> as Try>::Residual, <Result<Signature, rlp::DecoderError> as Try>::Output> {<Result<Signature, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = discriminant(_15);         // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
        switchInt(move _17) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
    }

    bb15: {
        _19 = move ((_15 as Continue).0: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
        _21 = rlp::UntrustedRlp::<'_>::val_at::<CryptoType>(_1, const 2_usize) -> [return: bb19, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:362:28: 362:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<CryptoType, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<CryptoType>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:361:24: 361:36
    }

    bb17: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:361:35: 361:36
        _0 = <Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _18) -> [return: bb18, unwind: bb32]; // scope 10 at cita-chain/types/src/transaction.rs:361:24: 361:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:361:35: 361:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {<Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_9) -> bb31;                // scope 0 at cita-chain/types/src/transaction.rs:364:9: 364:10
    }

    bb19: {
        _20 = <Result<CryptoType, rlp::DecoderError> as Try>::branch(move _21) -> [return: bb20, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:362:26: 362:38
                                         // + literal: Const { ty: fn(Result<CryptoType, rlp::DecoderError>) -> ControlFlow<<Result<CryptoType, rlp::DecoderError> as Try>::Residual, <Result<CryptoType, rlp::DecoderError> as Try>::Output> {<Result<CryptoType, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb20: {
        _22 = discriminant(_20);         // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
        switchInt(move _22) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
    }

    bb21: {
        _24 = move ((_20 as Continue).0: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
        _26 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 3_usize) -> [return: bb25, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:363:21: 363:27
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:362:26: 362:38
    }

    bb23: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:362:37: 362:38
        _0 = <Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _23) -> [return: bb24, unwind: bb32]; // scope 14 at cita-chain/types/src/transaction.rs:362:26: 362:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:362:37: 362:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {<Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_9) -> bb31;                // scope 0 at cita-chain/types/src/transaction.rs:364:9: 364:10
    }

    bb25: {
        _25 = <Result<H256, rlp::DecoderError> as Try>::branch(move _26) -> [return: bb26, unwind: bb32]; // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:363:19: 363:31
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb26: {
        _27 = discriminant(_25);         // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
        switchInt(move _27) -> [0: bb27, 1: bb29, otherwise: bb28]; // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
    }

    bb27: {
        _29 = ((_25 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
        _8 = transaction::UnverifiedTransaction { unsigned: move _9, signature: move _19, crypto_type: move _24, hash: _29 }; // scope 0 at cita-chain/types/src/transaction.rs:359:12: 364:10
        _0 = Result::<transaction::UnverifiedTransaction, rlp::DecoderError>::Ok(move _8); // scope 0 at cita-chain/types/src/transaction.rs:359:9: 364:11
        goto -> bb31;                    // scope 0 at cita-chain/types/src/transaction.rs:365:6: 365:6
    }

    bb28: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:363:19: 363:31
    }

    bb29: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:363:30: 363:31
        _0 = <Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _28) -> [return: bb30, unwind: bb32]; // scope 18 at cita-chain/types/src/transaction.rs:363:19: 363:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:363:30: 363:31
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::UnverifiedTransaction, rlp::DecoderError> {<Result<transaction::UnverifiedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_9) -> bb31;                // scope 0 at cita-chain/types/src/transaction.rs:364:9: 364:10
    }

    bb31: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:365:6: 365:6
    }

    bb32 (cleanup): {
        drop(_9) -> bb33;                // scope 0 at cita-chain/types/src/transaction.rs:364:9: 364:10
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:355:5: 365:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:368:1: 368:41>::rlp_append(_1: &transaction::UnverifiedTransaction, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:369:19: 369:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:369:26: 369:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:369:45: 369:45

    bb0: {
        _0 = transaction::UnverifiedTransaction::rlp_append_sealed_transaction(_1, _2) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:370:9: 370:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:370:14: 370:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a transaction::UnverifiedTransaction, &'b mut rlp::RlpStream) {transaction::UnverifiedTransaction::rlp_append_sealed_transaction}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:371:6: 371:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:374:1: 374:27>::create(_1: &libproto::UnverifiedTransaction, _2: H256) -> Result<transaction::UnverifiedTransaction, transaction::Error> {
    debug utx => _1;                     // in scope 0 at cita-chain/types/src/transaction.rs:375:15: 375:18
    debug hash => _2;                    // in scope 0 at cita-chain/types/src/transaction.rs:375:49: 375:53
    let mut _0: std::result::Result<transaction::UnverifiedTransaction, transaction::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:375:64: 375:83
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:60
    let mut _4: usize;                   // in scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:37
    let mut _5: &[u8];                   // in scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:37
    let _6: &[u8];                       // in scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:31
    let mut _7: transaction::Error;      // in scope 0 at cita-chain/types/src/transaction.rs:377:24: 377:47
    let mut _8: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:380:12: 385:10
    let mut _9: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, transaction::Error>, transaction::Transaction>; // in scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
    let mut _11: std::result::Result<transaction::Transaction, transaction::Error>; // in scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:65
    let mut _12: &libproto::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:381:43: 381:64
    let _13: &libproto::Transaction;     // in scope 0 at cita-chain/types/src/transaction.rs:381:43: 381:64
    let mut _14: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:381:65: 381:66
    let _15: std::result::Result<std::convert::Infallible, transaction::Error>; // in scope 0 at cita-chain/types/src/transaction.rs:381:65: 381:66
    let _16: transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
    let mut _17: crypto::Signature;      // in scope 0 at cita-chain/types/src/transaction.rs:382:24: 382:60
    let mut _18: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:382:40: 382:59
    let mut _19: transaction::CryptoType; // in scope 0 at cita-chain/types/src/transaction.rs:383:26: 383:60
    let mut _20: libproto::Crypto;       // in scope 0 at cita-chain/types/src/transaction.rs:383:43: 383:59
    scope 1 {
        debug residual => _15;           // in scope 1 at cita-chain/types/src/transaction.rs:381:65: 381:66
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;                // in scope 3 at cita-chain/types/src/transaction.rs:381:23: 381:66
        scope 4 {
        }
    }

    bb0: {
        _6 = libproto::UnverifiedTransaction::get_signature(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:376:16: 376:29
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction) -> &'a [u8] {libproto::UnverifiedTransaction::get_signature}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:37
        _4 = Len((*_5));                 // scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:37
        _3 = Ne(move _4, const _);       // scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:60
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:376:12: 376:60
    }

    bb2: {
        _7 = const transaction::Error::InvalidSignature; // scope 0 at cita-chain/types/src/transaction.rs:377:24: 377:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x02)) }
        _0 = Result::<transaction::UnverifiedTransaction, transaction::Error>::Err(move _7); // scope 0 at cita-chain/types/src/transaction.rs:377:20: 377:48
        goto -> bb14;                    // scope 0 at no-location
    }

    bb3: {
        _13 = libproto::UnverifiedTransaction::get_transaction(_1) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:381:43: 381:64
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:381:47: 381:62
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction) -> &'a libproto::Transaction {libproto::UnverifiedTransaction::get_transaction}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = _13;                       // scope 0 at cita-chain/types/src/transaction.rs:381:43: 381:64
        _11 = transaction::Transaction::create(move _12) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:65
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:381:23: 381:42
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Transaction) -> Result<transaction::Transaction, transaction::Error> {transaction::Transaction::create}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = <Result<transaction::Transaction, transaction::Error> as Try>::branch(move _11) -> bb6; // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:381:23: 381:66
                                         // + literal: Const { ty: fn(Result<transaction::Transaction, transaction::Error>) -> ControlFlow<<Result<transaction::Transaction, transaction::Error> as Try>::Residual, <Result<transaction::Transaction, transaction::Error> as Try>::Output> {<Result<transaction::Transaction, transaction::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_10);         // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
        switchInt(move _14) -> [0: bb7, 1: bb9, otherwise: bb8]; // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
    }

    bb7: {
        _16 = move ((_10 as Continue).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
        _9 = move _16;                   // scope 4 at cita-chain/types/src/transaction.rs:381:23: 381:66
        _18 = libproto::UnverifiedTransaction::get_signature(_1) -> [return: bb10, unwind: bb15]; // scope 0 at cita-chain/types/src/transaction.rs:382:40: 382:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:382:44: 382:57
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction) -> &'a [u8] {libproto::UnverifiedTransaction::get_signature}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:381:23: 381:66
    }

    bb9: {
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, transaction::Error>); // scope 0 at cita-chain/types/src/transaction.rs:381:65: 381:66
        _0 = <Result<transaction::UnverifiedTransaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual(move _15) -> bb14; // scope 2 at cita-chain/types/src/transaction.rs:381:23: 381:66
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:381:65: 381:66
                                         // + literal: Const { ty: fn(Result<Infallible, transaction::Error>) -> Result<transaction::UnverifiedTransaction, transaction::Error> {<Result<transaction::UnverifiedTransaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = <Signature as From<&[u8]>>::from(move _18) -> [return: bb11, unwind: bb15]; // scope 0 at cita-chain/types/src/transaction.rs:382:24: 382:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:382:24: 382:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> Signature {<Signature as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = libproto::UnverifiedTransaction::get_crypto(_1) -> [return: bb12, unwind: bb15]; // scope 0 at cita-chain/types/src/transaction.rs:383:43: 383:59
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:383:47: 383:57
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction) -> Crypto {libproto::UnverifiedTransaction::get_crypto}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = <CryptoType as From<Crypto>>::from(move _20) -> [return: bb13, unwind: bb15]; // scope 0 at cita-chain/types/src/transaction.rs:383:26: 383:60
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:383:26: 383:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Crypto) -> CryptoType {<CryptoType as From<Crypto>>::from}, val: Value(<ZST>) }
    }

    bb13: {
        _8 = transaction::UnverifiedTransaction { unsigned: move _9, signature: move _17, crypto_type: move _19, hash: _2 }; // scope 0 at cita-chain/types/src/transaction.rs:380:12: 385:10
        _0 = Result::<transaction::UnverifiedTransaction, transaction::Error>::Ok(move _8); // scope 0 at cita-chain/types/src/transaction.rs:380:9: 385:11
        goto -> bb14;                    // scope 0 at cita-chain/types/src/transaction.rs:386:6: 386:6
    }

    bb14: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:386:6: 386:6
    }

    bb15 (cleanup): {
        drop(_9) -> bb16;                // scope 0 at cita-chain/types/src/transaction.rs:385:9: 385:10
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:375:5: 386:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:374:1: 374:27>::rlp_append_sealed_transaction(_1: &transaction::UnverifiedTransaction, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:389:38: 389:43
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:389:45: 389:46
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:389:64: 389:64
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:390:9: 390:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:391:9: 391:33
    let _5: &transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:391:18: 391:32
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:392:9: 392:34
    let _7: &crypto::Signature;          // in scope 0 at cita-chain/types/src/transaction.rs:392:18: 392:33
    let _8: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:393:9: 393:36
    let _9: &transaction::CryptoType;    // in scope 0 at cita-chain/types/src/transaction.rs:393:18: 393:35
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:394:9: 394:29
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/types/src/transaction.rs:394:18: 394:28

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 4_usize) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:390:9: 390:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:390:11: 390:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:391:18: 391:32
        _4 = rlp::RlpStream::append::<transaction::Transaction>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:391:9: 391:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:391:11: 391:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b transaction::Transaction) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<transaction::Transaction>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:392:18: 392:33
        _6 = rlp::RlpStream::append::<Signature>(_2, _7) -> bb3; // scope 0 at cita-chain/types/src/transaction.rs:392:9: 392:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:392:11: 392:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Signature) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Signature>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:393:18: 393:35
        _8 = rlp::RlpStream::append::<CryptoType>(_2, _9) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:393:9: 393:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:393:11: 393:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b CryptoType) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<CryptoType>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:394:18: 394:28
        _10 = rlp::RlpStream::append::<H256>(_2, _11) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:394:9: 394:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:394:11: 394:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:395:6: 395:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:374:1: 374:27>::as_unsigned(_1: &transaction::UnverifiedTransaction) -> &transaction::Transaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:398:24: 398:29
    let mut _0: &transaction::Transaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:399:9: 399:23

    bb0: {
        _0 = &((*_1).0: transaction::Transaction); // scope 0 at cita-chain/types/src/transaction.rs:399:9: 399:23
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:400:6: 400:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:374:1: 374:27>::hash(_1: &transaction::UnverifiedTransaction) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:402:17: 402:22
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/transaction.rs:402:27: 402:31

    bb0: {
        _0 = ((*_1).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:403:9: 403:18
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:404:6: 404:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:374:1: 374:27>::proto_unverified(_1: &transaction::UnverifiedTransaction) -> libproto::UnverifiedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:407:29: 407:34
    let mut _0: libproto::UnverifiedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:408:13: 408:21
    let mut _3: &transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:409:18: 409:51
    let _4: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:411:9: 411:33
    let mut _5: &mut libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:411:9: 411:33
    let mut _6: libproto::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:411:30: 411:32
    let _7: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:412:9: 412:52
    let mut _8: &mut libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:412:9: 412:52
    let mut _9: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/transaction.rs:412:28: 412:51
    let mut _10: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:412:28: 412:51
    let mut _11: &[u8; 65];              // in scope 0 at cita-chain/types/src/transaction.rs:412:28: 412:51
    let _12: &[u8; 65];                  // in scope 0 at cita-chain/types/src/transaction.rs:412:28: 412:51
    let mut _13: &crypto::Signature;     // in scope 0 at cita-chain/types/src/transaction.rs:412:28: 412:51
    let _14: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:414:9: 417:10
    let mut _15: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:415:13: 415:32
    let mut _16: &mut libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:415:36: 415:73
    let mut _17: libproto::Crypto;       // in scope 0 at cita-chain/types/src/transaction.rs:415:52: 415:72
    let mut _18: &mut libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:416:37: 416:75
    let mut _19: libproto::Crypto;       // in scope 0 at cita-chain/types/src/transaction.rs:416:53: 416:74
    scope 1 {
        debug untx => _0;                // in scope 1 at cita-chain/types/src/transaction.rs:408:13: 408:21
        let _2: libproto::Transaction;   // in scope 1 at cita-chain/types/src/transaction.rs:409:13: 409:15
        scope 2 {
            debug tx => _2;              // in scope 2 at cita-chain/types/src/transaction.rs:409:13: 409:15
        }
    }

    bb0: {
        _0 = libproto::UnverifiedTransaction::new() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:408:24: 408:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:408:24: 408:55
                                         // + literal: Const { ty: fn() -> libproto::UnverifiedTransaction {libproto::UnverifiedTransaction::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &((*_1).0: transaction::Transaction); // scope 1 at cita-chain/types/src/transaction.rs:409:18: 409:51
        _2 = transaction::Transaction::proto_transaction(move _3) -> [return: bb2, unwind: bb11]; // scope 1 at cita-chain/types/src/transaction.rs:409:18: 409:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:409:32: 409:49
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::Transaction) -> libproto::Transaction {transaction::Transaction::proto_transaction}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut _0;                    // scope 2 at cita-chain/types/src/transaction.rs:411:9: 411:33
        _6 = move _2;                    // scope 2 at cita-chain/types/src/transaction.rs:411:30: 411:32
        _4 = libproto::UnverifiedTransaction::set_transaction(move _5, move _6) -> [return: bb3, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:411:9: 411:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:411:14: 411:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::UnverifiedTransaction, libproto::Transaction) {libproto::UnverifiedTransaction::set_transaction}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &mut _0;                    // scope 2 at cita-chain/types/src/transaction.rs:412:9: 412:52
        _13 = &((*_1).1: crypto::Signature); // scope 2 at cita-chain/types/src/transaction.rs:412:28: 412:51
        _12 = <Signature as Deref>::deref(move _13) -> [return: bb4, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:412:28: 412:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:412:28: 412:51
                                         // + literal: Const { ty: for<'a> fn(&'a Signature) -> &'a <Signature as Deref>::Target {<Signature as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _12;                       // scope 2 at cita-chain/types/src/transaction.rs:412:28: 412:51
        _10 = move _11 as &[u8] (Pointer(Unsize)); // scope 2 at cita-chain/types/src/transaction.rs:412:28: 412:51
        _9 = slice::<impl [u8]>::to_vec(move _10) -> [return: bb5, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:412:28: 412:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:412:43: 412:49
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = libproto::UnverifiedTransaction::set_signature(move _8, move _9) -> [return: bb6, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:412:9: 412:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:412:14: 412:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::UnverifiedTransaction, Vec<u8>) {libproto::UnverifiedTransaction::set_signature}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = discriminant(((*_1).2: transaction::CryptoType)); // scope 2 at cita-chain/types/src/transaction.rs:414:15: 414:31
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at cita-chain/types/src/transaction.rs:414:9: 414:31
    }

    bb7: {
        _18 = &mut _0;                   // scope 2 at cita-chain/types/src/transaction.rs:416:37: 416:75
        _19 = const RESERVED;            // scope 2 at cita-chain/types/src/transaction.rs:416:53: 416:74
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Crypto, val: Value(Scalar(0x01)) }
        _14 = libproto::UnverifiedTransaction::set_crypto(move _18, move _19) -> [return: bb13, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:416:37: 416:75
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:416:42: 416:52
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::UnverifiedTransaction, Crypto) {libproto::UnverifiedTransaction::set_crypto}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 2 at cita-chain/types/src/transaction.rs:414:15: 414:31
    }

    bb9: {
        _16 = &mut _0;                   // scope 2 at cita-chain/types/src/transaction.rs:415:36: 415:73
        _17 = const DEFAULT;             // scope 2 at cita-chain/types/src/transaction.rs:415:52: 415:72
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Crypto, val: Value(Scalar(0x00)) }
        _14 = libproto::UnverifiedTransaction::set_crypto(move _16, move _17) -> [return: bb14, unwind: bb11]; // scope 2 at cita-chain/types/src/transaction.rs:415:36: 415:73
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:415:41: 415:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::UnverifiedTransaction, Crypto) {libproto::UnverifiedTransaction::set_crypto}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:419:6: 419:6
    }

    bb11 (cleanup): {
        drop(_0) -> bb12;                // scope 0 at cita-chain/types/src/transaction.rs:419:5: 419:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:407:5: 419:6
    }

    bb13: {
        goto -> bb10;                    // scope 2 at cita-chain/types/src/transaction.rs:416:37: 416:75
    }

    bb14: {
        goto -> bb10;                    // scope 2 at cita-chain/types/src/transaction.rs:415:36: 415:73
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:423:10: 423:17>::default() -> transaction::SignedTransaction {
    let mut _0: transaction::SignedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:423:10: 423:17
    let mut _1: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _2: cita_types::H160;        // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _3: cita_types::H512;        // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19

    bb0: {
        _1 = <transaction::UnverifiedTransaction as Default>::default() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // + literal: Const { ty: fn() -> transaction::UnverifiedTransaction {<transaction::UnverifiedTransaction as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <H160 as Default>::default() -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // + literal: Const { ty: fn() -> H160 {<H160 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <H512 as Default>::default() -> [return: bb3, unwind: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // + literal: Const { ty: fn() -> H512 {<H512 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = transaction::SignedTransaction { transaction: move _1, sender: move _2, public: move _3 }; // scope 0 at cita-chain/types/src/transaction.rs:423:10: 423:17
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:423:17: 423:17
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at cita-chain/types/src/transaction.rs:423:16: 423:17
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:423:10: 423:17
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:423:19: 423:24>::fmt(_1: &transaction::SignedTransaction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
    let _3: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
    let _4: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let _6: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let _9: &cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let _10: &str;                       // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let _12: &&cita_types::H512;         // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let _13: &cita_types::H512;          // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19

    bb0: {
        _3 = const "SignedTransaction";  // scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:423:19: 423:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "transaction";        // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
        _7 = const "sender";             // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        _10 = const "public";            // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _12 = &_13;                      // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:423:19: 423:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:423:19: 423:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:423:24: 423:24
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:423:26: 423:31>::clone(_1: &transaction::SignedTransaction) -> transaction::SignedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:423:26: 423:31
    let mut _0: transaction::SignedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:423:26: 423:31
    let mut _2: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let _3: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _4: cita_types::H160;        // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let _5: &cita_types::H160;           // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _6: cita_types::H512;        // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let _7: &cita_types::H512;           // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19

    bb0: {
        _3 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
        _2 = <transaction::UnverifiedTransaction as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> transaction::UnverifiedTransaction {<transaction::UnverifiedTransaction as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        _4 = <H160 as Clone>::clone(_5) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _6 = <H512 as Clone>::clone(_7) -> [return: bb3, unwind: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // + literal: Const { ty: for<'a> fn(&'a H512) -> H512 {<H512 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = transaction::SignedTransaction { transaction: move _2, sender: move _4, public: move _6 }; // scope 0 at cita-chain/types/src/transaction.rs:423:26: 423:31
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:423:31: 423:31
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/types/src/transaction.rs:423:30: 423:31
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:423:26: 423:31
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:423:33: 423:42>::eq(_1: &transaction::SignedTransaction, _2: &transaction::SignedTransaction) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:423:33: 423:42
    debug other => _2;                   // in scope 0 at cita-chain/types/src/transaction.rs:423:33: 423:42
    let mut _0: bool;                    // return place in scope 0 at cita-chain/types/src/transaction.rs:423:33: 423:42
    let mut _3: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _4: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _5: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _6: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _8: &cita_types::H160;       // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _9: &cita_types::H160;       // in scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    let mut _10: bool;                   // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let mut _11: &cita_types::H512;      // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    let mut _12: &cita_types::H512;      // in scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19

    bb0: {
        _5 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
        _6 = &((*_2).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
        _4 = <transaction::UnverifiedTransaction as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:425:5: 425:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a transaction::UnverifiedTransaction, &'b transaction::UnverifiedTransaction) -> bool {<transaction::UnverifiedTransaction as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    }

    bb2: {
        _11 = &((*_1).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _12 = &((*_2).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        _10 = <H512 as PartialEq>::eq(move _11, move _12) -> bb9; // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:427:5: 427:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H512, &'b H512) -> bool {<H512 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:423:42: 423:42
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    }

    bb5: {
        _8 = &((*_1).1: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        _9 = &((*_2).1: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        _7 = <H160 as PartialEq>::eq(move _8, move _9) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:426:5: 426:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    }

    bb8: {
        _3 = move _7;                    // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
        goto -> bb6;                     // scope 0 at cita-chain/types/src/transaction.rs:426:5: 426:20
    }

    bb9: {
        _0 = move _10;                   // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
        goto -> bb3;                     // scope 0 at cita-chain/types/src/transaction.rs:427:5: 427:19
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:423:44: 423:46>::assert_receiver_is_total_eq(_1: &transaction::SignedTransaction) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:423:44: 423:46
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:423:44: 423:46
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:423:46: 423:46
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:431:1: 431:37>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {
    debug d => _1;                       // in scope 0 at cita-chain/types/src/transaction.rs:432:15: 432:16
    let mut _0: std::result::Result<transaction::SignedTransaction, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction.rs:432:36: 432:62
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:26
    let mut _4: isize;                   // in scope 0 at cita-chain/types/src/transaction.rs:433:26: 433:27
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:433:26: 433:27
    let _6: usize;                       // in scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
    let mut _7: rlp::DecoderError;       // in scope 0 at cita-chain/types/src/transaction.rs:434:24: 434:57
    let _8: cita_types::H512;            // in scope 0 at cita-chain/types/src/transaction.rs:437:13: 437:19
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H512>; // in scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
    let mut _10: std::result::Result<cita_types::H512, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:42
    let mut _11: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:437:42: 437:43
    let _12: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:437:42: 437:43
    let _13: cita_types::H512;           // in scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u32>; // in scope 0 at cita-chain/types/src/transaction.rs:438:23: 438:35
    let mut _15: std::result::Result<u32, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:438:23: 438:34
    let mut _16: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:438:34: 438:35
    let mut _19: transaction::SignedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:440:12: 463:10
    let mut _20: transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:441:26: 460:14
    let mut _21: transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:442:27: 456:18
    let mut _22: std::string::String;    // in scope 0 at cita-chain/types/src/transaction.rs:443:28: 443:40
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::string::String>; // in scope 0 at cita-chain/types/src/transaction.rs:443:28: 443:40
    let mut _24: std::result::Result<std::string::String, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:443:28: 443:39
    let mut _25: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:443:39: 443:40
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:444:32: 444:44
    let mut _29: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:444:32: 444:43
    let mut _30: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:444:43: 444:44
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:445:26: 445:38
    let mut _34: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:445:26: 445:37
    let mut _35: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:445:37: 445:38
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, transaction::Action>; // in scope 0 at cita-chain/types/src/transaction.rs:446:29: 446:41
    let mut _39: std::result::Result<transaction::Action, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:446:29: 446:40
    let mut _40: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:446:40: 446:41
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:447:28: 447:40
    let mut _44: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:447:28: 447:39
    let mut _45: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:447:39: 447:40
    let mut _48: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:448:27: 448:39
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, std::vec::Vec<u8>>; // in scope 0 at cita-chain/types/src/transaction.rs:448:27: 448:39
    let mut _50: std::result::Result<std::vec::Vec<u8>, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:448:27: 448:38
    let mut _51: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:448:38: 448:39
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u64>; // in scope 0 at cita-chain/types/src/transaction.rs:449:34: 449:46
    let mut _55: std::result::Result<u64, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:449:34: 449:45
    let mut _56: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:449:45: 449:46
    let mut _59: cita_types::U256;       // in scope 0 at cita-chain/types/src/transaction.rs:450:31: 454:22
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, u32>; // in scope 0 at cita-chain/types/src/transaction.rs:451:25: 451:44
    let mut _61: std::result::Result<u32, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:451:25: 451:43
    let mut _62: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:451:43: 451:44
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::U256>; // in scope 0 at cita-chain/types/src/transaction.rs:453:25: 453:37
    let mut _66: std::result::Result<cita_types::U256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:453:25: 453:36
    let mut _67: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:453:36: 453:37
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, crypto::Signature>; // in scope 0 at cita-chain/types/src/transaction.rs:457:28: 457:40
    let mut _71: std::result::Result<crypto::Signature, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:457:28: 457:39
    let mut _72: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:457:39: 457:40
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, transaction::CryptoType>; // in scope 0 at cita-chain/types/src/transaction.rs:458:30: 458:43
    let mut _76: std::result::Result<transaction::CryptoType, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:458:30: 458:42
    let mut _77: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:458:42: 458:43
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/transaction.rs:459:23: 459:36
    let mut _81: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction.rs:459:23: 459:35
    let mut _82: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:459:35: 459:36
    let mut _85: cita_types::H160;       // in scope 0 at cita-chain/types/src/transaction.rs:461:21: 461:47
    let _86: &cita_types::H512;          // in scope 0 at cita-chain/types/src/transaction.rs:461:39: 461:46
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/types/src/transaction.rs:433:26: 433:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/types/src/transaction.rs:433:12: 433:27
        scope 4 {
        }
    }
    scope 5 {
        debug public => _8;              // in scope 5 at cita-chain/types/src/transaction.rs:437:13: 437:19
        let _17: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 5 at cita-chain/types/src/transaction.rs:438:34: 438:35
        let _18: u32;                    // in scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
        scope 10 {
            debug version => _18;        // in scope 10 at cita-chain/types/src/transaction.rs:438:13: 438:20
            let _26: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:443:39: 443:40
            let _27: std::string::String; // in scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
            let _31: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:444:43: 444:44
            let _32: cita_types::U256;   // in scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
            let _36: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:445:37: 445:38
            let _37: cita_types::U256;   // in scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
            let _41: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:446:40: 446:41
            let _42: transaction::Action; // in scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
            let _46: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:447:39: 447:40
            let _47: cita_types::U256;   // in scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
            let _52: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:448:38: 448:39
            let _53: std::vec::Vec<u8>;  // in scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
            let _57: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:449:45: 449:46
            let _58: u64;                // in scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
            let _63: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:451:43: 451:44
            let _64: u32;                // in scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
            let _68: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:453:36: 453:37
            let _69: cita_types::U256;   // in scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
            let _73: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:457:39: 457:40
            let _74: crypto::Signature;  // in scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
            let _78: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:458:42: 458:43
            let _79: transaction::CryptoType; // in scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
            let _83: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 10 at cita-chain/types/src/transaction.rs:459:35: 459:36
            let _84: cita_types::H256;   // in scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
            scope 15 {
                debug residual => _26;   // in scope 15 at cita-chain/types/src/transaction.rs:443:39: 443:40
                scope 16 {
                }
            }
            scope 17 {
                debug val => _27;        // in scope 17 at cita-chain/types/src/transaction.rs:443:28: 443:40
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _31;   // in scope 19 at cita-chain/types/src/transaction.rs:444:43: 444:44
                scope 20 {
                }
            }
            scope 21 {
                debug val => _32;        // in scope 21 at cita-chain/types/src/transaction.rs:444:32: 444:44
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _36;   // in scope 23 at cita-chain/types/src/transaction.rs:445:37: 445:38
                scope 24 {
                }
            }
            scope 25 {
                debug val => _37;        // in scope 25 at cita-chain/types/src/transaction.rs:445:26: 445:38
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _41;   // in scope 27 at cita-chain/types/src/transaction.rs:446:40: 446:41
                scope 28 {
                }
            }
            scope 29 {
                debug val => _42;        // in scope 29 at cita-chain/types/src/transaction.rs:446:29: 446:41
                scope 30 {
                }
            }
            scope 31 {
                debug residual => _46;   // in scope 31 at cita-chain/types/src/transaction.rs:447:39: 447:40
                scope 32 {
                }
            }
            scope 33 {
                debug val => _47;        // in scope 33 at cita-chain/types/src/transaction.rs:447:28: 447:40
                scope 34 {
                }
            }
            scope 35 {
                debug residual => _52;   // in scope 35 at cita-chain/types/src/transaction.rs:448:38: 448:39
                scope 36 {
                }
            }
            scope 37 {
                debug val => _53;        // in scope 37 at cita-chain/types/src/transaction.rs:448:27: 448:39
                scope 38 {
                }
            }
            scope 39 {
                debug residual => _57;   // in scope 39 at cita-chain/types/src/transaction.rs:449:45: 449:46
                scope 40 {
                }
            }
            scope 41 {
                debug val => _58;        // in scope 41 at cita-chain/types/src/transaction.rs:449:34: 449:46
                scope 42 {
                }
            }
            scope 43 {
                debug residual => _63;   // in scope 43 at cita-chain/types/src/transaction.rs:451:43: 451:44
                scope 44 {
                }
            }
            scope 45 {
                debug val => _64;        // in scope 45 at cita-chain/types/src/transaction.rs:451:25: 451:44
                scope 46 {
                }
            }
            scope 47 {
                debug residual => _68;   // in scope 47 at cita-chain/types/src/transaction.rs:453:36: 453:37
                scope 48 {
                }
            }
            scope 49 {
                debug val => _69;        // in scope 49 at cita-chain/types/src/transaction.rs:453:25: 453:37
                scope 50 {
                }
            }
            scope 51 {
                debug residual => _73;   // in scope 51 at cita-chain/types/src/transaction.rs:457:39: 457:40
                scope 52 {
                }
            }
            scope 53 {
                debug val => _74;        // in scope 53 at cita-chain/types/src/transaction.rs:457:28: 457:40
                scope 54 {
                }
            }
            scope 55 {
                debug residual => _78;   // in scope 55 at cita-chain/types/src/transaction.rs:458:42: 458:43
                scope 56 {
                }
            }
            scope 57 {
                debug val => _79;        // in scope 57 at cita-chain/types/src/transaction.rs:458:30: 458:43
                scope 58 {
                }
            }
            scope 59 {
                debug residual => _83;   // in scope 59 at cita-chain/types/src/transaction.rs:459:35: 459:36
                scope 60 {
                }
            }
            scope 61 {
                debug val => _84;        // in scope 61 at cita-chain/types/src/transaction.rs:459:23: 459:36
                scope 62 {
                }
            }
        }
        scope 11 {
            debug residual => _17;       // in scope 11 at cita-chain/types/src/transaction.rs:438:34: 438:35
            scope 12 {
            }
        }
        scope 13 {
            debug val => _18;            // in scope 13 at cita-chain/types/src/transaction.rs:438:23: 438:35
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _12;           // in scope 6 at cita-chain/types/src/transaction.rs:437:42: 437:43
        scope 7 {
        }
    }
    scope 8 {
        debug val => _13;                // in scope 8 at cita-chain/types/src/transaction.rs:437:30: 437:43
        scope 9 {
        }
    }

    bb0: {
        _3 = rlp::UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:26
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:433:14: 433:24
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, rlp::DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:433:12: 433:27
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
        switchInt(move _6) -> [13: bb7, otherwise: bb6]; // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:33
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:433:12: 433:27
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:433:26: 433:27
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _5) -> bb92; // scope 2 at cita-chain/types/src/transaction.rs:433:12: 433:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:433:26: 433:27
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = RlpIncorrectListLen;        // scope 0 at cita-chain/types/src/transaction.rs:434:24: 434:57
        _0 = Result::<transaction::SignedTransaction, rlp::DecoderError>::Err(move _7); // scope 0 at cita-chain/types/src/transaction.rs:434:20: 434:58
        goto -> bb92;                    // scope 0 at cita-chain/types/src/transaction.rs:434:13: 434:58
    }

    bb7: {
        _10 = rlp::UntrustedRlp::<'_>::val_at::<H512>(_1, const 12_usize) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:437:32: 437:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H512, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H512>}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = <Result<H512, rlp::DecoderError> as Try>::branch(move _10) -> bb9; // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:437:30: 437:43
                                         // + literal: Const { ty: fn(Result<H512, rlp::DecoderError>) -> ControlFlow<<Result<H512, rlp::DecoderError> as Try>::Residual, <Result<H512, rlp::DecoderError> as Try>::Output> {<Result<H512, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = discriminant(_9);          // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
        switchInt(move _11) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
    }

    bb10: {
        _13 = ((_9 as Continue).0: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
        _8 = _13;                        // scope 9 at cita-chain/types/src/transaction.rs:437:30: 437:43
        _15 = rlp::UntrustedRlp::<'_>::val_at::<u32>(_1, const 8_usize) -> bb13; // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:438:25: 438:31
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u32, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u32>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction.rs:437:30: 437:43
    }

    bb12: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction.rs:437:42: 437:43
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _12) -> bb92; // scope 7 at cita-chain/types/src/transaction.rs:437:30: 437:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:437:42: 437:43
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = <Result<u32, rlp::DecoderError> as Try>::branch(move _15) -> bb14; // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:438:23: 438:35
                                         // + literal: Const { ty: fn(Result<u32, rlp::DecoderError>) -> ControlFlow<<Result<u32, rlp::DecoderError> as Try>::Residual, <Result<u32, rlp::DecoderError> as Try>::Output> {<Result<u32, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _16 = discriminant(_14);         // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
        switchInt(move _16) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
    }

    bb15: {
        _18 = ((_14 as Continue).0: u32); // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
        _24 = rlp::UntrustedRlp::<'_>::val_at::<std::string::String>(_1, const 0_usize) -> bb18; // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:443:30: 443:36
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<std::string::String, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<std::string::String>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 5 at cita-chain/types/src/transaction.rs:438:23: 438:35
    }

    bb17: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 5 at cita-chain/types/src/transaction.rs:438:34: 438:35
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _17) -> bb92; // scope 12 at cita-chain/types/src/transaction.rs:438:23: 438:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:438:34: 438:35
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        _23 = <Result<std::string::String, rlp::DecoderError> as Try>::branch(move _24) -> bb19; // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:443:28: 443:40
                                         // + literal: Const { ty: fn(Result<std::string::String, rlp::DecoderError>) -> ControlFlow<<Result<std::string::String, rlp::DecoderError> as Try>::Residual, <Result<std::string::String, rlp::DecoderError> as Try>::Output> {<Result<std::string::String, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb19: {
        _25 = discriminant(_23);         // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
        switchInt(move _25) -> [0: bb20, 1: bb22, otherwise: bb21]; // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
    }

    bb20: {
        _27 = move ((_23 as Continue).0: std::string::String); // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
        _22 = move _27;                  // scope 18 at cita-chain/types/src/transaction.rs:443:28: 443:40
        _29 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 1_usize) -> [return: bb23, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:444:34: 444:40
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb21: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:443:28: 443:40
    }

    bb22: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:443:39: 443:40
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _26) -> bb92; // scope 16 at cita-chain/types/src/transaction.rs:443:28: 443:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:443:39: 443:40
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb23: {
        _28 = <Result<U256, rlp::DecoderError> as Try>::branch(move _29) -> [return: bb24, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:444:32: 444:44
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb24: {
        _30 = discriminant(_28);         // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
        switchInt(move _30) -> [0: bb25, 1: bb27, otherwise: bb26]; // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
    }

    bb25: {
        _32 = ((_28 as Continue).0: cita_types::U256); // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
        _34 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 2_usize) -> [return: bb29, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:445:28: 445:34
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb26: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:444:32: 444:44
    }

    bb27: {
        _31 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:444:43: 444:44
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _31) -> [return: bb28, unwind: bb97]; // scope 20 at cita-chain/types/src/transaction.rs:444:32: 444:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:444:43: 444:44
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb29: {
        _33 = <Result<U256, rlp::DecoderError> as Try>::branch(move _34) -> [return: bb30, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:445:26: 445:38
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb30: {
        _35 = discriminant(_33);         // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
        switchInt(move _35) -> [0: bb31, 1: bb33, otherwise: bb32]; // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
    }

    bb31: {
        _37 = ((_33 as Continue).0: cita_types::U256); // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
        _39 = rlp::UntrustedRlp::<'_>::val_at::<Action>(_1, const 3_usize) -> [return: bb35, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:446:31: 446:37
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Action, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Action>}, val: Value(<ZST>) }
    }

    bb32: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:445:26: 445:38
    }

    bb33: {
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:445:37: 445:38
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _36) -> [return: bb34, unwind: bb97]; // scope 24 at cita-chain/types/src/transaction.rs:445:26: 445:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:445:37: 445:38
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb35: {
        _38 = <Result<Action, rlp::DecoderError> as Try>::branch(move _39) -> [return: bb36, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:446:29: 446:41
                                         // + literal: Const { ty: fn(Result<Action, rlp::DecoderError>) -> ControlFlow<<Result<Action, rlp::DecoderError> as Try>::Residual, <Result<Action, rlp::DecoderError> as Try>::Output> {<Result<Action, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb36: {
        _40 = discriminant(_38);         // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
        switchInt(move _40) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
    }

    bb37: {
        _42 = move ((_38 as Continue).0: transaction::Action); // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
        _44 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 4_usize) -> [return: bb41, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:447:30: 447:36
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:446:29: 446:41
    }

    bb39: {
        _41 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:446:40: 446:41
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _41) -> [return: bb40, unwind: bb97]; // scope 28 at cita-chain/types/src/transaction.rs:446:29: 446:41
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:446:40: 446:41
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb40: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb41: {
        _43 = <Result<U256, rlp::DecoderError> as Try>::branch(move _44) -> [return: bb42, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:447:28: 447:40
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb42: {
        _45 = discriminant(_43);         // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
        switchInt(move _45) -> [0: bb43, 1: bb45, otherwise: bb44]; // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
    }

    bb43: {
        _47 = ((_43 as Continue).0: cita_types::U256); // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
        _50 = rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>(_1, const 5_usize) -> [return: bb47, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:448:29: 448:35
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Vec<u8>, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb44: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:447:28: 447:40
    }

    bb45: {
        _46 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:447:39: 447:40
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _46) -> [return: bb46, unwind: bb97]; // scope 32 at cita-chain/types/src/transaction.rs:447:28: 447:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:447:39: 447:40
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb46: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb47: {
        _49 = <Result<Vec<u8>, rlp::DecoderError> as Try>::branch(move _50) -> [return: bb48, unwind: bb97]; // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:448:27: 448:39
                                         // + literal: Const { ty: fn(Result<Vec<u8>, rlp::DecoderError>) -> ControlFlow<<Result<Vec<u8>, rlp::DecoderError> as Try>::Residual, <Result<Vec<u8>, rlp::DecoderError> as Try>::Output> {<Result<Vec<u8>, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb48: {
        _51 = discriminant(_49);         // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
        switchInt(move _51) -> [0: bb49, 1: bb51, otherwise: bb50]; // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
    }

    bb49: {
        _53 = move ((_49 as Continue).0: std::vec::Vec<u8>); // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
        _48 = move _53;                  // scope 38 at cita-chain/types/src/transaction.rs:448:27: 448:39
        _55 = rlp::UntrustedRlp::<'_>::val_at::<u64>(_1, const 6_usize) -> [return: bb53, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:449:36: 449:42
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u64, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u64>}, val: Value(<ZST>) }
    }

    bb50: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:448:27: 448:39
    }

    bb51: {
        _52 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:448:38: 448:39
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _52) -> [return: bb52, unwind: bb96]; // scope 36 at cita-chain/types/src/transaction.rs:448:27: 448:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:448:38: 448:39
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb52: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb53: {
        _54 = <Result<u64, rlp::DecoderError> as Try>::branch(move _55) -> [return: bb54, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:449:34: 449:46
                                         // + literal: Const { ty: fn(Result<u64, rlp::DecoderError>) -> ControlFlow<<Result<u64, rlp::DecoderError> as Try>::Residual, <Result<u64, rlp::DecoderError> as Try>::Output> {<Result<u64, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb54: {
        _56 = discriminant(_54);         // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
        switchInt(move _56) -> [0: bb55, 1: bb57, otherwise: bb56]; // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
    }

    bb55: {
        _58 = ((_54 as Continue).0: u64); // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
        switchInt(move _18) -> [0: bb58, otherwise: bb59]; // scope 10 at cita-chain/types/src/transaction.rs:450:34: 450:49
    }

    bb56: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:449:34: 449:46
    }

    bb57: {
        _57 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:449:45: 449:46
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _57) -> [return: bb99, unwind: bb95]; // scope 40 at cita-chain/types/src/transaction.rs:449:34: 449:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:449:45: 449:46
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb58: {
        _61 = rlp::UntrustedRlp::<'_>::val_at::<u32>(_1, const 7_usize) -> [return: bb60, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:451:27: 451:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<u32, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<u32>}, val: Value(<ZST>) }
    }

    bb59: {
        _66 = rlp::UntrustedRlp::<'_>::val_at::<U256>(_1, const 7_usize) -> [return: bb65, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:453:27: 453:33
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<U256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<U256>}, val: Value(<ZST>) }
    }

    bb60: {
        _60 = <Result<u32, rlp::DecoderError> as Try>::branch(move _61) -> [return: bb61, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:451:25: 451:44
                                         // + literal: Const { ty: fn(Result<u32, rlp::DecoderError>) -> ControlFlow<<Result<u32, rlp::DecoderError> as Try>::Residual, <Result<u32, rlp::DecoderError> as Try>::Output> {<Result<u32, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb61: {
        _62 = discriminant(_60);         // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
        switchInt(move _62) -> [0: bb62, 1: bb64, otherwise: bb63]; // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
    }

    bb62: {
        _64 = ((_60 as Continue).0: u32); // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
        _59 = <u32 as Into<U256>>::into(_64) -> [return: bb100, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:451:45: 451:49
                                         // + literal: Const { ty: fn(u32) -> U256 {<u32 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb63: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:44
    }

    bb64: {
        _63 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:451:43: 451:44
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _63) -> [return: bb101, unwind: bb95]; // scope 44 at cita-chain/types/src/transaction.rs:451:25: 451:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:451:43: 451:44
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb65: {
        _65 = <Result<U256, rlp::DecoderError> as Try>::branch(move _66) -> [return: bb66, unwind: bb95]; // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:453:25: 453:37
                                         // + literal: Const { ty: fn(Result<U256, rlp::DecoderError>) -> ControlFlow<<Result<U256, rlp::DecoderError> as Try>::Residual, <Result<U256, rlp::DecoderError> as Try>::Output> {<Result<U256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb66: {
        _67 = discriminant(_65);         // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
        switchInt(move _67) -> [0: bb67, 1: bb69, otherwise: bb68]; // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
    }

    bb67: {
        _69 = ((_65 as Continue).0: cita_types::U256); // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
        _59 = _69;                       // scope 50 at cita-chain/types/src/transaction.rs:453:25: 453:37
        goto -> bb70;                    // scope 10 at cita-chain/types/src/transaction.rs:450:31: 454:22
    }

    bb68: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:453:25: 453:37
    }

    bb69: {
        _68 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:453:36: 453:37
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _68) -> [return: bb102, unwind: bb95]; // scope 48 at cita-chain/types/src/transaction.rs:453:25: 453:37
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:453:36: 453:37
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb70: {
        _21 = transaction::Transaction { nonce: move _22, gas_price: _32, gas: _37, action: move _42, value: _47, data: move _48, block_limit: _58, chain_id: move _59, version: _18 }; // scope 10 at cita-chain/types/src/transaction.rs:442:27: 456:18
        _71 = rlp::UntrustedRlp::<'_>::val_at::<Signature>(_1, const 9_usize) -> [return: bb71, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:457:30: 457:36
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<Signature, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<Signature>}, val: Value(<ZST>) }
    }

    bb71: {
        _70 = <Result<Signature, rlp::DecoderError> as Try>::branch(move _71) -> [return: bb72, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:457:28: 457:40
                                         // + literal: Const { ty: fn(Result<Signature, rlp::DecoderError>) -> ControlFlow<<Result<Signature, rlp::DecoderError> as Try>::Residual, <Result<Signature, rlp::DecoderError> as Try>::Output> {<Result<Signature, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb72: {
        _72 = discriminant(_70);         // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
        switchInt(move _72) -> [0: bb73, 1: bb75, otherwise: bb74]; // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
    }

    bb73: {
        _74 = move ((_70 as Continue).0: crypto::Signature); // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
        _76 = rlp::UntrustedRlp::<'_>::val_at::<CryptoType>(_1, const 10_usize) -> [return: bb77, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:458:32: 458:38
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<CryptoType, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<CryptoType>}, val: Value(<ZST>) }
    }

    bb74: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:457:28: 457:40
    }

    bb75: {
        _73 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:457:39: 457:40
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _73) -> [return: bb76, unwind: bb94]; // scope 52 at cita-chain/types/src/transaction.rs:457:28: 457:40
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:457:39: 457:40
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb76: {
        drop(_21) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:460:13: 460:14
    }

    bb77: {
        _75 = <Result<CryptoType, rlp::DecoderError> as Try>::branch(move _76) -> [return: bb78, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:458:30: 458:43
                                         // + literal: Const { ty: fn(Result<CryptoType, rlp::DecoderError>) -> ControlFlow<<Result<CryptoType, rlp::DecoderError> as Try>::Residual, <Result<CryptoType, rlp::DecoderError> as Try>::Output> {<Result<CryptoType, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb78: {
        _77 = discriminant(_75);         // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
        switchInt(move _77) -> [0: bb79, 1: bb81, otherwise: bb80]; // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
    }

    bb79: {
        _79 = move ((_75 as Continue).0: transaction::CryptoType); // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
        _81 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 11_usize) -> [return: bb83, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:459:25: 459:31
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb80: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:458:30: 458:43
    }

    bb81: {
        _78 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:458:42: 458:43
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _78) -> [return: bb82, unwind: bb94]; // scope 56 at cita-chain/types/src/transaction.rs:458:30: 458:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:458:42: 458:43
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb82: {
        drop(_21) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:460:13: 460:14
    }

    bb83: {
        _80 = <Result<H256, rlp::DecoderError> as Try>::branch(move _81) -> [return: bb84, unwind: bb94]; // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:459:23: 459:36
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb84: {
        _82 = discriminant(_80);         // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
        switchInt(move _82) -> [0: bb85, 1: bb87, otherwise: bb86]; // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
    }

    bb85: {
        _84 = ((_80 as Continue).0: cita_types::H256); // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
        _20 = transaction::UnverifiedTransaction { unsigned: move _21, signature: move _74, crypto_type: move _79, hash: _84 }; // scope 10 at cita-chain/types/src/transaction.rs:441:26: 460:14
        _86 = &_8;                       // scope 10 at cita-chain/types/src/transaction.rs:461:39: 461:46
        _85 = pubkey_to_address(_86) -> [return: bb89, unwind: bb93]; // scope 10 at cita-chain/types/src/transaction.rs:461:21: 461:47
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:461:21: 461:38
                                         // + literal: Const { ty: for<'a> fn(&'a H512) -> H160 {pubkey_to_address}, val: Value(<ZST>) }
    }

    bb86: {
        unreachable;                     // scope 10 at cita-chain/types/src/transaction.rs:459:23: 459:36
    }

    bb87: {
        _83 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 10 at cita-chain/types/src/transaction.rs:459:35: 459:36
        _0 = <Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _83) -> [return: bb88, unwind: bb94]; // scope 60 at cita-chain/types/src/transaction.rs:459:23: 459:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:459:35: 459:36
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<transaction::SignedTransaction, rlp::DecoderError> {<Result<transaction::SignedTransaction, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb88: {
        drop(_21) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:460:13: 460:14
    }

    bb89: {
        _19 = transaction::SignedTransaction { transaction: move _20, sender: move _85, public: _13 }; // scope 10 at cita-chain/types/src/transaction.rs:440:12: 463:10
        _0 = Result::<transaction::SignedTransaction, rlp::DecoderError>::Ok(move _19); // scope 10 at cita-chain/types/src/transaction.rs:440:9: 463:11
        goto -> bb92;                    // scope 0 at cita-chain/types/src/transaction.rs:464:6: 464:6
    }

    bb90: {
        drop(_48) -> [return: bb91, unwind: bb96]; // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb91: {
        drop(_22) -> bb92;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb92: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:464:6: 464:6
    }

    bb93 (cleanup): {
        drop(_20) -> bb98;               // scope 10 at cita-chain/types/src/transaction.rs:463:9: 463:10
    }

    bb94 (cleanup): {
        drop(_21) -> bb98;               // scope 10 at cita-chain/types/src/transaction.rs:460:13: 460:14
    }

    bb95 (cleanup): {
        drop(_48) -> bb96;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb96 (cleanup): {
        drop(_22) -> bb98;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb97 (cleanup): {
        drop(_22) -> bb98;               // scope 10 at cita-chain/types/src/transaction.rs:456:17: 456:18
    }

    bb98 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:432:5: 464:6
    }

    bb99: {
        goto -> bb90;                    // scope 40 at cita-chain/types/src/transaction.rs:449:34: 449:46
    }

    bb100: {
        goto -> bb70;                    // scope 10 at cita-chain/types/src/transaction.rs:451:25: 451:51
    }

    bb101: {
        goto -> bb90;                    // scope 44 at cita-chain/types/src/transaction.rs:451:25: 451:44
    }

    bb102: {
        goto -> bb90;                    // scope 48 at cita-chain/types/src/transaction.rs:453:25: 453:37
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:468:1: 468:37>::rlp_append(_1: &transaction::SignedTransaction, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:469:19: 469:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction.rs:469:26: 469:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction.rs:469:45: 469:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:470:9: 470:25
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:472:9: 472:30
    let _5: &std::string::String;        // in scope 0 at cita-chain/types/src/transaction.rs:472:18: 472:29
    let _6: &transaction::Transaction;   // in scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:29
    let mut _7: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:23
    let _8: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:29
    let _9: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction.rs:473:9: 473:34
    let _10: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:473:18: 473:33
    let _11: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:33
    let mut _12: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:23
    let _13: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:33
    let _14: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:474:9: 474:28
    let _15: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:474:18: 474:27
    let _16: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:27
    let mut _17: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:23
    let _18: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:27
    let _19: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:475:9: 475:31
    let _20: &transaction::Action;       // in scope 0 at cita-chain/types/src/transaction.rs:475:18: 475:30
    let _21: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:30
    let mut _22: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:23
    let _23: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:30
    let _24: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:476:9: 476:30
    let _25: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:476:18: 476:29
    let _26: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:29
    let mut _27: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:23
    let _28: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:29
    let _29: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:477:9: 477:29
    let _30: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/types/src/transaction.rs:477:18: 477:28
    let _31: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:28
    let mut _32: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:23
    let _33: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:28
    let _34: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:478:9: 478:36
    let _35: &u64;                       // in scope 0 at cita-chain/types/src/transaction.rs:478:18: 478:35
    let _36: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:35
    let mut _37: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:23
    let _38: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:35
    let mut _39: u32;                    // in scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
    let mut _40: &transaction::Transaction; // in scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
    let mut _41: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:16
    let _42: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
    let _43: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:480:13: 480:54
    let _44: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:480:29: 480:53
    let _45: u32;                        // in scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:53
    let mut _46: &cita_types::U256;      // in scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:53
    let _47: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:43
    let mut _48: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:34
    let _49: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:43
    let _50: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:482:13: 482:45
    let _51: &cita_types::U256;          // in scope 0 at cita-chain/types/src/transaction.rs:482:30: 482:44
    let _52: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:44
    let mut _53: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:35
    let _54: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:44
    let _55: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:484:9: 484:32
    let _56: &u32;                       // in scope 0 at cita-chain/types/src/transaction.rs:484:18: 484:31
    let _57: &transaction::Transaction;  // in scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:31
    let mut _58: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:23
    let _59: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:31
    let _60: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:486:9: 486:34
    let _61: &crypto::Signature;         // in scope 0 at cita-chain/types/src/transaction.rs:486:18: 486:33
    let _62: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:486:19: 486:33
    let _63: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:487:9: 487:36
    let _64: &transaction::CryptoType;   // in scope 0 at cita-chain/types/src/transaction.rs:487:18: 487:35
    let _65: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:487:19: 487:35
    let _66: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:488:9: 488:29
    let _67: &cita_types::H256;          // in scope 0 at cita-chain/types/src/transaction.rs:488:18: 488:28
    let _68: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:488:19: 488:28
    let _69: &mut rlp::RlpStream;        // in scope 0 at cita-chain/types/src/transaction.rs:490:9: 490:31
    let _70: &cita_types::H512;          // in scope 0 at cita-chain/types/src/transaction.rs:490:18: 490:30

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 13_usize) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:470:9: 470:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:470:11: 470:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb2; // scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:472:19: 472:29
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:23
        _6 = <transaction::UnverifiedTransaction as Deref>::deref(move _7) -> bb3; // scope 0 at cita-chain/types/src/transaction.rs:472:19: 472:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:472:19: 472:29
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &((*_6).0: std::string::String); // scope 0 at cita-chain/types/src/transaction.rs:472:18: 472:29
        _4 = rlp::RlpStream::append::<std::string::String>(_2, _5) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:472:9: 472:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:472:11: 472:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b std::string::String) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<std::string::String>}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb5; // scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:473:19: 473:33
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _13;                       // scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:23
        _11 = <transaction::UnverifiedTransaction as Deref>::deref(move _12) -> bb6; // scope 0 at cita-chain/types/src/transaction.rs:473:19: 473:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:473:19: 473:33
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = &((*_11).1: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:473:18: 473:33
        _9 = rlp::RlpStream::append::<U256>(_2, _10) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:473:9: 473:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:473:11: 473:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:474:19: 474:27
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = _18;                       // scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:23
        _16 = <transaction::UnverifiedTransaction as Deref>::deref(move _17) -> bb9; // scope 0 at cita-chain/types/src/transaction.rs:474:19: 474:27
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:474:19: 474:27
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = &((*_16).2: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:474:18: 474:27
        _14 = rlp::RlpStream::append::<U256>(_2, _15) -> bb10; // scope 0 at cita-chain/types/src/transaction.rs:474:9: 474:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:474:11: 474:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb11; // scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:475:19: 475:30
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = _23;                       // scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:23
        _21 = <transaction::UnverifiedTransaction as Deref>::deref(move _22) -> bb12; // scope 0 at cita-chain/types/src/transaction.rs:475:19: 475:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:475:19: 475:30
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = &((*_21).3: transaction::Action); // scope 0 at cita-chain/types/src/transaction.rs:475:18: 475:30
        _19 = rlp::RlpStream::append::<Action>(_2, _20) -> bb13; // scope 0 at cita-chain/types/src/transaction.rs:475:9: 475:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:475:11: 475:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Action) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Action>}, val: Value(<ZST>) }
    }

    bb13: {
        _28 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb14; // scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:476:19: 476:29
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = _28;                       // scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:23
        _26 = <transaction::UnverifiedTransaction as Deref>::deref(move _27) -> bb15; // scope 0 at cita-chain/types/src/transaction.rs:476:19: 476:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:476:19: 476:29
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = &((*_26).4: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:476:18: 476:29
        _24 = rlp::RlpStream::append::<U256>(_2, _25) -> bb16; // scope 0 at cita-chain/types/src/transaction.rs:476:9: 476:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:476:11: 476:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb16: {
        _33 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb17; // scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:477:19: 477:28
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = _33;                       // scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:23
        _31 = <transaction::UnverifiedTransaction as Deref>::deref(move _32) -> bb18; // scope 0 at cita-chain/types/src/transaction.rs:477:19: 477:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:477:19: 477:28
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = &((*_31).5: std::vec::Vec<u8>); // scope 0 at cita-chain/types/src/transaction.rs:477:18: 477:28
        _29 = rlp::RlpStream::append::<Vec<u8>>(_2, _30) -> bb19; // scope 0 at cita-chain/types/src/transaction.rs:477:9: 477:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:477:11: 477:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Vec<u8>) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb19: {
        _38 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb20; // scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:478:19: 478:35
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _37 = _38;                       // scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:23
        _36 = <transaction::UnverifiedTransaction as Deref>::deref(move _37) -> bb21; // scope 0 at cita-chain/types/src/transaction.rs:478:19: 478:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:478:19: 478:35
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb21: {
        _35 = &((*_36).6: u64);          // scope 0 at cita-chain/types/src/transaction.rs:478:18: 478:35
        _34 = rlp::RlpStream::append::<u64>(_2, _35) -> bb22; // scope 0 at cita-chain/types/src/transaction.rs:478:9: 478:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:478:11: 478:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u64) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u64>}, val: Value(<ZST>) }
    }

    bb22: {
        _42 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb23; // scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:479:12: 479:24
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _41 = _42;                       // scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:16
        _40 = <transaction::UnverifiedTransaction as Deref>::deref(move _41) -> bb24; // scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:479:12: 479:24
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _39 = ((*_40).8: u32);           // scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:24
        switchInt(move _39) -> [0: bb25, otherwise: bb29]; // scope 0 at cita-chain/types/src/transaction.rs:479:12: 479:32
    }

    bb25: {
        _49 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb26; // scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:480:30: 480:43
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        _48 = _49;                       // scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:34
        _47 = <transaction::UnverifiedTransaction as Deref>::deref(move _48) -> bb27; // scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:43
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:480:30: 480:43
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb27: {
        _46 = &((*_47).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:53
        _45 = U256::low_u32(move _46) -> bb28; // scope 0 at cita-chain/types/src/transaction.rs:480:30: 480:53
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:480:44: 480:51
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u32 {U256::low_u32}, val: Value(<ZST>) }
    }

    bb28: {
        _44 = &_45;                      // scope 0 at cita-chain/types/src/transaction.rs:480:29: 480:53
        _43 = rlp::RlpStream::append::<u32>(_2, _44) -> bb32; // scope 0 at cita-chain/types/src/transaction.rs:480:13: 480:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:480:15: 480:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u32) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u32>}, val: Value(<ZST>) }
    }

    bb29: {
        _54 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb30; // scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:482:31: 482:44
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _53 = _54;                       // scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:35
        _52 = <transaction::UnverifiedTransaction as Deref>::deref(move _53) -> bb31; // scope 0 at cita-chain/types/src/transaction.rs:482:31: 482:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:482:31: 482:44
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb31: {
        _51 = &((*_52).7: cita_types::U256); // scope 0 at cita-chain/types/src/transaction.rs:482:30: 482:44
        _50 = rlp::RlpStream::append::<U256>(_2, _51) -> bb32; // scope 0 at cita-chain/types/src/transaction.rs:482:13: 482:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:482:15: 482:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b U256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb32: {
        _59 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb33; // scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:484:19: 484:31
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        _58 = _59;                       // scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:23
        _57 = <transaction::UnverifiedTransaction as Deref>::deref(move _58) -> bb34; // scope 0 at cita-chain/types/src/transaction.rs:484:19: 484:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:484:19: 484:31
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> &'a <transaction::UnverifiedTransaction as Deref>::Target {<transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb34: {
        _56 = &((*_57).8: u32);          // scope 0 at cita-chain/types/src/transaction.rs:484:18: 484:31
        _55 = rlp::RlpStream::append::<u32>(_2, _56) -> bb35; // scope 0 at cita-chain/types/src/transaction.rs:484:9: 484:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:484:11: 484:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b u32) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<u32>}, val: Value(<ZST>) }
    }

    bb35: {
        _62 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb36; // scope 0 at cita-chain/types/src/transaction.rs:486:19: 486:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:486:19: 486:33
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb36: {
        _61 = &((*_62).1: crypto::Signature); // scope 0 at cita-chain/types/src/transaction.rs:486:18: 486:33
        _60 = rlp::RlpStream::append::<Signature>(_2, _61) -> bb37; // scope 0 at cita-chain/types/src/transaction.rs:486:9: 486:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:486:11: 486:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b Signature) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<Signature>}, val: Value(<ZST>) }
    }

    bb37: {
        _65 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb38; // scope 0 at cita-chain/types/src/transaction.rs:487:19: 487:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:487:19: 487:35
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb38: {
        _64 = &((*_65).2: transaction::CryptoType); // scope 0 at cita-chain/types/src/transaction.rs:487:18: 487:35
        _63 = rlp::RlpStream::append::<CryptoType>(_2, _64) -> bb39; // scope 0 at cita-chain/types/src/transaction.rs:487:9: 487:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:487:11: 487:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b CryptoType) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<CryptoType>}, val: Value(<ZST>) }
    }

    bb39: {
        _68 = <transaction::SignedTransaction as Deref>::deref(_1) -> bb40; // scope 0 at cita-chain/types/src/transaction.rs:488:19: 488:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:488:19: 488:28
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb40: {
        _67 = &((*_68).3: cita_types::H256); // scope 0 at cita-chain/types/src/transaction.rs:488:18: 488:28
        _66 = rlp::RlpStream::append::<H256>(_2, _67) -> bb41; // scope 0 at cita-chain/types/src/transaction.rs:488:9: 488:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:488:11: 488:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb41: {
        _70 = &((*_1).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:490:18: 490:30
        _69 = rlp::RlpStream::append::<H512>(_2, _70) -> bb42; // scope 0 at cita-chain/types/src/transaction.rs:490:9: 490:31
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:490:11: 490:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H512) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H512>}, val: Value(<ZST>) }
    }

    bb42: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:491:6: 491:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:494:1: 494:33>::deref(_1: &transaction::SignedTransaction) -> &transaction::UnverifiedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:496:14: 496:19
    let mut _0: &transaction::UnverifiedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:497:9: 497:26

    bb0: {
        _0 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:497:9: 497:26
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:498:6: 498:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:501:1: 501:36>::deref_mut(_1: &mut transaction::SignedTransaction) -> &mut transaction::UnverifiedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:502:18: 502:27
    let mut _0: &mut transaction::UnverifiedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:503:9: 503:30

    bb0: {
        _0 = &mut ((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:503:9: 503:30
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:504:6: 504:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::create(_1: &libproto::SignedTransaction) -> Result<transaction::SignedTransaction, transaction::Error> {
    debug stx => _1;                     // in scope 0 at cita-chain/types/src/transaction.rs:509:19: 509:22
    let mut _0: std::result::Result<transaction::SignedTransaction, transaction::Error>; // return place in scope 0 at cita-chain/types/src/transaction.rs:509:52: 509:71
    let mut _2: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:53
    let mut _3: usize;                   // in scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:35
    let mut _4: &[u8];                   // in scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:35
    let _5: &[u8];                       // in scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:29
    let mut _6: transaction::Error;      // in scope 0 at cita-chain/types/src/transaction.rs:511:24: 511:42
    let mut _7: bool;                    // in scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:54
    let mut _8: usize;                   // in scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:34
    let mut _9: &[u8];                   // in scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:34
    let _10: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:28
    let mut _11: transaction::Error;     // in scope 0 at cita-chain/types/src/transaction.rs:515:24: 515:44
    let _12: cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction.rs:518:13: 518:20
    let mut _13: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:518:34: 518:51
    let mut _15: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:519:41: 519:57
    let _16: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:519:41: 519:57
    let _18: &cita_types::H512;          // in scope 0 at cita-chain/types/src/transaction.rs:520:40: 520:47
    let mut _19: transaction::SignedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:521:12: 525:10
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, transaction::Error>, transaction::UnverifiedTransaction>; // in scope 0 at cita-chain/types/src/transaction.rs:522:26: 522:97
    let mut _21: std::result::Result<transaction::UnverifiedTransaction, transaction::Error>; // in scope 0 at cita-chain/types/src/transaction.rs:522:26: 522:96
    let mut _22: &libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:522:56: 522:86
    let _23: &libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:522:56: 522:86
    let mut _24: cita_types::H256;       // in scope 0 at cita-chain/types/src/transaction.rs:522:88: 522:95
    let mut _25: isize;                  // in scope 0 at cita-chain/types/src/transaction.rs:522:96: 522:97
    let mut _28: cita_types::H160;       // in scope 0 at cita-chain/types/src/transaction.rs:523:13: 523:19
    let mut _29: cita_types::H512;       // in scope 0 at cita-chain/types/src/transaction.rs:524:13: 524:19
    scope 1 {
        debug tx_hash => _12;            // in scope 1 at cita-chain/types/src/transaction.rs:518:13: 518:20
        let _14: cita_types::H512;       // in scope 1 at cita-chain/types/src/transaction.rs:519:13: 519:19
        scope 2 {
            debug public => _14;         // in scope 2 at cita-chain/types/src/transaction.rs:519:13: 519:19
            let _17: cita_types::H160;   // in scope 2 at cita-chain/types/src/transaction.rs:520:13: 520:19
            scope 3 {
                debug sender => _17;     // in scope 3 at cita-chain/types/src/transaction.rs:520:13: 520:19
                let _26: std::result::Result<std::convert::Infallible, transaction::Error>; // in scope 3 at cita-chain/types/src/transaction.rs:522:96: 522:97
                let _27: transaction::UnverifiedTransaction; // in scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
                scope 4 {
                    debug residual => _26; // in scope 4 at cita-chain/types/src/transaction.rs:522:96: 522:97
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _27;    // in scope 6 at cita-chain/types/src/transaction.rs:522:26: 522:97
                    scope 7 {
                    }
                }
            }
        }
    }

    bb0: {
        _5 = libproto::SignedTransaction::get_tx_hash(_1) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:29
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:510:16: 510:27
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> &'a [u8] {libproto::SignedTransaction::get_tx_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:35
        _3 = Len((*_4));                 // scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:35
        _2 = Ne(move _3, const _);       // scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:53
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/types/src/transaction.rs:510:12: 510:53
    }

    bb2: {
        _6 = const transaction::Error::InvalidHash; // scope 0 at cita-chain/types/src/transaction.rs:511:24: 511:42
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x01)) }
        _0 = Result::<transaction::SignedTransaction, transaction::Error>::Err(move _6); // scope 0 at cita-chain/types/src/transaction.rs:511:20: 511:43
        goto -> bb18;                    // scope 0 at no-location
    }

    bb3: {
        _10 = libproto::SignedTransaction::get_signer(_1) -> bb4; // scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:28
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:514:16: 514:26
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> &'a [u8] {libproto::SignedTransaction::get_signer}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:34
        _8 = Len((*_9));                 // scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:34
        _7 = Ne(move _8, const _);       // scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:54
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at cita-chain/types/src/transaction.rs:514:12: 514:54
    }

    bb5: {
        _11 = const transaction::Error::InvalidPubKey; // scope 0 at cita-chain/types/src/transaction.rs:515:24: 515:44
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: transaction::Error, val: Value(Scalar(0x03)) }
        _0 = Result::<transaction::SignedTransaction, transaction::Error>::Err(move _11); // scope 0 at cita-chain/types/src/transaction.rs:515:20: 515:45
        goto -> bb18;                    // scope 0 at no-location
    }

    bb6: {
        _13 = libproto::SignedTransaction::get_tx_hash(_1) -> bb7; // scope 0 at cita-chain/types/src/transaction.rs:518:34: 518:51
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:518:38: 518:49
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> &'a [u8] {libproto::SignedTransaction::get_tx_hash}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = <H256 as From<&[u8]>>::from(move _13) -> bb8; // scope 0 at cita-chain/types/src/transaction.rs:518:23: 518:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:518:23: 518:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = libproto::SignedTransaction::get_signer(_1) -> bb9; // scope 1 at cita-chain/types/src/transaction.rs:519:41: 519:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:519:45: 519:55
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> &'a [u8] {libproto::SignedTransaction::get_signer}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = _16;                       // scope 1 at cita-chain/types/src/transaction.rs:519:41: 519:57
        _14 = H512::from_slice(move _15) -> bb10; // scope 1 at cita-chain/types/src/transaction.rs:519:22: 519:58
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:519:22: 519:40
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H512 {H512::from_slice}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = &_14;                      // scope 2 at cita-chain/types/src/transaction.rs:520:40: 520:47
        _17 = pubkey_to_address(_18) -> bb11; // scope 2 at cita-chain/types/src/transaction.rs:520:22: 520:48
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:520:22: 520:39
                                         // + literal: Const { ty: for<'a> fn(&'a H512) -> H160 {pubkey_to_address}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = libproto::SignedTransaction::get_transaction_with_sig(_1) -> bb12; // scope 3 at cita-chain/types/src/transaction.rs:522:56: 522:86
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:522:60: 522:84
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::SignedTransaction) -> &'a libproto::UnverifiedTransaction {libproto::SignedTransaction::get_transaction_with_sig}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = _23;                       // scope 3 at cita-chain/types/src/transaction.rs:522:56: 522:86
        _24 = _12;                       // scope 3 at cita-chain/types/src/transaction.rs:522:88: 522:95
        _21 = transaction::UnverifiedTransaction::create(move _22, move _24) -> bb13; // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:96
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:522:26: 522:55
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction, H256) -> Result<transaction::UnverifiedTransaction, transaction::Error> {transaction::UnverifiedTransaction::create}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = <Result<transaction::UnverifiedTransaction, transaction::Error> as Try>::branch(move _21) -> bb14; // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:522:26: 522:97
                                         // + literal: Const { ty: fn(Result<transaction::UnverifiedTransaction, transaction::Error>) -> ControlFlow<<Result<transaction::UnverifiedTransaction, transaction::Error> as Try>::Residual, <Result<transaction::UnverifiedTransaction, transaction::Error> as Try>::Output> {<Result<transaction::UnverifiedTransaction, transaction::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = discriminant(_20);         // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
        switchInt(move _25) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
    }

    bb15: {
        _27 = move ((_20 as Continue).0: transaction::UnverifiedTransaction); // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
        _28 = _17;                       // scope 3 at cita-chain/types/src/transaction.rs:523:13: 523:19
        _29 = _14;                       // scope 3 at cita-chain/types/src/transaction.rs:524:13: 524:19
        _19 = transaction::SignedTransaction { transaction: move _27, sender: move _28, public: move _29 }; // scope 3 at cita-chain/types/src/transaction.rs:521:12: 525:10
        _0 = Result::<transaction::SignedTransaction, transaction::Error>::Ok(move _19); // scope 3 at cita-chain/types/src/transaction.rs:521:9: 525:11
        goto -> bb18;                    // scope 0 at cita-chain/types/src/transaction.rs:526:6: 526:6
    }

    bb16: {
        unreachable;                     // scope 3 at cita-chain/types/src/transaction.rs:522:26: 522:97
    }

    bb17: {
        _26 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, transaction::Error>); // scope 3 at cita-chain/types/src/transaction.rs:522:96: 522:97
        _0 = <Result<transaction::SignedTransaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual(move _26) -> bb18; // scope 5 at cita-chain/types/src/transaction.rs:522:26: 522:97
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:522:96: 522:97
                                         // + literal: Const { ty: fn(Result<Infallible, transaction::Error>) -> Result<transaction::SignedTransaction, transaction::Error> {<Result<transaction::SignedTransaction, transaction::Error> as FromResidual<Result<Infallible, transaction::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:526:6: 526:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::get_transaction_hash(_1: &transaction::SignedTransaction) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:529:33: 529:38
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/transaction.rs:529:43: 529:47
    let mut _2: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:530:9: 530:32

    bb0: {
        _2 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:530:9: 530:32
        _0 = transaction::UnverifiedTransaction::hash(move _2) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:530:9: 530:32
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:530:26: 530:30
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> H256 {transaction::UnverifiedTransaction::hash}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:531:6: 531:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::calc_transaction_hash(_1: &transaction::SignedTransaction) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:534:34: 534:39
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/types/src/transaction.rs:534:44: 534:48
    let mut _2: &libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:57
    let _3: libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:44
    let mut _4: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:44

    bb0: {
        _4 = &((*_1).0: transaction::UnverifiedTransaction); // scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:44
        _3 = transaction::UnverifiedTransaction::proto_unverified(move _4) -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:535:26: 535:42
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> libproto::UnverifiedTransaction {transaction::UnverifiedTransaction::proto_unverified}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:57
        _0 = libproto::<impl libproto::UnverifiedTransaction>::crypt_hash(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/types/src/transaction.rs:535:9: 535:57
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:535:45: 535:55
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::UnverifiedTransaction) -> H256 {libproto::<impl libproto::UnverifiedTransaction>::crypt_hash}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 0 at cita-chain/types/src/transaction.rs:536:5: 536:6
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:536:6: 536:6
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at cita-chain/types/src/transaction.rs:536:5: 536:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:534:5: 536:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::sender(_1: &transaction::SignedTransaction) -> &H160 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:539:19: 539:24
    let mut _0: &cita_types::H160;       // return place in scope 0 at cita-chain/types/src/transaction.rs:540:9: 540:21

    bb0: {
        _0 = &((*_1).1: cita_types::H160); // scope 0 at cita-chain/types/src/transaction.rs:540:9: 540:21
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:541:6: 541:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::public_key(_1: &transaction::SignedTransaction) -> &H512 {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:544:23: 544:28
    let mut _0: &cita_types::H512;       // return place in scope 0 at cita-chain/types/src/transaction.rs:545:9: 545:21

    bb0: {
        _0 = &((*_1).2: cita_types::H512); // scope 0 at cita-chain/types/src/transaction.rs:545:9: 545:21
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:546:6: 546:6
    }
}

fn transaction::<impl at cita-chain/types/src/transaction.rs:507:1: 507:23>::protobuf(_1: &transaction::SignedTransaction) -> libproto::SignedTransaction {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction.rs:549:21: 549:26
    let mut _0: libproto::SignedTransaction; // return place in scope 0 at cita-chain/types/src/transaction.rs:550:13: 550:20
    let mut _3: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:551:19: 551:54
    let _4: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:552:9: 552:42
    let mut _5: &mut libproto::SignedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:552:9: 552:42
    let mut _6: libproto::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:552:38: 552:41
    let _7: ();                          // in scope 0 at cita-chain/types/src/transaction.rs:553:9: 553:46
    let mut _8: &mut libproto::SignedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:553:9: 553:46
    let mut _9: std::vec::Vec<u8>;       // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:45
    let mut _10: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:45
    let _11: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:45
    let mut _12: &cita_types::H256;      // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:45
    let _13: cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:36
    let mut _14: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:36
    let _15: &transaction::UnverifiedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:553:25: 553:36
    let _16: ();                         // in scope 0 at cita-chain/types/src/transaction.rs:554:9: 554:45
    let mut _17: &mut libproto::SignedTransaction; // in scope 0 at cita-chain/types/src/transaction.rs:554:9: 554:45
    let mut _18: std::vec::Vec<u8>;      // in scope 0 at cita-chain/types/src/transaction.rs:554:24: 554:44
    let mut _19: &[u8];                  // in scope 0 at cita-chain/types/src/transaction.rs:554:24: 554:44
    let _20: &[u8];                      // in scope 0 at cita-chain/types/src/transaction.rs:554:24: 554:44
    let mut _21: &cita_types::H512;      // in scope 0 at cita-chain/types/src/transaction.rs:554:24: 554:44
    scope 1 {
        debug stx => _0;                 // in scope 1 at cita-chain/types/src/transaction.rs:550:13: 550:20
        let _2: libproto::UnverifiedTransaction; // in scope 1 at cita-chain/types/src/transaction.rs:551:13: 551:16
        scope 2 {
            debug utx => _2;             // in scope 2 at cita-chain/types/src/transaction.rs:551:13: 551:16
        }
    }

    bb0: {
        _0 = libproto::SignedTransaction::new() -> bb1; // scope 0 at cita-chain/types/src/transaction.rs:550:23: 550:52
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:550:23: 550:50
                                         // + literal: Const { ty: fn() -> libproto::SignedTransaction {libproto::SignedTransaction::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &((*_1).0: transaction::UnverifiedTransaction); // scope 1 at cita-chain/types/src/transaction.rs:551:19: 551:54
        _2 = transaction::UnverifiedTransaction::proto_unverified(move _3) -> [return: bb2, unwind: bb12]; // scope 1 at cita-chain/types/src/transaction.rs:551:19: 551:54
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:551:36: 551:52
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> libproto::UnverifiedTransaction {transaction::UnverifiedTransaction::proto_unverified}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut _0;                    // scope 2 at cita-chain/types/src/transaction.rs:552:9: 552:42
        _6 = move _2;                    // scope 2 at cita-chain/types/src/transaction.rs:552:38: 552:41
        _4 = libproto::SignedTransaction::set_transaction_with_sig(move _5, move _6) -> [return: bb3, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:552:9: 552:42
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:552:13: 552:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::SignedTransaction, libproto::UnverifiedTransaction) {libproto::SignedTransaction::set_transaction_with_sig}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &mut _0;                    // scope 2 at cita-chain/types/src/transaction.rs:553:9: 553:46
        _15 = <transaction::SignedTransaction as Deref>::deref(_1) -> [return: bb4, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:553:25: 553:36
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::SignedTransaction) -> &'a <transaction::SignedTransaction as Deref>::Target {<transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _15;                       // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:36
        _13 = transaction::UnverifiedTransaction::hash(move _14) -> [return: bb5, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:36
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:553:30: 553:34
                                         // + literal: Const { ty: for<'a> fn(&'a transaction::UnverifiedTransaction) -> H256 {transaction::UnverifiedTransaction::hash}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &_13;                      // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:45
        _11 = <H256 as Deref>::deref(move _12) -> [return: bb6, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:553:25: 553:45
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = _11;                       // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:45
        _9 = slice::<impl [u8]>::to_vec(move _10) -> [return: bb7, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:553:25: 553:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:553:37: 553:43
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = libproto::SignedTransaction::set_tx_hash(move _8, move _9) -> [return: bb8, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:553:9: 553:46
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:553:13: 553:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::SignedTransaction, Vec<u8>) {libproto::SignedTransaction::set_tx_hash}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = &mut _0;                   // scope 2 at cita-chain/types/src/transaction.rs:554:9: 554:45
        _21 = &((*_1).2: cita_types::H512); // scope 2 at cita-chain/types/src/transaction.rs:554:24: 554:44
        _20 = <H512 as Deref>::deref(move _21) -> [return: bb9, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:554:24: 554:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:554:24: 554:44
                                         // + literal: Const { ty: for<'a> fn(&'a H512) -> &'a <H512 as Deref>::Target {<H512 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = _20;                       // scope 2 at cita-chain/types/src/transaction.rs:554:24: 554:44
        _18 = slice::<impl [u8]>::to_vec(move _19) -> [return: bb10, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:554:24: 554:44
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:554:36: 554:42
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = libproto::SignedTransaction::set_signer(move _17, move _18) -> [return: bb11, unwind: bb12]; // scope 2 at cita-chain/types/src/transaction.rs:554:9: 554:45
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction.rs:554:13: 554:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::SignedTransaction, Vec<u8>) {libproto::SignedTransaction::set_signer}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:556:6: 556:6
    }

    bb12 (cleanup): {
        drop(_0) -> bb13;                // scope 0 at cita-chain/types/src/transaction.rs:556:5: 556:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-chain/types/src/transaction.rs:549:5: 556:6
    }
}

fn transaction_index::<impl at cita-chain/types/src/transaction_index.rs:19:10: 19:15>::fmt(_1: &TransactionIndex, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
    let _3: &str;                        // in scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
    let _4: &str;                        // in scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
    let _6: &cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
    let _7: &str;                        // in scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
    let _9: &&usize;                     // in scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
    let _10: &usize;                     // in scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21

    bb0: {
        _3 = const "TransactionIndex";   // scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "block_hash";         // scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:21:5: 21:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction_index.rs:21:5: 21:25
        _7 = const "index";              // scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:22:5: 22:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: usize);         // scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
        _9 = &_10;                       // scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/types/src/transaction_index.rs:22:5: 22:21
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-chain/types/src/transaction_index.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/types/src/transaction_index.rs:19:15: 19:15
    }
}

fn transaction_index::<impl at cita-chain/types/src/transaction_index.rs:25:1: 25:36>::decode(_1: &rlp::UntrustedRlp<'_>) -> Result<TransactionIndex, rlp::DecoderError> {
    debug rlp => _1;                     // in scope 0 at cita-chain/types/src/transaction_index.rs:26:15: 26:18
    let mut _0: std::result::Result<transaction_index::TransactionIndex, rlp::DecoderError>; // return place in scope 0 at cita-chain/types/src/transaction_index.rs:26:38: 26:64
    let _2: transaction_index::TransactionIndex; // in scope 0 at cita-chain/types/src/transaction_index.rs:27:13: 27:21
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_types::H256>; // in scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
    let mut _4: std::result::Result<cita_types::H256, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:38
    let mut _5: isize;                   // in scope 0 at cita-chain/types/src/transaction_index.rs:28:38: 28:39
    let _6: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction_index.rs:28:38: 28:39
    let _7: cita_types::H256;            // in scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
    let mut _9: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:33
    let mut _10: isize;                  // in scope 0 at cita-chain/types/src/transaction_index.rs:29:33: 29:34
    let _11: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/types/src/transaction_index.rs:29:33: 29:34
    let _12: usize;                      // in scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
    scope 1 {
        debug tx_index => _2;            // in scope 1 at cita-chain/types/src/transaction_index.rs:27:13: 27:21
    }
    scope 2 {
        debug residual => _6;            // in scope 2 at cita-chain/types/src/transaction_index.rs:28:38: 28:39
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;                 // in scope 4 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _11;           // in scope 6 at cita-chain/types/src/transaction_index.rs:29:33: 29:34
        scope 7 {
        }
    }
    scope 8 {
        debug val => _12;                // in scope 8 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
        scope 9 {
        }
    }

    bb0: {
        _4 = rlp::UntrustedRlp::<'_>::val_at::<H256>(_1, const 0_usize) -> bb1; // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:38
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:28:29: 28:35
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<H256, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<H256>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<H256, rlp::DecoderError> as Try>::branch(move _4) -> bb2; // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:28:25: 28:39
                                         // + literal: Const { ty: fn(Result<H256, rlp::DecoderError>) -> ControlFlow<<Result<H256, rlp::DecoderError> as Try>::Residual, <Result<H256, rlp::DecoderError> as Try>::Output> {<Result<H256, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
    }

    bb3: {
        _7 = ((_3 as Continue).0: cita_types::H256); // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
        _9 = rlp::UntrustedRlp::<'_>::val_at::<usize>(_1, const 1_usize) -> bb6; // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:33
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:29:24: 29:30
                                         // + literal: Const { ty: for<'a> fn(&'a rlp::UntrustedRlp<'_>, usize) -> Result<usize, rlp::DecoderError> {rlp::UntrustedRlp::<'_>::val_at::<usize>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction_index.rs:28:38: 28:39
        _0 = <Result<TransactionIndex, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _6) -> bb11; // scope 3 at cita-chain/types/src/transaction_index.rs:28:25: 28:39
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:28:38: 28:39
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<TransactionIndex, rlp::DecoderError> {<Result<TransactionIndex, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = <Result<usize, rlp::DecoderError> as Try>::branch(move _9) -> bb7; // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:29:20: 29:34
                                         // + literal: Const { ty: fn(Result<usize, rlp::DecoderError>) -> ControlFlow<<Result<usize, rlp::DecoderError> as Try>::Residual, <Result<usize, rlp::DecoderError> as Try>::Output> {<Result<usize, rlp::DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = discriminant(_8);          // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
        switchInt(move _10) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
    }

    bb8: {
        _12 = ((_8 as Continue).0: usize); // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
        _2 = TransactionIndex { block_hash: _7, index: _12 }; // scope 0 at cita-chain/types/src/transaction_index.rs:27:24: 30:10
        _0 = Result::<TransactionIndex, rlp::DecoderError>::Ok(move _2); // scope 1 at cita-chain/types/src/transaction_index.rs:32:9: 32:21
        goto -> bb11;                    // scope 0 at cita-chain/types/src/transaction_index.rs:33:6: 33:6
    }

    bb9: {
        unreachable;                     // scope 0 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
    }

    bb10: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/types/src/transaction_index.rs:29:33: 29:34
        _0 = <Result<TransactionIndex, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual(move _11) -> bb11; // scope 7 at cita-chain/types/src/transaction_index.rs:29:20: 29:34
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:29:33: 29:34
                                         // + literal: Const { ty: fn(Result<Infallible, rlp::DecoderError>) -> Result<TransactionIndex, rlp::DecoderError> {<Result<TransactionIndex, rlp::DecoderError> as FromResidual<Result<Infallible, rlp::DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at cita-chain/types/src/transaction_index.rs:33:6: 33:6
    }
}

fn transaction_index::<impl at cita-chain/types/src/transaction_index.rs:36:1: 36:36>::rlp_append(_1: &TransactionIndex, _2: &mut rlp::RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/types/src/transaction_index.rs:37:19: 37:24
    debug s => _2;                       // in scope 0 at cita-chain/types/src/transaction_index.rs:37:26: 37:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/types/src/transaction_index.rs:37:45: 37:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction_index.rs:38:9: 38:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction_index.rs:39:9: 39:35
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/types/src/transaction_index.rs:39:18: 39:34
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/types/src/transaction_index.rs:40:9: 40:30
    let _7: &usize;                      // in scope 0 at cita-chain/types/src/transaction_index.rs:40:18: 40:29

    bb0: {
        _3 = rlp::RlpStream::begin_list(_2, const 2_usize) -> bb1; // scope 0 at cita-chain/types/src/transaction_index.rs:38:9: 38:24
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:38:11: 38:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut rlp::RlpStream, usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: cita_types::H256); // scope 0 at cita-chain/types/src/transaction_index.rs:39:18: 39:34
        _4 = rlp::RlpStream::append::<H256>(_2, _5) -> bb2; // scope 0 at cita-chain/types/src/transaction_index.rs:39:9: 39:35
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:39:11: 39:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b H256) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<H256>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).1: usize);          // scope 0 at cita-chain/types/src/transaction_index.rs:40:18: 40:29
        _6 = rlp::RlpStream::append::<usize>(_2, _7) -> bb3; // scope 0 at cita-chain/types/src/transaction_index.rs:40:9: 40:30
                                         // mir::Constant
                                         // + span: cita-chain/types/src/transaction_index.rs:40:11: 40:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut rlp::RlpStream, &'b usize) -> &'a mut rlp::RlpStream {rlp::RlpStream::append::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/types/src/transaction_index.rs:41:6: 41:6
    }
}

fn block_number::BlockTag::Tag(_1: block_number::Tag) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8

    bb0: {
        _0 = block_number::BlockTag::Tag(move _1); // scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8
    }
}

// MIR FOR CTFE
fn block_number::BlockTag::Tag(_1: block_number::Tag) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8

    bb0: {
        _0 = block_number::BlockTag::Tag(move _1); // scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:23:5: 23:8
    }
}

fn block_number::BlockTag::Height(_1: u64) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11

    bb0: {
        _0 = block_number::BlockTag::Height(move _1); // scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11
    }
}

// MIR FOR CTFE
fn block_number::BlockTag::Height(_1: u64) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11

    bb0: {
        _0 = block_number::BlockTag::Height(move _1); // scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:24:5: 24:11
    }
}

fn block_number::BlockTag::Hash(_1: H256) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9

    bb0: {
        _0 = block_number::BlockTag::Hash(move _1); // scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9
    }
}

// MIR FOR CTFE
fn block_number::BlockTag::Hash(_1: H256) -> block_number::BlockTag {
    let mut _0: block_number::BlockTag;  // return place in scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9

    bb0: {
        _0 = block_number::BlockTag::Hash(move _1); // scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9
        return;                          // scope 0 at cita-chain/types/src/block_number.rs:25:5: 25:9
    }
}

fn Hash2Header(_1: H256) -> Hash2Header {
    let mut _0: db_indexes::Hash2Header; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23

    bb0: {
        _0 = Hash2Header(move _1);       // scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23
    }
}

// MIR FOR CTFE
fn Hash2Header(_1: H256) -> Hash2Header {
    let mut _0: db_indexes::Hash2Header; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23

    bb0: {
        _0 = Hash2Header(move _1);       // scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:54:1: 54:23
    }
}

fn Hash2BlockBody(_1: H256) -> Hash2BlockBody {
    let mut _0: db_indexes::Hash2BlockBody; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26

    bb0: {
        _0 = Hash2BlockBody(move _1);    // scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26
    }
}

// MIR FOR CTFE
fn Hash2BlockBody(_1: H256) -> Hash2BlockBody {
    let mut _0: db_indexes::Hash2BlockBody; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26

    bb0: {
        _0 = Hash2BlockBody(move _1);    // scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:62:1: 62:26
    }
}

fn Hash2BlockNumber(_1: H256) -> Hash2BlockNumber {
    let mut _0: db_indexes::Hash2BlockNumber; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28

    bb0: {
        _0 = Hash2BlockNumber(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28
    }
}

// MIR FOR CTFE
fn Hash2BlockNumber(_1: H256) -> Hash2BlockNumber {
    let mut _0: db_indexes::Hash2BlockNumber; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28

    bb0: {
        _0 = Hash2BlockNumber(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:70:1: 70:28
    }
}

fn BlockNumber2Header(_1: u64) -> BlockNumber2Header {
    let mut _0: db_indexes::BlockNumber2Header; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30

    bb0: {
        _0 = BlockNumber2Header(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30
    }
}

// MIR FOR CTFE
fn BlockNumber2Header(_1: u64) -> BlockNumber2Header {
    let mut _0: db_indexes::BlockNumber2Header; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30

    bb0: {
        _0 = BlockNumber2Header(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:78:1: 78:30
    }
}

fn BlockNumber2Body(_1: u64) -> BlockNumber2Body {
    let mut _0: db_indexes::BlockNumber2Body; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28

    bb0: {
        _0 = BlockNumber2Body(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28
    }
}

// MIR FOR CTFE
fn BlockNumber2Body(_1: u64) -> BlockNumber2Body {
    let mut _0: db_indexes::BlockNumber2Body; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28

    bb0: {
        _0 = BlockNumber2Body(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:96:1: 96:28
    }
}

fn BlockNumber2Hash(_1: u64) -> BlockNumber2Hash {
    let mut _0: db_indexes::BlockNumber2Hash; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28

    bb0: {
        _0 = BlockNumber2Hash(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28
    }
}

// MIR FOR CTFE
fn BlockNumber2Hash(_1: u64) -> BlockNumber2Hash {
    let mut _0: db_indexes::BlockNumber2Hash; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28

    bb0: {
        _0 = BlockNumber2Hash(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:114:1: 114:28
    }
}

fn Hash2TransactionIndex(_1: H256) -> Hash2TransactionIndex {
    let mut _0: db_indexes::Hash2TransactionIndex; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33

    bb0: {
        _0 = Hash2TransactionIndex(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33
    }
}

// MIR FOR CTFE
fn Hash2TransactionIndex(_1: H256) -> Hash2TransactionIndex {
    let mut _0: db_indexes::Hash2TransactionIndex; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33

    bb0: {
        _0 = Hash2TransactionIndex(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:128:1: 128:33
    }
}

fn Hash2BlockReceipts(_1: H256) -> Hash2BlockReceipts {
    let mut _0: db_indexes::Hash2BlockReceipts; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30

    bb0: {
        _0 = Hash2BlockReceipts(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30
    }
}

// MIR FOR CTFE
fn Hash2BlockReceipts(_1: H256) -> Hash2BlockReceipts {
    let mut _0: db_indexes::Hash2BlockReceipts; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30

    bb0: {
        _0 = Hash2BlockReceipts(move _1); // scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:139:1: 139:30
    }
}

fn LogGroupPosition(_1: GroupPosition) -> LogGroupPosition {
    let mut _0: db_indexes::LogGroupPosition; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28

    bb0: {
        _0 = LogGroupPosition(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28
    }
}

// MIR FOR CTFE
fn LogGroupPosition(_1: GroupPosition) -> LogGroupPosition {
    let mut _0: db_indexes::LogGroupPosition; // return place in scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28

    bb0: {
        _0 = LogGroupPosition(move _1);  // scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28
        return;                          // scope 0 at cita-chain/types/src/db_indexes.rs:151:1: 151:28
    }
}

fn errors::call::CallError::Execution(_1: ExecutionError) -> errors::call::CallError {
    let mut _0: errors::call::CallError; // return place in scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14

    bb0: {
        _0 = errors::call::CallError::Execution(move _1); // scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14
    }
}

// MIR FOR CTFE
fn errors::call::CallError::Execution(_1: ExecutionError) -> errors::call::CallError {
    let mut _0: errors::call::CallError; // return place in scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14

    bb0: {
        _0 = errors::call::CallError::Execution(move _1); // scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14
        return;                          // scope 0 at cita-chain/types/src/errors/call.rs:29:5: 29:14
    }
}

fn ExecutionError::Internal(_1: std::string::String) -> ExecutionError {
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13

    bb0: {
        _0 = ExecutionError::Internal(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13
    }
}

// MIR FOR CTFE
fn ExecutionError::Internal(_1: std::string::String) -> ExecutionError {
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13

    bb0: {
        _0 = ExecutionError::Internal(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:24:5: 24:13
    }
}

fn ExecutionError::Authentication(_1: AuthenticationError) -> ExecutionError {
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19

    bb0: {
        _0 = ExecutionError::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19
    }
}

// MIR FOR CTFE
fn ExecutionError::Authentication(_1: AuthenticationError) -> ExecutionError {
    let mut _0: errors::execution::ExecutionError; // return place in scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19

    bb0: {
        _0 = ExecutionError::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19
        return;                          // scope 0 at cita-chain/types/src/errors/execution.rs:25:5: 25:19
    }
}

fn NativeError::Internal(_1: std::string::String) -> NativeError {
    let mut _0: errors::native::NativeError; // return place in scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13

    bb0: {
        _0 = NativeError::Internal(move _1); // scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13
    }
}

// MIR FOR CTFE
fn NativeError::Internal(_1: std::string::String) -> NativeError {
    let mut _0: errors::native::NativeError; // return place in scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13

    bb0: {
        _0 = NativeError::Internal(move _1); // scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13
        return;                          // scope 0 at cita-chain/types/src/errors/native.rs:21:5: 21:13
    }
}

fn errors::Error::Execution(_1: ExecutionError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14

    bb0: {
        _0 = errors::Error::Execution(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14
    }
}

// MIR FOR CTFE
fn errors::Error::Execution(_1: ExecutionError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14

    bb0: {
        _0 = errors::Error::Execution(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:29:5: 29:14
    }
}

fn errors::Error::Receipt(_1: errors::receipt::ReceiptError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12

    bb0: {
        _0 = errors::Error::Receipt(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12
    }
}

// MIR FOR CTFE
fn errors::Error::Receipt(_1: errors::receipt::ReceiptError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12

    bb0: {
        _0 = errors::Error::Receipt(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:30:5: 30:12
    }
}

fn errors::Error::Call(_1: errors::call::CallError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9

    bb0: {
        _0 = errors::Error::Call(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9
    }
}

// MIR FOR CTFE
fn errors::Error::Call(_1: errors::call::CallError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9

    bb0: {
        _0 = errors::Error::Call(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:31:5: 31:9
    }
}

fn errors::Error::Native(_1: NativeError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11

    bb0: {
        _0 = errors::Error::Native(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11
    }
}

// MIR FOR CTFE
fn errors::Error::Native(_1: NativeError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11

    bb0: {
        _0 = errors::Error::Native(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:32:5: 32:11
    }
}

fn errors::Error::Authentication(_1: AuthenticationError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19

    bb0: {
        _0 = errors::Error::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19
    }
}

// MIR FOR CTFE
fn errors::Error::Authentication(_1: AuthenticationError) -> errors::Error {
    let mut _0: errors::Error;           // return place in scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19

    bb0: {
        _0 = errors::Error::Authentication(move _1); // scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19
        return;                          // scope 0 at cita-chain/types/src/errors/mod.rs:33:5: 33:19
    }
}

fn Action::Call(_1: H160) -> Action {
    let mut _0: transaction::Action;     // return place in scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9

    bb0: {
        _0 = Action::Call(move _1);      // scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9
    }
}

// MIR FOR CTFE
fn Action::Call(_1: H160) -> Action {
    let mut _0: transaction::Action;     // return place in scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9

    bb0: {
        _0 = Action::Call(move _1);      // scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9
        return;                          // scope 0 at cita-chain/types/src/transaction.rs:48:5: 48:9
    }
}
