// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static cat::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nConcatenates CSV data by column or by row.\n\nWhen concatenating by column, the columns will be written in the same order as\nthe inputs given. The number of rows in the result is always equivalent to to\nthe minimum number of rows across all given CSV data. (This behavior can be\nreversed with the '--pad' flag.)\n\nWhen concatenating by row, all CSV data must have the same number of columns.\nIf you need to rearrange the columns or fix the lengths of records, use the\n'select' or 'fixlengths' commands. Also, only the headers of the *first* CSV\ndata given are used. Headers in subsequent inputs are ignored. (This behavior\ncan be disabled with --no-headers.)\n\nUsage:\n    xsv cat rows    [options] [<input>...]\n    xsv cat columns [options] [<input>...]\n    xsv cat --help\n\ncat options:\n    -p, --pad              When concatenating columns, this flag will cause\n                           all records to appear. It will pad each row if\n                           other CSV data isn't long enough.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will NOT be interpreted\n                           as column names. Note that this has no effect when\n                           concatenating columns.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cat::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<cat::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::cat::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cat::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::expecting(_1: &cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_u64(_1: cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E> {
    debug self => const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _4: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _5: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _6: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _7: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _8: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _9: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _10: __E;
    let mut _11: serde::de::Unexpected<'_>;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1];
    }

    bb1: {
        _11 = Unexpected::<'_>::Unsigned(_2);
        _13 = const _;
        _12 = _13 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <__E as serde::de::Error>::invalid_value(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb2: {
        _3 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field0;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field1;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb10;
    }

    bb4: {
        _5 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field2;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field3;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb6: {
        _7 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field4;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field5;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb8: {
        _9 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field6;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 7";
        _0 = &_1;
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_str(_1: cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E> {
    debug self => const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _11: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _12: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _13: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _14: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _15: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _16: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _17: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;

    bb0: {
        _9 = <str as PartialEq>::eq(_2, const "cmd_rows") -> [return: bb21, unwind continue];
    }

    bb1: {
        _10 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field0;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb22;
    }

    bb2: {
        _8 = <str as PartialEq>::eq(_2, const "cmd_columns") -> [return: bb20, unwind continue];
    }

    bb3: {
        _11 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field1;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb22;
    }

    bb4: {
        _7 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb19, unwind continue];
    }

    bb5: {
        _12 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field2;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb22;
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "flag_pad") -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field3;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb22;
    }

    bb8: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb17, unwind continue];
    }

    bb9: {
        _14 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field4;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb22;
    }

    bb10: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field5;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb22;
    }

    bb12: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb15, unwind continue];
    }

    bb13: {
        _16 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field6;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb22;
    }

    bb14: {
        _17 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb16: {
        switchInt(move _4) -> [0: bb12, otherwise: bb11];
    }

    bb17: {
        switchInt(move _5) -> [0: bb10, otherwise: bb9];
    }

    bb18: {
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb19: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb20: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb21: {
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb22: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_bytes(_1: cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E> {
    debug self => const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _19: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _20: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _21: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _22: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _23: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _24: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
    let mut _25: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;

    bb0: {
        _15 = Len((*_2));
        _16 = const 8_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb17, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 8]) -> [99: bb2, 102: bb10, otherwise: bb9];
    }

    bb2: {
        switchInt((*_2)[1 of 8]) -> [109: bb3, otherwise: bb9];
    }

    bb3: {
        switchInt((*_2)[2 of 8]) -> [100: bb4, otherwise: bb9];
    }

    bb4: {
        switchInt((*_2)[3 of 8]) -> [95: bb5, otherwise: bb9];
    }

    bb5: {
        switchInt((*_2)[4 of 8]) -> [114: bb6, otherwise: bb9];
    }

    bb6: {
        switchInt((*_2)[5 of 8]) -> [111: bb7, otherwise: bb9];
    }

    bb7: {
        switchInt((*_2)[6 of 8]) -> [119: bb8, otherwise: bb9];
    }

    bb8: {
        switchInt((*_2)[7 of 8]) -> [115: bb80, otherwise: bb9];
    }

    bb9: {
        _25 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb87;
    }

    bb10: {
        switchInt((*_2)[1 of 8]) -> [108: bb11, otherwise: bb9];
    }

    bb11: {
        switchInt((*_2)[2 of 8]) -> [97: bb12, otherwise: bb9];
    }

    bb12: {
        switchInt((*_2)[3 of 8]) -> [103: bb13, otherwise: bb9];
    }

    bb13: {
        switchInt((*_2)[4 of 8]) -> [95: bb14, otherwise: bb9];
    }

    bb14: {
        switchInt((*_2)[5 of 8]) -> [112: bb15, otherwise: bb9];
    }

    bb15: {
        switchInt((*_2)[6 of 8]) -> [97: bb16, otherwise: bb9];
    }

    bb16: {
        switchInt((*_2)[7 of 8]) -> [100: bb83, otherwise: bb9];
    }

    bb17: {
        _12 = Len((*_2));
        _13 = const 11_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb39, otherwise: bb18];
    }

    bb18: {
        switchInt((*_2)[0 of 11]) -> [99: bb19, 102: bb29, otherwise: bb9];
    }

    bb19: {
        switchInt((*_2)[1 of 11]) -> [109: bb20, otherwise: bb9];
    }

    bb20: {
        switchInt((*_2)[2 of 11]) -> [100: bb21, otherwise: bb9];
    }

    bb21: {
        switchInt((*_2)[3 of 11]) -> [95: bb22, otherwise: bb9];
    }

    bb22: {
        switchInt((*_2)[4 of 11]) -> [99: bb23, otherwise: bb9];
    }

    bb23: {
        switchInt((*_2)[5 of 11]) -> [111: bb24, otherwise: bb9];
    }

    bb24: {
        switchInt((*_2)[6 of 11]) -> [108: bb25, otherwise: bb9];
    }

    bb25: {
        switchInt((*_2)[7 of 11]) -> [117: bb26, otherwise: bb9];
    }

    bb26: {
        switchInt((*_2)[8 of 11]) -> [109: bb27, otherwise: bb9];
    }

    bb27: {
        switchInt((*_2)[9 of 11]) -> [110: bb28, otherwise: bb9];
    }

    bb28: {
        switchInt((*_2)[10 of 11]) -> [115: bb81, otherwise: bb9];
    }

    bb29: {
        switchInt((*_2)[1 of 11]) -> [108: bb30, otherwise: bb9];
    }

    bb30: {
        switchInt((*_2)[2 of 11]) -> [97: bb31, otherwise: bb9];
    }

    bb31: {
        switchInt((*_2)[3 of 11]) -> [103: bb32, otherwise: bb9];
    }

    bb32: {
        switchInt((*_2)[4 of 11]) -> [95: bb33, otherwise: bb9];
    }

    bb33: {
        switchInt((*_2)[5 of 11]) -> [111: bb34, otherwise: bb9];
    }

    bb34: {
        switchInt((*_2)[6 of 11]) -> [117: bb35, otherwise: bb9];
    }

    bb35: {
        switchInt((*_2)[7 of 11]) -> [116: bb36, otherwise: bb9];
    }

    bb36: {
        switchInt((*_2)[8 of 11]) -> [112: bb37, otherwise: bb9];
    }

    bb37: {
        switchInt((*_2)[9 of 11]) -> [117: bb38, otherwise: bb9];
    }

    bb38: {
        switchInt((*_2)[10 of 11]) -> [116: bb84, otherwise: bb9];
    }

    bb39: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb49, otherwise: bb40];
    }

    bb40: {
        switchInt((*_2)[0 of 9]) -> [97: bb41, otherwise: bb9];
    }

    bb41: {
        switchInt((*_2)[1 of 9]) -> [114: bb42, otherwise: bb9];
    }

    bb42: {
        switchInt((*_2)[2 of 9]) -> [103: bb43, otherwise: bb9];
    }

    bb43: {
        switchInt((*_2)[3 of 9]) -> [95: bb44, otherwise: bb9];
    }

    bb44: {
        switchInt((*_2)[4 of 9]) -> [105: bb45, otherwise: bb9];
    }

    bb45: {
        switchInt((*_2)[5 of 9]) -> [110: bb46, otherwise: bb9];
    }

    bb46: {
        switchInt((*_2)[6 of 9]) -> [112: bb47, otherwise: bb9];
    }

    bb47: {
        switchInt((*_2)[7 of 9]) -> [117: bb48, otherwise: bb9];
    }

    bb48: {
        switchInt((*_2)[8 of 9]) -> [116: bb82, otherwise: bb9];
    }

    bb49: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb65, otherwise: bb50];
    }

    bb50: {
        switchInt((*_2)[0 of 15]) -> [102: bb51, otherwise: bb9];
    }

    bb51: {
        switchInt((*_2)[1 of 15]) -> [108: bb52, otherwise: bb9];
    }

    bb52: {
        switchInt((*_2)[2 of 15]) -> [97: bb53, otherwise: bb9];
    }

    bb53: {
        switchInt((*_2)[3 of 15]) -> [103: bb54, otherwise: bb9];
    }

    bb54: {
        switchInt((*_2)[4 of 15]) -> [95: bb55, otherwise: bb9];
    }

    bb55: {
        switchInt((*_2)[5 of 15]) -> [110: bb56, otherwise: bb9];
    }

    bb56: {
        switchInt((*_2)[6 of 15]) -> [111: bb57, otherwise: bb9];
    }

    bb57: {
        switchInt((*_2)[7 of 15]) -> [95: bb58, otherwise: bb9];
    }

    bb58: {
        switchInt((*_2)[8 of 15]) -> [104: bb59, otherwise: bb9];
    }

    bb59: {
        switchInt((*_2)[9 of 15]) -> [101: bb60, otherwise: bb9];
    }

    bb60: {
        switchInt((*_2)[10 of 15]) -> [97: bb61, otherwise: bb9];
    }

    bb61: {
        switchInt((*_2)[11 of 15]) -> [100: bb62, otherwise: bb9];
    }

    bb62: {
        switchInt((*_2)[12 of 15]) -> [101: bb63, otherwise: bb9];
    }

    bb63: {
        switchInt((*_2)[13 of 15]) -> [114: bb64, otherwise: bb9];
    }

    bb64: {
        switchInt((*_2)[14 of 15]) -> [115: bb85, otherwise: bb9];
    }

    bb65: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb9, otherwise: bb66];
    }

    bb66: {
        switchInt((*_2)[0 of 14]) -> [102: bb67, otherwise: bb9];
    }

    bb67: {
        switchInt((*_2)[1 of 14]) -> [108: bb68, otherwise: bb9];
    }

    bb68: {
        switchInt((*_2)[2 of 14]) -> [97: bb69, otherwise: bb9];
    }

    bb69: {
        switchInt((*_2)[3 of 14]) -> [103: bb70, otherwise: bb9];
    }

    bb70: {
        switchInt((*_2)[4 of 14]) -> [95: bb71, otherwise: bb9];
    }

    bb71: {
        switchInt((*_2)[5 of 14]) -> [100: bb72, otherwise: bb9];
    }

    bb72: {
        switchInt((*_2)[6 of 14]) -> [101: bb73, otherwise: bb9];
    }

    bb73: {
        switchInt((*_2)[7 of 14]) -> [108: bb74, otherwise: bb9];
    }

    bb74: {
        switchInt((*_2)[8 of 14]) -> [105: bb75, otherwise: bb9];
    }

    bb75: {
        switchInt((*_2)[9 of 14]) -> [109: bb76, otherwise: bb9];
    }

    bb76: {
        switchInt((*_2)[10 of 14]) -> [105: bb77, otherwise: bb9];
    }

    bb77: {
        switchInt((*_2)[11 of 14]) -> [116: bb78, otherwise: bb9];
    }

    bb78: {
        switchInt((*_2)[12 of 14]) -> [101: bb79, otherwise: bb9];
    }

    bb79: {
        switchInt((*_2)[13 of 14]) -> [114: bb86, otherwise: bb9];
    }

    bb80: {
        _18 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field0;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb87;
    }

    bb81: {
        _19 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field1;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb87;
    }

    bb82: {
        _20 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field2;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb87;
    }

    bb83: {
        _21 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field3;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb87;
    }

    bb84: {
        _22 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field4;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb87;
    }

    bb85: {
        _23 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field5;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb87;
    }

    bb86: {
        _24 = cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field::__field6;
        _0 = Result::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb87;
    }

    bb87: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor>(move _1, const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::expecting(_1: &cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq(_1: cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cat::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cat::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::cat::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<bool>;
    let _7: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: bool;
    let mut _10: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: isize;
    let mut _66: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _67: &dyn serde::de::Expected;
    let mut _68: cmd::cat::Args;
    let mut _69: std::vec::Vec<std::string::String>;
    let mut _70: std::option::Option<std::string::String>;
    let mut _71: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<bool>;
        let _16: <__A as serde::de::SeqAccess<'_>>::Error;
        let _18: bool;
        let mut _72: &&str;
        scope 5 {
            debug __field1 => _18;
            let _21: std::vec::Vec<std::string::String>;
            let _25: std::option::Option<std::vec::Vec<std::string::String>>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: std::vec::Vec<std::string::String>;
            let mut _73: &&str;
            scope 9 {
                debug __field2 => _21;
                let _34: std::option::Option<bool>;
                let _35: <__A as serde::de::SeqAccess<'_>>::Error;
                let _37: bool;
                let mut _74: &&str;
                scope 13 {
                    debug __field3 => _37;
                    let _40: std::option::Option<std::string::String>;
                    let _44: std::option::Option<std::option::Option<std::string::String>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<std::string::String>;
                    let mut _75: &&str;
                    scope 17 {
                        debug __field4 => _40;
                        let _53: std::option::Option<bool>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: bool;
                        let mut _76: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _62: std::option::Option<std::option::Option<config::Delimiter>>;
                            let _63: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _65: std::option::Option<config::Delimiter>;
                            let mut _77: &&str;
                            scope 25 {
                                debug __field6 => _65;
                            }
                            scope 26 {
                                debug __val => _62;
                            }
                            scope 27 {
                                debug __err => _63;
                            }
                            scope 28 {
                                debug __value => _65;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _34;
                }
                scope 15 {
                    debug __err => _35;
                }
                scope 16 {
                    debug __value => _37;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb50];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb46;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _71 = const _;
        _11 = _71 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb50];
    }

    bb6: {
        _9 = ((_6 as Some).0: bool);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<bool>(_13) -> [return: bb8, unwind: bb50];
    }

    bb7: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb46;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb46;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<bool>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _72 = const _;
        _20 = _72 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb50];
    }

    bb12: {
        _18 = ((_15 as Some).0: bool);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<Vec<std::string::String>>(_23) -> [return: bb14, unwind: bb50];
    }

    bb13: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb46;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb46;
    }

    bb16: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _73 = const _;
        _30 = _73 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb50];
    }

    bb18: {
        _28 = move ((_25 as Some).0: std::vec::Vec<std::string::String>);
        _21 = move _28;
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<bool>(_32) -> [return: bb20, unwind: bb49];
    }

    bb19: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb46;
    }

    bb20: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _35 = move ((_31 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb45;
    }

    bb22: {
        _34 = ((_31 as Ok).0: std::option::Option<bool>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _74 = const _;
        _39 = _74 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb25, unwind: bb49];
    }

    bb24: {
        _37 = ((_34 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_42) -> [return: bb26, unwind: bb49];
    }

    bb25: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb45;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb45;
    }

    bb28: {
        _44 = move ((_41 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _75 = const _;
        _49 = _75 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb49];
    }

    bb30: {
        _47 = move ((_44 as Some).0: std::option::Option<std::string::String>);
        _40 = move _47;
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<bool>(_51) -> [return: bb32, unwind: bb48];
    }

    bb31: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb45;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb44;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<bool>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _76 = const _;
        _58 = _76 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb48];
    }

    bb36: {
        _56 = ((_53 as Some).0: bool);
        _60 = &mut _2;
        _59 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_60) -> [return: bb38, unwind: bb48];
    }

    bb37: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb44;
    }

    bb38: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _63 = move ((_59 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _63);
        goto -> bb44;
    }

    bb40: {
        _62 = ((_59 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _77 = const _;
        _67 = _77 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _66 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb43, unwind: bb48];
    }

    bb42: {
        _65 = ((_62 as Some).0: std::option::Option<config::Delimiter>);
        _69 = move _21;
        _70 = move _40;
        _68 = cat::Args { cmd_rows: _9, cmd_columns: _18, arg_input: move _69, flag_pad: _37, flag_output: move _70, flag_no_headers: _56, flag_delimiter: _65 };
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _68);
        drop(_2) -> [return: bb47, unwind continue];
    }

    bb43: {
        _0 = Result::<cat::Args, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb44;
    }

    bb44: {
        drop(_40) -> [return: bb45, unwind: bb49];
    }

    bb45: {
        drop(_21) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        drop(_2) -> [return: bb47, unwind continue];
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_40) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_21) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_2) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }
}

promoted[0] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

fn cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::<impl at src/cmd/cat.rs:41:10: 41:21>::visit_map(_1: cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cat::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cat::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::cat::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _10: std::result::Result<std::option::Option<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: bool;
    let _19: &std::option::Option<bool>;
    let mut _20: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _21: std::option::Option<bool>;
    let mut _22: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: bool;
    let _28: &std::option::Option<bool>;
    let mut _29: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<bool>;
    let mut _31: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _38: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _40: std::result::Result<std::vec::Vec<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<bool>;
    let mut _47: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<bool>;
    let mut _49: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _56: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<std::option::Option<std::string::String>>;
    let mut _58: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<bool>;
    let mut _65: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<bool>;
    let mut _67: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _74: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _76: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _82: &mut __A;
    let mut _83: isize;
    let mut _86: isize;
    let mut _88: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _89: isize;
    let mut _93: isize;
    let mut _95: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _96: isize;
    let mut _100: isize;
    let mut _102: std::result::Result<std::vec::Vec<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _103: isize;
    let mut _107: isize;
    let mut _109: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _110: isize;
    let mut _114: isize;
    let mut _116: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _117: isize;
    let mut _121: isize;
    let mut _123: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _124: isize;
    let mut _128: isize;
    let mut _130: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _131: isize;
    let mut _134: cmd::cat::Args;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: std::vec::Vec<std::string::String>;
    let mut _138: bool;
    let mut _139: std::option::Option<std::string::String>;
    let mut _140: bool;
    let mut _141: std::option::Option<config::Delimiter>;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<bool>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::vec::Vec<std::string::String>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<std::string::String>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<config::Delimiter>>;
                            scope 7 {
                                debug __field6 => _9;
                                let _85: bool;
                                let _87: bool;
                                let _90: bool;
                                let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __key => _16;
                                    let _13: std::option::Option<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field>;
                                    let _14: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _16: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field;
                                    let _25: bool;
                                    let _26: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _34: bool;
                                    let _35: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _43: std::vec::Vec<std::string::String>;
                                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _52: bool;
                                    let _53: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _61: std::option::Option<std::string::String>;
                                    let _62: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _70: bool;
                                    let _71: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _79: std::option::Option<config::Delimiter>;
                                    let _80: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _84: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __val => _13;
                                    }
                                    scope 10 {
                                        debug __err => _14;
                                    }
                                    scope 11 {
                                        debug __val => _25;
                                    }
                                    scope 12 {
                                        debug __err => _26;
                                    }
                                    scope 13 {
                                        debug __val => _34;
                                    }
                                    scope 14 {
                                        debug __err => _35;
                                    }
                                    scope 15 {
                                        debug __val => _43;
                                    }
                                    scope 16 {
                                        debug __err => _44;
                                    }
                                    scope 17 {
                                        debug __val => _52;
                                    }
                                    scope 18 {
                                        debug __err => _53;
                                    }
                                    scope 19 {
                                        debug __val => _61;
                                    }
                                    scope 20 {
                                        debug __err => _62;
                                    }
                                    scope 21 {
                                        debug __val => _70;
                                    }
                                    scope 22 {
                                        debug __err => _71;
                                    }
                                    scope 23 {
                                        debug __val => _79;
                                    }
                                    scope 24 {
                                        debug __err => _80;
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny;
                                    }
                                    scope 27 {
                                        debug __err => _84;
                                    }
                                }
                                scope 28 {
                                    debug __field0 => _85;
                                    let _92: bool;
                                    let _94: bool;
                                    let _97: bool;
                                    let _98: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 32 {
                                        debug __field1 => _92;
                                        let _99: std::vec::Vec<std::string::String>;
                                        let _101: std::vec::Vec<std::string::String>;
                                        let _104: std::vec::Vec<std::string::String>;
                                        let _105: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 36 {
                                            debug __field2 => _99;
                                            let _106: bool;
                                            let _108: bool;
                                            let _111: bool;
                                            let _112: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 40 {
                                                debug __field3 => _106;
                                                let _113: std::option::Option<std::string::String>;
                                                let _115: std::option::Option<std::string::String>;
                                                let _118: std::option::Option<std::string::String>;
                                                let _119: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 44 {
                                                    debug __field4 => _113;
                                                    let _120: bool;
                                                    let _122: bool;
                                                    let _125: bool;
                                                    let _126: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 48 {
                                                        debug __field5 => _120;
                                                        let _127: std::option::Option<config::Delimiter>;
                                                        let _129: std::option::Option<config::Delimiter>;
                                                        let _132: std::option::Option<config::Delimiter>;
                                                        let _133: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 52 {
                                                            debug __field6 => _127;
                                                        }
                                                        scope 53 {
                                                            debug __field6 => _129;
                                                        }
                                                        scope 54 {
                                                            debug __val => _132;
                                                        }
                                                        scope 55 {
                                                            debug __err => _133;
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug __field5 => _122;
                                                    }
                                                    scope 50 {
                                                        debug __val => _125;
                                                    }
                                                    scope 51 {
                                                        debug __err => _126;
                                                    }
                                                }
                                                scope 45 {
                                                    debug __field4 => _115;
                                                }
                                                scope 46 {
                                                    debug __val => _118;
                                                }
                                                scope 47 {
                                                    debug __err => _119;
                                                }
                                            }
                                            scope 41 {
                                                debug __field3 => _108;
                                            }
                                            scope 42 {
                                                debug __val => _111;
                                            }
                                            scope 43 {
                                                debug __err => _112;
                                            }
                                        }
                                        scope 37 {
                                            debug __field2 => _101;
                                        }
                                        scope 38 {
                                            debug __val => _104;
                                        }
                                        scope 39 {
                                            debug __err => _105;
                                        }
                                    }
                                    scope 33 {
                                        debug __field1 => _94;
                                    }
                                    scope 34 {
                                        debug __val => _97;
                                    }
                                    scope 35 {
                                        debug __err => _98;
                                    }
                                }
                                scope 29 {
                                    debug __field0 => _87;
                                }
                                scope 30 {
                                    debug __val => _90;
                                }
                                scope 31 {
                                    debug __err => _91;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _143 = const false;
        _142 = const false;
        _3 = std::option::Option::<bool>::None;
        _4 = std::option::Option::<bool>::None;
        _143 = const true;
        _5 = std::option::Option::<Vec<std::string::String>>::None;
        _6 = std::option::Option::<bool>::None;
        _142 = const true;
        _7 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _11 = &mut _2;
        _10 = <__A as MapAccess<'_>>::next_key::<cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cat::Args>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb130];
    }

    bb2: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb115;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field>);
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _86 = discriminant(_3);
        switchInt(move _86) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_13 as Some).0: cmd::cat::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::cat::Args>::deserialize::__Field);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb9, 1: bb17, 2: bb25, 3: bb35, 4: bb43, 5: bb53, 6: bb61, otherwise: bb8];
    }

    bb8: {
        _82 = &mut _2;
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb69, unwind: bb130];
    }

    bb9: {
        _19 = &_3;
        _18 = std::option::Option::<bool>::is_some(_19) -> [return: bb10, unwind: bb130];
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "cmd_rows") -> [return: bb12, unwind: bb130];
    }

    bb12: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb115;
    }

    bb13: {
        _23 = &mut _2;
        _22 = <__A as MapAccess<'_>>::next_value::<bool>(_23) -> [return: bb14, unwind: bb130];
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb115;
    }

    bb16: {
        _25 = ((_22 as Ok).0: bool);
        _21 = std::option::Option::<bool>::Some(_25);
        _3 = move _21;
        goto -> bb1;
    }

    bb17: {
        _28 = &_4;
        _27 = std::option::Option::<bool>::is_some(_28) -> [return: bb18, unwind: bb130];
    }

    bb18: {
        switchInt(move _27) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _29 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "cmd_columns") -> [return: bb20, unwind: bb130];
    }

    bb20: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb115;
    }

    bb21: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<bool>(_32) -> [return: bb22, unwind: bb130];
    }

    bb22: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _35 = move ((_31 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb115;
    }

    bb24: {
        _34 = ((_31 as Ok).0: bool);
        _30 = std::option::Option::<bool>::Some(_34);
        _4 = move _30;
        goto -> bb1;
    }

    bb25: {
        _37 = &_5;
        _36 = std::option::Option::<Vec<std::string::String>>::is_some(_37) -> [return: bb26, unwind: bb130];
    }

    bb26: {
        switchInt(move _36) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        _38 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb28, unwind: bb130];
    }

    bb28: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb115;
    }

    bb29: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<Vec<std::string::String>>(_41) -> [return: bb30, unwind: bb130];
    }

    bb30: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb32, 1: bb31, otherwise: bb4];
    }

    bb31: {
        _44 = move ((_40 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb115;
    }

    bb32: {
        _43 = move ((_40 as Ok).0: std::vec::Vec<std::string::String>);
        _39 = std::option::Option::<Vec<std::string::String>>::Some(move _43);
        drop(_5) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        _143 = const true;
        _5 = move _39;
        goto -> bb1;
    }

    bb34 (cleanup): {
        _143 = const true;
        _5 = move _39;
        goto -> bb130;
    }

    bb35: {
        _46 = &_6;
        _45 = std::option::Option::<bool>::is_some(_46) -> [return: bb36, unwind: bb130];
    }

    bb36: {
        switchInt(move _45) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _47 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_pad") -> [return: bb38, unwind: bb130];
    }

    bb38: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb115;
    }

    bb39: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<bool>(_50) -> [return: bb40, unwind: bb130];
    }

    bb40: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _53 = move ((_49 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb115;
    }

    bb42: {
        _52 = ((_49 as Ok).0: bool);
        _48 = std::option::Option::<bool>::Some(_52);
        _6 = move _48;
        goto -> bb1;
    }

    bb43: {
        _55 = &_7;
        _54 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_55) -> [return: bb44, unwind: bb130];
    }

    bb44: {
        switchInt(move _54) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        _56 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb46, unwind: bb130];
    }

    bb46: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb115;
    }

    bb47: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_59) -> [return: bb48, unwind: bb130];
    }

    bb48: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb50, 1: bb49, otherwise: bb4];
    }

    bb49: {
        _62 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb115;
    }

    bb50: {
        _61 = move ((_58 as Ok).0: std::option::Option<std::string::String>);
        _57 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _61);
        drop(_7) -> [return: bb51, unwind: bb52];
    }

    bb51: {
        _142 = const true;
        _7 = move _57;
        goto -> bb1;
    }

    bb52 (cleanup): {
        _142 = const true;
        _7 = move _57;
        goto -> bb130;
    }

    bb53: {
        _64 = &_8;
        _63 = std::option::Option::<bool>::is_some(_64) -> [return: bb54, unwind: bb130];
    }

    bb54: {
        switchInt(move _63) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _65 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb56, unwind: bb130];
    }

    bb56: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb115;
    }

    bb57: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<bool>(_68) -> [return: bb58, unwind: bb130];
    }

    bb58: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _71 = move ((_67 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb115;
    }

    bb60: {
        _70 = ((_67 as Ok).0: bool);
        _66 = std::option::Option::<bool>::Some(_70);
        _8 = move _66;
        goto -> bb1;
    }

    bb61: {
        _73 = &_9;
        _72 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_73) -> [return: bb62, unwind: bb130];
    }

    bb62: {
        switchInt(move _72) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _74 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb64, unwind: bb130];
    }

    bb64: {
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb115;
    }

    bb65: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_77) -> [return: bb66, unwind: bb130];
    }

    bb66: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _80 = move ((_76 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb115;
    }

    bb68: {
        _79 = ((_76 as Ok).0: std::option::Option<config::Delimiter>);
        _75 = std::option::Option::<std::option::Option<Delimiter>>::Some(_79);
        _9 = move _75;
        goto -> bb1;
    }

    bb69: {
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb1, 1: bb70, otherwise: bb4];
    }

    bb70: {
        _84 = move ((_81 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb115;
    }

    bb71: {
        _88 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "cmd_rows") -> [return: bb73, unwind: bb130];
    }

    bb72: {
        _87 = ((_3 as Some).0: bool);
        _85 = _87;
        goto -> bb76;
    }

    bb73: {
        _89 = discriminant(_88);
        switchInt(move _89) -> [0: bb75, 1: bb74, otherwise: bb4];
    }

    bb74: {
        _91 = move ((_88 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb115;
    }

    bb75: {
        _90 = ((_88 as Ok).0: bool);
        _85 = _90;
        goto -> bb76;
    }

    bb76: {
        _93 = discriminant(_4);
        switchInt(move _93) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        _95 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "cmd_columns") -> [return: bb79, unwind: bb130];
    }

    bb78: {
        _94 = ((_4 as Some).0: bool);
        _92 = _94;
        goto -> bb82;
    }

    bb79: {
        _96 = discriminant(_95);
        switchInt(move _96) -> [0: bb81, 1: bb80, otherwise: bb4];
    }

    bb80: {
        _98 = move ((_95 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb115;
    }

    bb81: {
        _97 = ((_95 as Ok).0: bool);
        _92 = _97;
        goto -> bb82;
    }

    bb82: {
        _100 = discriminant(_5);
        switchInt(move _100) -> [0: bb83, 1: bb84, otherwise: bb4];
    }

    bb83: {
        _102 = serde::private::de::missing_field::<'_, Vec<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb85, unwind: bb130];
    }

    bb84: {
        _143 = const false;
        _101 = move ((_5 as Some).0: std::vec::Vec<std::string::String>);
        _99 = move _101;
        goto -> bb88;
    }

    bb85: {
        _103 = discriminant(_102);
        switchInt(move _103) -> [0: bb87, 1: bb86, otherwise: bb4];
    }

    bb86: {
        _105 = move ((_102 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _105);
        goto -> bb115;
    }

    bb87: {
        _104 = move ((_102 as Ok).0: std::vec::Vec<std::string::String>);
        _99 = move _104;
        goto -> bb88;
    }

    bb88: {
        _107 = discriminant(_6);
        switchInt(move _107) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        _109 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_pad") -> [return: bb91, unwind: bb118];
    }

    bb90: {
        _108 = ((_6 as Some).0: bool);
        _106 = _108;
        goto -> bb94;
    }

    bb91: {
        _110 = discriminant(_109);
        switchInt(move _110) -> [0: bb93, 1: bb92, otherwise: bb4];
    }

    bb92: {
        _112 = move ((_109 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _112);
        goto -> bb114;
    }

    bb93: {
        _111 = ((_109 as Ok).0: bool);
        _106 = _111;
        goto -> bb94;
    }

    bb94: {
        _114 = discriminant(_7);
        switchInt(move _114) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        _116 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb97, unwind: bb118];
    }

    bb96: {
        _142 = const false;
        _115 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _113 = move _115;
        goto -> bb100;
    }

    bb97: {
        _117 = discriminant(_116);
        switchInt(move _117) -> [0: bb99, 1: bb98, otherwise: bb4];
    }

    bb98: {
        _119 = move ((_116 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _119);
        goto -> bb114;
    }

    bb99: {
        _118 = move ((_116 as Ok).0: std::option::Option<std::string::String>);
        _113 = move _118;
        goto -> bb100;
    }

    bb100: {
        _121 = discriminant(_8);
        switchInt(move _121) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        _123 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb103, unwind: bb117];
    }

    bb102: {
        _122 = ((_8 as Some).0: bool);
        _120 = _122;
        goto -> bb106;
    }

    bb103: {
        _124 = discriminant(_123);
        switchInt(move _124) -> [0: bb105, 1: bb104, otherwise: bb4];
    }

    bb104: {
        _126 = move ((_123 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _126);
        goto -> bb113;
    }

    bb105: {
        _125 = ((_123 as Ok).0: bool);
        _120 = _125;
        goto -> bb106;
    }

    bb106: {
        _128 = discriminant(_9);
        switchInt(move _128) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        _130 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb109, unwind: bb117];
    }

    bb108: {
        _129 = ((_9 as Some).0: std::option::Option<config::Delimiter>);
        _127 = _129;
        goto -> bb112;
    }

    bb109: {
        _131 = discriminant(_130);
        switchInt(move _131) -> [0: bb111, 1: bb110, otherwise: bb4];
    }

    bb110: {
        _133 = move ((_130 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Err(move _133);
        goto -> bb113;
    }

    bb111: {
        _132 = ((_130 as Ok).0: std::option::Option<config::Delimiter>);
        _127 = _132;
        goto -> bb112;
    }

    bb112: {
        _135 = _85;
        _136 = _92;
        _137 = move _99;
        _138 = _106;
        _139 = move _113;
        _140 = _120;
        _141 = _127;
        _134 = cat::Args { cmd_rows: move _135, cmd_columns: move _136, arg_input: move _137, flag_pad: move _138, flag_output: move _139, flag_no_headers: move _140, flag_delimiter: move _141 };
        _0 = Result::<cat::Args, <__A as MapAccess<'_>>::Error>::Ok(move _134);
        _142 = const false;
        _143 = const false;
        drop(_2) -> [return: bb116, unwind continue];
    }

    bb113: {
        drop(_113) -> [return: bb114, unwind: bb118];
    }

    bb114: {
        drop(_99) -> [return: bb115, unwind: bb130];
    }

    bb115: {
        _144 = discriminant(_7);
        switchInt(move _144) -> [1: bb123, otherwise: bb122];
    }

    bb116: {
        return;
    }

    bb117 (cleanup): {
        drop(_113) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_99) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        _147 = discriminant(_5);
        switchInt(move _147) -> [1: bb131, otherwise: bb120];
    }

    bb120 (cleanup): {
        drop(_2) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        resume;
    }

    bb122: {
        _142 = const false;
        _145 = discriminant(_5);
        switchInt(move _145) -> [1: bb126, otherwise: bb125];
    }

    bb123: {
        switchInt(_142) -> [0: bb122, otherwise: bb124];
    }

    bb124: {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb122, unwind: bb119];
    }

    bb125: {
        _143 = const false;
        drop(_2) -> [return: bb116, unwind continue];
    }

    bb126: {
        switchInt(_143) -> [0: bb125, otherwise: bb127];
    }

    bb127: {
        drop(((_5 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb125, unwind: bb120];
    }

    bb128 (cleanup): {
        switchInt(_142) -> [0: bb119, otherwise: bb129];
    }

    bb129 (cleanup): {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        _146 = discriminant(_7);
        switchInt(move _146) -> [1: bb128, otherwise: bb119];
    }

    bb131 (cleanup): {
        switchInt(_143) -> [0: bb120, otherwise: bb132];
    }

    bb132 (cleanup): {
        drop(((_5 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb120, unwind terminate(cleanup)];
    }
}

const cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 7];
    let _2: &[&str; 7];
    let _3: [&str; 7];
    let mut _4: &[&str; 7];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cat::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/cat.rs:41:10: 41:21>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "cmd_rows", const "cmd_columns", const "arg_input", const "flag_pad", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn cat::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::cat::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::cat::Args>;
    let mut _4: std::result::Result<cmd::cat::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::cat::Args;
    let mut _9: bool;
    let mut _10: &cmd::cat::Args;
    let mut _11: bool;
    let mut _12: &cmd::cat::Args;
    let _13: !;
    let mut _14: &str;
    scope 1 {
        debug args => _2;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc1: &&str};
        _14 = deref_copy (*_5);
        _4 = get_args::<cat::Args>(_14, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cat::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::cat::Args);
        _2 = move _8;
        _9 = (_2.0: bool);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb11, unwind continue];
    }

    bb6: {
        _10 = &_2;
        _0 = cat::Args::cat_rows(move _10) -> [return: bb14, unwind: bb12];
    }

    bb7: {
        _11 = (_2.1: bool);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = &_2;
        _0 = cat::Args::cat_columns(move _12) -> [return: bb15, unwind: bb12];
    }

    bb9: {
        _13 = core::panicking::panic(const "internal error: entered unreachable code") -> bb12;
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        goto -> bb10;
    }

    bb15: {
        goto -> bb10;
    }
}

alloc1 (static: cat::USAGE, size: 16, align: 8) {
    ╾────alloc124<imm>────╼ bd 05 00 00 00 00 00 00 │ ╾──────╼........
}

alloc124 (size: 1469, align: 1) {
    0x000 │ 0a 43 6f 6e 63 61 74 65 6e 61 74 65 73 20 43 53 │ .Concatenates CS
    0x010 │ 56 20 64 61 74 61 20 62 79 20 63 6f 6c 75 6d 6e │ V data by column
    0x020 │ 20 6f 72 20 62 79 20 72 6f 77 2e 0a 0a 57 68 65 │  or by row...Whe
    0x030 │ 6e 20 63 6f 6e 63 61 74 65 6e 61 74 69 6e 67 20 │ n concatenating 
    0x040 │ 62 79 20 63 6f 6c 75 6d 6e 2c 20 74 68 65 20 63 │ by column, the c
    0x050 │ 6f 6c 75 6d 6e 73 20 77 69 6c 6c 20 62 65 20 77 │ olumns will be w
    0x060 │ 72 69 74 74 65 6e 20 69 6e 20 74 68 65 20 73 61 │ ritten in the sa
    0x070 │ 6d 65 20 6f 72 64 65 72 20 61 73 0a 74 68 65 20 │ me order as.the 
    0x080 │ 69 6e 70 75 74 73 20 67 69 76 65 6e 2e 20 54 68 │ inputs given. Th
    0x090 │ 65 20 6e 75 6d 62 65 72 20 6f 66 20 72 6f 77 73 │ e number of rows
    0x0a0 │ 20 69 6e 20 74 68 65 20 72 65 73 75 6c 74 20 69 │  in the result i
    0x0b0 │ 73 20 61 6c 77 61 79 73 20 65 71 75 69 76 61 6c │ s always equival
    0x0c0 │ 65 6e 74 20 74 6f 20 74 6f 0a 74 68 65 20 6d 69 │ ent to to.the mi
    0x0d0 │ 6e 69 6d 75 6d 20 6e 75 6d 62 65 72 20 6f 66 20 │ nimum number of 
    0x0e0 │ 72 6f 77 73 20 61 63 72 6f 73 73 20 61 6c 6c 20 │ rows across all 
    0x0f0 │ 67 69 76 65 6e 20 43 53 56 20 64 61 74 61 2e 20 │ given CSV data. 
    0x100 │ 28 54 68 69 73 20 62 65 68 61 76 69 6f 72 20 63 │ (This behavior c
    0x110 │ 61 6e 20 62 65 0a 72 65 76 65 72 73 65 64 20 77 │ an be.reversed w
    0x120 │ 69 74 68 20 74 68 65 20 27 2d 2d 70 61 64 27 20 │ ith the '--pad' 
    0x130 │ 66 6c 61 67 2e 29 0a 0a 57 68 65 6e 20 63 6f 6e │ flag.)..When con
    0x140 │ 63 61 74 65 6e 61 74 69 6e 67 20 62 79 20 72 6f │ catenating by ro
    0x150 │ 77 2c 20 61 6c 6c 20 43 53 56 20 64 61 74 61 20 │ w, all CSV data 
    0x160 │ 6d 75 73 74 20 68 61 76 65 20 74 68 65 20 73 61 │ must have the sa
    0x170 │ 6d 65 20 6e 75 6d 62 65 72 20 6f 66 20 63 6f 6c │ me number of col
    0x180 │ 75 6d 6e 73 2e 0a 49 66 20 79 6f 75 20 6e 65 65 │ umns..If you nee
    0x190 │ 64 20 74 6f 20 72 65 61 72 72 61 6e 67 65 20 74 │ d to rearrange t
    0x1a0 │ 68 65 20 63 6f 6c 75 6d 6e 73 20 6f 72 20 66 69 │ he columns or fi
    0x1b0 │ 78 20 74 68 65 20 6c 65 6e 67 74 68 73 20 6f 66 │ x the lengths of
    0x1c0 │ 20 72 65 63 6f 72 64 73 2c 20 75 73 65 20 74 68 │  records, use th
    0x1d0 │ 65 0a 27 73 65 6c 65 63 74 27 20 6f 72 20 27 66 │ e.'select' or 'f
    0x1e0 │ 69 78 6c 65 6e 67 74 68 73 27 20 63 6f 6d 6d 61 │ ixlengths' comma
    0x1f0 │ 6e 64 73 2e 20 41 6c 73 6f 2c 20 6f 6e 6c 79 20 │ nds. Also, only 
    0x200 │ 74 68 65 20 68 65 61 64 65 72 73 20 6f 66 20 74 │ the headers of t
    0x210 │ 68 65 20 2a 66 69 72 73 74 2a 20 43 53 56 0a 64 │ he *first* CSV.d
    0x220 │ 61 74 61 20 67 69 76 65 6e 20 61 72 65 20 75 73 │ ata given are us
    0x230 │ 65 64 2e 20 48 65 61 64 65 72 73 20 69 6e 20 73 │ ed. Headers in s
    0x240 │ 75 62 73 65 71 75 65 6e 74 20 69 6e 70 75 74 73 │ ubsequent inputs
    0x250 │ 20 61 72 65 20 69 67 6e 6f 72 65 64 2e 20 28 54 │  are ignored. (T
    0x260 │ 68 69 73 20 62 65 68 61 76 69 6f 72 0a 63 61 6e │ his behavior.can
    0x270 │ 20 62 65 20 64 69 73 61 62 6c 65 64 20 77 69 74 │  be disabled wit
    0x280 │ 68 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 2e 29 │ h --no-headers.)
    0x290 │ 0a 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 │ ..Usage:.    xsv
    0x2a0 │ 20 63 61 74 20 72 6f 77 73 20 20 20 20 5b 6f 70 │  cat rows    [op
    0x2b0 │ 74 69 6f 6e 73 5d 20 5b 3c 69 6e 70 75 74 3e 2e │ tions] [<input>.
    0x2c0 │ 2e 2e 5d 0a 20 20 20 20 78 73 76 20 63 61 74 20 │ ..].    xsv cat 
    0x2d0 │ 63 6f 6c 75 6d 6e 73 20 5b 6f 70 74 69 6f 6e 73 │ columns [options
    0x2e0 │ 5d 20 5b 3c 69 6e 70 75 74 3e 2e 2e 2e 5d 0a 20 │ ] [<input>...]. 
    0x2f0 │ 20 20 20 78 73 76 20 63 61 74 20 2d 2d 68 65 6c │    xsv cat --hel
    0x300 │ 70 0a 0a 63 61 74 20 6f 70 74 69 6f 6e 73 3a 0a │ p..cat options:.
    0x310 │ 20 20 20 20 2d 70 2c 20 2d 2d 70 61 64 20 20 20 │     -p, --pad   
    0x320 │ 20 20 20 20 20 20 20 20 20 20 20 57 68 65 6e 20 │            When 
    0x330 │ 63 6f 6e 63 61 74 65 6e 61 74 69 6e 67 20 63 6f │ concatenating co
    0x340 │ 6c 75 6d 6e 73 2c 20 74 68 69 73 20 66 6c 61 67 │ lumns, this flag
    0x350 │ 20 77 69 6c 6c 20 63 61 75 73 65 0a 20 20 20 20 │  will cause.    
    0x360 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x370 │ 20 20 20 20 20 20 20 61 6c 6c 20 72 65 63 6f 72 │        all recor
    0x380 │ 64 73 20 74 6f 20 61 70 70 65 61 72 2e 20 49 74 │ ds to appear. It
    0x390 │ 20 77 69 6c 6c 20 70 61 64 20 65 61 63 68 20 72 │  will pad each r
    0x3a0 │ 6f 77 20 69 66 0a 20 20 20 20 20 20 20 20 20 20 │ ow if.          
    0x3b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3c0 │ 20 6f 74 68 65 72 20 43 53 56 20 64 61 74 61 20 │  other CSV data 
    0x3d0 │ 69 73 6e 27 74 20 6c 6f 6e 67 20 65 6e 6f 75 67 │ isn't long enoug
    0x3e0 │ 68 2e 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f │ h...Common optio
    0x3f0 │ 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 │ ns:.    -h, --he
    0x400 │ 6c 70 20 20 20 20 20 20 20 20 20 20 20 20 20 44 │ lp             D
    0x410 │ 69 73 70 6c 61 79 20 74 68 69 73 20 6d 65 73 73 │ isplay this mess
    0x420 │ 61 67 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 │ age.    -o, --ou
    0x430 │ 74 70 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 57 │ tput <file>    W
    0x440 │ 72 69 74 65 20 6f 75 74 70 75 74 20 74 6f 20 3c │ rite output to <
    0x450 │ 66 69 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f 66 │ file> instead of
    0x460 │ 20 73 74 64 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c │  stdout..    -n,
    0x470 │ 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 20 │  --no-headers   
    0x480 │ 20 20 20 20 57 68 65 6e 20 73 65 74 2c 20 74 68 │     When set, th
    0x490 │ 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 6c 6c │ e first row will
    0x4a0 │ 20 4e 4f 54 20 62 65 20 69 6e 74 65 72 70 72 65 │  NOT be interpre
    0x4b0 │ 74 65 64 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ ted.            
    0x4c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 61 │                a
    0x4d0 │ 73 20 63 6f 6c 75 6d 6e 20 6e 61 6d 65 73 2e 20 │ s column names. 
    0x4e0 │ 4e 6f 74 65 20 74 68 61 74 20 74 68 69 73 20 68 │ Note that this h
    0x4f0 │ 61 73 20 6e 6f 20 65 66 66 65 63 74 20 77 68 65 │ as no effect whe
    0x500 │ 6e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ n.              
    0x510 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 63 6f 6e │              con
    0x520 │ 63 61 74 65 6e 61 74 69 6e 67 20 63 6f 6c 75 6d │ catenating colum
    0x530 │ 6e 73 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 65 │ ns..    -d, --de
    0x540 │ 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 54 │ limiter <arg>  T
    0x550 │ 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 74 │ he field delimit
    0x560 │ 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 43 │ er for reading C
    0x570 │ 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 20 │ SV data..       
    0x580 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x590 │ 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 69 │     Must be a si
    0x5a0 │ 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e 20 │ ngle character. 
    0x5b0 │ 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a          │ (default: ,).
}

fn cat::<impl at src/cmd/cat.rs:63:1: 63:10>::configs(_1: &cat::Args) -> Result<Vec<Config>, CliError> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<config::Config>, CliError>;
    let mut _2: std::result::Result<std::vec::Vec<config::Config>, std::string::String>;
    let _3: &[std::string::String];
    let mut _4: &std::vec::Vec<std::string::String>;
    let mut _5: std::option::Option<config::Delimiter>;
    let mut _6: bool;

    bb0: {
        _4 = &((*_1).2: std::vec::Vec<std::string::String>);
        _3 = <Vec<std::string::String> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_1).6: std::option::Option<config::Delimiter>);
        _6 = ((*_1).5: bool);
        _2 = many_configs(_3, move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<Vec<Config>, std::string::String>::map_err::<CliError, fn(std::string::String) -> CliError {<CliError as From<std::string::String>>::from}>(move _2, <CliError as From<std::string::String>>::from) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn cat::<impl at src/cmd/cat.rs:63:1: 63:10>::cat_rows(_1: &cat::Args) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::ByteRecord;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _5: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _6: &config::Config;
    let _7: config::Config;
    let _8: &std::option::Option<std::string::String>;
    let mut _9: isize;
    let mut _12: std::iter::Enumerate<std::vec::IntoIter<config::Config>>;
    let mut _13: std::iter::Enumerate<std::vec::IntoIter<config::Config>>;
    let mut _14: std::vec::IntoIter<config::Config>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<config::Config>>;
    let mut _16: std::result::Result<std::vec::Vec<config::Config>, CliError>;
    let mut _17: isize;
    let mut _21: std::option::Option<(usize, config::Config)>;
    let mut _22: &mut std::iter::Enumerate<std::vec::IntoIter<config::Config>>;
    let mut _23: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _28: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _29: &config::Config;
    let mut _30: isize;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _34: std::result::Result<(), csv::Error>;
    let mut _35: &config::Config;
    let mut _36: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _37: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _38: isize;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _41: std::result::Result<bool, csv::Error>;
    let mut _42: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _43: &mut csv::ByteRecord;
    let mut _44: isize;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _48: std::result::Result<(), csv::Error>;
    let mut _49: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _50: &csv::ByteRecord;
    let mut _51: isize;
    let mut _53: std::result::Result<(), std::io::Error>;
    let mut _54: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    scope 1 {
        debug row => _2;
        let mut _3: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _11: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        scope 2 {
            debug wtr => _3;
            let _18: std::result::Result<std::convert::Infallible, CliError>;
            let _19: std::vec::Vec<config::Config>;
            let mut _20: std::iter::Enumerate<std::vec::IntoIter<config::Config>>;
            scope 7 {
                debug residual => _18;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _19;
                scope 10 {
                }
            }
            scope 11 {
                debug iter => _20;
                let _24: usize;
                let _25: config::Config;
                scope 12 {
                    debug i => _24;
                    debug conf => _25;
                    let mut _26: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    let _31: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _32: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    scope 13 {
                        debug rdr => _26;
                        let _39: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _45: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _46: bool;
                        let _52: std::result::Result<std::convert::Infallible, csv::Error>;
                        scope 18 {
                            debug residual => _39;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => const ();
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug residual => _45;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _46;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug residual => _52;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => const ();
                            scope 29 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _31;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _32;
                        scope 17 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _11;
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = ByteRecord::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).4: std::option::Option<std::string::String>);
        _7 = Config::new(_8) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _6 = &_7;
        _5 = Config::writer(move _6) -> [return: bb3, unwind: bb51];
    }

    bb3: {
        _4 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _5) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _11 = move ((_4 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _3 = move _11;
        drop(_7) -> [return: bb9, unwind: bb50];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        drop(_7) -> [return: bb45, unwind: bb52];
    }

    bb9: {
        _16 = cat::Args::configs(_1) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        _15 = <Result<Vec<Config>, CliError> as Try>::branch(move _16) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        _19 = move ((_15 as Continue).0: std::vec::Vec<config::Config>);
        _14 = <Vec<Config> as IntoIterator>::into_iter(move _19) -> [return: bb14, unwind: bb50];
    }

    bb13: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _18) -> [return: bb57, unwind: bb50];
    }

    bb14: {
        _13 = <std::vec::IntoIter<Config> as Iterator>::enumerate(move _14) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _12 = <Enumerate<std::vec::IntoIter<Config>> as IntoIterator>::into_iter(move _13) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        _20 = move _12;
        goto -> bb17;
    }

    bb17: {
        _22 = &mut _20;
        _21 = <Enumerate<std::vec::IntoIter<Config>> as Iterator>::next(_22) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb20, 1: bb19, otherwise: bb6];
    }

    bb19: {
        _24 = (((_21 as Some).0: (usize, config::Config)).0: usize);
        _25 = move (((_21 as Some).0: (usize, config::Config)).1: config::Config);
        _29 = &_25;
        _28 = Config::reader(move _29) -> [return: bb21, unwind: bb48];
    }

    bb20: {
        drop(_20) -> [return: bb38, unwind: bb50];
    }

    bb21: {
        _27 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _28) -> [return: bb22, unwind: bb48];
    }

    bb22: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        _32 = move ((_27 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _26 = move _32;
        switchInt(move _24) -> [0: bb25, otherwise: bb29];
    }

    bb24: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _31) -> [return: bb58, unwind: bb48];
    }

    bb25: {
        _35 = &_25;
        _36 = &mut _26;
        _37 = &mut _3;
        _34 = Config::write_headers::<Box<dyn std::io::Read>, Box<dyn std::io::Write>>(move _35, _36, _37) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        _33 = <Result<(), csv::Error> as Try>::branch(move _34) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb29, 1: bb28, otherwise: bb6];
    }

    bb28: {
        _39 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _39) -> [return: bb59, unwind: bb47];
    }

    bb29: {
        _42 = &mut _26;
        _43 = &mut _2;
        _41 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _42, _43) -> [return: bb30, unwind: bb47];
    }

    bb30: {
        _40 = <Result<bool, csv::Error> as Try>::branch(move _41) -> [return: bb31, unwind: bb47];
    }

    bb31: {
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb32, 1: bb33, otherwise: bb6];
    }

    bb32: {
        _46 = ((_40 as Continue).0: bool);
        switchInt(_46) -> [0: bb55, otherwise: bb54];
    }

    bb33: {
        _45 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _45) -> [return: bb60, unwind: bb47];
    }

    bb34: {
        _47 = <Result<(), csv::Error> as Try>::branch(move _48) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        _51 = discriminant(_47);
        switchInt(move _51) -> [0: bb29, 1: bb36, otherwise: bb6];
    }

    bb36: {
        _52 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _52) -> [return: bb61, unwind: bb47];
    }

    bb37: {
        drop(_25) -> [return: bb17, unwind: bb49];
    }

    bb38: {
        _54 = &mut _3;
        _53 = Writer::<Box<dyn std::io::Write>>::flush(move _54) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        _0 = Result::<(), std::io::Error>::map_err::<CliError, fn(std::io::Error) -> CliError {<CliError as From<std::io::Error>>::from}>(move _53, <CliError as From<std::io::Error>>::from) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        drop(_3) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb42: {
        drop(_26) -> [return: bb43, unwind: bb48];
    }

    bb43: {
        drop(_25) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        drop(_20) -> [return: bb56, unwind: bb50];
    }

    bb45: {
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_26) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_25) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_7) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54: {
        _49 = &mut _3;
        _50 = &_2;
        _48 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _49, _50) -> [return: bb34, unwind: bb47];
    }

    bb55: {
        drop(_26) -> [return: bb37, unwind: bb48];
    }

    bb56: {
        drop(_3) -> [return: bb45, unwind: bb52];
    }

    bb57: {
        goto -> bb56;
    }

    bb58: {
        goto -> bb43;
    }

    bb59: {
        goto -> bb42;
    }

    bb60: {
        goto -> bb42;
    }

    bb61: {
        goto -> bb42;
    }
}

fn cat::<impl at src/cmd/cat.rs:63:1: 63:10>::cat_columns(_1: &cat::Args) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _4: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let _7: &std::option::Option<std::string::String>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _10: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>>;
    let mut _13: std::result::Result<std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>, std::io::Error>;
    let mut _14: std::iter::Map<std::vec::IntoIter<config::Config>, {closure@src/cmd/cat.rs:90:18: 90:24}>;
    let mut _15: std::vec::IntoIter<config::Config>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<config::Config>>;
    let mut _17: std::result::Result<std::vec::Vec<config::Config>, CliError>;
    let mut _18: isize;
    let mut _21: isize;
    let mut _25: std::slice::IterMut<'_, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _26: &mut std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _28: std::option::Option<&mut csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _29: &mut std::slice::IterMut<'_, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _30: isize;
    let _32: ();
    let mut _33: &mut std::vec::Vec<usize>;
    let mut _34: usize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _36: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _37: isize;
    let mut _41: std::iter::Map<std::slice::IterMut<'_, csv::Reader<std::boxed::Box<dyn std::io::Read>>>, {closure@src/cmd/cat.rs:101:34: 101:39}>;
    let mut _42: std::slice::IterMut<'_, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _43: &mut [csv::Reader<std::boxed::Box<dyn std::io::Read>>];
    let mut _44: &mut std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _47: std::iter::Zip<std::slice::IterMut<'_, csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>>;
    let mut _48: std::iter::Zip<std::slice::IterMut<'_, csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>>;
    let mut _49: std::slice::IterMut<'_, csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>;
    let mut _50: &mut [csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>];
    let mut _51: &mut std::vec::Vec<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>;
    let mut _52: std::slice::Iter<'_, usize>;
    let _53: &[usize];
    let mut _54: &std::vec::Vec<usize>;
    let _56: ();
    let mut _57: std::option::Option<(&mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>, &usize)>;
    let mut _58: &mut std::iter::Zip<std::slice::IterMut<'_, csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>>;
    let mut _59: isize;
    let mut _62: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: (usize, bool);
    let mut _66: bool;
    let mut _67: std::ops::Range<usize>;
    let mut _68: std::ops::Range<usize>;
    let mut _70: std::option::Option<usize>;
    let mut _71: &mut std::ops::Range<usize>;
    let mut _72: isize;
    let _73: ();
    let mut _74: &mut csv::ByteRecord;
    let mut _75: &[u8];
    let _76: &[u8; 0];
    let mut _78: CliError;
    let mut _80: &mut csv::ByteRecord;
    let mut _81: &csv::ByteRecord;
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: usize;
    let mut _85: &std::vec::Vec<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _87: std::result::Result<(), csv::Error>;
    let mut _88: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _89: &csv::ByteRecord;
    let mut _90: isize;
    let mut _92: std::result::Result<(), std::io::Error>;
    let mut _93: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _94: &usize;
    let mut _95: isize;
    let mut _96: isize;
    scope 1 {
        debug wtr => _2;
        let mut _11: std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
        let _19: std::result::Result<std::convert::Infallible, CliError>;
        let _20: std::vec::Vec<config::Config>;
        let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _23: std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
        scope 6 {
            debug rdrs => _11;
            let mut _24: std::vec::Vec<usize>;
            scope 15 {
                debug lengths => _24;
                let mut _27: std::slice::IterMut<'_, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
                let mut _40: std::vec::Vec<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>;
                scope 16 {
                    debug iter => _27;
                    let _31: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    scope 17 {
                        debug rdr => _31;
                        let _38: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _39: &csv::ByteRecord;
                        scope 18 {
                            debug residual => _38;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _39;
                            scope 21 {
                            }
                        }
                    }
                }
                scope 22 {
                    debug iters => _40;
                    let mut _45: csv::ByteRecord;
                    scope 23 {
                        debug record => _45;
                        let mut _46: usize;
                        scope 24 {
                            debug num_done => _46;
                            let mut _55: std::iter::Zip<std::slice::IterMut<'_, csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>>;
                            let _91: std::result::Result<std::convert::Infallible, csv::Error>;
                            scope 25 {
                                debug iter => _55;
                                let _60: &mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
                                let _61: usize;
                                scope 26 {
                                    debug iter => _60;
                                    debug len => _61;
                                    let mut _69: std::ops::Range<usize>;
                                    let _77: csv::Error;
                                    let _79: csv::ByteRecord;
                                    scope 27 {
                                        debug iter => _69;
                                    }
                                    scope 28 {
                                        debug err => _77;
                                    }
                                    scope 29 {
                                        debug next => _79;
                                    }
                                }
                            }
                            scope 30 {
                                debug residual => _91;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => const ();
                                scope 33 {
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _22;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _23;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _7 = &((*_1).4: std::option::Option<std::string::String>);
        _6 = Config::new(_7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::writer(move _5) -> [return: bb2, unwind: bb84];
    }

    bb2: {
        _3 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _4) -> [return: bb3, unwind: bb84];
    }

    bb3: {
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_3 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _2 = move _10;
        drop(_6) -> [return: bb8, unwind: bb83];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb7, unwind: bb84];
    }

    bb7: {
        drop(_6) -> [return: bb77, unwind continue];
    }

    bb8: {
        _17 = cat::Args::configs(_1) -> [return: bb9, unwind: bb83];
    }

    bb9: {
        _16 = <Result<Vec<Config>, CliError> as Try>::branch(move _17) -> [return: bb10, unwind: bb83];
    }

    bb10: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _20 = move ((_16 as Continue).0: std::vec::Vec<config::Config>);
        _15 = <Vec<Config> as IntoIterator>::into_iter(move _20) -> [return: bb13, unwind: bb83];
    }

    bb12: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _19) -> [return: bb92, unwind: bb83];
    }

    bb13: {
        _14 = <std::vec::IntoIter<Config> as Iterator>::map::<Result<Reader<Box<dyn std::io::Read>>, std::io::Error>, {closure@src/cmd/cat.rs:90:18: 90:24}>(move _15, const ZeroSized: {closure@src/cmd/cat.rs:90:18: 90:24}) -> [return: bb14, unwind: bb83];
    }

    bb14: {
        _13 = <std::iter::Map<std::vec::IntoIter<Config>, {closure@src/cmd/cat.rs:90:18: 90:24}> as Iterator>::collect::<Result<Vec<Reader<Box<dyn std::io::Read>>>, std::io::Error>>(move _14) -> [return: bb15, unwind: bb83];
    }

    bb15: {
        _12 = <Result<Vec<Reader<Box<dyn std::io::Read>>>, std::io::Error> as Try>::branch(move _13) -> [return: bb16, unwind: bb83];
    }

    bb16: {
        _21 = discriminant(_12);
        switchInt(move _21) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        _23 = move ((_12 as Continue).0: std::vec::Vec<csv::Reader<std::boxed::Box<dyn std::io::Read>>>);
        _11 = move _23;
        _24 = Vec::<usize>::new() -> [return: bb19, unwind: bb82];
    }

    bb18: {
        _22 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb93, unwind: bb83];
    }

    bb19: {
        _26 = &mut _11;
        _25 = <&mut Vec<Reader<Box<dyn std::io::Read>>> as IntoIterator>::into_iter(move _26) -> [return: bb20, unwind: bb81];
    }

    bb20: {
        _27 = move _25;
        goto -> bb21;
    }

    bb21: {
        _29 = &mut _27;
        _28 = <std::slice::IterMut<'_, Reader<Box<dyn std::io::Read>>> as Iterator>::next(_29) -> [return: bb22, unwind: bb81];
    }

    bb22: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb24, 1: bb23, otherwise: bb5];
    }

    bb23: {
        _31 = move ((_28 as Some).0: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _33 = &mut _24;
        _36 = Reader::<Box<dyn std::io::Read>>::byte_headers(_31) -> [return: bb25, unwind: bb81];
    }

    bb24: {
        _44 = &mut _11;
        _43 = <Vec<Reader<Box<dyn std::io::Read>>> as DerefMut>::deref_mut(move _44) -> [return: bb30, unwind: bb81];
    }

    bb25: {
        _35 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _36) -> [return: bb26, unwind: bb81];
    }

    bb26: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        _39 = ((_35 as Continue).0: &csv::ByteRecord);
        _34 = ByteRecord::len(_39) -> [return: bb29, unwind: bb81];
    }

    bb28: {
        _38 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _38) -> [return: bb94, unwind: bb81];
    }

    bb29: {
        _32 = Vec::<usize>::push(move _33, move _34) -> [return: bb95, unwind: bb81];
    }

    bb30: {
        _42 = core::slice::<impl [Reader<Box<dyn std::io::Read>>]>::iter_mut(_43) -> [return: bb31, unwind: bb81];
    }

    bb31: {
        _41 = <std::slice::IterMut<'_, Reader<Box<dyn std::io::Read>>> as Iterator>::map::<ByteRecordsIter<'_, Box<dyn std::io::Read>>, {closure@src/cmd/cat.rs:101:34: 101:39}>(move _42, const ZeroSized: {closure@src/cmd/cat.rs:101:34: 101:39}) -> [return: bb32, unwind: bb81];
    }

    bb32: {
        _40 = <std::iter::Map<std::slice::IterMut<'_, Reader<Box<dyn std::io::Read>>>, {closure@src/cmd/cat.rs:101:34: 101:39}> as Iterator>::collect::<Vec<ByteRecordsIter<'_, Box<dyn std::io::Read>>>>(move _41) -> [return: bb96, unwind: bb81];
    }

    bb33: {
        _45 = ByteRecord::new() -> [return: bb34, unwind: bb80];
    }

    bb34: {
        _46 = const 0_usize;
        _51 = &mut _40;
        _50 = <Vec<ByteRecordsIter<'_, Box<dyn std::io::Read>>> as DerefMut>::deref_mut(move _51) -> [return: bb35, unwind: bb79];
    }

    bb35: {
        _49 = core::slice::<impl [ByteRecordsIter<'_, Box<dyn std::io::Read>>]>::iter_mut(_50) -> [return: bb36, unwind: bb79];
    }

    bb36: {
        _54 = &_24;
        _53 = <Vec<usize> as Deref>::deref(move _54) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        _52 = core::slice::<impl [usize]>::iter(_53) -> [return: bb38, unwind: bb79];
    }

    bb38: {
        _48 = <std::slice::IterMut<'_, ByteRecordsIter<'_, Box<dyn std::io::Read>>> as Iterator>::zip::<std::slice::Iter<'_, usize>>(move _49, move _52) -> [return: bb39, unwind: bb79];
    }

    bb39: {
        _47 = <Zip<std::slice::IterMut<'_, ByteRecordsIter<'_, Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>> as IntoIterator>::into_iter(move _48) -> [return: bb40, unwind: bb79];
    }

    bb40: {
        _55 = move _47;
        goto -> bb41;
    }

    bb41: {
        _58 = &mut _55;
        _57 = <Zip<std::slice::IterMut<'_, ByteRecordsIter<'_, Box<dyn std::io::Read>>>, std::slice::Iter<'_, usize>> as Iterator>::next(_58) -> [return: bb42, unwind: bb79];
    }

    bb42: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb44, 1: bb43, otherwise: bb5];
    }

    bb43: {
        _94 = deref_copy (((_57 as Some).0: (&mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>, &usize)).1: &usize);
        _61 = (*_94);
        _60 = move (((_57 as Some).0: (&mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>, &usize)).0: &mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>);
        _62 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as Iterator>::next(_60) -> [return: bb45, unwind: bb79];
    }

    bb44: {
        _83 = _46;
        _85 = &_40;
        _84 = Vec::<ByteRecordsIter<'_, Box<dyn std::io::Read>>>::len(move _85) -> [return: bb59, unwind: bb79];
    }

    bb45: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb48, 1: bb46, otherwise: bb5];
    }

    bb46: {
        _63 = discriminant(((_62 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>));
        switchInt(move _63) -> [0: bb47, 1: bb56, otherwise: bb5];
    }

    bb47: {
        _79 = move ((((_62 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>) as Ok).0: csv::ByteRecord);
        _80 = &mut _45;
        _81 = &_79;
        _56 = <ByteRecord as Extend<&[u8]>>::extend::<&ByteRecord>(move _80, move _81) -> [return: bb58, unwind: bb78];
    }

    bb48: {
        _65 = CheckedAdd(_46, const 1_usize);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", _46, const 1_usize) -> [success: bb49, unwind: bb91];
    }

    bb49: {
        _46 = move (_65.0: usize);
        _66 = ((*_1).3: bool);
        switchInt(move _66) -> [0: bb55, otherwise: bb50];
    }

    bb50: {
        _68 = std::ops::Range::<usize> { start: const 0_usize, end: _61 };
        _67 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _68) -> [return: bb51, unwind: bb91];
    }

    bb51: {
        _69 = move _67;
        goto -> bb52;
    }

    bb52: {
        _71 = &mut _69;
        _70 = <std::ops::Range<usize> as Iterator>::next(_71) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb88, 1: bb54, otherwise: bb5];
    }

    bb54: {
        _74 = &mut _45;
        _76 = const b"";
        _75 = _76 as &[u8] (PointerCoercion(Unsize));
        _73 = ByteRecord::push_field(move _74, move _75) -> [return: bb97, unwind: bb91];
    }

    bb55: {
        goto -> bb65;
    }

    bb56: {
        _77 = move ((((_62 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>) as Err).0: csv::Error);
        _78 = <CliError as From<csv::Error>>::from(move _77) -> [return: bb57, unwind: bb91];
    }

    bb57: {
        _0 = Result::<(), CliError>::Err(move _78);
        _96 = discriminant(_62);
        switchInt(move _96) -> [1: bb90, otherwise: bb89];
    }

    bb58: {
        drop(_79) -> [return: bb88, unwind: bb91];
    }

    bb59: {
        _82 = Ge(move _83, move _84);
        switchInt(move _82) -> [0: bb60, otherwise: bb65];
    }

    bb60: {
        _88 = &mut _2;
        _89 = &_45;
        _87 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _88, _89) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        _86 = <Result<(), csv::Error> as Try>::branch(move _87) -> [return: bb62, unwind: bb79];
    }

    bb62: {
        _90 = discriminant(_86);
        switchInt(move _90) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        drop(_45) -> [return: bb33, unwind: bb80];
    }

    bb64: {
        _91 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _91) -> [return: bb98, unwind: bb79];
    }

    bb65: {
        drop(_45) -> [return: bb66, unwind: bb80];
    }

    bb66: {
        _93 = &mut _2;
        _92 = Writer::<Box<dyn std::io::Write>>::flush(move _93) -> [return: bb67, unwind: bb80];
    }

    bb67: {
        _0 = Result::<(), std::io::Error>::map_err::<CliError, fn(std::io::Error) -> CliError {<CliError as From<std::io::Error>>::from}>(move _92, <CliError as From<std::io::Error>>::from) -> [return: bb68, unwind: bb80];
    }

    bb68: {
        drop(_40) -> [return: bb69, unwind: bb81];
    }

    bb69: {
        drop(_24) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        drop(_11) -> [return: bb71, unwind: bb83];
    }

    bb71: {
        drop(_2) -> [return: bb77, unwind continue];
    }

    bb72: {
        drop(_45) -> [return: bb73, unwind: bb80];
    }

    bb73: {
        drop(_40) -> [return: bb74, unwind: bb81];
    }

    bb74: {
        drop(_24) -> [return: bb75, unwind: bb82];
    }

    bb75: {
        drop(_11) -> [return: bb76, unwind: bb83];
    }

    bb76: {
        drop(_2) -> [return: bb77, unwind continue];
    }

    bb77: {
        return;
    }

    bb78 (cleanup): {
        drop(_79) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_45) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_40) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_24) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_11) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_2) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_6) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        resume;
    }

    bb86: {
        goto -> bb41;
    }

    bb87: {
        goto -> bb86;
    }

    bb88: {
        _95 = discriminant(_62);
        switchInt(move _95) -> [1: bb87, otherwise: bb86];
    }

    bb89: {
        goto -> bb72;
    }

    bb90: {
        goto -> bb89;
    }

    bb91 (cleanup): {
        goto -> bb79;
    }

    bb92: {
        goto -> bb76;
    }

    bb93: {
        goto -> bb76;
    }

    bb94: {
        goto -> bb74;
    }

    bb95: {
        goto -> bb21;
    }

    bb96: {
        goto -> bb33;
    }

    bb97: {
        goto -> bb52;
    }

    bb98: {
        goto -> bb72;
    }
}

alloc2 (size: 0, align: 1) {}

fn cat::<impl at src/cmd/cat.rs:63:1: 63:10>::cat_columns::{closure#0}(_1: &mut {closure@src/cmd/cat.rs:90:18: 90:24}, _2: Config) -> Result<Reader<Box<dyn std::io::Read>>, std::io::Error> {
    debug conf => _2;
    let mut _0: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _3: &config::Config;
    let _4: config::Config;

    bb0: {
        _4 = Config::no_headers(move _2, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = Config::reader(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn cat::<impl at src/cmd/cat.rs:63:1: 63:10>::cat_columns::{closure#1}(_1: &mut {closure@src/cmd/cat.rs:101:34: 101:39}, _2: &mut Reader<Box<dyn std::io::Read>>) -> ByteRecordsIter<'_, Box<dyn std::io::Read>> {
    debug rdr => _2;
    let mut _0: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;

    bb0: {
        _0 = Reader::<Box<dyn std::io::Read>>::byte_records(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static count::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nPrints a count of the number of records in the CSV data.\n\nNote that the count will not include the header row (unless --no-headers is\ngiven).\n\nUsage:\n    xsv count [options] [<input>]\n\nCommon options:\n    -h, --help             Display this message\n    -n, --no-headers       When set, the first row will not be included in\n                           the count.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const count::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize(_1: __D) -> Result<count::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::count::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<count::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::expecting(_1: &count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_u64(_1: count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E> {
    debug self => const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _4: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _5: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: serde::de::Unexpected<'_>;
    let mut _8: &dyn serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field0;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field1;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field2;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_str(_1: count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E> {
    debug self => const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _7: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _8: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _9: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field0;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field1;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field2;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__ignore;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_bytes(_1: count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E> {
    debug self => const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _13: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _14: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
    let mut _15: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb42, otherwise: bb10];
    }

    bb10: {
        _15 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__ignore;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb45;
    }

    bb11: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb27, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 15]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 15]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 15]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 15]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 15]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 15]) -> [110: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 15]) -> [111: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 15]) -> [95: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 15]) -> [104: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 15]) -> [101: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 15]) -> [97: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[11 of 15]) -> [100: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[12 of 15]) -> [101: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[13 of 15]) -> [114: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[14 of 15]) -> [115: bb43, otherwise: bb10];
    }

    bb27: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb28];
    }

    bb28: {
        switchInt((*_2)[0 of 14]) -> [102: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[1 of 14]) -> [108: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[2 of 14]) -> [97: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[3 of 14]) -> [103: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[4 of 14]) -> [95: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[5 of 14]) -> [100: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[6 of 14]) -> [101: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[7 of 14]) -> [108: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[8 of 14]) -> [105: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[9 of 14]) -> [109: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[10 of 14]) -> [105: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[11 of 14]) -> [116: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[12 of 14]) -> [101: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[13 of 14]) -> [114: bb44, otherwise: bb10];
    }

    bb42: {
        _12 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field0;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb45;
    }

    bb43: {
        _13 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field1;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb45;
    }

    bb44: {
        _14 = count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field::__field2;
        _0 = Result::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb45;
    }

    bb45: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize(_1: __D) -> Result<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor>(move _1, const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::expecting(_1: &count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_seq(_1: count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<count::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<count::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::count::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: cmd::count::Args;
    let mut _32: std::option::Option<std::string::String>;
    let mut _33: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<bool>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: bool;
        let mut _34: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<std::option::Option<config::Delimiter>>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: std::option::Option<config::Delimiter>;
            let mut _35: &&str;
            scope 9 {
                debug __field2 => _28;
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb21;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _33 = const _;
        _12 = _33 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb24];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<bool>(_14) -> [return: bb8, unwind: bb23];
    }

    bb7: {
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb21;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb20;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<bool>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _34 = const _;
        _21 = _34 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb23];
    }

    bb12: {
        _19 = ((_16 as Some).0: bool);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_23) -> [return: bb14, unwind: bb23];
    }

    bb13: {
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb20;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb20;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _35 = const _;
        _30 = _35 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb23];
    }

    bb18: {
        _28 = ((_25 as Some).0: std::option::Option<config::Delimiter>);
        _32 = move _3;
        _31 = count::Args { arg_input: move _32, flag_no_headers: _19, flag_delimiter: _28 };
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _31);
        drop(_2) -> [return: bb22, unwind continue];
    }

    bb19: {
        _0 = Result::<count::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb20;
    }

    bb20: {
        drop(_3) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        drop(_2) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}

promoted[0] in count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

fn count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::<impl at src/cmd/count.rs:24:10: 24:21>::visit_map(_1: count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<count::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<count::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::count::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _6: std::result::Result<std::option::Option<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _16: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<std::option::Option<std::string::String>>;
    let mut _18: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<bool>;
    let mut _25: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<bool>;
    let mut _27: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _34: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _36: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _49: isize;
    let mut _53: isize;
    let mut _55: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _56: isize;
    let mut _60: isize;
    let mut _62: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _63: isize;
    let mut _66: cmd::count::Args;
    let mut _67: std::option::Option<std::string::String>;
    let mut _68: bool;
    let mut _69: std::option::Option<config::Delimiter>;
    let mut _70: bool;
    let mut _71: isize;
    let mut _72: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<bool>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<config::Delimiter>>;
            scope 3 {
                debug __field2 => _5;
                let _45: std::option::Option<std::string::String>;
                let _47: std::option::Option<std::string::String>;
                let _50: std::option::Option<std::string::String>;
                let _51: <__A as serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field>;
                    let _10: <__A as serde::de::MapAccess<'_>>::Error;
                    let _12: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field;
                    let _21: std::option::Option<std::string::String>;
                    let _22: <__A as serde::de::MapAccess<'_>>::Error;
                    let _30: bool;
                    let _31: <__A as serde::de::MapAccess<'_>>::Error;
                    let _39: std::option::Option<config::Delimiter>;
                    let _40: <__A as serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __field0 => _45;
                    let _52: bool;
                    let _54: bool;
                    let _57: bool;
                    let _58: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 20 {
                        debug __field1 => _52;
                        let _59: std::option::Option<config::Delimiter>;
                        let _61: std::option::Option<config::Delimiter>;
                        let _64: std::option::Option<config::Delimiter>;
                        let _65: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 24 {
                            debug __field2 => _59;
                        }
                        scope 25 {
                            debug __field2 => _61;
                        }
                        scope 26 {
                            debug __val => _64;
                        }
                        scope 27 {
                            debug __err => _65;
                        }
                    }
                    scope 21 {
                        debug __field1 => _54;
                    }
                    scope 22 {
                        debug __val => _57;
                    }
                    scope 23 {
                        debug __err => _58;
                    }
                }
                scope 17 {
                    debug __field0 => _47;
                }
                scope 18 {
                    debug __val => _50;
                }
                scope 19 {
                    debug __err => _51;
                }
            }
        }
    }

    bb0: {
        _70 = const false;
        _70 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<bool>::None;
        _5 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for count::Args>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb66];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb56;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _46 = discriminant(_3);
        switchInt(move _46) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb7: {
        _12 = move ((_9 as Some).0: cmd::count::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::count::Args>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb19, 2: bb27, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb35, unwind: bb66];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_15) -> [return: bb10, unwind: bb66];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb66];
    }

    bb12: {
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb56;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_19) -> [return: bb14, unwind: bb66];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb56;
    }

    bb16: {
        _21 = move ((_18 as Ok).0: std::option::Option<std::string::String>);
        _17 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _21);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _70 = const true;
        _3 = move _17;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _70 = const true;
        _3 = move _17;
        goto -> bb66;
    }

    bb19: {
        _24 = &_4;
        _23 = std::option::Option::<bool>::is_some(_24) -> [return: bb20, unwind: bb66];
    }

    bb20: {
        switchInt(move _23) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _25 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb22, unwind: bb66];
    }

    bb22: {
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb56;
    }

    bb23: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<bool>(_28) -> [return: bb24, unwind: bb66];
    }

    bb24: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _31 = move ((_27 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb56;
    }

    bb26: {
        _30 = ((_27 as Ok).0: bool);
        _26 = std::option::Option::<bool>::Some(_30);
        _4 = move _26;
        goto -> bb1;
    }

    bb27: {
        _33 = &_5;
        _32 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_33) -> [return: bb28, unwind: bb66];
    }

    bb28: {
        switchInt(move _32) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _34 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb30, unwind: bb66];
    }

    bb30: {
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb56;
    }

    bb31: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_37) -> [return: bb32, unwind: bb66];
    }

    bb32: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _40 = move ((_36 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb56;
    }

    bb34: {
        _39 = ((_36 as Ok).0: std::option::Option<config::Delimiter>);
        _35 = std::option::Option::<std::option::Option<Delimiter>>::Some(_39);
        _5 = move _35;
        goto -> bb1;
    }

    bb35: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb36, otherwise: bb4];
    }

    bb36: {
        _44 = move ((_41 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb56;
    }

    bb37: {
        _48 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb39, unwind: bb66];
    }

    bb38: {
        _70 = const false;
        _47 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _45 = move _47;
        goto -> bb42;
    }

    bb39: {
        _49 = discriminant(_48);
        switchInt(move _49) -> [0: bb41, 1: bb40, otherwise: bb4];
    }

    bb40: {
        _51 = move ((_48 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb56;
    }

    bb41: {
        _50 = move ((_48 as Ok).0: std::option::Option<std::string::String>);
        _45 = move _50;
        goto -> bb42;
    }

    bb42: {
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        _55 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb45, unwind: bb58];
    }

    bb44: {
        _54 = ((_4 as Some).0: bool);
        _52 = _54;
        goto -> bb48;
    }

    bb45: {
        _56 = discriminant(_55);
        switchInt(move _56) -> [0: bb47, 1: bb46, otherwise: bb4];
    }

    bb46: {
        _58 = move ((_55 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb55;
    }

    bb47: {
        _57 = ((_55 as Ok).0: bool);
        _52 = _57;
        goto -> bb48;
    }

    bb48: {
        _60 = discriminant(_5);
        switchInt(move _60) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        _62 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb51, unwind: bb58];
    }

    bb50: {
        _61 = ((_5 as Some).0: std::option::Option<config::Delimiter>);
        _59 = _61;
        goto -> bb54;
    }

    bb51: {
        _63 = discriminant(_62);
        switchInt(move _63) -> [0: bb53, 1: bb52, otherwise: bb4];
    }

    bb52: {
        _65 = move ((_62 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb55;
    }

    bb53: {
        _64 = ((_62 as Ok).0: std::option::Option<config::Delimiter>);
        _59 = _64;
        goto -> bb54;
    }

    bb54: {
        _67 = move _45;
        _68 = _52;
        _69 = _59;
        _66 = count::Args { arg_input: move _67, flag_no_headers: move _68, flag_delimiter: move _69 };
        _0 = Result::<count::Args, <__A as MapAccess<'_>>::Error>::Ok(move _66);
        _70 = const false;
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb55: {
        drop(_45) -> [return: bb56, unwind: bb66];
    }

    bb56: {
        _71 = discriminant(_3);
        switchInt(move _71) -> [1: bb62, otherwise: bb61];
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_45) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_2) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }

    bb61: {
        _70 = const false;
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb62: {
        switchInt(_70) -> [0: bb61, otherwise: bb63];
    }

    bb63: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb61, unwind: bb59];
    }

    bb64 (cleanup): {
        switchInt(_70) -> [0: bb59, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        _72 = discriminant(_3);
        switchInt(move _72) -> [1: bb64, otherwise: bb59];
    }
}

const count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in count::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/count.rs:24:10: 24:21>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "arg_input", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn count::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::count::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::count::Args>;
    let mut _4: std::result::Result<cmd::count::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::count::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _14: bool;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _17: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _18: &config::Config;
    let mut _19: isize;
    let mut _22: isize;
    let mut _24: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _27: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _28: &config::Config;
    let mut _29: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _35: std::result::Result<bool, csv::Error>;
    let mut _36: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _37: &mut csv::ByteRecord;
    let mut _38: isize;
    let mut _41: (u64, bool);
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &u64;
    let mut _51: &str;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug conf => _9;
            let _15: u64;
            let _20: std::result::Result<std::convert::Infallible, CliError>;
            let _21: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
            let _23: index::Indexed<std::fs::File, std::fs::File>;
            let mut _25: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            let _30: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _31: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            scope 7 {
                debug count => _15;
                let mut _50: &[&str; 2];
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _21;
                scope 11 {
                }
            }
            scope 12 {
                debug idx => _23;
            }
            scope 13 {
                debug rdr => _25;
                let mut _32: u64;
                scope 18 {
                    debug count => _32;
                    let mut _33: csv::ByteRecord;
                    scope 19 {
                        debug record => _33;
                        let _39: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _40: bool;
                        scope 20 {
                            debug residual => _39;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _40;
                            scope 23 {
                            }
                        }
                    }
                }
            }
            scope 14 {
                debug residual => _30;
                scope 15 {
                }
            }
            scope 16 {
                debug val => _31;
                scope 17 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc3: &&str};
        _51 = deref_copy (*_5);
        _4 = get_args::<count::Args>(_51, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<count::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::count::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb40];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb35, unwind continue];
    }

    bb6: {
        _13 = (_2.2: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _14 = (_2.1: bool);
        _9 = Config::no_headers(move _10, move _14) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _18 = &_9;
        _17 = Config::indexed(move _18) -> [return: bb9, unwind: bb39];
    }

    bb9: {
        _16 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _17) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        _21 = move ((_16 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _22 = discriminant(_21);
        switchInt(move _22) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb12: {
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _20) -> [return: bb45, unwind: bb39];
    }

    bb13: {
        _28 = &_9;
        _27 = Config::reader(move _28) -> [return: bb16, unwind: bb39];
    }

    bb14: {
        _23 = move ((_21 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _24 = &_23;
        _15 = Indexed::<File, File>::count(move _24) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        drop(_23) -> [return: bb44, unwind: bb39];
    }

    bb16: {
        _26 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _27) -> [return: bb17, unwind: bb39];
    }

    bb17: {
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _31 = move ((_26 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _25 = move _31;
        _32 = const 0_u64;
        _33 = ByteRecord::new() -> [return: bb46, unwind: bb37];
    }

    bb19: {
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb47, unwind: bb39];
    }

    bb20: {
        _36 = &mut _25;
        _37 = &mut _33;
        _35 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _36, _37) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _34 = <Result<bool, csv::Error> as Try>::branch(move _35) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        _40 = ((_34 as Continue).0: bool);
        switchInt(_40) -> [0: bb43, otherwise: bb42];
    }

    bb24: {
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _39) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        drop(_33) -> [return: bb32, unwind: bb37];
    }

    bb26: {
        _32 = move (_41.0: u64);
        goto -> bb20;
    }

    bb27: {
        drop(_25) -> [return: bb44, unwind: bb39];
    }

    bb28: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        _42 = _print(move _43) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_9) -> [return: bb31, unwind: bb40];
    }

    bb31: {
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb32: {
        drop(_25) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        drop(_9) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_33) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_25) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_23) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_9) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_2) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }

    bb42: {
        _41 = CheckedAdd(_32, const 1_u64);
        assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", _32, const 1_u64) -> [success: bb26, unwind: bb36];
    }

    bb43: {
        _15 = _32;
        drop(_33) -> [return: bb27, unwind: bb37];
    }

    bb44: {
        _50 = const _;
        _44 = _50 as &[&str] (PointerCoercion(Unsize));
        _49 = &_15;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_49) -> [return: bb28, unwind: bb39];
    }

    bb45: {
        goto -> bb33;
    }

    bb46: {
        goto -> bb20;
    }

    bb47: {
        goto -> bb33;
    }
}

alloc3 (static: count::USAGE, size: 16, align: 8) {
    ╾────alloc182<imm>────╼ f4 01 00 00 00 00 00 00 │ ╾──────╼........
}

alloc182 (size: 500, align: 1) {
    0x000 │ 0a 50 72 69 6e 74 73 20 61 20 63 6f 75 6e 74 20 │ .Prints a count 
    0x010 │ 6f 66 20 74 68 65 20 6e 75 6d 62 65 72 20 6f 66 │ of the number of
    0x020 │ 20 72 65 63 6f 72 64 73 20 69 6e 20 74 68 65 20 │  records in the 
    0x030 │ 43 53 56 20 64 61 74 61 2e 0a 0a 4e 6f 74 65 20 │ CSV data...Note 
    0x040 │ 74 68 61 74 20 74 68 65 20 63 6f 75 6e 74 20 77 │ that the count w
    0x050 │ 69 6c 6c 20 6e 6f 74 20 69 6e 63 6c 75 64 65 20 │ ill not include 
    0x060 │ 74 68 65 20 68 65 61 64 65 72 20 72 6f 77 20 28 │ the header row (
    0x070 │ 75 6e 6c 65 73 73 20 2d 2d 6e 6f 2d 68 65 61 64 │ unless --no-head
    0x080 │ 65 72 73 20 69 73 0a 67 69 76 65 6e 29 2e 0a 0a │ ers is.given)...
    0x090 │ 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 63 │ Usage:.    xsv c
    0x0a0 │ 6f 75 6e 74 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b │ ount [options] [
    0x0b0 │ 3c 69 6e 70 75 74 3e 5d 0a 0a 43 6f 6d 6d 6f 6e │ <input>]..Common
    0x0c0 │ 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 68 │  options:.    -h
    0x0d0 │ 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 20 20 20 │ , --help        
    0x0e0 │ 20 20 20 20 20 44 69 73 70 6c 61 79 20 74 68 69 │      Display thi
    0x0f0 │ 73 20 6d 65 73 73 61 67 65 0a 20 20 20 20 2d 6e │ s message.    -n
    0x100 │ 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 │ , --no-headers  
    0x110 │ 20 20 20 20 20 57 68 65 6e 20 73 65 74 2c 20 74 │      When set, t
    0x120 │ 68 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 6c │ he first row wil
    0x130 │ 6c 20 6e 6f 74 20 62 65 20 69 6e 63 6c 75 64 65 │ l not be include
    0x140 │ 64 20 69 6e 0a 20 20 20 20 20 20 20 20 20 20 20 │ d in.           
    0x150 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x160 │ 74 68 65 20 63 6f 75 6e 74 2e 0a 20 20 20 20 2d │ the count..    -
    0x170 │ 64 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c │ d, --delimiter <
    0x180 │ 61 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 │ arg>  The field 
    0x190 │ 64 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 │ delimiter for re
    0x1a0 │ 61 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a │ ading CSV data..
    0x1b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1c0 │ 20 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 │            Must 
    0x1d0 │ 62 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 │ be a single char
    0x1e0 │ 61 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a │ acter. (default:
    0x1f0 │ 20 2c 29 0a                                     │  ,).
}

promoted[0] in count::run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

static fixlengths::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nTransforms CSV data so that all records have the same length. The length is\nthe length of the longest record in the data (not counting trailing empty fields,\nbut at least 1). Records with smaller lengths are padded with empty fields.\n\nThis requires two complete scans of the CSV data: one for determining the\nrecord size and one for the actual transform. Because of this, the input\ngiven must be a file and not stdin.\n\nAlternatively, if --length is set, then all records are forced to that length.\nThis requires a single pass and can be done with stdin.\n\nUsage:\n    xsv fixlengths [options] [<input>]\n\nfixlengths options:\n    -l, --length <arg>     Forcefully set the length of each record. If a\n                           record is not the size given, then it is truncated\n                           or expanded as appropriate.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const fixlengths::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<fixlengths::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fixlengths::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<fixlengths::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::expecting(_1: &fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_u64(_1: fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E> {
    debug self => const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _4: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _5: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _6: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _7: __E;
    let mut _8: serde::de::Unexpected<'_>;
    let mut _9: &dyn serde::de::Expected;
    let mut _10: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1];
    }

    bb1: {
        _8 = Unexpected::<'_>::Unsigned(_2);
        _10 = const _;
        _9 = _10 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _7 = <__E as serde::de::Error>::invalid_value(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb2: {
        _3 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field0;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb7;
    }

    bb3: {
        _4 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field1;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb7;
    }

    bb4: {
        _5 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field2;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb5: {
        _6 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field3;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

promoted[0] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 4";
        _0 = &_1;
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_str(_1: fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E> {
    debug self => const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _8: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _9: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _10: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _11: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;

    bb0: {
        _6 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb12, unwind continue];
    }

    bb1: {
        _7 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field0;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb13;
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_2, const "flag_length") -> [return: bb11, unwind continue];
    }

    bb3: {
        _8 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field1;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb13;
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb10, unwind continue];
    }

    bb5: {
        _9 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field2;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb13;
    }

    bb6: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field3;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb13;
    }

    bb8: {
        _11 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__ignore;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb13;
    }

    bb9: {
        switchInt(move _3) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb11: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb12: {
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb13: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_bytes(_1: fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E> {
    debug self => const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _13: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _14: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _15: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
    let mut _16: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb43, otherwise: bb10];
    }

    bb10: {
        _16 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__ignore;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb47;
    }

    bb11: {
        _6 = Len((*_2));
        _7 = const 11_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb28, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 11]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 11]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 11]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 11]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 11]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 11]) -> [108: bb18, 111: bb23, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 11]) -> [101: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 11]) -> [110: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 11]) -> [103: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 11]) -> [116: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 11]) -> [104: bb44, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[6 of 11]) -> [117: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[7 of 11]) -> [116: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[8 of 11]) -> [112: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[9 of 11]) -> [117: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[10 of 11]) -> [116: bb45, otherwise: bb10];
    }

    bb28: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb29];
    }

    bb29: {
        switchInt((*_2)[0 of 14]) -> [102: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[1 of 14]) -> [108: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[2 of 14]) -> [97: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[3 of 14]) -> [103: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[4 of 14]) -> [95: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[5 of 14]) -> [100: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[6 of 14]) -> [101: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[7 of 14]) -> [108: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[8 of 14]) -> [105: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[9 of 14]) -> [109: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[10 of 14]) -> [105: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[11 of 14]) -> [116: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[12 of 14]) -> [101: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[13 of 14]) -> [114: bb46, otherwise: bb10];
    }

    bb43: {
        _12 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field0;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb47;
    }

    bb44: {
        _13 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field1;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb47;
    }

    bb45: {
        _14 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field2;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb47;
    }

    bb46: {
        _15 = fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field::__field3;
        _0 = Result::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb47;
    }

    bb47: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor>(move _1, const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::expecting(_1: &fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_seq(_1: fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<fixlengths::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<fixlengths::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::fixlengths::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: cmd::fixlengths::Args;
    let mut _42: std::option::Option<std::string::String>;
    let mut _43: std::option::Option<std::string::String>;
    let mut _44: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<usize>>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<usize>;
        let mut _45: &&str;
        scope 5 {
            debug __field1 => _19;
            let _22: std::option::Option<std::string::String>;
            let _26: std::option::Option<std::option::Option<std::string::String>>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: std::option::Option<std::string::String>;
            let mut _46: &&str;
            scope 9 {
                debug __field2 => _22;
                let _35: std::option::Option<std::option::Option<config::Delimiter>>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: std::option::Option<config::Delimiter>;
                let mut _47: &&str;
                scope 13 {
                    debug __field3 => _38;
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb32];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb28;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _44 = const _;
        _12 = _44 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb32];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_14) -> [return: bb8, unwind: bb31];
    }

    bb7: {
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb28;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb27;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _45 = const _;
        _21 = _45 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb31];
    }

    bb12: {
        _19 = ((_16 as Some).0: std::option::Option<usize>);
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_24) -> [return: bb14, unwind: bb31];
    }

    bb13: {
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb27;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb27;
    }

    bb16: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _46 = const _;
        _31 = _46 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb31];
    }

    bb18: {
        _29 = move ((_26 as Some).0: std::option::Option<std::string::String>);
        _22 = move _29;
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_33) -> [return: bb20, unwind: bb30];
    }

    bb19: {
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb27;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb26;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _47 = const _;
        _40 = _47 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb30];
    }

    bb24: {
        _38 = ((_35 as Some).0: std::option::Option<config::Delimiter>);
        _42 = move _3;
        _43 = move _22;
        _41 = fixlengths::Args { arg_input: move _42, flag_length: _19, flag_output: move _43, flag_delimiter: _38 };
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _41);
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb25: {
        _0 = Result::<fixlengths::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb26;
    }

    bb26: {
        drop(_22) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        drop(_3) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_22) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_2) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

fn fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::visit_map(_1: fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<fixlengths::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<fixlengths::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::fixlengths::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _7: std::result::Result<std::option::Option<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _8: &mut __A;
    let mut _9: isize;
    let mut _12: isize;
    let mut _14: isize;
    let mut _15: bool;
    let _16: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _17: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _18: std::option::Option<std::option::Option<std::string::String>>;
    let mut _19: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _24: bool;
    let _25: &std::option::Option<std::option::Option<usize>>;
    let mut _26: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _27: std::option::Option<std::option::Option<usize>>;
    let mut _28: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _29: &mut __A;
    let mut _30: isize;
    let mut _33: bool;
    let _34: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _35: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _36: std::option::Option<std::option::Option<std::string::String>>;
    let mut _37: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _38: &mut __A;
    let mut _39: isize;
    let mut _42: bool;
    let _43: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _44: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _45: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _46: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _47: &mut __A;
    let mut _48: isize;
    let mut _51: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: isize;
    let mut _63: isize;
    let mut _65: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _66: isize;
    let mut _70: isize;
    let mut _72: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _73: isize;
    let mut _77: isize;
    let mut _79: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _83: cmd::fixlengths::Args;
    let mut _84: std::option::Option<std::string::String>;
    let mut _85: std::option::Option<usize>;
    let mut _86: std::option::Option<std::string::String>;
    let mut _87: std::option::Option<config::Delimiter>;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<usize>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<std::string::String>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<config::Delimiter>>;
                scope 4 {
                    debug __field3 => _6;
                    let _55: std::option::Option<std::string::String>;
                    let _57: std::option::Option<std::string::String>;
                    let _60: std::option::Option<std::string::String>;
                    let _61: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __key => _13;
                        let _10: std::option::Option<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field>;
                        let _11: <__A as serde::de::MapAccess<'_>>::Error;
                        let _13: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field;
                        let _22: std::option::Option<std::string::String>;
                        let _23: <__A as serde::de::MapAccess<'_>>::Error;
                        let _31: std::option::Option<usize>;
                        let _32: <__A as serde::de::MapAccess<'_>>::Error;
                        let _40: std::option::Option<std::string::String>;
                        let _41: <__A as serde::de::MapAccess<'_>>::Error;
                        let _49: std::option::Option<config::Delimiter>;
                        let _50: <__A as serde::de::MapAccess<'_>>::Error;
                        let _54: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __val => _10;
                        }
                        scope 7 {
                            debug __err => _11;
                        }
                        scope 8 {
                            debug __val => _22;
                        }
                        scope 9 {
                            debug __err => _23;
                        }
                        scope 10 {
                            debug __val => _31;
                        }
                        scope 11 {
                            debug __err => _32;
                        }
                        scope 12 {
                            debug __val => _40;
                        }
                        scope 13 {
                            debug __err => _41;
                        }
                        scope 14 {
                            debug __val => _49;
                        }
                        scope 15 {
                            debug __err => _50;
                        }
                        scope 16 {
                        }
                        scope 17 {
                            debug __val => const IgnoredAny;
                        }
                        scope 18 {
                            debug __err => _54;
                        }
                    }
                    scope 19 {
                        debug __field0 => _55;
                        let _62: std::option::Option<usize>;
                        let _64: std::option::Option<usize>;
                        let _67: std::option::Option<usize>;
                        let _68: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 23 {
                            debug __field1 => _62;
                            let _69: std::option::Option<std::string::String>;
                            let _71: std::option::Option<std::string::String>;
                            let _74: std::option::Option<std::string::String>;
                            let _75: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 27 {
                                debug __field2 => _69;
                                let _76: std::option::Option<config::Delimiter>;
                                let _78: std::option::Option<config::Delimiter>;
                                let _81: std::option::Option<config::Delimiter>;
                                let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 31 {
                                    debug __field3 => _76;
                                }
                                scope 32 {
                                    debug __field3 => _78;
                                }
                                scope 33 {
                                    debug __val => _81;
                                }
                                scope 34 {
                                    debug __err => _82;
                                }
                            }
                            scope 28 {
                                debug __field2 => _71;
                            }
                            scope 29 {
                                debug __val => _74;
                            }
                            scope 30 {
                                debug __err => _75;
                            }
                        }
                        scope 24 {
                            debug __field1 => _64;
                        }
                        scope 25 {
                            debug __val => _67;
                        }
                        scope 26 {
                            debug __err => _68;
                        }
                    }
                    scope 20 {
                        debug __field0 => _57;
                    }
                    scope 21 {
                        debug __val => _60;
                    }
                    scope 22 {
                        debug __err => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _89 = const false;
        _88 = const false;
        _89 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<std::option::Option<usize>>::None;
        _88 = const true;
        _5 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _6 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _8 = &mut _2;
        _7 = <__A as MapAccess<'_>>::next_key::<fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for fixlengths::Args>::deserialize::__Field>(_8) -> [return: bb2, unwind: bb87];
    }

    bb2: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_7 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _11);
        goto -> bb72;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_7 as Ok).0: std::option::Option<cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field>);
        _12 = discriminant(_10);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _56 = discriminant(_3);
        switchInt(move _56) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb7: {
        _13 = move ((_10 as Some).0: cmd::fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fixlengths::Args>::deserialize::__Field);
        _14 = discriminant(_13);
        switchInt(move _14) -> [0: bb9, 1: bb19, 2: bb27, 3: bb37, otherwise: bb8];
    }

    bb8: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_52) -> [return: bb45, unwind: bb87];
    }

    bb9: {
        _16 = &_3;
        _15 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_16) -> [return: bb10, unwind: bb87];
    }

    bb10: {
        switchInt(move _15) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _17 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb87];
    }

    bb12: {
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb72;
    }

    bb13: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_20) -> [return: bb14, unwind: bb87];
    }

    bb14: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _23 = move ((_19 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _23);
        goto -> bb72;
    }

    bb16: {
        _22 = move ((_19 as Ok).0: std::option::Option<std::string::String>);
        _18 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _22);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _89 = const true;
        _3 = move _18;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _89 = const true;
        _3 = move _18;
        goto -> bb87;
    }

    bb19: {
        _25 = &_4;
        _24 = std::option::Option::<std::option::Option<usize>>::is_some(_25) -> [return: bb20, unwind: bb87];
    }

    bb20: {
        switchInt(move _24) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _26 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_length") -> [return: bb22, unwind: bb87];
    }

    bb22: {
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb72;
    }

    bb23: {
        _29 = &mut _2;
        _28 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_29) -> [return: bb24, unwind: bb87];
    }

    bb24: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _32 = move ((_28 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _32);
        goto -> bb72;
    }

    bb26: {
        _31 = ((_28 as Ok).0: std::option::Option<usize>);
        _27 = std::option::Option::<std::option::Option<usize>>::Some(_31);
        _4 = move _27;
        goto -> bb1;
    }

    bb27: {
        _34 = &_5;
        _33 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_34) -> [return: bb28, unwind: bb87];
    }

    bb28: {
        switchInt(move _33) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _35 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb30, unwind: bb87];
    }

    bb30: {
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb72;
    }

    bb31: {
        _38 = &mut _2;
        _37 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_38) -> [return: bb32, unwind: bb87];
    }

    bb32: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _41 = move ((_37 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb72;
    }

    bb34: {
        _40 = move ((_37 as Ok).0: std::option::Option<std::string::String>);
        _36 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _40);
        drop(_5) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _88 = const true;
        _5 = move _36;
        goto -> bb1;
    }

    bb36 (cleanup): {
        _88 = const true;
        _5 = move _36;
        goto -> bb87;
    }

    bb37: {
        _43 = &_6;
        _42 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_43) -> [return: bb38, unwind: bb87];
    }

    bb38: {
        switchInt(move _42) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _44 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb40, unwind: bb87];
    }

    bb40: {
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb72;
    }

    bb41: {
        _47 = &mut _2;
        _46 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_47) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _50 = move ((_46 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb72;
    }

    bb44: {
        _49 = ((_46 as Ok).0: std::option::Option<config::Delimiter>);
        _45 = std::option::Option::<std::option::Option<Delimiter>>::Some(_49);
        _6 = move _45;
        goto -> bb1;
    }

    bb45: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb1, 1: bb46, otherwise: bb4];
    }

    bb46: {
        _54 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb72;
    }

    bb47: {
        _58 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb49, unwind: bb87];
    }

    bb48: {
        _89 = const false;
        _57 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _55 = move _57;
        goto -> bb52;
    }

    bb49: {
        _59 = discriminant(_58);
        switchInt(move _59) -> [0: bb51, 1: bb50, otherwise: bb4];
    }

    bb50: {
        _61 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb72;
    }

    bb51: {
        _60 = move ((_58 as Ok).0: std::option::Option<std::string::String>);
        _55 = move _60;
        goto -> bb52;
    }

    bb52: {
        _63 = discriminant(_4);
        switchInt(move _63) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        _65 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_length") -> [return: bb55, unwind: bb75];
    }

    bb54: {
        _64 = ((_4 as Some).0: std::option::Option<usize>);
        _62 = _64;
        goto -> bb58;
    }

    bb55: {
        _66 = discriminant(_65);
        switchInt(move _66) -> [0: bb57, 1: bb56, otherwise: bb4];
    }

    bb56: {
        _68 = move ((_65 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _68);
        goto -> bb71;
    }

    bb57: {
        _67 = ((_65 as Ok).0: std::option::Option<usize>);
        _62 = _67;
        goto -> bb58;
    }

    bb58: {
        _70 = discriminant(_5);
        switchInt(move _70) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        _72 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb61, unwind: bb75];
    }

    bb60: {
        _88 = const false;
        _71 = move ((_5 as Some).0: std::option::Option<std::string::String>);
        _69 = move _71;
        goto -> bb64;
    }

    bb61: {
        _73 = discriminant(_72);
        switchInt(move _73) -> [0: bb63, 1: bb62, otherwise: bb4];
    }

    bb62: {
        _75 = move ((_72 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb71;
    }

    bb63: {
        _74 = move ((_72 as Ok).0: std::option::Option<std::string::String>);
        _69 = move _74;
        goto -> bb64;
    }

    bb64: {
        _77 = discriminant(_6);
        switchInt(move _77) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        _79 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb67, unwind: bb74];
    }

    bb66: {
        _78 = ((_6 as Some).0: std::option::Option<config::Delimiter>);
        _76 = _78;
        goto -> bb70;
    }

    bb67: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb69, 1: bb68, otherwise: bb4];
    }

    bb68: {
        _82 = move ((_79 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        drop(_69) -> [return: bb71, unwind: bb75];
    }

    bb69: {
        _81 = ((_79 as Ok).0: std::option::Option<config::Delimiter>);
        _76 = _81;
        goto -> bb70;
    }

    bb70: {
        _84 = move _55;
        _85 = _62;
        _86 = move _69;
        _87 = _76;
        _83 = fixlengths::Args { arg_input: move _84, flag_length: move _85, flag_output: move _86, flag_delimiter: move _87 };
        _0 = Result::<fixlengths::Args, <__A as MapAccess<'_>>::Error>::Ok(move _83);
        _88 = const false;
        _89 = const false;
        drop(_2) -> [return: bb73, unwind continue];
    }

    bb71: {
        drop(_55) -> [return: bb72, unwind: bb87];
    }

    bb72: {
        _90 = discriminant(_5);
        switchInt(move _90) -> [1: bb80, otherwise: bb79];
    }

    bb73: {
        return;
    }

    bb74 (cleanup): {
        drop(_69) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_55) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        _93 = discriminant(_3);
        switchInt(move _93) -> [1: bb88, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop(_2) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        resume;
    }

    bb79: {
        _88 = const false;
        _91 = discriminant(_3);
        switchInt(move _91) -> [1: bb83, otherwise: bb82];
    }

    bb80: {
        switchInt(_88) -> [0: bb79, otherwise: bb81];
    }

    bb81: {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb79, unwind: bb76];
    }

    bb82: {
        _89 = const false;
        drop(_2) -> [return: bb73, unwind continue];
    }

    bb83: {
        switchInt(_89) -> [0: bb82, otherwise: bb84];
    }

    bb84: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb82, unwind: bb77];
    }

    bb85 (cleanup): {
        switchInt(_88) -> [0: bb76, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        _92 = discriminant(_5);
        switchInt(move _92) -> [1: bb85, otherwise: bb76];
    }

    bb88 (cleanup): {
        switchInt(_89) -> [0: bb77, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb77, unwind terminate(cleanup)];
    }
}

const fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 4];
    let _2: &[&str; 4];
    let _3: [&str; 4];
    let mut _4: &[&str; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in fixlengths::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fixlengths.rs:36:10: 36:21>::deserialize::FIELDS: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "arg_input", const "flag_length", const "flag_output", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn fixlengths::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::fixlengths::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::fixlengths::Args>;
    let mut _4: std::result::Result<cmd::fixlengths::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::fixlengths::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let mut _12: config::Config;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: std::option::Option<config::Delimiter>;
    let mut _16: isize;
    let mut _18: CliError;
    let mut _19: bool;
    let mut _20: &config::Config;
    let mut _21: CliError;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _25: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _26: &config::Config;
    let mut _27: isize;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _32: std::result::Result<bool, csv::Error>;
    let mut _33: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _34: &mut csv::ByteRecord;
    let mut _35: isize;
    let mut _40: csv::ByteRecordIter<'_>;
    let mut _41: &csv::ByteRecord;
    let mut _43: std::option::Option<&[u8]>;
    let mut _44: &mut csv::ByteRecordIter<'_>;
    let mut _45: isize;
    let mut _47: (usize, bool);
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: usize;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _56: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _57: &config::Config;
    let mut _58: isize;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _63: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _64: &config::Config;
    let _65: config::Config;
    let _66: &std::option::Option<std::string::String>;
    let mut _67: isize;
    let mut _70: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _71: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _72: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _74: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _75: &mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _76: isize;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _80: isize;
    let mut _83: bool;
    let mut _84: usize;
    let mut _85: usize;
    let mut _86: &csv::ByteRecord;
    let mut _87: std::ops::Range<usize>;
    let mut _88: std::ops::Range<usize>;
    let mut _89: usize;
    let mut _90: &csv::ByteRecord;
    let mut _91: usize;
    let mut _93: std::option::Option<usize>;
    let mut _94: &mut std::ops::Range<usize>;
    let mut _95: isize;
    let _96: ();
    let mut _97: &mut csv::ByteRecord;
    let mut _98: &[u8];
    let _99: &[u8; 0];
    let _100: ();
    let mut _101: &mut csv::ByteRecord;
    let mut _102: usize;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _104: std::result::Result<(), csv::Error>;
    let mut _105: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _106: &csv::ByteRecord;
    let mut _107: isize;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _110: std::result::Result<(), std::io::Error>;
    let mut _111: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _112: isize;
    let mut _114: &str;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug config => _9;
            let _15: usize;
            let _17: usize;
            let mut _22: usize;
            scope 7 {
                debug length => _15;
                let mut _54: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _59: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _60: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 24 {
                    debug rdr => _54;
                    let mut _61: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    let _68: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _69: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    scope 29 {
                        debug wtr => _61;
                        let mut _73: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
                        let _113: std::result::Result<std::convert::Infallible, std::io::Error>;
                        scope 34 {
                            debug iter => _73;
                            let _77: std::result::Result<csv::ByteRecord, csv::Error>;
                            scope 35 {
                                debug r => _77;
                                let mut _78: csv::ByteRecord;
                                let _81: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _82: csv::ByteRecord;
                                scope 36 {
                                    debug r => _78;
                                    let mut _92: std::ops::Range<usize>;
                                    let _108: std::result::Result<std::convert::Infallible, csv::Error>;
                                    scope 41 {
                                        debug iter => _92;
                                    }
                                    scope 42 {
                                        debug residual => _108;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => const ();
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _81;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _82;
                                    scope 40 {
                                    }
                                }
                            }
                        }
                        scope 46 {
                            debug residual => _113;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug val => const ();
                            scope 49 {
                            }
                        }
                    }
                    scope 30 {
                        debug residual => _68;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _69;
                        scope 33 {
                        }
                    }
                }
                scope 25 {
                    debug residual => _59;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _60;
                    scope 28 {
                    }
                }
            }
            scope 8 {
                debug length => _17;
            }
            scope 9 {
                debug maxlen => _22;
                let mut _23: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _29: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 10 {
                    debug rdr => _23;
                    let mut _30: csv::ByteRecord;
                    scope 15 {
                        debug record => _30;
                        let _36: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _37: bool;
                        let mut _38: usize;
                        scope 16 {
                            debug residual => _36;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _37;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug index => _38;
                            let mut _39: usize;
                            scope 21 {
                                debug nonempty_count => _39;
                                let mut _42: csv::ByteRecordIter<'_>;
                                scope 22 {
                                    debug iter => _42;
                                    let _46: &[u8];
                                    scope 23 {
                                        debug field => _46;
                                    }
                                }
                            }
                        }
                    }
                }
                scope 11 {
                    debug residual => _28;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _29;
                    scope 14 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc4: &&str};
        _114 = deref_copy (*_5);
        _4 = get_args::<fixlengths::Args>(_114, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<fixlengths::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::fixlengths::Args);
        _2 = move _8;
        _13 = &(_2.0: std::option::Option<std::string::String>);
        _12 = Config::new(_13) -> [return: bb6, unwind: bb98];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb89, unwind continue];
    }

    bb6: {
        _14 = (_2.3: std::option::Option<config::Delimiter>);
        _11 = Config::delimiter(move _12, move _14) -> [return: bb7, unwind: bb98];
    }

    bb7: {
        _10 = Config::no_headers(move _11, const true) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        _9 = Config::flexible(move _10, const true) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        _16 = discriminant((_2.1: std::option::Option<usize>));
        switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _20 = &_9;
        _19 = Config::is_std(move _20) -> [return: bb15, unwind: bb97];
    }

    bb11: {
        _17 = (((_2.1: std::option::Option<usize>) as Some).0: usize);
        switchInt(move _17) -> [0: bb12, otherwise: bb14];
    }

    bb12: {
        _18 = <CliError as From<&str>>::from(const "Length must be greater than 0.") -> [return: bb13, unwind: bb97];
    }

    bb13: {
        _0 = Result::<(), CliError>::Err(move _18);
        goto -> bb87;
    }

    bb14: {
        _15 = _17;
        goto -> bb40;
    }

    bb15: {
        switchInt(move _19) -> [0: bb18, otherwise: bb16];
    }

    bb16: {
        _21 = <CliError as From<&str>>::from(const "<stdin> cannot be used in this command. Please specify a file path.") -> [return: bb17, unwind: bb97];
    }

    bb17: {
        _0 = Result::<(), CliError>::Err(move _21);
        goto -> bb87;
    }

    bb18: {
        _22 = const 0_usize;
        _26 = &_9;
        _25 = Config::reader(move _26) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        _24 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _25) -> [return: bb20, unwind: bb97];
    }

    bb20: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _29 = move ((_24 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _23 = move _29;
        _30 = ByteRecord::new() -> [return: bb102, unwind: bb96];
    }

    bb22: {
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb103, unwind: bb97];
    }

    bb23: {
        _33 = &mut _23;
        _34 = &mut _30;
        _32 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _33, _34) -> [return: bb24, unwind: bb95];
    }

    bb24: {
        _31 = <Result<bool, csv::Error> as Try>::branch(move _32) -> [return: bb25, unwind: bb95];
    }

    bb25: {
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _37 = ((_31 as Continue).0: bool);
        switchInt(_37) -> [0: bb101, otherwise: bb100];
    }

    bb27: {
        _36 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _36) -> [return: bb28, unwind: bb95];
    }

    bb28: {
        drop(_30) -> [return: bb86, unwind: bb96];
    }

    bb29: {
        _42 = move _40;
        goto -> bb30;
    }

    bb30: {
        _44 = &mut _42;
        _43 = <ByteRecordIter<'_> as Iterator>::next(_44) -> [return: bb31, unwind: bb95];
    }

    bb31: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb33, 1: bb32, otherwise: bb4];
    }

    bb32: {
        _46 = ((_43 as Some).0: &[u8]);
        _47 = CheckedAdd(_38, const 1_usize);
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", _38, const 1_usize) -> [success: bb34, unwind: bb95];
    }

    bb33: {
        _52 = _22;
        _53 = _39;
        _51 = std::cmp::max::<usize>(move _52, move _53) -> [return: bb38, unwind: bb95];
    }

    bb34: {
        _38 = move (_47.0: usize);
        _48 = _38;
        switchInt(move _48) -> [1: bb37, otherwise: bb35];
    }

    bb35: {
        _49 = core::slice::<impl [u8]>::is_empty(_46) -> [return: bb36, unwind: bb95];
    }

    bb36: {
        switchInt(move _49) -> [0: bb37, otherwise: bb30];
    }

    bb37: {
        _50 = _38;
        _39 = move _50;
        goto -> bb30;
    }

    bb38: {
        _22 = move _51;
        goto -> bb23;
    }

    bb39: {
        drop(_23) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        _57 = &_9;
        _56 = Config::reader(move _57) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        _55 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _56) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        _60 = move ((_55 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _54 = move _60;
        _66 = &(_2.2: std::option::Option<std::string::String>);
        _65 = Config::new(_66) -> [return: bb45, unwind: bb94];
    }

    bb44: {
        _59 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _59) -> [return: bb104, unwind: bb97];
    }

    bb45: {
        _64 = &_65;
        _63 = Config::writer(move _64) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        _62 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _63) -> [return: bb47, unwind: bb93];
    }

    bb47: {
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        _69 = move ((_62 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _61 = move _69;
        drop(_65) -> [return: bb51, unwind: bb92];
    }

    bb49: {
        _68 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _68) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        drop(_65) -> [return: bb85, unwind: bb94];
    }

    bb51: {
        _72 = &mut _54;
        _71 = Reader::<Box<dyn std::io::Read>>::byte_records(move _72) -> [return: bb52, unwind: bb92];
    }

    bb52: {
        _70 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as IntoIterator>::into_iter(move _71) -> [return: bb53, unwind: bb92];
    }

    bb53: {
        _73 = move _70;
        goto -> bb54;
    }

    bb54: {
        _75 = &mut _73;
        _74 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as Iterator>::next(_75) -> [return: bb55, unwind: bb91];
    }

    bb55: {
        _76 = discriminant(_74);
        switchInt(move _76) -> [0: bb57, 1: bb56, otherwise: bb4];
    }

    bb56: {
        _77 = move ((_74 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _79 = <Result<ByteRecord, csv::Error> as Try>::branch(move _77) -> [return: bb58, unwind: bb91];
    }

    bb57: {
        drop(_73) -> [return: bb75, unwind: bb92];
    }

    bb58: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        _82 = move ((_79 as Continue).0: csv::ByteRecord);
        _78 = move _82;
        _84 = _15;
        _86 = &_78;
        _85 = ByteRecord::len(move _86) -> [return: bb61, unwind: bb90];
    }

    bb60: {
        _81 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _81) -> [return: bb105, unwind: bb91];
    }

    bb61: {
        _83 = Ge(move _84, move _85);
        switchInt(move _83) -> [0: bb68, otherwise: bb62];
    }

    bb62: {
        _90 = &_78;
        _89 = ByteRecord::len(move _90) -> [return: bb63, unwind: bb90];
    }

    bb63: {
        _91 = _15;
        _88 = std::ops::Range::<usize> { start: move _89, end: move _91 };
        _87 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _88) -> [return: bb64, unwind: bb90];
    }

    bb64: {
        _92 = move _87;
        goto -> bb65;
    }

    bb65: {
        _94 = &mut _92;
        _93 = <std::ops::Range<usize> as Iterator>::next(_94) -> [return: bb66, unwind: bb90];
    }

    bb66: {
        _95 = discriminant(_93);
        switchInt(move _95) -> [0: bb69, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _97 = &mut _78;
        _99 = const b"";
        _98 = _99 as &[u8] (PointerCoercion(Unsize));
        _96 = ByteRecord::push_field(move _97, move _98) -> [return: bb106, unwind: bb90];
    }

    bb68: {
        _101 = &mut _78;
        _102 = _15;
        _100 = ByteRecord::truncate(move _101, move _102) -> [return: bb107, unwind: bb90];
    }

    bb69: {
        _105 = &mut _61;
        _106 = &_78;
        _104 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _105, _106) -> [return: bb70, unwind: bb90];
    }

    bb70: {
        _103 = <Result<(), csv::Error> as Try>::branch(move _104) -> [return: bb71, unwind: bb90];
    }

    bb71: {
        _107 = discriminant(_103);
        switchInt(move _107) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        drop(_78) -> [return: bb54, unwind: bb91];
    }

    bb73: {
        _108 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _108) -> [return: bb74, unwind: bb90];
    }

    bb74: {
        drop(_78) -> [return: bb83, unwind: bb91];
    }

    bb75: {
        _111 = &mut _61;
        _110 = Writer::<Box<dyn std::io::Write>>::flush(move _111) -> [return: bb76, unwind: bb92];
    }

    bb76: {
        _109 = <Result<(), std::io::Error> as Try>::branch(move _110) -> [return: bb77, unwind: bb92];
    }

    bb77: {
        _112 = discriminant(_109);
        switchInt(move _112) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_61) -> [return: bb80, unwind: bb94];
    }

    bb79: {
        _113 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _113) -> [return: bb108, unwind: bb92];
    }

    bb80: {
        drop(_54) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        drop(_9) -> [return: bb82, unwind: bb98];
    }

    bb82: {
        drop(_2) -> [return: bb89, unwind continue];
    }

    bb83: {
        drop(_73) -> [return: bb84, unwind: bb92];
    }

    bb84: {
        drop(_61) -> [return: bb85, unwind: bb94];
    }

    bb85: {
        drop(_54) -> [return: bb87, unwind: bb97];
    }

    bb86: {
        drop(_23) -> [return: bb87, unwind: bb97];
    }

    bb87: {
        drop(_9) -> [return: bb88, unwind: bb98];
    }

    bb88: {
        drop(_2) -> [return: bb89, unwind continue];
    }

    bb89: {
        return;
    }

    bb90 (cleanup): {
        drop(_78) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_73) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_61) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_65) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_54) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_30) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_23) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_9) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_2) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }

    bb100: {
        _38 = const 0_usize;
        _39 = const 0_usize;
        _41 = &_30;
        _40 = <&ByteRecord as IntoIterator>::into_iter(move _41) -> [return: bb29, unwind: bb95];
    }

    bb101: {
        _15 = _22;
        drop(_30) -> [return: bb39, unwind: bb96];
    }

    bb102: {
        goto -> bb23;
    }

    bb103: {
        goto -> bb87;
    }

    bb104: {
        goto -> bb87;
    }

    bb105: {
        goto -> bb83;
    }

    bb106: {
        goto -> bb65;
    }

    bb107: {
        goto -> bb69;
    }

    bb108: {
        goto -> bb84;
    }
}

alloc5 (size: 0, align: 1) {}

alloc4 (static: fixlengths::USAGE, size: 16, align: 8) {
    ╾────alloc246<imm>────╼ 4d 04 00 00 00 00 00 00 │ ╾──────╼M.......
}

alloc246 (size: 1101, align: 1) {
    0x000 │ 0a 54 72 61 6e 73 66 6f 72 6d 73 20 43 53 56 20 │ .Transforms CSV 
    0x010 │ 64 61 74 61 20 73 6f 20 74 68 61 74 20 61 6c 6c │ data so that all
    0x020 │ 20 72 65 63 6f 72 64 73 20 68 61 76 65 20 74 68 │  records have th
    0x030 │ 65 20 73 61 6d 65 20 6c 65 6e 67 74 68 2e 20 54 │ e same length. T
    0x040 │ 68 65 20 6c 65 6e 67 74 68 20 69 73 0a 74 68 65 │ he length is.the
    0x050 │ 20 6c 65 6e 67 74 68 20 6f 66 20 74 68 65 20 6c │  length of the l
    0x060 │ 6f 6e 67 65 73 74 20 72 65 63 6f 72 64 20 69 6e │ ongest record in
    0x070 │ 20 74 68 65 20 64 61 74 61 20 28 6e 6f 74 20 63 │  the data (not c
    0x080 │ 6f 75 6e 74 69 6e 67 20 74 72 61 69 6c 69 6e 67 │ ounting trailing
    0x090 │ 20 65 6d 70 74 79 20 66 69 65 6c 64 73 2c 0a 62 │  empty fields,.b
    0x0a0 │ 75 74 20 61 74 20 6c 65 61 73 74 20 31 29 2e 20 │ ut at least 1). 
    0x0b0 │ 52 65 63 6f 72 64 73 20 77 69 74 68 20 73 6d 61 │ Records with sma
    0x0c0 │ 6c 6c 65 72 20 6c 65 6e 67 74 68 73 20 61 72 65 │ ller lengths are
    0x0d0 │ 20 70 61 64 64 65 64 20 77 69 74 68 20 65 6d 70 │  padded with emp
    0x0e0 │ 74 79 20 66 69 65 6c 64 73 2e 0a 0a 54 68 69 73 │ ty fields...This
    0x0f0 │ 20 72 65 71 75 69 72 65 73 20 74 77 6f 20 63 6f │  requires two co
    0x100 │ 6d 70 6c 65 74 65 20 73 63 61 6e 73 20 6f 66 20 │ mplete scans of 
    0x110 │ 74 68 65 20 43 53 56 20 64 61 74 61 3a 20 6f 6e │ the CSV data: on
    0x120 │ 65 20 66 6f 72 20 64 65 74 65 72 6d 69 6e 69 6e │ e for determinin
    0x130 │ 67 20 74 68 65 0a 72 65 63 6f 72 64 20 73 69 7a │ g the.record siz
    0x140 │ 65 20 61 6e 64 20 6f 6e 65 20 66 6f 72 20 74 68 │ e and one for th
    0x150 │ 65 20 61 63 74 75 61 6c 20 74 72 61 6e 73 66 6f │ e actual transfo
    0x160 │ 72 6d 2e 20 42 65 63 61 75 73 65 20 6f 66 20 74 │ rm. Because of t
    0x170 │ 68 69 73 2c 20 74 68 65 20 69 6e 70 75 74 0a 67 │ his, the input.g
    0x180 │ 69 76 65 6e 20 6d 75 73 74 20 62 65 20 61 20 66 │ iven must be a f
    0x190 │ 69 6c 65 20 61 6e 64 20 6e 6f 74 20 73 74 64 69 │ ile and not stdi
    0x1a0 │ 6e 2e 0a 0a 41 6c 74 65 72 6e 61 74 69 76 65 6c │ n...Alternativel
    0x1b0 │ 79 2c 20 69 66 20 2d 2d 6c 65 6e 67 74 68 20 69 │ y, if --length i
    0x1c0 │ 73 20 73 65 74 2c 20 74 68 65 6e 20 61 6c 6c 20 │ s set, then all 
    0x1d0 │ 72 65 63 6f 72 64 73 20 61 72 65 20 66 6f 72 63 │ records are forc
    0x1e0 │ 65 64 20 74 6f 20 74 68 61 74 20 6c 65 6e 67 74 │ ed to that lengt
    0x1f0 │ 68 2e 0a 54 68 69 73 20 72 65 71 75 69 72 65 73 │ h..This requires
    0x200 │ 20 61 20 73 69 6e 67 6c 65 20 70 61 73 73 20 61 │  a single pass a
    0x210 │ 6e 64 20 63 61 6e 20 62 65 20 64 6f 6e 65 20 77 │ nd can be done w
    0x220 │ 69 74 68 20 73 74 64 69 6e 2e 0a 0a 55 73 61 67 │ ith stdin...Usag
    0x230 │ 65 3a 0a 20 20 20 20 78 73 76 20 66 69 78 6c 65 │ e:.    xsv fixle
    0x240 │ 6e 67 74 68 73 20 5b 6f 70 74 69 6f 6e 73 5d 20 │ ngths [options] 
    0x250 │ 5b 3c 69 6e 70 75 74 3e 5d 0a 0a 66 69 78 6c 65 │ [<input>]..fixle
    0x260 │ 6e 67 74 68 73 20 6f 70 74 69 6f 6e 73 3a 0a 20 │ ngths options:. 
    0x270 │ 20 20 20 2d 6c 2c 20 2d 2d 6c 65 6e 67 74 68 20 │    -l, --length 
    0x280 │ 3c 61 72 67 3e 20 20 20 20 20 46 6f 72 63 65 66 │ <arg>     Forcef
    0x290 │ 75 6c 6c 79 20 73 65 74 20 74 68 65 20 6c 65 6e │ ully set the len
    0x2a0 │ 67 74 68 20 6f 66 20 65 61 63 68 20 72 65 63 6f │ gth of each reco
    0x2b0 │ 72 64 2e 20 49 66 20 61 0a 20 20 20 20 20 20 20 │ rd. If a.       
    0x2c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2d0 │ 20 20 20 20 72 65 63 6f 72 64 20 69 73 20 6e 6f │     record is no
    0x2e0 │ 74 20 74 68 65 20 73 69 7a 65 20 67 69 76 65 6e │ t the size given
    0x2f0 │ 2c 20 74 68 65 6e 20 69 74 20 69 73 20 74 72 75 │ , then it is tru
    0x300 │ 6e 63 61 74 65 64 0a 20 20 20 20 20 20 20 20 20 │ ncated.         
    0x310 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x320 │ 20 20 6f 72 20 65 78 70 61 6e 64 65 64 20 61 73 │   or expanded as
    0x330 │ 20 61 70 70 72 6f 70 72 69 61 74 65 2e 0a 0a 43 │  appropriate...C
    0x340 │ 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 │ ommon options:. 
    0x350 │ 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 20 │    -h, --help   
    0x360 │ 20 20 20 20 20 20 20 20 20 20 44 69 73 70 6c 61 │           Displa
    0x370 │ 79 20 74 68 69 73 20 6d 65 73 73 61 67 65 0a 20 │ y this message. 
    0x380 │ 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 20 │    -o, --output 
    0x390 │ 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 74 65 20 │ <file>    Write 
    0x3a0 │ 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 6c 65 3e │ output to <file>
    0x3b0 │ 20 69 6e 73 74 65 61 64 20 6f 66 20 73 74 64 6f │  instead of stdo
    0x3c0 │ 75 74 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 65 │ ut..    -d, --de
    0x3d0 │ 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 54 │ limiter <arg>  T
    0x3e0 │ 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 74 │ he field delimit
    0x3f0 │ 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 43 │ er for reading C
    0x400 │ 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 20 │ SV data..       
    0x410 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x420 │ 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 69 │     Must be a si
    0x430 │ 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e 20 │ ngle character. 
    0x440 │ 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a          │ (default: ,).
}

static flatten::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nPrints flattened records such that fields are labeled separated by a new line.\nThis mode is particularly useful for viewing one record at a time. Each\nrecord is separated by a special '#' character (on a line by itself), which\ncan be changed with the --separator flag.\n\nThere is also a condensed view (-c or --condense) that will shorten the\ncontents of each field to provide a summary view.\n\nUsage:\n    xsv flatten [options] [<input>]\n\nflatten options:\n    -c, --condense <arg>  Limits the length of each field to the value\n                           specified. If the field is UTF-8 encoded, then\n                           <arg> refers to the number of code points.\n                           Otherwise, it refers to the number of bytes.\n    -s, --separator <arg>  A string of characters to write after each record.\n                           When non-empty, a new line is automatically\n                           appended to the separator.\n                           [default: #]\n\nCommon options:\n    -h, --help             Display this message\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. When set, the name of each field\n                           will be its index.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const flatten::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<flatten::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::flatten::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<flatten::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::expecting(_1: &flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_u64(_1: flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E> {
    debug self => const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _4: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _5: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _6: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _7: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _8: __E;
    let mut _9: serde::de::Unexpected<'_>;
    let mut _10: &dyn serde::de::Expected;
    let mut _11: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1];
    }

    bb1: {
        _9 = Unexpected::<'_>::Unsigned(_2);
        _11 = const _;
        _10 = _11 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _8 = <__E as serde::de::Error>::invalid_value(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb2: {
        _3 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field0;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _4 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field1;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb8;
    }

    bb4: {
        _5 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field2;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb5: {
        _6 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field3;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb6: {
        _7 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field4;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb8;
    }

    bb7: {
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Err(move _8);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 5";
        _0 = &_1;
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_str(_1: flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E> {
    debug self => const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _9: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _10: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _11: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _12: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _13: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;

    bb0: {
        _7 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb15, unwind continue];
    }

    bb1: {
        _8 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field0;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb16;
    }

    bb2: {
        _6 = <str as PartialEq>::eq(_2, const "flag_condense") -> [return: bb14, unwind continue];
    }

    bb3: {
        _9 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field1;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb16;
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "flag_separator") -> [return: bb13, unwind continue];
    }

    bb5: {
        _10 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field2;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb16;
    }

    bb6: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb12, unwind continue];
    }

    bb7: {
        _11 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field3;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb16;
    }

    bb8: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb11, unwind continue];
    }

    bb9: {
        _12 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field4;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb16;
    }

    bb10: {
        _13 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__ignore;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb16;
    }

    bb11: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb12: {
        switchInt(move _4) -> [0: bb8, otherwise: bb7];
    }

    bb13: {
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb14: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb15: {
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb16: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_bytes(_1: flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E> {
    debug self => const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _16: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _17: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _18: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _19: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
    let mut _20: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;

    bb0: {
        _12 = Len((*_2));
        _13 = const 9_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb64, otherwise: bb10];
    }

    bb10: {
        _20 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__ignore;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb69;
    }

    bb11: {
        _9 = Len((*_2));
        _10 = const 13_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb25, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 13]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 13]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 13]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 13]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 13]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 13]) -> [99: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 13]) -> [111: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 13]) -> [110: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 13]) -> [100: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 13]) -> [101: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 13]) -> [110: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[11 of 13]) -> [115: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[12 of 13]) -> [101: bb65, otherwise: bb10];
    }

    bb25: {
        _6 = Len((*_2));
        _7 = const 14_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb48, otherwise: bb26];
    }

    bb26: {
        switchInt((*_2)[0 of 14]) -> [102: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[1 of 14]) -> [108: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[2 of 14]) -> [97: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[3 of 14]) -> [103: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[4 of 14]) -> [95: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[5 of 14]) -> [115: bb32, 100: bb40, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[6 of 14]) -> [101: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[7 of 14]) -> [112: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[8 of 14]) -> [97: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[9 of 14]) -> [114: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[10 of 14]) -> [97: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[11 of 14]) -> [116: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[12 of 14]) -> [111: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[13 of 14]) -> [114: bb66, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[6 of 14]) -> [101: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[7 of 14]) -> [108: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[8 of 14]) -> [105: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[9 of 14]) -> [109: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[10 of 14]) -> [105: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[11 of 14]) -> [116: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[12 of 14]) -> [101: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[13 of 14]) -> [114: bb68, otherwise: bb10];
    }

    bb48: {
        _3 = Len((*_2));
        _4 = const 15_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb49];
    }

    bb49: {
        switchInt((*_2)[0 of 15]) -> [102: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[1 of 15]) -> [108: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[2 of 15]) -> [97: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[3 of 15]) -> [103: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[4 of 15]) -> [95: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[5 of 15]) -> [110: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[6 of 15]) -> [111: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[7 of 15]) -> [95: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[8 of 15]) -> [104: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[9 of 15]) -> [101: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[10 of 15]) -> [97: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[11 of 15]) -> [100: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[12 of 15]) -> [101: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[13 of 15]) -> [114: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[14 of 15]) -> [115: bb67, otherwise: bb10];
    }

    bb64: {
        _15 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field0;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb69;
    }

    bb65: {
        _16 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field1;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb69;
    }

    bb66: {
        _17 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field2;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb69;
    }

    bb67: {
        _18 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field3;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb69;
    }

    bb68: {
        _19 = flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field::__field4;
        _0 = Result::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb69;
    }

    bb69: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor>(move _1, const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::expecting(_1: &flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq(_1: flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<flatten::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<flatten::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::flatten::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: cmd::flatten::Args;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: std::string::String;
    let mut _53: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<usize>>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<usize>;
        let mut _54: &&str;
        scope 5 {
            debug __field1 => _19;
            let _22: std::string::String;
            let _26: std::option::Option<std::string::String>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: std::string::String;
            let mut _55: &&str;
            scope 9 {
                debug __field2 => _22;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _56: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<std::option::Option<config::Delimiter>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<config::Delimiter>;
                    let mut _57: &&str;
                    scope 17 {
                        debug __field4 => _47;
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb38];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb34;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _53 = const _;
        _12 = _53 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb38];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_14) -> [return: bb8, unwind: bb37];
    }

    bb7: {
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb34;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb33;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _54 = const _;
        _21 = _54 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb37];
    }

    bb12: {
        _19 = ((_16 as Some).0: std::option::Option<usize>);
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_24) -> [return: bb14, unwind: bb37];
    }

    bb13: {
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb33;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb33;
    }

    bb16: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _55 = const _;
        _31 = _55 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb37];
    }

    bb18: {
        _29 = move ((_26 as Some).0: std::string::String);
        _22 = move _29;
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb36];
    }

    bb19: {
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb33;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb32;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _56 = const _;
        _40 = _56 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb36];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_42) -> [return: bb26, unwind: bb36];
    }

    bb25: {
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb32;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb32;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _57 = const _;
        _49 = _57 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb36];
    }

    bb30: {
        _47 = ((_44 as Some).0: std::option::Option<config::Delimiter>);
        _51 = move _3;
        _52 = move _22;
        _50 = flatten::Args { arg_input: move _51, flag_condense: _19, flag_separator: move _52, flag_no_headers: _38, flag_delimiter: _47 };
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _50);
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb31: {
        _0 = Result::<flatten::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb32;
    }

    bb32: {
        drop(_22) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        drop(_3) -> [return: bb34, unwind: bb38];
    }

    bb34: {
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_3) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }
}

promoted[0] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

fn flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::<impl at src/cmd/flatten.rs:41:10: 41:21>::visit_map(_1: flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<flatten::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<flatten::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::flatten::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _8: std::result::Result<std::option::Option<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _9: &mut __A;
    let mut _10: isize;
    let mut _13: isize;
    let mut _15: isize;
    let mut _16: bool;
    let _17: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _18: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _19: std::option::Option<std::option::Option<std::string::String>>;
    let mut _20: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _21: &mut __A;
    let mut _22: isize;
    let mut _25: bool;
    let _26: &std::option::Option<std::option::Option<usize>>;
    let mut _27: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _28: std::option::Option<std::option::Option<usize>>;
    let mut _29: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _30: &mut __A;
    let mut _31: isize;
    let mut _34: bool;
    let _35: &std::option::Option<std::string::String>;
    let mut _36: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _37: std::option::Option<std::string::String>;
    let mut _38: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _39: &mut __A;
    let mut _40: isize;
    let mut _43: bool;
    let _44: &std::option::Option<bool>;
    let mut _45: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _46: std::option::Option<bool>;
    let mut _47: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _48: &mut __A;
    let mut _49: isize;
    let mut _52: bool;
    let _53: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _54: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _55: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _56: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _57: &mut __A;
    let mut _58: isize;
    let mut _61: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _69: isize;
    let mut _73: isize;
    let mut _75: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _76: isize;
    let mut _80: isize;
    let mut _82: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _83: isize;
    let mut _87: isize;
    let mut _89: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _90: isize;
    let mut _94: isize;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: isize;
    let mut _100: cmd::flatten::Args;
    let mut _101: std::option::Option<std::string::String>;
    let mut _102: std::option::Option<usize>;
    let mut _103: std::string::String;
    let mut _104: bool;
    let mut _105: std::option::Option<config::Delimiter>;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<usize>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::string::String>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<config::Delimiter>>;
                    scope 5 {
                        debug __field4 => _7;
                        let _65: std::option::Option<std::string::String>;
                        let _67: std::option::Option<std::string::String>;
                        let _70: std::option::Option<std::string::String>;
                        let _71: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __key => _14;
                            let _11: std::option::Option<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field>;
                            let _12: <__A as serde::de::MapAccess<'_>>::Error;
                            let _14: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field;
                            let _23: std::option::Option<std::string::String>;
                            let _24: <__A as serde::de::MapAccess<'_>>::Error;
                            let _32: std::option::Option<usize>;
                            let _33: <__A as serde::de::MapAccess<'_>>::Error;
                            let _41: std::string::String;
                            let _42: <__A as serde::de::MapAccess<'_>>::Error;
                            let _50: bool;
                            let _51: <__A as serde::de::MapAccess<'_>>::Error;
                            let _59: std::option::Option<config::Delimiter>;
                            let _60: <__A as serde::de::MapAccess<'_>>::Error;
                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 7 {
                                debug __val => _11;
                            }
                            scope 8 {
                                debug __err => _12;
                            }
                            scope 9 {
                                debug __val => _23;
                            }
                            scope 10 {
                                debug __err => _24;
                            }
                            scope 11 {
                                debug __val => _32;
                            }
                            scope 12 {
                                debug __err => _33;
                            }
                            scope 13 {
                                debug __val => _41;
                            }
                            scope 14 {
                                debug __err => _42;
                            }
                            scope 15 {
                                debug __val => _50;
                            }
                            scope 16 {
                                debug __err => _51;
                            }
                            scope 17 {
                                debug __val => _59;
                            }
                            scope 18 {
                                debug __err => _60;
                            }
                            scope 19 {
                            }
                            scope 20 {
                                debug __val => const IgnoredAny;
                            }
                            scope 21 {
                                debug __err => _64;
                            }
                        }
                        scope 22 {
                            debug __field0 => _65;
                            let _72: std::option::Option<usize>;
                            let _74: std::option::Option<usize>;
                            let _77: std::option::Option<usize>;
                            let _78: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 26 {
                                debug __field1 => _72;
                                let _79: std::string::String;
                                let _81: std::string::String;
                                let _84: std::string::String;
                                let _85: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 30 {
                                    debug __field2 => _79;
                                    let _86: bool;
                                    let _88: bool;
                                    let _91: bool;
                                    let _92: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 34 {
                                        debug __field3 => _86;
                                        let _93: std::option::Option<config::Delimiter>;
                                        let _95: std::option::Option<config::Delimiter>;
                                        let _98: std::option::Option<config::Delimiter>;
                                        let _99: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 38 {
                                            debug __field4 => _93;
                                        }
                                        scope 39 {
                                            debug __field4 => _95;
                                        }
                                        scope 40 {
                                            debug __val => _98;
                                        }
                                        scope 41 {
                                            debug __err => _99;
                                        }
                                    }
                                    scope 35 {
                                        debug __field3 => _88;
                                    }
                                    scope 36 {
                                        debug __val => _91;
                                    }
                                    scope 37 {
                                        debug __err => _92;
                                    }
                                }
                                scope 31 {
                                    debug __field2 => _81;
                                }
                                scope 32 {
                                    debug __val => _84;
                                }
                                scope 33 {
                                    debug __err => _85;
                                }
                            }
                            scope 27 {
                                debug __field1 => _74;
                            }
                            scope 28 {
                                debug __val => _77;
                            }
                            scope 29 {
                                debug __err => _78;
                            }
                        }
                        scope 23 {
                            debug __field0 => _67;
                        }
                        scope 24 {
                            debug __val => _70;
                        }
                        scope 25 {
                            debug __err => _71;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _107 = const false;
        _106 = const false;
        _107 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<std::option::Option<usize>>::None;
        _106 = const true;
        _5 = std::option::Option::<std::string::String>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _9 = &mut _2;
        _8 = <__A as MapAccess<'_>>::next_key::<flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for flatten::Args>::deserialize::__Field>(_9) -> [return: bb2, unwind: bb102];
    }

    bb2: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_8 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _12);
        goto -> bb87;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_8 as Ok).0: std::option::Option<cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field>);
        _13 = discriminant(_11);
        switchInt(move _13) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _66 = discriminant(_3);
        switchInt(move _66) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb7: {
        _14 = move ((_11 as Some).0: cmd::flatten::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::flatten::Args>::deserialize::__Field);
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb9, 1: bb19, 2: bb27, 3: bb37, 4: bb45, otherwise: bb8];
    }

    bb8: {
        _62 = &mut _2;
        _61 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_62) -> [return: bb53, unwind: bb102];
    }

    bb9: {
        _17 = &_3;
        _16 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_17) -> [return: bb10, unwind: bb102];
    }

    bb10: {
        switchInt(move _16) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _18 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb102];
    }

    bb12: {
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _18);
        goto -> bb87;
    }

    bb13: {
        _21 = &mut _2;
        _20 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_21) -> [return: bb14, unwind: bb102];
    }

    bb14: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _24 = move ((_20 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb87;
    }

    bb16: {
        _23 = move ((_20 as Ok).0: std::option::Option<std::string::String>);
        _19 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _23);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _107 = const true;
        _3 = move _19;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _107 = const true;
        _3 = move _19;
        goto -> bb102;
    }

    bb19: {
        _26 = &_4;
        _25 = std::option::Option::<std::option::Option<usize>>::is_some(_26) -> [return: bb20, unwind: bb102];
    }

    bb20: {
        switchInt(move _25) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _27 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_condense") -> [return: bb22, unwind: bb102];
    }

    bb22: {
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _27);
        goto -> bb87;
    }

    bb23: {
        _30 = &mut _2;
        _29 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_30) -> [return: bb24, unwind: bb102];
    }

    bb24: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _33 = move ((_29 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _33);
        goto -> bb87;
    }

    bb26: {
        _32 = ((_29 as Ok).0: std::option::Option<usize>);
        _28 = std::option::Option::<std::option::Option<usize>>::Some(_32);
        _4 = move _28;
        goto -> bb1;
    }

    bb27: {
        _35 = &_5;
        _34 = std::option::Option::<std::string::String>::is_some(_35) -> [return: bb28, unwind: bb102];
    }

    bb28: {
        switchInt(move _34) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _36 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_separator") -> [return: bb30, unwind: bb102];
    }

    bb30: {
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb87;
    }

    bb31: {
        _39 = &mut _2;
        _38 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_39) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _42 = move ((_38 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _42);
        goto -> bb87;
    }

    bb34: {
        _41 = move ((_38 as Ok).0: std::string::String);
        _37 = std::option::Option::<std::string::String>::Some(move _41);
        drop(_5) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _106 = const true;
        _5 = move _37;
        goto -> bb1;
    }

    bb36 (cleanup): {
        _106 = const true;
        _5 = move _37;
        goto -> bb102;
    }

    bb37: {
        _44 = &_6;
        _43 = std::option::Option::<bool>::is_some(_44) -> [return: bb38, unwind: bb102];
    }

    bb38: {
        switchInt(move _43) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _45 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb40, unwind: bb102];
    }

    bb40: {
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _45);
        goto -> bb87;
    }

    bb41: {
        _48 = &mut _2;
        _47 = <__A as MapAccess<'_>>::next_value::<bool>(_48) -> [return: bb42, unwind: bb102];
    }

    bb42: {
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _51 = move ((_47 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb87;
    }

    bb44: {
        _50 = ((_47 as Ok).0: bool);
        _46 = std::option::Option::<bool>::Some(_50);
        _6 = move _46;
        goto -> bb1;
    }

    bb45: {
        _53 = &_7;
        _52 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_53) -> [return: bb46, unwind: bb102];
    }

    bb46: {
        switchInt(move _52) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _54 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb48, unwind: bb102];
    }

    bb48: {
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb87;
    }

    bb49: {
        _57 = &mut _2;
        _56 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_57) -> [return: bb50, unwind: bb102];
    }

    bb50: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _60 = move ((_56 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _60);
        goto -> bb87;
    }

    bb52: {
        _59 = ((_56 as Ok).0: std::option::Option<config::Delimiter>);
        _55 = std::option::Option::<std::option::Option<Delimiter>>::Some(_59);
        _7 = move _55;
        goto -> bb1;
    }

    bb53: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb1, 1: bb54, otherwise: bb4];
    }

    bb54: {
        _64 = move ((_61 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb87;
    }

    bb55: {
        _68 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb57, unwind: bb102];
    }

    bb56: {
        _107 = const false;
        _67 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _65 = move _67;
        goto -> bb60;
    }

    bb57: {
        _69 = discriminant(_68);
        switchInt(move _69) -> [0: bb59, 1: bb58, otherwise: bb4];
    }

    bb58: {
        _71 = move ((_68 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb87;
    }

    bb59: {
        _70 = move ((_68 as Ok).0: std::option::Option<std::string::String>);
        _65 = move _70;
        goto -> bb60;
    }

    bb60: {
        _73 = discriminant(_4);
        switchInt(move _73) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        _75 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_condense") -> [return: bb63, unwind: bb90];
    }

    bb62: {
        _74 = ((_4 as Some).0: std::option::Option<usize>);
        _72 = _74;
        goto -> bb66;
    }

    bb63: {
        _76 = discriminant(_75);
        switchInt(move _76) -> [0: bb65, 1: bb64, otherwise: bb4];
    }

    bb64: {
        _78 = move ((_75 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _78);
        goto -> bb86;
    }

    bb65: {
        _77 = ((_75 as Ok).0: std::option::Option<usize>);
        _72 = _77;
        goto -> bb66;
    }

    bb66: {
        _80 = discriminant(_5);
        switchInt(move _80) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        _82 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "flag_separator") -> [return: bb69, unwind: bb90];
    }

    bb68: {
        _106 = const false;
        _81 = move ((_5 as Some).0: std::string::String);
        _79 = move _81;
        goto -> bb72;
    }

    bb69: {
        _83 = discriminant(_82);
        switchInt(move _83) -> [0: bb71, 1: bb70, otherwise: bb4];
    }

    bb70: {
        _85 = move ((_82 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb86;
    }

    bb71: {
        _84 = move ((_82 as Ok).0: std::string::String);
        _79 = move _84;
        goto -> bb72;
    }

    bb72: {
        _87 = discriminant(_6);
        switchInt(move _87) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        _89 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb75, unwind: bb89];
    }

    bb74: {
        _88 = ((_6 as Some).0: bool);
        _86 = _88;
        goto -> bb78;
    }

    bb75: {
        _90 = discriminant(_89);
        switchInt(move _90) -> [0: bb77, 1: bb76, otherwise: bb4];
    }

    bb76: {
        _92 = move ((_89 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _92);
        goto -> bb85;
    }

    bb77: {
        _91 = ((_89 as Ok).0: bool);
        _86 = _91;
        goto -> bb78;
    }

    bb78: {
        _94 = discriminant(_7);
        switchInt(move _94) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        _96 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb81, unwind: bb89];
    }

    bb80: {
        _95 = ((_7 as Some).0: std::option::Option<config::Delimiter>);
        _93 = _95;
        goto -> bb84;
    }

    bb81: {
        _97 = discriminant(_96);
        switchInt(move _97) -> [0: bb83, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _99 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Err(move _99);
        goto -> bb85;
    }

    bb83: {
        _98 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _93 = _98;
        goto -> bb84;
    }

    bb84: {
        _101 = move _65;
        _102 = _72;
        _103 = move _79;
        _104 = _86;
        _105 = _93;
        _100 = flatten::Args { arg_input: move _101, flag_condense: move _102, flag_separator: move _103, flag_no_headers: move _104, flag_delimiter: move _105 };
        _0 = Result::<flatten::Args, <__A as MapAccess<'_>>::Error>::Ok(move _100);
        _106 = const false;
        _107 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb85: {
        drop(_79) -> [return: bb86, unwind: bb90];
    }

    bb86: {
        drop(_65) -> [return: bb87, unwind: bb102];
    }

    bb87: {
        _108 = discriminant(_5);
        switchInt(move _108) -> [1: bb95, otherwise: bb94];
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_79) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_65) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        _111 = discriminant(_3);
        switchInt(move _111) -> [1: bb103, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop(_2) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        resume;
    }

    bb94: {
        _106 = const false;
        _109 = discriminant(_3);
        switchInt(move _109) -> [1: bb98, otherwise: bb97];
    }

    bb95: {
        switchInt(_106) -> [0: bb94, otherwise: bb96];
    }

    bb96: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb94, unwind: bb91];
    }

    bb97: {
        _107 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb98: {
        switchInt(_107) -> [0: bb97, otherwise: bb99];
    }

    bb99: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb97, unwind: bb92];
    }

    bb100 (cleanup): {
        switchInt(_106) -> [0: bb91, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        _110 = discriminant(_5);
        switchInt(move _110) -> [1: bb100, otherwise: bb91];
    }

    bb103 (cleanup): {
        switchInt(_107) -> [0: bb92, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb92, unwind terminate(cleanup)];
    }
}

const flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 5];
    let _2: &[&str; 5];
    let _3: [&str; 5];
    let mut _4: &[&str; 5];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in flatten::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/flatten.rs:41:10: 41:21>::deserialize::FIELDS: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "arg_input", const "flag_condense", const "flag_separator", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn flatten::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::flatten::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::flatten::Args>;
    let mut _4: std::result::Result<cmd::flatten::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::flatten::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _14: bool;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _17: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _18: &config::Config;
    let mut _19: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _24: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _25: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _26: isize;
    let mut _30: std::io::Stdout;
    let mut _32: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _33: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _34: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _36: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _37: &mut csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _38: isize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: &std::string::String;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _44: std::result::Result<(), std::io::Error>;
    let mut _45: &mut tabwriter::TabWriter<std::io::Stdout>;
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let _52: &std::string::String;
    let mut _53: isize;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _57: std::result::Result<csv::ByteRecord, csv::Error>;
    let mut _58: isize;
    let mut _61: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>>;
    let mut _62: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>>;
    let mut _63: std::iter::Zip<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _64: csv::ByteRecordIter<'_>;
    let mut _65: &csv::ByteRecord;
    let mut _66: &csv::ByteRecord;
    let mut _68: std::option::Option<(usize, (&[u8], &[u8]))>;
    let mut _69: &mut std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>>;
    let mut _70: isize;
    let mut _74: bool;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _76: std::result::Result<(), std::io::Error>;
    let mut _77: &mut tabwriter::TabWriter<std::io::Stdout>;
    let mut _78: std::fmt::Arguments<'_>;
    let mut _79: &[&str];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let _84: &usize;
    let mut _85: isize;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _88: std::result::Result<(), std::io::Error>;
    let mut _89: &mut tabwriter::TabWriter<std::io::Stdout>;
    let _90: &&[u8];
    let mut _91: isize;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _94: std::result::Result<(), std::io::Error>;
    let mut _95: &mut tabwriter::TabWriter<std::io::Stdout>;
    let mut _96: &[u8];
    let _97: &[u8; 1];
    let mut _98: isize;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _101: std::result::Result<(), std::io::Error>;
    let mut _102: &mut tabwriter::TabWriter<std::io::Stdout>;
    let _103: &[u8];
    let mut _104: &std::borrow::Cow<'_, [u8]>;
    let _105: std::borrow::Cow<'_, [u8]>;
    let mut _106: std::borrow::Cow<'_, [u8]>;
    let mut _107: std::option::Option<usize>;
    let mut _108: isize;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _111: std::result::Result<(), std::io::Error>;
    let mut _112: &mut tabwriter::TabWriter<std::io::Stdout>;
    let mut _113: &[u8];
    let _114: &[u8; 1];
    let mut _115: isize;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _118: std::result::Result<(), std::io::Error>;
    let mut _119: &mut tabwriter::TabWriter<std::io::Stdout>;
    let mut _120: isize;
    let mut _124: &str;
    let mut _125: &[u8];
    let mut _126: bool;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _15: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            let _20: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _21: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            scope 7 {
                debug rdr => _15;
                let _22: csv::ByteRecord;
                let _27: std::result::Result<std::convert::Infallible, csv::Error>;
                let _28: &csv::ByteRecord;
                scope 12 {
                    debug headers => _22;
                    let mut _29: tabwriter::TabWriter<std::io::Stdout>;
                    scope 17 {
                        debug wtr => _29;
                        let mut _31: bool;
                        scope 18 {
                            debug first => _31;
                            let mut _35: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
                            let _121: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 19 {
                                debug iter => _35;
                                let _39: std::result::Result<csv::ByteRecord, csv::Error>;
                                scope 20 {
                                    debug r => _39;
                                    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
                                    let _55: csv::ByteRecord;
                                    let _59: std::result::Result<std::convert::Infallible, csv::Error>;
                                    let _60: csv::ByteRecord;
                                    let mut _123: &[&str; 2];
                                    scope 21 {
                                        debug residual => _54;
                                        scope 22 {
                                        }
                                    }
                                    scope 23 {
                                        debug val => const ();
                                        scope 24 {
                                        }
                                    }
                                    scope 25 {
                                        debug r => _55;
                                        let mut _67: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>>;
                                        scope 30 {
                                            debug iter => _67;
                                            let _71: usize;
                                            let _72: &[u8];
                                            let _73: &[u8];
                                            scope 31 {
                                                debug i => _71;
                                                debug header => _72;
                                                debug field => _73;
                                                let _86: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let _92: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let _99: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let _109: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let mut _122: &[&str; 1];
                                                scope 32 {
                                                    debug residual => _86;
                                                    scope 33 {
                                                    }
                                                }
                                                scope 34 {
                                                    debug val => const ();
                                                    scope 35 {
                                                    }
                                                }
                                                scope 36 {
                                                    debug residual => _92;
                                                    scope 37 {
                                                    }
                                                }
                                                scope 38 {
                                                    debug val => const ();
                                                    scope 39 {
                                                    }
                                                }
                                                scope 40 {
                                                    debug residual => _99;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => const ();
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug residual => _109;
                                                    scope 45 {
                                                    }
                                                }
                                                scope 46 {
                                                    debug val => const ();
                                                    scope 47 {
                                                    }
                                                }
                                                scope 48 {
                                                    debug residual => _116;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => const ();
                                                    scope 51 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _59;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _60;
                                        scope 29 {
                                        }
                                    }
                                }
                            }
                            scope 52 {
                                debug residual => _121;
                                scope 53 {
                                }
                            }
                            scope 54 {
                                debug val => const ();
                                scope 55 {
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _27;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _28;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _21;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _126 = const false;
        _5 = const {alloc6: &&str};
        _124 = deref_copy (*_5);
        _4 = get_args::<flatten::Args>(_124, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<flatten::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::flatten::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb97];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb89, unwind continue];
    }

    bb6: {
        _13 = (_2.4: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb97];
    }

    bb7: {
        _14 = (_2.3: bool);
        _9 = Config::no_headers(move _10, move _14) -> [return: bb8, unwind: bb97];
    }

    bb8: {
        _18 = &_9;
        _17 = Config::reader(move _18) -> [return: bb9, unwind: bb96];
    }

    bb9: {
        _16 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _17) -> [return: bb10, unwind: bb96];
    }

    bb10: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        _21 = move ((_16 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _15 = move _21;
        _25 = &mut _15;
        _24 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _25) -> [return: bb13, unwind: bb95];
    }

    bb12: {
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _20) -> [return: bb103, unwind: bb96];
    }

    bb13: {
        _23 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _24) -> [return: bb14, unwind: bb95];
    }

    bb14: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        _28 = ((_23 as Continue).0: &csv::ByteRecord);
        _22 = <ByteRecord as Clone>::clone(_28) -> [return: bb17, unwind: bb95];
    }

    bb16: {
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _27) -> [return: bb104, unwind: bb95];
    }

    bb17: {
        _30 = stdout() -> [return: bb18, unwind: bb94];
    }

    bb18: {
        _29 = TabWriter::<Stdout>::new(move _30) -> [return: bb19, unwind: bb94];
    }

    bb19: {
        _31 = const true;
        _34 = &mut _15;
        _33 = Reader::<Box<dyn std::io::Read>>::byte_records(move _34) -> [return: bb20, unwind: bb93];
    }

    bb20: {
        _32 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as IntoIterator>::into_iter(move _33) -> [return: bb21, unwind: bb93];
    }

    bb21: {
        _35 = move _32;
        goto -> bb22;
    }

    bb22: {
        _37 = &mut _35;
        _36 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as Iterator>::next(_37) -> [return: bb23, unwind: bb92];
    }

    bb23: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb25, 1: bb24, otherwise: bb4];
    }

    bb24: {
        _126 = const true;
        _39 = move ((_36 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _40 = _31;
        switchInt(move _40) -> [0: bb26, otherwise: bb34];
    }

    bb25: {
        drop(_35) -> [return: bb73, unwind: bb93];
    }

    bb26: {
        _42 = &(_2.2: std::string::String);
        _41 = std::string::String::is_empty(move _42) -> [return: bb27, unwind: bb102];
    }

    bb27: {
        switchInt(move _41) -> [0: bb28, otherwise: bb34];
    }

    bb28: {
        _45 = &mut _29;
        _123 = const _;
        _47 = _123 as &[&str] (PointerCoercion(Unsize));
        _52 = &(_2.2: std::string::String);
        _51 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_52) -> [return: bb29, unwind: bb102];
    }

    bb29: {
        _50 = [move _51];
        _49 = &_50;
        _48 = _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _46 = Arguments::<'_>::new_v1(move _47, move _48) -> [return: bb30, unwind: bb102];
    }

    bb30: {
        _44 = <TabWriter<Stdout> as std::io::Write>::write_fmt(_45, move _46) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        _43 = <Result<(), std::io::Error> as Try>::branch(move _44) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        _53 = discriminant(_43);
        switchInt(move _53) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _54 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _54) -> [return: bb105, unwind: bb102];
    }

    bb34: {
        _31 = const false;
        _126 = const false;
        _57 = move _39;
        _56 = <Result<ByteRecord, csv::Error> as Try>::branch(move _57) -> [return: bb35, unwind: bb102];
    }

    bb35: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        _60 = move ((_56 as Continue).0: csv::ByteRecord);
        _55 = move _60;
        _65 = &_22;
        _64 = ByteRecord::iter(move _65) -> [return: bb38, unwind: bb91];
    }

    bb37: {
        _59 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _59) -> [return: bb106, unwind: bb102];
    }

    bb38: {
        _66 = &_55;
        _63 = <ByteRecordIter<'_> as Iterator>::zip::<&ByteRecord>(move _64, move _66) -> [return: bb39, unwind: bb91];
    }

    bb39: {
        _62 = <Zip<ByteRecordIter<'_>, ByteRecordIter<'_>> as Iterator>::enumerate(move _63) -> [return: bb40, unwind: bb91];
    }

    bb40: {
        _61 = <Enumerate<Zip<ByteRecordIter<'_>, ByteRecordIter<'_>>> as IntoIterator>::into_iter(move _62) -> [return: bb41, unwind: bb91];
    }

    bb41: {
        _67 = move _61;
        goto -> bb42;
    }

    bb42: {
        _69 = &mut _67;
        _68 = <Enumerate<Zip<ByteRecordIter<'_>, ByteRecordIter<'_>>> as Iterator>::next(_69) -> [return: bb43, unwind: bb91];
    }

    bb43: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb45, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _72 = ((((_68 as Some).0: (usize, (&[u8], &[u8]))).1: (&[u8], &[u8])).0: &[u8]);
        _73 = ((((_68 as Some).0: (usize, (&[u8], &[u8]))).1: (&[u8], &[u8])).1: &[u8]);
        _71 = (((_68 as Some).0: (usize, (&[u8], &[u8]))).0: usize);
        _74 = (_9.4: bool);
        switchInt(move _74) -> [0: bb52, otherwise: bb46];
    }

    bb45: {
        drop(_55) -> [return: bb72, unwind: bb102];
    }

    bb46: {
        _77 = &mut _29;
        _122 = const _;
        _79 = _122 as &[&str] (PointerCoercion(Unsize));
        _84 = &_71;
        _83 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_84) -> [return: bb47, unwind: bb91];
    }

    bb47: {
        _82 = [move _83];
        _81 = &_82;
        _80 = _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _78 = Arguments::<'_>::new_v1(move _79, move _80) -> [return: bb48, unwind: bb91];
    }

    bb48: {
        _76 = <TabWriter<Stdout> as std::io::Write>::write_fmt(_77, move _78) -> [return: bb49, unwind: bb91];
    }

    bb49: {
        _75 = <Result<(), std::io::Error> as Try>::branch(move _76) -> [return: bb50, unwind: bb91];
    }

    bb50: {
        _85 = discriminant(_75);
        switchInt(move _85) -> [0: bb56, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _86 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _86) -> [return: bb107, unwind: bb91];
    }

    bb52: {
        _89 = &mut _29;
        _90 = &_72;
        _125 = deref_copy (*_90);
        _88 = <TabWriter<Stdout> as std::io::Write>::write_all(move _89, _125) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        _87 = <Result<(), std::io::Error> as Try>::branch(move _88) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        _91 = discriminant(_87);
        switchInt(move _91) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _92 = move ((_87 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _92) -> [return: bb108, unwind: bb91];
    }

    bb56: {
        _95 = &mut _29;
        _97 = const b"\t";
        _96 = _97 as &[u8] (PointerCoercion(Unsize));
        _94 = <TabWriter<Stdout> as std::io::Write>::write_all(move _95, move _96) -> [return: bb57, unwind: bb91];
    }

    bb57: {
        _93 = <Result<(), std::io::Error> as Try>::branch(move _94) -> [return: bb58, unwind: bb91];
    }

    bb58: {
        _98 = discriminant(_93);
        switchInt(move _98) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        _102 = &mut _29;
        _106 = Cow::<'_, [u8]>::Borrowed(_73);
        _107 = (_2.1: std::option::Option<usize>);
        _105 = condense(move _106, move _107) -> [return: bb61, unwind: bb91];
    }

    bb60: {
        _99 = move ((_93 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _99) -> [return: bb109, unwind: bb91];
    }

    bb61: {
        _104 = &_105;
        _103 = <Cow<'_, [u8]> as Deref>::deref(move _104) -> [return: bb62, unwind: bb90];
    }

    bb62: {
        _101 = <TabWriter<Stdout> as std::io::Write>::write_all(move _102, _103) -> [return: bb63, unwind: bb90];
    }

    bb63: {
        _100 = <Result<(), std::io::Error> as Try>::branch(move _101) -> [return: bb64, unwind: bb90];
    }

    bb64: {
        _108 = discriminant(_100);
        switchInt(move _108) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        drop(_105) -> [return: bb68, unwind: bb91];
    }

    bb66: {
        _109 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb67, unwind: bb90];
    }

    bb67: {
        drop(_105) -> [return: bb82, unwind: bb91];
    }

    bb68: {
        _112 = &mut _29;
        _114 = const b"\n";
        _113 = _114 as &[u8] (PointerCoercion(Unsize));
        _111 = <TabWriter<Stdout> as std::io::Write>::write_all(move _112, move _113) -> [return: bb69, unwind: bb91];
    }

    bb69: {
        _110 = <Result<(), std::io::Error> as Try>::branch(move _111) -> [return: bb70, unwind: bb91];
    }

    bb70: {
        _115 = discriminant(_110);
        switchInt(move _115) -> [0: bb42, 1: bb71, otherwise: bb4];
    }

    bb71: {
        _116 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _116) -> [return: bb110, unwind: bb91];
    }

    bb72: {
        _126 = const false;
        goto -> bb22;
    }

    bb73: {
        _119 = &mut _29;
        _118 = <TabWriter<Stdout> as std::io::Write>::flush(move _119) -> [return: bb74, unwind: bb93];
    }

    bb74: {
        _117 = <Result<(), std::io::Error> as Try>::branch(move _118) -> [return: bb75, unwind: bb93];
    }

    bb75: {
        _120 = discriminant(_117);
        switchInt(move _120) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_29) -> [return: bb78, unwind: bb94];
    }

    bb77: {
        _121 = move ((_117 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _121) -> [return: bb111, unwind: bb93];
    }

    bb78: {
        drop(_22) -> [return: bb79, unwind: bb95];
    }

    bb79: {
        drop(_15) -> [return: bb80, unwind: bb96];
    }

    bb80: {
        drop(_9) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        drop(_2) -> [return: bb89, unwind continue];
    }

    bb82: {
        drop(_55) -> [return: bb100, unwind: bb102];
    }

    bb83: {
        _126 = const false;
        drop(_35) -> [return: bb84, unwind: bb93];
    }

    bb84: {
        drop(_29) -> [return: bb85, unwind: bb94];
    }

    bb85: {
        drop(_22) -> [return: bb86, unwind: bb95];
    }

    bb86: {
        drop(_15) -> [return: bb87, unwind: bb96];
    }

    bb87: {
        drop(_9) -> [return: bb88, unwind: bb97];
    }

    bb88: {
        drop(_2) -> [return: bb89, unwind continue];
    }

    bb89: {
        return;
    }

    bb90 (cleanup): {
        drop(_105) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_55) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_35) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_29) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_22) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_15) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_9) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_2) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        resume;
    }

    bb99: {
        drop(_39) -> [return: bb83, unwind: bb92];
    }

    bb100: {
        switchInt(_126) -> [0: bb83, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_39) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_126) -> [0: bb92, otherwise: bb101];
    }

    bb103: {
        goto -> bb87;
    }

    bb104: {
        goto -> bb86;
    }

    bb105: {
        goto -> bb100;
    }

    bb106: {
        goto -> bb100;
    }

    bb107: {
        goto -> bb82;
    }

    bb108: {
        goto -> bb82;
    }

    bb109: {
        goto -> bb82;
    }

    bb110: {
        goto -> bb82;
    }

    bb111: {
        goto -> bb84;
    }
}

alloc8 (size: 1, align: 1) {
    0a                                              │ .
}

alloc7 (size: 1, align: 1) {
    09                                              │ .
}

alloc6 (static: flatten::USAGE, size: 16, align: 8) {
    ╾────alloc320<imm>────╼ 64 05 00 00 00 00 00 00 │ ╾──────╼d.......
}

alloc320 (size: 1380, align: 1) {
    0x000 │ 0a 50 72 69 6e 74 73 20 66 6c 61 74 74 65 6e 65 │ .Prints flattene
    0x010 │ 64 20 72 65 63 6f 72 64 73 20 73 75 63 68 20 74 │ d records such t
    0x020 │ 68 61 74 20 66 69 65 6c 64 73 20 61 72 65 20 6c │ hat fields are l
    0x030 │ 61 62 65 6c 65 64 20 73 65 70 61 72 61 74 65 64 │ abeled separated
    0x040 │ 20 62 79 20 61 20 6e 65 77 20 6c 69 6e 65 2e 0a │  by a new line..
    0x050 │ 54 68 69 73 20 6d 6f 64 65 20 69 73 20 70 61 72 │ This mode is par
    0x060 │ 74 69 63 75 6c 61 72 6c 79 20 75 73 65 66 75 6c │ ticularly useful
    0x070 │ 20 66 6f 72 20 76 69 65 77 69 6e 67 20 6f 6e 65 │  for viewing one
    0x080 │ 20 72 65 63 6f 72 64 20 61 74 20 61 20 74 69 6d │  record at a tim
    0x090 │ 65 2e 20 45 61 63 68 0a 72 65 63 6f 72 64 20 69 │ e. Each.record i
    0x0a0 │ 73 20 73 65 70 61 72 61 74 65 64 20 62 79 20 61 │ s separated by a
    0x0b0 │ 20 73 70 65 63 69 61 6c 20 27 23 27 20 63 68 61 │  special '#' cha
    0x0c0 │ 72 61 63 74 65 72 20 28 6f 6e 20 61 20 6c 69 6e │ racter (on a lin
    0x0d0 │ 65 20 62 79 20 69 74 73 65 6c 66 29 2c 20 77 68 │ e by itself), wh
    0x0e0 │ 69 63 68 0a 63 61 6e 20 62 65 20 63 68 61 6e 67 │ ich.can be chang
    0x0f0 │ 65 64 20 77 69 74 68 20 74 68 65 20 2d 2d 73 65 │ ed with the --se
    0x100 │ 70 61 72 61 74 6f 72 20 66 6c 61 67 2e 0a 0a 54 │ parator flag...T
    0x110 │ 68 65 72 65 20 69 73 20 61 6c 73 6f 20 61 20 63 │ here is also a c
    0x120 │ 6f 6e 64 65 6e 73 65 64 20 76 69 65 77 20 28 2d │ ondensed view (-
    0x130 │ 63 20 6f 72 20 2d 2d 63 6f 6e 64 65 6e 73 65 29 │ c or --condense)
    0x140 │ 20 74 68 61 74 20 77 69 6c 6c 20 73 68 6f 72 74 │  that will short
    0x150 │ 65 6e 20 74 68 65 0a 63 6f 6e 74 65 6e 74 73 20 │ en the.contents 
    0x160 │ 6f 66 20 65 61 63 68 20 66 69 65 6c 64 20 74 6f │ of each field to
    0x170 │ 20 70 72 6f 76 69 64 65 20 61 20 73 75 6d 6d 61 │  provide a summa
    0x180 │ 72 79 20 76 69 65 77 2e 0a 0a 55 73 61 67 65 3a │ ry view...Usage:
    0x190 │ 0a 20 20 20 20 78 73 76 20 66 6c 61 74 74 65 6e │ .    xsv flatten
    0x1a0 │ 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b 3c 69 6e 70 │  [options] [<inp
    0x1b0 │ 75 74 3e 5d 0a 0a 66 6c 61 74 74 65 6e 20 6f 70 │ ut>]..flatten op
    0x1c0 │ 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 63 2c 20 2d │ tions:.    -c, -
    0x1d0 │ 2d 63 6f 6e 64 65 6e 73 65 20 3c 61 72 67 3e 20 │ -condense <arg> 
    0x1e0 │ 20 4c 69 6d 69 74 73 20 74 68 65 20 6c 65 6e 67 │  Limits the leng
    0x1f0 │ 74 68 20 6f 66 20 65 61 63 68 20 66 69 65 6c 64 │ th of each field
    0x200 │ 20 74 6f 20 74 68 65 20 76 61 6c 75 65 0a 20 20 │  to the value.  
    0x210 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x220 │ 20 20 20 20 20 20 20 20 20 73 70 65 63 69 66 69 │          specifi
    0x230 │ 65 64 2e 20 49 66 20 74 68 65 20 66 69 65 6c 64 │ ed. If the field
    0x240 │ 20 69 73 20 55 54 46 2d 38 20 65 6e 63 6f 64 65 │  is UTF-8 encode
    0x250 │ 64 2c 20 74 68 65 6e 0a 20 20 20 20 20 20 20 20 │ d, then.        
    0x260 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x270 │ 20 20 20 3c 61 72 67 3e 20 72 65 66 65 72 73 20 │    <arg> refers 
    0x280 │ 74 6f 20 74 68 65 20 6e 75 6d 62 65 72 20 6f 66 │ to the number of
    0x290 │ 20 63 6f 64 65 20 70 6f 69 6e 74 73 2e 0a 20 20 │  code points..  
    0x2a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2b0 │ 20 20 20 20 20 20 20 20 20 4f 74 68 65 72 77 69 │          Otherwi
    0x2c0 │ 73 65 2c 20 69 74 20 72 65 66 65 72 73 20 74 6f │ se, it refers to
    0x2d0 │ 20 74 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 62 │  the number of b
    0x2e0 │ 79 74 65 73 2e 0a 20 20 20 20 2d 73 2c 20 2d 2d │ ytes..    -s, --
    0x2f0 │ 73 65 70 61 72 61 74 6f 72 20 3c 61 72 67 3e 20 │ separator <arg> 
    0x300 │ 20 41 20 73 74 72 69 6e 67 20 6f 66 20 63 68 61 │  A string of cha
    0x310 │ 72 61 63 74 65 72 73 20 74 6f 20 77 72 69 74 65 │ racters to write
    0x320 │ 20 61 66 74 65 72 20 65 61 63 68 20 72 65 63 6f │  after each reco
    0x330 │ 72 64 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ rd..            
    0x340 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 57 │                W
    0x350 │ 68 65 6e 20 6e 6f 6e 2d 65 6d 70 74 79 2c 20 61 │ hen non-empty, a
    0x360 │ 20 6e 65 77 20 6c 69 6e 65 20 69 73 20 61 75 74 │  new line is aut
    0x370 │ 6f 6d 61 74 69 63 61 6c 6c 79 0a 20 20 20 20 20 │ omatically.     
    0x380 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x390 │ 20 20 20 20 20 20 61 70 70 65 6e 64 65 64 20 74 │       appended t
    0x3a0 │ 6f 20 74 68 65 20 73 65 70 61 72 61 74 6f 72 2e │ o the separator.
    0x3b0 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x3c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 │             [def
    0x3d0 │ 61 75 6c 74 3a 20 23 5d 0a 0a 43 6f 6d 6d 6f 6e │ ault: #]..Common
    0x3e0 │ 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 68 │  options:.    -h
    0x3f0 │ 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 20 20 20 │ , --help        
    0x400 │ 20 20 20 20 20 44 69 73 70 6c 61 79 20 74 68 69 │      Display thi
    0x410 │ 73 20 6d 65 73 73 61 67 65 0a 20 20 20 20 2d 6e │ s message.    -n
    0x420 │ 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 │ , --no-headers  
    0x430 │ 20 20 20 20 20 57 68 65 6e 20 73 65 74 2c 20 74 │      When set, t
    0x440 │ 68 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 6c │ he first row wil
    0x450 │ 6c 20 6e 6f 74 20 62 65 20 69 6e 74 65 72 70 72 │ l not be interpr
    0x460 │ 65 74 65 64 0a 20 20 20 20 20 20 20 20 20 20 20 │ eted.           
    0x470 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x480 │ 61 73 20 68 65 61 64 65 72 73 2e 20 57 68 65 6e │ as headers. When
    0x490 │ 20 73 65 74 2c 20 74 68 65 20 6e 61 6d 65 20 6f │  set, the name o
    0x4a0 │ 66 20 65 61 63 68 20 66 69 65 6c 64 0a 20 20 20 │ f each field.   
    0x4b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x4c0 │ 20 20 20 20 20 20 20 20 77 69 6c 6c 20 62 65 20 │         will be 
    0x4d0 │ 69 74 73 20 69 6e 64 65 78 2e 0a 20 20 20 20 2d │ its index..    -
    0x4e0 │ 64 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c │ d, --delimiter <
    0x4f0 │ 61 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 │ arg>  The field 
    0x500 │ 64 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 │ delimiter for re
    0x510 │ 61 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a │ ading CSV data..
    0x520 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x530 │ 20 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 │            Must 
    0x540 │ 62 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 │ be a single char
    0x550 │ 61 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a │ acter. (default:
    0x560 │ 20 2c 29 0a                                     │  ,).
}

promoted[0] in flatten::run: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in flatten::run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

static cmd::fmt::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nFormats CSV data with a custom delimiter or CRLF line endings.\n\nGenerally, all commands in xsv output CSV data in a default format, which is\nthe same as the default format for reading CSV data. This makes it easy to\npipe multiple xsv commands together. However, you may want the final result to\nhave a specific delimiter or record separator, and this is where 'xsv fmt' is\nuseful.\n\nUsage:\n    xsv fmt [options] [<input>]\n\nfmt options:\n    -t, --out-delimiter <arg>  The field delimiter for writing CSV data.\n                               [default: ,]\n    --crlf                     Use '\\r\\n' line endings in the output.\n    --ascii                    Use ASCII field and record separators.\n    --quote <arg>              The quote character to use. [default: \"]\n    --quote-always             Put quotes around every value.\n    --escape <arg>             The escape character to use. When not specified,\n                               quotes are escaped by doubling them.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<cmd::fmt::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fmt::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::expecting(_1: &cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_u64(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _4: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _5: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _6: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _7: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _8: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _9: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _10: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _11: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _12: __E;
    let mut _13: serde::de::Unexpected<'_>;
    let mut _14: &dyn serde::de::Expected;
    let mut _15: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, otherwise: bb1];
    }

    bb1: {
        _13 = Unexpected::<'_>::Unsigned(_2);
        _15 = const _;
        _14 = _15 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _12 = <__E as serde::de::Error>::invalid_value(move _13, move _14) -> [return: bb11, unwind continue];
    }

    bb2: {
        _3 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb12;
    }

    bb3: {
        _4 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb12;
    }

    bb4: {
        _5 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb12;
    }

    bb5: {
        _6 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb6: {
        _7 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb7: {
        _8 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb12;
    }

    bb8: {
        _9 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb12;
    }

    bb9: {
        _10 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb12;
    }

    bb10: {
        _11 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Err(move _12);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 9";
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_str(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _13: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _14: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _15: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _16: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _17: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _18: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _19: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _20: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _21: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;

    bb0: {
        _11 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb27, unwind continue];
    }

    bb1: {
        _12 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb28;
    }

    bb2: {
        _10 = <str as PartialEq>::eq(_2, const "flag_out_delimiter") -> [return: bb26, unwind continue];
    }

    bb3: {
        _13 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb28;
    }

    bb4: {
        _9 = <str as PartialEq>::eq(_2, const "flag_crlf") -> [return: bb25, unwind continue];
    }

    bb5: {
        _14 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb28;
    }

    bb6: {
        _8 = <str as PartialEq>::eq(_2, const "flag_ascii") -> [return: bb24, unwind continue];
    }

    bb7: {
        _15 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb28;
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb23, unwind continue];
    }

    bb9: {
        _16 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb28;
    }

    bb10: {
        _6 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb22, unwind continue];
    }

    bb11: {
        _17 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb28;
    }

    bb12: {
        _5 = <str as PartialEq>::eq(_2, const "flag_quote") -> [return: bb21, unwind continue];
    }

    bb13: {
        _18 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb28;
    }

    bb14: {
        _4 = <str as PartialEq>::eq(_2, const "flag_quote_always") -> [return: bb20, unwind continue];
    }

    bb15: {
        _19 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb28;
    }

    bb16: {
        _3 = <str as PartialEq>::eq(_2, const "flag_escape") -> [return: bb19, unwind continue];
    }

    bb17: {
        _20 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb28;
    }

    bb18: {
        _21 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb28;
    }

    bb19: {
        switchInt(move _3) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _4) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _5) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _6) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_bytes(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _22: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _23: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _24: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _25: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _26: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _27: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _28: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _29: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
    let mut _30: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb103, otherwise: bb10];
    }

    bb10: {
        _30 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb112;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [99: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [114: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [108: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [102: bb105, otherwise: bb10];
    }

    bb19: {
        _15 = Len((*_2));
        _16 = const 18_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb38, otherwise: bb20];
    }

    bb20: {
        switchInt((*_2)[0 of 18]) -> [102: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[1 of 18]) -> [108: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[2 of 18]) -> [97: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[3 of 18]) -> [103: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[4 of 18]) -> [95: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[5 of 18]) -> [111: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[6 of 18]) -> [117: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[7 of 18]) -> [116: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[8 of 18]) -> [95: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[9 of 18]) -> [100: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[10 of 18]) -> [101: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[11 of 18]) -> [108: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[12 of 18]) -> [105: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[13 of 18]) -> [109: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[14 of 18]) -> [105: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[15 of 18]) -> [116: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[16 of 18]) -> [101: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[17 of 18]) -> [114: bb104, otherwise: bb10];
    }

    bb38: {
        _12 = Len((*_2));
        _13 = const 10_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb53, otherwise: bb39];
    }

    bb39: {
        switchInt((*_2)[0 of 10]) -> [102: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[1 of 10]) -> [108: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[2 of 10]) -> [97: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[3 of 10]) -> [103: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[4 of 10]) -> [95: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[5 of 10]) -> [97: bb45, 113: bb49, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[6 of 10]) -> [115: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[7 of 10]) -> [99: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[8 of 10]) -> [105: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[9 of 10]) -> [105: bb106, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[6 of 10]) -> [117: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[7 of 10]) -> [111: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[8 of 10]) -> [116: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[9 of 10]) -> [101: bb109, otherwise: bb10];
    }

    bb53: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb70, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 11]) -> [102: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[1 of 11]) -> [108: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[2 of 11]) -> [97: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[3 of 11]) -> [103: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[4 of 11]) -> [95: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[5 of 11]) -> [111: bb60, 101: bb65, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[6 of 11]) -> [117: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[7 of 11]) -> [116: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[8 of 11]) -> [112: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[9 of 11]) -> [117: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[10 of 11]) -> [116: bb107, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[6 of 11]) -> [115: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[7 of 11]) -> [99: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[8 of 11]) -> [97: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[9 of 11]) -> [112: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[10 of 11]) -> [101: bb111, otherwise: bb10];
    }

    bb70: {
        _6 = Len((*_2));
        _7 = const 14_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb85, otherwise: bb71];
    }

    bb71: {
        switchInt((*_2)[0 of 14]) -> [102: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[1 of 14]) -> [108: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[2 of 14]) -> [97: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[3 of 14]) -> [103: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[4 of 14]) -> [95: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[5 of 14]) -> [100: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[6 of 14]) -> [101: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[7 of 14]) -> [108: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[8 of 14]) -> [105: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[9 of 14]) -> [109: bb81, otherwise: bb10];
    }

    bb81: {
        switchInt((*_2)[10 of 14]) -> [105: bb82, otherwise: bb10];
    }

    bb82: {
        switchInt((*_2)[11 of 14]) -> [116: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[12 of 14]) -> [101: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[13 of 14]) -> [114: bb108, otherwise: bb10];
    }

    bb85: {
        _3 = Len((*_2));
        _4 = const 17_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb86];
    }

    bb86: {
        switchInt((*_2)[0 of 17]) -> [102: bb87, otherwise: bb10];
    }

    bb87: {
        switchInt((*_2)[1 of 17]) -> [108: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[2 of 17]) -> [97: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[3 of 17]) -> [103: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[4 of 17]) -> [95: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[5 of 17]) -> [113: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[6 of 17]) -> [117: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[7 of 17]) -> [111: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[8 of 17]) -> [116: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[9 of 17]) -> [101: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[10 of 17]) -> [95: bb97, otherwise: bb10];
    }

    bb97: {
        switchInt((*_2)[11 of 17]) -> [97: bb98, otherwise: bb10];
    }

    bb98: {
        switchInt((*_2)[12 of 17]) -> [108: bb99, otherwise: bb10];
    }

    bb99: {
        switchInt((*_2)[13 of 17]) -> [119: bb100, otherwise: bb10];
    }

    bb100: {
        switchInt((*_2)[14 of 17]) -> [97: bb101, otherwise: bb10];
    }

    bb101: {
        switchInt((*_2)[15 of 17]) -> [121: bb102, otherwise: bb10];
    }

    bb102: {
        switchInt((*_2)[16 of 17]) -> [115: bb110, otherwise: bb10];
    }

    bb103: {
        _21 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb112;
    }

    bb104: {
        _22 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb112;
    }

    bb105: {
        _23 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb112;
    }

    bb106: {
        _24 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb112;
    }

    bb107: {
        _25 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb112;
    }

    bb108: {
        _26 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb112;
    }

    bb109: {
        _27 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb112;
    }

    bb110: {
        _28 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb112;
    }

    bb111: {
        _29 = cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb112;
    }

    bb112: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor>(move _1, const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::expecting(_1: &cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::fmt::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: isize;
    let mut _66: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _67: &dyn serde::de::Expected;
    let mut _68: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: isize;
    let mut _75: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _76: &dyn serde::de::Expected;
    let mut _77: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _78: &mut __A;
    let mut _79: isize;
    let mut _82: isize;
    let mut _84: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _85: &dyn serde::de::Expected;
    let mut _86: cmd::fmt::Args;
    let mut _87: std::option::Option<std::string::String>;
    let mut _88: std::option::Option<std::string::String>;
    let mut _89: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<config::Delimiter>>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<config::Delimiter>;
        let mut _90: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<bool>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: bool;
            let mut _91: &&str;
            scope 9 {
                debug __field2 => _28;
                let _34: std::option::Option<bool>;
                let _35: <__A as serde::de::SeqAccess<'_>>::Error;
                let _37: bool;
                let mut _92: &&str;
                scope 13 {
                    debug __field3 => _37;
                    let _40: std::option::Option<std::string::String>;
                    let _44: std::option::Option<std::option::Option<std::string::String>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<std::string::String>;
                    let mut _93: &&str;
                    scope 17 {
                        debug __field4 => _40;
                        let _53: std::option::Option<std::option::Option<config::Delimiter>>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: std::option::Option<config::Delimiter>;
                        let mut _94: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _62: std::option::Option<config::Delimiter>;
                            let _63: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _65: config::Delimiter;
                            let mut _95: &&str;
                            scope 25 {
                                debug __field6 => _65;
                                let _71: std::option::Option<bool>;
                                let _72: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _74: bool;
                                let mut _96: &&str;
                                scope 29 {
                                    debug __field7 => _74;
                                    let _80: std::option::Option<std::option::Option<config::Delimiter>>;
                                    let _81: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _83: std::option::Option<config::Delimiter>;
                                    let mut _97: &&str;
                                    scope 33 {
                                        debug __field8 => _83;
                                    }
                                    scope 34 {
                                        debug __val => _80;
                                    }
                                    scope 35 {
                                        debug __err => _81;
                                    }
                                    scope 36 {
                                        debug __value => _83;
                                    }
                                }
                                scope 30 {
                                    debug __val => _71;
                                }
                                scope 31 {
                                    debug __err => _72;
                                }
                                scope 32 {
                                    debug __value => _74;
                                }
                            }
                            scope 26 {
                                debug __val => _62;
                            }
                            scope 27 {
                                debug __err => _63;
                            }
                            scope 28 {
                                debug __value => _65;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _34;
                }
                scope 15 {
                    debug __err => _35;
                }
                scope 16 {
                    debug __value => _37;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb62];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb58;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _89 = const _;
        _12 = _89 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb62];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_14) -> [return: bb8, unwind: bb61];
    }

    bb7: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb58;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb57;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _90 = const _;
        _21 = _90 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb61];
    }

    bb12: {
        _19 = ((_16 as Some).0: std::option::Option<config::Delimiter>);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<bool>(_23) -> [return: bb14, unwind: bb61];
    }

    bb13: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb57;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb57;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<bool>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _91 = const _;
        _30 = _91 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb61];
    }

    bb18: {
        _28 = ((_25 as Some).0: bool);
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<bool>(_32) -> [return: bb20, unwind: bb61];
    }

    bb19: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb57;
    }

    bb20: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _35 = move ((_31 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb57;
    }

    bb22: {
        _34 = ((_31 as Ok).0: std::option::Option<bool>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _92 = const _;
        _39 = _92 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb25, unwind: bb61];
    }

    bb24: {
        _37 = ((_34 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_42) -> [return: bb26, unwind: bb61];
    }

    bb25: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb57;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb57;
    }

    bb28: {
        _44 = move ((_41 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _93 = const _;
        _49 = _93 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb61];
    }

    bb30: {
        _47 = move ((_44 as Some).0: std::option::Option<std::string::String>);
        _40 = move _47;
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_51) -> [return: bb32, unwind: bb60];
    }

    bb31: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb57;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb56;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _94 = const _;
        _58 = _94 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb60];
    }

    bb36: {
        _56 = ((_53 as Some).0: std::option::Option<config::Delimiter>);
        _60 = &mut _2;
        _59 = <__A as SeqAccess<'_>>::next_element::<Delimiter>(_60) -> [return: bb38, unwind: bb60];
    }

    bb37: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb56;
    }

    bb38: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _63 = move ((_59 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _63);
        goto -> bb56;
    }

    bb40: {
        _62 = ((_59 as Ok).0: std::option::Option<config::Delimiter>);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _95 = const _;
        _67 = _95 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _66 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb43, unwind: bb60];
    }

    bb42: {
        _65 = ((_62 as Some).0: config::Delimiter);
        _69 = &mut _2;
        _68 = <__A as SeqAccess<'_>>::next_element::<bool>(_69) -> [return: bb44, unwind: bb60];
    }

    bb43: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb56;
    }

    bb44: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _72 = move ((_68 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _72);
        goto -> bb56;
    }

    bb46: {
        _71 = ((_68 as Ok).0: std::option::Option<bool>);
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _96 = const _;
        _76 = _96 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _75 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _76) -> [return: bb49, unwind: bb60];
    }

    bb48: {
        _74 = ((_71 as Some).0: bool);
        _78 = &mut _2;
        _77 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_78) -> [return: bb50, unwind: bb60];
    }

    bb49: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _75);
        goto -> bb56;
    }

    bb50: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _81 = move ((_77 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _81);
        goto -> bb56;
    }

    bb52: {
        _80 = ((_77 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _97 = const _;
        _85 = _97 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _84 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _85) -> [return: bb55, unwind: bb60];
    }

    bb54: {
        _83 = ((_80 as Some).0: std::option::Option<config::Delimiter>);
        _87 = move _3;
        _88 = move _40;
        _86 = cmd::fmt::Args { arg_input: move _87, flag_out_delimiter: _19, flag_crlf: _28, flag_ascii: _37, flag_output: move _88, flag_delimiter: _56, flag_quote: _65, flag_quote_always: _74, flag_escape: _83 };
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _86);
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb55: {
        _0 = Result::<cmd::fmt::Args, <__A as SeqAccess<'_>>::Error>::Err(move _84);
        goto -> bb56;
    }

    bb56: {
        drop(_40) -> [return: bb57, unwind: bb61];
    }

    bb57: {
        drop(_3) -> [return: bb58, unwind: bb62];
    }

    bb58: {
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_40) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_3) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_2) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::<impl at src/cmd/fmt.rs:36:10: 36:21>::visit_map(_1: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::fmt::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::fmt::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::fmt::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _12: std::result::Result<std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: isize;
    let mut _20: bool;
    let _21: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _23: std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: bool;
    let _30: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _31: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _32: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _33: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: bool;
    let _39: &std::option::Option<bool>;
    let mut _40: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _41: std::option::Option<bool>;
    let mut _42: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: bool;
    let _48: &std::option::Option<bool>;
    let mut _49: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _50: std::option::Option<bool>;
    let mut _51: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: bool;
    let _57: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _58: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _59: std::option::Option<std::option::Option<std::string::String>>;
    let mut _60: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: bool;
    let _66: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _67: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _68: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _69: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: bool;
    let _75: &std::option::Option<config::Delimiter>;
    let mut _76: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _77: std::option::Option<config::Delimiter>;
    let mut _78: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: bool;
    let _84: &std::option::Option<bool>;
    let mut _85: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _86: std::option::Option<bool>;
    let mut _87: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: bool;
    let _93: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _94: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _102: &mut __A;
    let mut _103: isize;
    let mut _106: isize;
    let mut _108: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _109: isize;
    let mut _113: isize;
    let mut _115: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _116: isize;
    let mut _120: isize;
    let mut _122: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _123: isize;
    let mut _127: isize;
    let mut _129: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _130: isize;
    let mut _134: isize;
    let mut _136: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _137: isize;
    let mut _141: isize;
    let mut _143: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _144: isize;
    let mut _148: isize;
    let mut _150: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _151: isize;
    let mut _155: isize;
    let mut _157: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _158: isize;
    let mut _162: isize;
    let mut _164: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _165: isize;
    let mut _168: cmd::fmt::Args;
    let mut _169: std::option::Option<std::string::String>;
    let mut _170: std::option::Option<config::Delimiter>;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: std::option::Option<std::string::String>;
    let mut _174: std::option::Option<config::Delimiter>;
    let mut _175: config::Delimiter;
    let mut _176: bool;
    let mut _177: std::option::Option<config::Delimiter>;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<config::Delimiter>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<bool>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<std::string::String>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<config::Delimiter>>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<config::Delimiter>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<config::Delimiter>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let _105: std::option::Option<std::string::String>;
                                        let _107: std::option::Option<std::string::String>;
                                        let _110: std::option::Option<std::string::String>;
                                        let _111: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __key => _18;
                                            let _15: std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>;
                                            let _16: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _18: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field;
                                            let _27: std::option::Option<std::string::String>;
                                            let _28: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _36: std::option::Option<config::Delimiter>;
                                            let _37: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _45: bool;
                                            let _46: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _54: bool;
                                            let _55: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _63: std::option::Option<std::string::String>;
                                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _72: std::option::Option<config::Delimiter>;
                                            let _73: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _81: config::Delimiter;
                                            let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _90: bool;
                                            let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _99: std::option::Option<config::Delimiter>;
                                            let _100: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _104: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 11 {
                                                debug __val => _15;
                                            }
                                            scope 12 {
                                                debug __err => _16;
                                            }
                                            scope 13 {
                                                debug __val => _27;
                                            }
                                            scope 14 {
                                                debug __err => _28;
                                            }
                                            scope 15 {
                                                debug __val => _36;
                                            }
                                            scope 16 {
                                                debug __err => _37;
                                            }
                                            scope 17 {
                                                debug __val => _45;
                                            }
                                            scope 18 {
                                                debug __err => _46;
                                            }
                                            scope 19 {
                                                debug __val => _54;
                                            }
                                            scope 20 {
                                                debug __err => _55;
                                            }
                                            scope 21 {
                                                debug __val => _63;
                                            }
                                            scope 22 {
                                                debug __err => _64;
                                            }
                                            scope 23 {
                                                debug __val => _72;
                                            }
                                            scope 24 {
                                                debug __err => _73;
                                            }
                                            scope 25 {
                                                debug __val => _81;
                                            }
                                            scope 26 {
                                                debug __err => _82;
                                            }
                                            scope 27 {
                                                debug __val => _90;
                                            }
                                            scope 28 {
                                                debug __err => _91;
                                            }
                                            scope 29 {
                                                debug __val => _99;
                                            }
                                            scope 30 {
                                                debug __err => _100;
                                            }
                                            scope 31 {
                                            }
                                            scope 32 {
                                                debug __val => const IgnoredAny;
                                            }
                                            scope 33 {
                                                debug __err => _104;
                                            }
                                        }
                                        scope 34 {
                                            debug __field0 => _105;
                                            let _112: std::option::Option<config::Delimiter>;
                                            let _114: std::option::Option<config::Delimiter>;
                                            let _117: std::option::Option<config::Delimiter>;
                                            let _118: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 38 {
                                                debug __field1 => _112;
                                                let _119: bool;
                                                let _121: bool;
                                                let _124: bool;
                                                let _125: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 42 {
                                                    debug __field2 => _119;
                                                    let _126: bool;
                                                    let _128: bool;
                                                    let _131: bool;
                                                    let _132: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 46 {
                                                        debug __field3 => _126;
                                                        let _133: std::option::Option<std::string::String>;
                                                        let _135: std::option::Option<std::string::String>;
                                                        let _138: std::option::Option<std::string::String>;
                                                        let _139: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 50 {
                                                            debug __field4 => _133;
                                                            let _140: std::option::Option<config::Delimiter>;
                                                            let _142: std::option::Option<config::Delimiter>;
                                                            let _145: std::option::Option<config::Delimiter>;
                                                            let _146: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 54 {
                                                                debug __field5 => _140;
                                                                let _147: config::Delimiter;
                                                                let _149: config::Delimiter;
                                                                let _152: config::Delimiter;
                                                                let _153: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 58 {
                                                                    debug __field6 => _147;
                                                                    let _154: bool;
                                                                    let _156: bool;
                                                                    let _159: bool;
                                                                    let _160: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 62 {
                                                                        debug __field7 => _154;
                                                                        let _161: std::option::Option<config::Delimiter>;
                                                                        let _163: std::option::Option<config::Delimiter>;
                                                                        let _166: std::option::Option<config::Delimiter>;
                                                                        let _167: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 66 {
                                                                            debug __field8 => _161;
                                                                        }
                                                                        scope 67 {
                                                                            debug __field8 => _163;
                                                                        }
                                                                        scope 68 {
                                                                            debug __val => _166;
                                                                        }
                                                                        scope 69 {
                                                                            debug __err => _167;
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug __field7 => _156;
                                                                    }
                                                                    scope 64 {
                                                                        debug __val => _159;
                                                                    }
                                                                    scope 65 {
                                                                        debug __err => _160;
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug __field6 => _149;
                                                                }
                                                                scope 60 {
                                                                    debug __val => _152;
                                                                }
                                                                scope 61 {
                                                                    debug __err => _153;
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug __field5 => _142;
                                                            }
                                                            scope 56 {
                                                                debug __val => _145;
                                                            }
                                                            scope 57 {
                                                                debug __err => _146;
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug __field4 => _135;
                                                        }
                                                        scope 52 {
                                                            debug __val => _138;
                                                        }
                                                        scope 53 {
                                                            debug __err => _139;
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug __field3 => _128;
                                                    }
                                                    scope 48 {
                                                        debug __val => _131;
                                                    }
                                                    scope 49 {
                                                        debug __err => _132;
                                                    }
                                                }
                                                scope 43 {
                                                    debug __field2 => _121;
                                                }
                                                scope 44 {
                                                    debug __val => _124;
                                                }
                                                scope 45 {
                                                    debug __err => _125;
                                                }
                                            }
                                            scope 39 {
                                                debug __field1 => _114;
                                            }
                                            scope 40 {
                                                debug __val => _117;
                                            }
                                            scope 41 {
                                                debug __err => _118;
                                            }
                                        }
                                        scope 35 {
                                            debug __field0 => _107;
                                        }
                                        scope 36 {
                                            debug __val => _110;
                                        }
                                        scope 37 {
                                            debug __err => _111;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _179 = const false;
        _178 = const false;
        _179 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<bool>::None;
        _178 = const true;
        _7 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _8 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _9 = std::option::Option::<Delimiter>::None;
        _10 = std::option::Option::<bool>::None;
        _11 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _13 = &mut _2;
        _12 = <__A as MapAccess<'_>>::next_key::<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>(_13) -> [return: bb2, unwind: bb158];
    }

    bb2: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _16 = move ((_12 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb143;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _15 = move ((_12 as Ok).0: std::option::Option<cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _106 = discriminant(_3);
        switchInt(move _106) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb7: {
        _18 = move ((_15 as Some).0: cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::fmt::Args>::deserialize::__Field);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb9, 1: bb19, 2: bb27, 3: bb35, 4: bb43, 5: bb53, 6: bb61, 7: bb69, 8: bb77, otherwise: bb8];
    }

    bb8: {
        _102 = &mut _2;
        _101 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_102) -> [return: bb85, unwind: bb158];
    }

    bb9: {
        _21 = &_3;
        _20 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_21) -> [return: bb10, unwind: bb158];
    }

    bb10: {
        switchInt(move _20) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _22 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb158];
    }

    bb12: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb143;
    }

    bb13: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_25) -> [return: bb14, unwind: bb158];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb143;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::string::String>);
        _23 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _27);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _179 = const true;
        _3 = move _23;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _179 = const true;
        _3 = move _23;
        goto -> bb158;
    }

    bb19: {
        _30 = &_4;
        _29 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_30) -> [return: bb20, unwind: bb158];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _31 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_out_delimiter") -> [return: bb22, unwind: bb158];
    }

    bb22: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb143;
    }

    bb23: {
        _34 = &mut _2;
        _33 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_34) -> [return: bb24, unwind: bb158];
    }

    bb24: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _37 = move ((_33 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb143;
    }

    bb26: {
        _36 = ((_33 as Ok).0: std::option::Option<config::Delimiter>);
        _32 = std::option::Option::<std::option::Option<Delimiter>>::Some(_36);
        _4 = move _32;
        goto -> bb1;
    }

    bb27: {
        _39 = &_5;
        _38 = std::option::Option::<bool>::is_some(_39) -> [return: bb28, unwind: bb158];
    }

    bb28: {
        switchInt(move _38) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _40 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_crlf") -> [return: bb30, unwind: bb158];
    }

    bb30: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb143;
    }

    bb31: {
        _43 = &mut _2;
        _42 = <__A as MapAccess<'_>>::next_value::<bool>(_43) -> [return: bb32, unwind: bb158];
    }

    bb32: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _46 = move ((_42 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb143;
    }

    bb34: {
        _45 = ((_42 as Ok).0: bool);
        _41 = std::option::Option::<bool>::Some(_45);
        _5 = move _41;
        goto -> bb1;
    }

    bb35: {
        _48 = &_6;
        _47 = std::option::Option::<bool>::is_some(_48) -> [return: bb36, unwind: bb158];
    }

    bb36: {
        switchInt(move _47) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _49 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_ascii") -> [return: bb38, unwind: bb158];
    }

    bb38: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _49);
        goto -> bb143;
    }

    bb39: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<bool>(_52) -> [return: bb40, unwind: bb158];
    }

    bb40: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _55 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb143;
    }

    bb42: {
        _54 = ((_51 as Ok).0: bool);
        _50 = std::option::Option::<bool>::Some(_54);
        _6 = move _50;
        goto -> bb1;
    }

    bb43: {
        _57 = &_7;
        _56 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_57) -> [return: bb44, unwind: bb158];
    }

    bb44: {
        switchInt(move _56) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        _58 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb46, unwind: bb158];
    }

    bb46: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb143;
    }

    bb47: {
        _61 = &mut _2;
        _60 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_61) -> [return: bb48, unwind: bb158];
    }

    bb48: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb50, 1: bb49, otherwise: bb4];
    }

    bb49: {
        _64 = move ((_60 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb143;
    }

    bb50: {
        _63 = move ((_60 as Ok).0: std::option::Option<std::string::String>);
        _59 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _63);
        drop(_7) -> [return: bb51, unwind: bb52];
    }

    bb51: {
        _178 = const true;
        _7 = move _59;
        goto -> bb1;
    }

    bb52 (cleanup): {
        _178 = const true;
        _7 = move _59;
        goto -> bb158;
    }

    bb53: {
        _66 = &_8;
        _65 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_66) -> [return: bb54, unwind: bb158];
    }

    bb54: {
        switchInt(move _65) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _67 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb56, unwind: bb158];
    }

    bb56: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _67);
        goto -> bb143;
    }

    bb57: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_70) -> [return: bb58, unwind: bb158];
    }

    bb58: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _73 = move ((_69 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _73);
        goto -> bb143;
    }

    bb60: {
        _72 = ((_69 as Ok).0: std::option::Option<config::Delimiter>);
        _68 = std::option::Option::<std::option::Option<Delimiter>>::Some(_72);
        _8 = move _68;
        goto -> bb1;
    }

    bb61: {
        _75 = &_9;
        _74 = std::option::Option::<Delimiter>::is_some(_75) -> [return: bb62, unwind: bb158];
    }

    bb62: {
        switchInt(move _74) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _76 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_quote") -> [return: bb64, unwind: bb158];
    }

    bb64: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _76);
        goto -> bb143;
    }

    bb65: {
        _79 = &mut _2;
        _78 = <__A as MapAccess<'_>>::next_value::<Delimiter>(_79) -> [return: bb66, unwind: bb158];
    }

    bb66: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _82 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb143;
    }

    bb68: {
        _81 = ((_78 as Ok).0: config::Delimiter);
        _77 = std::option::Option::<Delimiter>::Some(_81);
        _9 = move _77;
        goto -> bb1;
    }

    bb69: {
        _84 = &_10;
        _83 = std::option::Option::<bool>::is_some(_84) -> [return: bb70, unwind: bb158];
    }

    bb70: {
        switchInt(move _83) -> [0: bb73, otherwise: bb71];
    }

    bb71: {
        _85 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_quote_always") -> [return: bb72, unwind: bb158];
    }

    bb72: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb143;
    }

    bb73: {
        _88 = &mut _2;
        _87 = <__A as MapAccess<'_>>::next_value::<bool>(_88) -> [return: bb74, unwind: bb158];
    }

    bb74: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb76, 1: bb75, otherwise: bb4];
    }

    bb75: {
        _91 = move ((_87 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb143;
    }

    bb76: {
        _90 = ((_87 as Ok).0: bool);
        _86 = std::option::Option::<bool>::Some(_90);
        _10 = move _86;
        goto -> bb1;
    }

    bb77: {
        _93 = &_11;
        _92 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_93) -> [return: bb78, unwind: bb158];
    }

    bb78: {
        switchInt(move _92) -> [0: bb81, otherwise: bb79];
    }

    bb79: {
        _94 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_escape") -> [return: bb80, unwind: bb158];
    }

    bb80: {
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb143;
    }

    bb81: {
        _97 = &mut _2;
        _96 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_97) -> [return: bb82, unwind: bb158];
    }

    bb82: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb84, 1: bb83, otherwise: bb4];
    }

    bb83: {
        _100 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _100);
        goto -> bb143;
    }

    bb84: {
        _99 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _95 = std::option::Option::<std::option::Option<Delimiter>>::Some(_99);
        _11 = move _95;
        goto -> bb1;
    }

    bb85: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb1, 1: bb86, otherwise: bb4];
    }

    bb86: {
        _104 = move ((_101 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb143;
    }

    bb87: {
        _108 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb89, unwind: bb158];
    }

    bb88: {
        _179 = const false;
        _107 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _105 = move _107;
        goto -> bb92;
    }

    bb89: {
        _109 = discriminant(_108);
        switchInt(move _109) -> [0: bb91, 1: bb90, otherwise: bb4];
    }

    bb90: {
        _111 = move ((_108 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _111);
        goto -> bb143;
    }

    bb91: {
        _110 = move ((_108 as Ok).0: std::option::Option<std::string::String>);
        _105 = move _110;
        goto -> bb92;
    }

    bb92: {
        _113 = discriminant(_4);
        switchInt(move _113) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        _115 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_out_delimiter") -> [return: bb95, unwind: bb146];
    }

    bb94: {
        _114 = ((_4 as Some).0: std::option::Option<config::Delimiter>);
        _112 = _114;
        goto -> bb98;
    }

    bb95: {
        _116 = discriminant(_115);
        switchInt(move _116) -> [0: bb97, 1: bb96, otherwise: bb4];
    }

    bb96: {
        _118 = move ((_115 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _118);
        goto -> bb142;
    }

    bb97: {
        _117 = ((_115 as Ok).0: std::option::Option<config::Delimiter>);
        _112 = _117;
        goto -> bb98;
    }

    bb98: {
        _120 = discriminant(_5);
        switchInt(move _120) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        _122 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_crlf") -> [return: bb101, unwind: bb146];
    }

    bb100: {
        _121 = ((_5 as Some).0: bool);
        _119 = _121;
        goto -> bb104;
    }

    bb101: {
        _123 = discriminant(_122);
        switchInt(move _123) -> [0: bb103, 1: bb102, otherwise: bb4];
    }

    bb102: {
        _125 = move ((_122 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb142;
    }

    bb103: {
        _124 = ((_122 as Ok).0: bool);
        _119 = _124;
        goto -> bb104;
    }

    bb104: {
        _127 = discriminant(_6);
        switchInt(move _127) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        _129 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_ascii") -> [return: bb107, unwind: bb146];
    }

    bb106: {
        _128 = ((_6 as Some).0: bool);
        _126 = _128;
        goto -> bb110;
    }

    bb107: {
        _130 = discriminant(_129);
        switchInt(move _130) -> [0: bb109, 1: bb108, otherwise: bb4];
    }

    bb108: {
        _132 = move ((_129 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _132);
        goto -> bb142;
    }

    bb109: {
        _131 = ((_129 as Ok).0: bool);
        _126 = _131;
        goto -> bb110;
    }

    bb110: {
        _134 = discriminant(_7);
        switchInt(move _134) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        _136 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb113, unwind: bb146];
    }

    bb112: {
        _178 = const false;
        _135 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _133 = move _135;
        goto -> bb116;
    }

    bb113: {
        _137 = discriminant(_136);
        switchInt(move _137) -> [0: bb115, 1: bb114, otherwise: bb4];
    }

    bb114: {
        _139 = move ((_136 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _139);
        goto -> bb142;
    }

    bb115: {
        _138 = move ((_136 as Ok).0: std::option::Option<std::string::String>);
        _133 = move _138;
        goto -> bb116;
    }

    bb116: {
        _141 = discriminant(_8);
        switchInt(move _141) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        _143 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb119, unwind: bb145];
    }

    bb118: {
        _142 = ((_8 as Some).0: std::option::Option<config::Delimiter>);
        _140 = _142;
        goto -> bb122;
    }

    bb119: {
        _144 = discriminant(_143);
        switchInt(move _144) -> [0: bb121, 1: bb120, otherwise: bb4];
    }

    bb120: {
        _146 = move ((_143 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _146);
        goto -> bb141;
    }

    bb121: {
        _145 = ((_143 as Ok).0: std::option::Option<config::Delimiter>);
        _140 = _145;
        goto -> bb122;
    }

    bb122: {
        _148 = discriminant(_9);
        switchInt(move _148) -> [0: bb123, 1: bb124, otherwise: bb4];
    }

    bb123: {
        _150 = serde::private::de::missing_field::<'_, Delimiter, <__A as MapAccess<'_>>::Error>(const "flag_quote") -> [return: bb125, unwind: bb145];
    }

    bb124: {
        _149 = ((_9 as Some).0: config::Delimiter);
        _147 = _149;
        goto -> bb128;
    }

    bb125: {
        _151 = discriminant(_150);
        switchInt(move _151) -> [0: bb127, 1: bb126, otherwise: bb4];
    }

    bb126: {
        _153 = move ((_150 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _153);
        goto -> bb141;
    }

    bb127: {
        _152 = ((_150 as Ok).0: config::Delimiter);
        _147 = _152;
        goto -> bb128;
    }

    bb128: {
        _155 = discriminant(_10);
        switchInt(move _155) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        _157 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_quote_always") -> [return: bb131, unwind: bb145];
    }

    bb130: {
        _156 = ((_10 as Some).0: bool);
        _154 = _156;
        goto -> bb134;
    }

    bb131: {
        _158 = discriminant(_157);
        switchInt(move _158) -> [0: bb133, 1: bb132, otherwise: bb4];
    }

    bb132: {
        _160 = move ((_157 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _160);
        goto -> bb141;
    }

    bb133: {
        _159 = ((_157 as Ok).0: bool);
        _154 = _159;
        goto -> bb134;
    }

    bb134: {
        _162 = discriminant(_11);
        switchInt(move _162) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        _164 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_escape") -> [return: bb137, unwind: bb145];
    }

    bb136: {
        _163 = ((_11 as Some).0: std::option::Option<config::Delimiter>);
        _161 = _163;
        goto -> bb140;
    }

    bb137: {
        _165 = discriminant(_164);
        switchInt(move _165) -> [0: bb139, 1: bb138, otherwise: bb4];
    }

    bb138: {
        _167 = move ((_164 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Err(move _167);
        goto -> bb141;
    }

    bb139: {
        _166 = ((_164 as Ok).0: std::option::Option<config::Delimiter>);
        _161 = _166;
        goto -> bb140;
    }

    bb140: {
        _169 = move _105;
        _170 = _112;
        _171 = _119;
        _172 = _126;
        _173 = move _133;
        _174 = _140;
        _175 = _147;
        _176 = _154;
        _177 = _161;
        _168 = cmd::fmt::Args { arg_input: move _169, flag_out_delimiter: move _170, flag_crlf: move _171, flag_ascii: move _172, flag_output: move _173, flag_delimiter: move _174, flag_quote: move _175, flag_quote_always: move _176, flag_escape: move _177 };
        _0 = Result::<cmd::fmt::Args, <__A as MapAccess<'_>>::Error>::Ok(move _168);
        _178 = const false;
        _179 = const false;
        drop(_2) -> [return: bb144, unwind continue];
    }

    bb141: {
        drop(_133) -> [return: bb142, unwind: bb146];
    }

    bb142: {
        drop(_105) -> [return: bb143, unwind: bb158];
    }

    bb143: {
        _180 = discriminant(_7);
        switchInt(move _180) -> [1: bb151, otherwise: bb150];
    }

    bb144: {
        return;
    }

    bb145 (cleanup): {
        drop(_133) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_105) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        _183 = discriminant(_3);
        switchInt(move _183) -> [1: bb159, otherwise: bb148];
    }

    bb148 (cleanup): {
        drop(_2) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        resume;
    }

    bb150: {
        _178 = const false;
        _181 = discriminant(_3);
        switchInt(move _181) -> [1: bb154, otherwise: bb153];
    }

    bb151: {
        switchInt(_178) -> [0: bb150, otherwise: bb152];
    }

    bb152: {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb150, unwind: bb147];
    }

    bb153: {
        _179 = const false;
        drop(_2) -> [return: bb144, unwind continue];
    }

    bb154: {
        switchInt(_179) -> [0: bb153, otherwise: bb155];
    }

    bb155: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb153, unwind: bb148];
    }

    bb156 (cleanup): {
        switchInt(_178) -> [0: bb147, otherwise: bb157];
    }

    bb157 (cleanup): {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        _182 = discriminant(_7);
        switchInt(move _182) -> [1: bb156, otherwise: bb147];
    }

    bb159 (cleanup): {
        switchInt(_179) -> [0: bb148, otherwise: bb160];
    }

    bb160 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb148, unwind terminate(cleanup)];
    }
}

const cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::fmt::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/fmt.rs:36:10: 36:21>::deserialize::FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "arg_input", const "flag_out_delimiter", const "flag_crlf", const "flag_ascii", const "flag_output", const "flag_delimiter", const "flag_quote", const "flag_quote_always", const "flag_escape"];
        _0 = &_1;
        return;
    }
}

fn cmd::fmt::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::fmt::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::fmt::Args>;
    let mut _4: std::result::Result<cmd::fmt::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::fmt::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _15: config::Config;
    let mut _16: config::Config;
    let _17: &std::option::Option<std::string::String>;
    let mut _18: std::option::Option<config::Delimiter>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: config::Config;
    let mut _22: config::Config;
    let mut _23: config::Config;
    let mut _24: std::option::Option<config::Delimiter>;
    let mut _25: config::Delimiter;
    let mut _26: csv::Terminator;
    let mut _27: bool;
    let mut _28: config::Config;
    let mut _29: config::Config;
    let mut _30: csv::QuoteStyle;
    let mut _31: isize;
    let mut _33: config::Config;
    let mut _34: config::Config;
    let mut _35: config::Config;
    let mut _36: std::option::Option<u8>;
    let mut _37: u8;
    let mut _38: config::Config;
    let mut _39: config::Config;
    let mut _40: u8;
    let mut _41: config::Delimiter;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _44: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _45: &config::Config;
    let mut _46: isize;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _51: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _52: &config::Config;
    let mut _53: isize;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _58: std::result::Result<bool, csv::Error>;
    let mut _59: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _60: &mut csv::ByteRecord;
    let mut _61: isize;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _65: std::result::Result<(), csv::Error>;
    let mut _66: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _67: &csv::ByteRecord;
    let mut _68: isize;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _71: std::result::Result<(), std::io::Error>;
    let mut _72: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _73: isize;
    let mut _75: &str;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _14: config::Config;
            scope 7 {
                debug wconfig => _14;
                let mut _42: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _47: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _48: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 8 {
                    debug escape => _32;
                    let _32: config::Delimiter;
                }
                scope 9 {
                    debug rdr => _42;
                    let mut _49: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _55: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    scope 14 {
                        debug wtr => _49;
                        let mut _56: csv::ByteRecord;
                        scope 19 {
                            debug r => _56;
                            let _62: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _63: bool;
                            let _69: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _74: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 20 {
                                debug residual => _62;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _63;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug residual => _69;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => const ();
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug residual => _74;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => const ();
                                scope 31 {
                                }
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _54;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _55;
                        scope 18 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _47;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _48;
                    scope 13 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _5 = const {alloc9: &&str};
        _75 = deref_copy (*_5);
        _4 = get_args::<cmd::fmt::Args>(_75, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::fmt::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::fmt::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb62];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb57, unwind continue];
    }

    bb6: {
        _13 = (_2.5: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        _9 = Config::no_headers(move _10, const true) -> [return: bb8, unwind: bb62];
    }

    bb8: {
        _17 = &(_2.4: std::option::Option<std::string::String>);
        _16 = Config::new(_17) -> [return: bb9, unwind: bb61];
    }

    bb9: {
        _18 = (_2.1: std::option::Option<config::Delimiter>);
        _15 = Config::delimiter(move _16, move _18) -> [return: bb10, unwind: bb61];
    }

    bb10: {
        _19 = (_2.2: bool);
        _14 = Config::crlf(move _15, move _19) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _78 = const true;
        _20 = (_2.3: bool);
        switchInt(move _20) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _78 = const false;
        _23 = move _14;
        _25 = Delimiter(const 31_u8);
        _24 = std::option::Option::<Delimiter>::Some(move _25);
        _22 = Config::delimiter(move _23, move _24) -> [return: bb13, unwind: bb71];
    }

    bb13: {
        _26 = csv::Terminator::Any(const 30_u8);
        _21 = Config::terminator(move _22, move _26) -> [return: bb14, unwind: bb71];
    }

    bb14: {
        _78 = const true;
        _14 = move _21;
        goto -> bb15;
    }

    bb15: {
        _27 = (_2.7: bool);
        switchInt(move _27) -> [0: bb18, otherwise: bb16];
    }

    bb16: {
        _78 = const false;
        _29 = move _14;
        _30 = Always;
        _28 = Config::quote_style(move _29, move _30) -> [return: bb17, unwind: bb71];
    }

    bb17: {
        _78 = const true;
        _14 = move _28;
        goto -> bb18;
    }

    bb18: {
        _31 = discriminant((_2.8: std::option::Option<config::Delimiter>));
        switchInt(move _31) -> [1: bb19, otherwise: bb23];
    }

    bb19: {
        _32 = (((_2.8: std::option::Option<config::Delimiter>) as Some).0: config::Delimiter);
        _78 = const false;
        _77 = const true;
        _35 = move _14;
        _37 = Delimiter::as_byte(_32) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        _36 = std::option::Option::<u8>::Some(move _37);
        _77 = const false;
        _34 = Config::escape(move _35, move _36) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        _77 = const false;
        _33 = Config::double_quote(move _34, const false) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        _78 = const true;
        _14 = move _33;
        goto -> bb23;
    }

    bb23: {
        _78 = const false;
        _76 = const true;
        _39 = move _14;
        _41 = (_2.6: config::Delimiter);
        _40 = Delimiter::as_byte(move _41) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _76 = const false;
        _38 = Config::quote(move _39, move _40) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _76 = const false;
        _78 = const true;
        _14 = move _38;
        _45 = &_9;
        _44 = Config::reader(move _45) -> [return: bb26, unwind: bb71];
    }

    bb26: {
        _43 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _44) -> [return: bb27, unwind: bb71];
    }

    bb27: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        _48 = move ((_43 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _42 = move _48;
        _52 = &_14;
        _51 = Config::writer(move _52) -> [return: bb30, unwind: bb60];
    }

    bb29: {
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _47) -> [return: bb72, unwind: bb71];
    }

    bb30: {
        _50 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _51) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _55 = move ((_50 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _49 = move _55;
        _56 = ByteRecord::new() -> [return: bb73, unwind: bb59];
    }

    bb33: {
        _54 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _54) -> [return: bb74, unwind: bb60];
    }

    bb34: {
        _59 = &mut _42;
        _60 = &mut _56;
        _58 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _59, _60) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _57 = <Result<bool, csv::Error> as Try>::branch(move _58) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _63 = ((_57 as Continue).0: bool);
        switchInt(_63) -> [0: bb65, otherwise: bb64];
    }

    bb38: {
        _62 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _62) -> [return: bb75, unwind: bb58];
    }

    bb39: {
        _64 = <Result<(), csv::Error> as Try>::branch(move _65) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb34, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _69 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _69) -> [return: bb76, unwind: bb58];
    }

    bb42: {
        _70 = <Result<(), std::io::Error> as Try>::branch(move _71) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_56) -> [return: bb46, unwind: bb59];
    }

    bb45: {
        _74 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb77, unwind: bb58];
    }

    bb46: {
        drop(_49) -> [return: bb47, unwind: bb60];
    }

    bb47: {
        drop(_42) -> [return: bb48, unwind: bb71];
    }

    bb48: {
        drop(_14) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        _78 = const false;
        drop(_9) -> [return: bb50, unwind: bb62];
    }

    bb50: {
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb51: {
        drop(_56) -> [return: bb52, unwind: bb59];
    }

    bb52: {
        drop(_49) -> [return: bb53, unwind: bb60];
    }

    bb53: {
        drop(_42) -> [return: bb54, unwind: bb71];
    }

    bb54: {
        drop(_14) -> [return: bb55, unwind: bb61];
    }

    bb55: {
        _78 = const false;
        drop(_9) -> [return: bb56, unwind: bb62];
    }

    bb56: {
        drop(_2) -> [return: bb57, unwind continue];
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_56) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_49) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_42) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_9) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_2) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64: {
        _66 = &mut _49;
        _67 = &_56;
        _65 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _66, _67) -> [return: bb39, unwind: bb58];
    }

    bb65: {
        _72 = &mut _49;
        _71 = Writer::<Box<dyn std::io::Write>>::flush(move _72) -> [return: bb42, unwind: bb58];
    }

    bb66 (cleanup): {
        drop(_39) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_76) -> [0: bb71, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_35) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_77) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_14) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_78) -> [0: bb61, otherwise: bb70];
    }

    bb72: {
        goto -> bb54;
    }

    bb73: {
        goto -> bb34;
    }

    bb74: {
        goto -> bb53;
    }

    bb75: {
        goto -> bb51;
    }

    bb76: {
        goto -> bb51;
    }

    bb77: {
        goto -> bb51;
    }
}

alloc9 (static: cmd::fmt::USAGE, size: 16, align: 8) {
    ╾────alloc433<imm>────╼ de 04 00 00 00 00 00 00 │ ╾──────╼........
}

alloc433 (size: 1246, align: 1) {
    0x000 │ 0a 46 6f 72 6d 61 74 73 20 43 53 56 20 64 61 74 │ .Formats CSV dat
    0x010 │ 61 20 77 69 74 68 20 61 20 63 75 73 74 6f 6d 20 │ a with a custom 
    0x020 │ 64 65 6c 69 6d 69 74 65 72 20 6f 72 20 43 52 4c │ delimiter or CRL
    0x030 │ 46 20 6c 69 6e 65 20 65 6e 64 69 6e 67 73 2e 0a │ F line endings..
    0x040 │ 0a 47 65 6e 65 72 61 6c 6c 79 2c 20 61 6c 6c 20 │ .Generally, all 
    0x050 │ 63 6f 6d 6d 61 6e 64 73 20 69 6e 20 78 73 76 20 │ commands in xsv 
    0x060 │ 6f 75 74 70 75 74 20 43 53 56 20 64 61 74 61 20 │ output CSV data 
    0x070 │ 69 6e 20 61 20 64 65 66 61 75 6c 74 20 66 6f 72 │ in a default for
    0x080 │ 6d 61 74 2c 20 77 68 69 63 68 20 69 73 0a 74 68 │ mat, which is.th
    0x090 │ 65 20 73 61 6d 65 20 61 73 20 74 68 65 20 64 65 │ e same as the de
    0x0a0 │ 66 61 75 6c 74 20 66 6f 72 6d 61 74 20 66 6f 72 │ fault format for
    0x0b0 │ 20 72 65 61 64 69 6e 67 20 43 53 56 20 64 61 74 │  reading CSV dat
    0x0c0 │ 61 2e 20 54 68 69 73 20 6d 61 6b 65 73 20 69 74 │ a. This makes it
    0x0d0 │ 20 65 61 73 79 20 74 6f 0a 70 69 70 65 20 6d 75 │  easy to.pipe mu
    0x0e0 │ 6c 74 69 70 6c 65 20 78 73 76 20 63 6f 6d 6d 61 │ ltiple xsv comma
    0x0f0 │ 6e 64 73 20 74 6f 67 65 74 68 65 72 2e 20 48 6f │ nds together. Ho
    0x100 │ 77 65 76 65 72 2c 20 79 6f 75 20 6d 61 79 20 77 │ wever, you may w
    0x110 │ 61 6e 74 20 74 68 65 20 66 69 6e 61 6c 20 72 65 │ ant the final re
    0x120 │ 73 75 6c 74 20 74 6f 0a 68 61 76 65 20 61 20 73 │ sult to.have a s
    0x130 │ 70 65 63 69 66 69 63 20 64 65 6c 69 6d 69 74 65 │ pecific delimite
    0x140 │ 72 20 6f 72 20 72 65 63 6f 72 64 20 73 65 70 61 │ r or record sepa
    0x150 │ 72 61 74 6f 72 2c 20 61 6e 64 20 74 68 69 73 20 │ rator, and this 
    0x160 │ 69 73 20 77 68 65 72 65 20 27 78 73 76 20 66 6d │ is where 'xsv fm
    0x170 │ 74 27 20 69 73 0a 75 73 65 66 75 6c 2e 0a 0a 55 │ t' is.useful...U
    0x180 │ 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 66 6d │ sage:.    xsv fm
    0x190 │ 74 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b 3c 69 6e │ t [options] [<in
    0x1a0 │ 70 75 74 3e 5d 0a 0a 66 6d 74 20 6f 70 74 69 6f │ put>]..fmt optio
    0x1b0 │ 6e 73 3a 0a 20 20 20 20 2d 74 2c 20 2d 2d 6f 75 │ ns:.    -t, --ou
    0x1c0 │ 74 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 │ t-delimiter <arg
    0x1d0 │ 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c │ >  The field del
    0x1e0 │ 69 6d 69 74 65 72 20 66 6f 72 20 77 72 69 74 69 │ imiter for writi
    0x1f0 │ 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 │ ng CSV data..   
    0x200 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x210 │ 20 20 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 │             [def
    0x220 │ 61 75 6c 74 3a 20 2c 5d 0a 20 20 20 20 2d 2d 63 │ ault: ,].    --c
    0x230 │ 72 6c 66 20 20 20 20 20 20 20 20 20 20 20 20 20 │ rlf             
    0x240 │ 20 20 20 20 20 20 20 20 55 73 65 20 27 5c 72 5c │         Use '\r\
    0x250 │ 6e 27 20 6c 69 6e 65 20 65 6e 64 69 6e 67 73 20 │ n' line endings 
    0x260 │ 69 6e 20 74 68 65 20 6f 75 74 70 75 74 2e 0a 20 │ in the output.. 
    0x270 │ 20 20 20 2d 2d 61 73 63 69 69 20 20 20 20 20 20 │    --ascii      
    0x280 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 73 │               Us
    0x290 │ 65 20 41 53 43 49 49 20 66 69 65 6c 64 20 61 6e │ e ASCII field an
    0x2a0 │ 64 20 72 65 63 6f 72 64 20 73 65 70 61 72 61 74 │ d record separat
    0x2b0 │ 6f 72 73 2e 0a 20 20 20 20 2d 2d 71 75 6f 74 65 │ ors..    --quote
    0x2c0 │ 20 3c 61 72 67 3e 20 20 20 20 20 20 20 20 20 20 │  <arg>          
    0x2d0 │ 20 20 20 20 54 68 65 20 71 75 6f 74 65 20 63 68 │     The quote ch
    0x2e0 │ 61 72 61 63 74 65 72 20 74 6f 20 75 73 65 2e 20 │ aracter to use. 
    0x2f0 │ 5b 64 65 66 61 75 6c 74 3a 20 22 5d 0a 20 20 20 │ [default: "].   
    0x300 │ 20 2d 2d 71 75 6f 74 65 2d 61 6c 77 61 79 73 20 │  --quote-always 
    0x310 │ 20 20 20 20 20 20 20 20 20 20 20 20 50 75 74 20 │             Put 
    0x320 │ 71 75 6f 74 65 73 20 61 72 6f 75 6e 64 20 65 76 │ quotes around ev
    0x330 │ 65 72 79 20 76 61 6c 75 65 2e 0a 20 20 20 20 2d │ ery value..    -
    0x340 │ 2d 65 73 63 61 70 65 20 3c 61 72 67 3e 20 20 20 │ -escape <arg>   
    0x350 │ 20 20 20 20 20 20 20 20 20 20 54 68 65 20 65 73 │           The es
    0x360 │ 63 61 70 65 20 63 68 61 72 61 63 74 65 72 20 74 │ cape character t
    0x370 │ 6f 20 75 73 65 2e 20 57 68 65 6e 20 6e 6f 74 20 │ o use. When not 
    0x380 │ 73 70 65 63 69 66 69 65 64 2c 0a 20 20 20 20 20 │ specified,.     
    0x390 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3a0 │ 20 20 20 20 20 20 20 20 20 20 71 75 6f 74 65 73 │           quotes
    0x3b0 │ 20 61 72 65 20 65 73 63 61 70 65 64 20 62 79 20 │  are escaped by 
    0x3c0 │ 64 6f 75 62 6c 69 6e 67 20 74 68 65 6d 2e 0a 0a │ doubling them...
    0x3d0 │ 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a │ Common options:.
    0x3e0 │ 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 │     -h, --help  
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 44 69 73 70 6c │            Displ
    0x400 │ 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 65 0a │ ay this message.
    0x410 │ 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 │     -o, --output
    0x420 │ 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 74 65 │  <file>    Write
    0x430 │ 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 6c 65 │  output to <file
    0x440 │ 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 74 64 │ > instead of std
    0x450 │ 6f 75 74 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 │ out..    -d, --d
    0x460 │ 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 │ elimiter <arg>  
    0x470 │ 54 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 │ The field delimi
    0x480 │ 74 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 │ ter for reading 
    0x490 │ 43 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 │ CSV data..      
    0x4a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x4b0 │ 20 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 │      Must be a s
    0x4c0 │ 69 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e │ ingle character.
    0x4d0 │ 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a       │  (default: ,).
}

static frequency::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nCompute a frequency table on CSV data.\n\nThe frequency table is formatted as CSV data:\n\n    field,value,count\n\nBy default, there is a row for the N most frequent values for each field in the\ndata. The order and number of values can be tweaked with --asc and --limit,\nrespectively.\n\nSince this computes an exact frequency table, memory proportional to the\ncardinality of each column is required.\n\nUsage:\n    xsv frequency [options] [<input>]\n\nfrequency options:\n    -s, --select <arg>     Select a subset of columns to compute frequencies\n                           for. See 'xsv select --help' for the format\n                           details. This is provided here because piping 'xsv\n                           select' into 'xsv frequency' will disable the use\n                           of indexing.\n    -l, --limit <arg>      Limit the frequency table to the N most common\n                           items. Set to '0' to disable a limit.\n                           [default: 10]\n    -a, --asc              Sort the frequency tables in ascending order by\n                           count. The default is descending order.\n    --no-nulls             Don't include NULLs in the frequency table.\n    -j, --jobs <arg>       The number of jobs to run in parallel.\n                           This works better when the given CSV data has\n                           an index already created. Note that a file handle\n                           is opened for each job.\n                           When set to '0', the number of jobs is set to the\n                           number of CPUs detected.\n                           [default: 0]\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will NOT be included\n                           in the frequency table. Additionally, the 'field'\n                           column will be 1-based indices instead of header\n                           names.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:63:10: 63:15>::clone(_1: &frequency::Args) -> frequency::Args {
    debug self => _1;
    let mut _0: cmd::frequency::Args;
    let mut _2: std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: select::SelectColumns;
    let _5: &select::SelectColumns;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: bool;
    let _11: &bool;
    let mut _12: usize;
    let _13: &usize;
    let mut _14: std::option::Option<std::string::String>;
    let _15: &std::option::Option<std::string::String>;
    let mut _16: bool;
    let _17: &bool;
    let mut _18: std::option::Option<config::Delimiter>;
    let _19: &std::option::Option<config::Delimiter>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::string::String>);
        _2 = <std::option::Option<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: select::SelectColumns);
        _4 = <SelectColumns as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: bool);
        _8 = (*_9);
        _11 = &((*_1).4: bool);
        _10 = (*_11);
        _13 = &((*_1).5: usize);
        _12 = (*_13);
        _15 = &((*_1).6: std::option::Option<std::string::String>);
        _14 = <std::option::Option<std::string::String> as Clone>::clone(_15) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _17 = &((*_1).7: bool);
        _16 = (*_17);
        _19 = &((*_1).8: std::option::Option<config::Delimiter>);
        _18 = <std::option::Option<Delimiter> as Clone>::clone(_19) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = frequency::Args { arg_input: move _2, flag_select: move _4, flag_limit: move _6, flag_asc: move _8, flag_no_nulls: move _10, flag_jobs: move _12, flag_output: move _14, flag_no_headers: move _16, flag_delimiter: move _18 };
        return;
    }

    bb5 (cleanup): {
        drop(_14) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

const frequency::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize(_1: __D) -> Result<frequency::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::frequency::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::expecting(_1: &frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_u64(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _4: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _5: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _6: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _7: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _8: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _9: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _10: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _11: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _12: __E;
    let mut _13: serde::de::Unexpected<'_>;
    let mut _14: &dyn serde::de::Expected;
    let mut _15: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, otherwise: bb1];
    }

    bb1: {
        _13 = Unexpected::<'_>::Unsigned(_2);
        _15 = const _;
        _14 = _15 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _12 = <__E as serde::de::Error>::invalid_value(move _13, move _14) -> [return: bb11, unwind continue];
    }

    bb2: {
        _3 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb12;
    }

    bb3: {
        _4 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb12;
    }

    bb4: {
        _5 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb12;
    }

    bb5: {
        _6 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb6: {
        _7 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb7: {
        _8 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb12;
    }

    bb8: {
        _9 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb12;
    }

    bb9: {
        _10 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb12;
    }

    bb10: {
        _11 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Err(move _12);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 9";
        _0 = &_1;
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_str(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _13: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _14: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _15: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _16: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _17: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _18: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _19: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _20: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _21: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;

    bb0: {
        _11 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb27, unwind continue];
    }

    bb1: {
        _12 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb28;
    }

    bb2: {
        _10 = <str as PartialEq>::eq(_2, const "flag_select") -> [return: bb26, unwind continue];
    }

    bb3: {
        _13 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb28;
    }

    bb4: {
        _9 = <str as PartialEq>::eq(_2, const "flag_limit") -> [return: bb25, unwind continue];
    }

    bb5: {
        _14 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb28;
    }

    bb6: {
        _8 = <str as PartialEq>::eq(_2, const "flag_asc") -> [return: bb24, unwind continue];
    }

    bb7: {
        _15 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb28;
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "flag_no_nulls") -> [return: bb23, unwind continue];
    }

    bb9: {
        _16 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb28;
    }

    bb10: {
        _6 = <str as PartialEq>::eq(_2, const "flag_jobs") -> [return: bb22, unwind continue];
    }

    bb11: {
        _17 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb28;
    }

    bb12: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb21, unwind continue];
    }

    bb13: {
        _18 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb28;
    }

    bb14: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb20, unwind continue];
    }

    bb15: {
        _19 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb28;
    }

    bb16: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb19, unwind continue];
    }

    bb17: {
        _20 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb28;
    }

    bb18: {
        _21 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__ignore;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb28;
    }

    bb19: {
        switchInt(move _3) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _4) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _5) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _6) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_bytes(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _25: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _26: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _27: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _28: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _29: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _30: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _31: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _32: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
    let mut _33: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;

    bb0: {
        _21 = Len((*_2));
        _22 = const 9_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb101, otherwise: bb10];
    }

    bb10: {
        _33 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__ignore;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb110;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [106: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [111: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [98: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [115: bb106, otherwise: bb10];
    }

    bb19: {
        _18 = Len((*_2));
        _19 = const 11_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb36, otherwise: bb20];
    }

    bb20: {
        switchInt((*_2)[0 of 11]) -> [102: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[1 of 11]) -> [108: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[2 of 11]) -> [97: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[3 of 11]) -> [103: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[4 of 11]) -> [95: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[5 of 11]) -> [115: bb26, 111: bb31, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[6 of 11]) -> [101: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[7 of 11]) -> [108: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[8 of 11]) -> [101: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[9 of 11]) -> [99: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[10 of 11]) -> [116: bb102, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[6 of 11]) -> [117: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[7 of 11]) -> [116: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[8 of 11]) -> [112: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[9 of 11]) -> [117: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[10 of 11]) -> [116: bb107, otherwise: bb10];
    }

    bb36: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb47, otherwise: bb37];
    }

    bb37: {
        switchInt((*_2)[0 of 10]) -> [102: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[1 of 10]) -> [108: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[2 of 10]) -> [97: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[3 of 10]) -> [103: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[4 of 10]) -> [95: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[5 of 10]) -> [108: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[6 of 10]) -> [105: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[7 of 10]) -> [109: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[8 of 10]) -> [105: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[9 of 10]) -> [116: bb103, otherwise: bb10];
    }

    bb47: {
        _12 = Len((*_2));
        _13 = const 8_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb56, otherwise: bb48];
    }

    bb48: {
        switchInt((*_2)[0 of 8]) -> [102: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[1 of 8]) -> [108: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[2 of 8]) -> [97: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[3 of 8]) -> [103: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[4 of 8]) -> [95: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[5 of 8]) -> [97: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[6 of 8]) -> [115: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[7 of 8]) -> [99: bb104, otherwise: bb10];
    }

    bb56: {
        _9 = Len((*_2));
        _10 = const 13_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb70, otherwise: bb57];
    }

    bb57: {
        switchInt((*_2)[0 of 13]) -> [102: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[1 of 13]) -> [108: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[2 of 13]) -> [97: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[3 of 13]) -> [103: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[4 of 13]) -> [95: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[5 of 13]) -> [110: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[6 of 13]) -> [111: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[7 of 13]) -> [95: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[8 of 13]) -> [110: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[9 of 13]) -> [117: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[10 of 13]) -> [108: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[11 of 13]) -> [108: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[12 of 13]) -> [115: bb105, otherwise: bb10];
    }

    bb70: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb86, otherwise: bb71];
    }

    bb71: {
        switchInt((*_2)[0 of 15]) -> [102: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[1 of 15]) -> [108: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[2 of 15]) -> [97: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[3 of 15]) -> [103: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[4 of 15]) -> [95: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[5 of 15]) -> [110: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[6 of 15]) -> [111: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[7 of 15]) -> [95: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[8 of 15]) -> [104: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[9 of 15]) -> [101: bb81, otherwise: bb10];
    }

    bb81: {
        switchInt((*_2)[10 of 15]) -> [97: bb82, otherwise: bb10];
    }

    bb82: {
        switchInt((*_2)[11 of 15]) -> [100: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[12 of 15]) -> [101: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[13 of 15]) -> [114: bb85, otherwise: bb10];
    }

    bb85: {
        switchInt((*_2)[14 of 15]) -> [115: bb108, otherwise: bb10];
    }

    bb86: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb87];
    }

    bb87: {
        switchInt((*_2)[0 of 14]) -> [102: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[1 of 14]) -> [108: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[2 of 14]) -> [97: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[3 of 14]) -> [103: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[4 of 14]) -> [95: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[5 of 14]) -> [100: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[6 of 14]) -> [101: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[7 of 14]) -> [108: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[8 of 14]) -> [105: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[9 of 14]) -> [109: bb97, otherwise: bb10];
    }

    bb97: {
        switchInt((*_2)[10 of 14]) -> [105: bb98, otherwise: bb10];
    }

    bb98: {
        switchInt((*_2)[11 of 14]) -> [116: bb99, otherwise: bb10];
    }

    bb99: {
        switchInt((*_2)[12 of 14]) -> [101: bb100, otherwise: bb10];
    }

    bb100: {
        switchInt((*_2)[13 of 14]) -> [114: bb109, otherwise: bb10];
    }

    bb101: {
        _24 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field0;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb110;
    }

    bb102: {
        _25 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field1;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb110;
    }

    bb103: {
        _26 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field2;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb110;
    }

    bb104: {
        _27 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field3;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb110;
    }

    bb105: {
        _28 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field4;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb110;
    }

    bb106: {
        _29 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field5;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb110;
    }

    bb107: {
        _30 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field6;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb110;
    }

    bb108: {
        _31 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field7;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb110;
    }

    bb109: {
        _32 = frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field::__field8;
        _0 = Result::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb110;
    }

    bb110: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize(_1: __D) -> Result<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor>(move _1, const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::expecting(_1: &frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<frequency::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::frequency::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn serde::de::Expected;
    let mut _69: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: isize;
    let mut _76: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _77: &dyn serde::de::Expected;
    let mut _78: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: isize;
    let mut _85: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _86: &dyn serde::de::Expected;
    let mut _87: cmd::frequency::Args;
    let mut _88: std::option::Option<std::string::String>;
    let mut _89: select::SelectColumns;
    let mut _90: std::option::Option<std::string::String>;
    let mut _91: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: select::SelectColumns;
        let _17: std::option::Option<select::SelectColumns>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: select::SelectColumns;
        let mut _92: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<usize>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: usize;
            let mut _93: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _94: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<bool>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: bool;
                    let mut _95: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<usize>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: usize;
                        let mut _96: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _59: std::option::Option<std::string::String>;
                            let _63: std::option::Option<std::option::Option<std::string::String>>;
                            let _64: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _66: std::option::Option<std::string::String>;
                            let mut _97: &&str;
                            scope 25 {
                                debug __field6 => _59;
                                let _72: std::option::Option<bool>;
                                let _73: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _75: bool;
                                let mut _98: &&str;
                                scope 29 {
                                    debug __field7 => _75;
                                    let _81: std::option::Option<std::option::Option<config::Delimiter>>;
                                    let _82: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _84: std::option::Option<config::Delimiter>;
                                    let mut _99: &&str;
                                    scope 33 {
                                        debug __field8 => _84;
                                    }
                                    scope 34 {
                                        debug __val => _81;
                                    }
                                    scope 35 {
                                        debug __err => _82;
                                    }
                                    scope 36 {
                                        debug __value => _84;
                                    }
                                }
                                scope 30 {
                                    debug __val => _72;
                                }
                                scope 31 {
                                    debug __err => _73;
                                }
                                scope 32 {
                                    debug __value => _75;
                                }
                            }
                            scope 26 {
                                debug __val => _63;
                            }
                            scope 27 {
                                debug __err => _64;
                            }
                            scope 28 {
                                debug __value => _66;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb59;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _91 = const _;
        _12 = _91 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb64];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_15) -> [return: bb8, unwind: bb63];
    }

    bb7: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb59;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb58;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<select::SelectColumns>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _92 = const _;
        _22 = _92 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb63];
    }

    bb12: {
        _20 = move ((_17 as Some).0: select::SelectColumns);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<usize>(_24) -> [return: bb14, unwind: bb62];
    }

    bb13: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb58;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb57;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<usize>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _93 = const _;
        _31 = _93 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb62];
    }

    bb18: {
        _29 = ((_26 as Some).0: usize);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb62];
    }

    bb19: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb57;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb57;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _94 = const _;
        _40 = _94 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb62];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<bool>(_42) -> [return: bb26, unwind: bb62];
    }

    bb25: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb57;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb57;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<bool>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _95 = const _;
        _49 = _95 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb62];
    }

    bb30: {
        _47 = ((_44 as Some).0: bool);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<usize>(_51) -> [return: bb32, unwind: bb62];
    }

    bb31: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb57;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb57;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<usize>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _96 = const _;
        _58 = _96 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb62];
    }

    bb36: {
        _56 = ((_53 as Some).0: usize);
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_61) -> [return: bb38, unwind: bb62];
    }

    bb37: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb57;
    }

    bb38: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _64 = move ((_60 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb57;
    }

    bb40: {
        _63 = move ((_60 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _97 = const _;
        _68 = _97 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb43, unwind: bb62];
    }

    bb42: {
        _66 = move ((_63 as Some).0: std::option::Option<std::string::String>);
        _59 = move _66;
        _70 = &mut _2;
        _69 = <__A as SeqAccess<'_>>::next_element::<bool>(_70) -> [return: bb44, unwind: bb61];
    }

    bb43: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb57;
    }

    bb44: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _73 = move ((_69 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _73);
        goto -> bb56;
    }

    bb46: {
        _72 = ((_69 as Ok).0: std::option::Option<bool>);
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _98 = const _;
        _77 = _98 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _76 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _77) -> [return: bb49, unwind: bb61];
    }

    bb48: {
        _75 = ((_72 as Some).0: bool);
        _79 = &mut _2;
        _78 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_79) -> [return: bb50, unwind: bb61];
    }

    bb49: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _76);
        goto -> bb56;
    }

    bb50: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _82 = move ((_78 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _82);
        goto -> bb56;
    }

    bb52: {
        _81 = ((_78 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _99 = const _;
        _86 = _99 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _85 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _86) -> [return: bb55, unwind: bb61];
    }

    bb54: {
        _84 = ((_81 as Some).0: std::option::Option<config::Delimiter>);
        _88 = move _3;
        _89 = move _13;
        _90 = move _59;
        _87 = frequency::Args { arg_input: move _88, flag_select: move _89, flag_limit: _29, flag_asc: _38, flag_no_nulls: _47, flag_jobs: _56, flag_output: move _90, flag_no_headers: _75, flag_delimiter: _84 };
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _87);
        drop(_2) -> [return: bb60, unwind continue];
    }

    bb55: {
        _0 = Result::<frequency::Args, <__A as SeqAccess<'_>>::Error>::Err(move _85);
        goto -> bb56;
    }

    bb56: {
        drop(_59) -> [return: bb57, unwind: bb62];
    }

    bb57: {
        drop(_13) -> [return: bb58, unwind: bb63];
    }

    bb58: {
        drop(_3) -> [return: bb59, unwind: bb64];
    }

    bb59: {
        drop(_2) -> [return: bb60, unwind continue];
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_59) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_13) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_2) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 9 elements";
        _0 = &_1;
        return;
    }
}

fn frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::<impl at src/cmd/frequency.rs:63:17: 63:28>::visit_map(_1: frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<frequency::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<frequency::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::frequency::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _12: std::result::Result<std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: isize;
    let mut _20: bool;
    let _21: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _23: std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: bool;
    let _30: &std::option::Option<select::SelectColumns>;
    let mut _31: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _32: std::option::Option<select::SelectColumns>;
    let mut _33: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: bool;
    let _39: &std::option::Option<usize>;
    let mut _40: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _41: std::option::Option<usize>;
    let mut _42: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: bool;
    let _48: &std::option::Option<bool>;
    let mut _49: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _50: std::option::Option<bool>;
    let mut _51: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: bool;
    let _57: &std::option::Option<bool>;
    let mut _58: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _59: std::option::Option<bool>;
    let mut _60: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: bool;
    let _66: &std::option::Option<usize>;
    let mut _67: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _68: std::option::Option<usize>;
    let mut _69: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: bool;
    let _75: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _76: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _77: std::option::Option<std::option::Option<std::string::String>>;
    let mut _78: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: bool;
    let _84: &std::option::Option<bool>;
    let mut _85: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _86: std::option::Option<bool>;
    let mut _87: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: bool;
    let _93: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _94: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _102: &mut __A;
    let mut _103: isize;
    let mut _106: isize;
    let mut _108: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _109: isize;
    let mut _113: isize;
    let mut _115: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _116: isize;
    let mut _120: isize;
    let mut _122: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _123: isize;
    let mut _127: isize;
    let mut _129: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _130: isize;
    let mut _134: isize;
    let mut _136: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _137: isize;
    let mut _141: isize;
    let mut _143: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _144: isize;
    let mut _148: isize;
    let mut _150: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _151: isize;
    let mut _155: isize;
    let mut _157: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _158: isize;
    let mut _162: isize;
    let mut _164: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _165: isize;
    let mut _168: cmd::frequency::Args;
    let mut _169: std::option::Option<std::string::String>;
    let mut _170: select::SelectColumns;
    let mut _171: usize;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: usize;
    let mut _175: std::option::Option<std::string::String>;
    let mut _176: bool;
    let mut _177: std::option::Option<config::Delimiter>;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<select::SelectColumns>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<usize>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<bool>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<usize>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<std::string::String>>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<config::Delimiter>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let _105: std::option::Option<std::string::String>;
                                        let _107: std::option::Option<std::string::String>;
                                        let _110: std::option::Option<std::string::String>;
                                        let _111: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __key => _18;
                                            let _15: std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>;
                                            let _16: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _18: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field;
                                            let _27: std::option::Option<std::string::String>;
                                            let _28: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _36: select::SelectColumns;
                                            let _37: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _45: usize;
                                            let _46: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _54: bool;
                                            let _55: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _63: bool;
                                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _72: usize;
                                            let _73: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _81: std::option::Option<std::string::String>;
                                            let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _90: bool;
                                            let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _99: std::option::Option<config::Delimiter>;
                                            let _100: <__A as serde::de::MapAccess<'_>>::Error;
                                            let _104: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 11 {
                                                debug __val => _15;
                                            }
                                            scope 12 {
                                                debug __err => _16;
                                            }
                                            scope 13 {
                                                debug __val => _27;
                                            }
                                            scope 14 {
                                                debug __err => _28;
                                            }
                                            scope 15 {
                                                debug __val => _36;
                                            }
                                            scope 16 {
                                                debug __err => _37;
                                            }
                                            scope 17 {
                                                debug __val => _45;
                                            }
                                            scope 18 {
                                                debug __err => _46;
                                            }
                                            scope 19 {
                                                debug __val => _54;
                                            }
                                            scope 20 {
                                                debug __err => _55;
                                            }
                                            scope 21 {
                                                debug __val => _63;
                                            }
                                            scope 22 {
                                                debug __err => _64;
                                            }
                                            scope 23 {
                                                debug __val => _72;
                                            }
                                            scope 24 {
                                                debug __err => _73;
                                            }
                                            scope 25 {
                                                debug __val => _81;
                                            }
                                            scope 26 {
                                                debug __err => _82;
                                            }
                                            scope 27 {
                                                debug __val => _90;
                                            }
                                            scope 28 {
                                                debug __err => _91;
                                            }
                                            scope 29 {
                                                debug __val => _99;
                                            }
                                            scope 30 {
                                                debug __err => _100;
                                            }
                                            scope 31 {
                                            }
                                            scope 32 {
                                                debug __val => const IgnoredAny;
                                            }
                                            scope 33 {
                                                debug __err => _104;
                                            }
                                        }
                                        scope 34 {
                                            debug __field0 => _105;
                                            let _112: select::SelectColumns;
                                            let _114: select::SelectColumns;
                                            let _117: select::SelectColumns;
                                            let _118: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 38 {
                                                debug __field1 => _112;
                                                let _119: usize;
                                                let _121: usize;
                                                let _124: usize;
                                                let _125: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 42 {
                                                    debug __field2 => _119;
                                                    let _126: bool;
                                                    let _128: bool;
                                                    let _131: bool;
                                                    let _132: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 46 {
                                                        debug __field3 => _126;
                                                        let _133: bool;
                                                        let _135: bool;
                                                        let _138: bool;
                                                        let _139: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 50 {
                                                            debug __field4 => _133;
                                                            let _140: usize;
                                                            let _142: usize;
                                                            let _145: usize;
                                                            let _146: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 54 {
                                                                debug __field5 => _140;
                                                                let _147: std::option::Option<std::string::String>;
                                                                let _149: std::option::Option<std::string::String>;
                                                                let _152: std::option::Option<std::string::String>;
                                                                let _153: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 58 {
                                                                    debug __field6 => _147;
                                                                    let _154: bool;
                                                                    let _156: bool;
                                                                    let _159: bool;
                                                                    let _160: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 62 {
                                                                        debug __field7 => _154;
                                                                        let _161: std::option::Option<config::Delimiter>;
                                                                        let _163: std::option::Option<config::Delimiter>;
                                                                        let _166: std::option::Option<config::Delimiter>;
                                                                        let _167: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 66 {
                                                                            debug __field8 => _161;
                                                                        }
                                                                        scope 67 {
                                                                            debug __field8 => _163;
                                                                        }
                                                                        scope 68 {
                                                                            debug __val => _166;
                                                                        }
                                                                        scope 69 {
                                                                            debug __err => _167;
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug __field7 => _156;
                                                                    }
                                                                    scope 64 {
                                                                        debug __val => _159;
                                                                    }
                                                                    scope 65 {
                                                                        debug __err => _160;
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug __field6 => _149;
                                                                }
                                                                scope 60 {
                                                                    debug __val => _152;
                                                                }
                                                                scope 61 {
                                                                    debug __err => _153;
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug __field5 => _142;
                                                            }
                                                            scope 56 {
                                                                debug __val => _145;
                                                            }
                                                            scope 57 {
                                                                debug __err => _146;
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug __field4 => _135;
                                                        }
                                                        scope 52 {
                                                            debug __val => _138;
                                                        }
                                                        scope 53 {
                                                            debug __err => _139;
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug __field3 => _128;
                                                    }
                                                    scope 48 {
                                                        debug __val => _131;
                                                    }
                                                    scope 49 {
                                                        debug __err => _132;
                                                    }
                                                }
                                                scope 43 {
                                                    debug __field2 => _121;
                                                }
                                                scope 44 {
                                                    debug __val => _124;
                                                }
                                                scope 45 {
                                                    debug __err => _125;
                                                }
                                            }
                                            scope 39 {
                                                debug __field1 => _114;
                                            }
                                            scope 40 {
                                                debug __val => _117;
                                            }
                                            scope 41 {
                                                debug __err => _118;
                                            }
                                        }
                                        scope 35 {
                                            debug __field0 => _107;
                                        }
                                        scope 36 {
                                            debug __val => _110;
                                        }
                                        scope 37 {
                                            debug __err => _111;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _180 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _179 = const true;
        _4 = std::option::Option::<SelectColumns>::None;
        _5 = std::option::Option::<usize>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<bool>::None;
        _8 = std::option::Option::<usize>::None;
        _178 = const true;
        _9 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _10 = std::option::Option::<bool>::None;
        _11 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _13 = &mut _2;
        _12 = <__A as MapAccess<'_>>::next_key::<frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for frequency::Args>::deserialize::__Field>(_13) -> [return: bb2, unwind: bb166];
    }

    bb2: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _16 = move ((_12 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb146;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _15 = move ((_12 as Ok).0: std::option::Option<cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _106 = discriminant(_3);
        switchInt(move _106) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb7: {
        _18 = move ((_15 as Some).0: cmd::frequency::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::frequency::Args>::deserialize::__Field);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb53, 6: bb61, 7: bb71, 8: bb79, otherwise: bb8];
    }

    bb8: {
        _102 = &mut _2;
        _101 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_102) -> [return: bb87, unwind: bb166];
    }

    bb9: {
        _21 = &_3;
        _20 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_21) -> [return: bb10, unwind: bb166];
    }

    bb10: {
        switchInt(move _20) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _22 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb166];
    }

    bb12: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb146;
    }

    bb13: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_25) -> [return: bb14, unwind: bb166];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb146;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::string::String>);
        _23 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _27);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _180 = const true;
        _3 = move _23;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _180 = const true;
        _3 = move _23;
        goto -> bb166;
    }

    bb19: {
        _30 = &_4;
        _29 = std::option::Option::<SelectColumns>::is_some(_30) -> [return: bb20, unwind: bb166];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _31 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_select") -> [return: bb22, unwind: bb166];
    }

    bb22: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb146;
    }

    bb23: {
        _34 = &mut _2;
        _33 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_34) -> [return: bb24, unwind: bb166];
    }

    bb24: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _37 = move ((_33 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb146;
    }

    bb26: {
        _36 = move ((_33 as Ok).0: select::SelectColumns);
        _32 = std::option::Option::<SelectColumns>::Some(move _36);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _179 = const true;
        _4 = move _32;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _179 = const true;
        _4 = move _32;
        goto -> bb166;
    }

    bb29: {
        _39 = &_5;
        _38 = std::option::Option::<usize>::is_some(_39) -> [return: bb30, unwind: bb166];
    }

    bb30: {
        switchInt(move _38) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _40 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_limit") -> [return: bb32, unwind: bb166];
    }

    bb32: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb146;
    }

    bb33: {
        _43 = &mut _2;
        _42 = <__A as MapAccess<'_>>::next_value::<usize>(_43) -> [return: bb34, unwind: bb166];
    }

    bb34: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _46 = move ((_42 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb146;
    }

    bb36: {
        _45 = ((_42 as Ok).0: usize);
        _41 = std::option::Option::<usize>::Some(_45);
        _5 = move _41;
        goto -> bb1;
    }

    bb37: {
        _48 = &_6;
        _47 = std::option::Option::<bool>::is_some(_48) -> [return: bb38, unwind: bb166];
    }

    bb38: {
        switchInt(move _47) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _49 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_asc") -> [return: bb40, unwind: bb166];
    }

    bb40: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _49);
        goto -> bb146;
    }

    bb41: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<bool>(_52) -> [return: bb42, unwind: bb166];
    }

    bb42: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _55 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb146;
    }

    bb44: {
        _54 = ((_51 as Ok).0: bool);
        _50 = std::option::Option::<bool>::Some(_54);
        _6 = move _50;
        goto -> bb1;
    }

    bb45: {
        _57 = &_7;
        _56 = std::option::Option::<bool>::is_some(_57) -> [return: bb46, unwind: bb166];
    }

    bb46: {
        switchInt(move _56) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _58 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_nulls") -> [return: bb48, unwind: bb166];
    }

    bb48: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb146;
    }

    bb49: {
        _61 = &mut _2;
        _60 = <__A as MapAccess<'_>>::next_value::<bool>(_61) -> [return: bb50, unwind: bb166];
    }

    bb50: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _64 = move ((_60 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb146;
    }

    bb52: {
        _63 = ((_60 as Ok).0: bool);
        _59 = std::option::Option::<bool>::Some(_63);
        _7 = move _59;
        goto -> bb1;
    }

    bb53: {
        _66 = &_8;
        _65 = std::option::Option::<usize>::is_some(_66) -> [return: bb54, unwind: bb166];
    }

    bb54: {
        switchInt(move _65) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _67 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_jobs") -> [return: bb56, unwind: bb166];
    }

    bb56: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _67);
        goto -> bb146;
    }

    bb57: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<usize>(_70) -> [return: bb58, unwind: bb166];
    }

    bb58: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _73 = move ((_69 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _73);
        goto -> bb146;
    }

    bb60: {
        _72 = ((_69 as Ok).0: usize);
        _68 = std::option::Option::<usize>::Some(_72);
        _8 = move _68;
        goto -> bb1;
    }

    bb61: {
        _75 = &_9;
        _74 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_75) -> [return: bb62, unwind: bb166];
    }

    bb62: {
        switchInt(move _74) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _76 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb64, unwind: bb166];
    }

    bb64: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _76);
        goto -> bb146;
    }

    bb65: {
        _79 = &mut _2;
        _78 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_79) -> [return: bb66, unwind: bb166];
    }

    bb66: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _82 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb146;
    }

    bb68: {
        _81 = move ((_78 as Ok).0: std::option::Option<std::string::String>);
        _77 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _81);
        drop(_9) -> [return: bb69, unwind: bb70];
    }

    bb69: {
        _178 = const true;
        _9 = move _77;
        goto -> bb1;
    }

    bb70 (cleanup): {
        _178 = const true;
        _9 = move _77;
        goto -> bb166;
    }

    bb71: {
        _84 = &_10;
        _83 = std::option::Option::<bool>::is_some(_84) -> [return: bb72, unwind: bb166];
    }

    bb72: {
        switchInt(move _83) -> [0: bb75, otherwise: bb73];
    }

    bb73: {
        _85 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb74, unwind: bb166];
    }

    bb74: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb146;
    }

    bb75: {
        _88 = &mut _2;
        _87 = <__A as MapAccess<'_>>::next_value::<bool>(_88) -> [return: bb76, unwind: bb166];
    }

    bb76: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb78, 1: bb77, otherwise: bb4];
    }

    bb77: {
        _91 = move ((_87 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb146;
    }

    bb78: {
        _90 = ((_87 as Ok).0: bool);
        _86 = std::option::Option::<bool>::Some(_90);
        _10 = move _86;
        goto -> bb1;
    }

    bb79: {
        _93 = &_11;
        _92 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_93) -> [return: bb80, unwind: bb166];
    }

    bb80: {
        switchInt(move _92) -> [0: bb83, otherwise: bb81];
    }

    bb81: {
        _94 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb82, unwind: bb166];
    }

    bb82: {
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb146;
    }

    bb83: {
        _97 = &mut _2;
        _96 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_97) -> [return: bb84, unwind: bb166];
    }

    bb84: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb86, 1: bb85, otherwise: bb4];
    }

    bb85: {
        _100 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _100);
        goto -> bb146;
    }

    bb86: {
        _99 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _95 = std::option::Option::<std::option::Option<Delimiter>>::Some(_99);
        _11 = move _95;
        goto -> bb1;
    }

    bb87: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb1, 1: bb88, otherwise: bb4];
    }

    bb88: {
        _104 = move ((_101 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb146;
    }

    bb89: {
        _108 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb91, unwind: bb166];
    }

    bb90: {
        _180 = const false;
        _107 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _105 = move _107;
        goto -> bb94;
    }

    bb91: {
        _109 = discriminant(_108);
        switchInt(move _109) -> [0: bb93, 1: bb92, otherwise: bb4];
    }

    bb92: {
        _111 = move ((_108 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _111);
        goto -> bb146;
    }

    bb93: {
        _110 = move ((_108 as Ok).0: std::option::Option<std::string::String>);
        _105 = move _110;
        goto -> bb94;
    }

    bb94: {
        _113 = discriminant(_4);
        switchInt(move _113) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        _115 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "flag_select") -> [return: bb97, unwind: bb150];
    }

    bb96: {
        _179 = const false;
        _114 = move ((_4 as Some).0: select::SelectColumns);
        _112 = move _114;
        goto -> bb100;
    }

    bb97: {
        _116 = discriminant(_115);
        switchInt(move _116) -> [0: bb99, 1: bb98, otherwise: bb4];
    }

    bb98: {
        _118 = move ((_115 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _118);
        goto -> bb145;
    }

    bb99: {
        _117 = move ((_115 as Ok).0: select::SelectColumns);
        _112 = move _117;
        goto -> bb100;
    }

    bb100: {
        _120 = discriminant(_5);
        switchInt(move _120) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        _122 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_limit") -> [return: bb103, unwind: bb149];
    }

    bb102: {
        _121 = ((_5 as Some).0: usize);
        _119 = _121;
        goto -> bb106;
    }

    bb103: {
        _123 = discriminant(_122);
        switchInt(move _123) -> [0: bb105, 1: bb104, otherwise: bb4];
    }

    bb104: {
        _125 = move ((_122 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb144;
    }

    bb105: {
        _124 = ((_122 as Ok).0: usize);
        _119 = _124;
        goto -> bb106;
    }

    bb106: {
        _127 = discriminant(_6);
        switchInt(move _127) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        _129 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_asc") -> [return: bb109, unwind: bb149];
    }

    bb108: {
        _128 = ((_6 as Some).0: bool);
        _126 = _128;
        goto -> bb112;
    }

    bb109: {
        _130 = discriminant(_129);
        switchInt(move _130) -> [0: bb111, 1: bb110, otherwise: bb4];
    }

    bb110: {
        _132 = move ((_129 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _132);
        goto -> bb144;
    }

    bb111: {
        _131 = ((_129 as Ok).0: bool);
        _126 = _131;
        goto -> bb112;
    }

    bb112: {
        _134 = discriminant(_7);
        switchInt(move _134) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        _136 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_nulls") -> [return: bb115, unwind: bb149];
    }

    bb114: {
        _135 = ((_7 as Some).0: bool);
        _133 = _135;
        goto -> bb118;
    }

    bb115: {
        _137 = discriminant(_136);
        switchInt(move _137) -> [0: bb117, 1: bb116, otherwise: bb4];
    }

    bb116: {
        _139 = move ((_136 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _139);
        goto -> bb144;
    }

    bb117: {
        _138 = ((_136 as Ok).0: bool);
        _133 = _138;
        goto -> bb118;
    }

    bb118: {
        _141 = discriminant(_8);
        switchInt(move _141) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        _143 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_jobs") -> [return: bb121, unwind: bb149];
    }

    bb120: {
        _142 = ((_8 as Some).0: usize);
        _140 = _142;
        goto -> bb124;
    }

    bb121: {
        _144 = discriminant(_143);
        switchInt(move _144) -> [0: bb123, 1: bb122, otherwise: bb4];
    }

    bb122: {
        _146 = move ((_143 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _146);
        goto -> bb144;
    }

    bb123: {
        _145 = ((_143 as Ok).0: usize);
        _140 = _145;
        goto -> bb124;
    }

    bb124: {
        _148 = discriminant(_9);
        switchInt(move _148) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        _150 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb127, unwind: bb149];
    }

    bb126: {
        _178 = const false;
        _149 = move ((_9 as Some).0: std::option::Option<std::string::String>);
        _147 = move _149;
        goto -> bb130;
    }

    bb127: {
        _151 = discriminant(_150);
        switchInt(move _151) -> [0: bb129, 1: bb128, otherwise: bb4];
    }

    bb128: {
        _153 = move ((_150 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _153);
        goto -> bb144;
    }

    bb129: {
        _152 = move ((_150 as Ok).0: std::option::Option<std::string::String>);
        _147 = move _152;
        goto -> bb130;
    }

    bb130: {
        _155 = discriminant(_10);
        switchInt(move _155) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        _157 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb133, unwind: bb148];
    }

    bb132: {
        _156 = ((_10 as Some).0: bool);
        _154 = _156;
        goto -> bb136;
    }

    bb133: {
        _158 = discriminant(_157);
        switchInt(move _158) -> [0: bb135, 1: bb134, otherwise: bb4];
    }

    bb134: {
        _160 = move ((_157 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _160);
        goto -> bb143;
    }

    bb135: {
        _159 = ((_157 as Ok).0: bool);
        _154 = _159;
        goto -> bb136;
    }

    bb136: {
        _162 = discriminant(_11);
        switchInt(move _162) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        _164 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb139, unwind: bb148];
    }

    bb138: {
        _163 = ((_11 as Some).0: std::option::Option<config::Delimiter>);
        _161 = _163;
        goto -> bb142;
    }

    bb139: {
        _165 = discriminant(_164);
        switchInt(move _165) -> [0: bb141, 1: bb140, otherwise: bb4];
    }

    bb140: {
        _167 = move ((_164 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Err(move _167);
        goto -> bb143;
    }

    bb141: {
        _166 = ((_164 as Ok).0: std::option::Option<config::Delimiter>);
        _161 = _166;
        goto -> bb142;
    }

    bb142: {
        _169 = move _105;
        _170 = move _112;
        _171 = _119;
        _172 = _126;
        _173 = _133;
        _174 = _140;
        _175 = move _147;
        _176 = _154;
        _177 = _161;
        _168 = frequency::Args { arg_input: move _169, flag_select: move _170, flag_limit: move _171, flag_asc: move _172, flag_no_nulls: move _173, flag_jobs: move _174, flag_output: move _175, flag_no_headers: move _176, flag_delimiter: move _177 };
        _0 = Result::<frequency::Args, <__A as MapAccess<'_>>::Error>::Ok(move _168);
        _178 = const false;
        _179 = const false;
        _180 = const false;
        drop(_2) -> [return: bb147, unwind continue];
    }

    bb143: {
        drop(_147) -> [return: bb144, unwind: bb149];
    }

    bb144: {
        drop(_112) -> [return: bb145, unwind: bb150];
    }

    bb145: {
        drop(_105) -> [return: bb146, unwind: bb166];
    }

    bb146: {
        _181 = discriminant(_9);
        switchInt(move _181) -> [1: bb156, otherwise: bb155];
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_147) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_112) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_105) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        _185 = discriminant(_4);
        switchInt(move _185) -> [1: bb167, otherwise: bb152];
    }

    bb152 (cleanup): {
        _186 = discriminant(_3);
        switchInt(move _186) -> [1: bb169, otherwise: bb153];
    }

    bb153 (cleanup): {
        drop(_2) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        resume;
    }

    bb155: {
        _178 = const false;
        _182 = discriminant(_4);
        switchInt(move _182) -> [1: bb159, otherwise: bb158];
    }

    bb156: {
        switchInt(_178) -> [0: bb155, otherwise: bb157];
    }

    bb157: {
        drop(((_9 as Some).0: std::option::Option<std::string::String>)) -> [return: bb155, unwind: bb151];
    }

    bb158: {
        _179 = const false;
        _183 = discriminant(_3);
        switchInt(move _183) -> [1: bb162, otherwise: bb161];
    }

    bb159: {
        switchInt(_179) -> [0: bb158, otherwise: bb160];
    }

    bb160: {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb158, unwind: bb152];
    }

    bb161: {
        _180 = const false;
        drop(_2) -> [return: bb147, unwind continue];
    }

    bb162: {
        switchInt(_180) -> [0: bb161, otherwise: bb163];
    }

    bb163: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb161, unwind: bb153];
    }

    bb164 (cleanup): {
        switchInt(_178) -> [0: bb151, otherwise: bb165];
    }

    bb165 (cleanup): {
        drop(((_9 as Some).0: std::option::Option<std::string::String>)) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        _184 = discriminant(_9);
        switchInt(move _184) -> [1: bb164, otherwise: bb151];
    }

    bb167 (cleanup): {
        switchInt(_179) -> [0: bb152, otherwise: bb168];
    }

    bb168 (cleanup): {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        switchInt(_180) -> [0: bb153, otherwise: bb170];
    }

    bb170 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb153, unwind terminate(cleanup)];
    }
}

const frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in frequency::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/frequency.rs:63:17: 63:28>::deserialize::FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "arg_input", const "flag_select", const "flag_limit", const "flag_asc", const "flag_no_nulls", const "flag_jobs", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn frequency::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::frequency::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::frequency::Args>;
    let mut _4: std::result::Result<cmd::frequency::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::frequency::Args;
    let mut _10: &cmd::frequency::Args;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _13: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _14: &config::Config;
    let _15: config::Config;
    let _16: &std::option::Option<std::string::String>;
    let mut _17: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>)>;
    let mut _23: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _24: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _26: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _27: &config::Config;
    let _28: config::Config;
    let mut _29: &cmd::frequency::Args;
    let mut _30: isize;
    let mut _33: isize;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: &cmd::frequency::Args;
    let mut _39: &cmd::frequency::Args;
    let mut _40: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _41: &cmd::frequency::Args;
    let mut _42: isize;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _46: std::result::Result<(), csv::Error>;
    let mut _47: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _48: std::vec::Vec<&str>;
    let mut _49: std::boxed::Box<[&str]>;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: *mut u8;
    let mut _53: std::boxed::Box<[&str; 3]>;
    let _54: &str;
    let _55: &str;
    let mut _56: isize;
    let mut _59: csv::ByteRecordIter<'_>;
    let mut _60: &csv::ByteRecord;
    let mut _61: std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _62: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _63: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _64: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _66: std::option::Option<(usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))>;
    let mut _67: &mut std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
    let mut _68: isize;
    let mut _73: bool;
    let mut _74: std::vec::Vec<u8>;
    let mut _75: std::string::String;
    let mut _76: &usize;
    let _77: usize;
    let mut _78: (usize, bool);
    let mut _79: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _80: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _81: std::vec::Vec<(std::vec::Vec<u8>, u64)>;
    let mut _82: &cmd::frequency::Args;
    let _83: &stats::Frequencies<std::vec::Vec<u8>>;
    let mut _85: std::option::Option<(std::vec::Vec<u8>, u64)>;
    let mut _86: &mut std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
    let mut _87: isize;
    let mut _91: &u64;
    let mut _93: std::boxed::Box<[&[u8]]>;
    let mut _94: std::boxed::Box<[&[u8]; 3]>;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: *mut u8;
    let mut _98: std::boxed::Box<[&[u8]; 3]>;
    let _99: &[u8];
    let mut _100: &std::vec::Vec<u8>;
    let _101: &[u8];
    let mut _102: &std::vec::Vec<u8>;
    let _103: &[u8];
    let mut _104: &std::string::String;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _106: std::result::Result<(), csv::Error>;
    let mut _107: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _108: isize;
    let mut _110: &str;
    let mut _111: bool;
    let mut _112: *const [&str; 3];
    let mut _113: *const [&[u8]; 3];
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _11: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _19: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
            scope 7 {
                debug wtr => _11;
                let _20: csv::ByteRecord;
                let _21: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
                let _31: std::result::Result<std::convert::Infallible, CliError>;
                let _32: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
                let _34: &mut index::Indexed<std::fs::File, std::fs::File>;
                let _35: &&mut index::Indexed<std::fs::File, std::fs::File>;
                let _43: std::result::Result<std::convert::Infallible, CliError>;
                let _44: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
                scope 12 {
                    debug headers => _20;
                    debug tables => _21;
                    let _57: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _58: std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>;
                    let mut _120: *const ();
                    let mut _121: usize;
                    let mut _122: usize;
                    let mut _123: usize;
                    let mut _124: usize;
                    let mut _125: bool;
                    scope 22 {
                    }
                    scope 23 {
                        debug residual => _57;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => const ();
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug head_ftables => _58;
                        let mut _65: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<stats::Frequencies<std::vec::Vec<u8>>>>>;
                        scope 28 {
                            debug iter => _65;
                            let _69: usize;
                            let _70: &[u8];
                            let _71: stats::Frequencies<std::vec::Vec<u8>>;
                            scope 29 {
                                debug i => _69;
                                debug header => _70;
                                debug ftab => _71;
                                let mut _72: std::vec::Vec<u8>;
                                scope 30 {
                                    debug header => _72;
                                    let mut _84: std::vec::IntoIter<(std::vec::Vec<u8>, u64)>;
                                    scope 31 {
                                        debug iter => _84;
                                        let _88: std::vec::Vec<u8>;
                                        let _89: u64;
                                        scope 32 {
                                            debug value => _88;
                                            debug count => _89;
                                            let _90: std::string::String;
                                            scope 33 {
                                                debug count => _90;
                                                let _92: std::vec::Vec<&[u8]>;
                                                let mut _114: *const ();
                                                let mut _115: usize;
                                                let mut _116: usize;
                                                let mut _117: usize;
                                                let mut _118: usize;
                                                let mut _119: bool;
                                                scope 34 {
                                                    debug row => _92;
                                                    let _109: std::result::Result<std::convert::Infallible, csv::Error>;
                                                    scope 36 {
                                                        debug residual => _109;
                                                        scope 37 {
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug val => const ();
                                                        scope 39 {
                                                        }
                                                    }
                                                }
                                                scope 35 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _31;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _32;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug idx => _34;
                    debug idx => _35;
                }
                scope 18 {
                    debug residual => _43;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _44;
                    scope 21 {
                    }
                }
            }
            scope 8 {
                debug residual => _18;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _19;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _111 = const false;
        _5 = const {alloc10: &&str};
        _110 = deref_copy (*_5);
        _4 = get_args::<frequency::Args>(_110, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<frequency::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::frequency::Args);
        _2 = move _8;
        _10 = &_2;
        _9 = frequency::Args::rconfig(move _10) -> [return: bb6, unwind: bb100];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb86, unwind continue];
    }

    bb6: {
        _16 = &(_2.6: std::option::Option<std::string::String>);
        _15 = Config::new(_16) -> [return: bb7, unwind: bb99];
    }

    bb7: {
        _14 = &_15;
        _13 = Config::writer(move _14) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        _12 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _13) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _19 = move ((_12 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _11 = move _19;
        drop(_15) -> [return: bb13, unwind: bb97];
    }

    bb11: {
        _18 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb12, unwind: bb98];
    }

    bb12: {
        drop(_15) -> [return: bb84, unwind: bb99];
    }

    bb13: {
        _29 = &_2;
        _28 = frequency::Args::rconfig(move _29) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        _27 = &_28;
        _26 = Config::indexed(move _27) -> [return: bb15, unwind: bb96];
    }

    bb15: {
        _25 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _26) -> [return: bb16, unwind: bb96];
    }

    bb16: {
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _32 = move ((_25 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _24 = move _32;
        _33 = discriminant(_24);
        switchInt(move _33) -> [1: bb20, otherwise: bb19];
    }

    bb18: {
        _31 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _31) -> [return: bb111, unwind: bb96];
    }

    bb19: {
        _41 = &_2;
        _23 = frequency::Args::sequential_ftables(move _41) -> [return: bb112, unwind: bb95];
    }

    bb20: {
        _34 = &mut ((_24 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _35 = &_34;
        _38 = &_2;
        _37 = frequency::Args::njobs(move _38) -> [return: bb21, unwind: bb95];
    }

    bb21: {
        _36 = Gt(move _37, const 1_usize);
        switchInt(move _36) -> [0: bb19, otherwise: bb22];
    }

    bb22: {
        _39 = &_2;
        _40 = _34;
        _23 = frequency::Args::parallel_ftables(move _39, move _40) -> [return: bb113, unwind: bb95];
    }

    bb23: {
        _22 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as Try>::branch(move _23) -> [return: bb24, unwind: bb95];
    }

    bb24: {
        _42 = discriminant(_22);
        switchInt(move _42) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        _44 = move ((_22 as Continue).0: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>));
        _20 = move (_44.0: csv::ByteRecord);
        _111 = const true;
        _21 = move (_44.1: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
        drop(_24) -> [return: bb102, unwind: bb106];
    }

    bb26: {
        _43 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _43) -> [return: bb27, unwind: bb95];
    }

    bb27: {
        drop(_24) -> [return: bb105, unwind: bb96];
    }

    bb28: {
        _47 = &mut _11;
        _50 = SizeOf([&str; 3]);
        _51 = AlignOf([&str; 3]);
        _52 = alloc::alloc::exchange_malloc(move _50, move _51) -> [return: bb29, unwind: bb108];
    }

    bb29: {
        _53 = ShallowInitBox(move _52, [&str; 3]);
        _54 = const "value";
        _55 = const "count";
        _112 = (((_53.0: std::ptr::Unique<[&str; 3]>).0: std::ptr::NonNull<[&str; 3]>).0: *const [&str; 3]);
        _120 = _112 as *const () (PtrToPtr);
        _121 = _120 as usize (Transmute);
        _122 = AlignOf([&str; 3]);
        _123 = Sub(_122, const 1_usize);
        _124 = BitAnd(_121, _123);
        _125 = Eq(_124, const 0_usize);
        assert(_125, "misaligned pointer dereference: address must be a multiple of {} but is {}", _122, _121) -> [success: bb110, unwind unreachable];
    }

    bb30: {
        _46 = Writer::<Box<dyn std::io::Write>>::write_record::<Vec<&str>, &str>(move _47, move _48) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        _45 = <Result<(), csv::Error> as Try>::branch(move _46) -> [return: bb32, unwind: bb108];
    }

    bb32: {
        _56 = discriminant(_45);
        switchInt(move _56) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _60 = &_20;
        _59 = <&ByteRecord as IntoIterator>::into_iter(move _60) -> [return: bb35, unwind: bb108];
    }

    bb34: {
        _57 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _57) -> [return: bb114, unwind: bb108];
    }

    bb35: {
        _111 = const false;
        _62 = move _21;
        _61 = <Vec<Frequencies<Vec<u8>>> as IntoIterator>::into_iter(move _62) -> [return: bb36, unwind: bb108];
    }

    bb36: {
        _58 = <ByteRecordIter<'_> as Iterator>::zip::<std::vec::IntoIter<Frequencies<Vec<u8>>>>(move _59, move _61) -> [return: bb37, unwind: bb108];
    }

    bb37: {
        _64 = <Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>> as Iterator>::enumerate(move _58) -> [return: bb38, unwind: bb108];
    }

    bb38: {
        _63 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>>> as IntoIterator>::into_iter(move _64) -> [return: bb39, unwind: bb108];
    }

    bb39: {
        _65 = move _63;
        goto -> bb40;
    }

    bb40: {
        _67 = &mut _65;
        _66 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<Frequencies<Vec<u8>>>>> as Iterator>::next(_67) -> [return: bb41, unwind: bb93];
    }

    bb41: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb43, 1: bb42, otherwise: bb4];
    }

    bb42: {
        _70 = ((((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).1: (&[u8], stats::Frequencies<std::vec::Vec<u8>>)).0: &[u8]);
        _71 = move ((((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).1: (&[u8], stats::Frequencies<std::vec::Vec<u8>>)).1: stats::Frequencies<std::vec::Vec<u8>>);
        _69 = (((_66 as Some).0: (usize, (&[u8], stats::Frequencies<std::vec::Vec<u8>>))).0: usize);
        _72 = std::slice::<impl [u8]>::to_vec(_70) -> [return: bb44, unwind: bb92];
    }

    bb43: {
        drop(_65) -> [return: bb73, unwind: bb108];
    }

    bb44: {
        _73 = (_9.4: bool);
        switchInt(move _73) -> [0: bb51, otherwise: bb45];
    }

    bb45: {
        _78 = CheckedAdd(_69, const 1_usize);
        assert(!move (_78.1: bool), "attempt to compute `{} + {}`, which would overflow", _69, const 1_usize) -> [success: bb46, unwind: bb91];
    }

    bb46: {
        _77 = move (_78.0: usize);
        _76 = &_77;
        _75 = <usize as ToString>::to_string(move _76) -> [return: bb47, unwind: bb91];
    }

    bb47: {
        _74 = std::string::String::into_bytes(move _75) -> [return: bb48, unwind: bb91];
    }

    bb48: {
        drop(_72) -> [return: bb49, unwind: bb50];
    }

    bb49: {
        _72 = move _74;
        goto -> bb51;
    }

    bb50 (cleanup): {
        _72 = move _74;
        goto -> bb91;
    }

    bb51: {
        _82 = &_2;
        _83 = &_71;
        _81 = frequency::Args::counts(move _82, _83) -> [return: bb52, unwind: bb91];
    }

    bb52: {
        _80 = <Vec<(Vec<u8>, u64)> as IntoIterator>::into_iter(move _81) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        _79 = <std::vec::IntoIter<(Vec<u8>, u64)> as IntoIterator>::into_iter(move _80) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        _84 = move _79;
        goto -> bb55;
    }

    bb55: {
        _86 = &mut _84;
        _85 = <std::vec::IntoIter<(Vec<u8>, u64)> as Iterator>::next(_86) -> [return: bb56, unwind: bb90];
    }

    bb56: {
        _87 = discriminant(_85);
        switchInt(move _87) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        _88 = move (((_85 as Some).0: (std::vec::Vec<u8>, u64)).0: std::vec::Vec<u8>);
        _89 = (((_85 as Some).0: (std::vec::Vec<u8>, u64)).1: u64);
        _91 = &_89;
        _90 = <u64 as ToString>::to_string(move _91) -> [return: bb59, unwind: bb89];
    }

    bb58: {
        drop(_84) -> [return: bb71, unwind: bb91];
    }

    bb59: {
        _95 = SizeOf([&[u8]; 3]);
        _96 = AlignOf([&[u8]; 3]);
        _97 = alloc::alloc::exchange_malloc(move _95, move _96) -> [return: bb60, unwind: bb88];
    }

    bb60: {
        _98 = ShallowInitBox(move _97, [&[u8]; 3]);
        _100 = &_72;
        _99 = <Vec<u8> as Deref>::deref(move _100) -> [return: bb61, unwind: bb87];
    }

    bb61: {
        _102 = &_88;
        _101 = <Vec<u8> as Deref>::deref(move _102) -> [return: bb62, unwind: bb87];
    }

    bb62: {
        _104 = &_90;
        _103 = std::string::String::as_bytes(move _104) -> [return: bb63, unwind: bb87];
    }

    bb63: {
        _113 = (((_98.0: std::ptr::Unique<[&[u8]; 3]>).0: std::ptr::NonNull<[&[u8]; 3]>).0: *const [&[u8]; 3]);
        _114 = _113 as *const () (PtrToPtr);
        _115 = _114 as usize (Transmute);
        _116 = AlignOf([&[u8]; 3]);
        _117 = Sub(_116, const 1_usize);
        _118 = BitAnd(_115, _117);
        _119 = Eq(_118, const 0_usize);
        assert(_119, "misaligned pointer dereference: address must be a multiple of {} but is {}", _116, _115) -> [success: bb109, unwind unreachable];
    }

    bb64: {
        _107 = &mut _11;
        _106 = Writer::<Box<dyn std::io::Write>>::write_record::<Vec<&[u8]>, &[u8]>(move _107, move _92) -> [return: bb65, unwind: bb88];
    }

    bb65: {
        _105 = <Result<(), csv::Error> as Try>::branch(move _106) -> [return: bb66, unwind: bb88];
    }

    bb66: {
        _108 = discriminant(_105);
        switchInt(move _108) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        drop(_90) -> [return: bb70, unwind: bb89];
    }

    bb68: {
        _109 = move ((_105 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _109) -> [return: bb69, unwind: bb88];
    }

    bb69: {
        drop(_90) -> [return: bb77, unwind: bb89];
    }

    bb70: {
        drop(_88) -> [return: bb55, unwind: bb90];
    }

    bb71: {
        drop(_72) -> [return: bb72, unwind: bb92];
    }

    bb72: {
        drop(_71) -> [return: bb40, unwind: bb93];
    }

    bb73: {
        _0 = Result::<(), CliError>::Ok(const ());
        _111 = const false;
        drop(_20) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        drop(_11) -> [return: bb75, unwind: bb99];
    }

    bb75: {
        drop(_9) -> [return: bb76, unwind: bb100];
    }

    bb76: {
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb77: {
        drop(_88) -> [return: bb78, unwind: bb90];
    }

    bb78: {
        drop(_84) -> [return: bb79, unwind: bb91];
    }

    bb79: {
        drop(_72) -> [return: bb80, unwind: bb92];
    }

    bb80: {
        drop(_71) -> [return: bb81, unwind: bb93];
    }

    bb81: {
        drop(_65) -> [return: bb104, unwind: bb108];
    }

    bb82: {
        _111 = const false;
        drop(_20) -> [return: bb83, unwind: bb97];
    }

    bb83: {
        drop(_11) -> [return: bb84, unwind: bb99];
    }

    bb84: {
        drop(_9) -> [return: bb85, unwind: bb100];
    }

    bb85: {
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_98) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_90) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_88) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_84) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_72) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_71) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_65) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_20) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_24) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_28) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_11) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_15) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_9) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_2) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        resume;
    }

    bb102: {
        drop(_28) -> [return: bb28, unwind: bb108];
    }

    bb103: {
        drop(_21) -> [return: bb82, unwind: bb94];
    }

    bb104: {
        switchInt(_111) -> [0: bb82, otherwise: bb103];
    }

    bb105: {
        drop(_28) -> [return: bb83, unwind: bb97];
    }

    bb106 (cleanup): {
        drop(_28) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_21) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_111) -> [0: bb94, otherwise: bb107];
    }

    bb109: {
        (*_113) = [_99, _101, _103];
        _94 = move _98;
        _93 = move _94 as std::boxed::Box<[&[u8]]> (PointerCoercion(Unsize));
        _92 = std::slice::<impl [&[u8]]>::into_vec::<std::alloc::Global>(move _93) -> [return: bb64, unwind: bb88];
    }

    bb110: {
        (*_112) = [const "field", _54, _55];
        _49 = move _53 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _48 = std::slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _49) -> [return: bb30, unwind: bb108];
    }

    bb111: {
        goto -> bb105;
    }

    bb112: {
        goto -> bb23;
    }

    bb113: {
        goto -> bb23;
    }

    bb114: {
        goto -> bb104;
    }
}

alloc10 (static: frequency::USAGE, size: 16, align: 8) {
    ╾────alloc544<imm>────╼ 73 08 00 00 00 00 00 00 │ ╾──────╼s.......
}

alloc544 (size: 2163, align: 1) {
    0x000 │ 0a 43 6f 6d 70 75 74 65 20 61 20 66 72 65 71 75 │ .Compute a frequ
    0x010 │ 65 6e 63 79 20 74 61 62 6c 65 20 6f 6e 20 43 53 │ ency table on CS
    0x020 │ 56 20 64 61 74 61 2e 0a 0a 54 68 65 20 66 72 65 │ V data...The fre
    0x030 │ 71 75 65 6e 63 79 20 74 61 62 6c 65 20 69 73 20 │ quency table is 
    0x040 │ 66 6f 72 6d 61 74 74 65 64 20 61 73 20 43 53 56 │ formatted as CSV
    0x050 │ 20 64 61 74 61 3a 0a 0a 20 20 20 20 66 69 65 6c │  data:..    fiel
    0x060 │ 64 2c 76 61 6c 75 65 2c 63 6f 75 6e 74 0a 0a 42 │ d,value,count..B
    0x070 │ 79 20 64 65 66 61 75 6c 74 2c 20 74 68 65 72 65 │ y default, there
    0x080 │ 20 69 73 20 61 20 72 6f 77 20 66 6f 72 20 74 68 │  is a row for th
    0x090 │ 65 20 4e 20 6d 6f 73 74 20 66 72 65 71 75 65 6e │ e N most frequen
    0x0a0 │ 74 20 76 61 6c 75 65 73 20 66 6f 72 20 65 61 63 │ t values for eac
    0x0b0 │ 68 20 66 69 65 6c 64 20 69 6e 20 74 68 65 0a 64 │ h field in the.d
    0x0c0 │ 61 74 61 2e 20 54 68 65 20 6f 72 64 65 72 20 61 │ ata. The order a
    0x0d0 │ 6e 64 20 6e 75 6d 62 65 72 20 6f 66 20 76 61 6c │ nd number of val
    0x0e0 │ 75 65 73 20 63 61 6e 20 62 65 20 74 77 65 61 6b │ ues can be tweak
    0x0f0 │ 65 64 20 77 69 74 68 20 2d 2d 61 73 63 20 61 6e │ ed with --asc an
    0x100 │ 64 20 2d 2d 6c 69 6d 69 74 2c 0a 72 65 73 70 65 │ d --limit,.respe
    0x110 │ 63 74 69 76 65 6c 79 2e 0a 0a 53 69 6e 63 65 20 │ ctively...Since 
    0x120 │ 74 68 69 73 20 63 6f 6d 70 75 74 65 73 20 61 6e │ this computes an
    0x130 │ 20 65 78 61 63 74 20 66 72 65 71 75 65 6e 63 79 │  exact frequency
    0x140 │ 20 74 61 62 6c 65 2c 20 6d 65 6d 6f 72 79 20 70 │  table, memory p
    0x150 │ 72 6f 70 6f 72 74 69 6f 6e 61 6c 20 74 6f 20 74 │ roportional to t
    0x160 │ 68 65 0a 63 61 72 64 69 6e 61 6c 69 74 79 20 6f │ he.cardinality o
    0x170 │ 66 20 65 61 63 68 20 63 6f 6c 75 6d 6e 20 69 73 │ f each column is
    0x180 │ 20 72 65 71 75 69 72 65 64 2e 0a 0a 55 73 61 67 │  required...Usag
    0x190 │ 65 3a 0a 20 20 20 20 78 73 76 20 66 72 65 71 75 │ e:.    xsv frequ
    0x1a0 │ 65 6e 63 79 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b │ ency [options] [
    0x1b0 │ 3c 69 6e 70 75 74 3e 5d 0a 0a 66 72 65 71 75 65 │ <input>]..freque
    0x1c0 │ 6e 63 79 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ ncy options:.   
    0x1d0 │ 20 2d 73 2c 20 2d 2d 73 65 6c 65 63 74 20 3c 61 │  -s, --select <a
    0x1e0 │ 72 67 3e 20 20 20 20 20 53 65 6c 65 63 74 20 61 │ rg>     Select a
    0x1f0 │ 20 73 75 62 73 65 74 20 6f 66 20 63 6f 6c 75 6d │  subset of colum
    0x200 │ 6e 73 20 74 6f 20 63 6f 6d 70 75 74 65 20 66 72 │ ns to compute fr
    0x210 │ 65 71 75 65 6e 63 69 65 73 0a 20 20 20 20 20 20 │ equencies.      
    0x220 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x230 │ 20 20 20 20 20 66 6f 72 2e 20 53 65 65 20 27 78 │      for. See 'x
    0x240 │ 73 76 20 73 65 6c 65 63 74 20 2d 2d 68 65 6c 70 │ sv select --help
    0x250 │ 27 20 66 6f 72 20 74 68 65 20 66 6f 72 6d 61 74 │ ' for the format
    0x260 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 20 64 65 74 61 │             deta
    0x280 │ 69 6c 73 2e 20 54 68 69 73 20 69 73 20 70 72 6f │ ils. This is pro
    0x290 │ 76 69 64 65 64 20 68 65 72 65 20 62 65 63 61 75 │ vided here becau
    0x2a0 │ 73 65 20 70 69 70 69 6e 67 20 27 78 73 76 0a 20 │ se piping 'xsv. 
    0x2b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2c0 │ 20 20 20 20 20 20 20 20 20 20 73 65 6c 65 63 74 │           select
    0x2d0 │ 27 20 69 6e 74 6f 20 27 78 73 76 20 66 72 65 71 │ ' into 'xsv freq
    0x2e0 │ 75 65 6e 63 79 27 20 77 69 6c 6c 20 64 69 73 61 │ uency' will disa
    0x2f0 │ 62 6c 65 20 74 68 65 20 75 73 65 0a 20 20 20 20 │ ble the use.    
    0x300 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x310 │ 20 20 20 20 20 20 20 6f 66 20 69 6e 64 65 78 69 │        of indexi
    0x320 │ 6e 67 2e 0a 20 20 20 20 2d 6c 2c 20 2d 2d 6c 69 │ ng..    -l, --li
    0x330 │ 6d 69 74 20 3c 61 72 67 3e 20 20 20 20 20 20 4c │ mit <arg>      L
    0x340 │ 69 6d 69 74 20 74 68 65 20 66 72 65 71 75 65 6e │ imit the frequen
    0x350 │ 63 79 20 74 61 62 6c 65 20 74 6f 20 74 68 65 20 │ cy table to the 
    0x360 │ 4e 20 6d 6f 73 74 20 63 6f 6d 6d 6f 6e 0a 20 20 │ N most common.  
    0x370 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x380 │ 20 20 20 20 20 20 20 20 20 69 74 65 6d 73 2e 20 │          items. 
    0x390 │ 53 65 74 20 74 6f 20 27 30 27 20 74 6f 20 64 69 │ Set to '0' to di
    0x3a0 │ 73 61 62 6c 65 20 61 20 6c 69 6d 69 74 2e 0a 20 │ sable a limit.. 
    0x3b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3c0 │ 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 61 75 │           [defau
    0x3d0 │ 6c 74 3a 20 31 30 5d 0a 20 20 20 20 2d 61 2c 20 │ lt: 10].    -a, 
    0x3e0 │ 2d 2d 61 73 63 20 20 20 20 20 20 20 20 20 20 20 │ --asc           
    0x3f0 │ 20 20 20 53 6f 72 74 20 74 68 65 20 66 72 65 71 │    Sort the freq
    0x400 │ 75 65 6e 63 79 20 74 61 62 6c 65 73 20 69 6e 20 │ uency tables in 
    0x410 │ 61 73 63 65 6e 64 69 6e 67 20 6f 72 64 65 72 20 │ ascending order 
    0x420 │ 62 79 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ by.             
    0x430 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 63 6f │               co
    0x440 │ 75 6e 74 2e 20 54 68 65 20 64 65 66 61 75 6c 74 │ unt. The default
    0x450 │ 20 69 73 20 64 65 73 63 65 6e 64 69 6e 67 20 6f │  is descending o
    0x460 │ 72 64 65 72 2e 0a 20 20 20 20 2d 2d 6e 6f 2d 6e │ rder..    --no-n
    0x470 │ 75 6c 6c 73 20 20 20 20 20 20 20 20 20 20 20 20 │ ulls            
    0x480 │ 20 44 6f 6e 27 74 20 69 6e 63 6c 75 64 65 20 4e │  Don't include N
    0x490 │ 55 4c 4c 73 20 69 6e 20 74 68 65 20 66 72 65 71 │ ULLs in the freq
    0x4a0 │ 75 65 6e 63 79 20 74 61 62 6c 65 2e 0a 20 20 20 │ uency table..   
    0x4b0 │ 20 2d 6a 2c 20 2d 2d 6a 6f 62 73 20 3c 61 72 67 │  -j, --jobs <arg
    0x4c0 │ 3e 20 20 20 20 20 20 20 54 68 65 20 6e 75 6d 62 │ >       The numb
    0x4d0 │ 65 72 20 6f 66 20 6a 6f 62 73 20 74 6f 20 72 75 │ er of jobs to ru
    0x4e0 │ 6e 20 69 6e 20 70 61 72 61 6c 6c 65 6c 2e 0a 20 │ n in parallel.. 
    0x4f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x500 │ 20 20 20 20 20 20 20 20 20 20 54 68 69 73 20 77 │           This w
    0x510 │ 6f 72 6b 73 20 62 65 74 74 65 72 20 77 68 65 6e │ orks better when
    0x520 │ 20 74 68 65 20 67 69 76 65 6e 20 43 53 56 20 64 │  the given CSV d
    0x530 │ 61 74 61 20 68 61 73 0a 20 20 20 20 20 20 20 20 │ ata has.        
    0x540 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x550 │ 20 20 20 61 6e 20 69 6e 64 65 78 20 61 6c 72 65 │    an index alre
    0x560 │ 61 64 79 20 63 72 65 61 74 65 64 2e 20 4e 6f 74 │ ady created. Not
    0x570 │ 65 20 74 68 61 74 20 61 20 66 69 6c 65 20 68 61 │ e that a file ha
    0x580 │ 6e 64 6c 65 0a 20 20 20 20 20 20 20 20 20 20 20 │ ndle.           
    0x590 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5a0 │ 69 73 20 6f 70 65 6e 65 64 20 66 6f 72 20 65 61 │ is opened for ea
    0x5b0 │ 63 68 20 6a 6f 62 2e 0a 20 20 20 20 20 20 20 20 │ ch job..        
    0x5c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5d0 │ 20 20 20 57 68 65 6e 20 73 65 74 20 74 6f 20 27 │    When set to '
    0x5e0 │ 30 27 2c 20 74 68 65 20 6e 75 6d 62 65 72 20 6f │ 0', the number o
    0x5f0 │ 66 20 6a 6f 62 73 20 69 73 20 73 65 74 20 74 6f │ f jobs is set to
    0x600 │ 20 74 68 65 0a 20 20 20 20 20 20 20 20 20 20 20 │  the.           
    0x610 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x620 │ 6e 75 6d 62 65 72 20 6f 66 20 43 50 55 73 20 64 │ number of CPUs d
    0x630 │ 65 74 65 63 74 65 64 2e 0a 20 20 20 20 20 20 20 │ etected..       
    0x640 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x650 │ 20 20 20 20 5b 64 65 66 61 75 6c 74 3a 20 30 5d │     [default: 0]
    0x660 │ 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 │ ..Common options
    0x670 │ 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 │ :.    -h, --help
    0x680 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 44 69 73 │              Dis
    0x690 │ 70 6c 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 │ play this messag
    0x6a0 │ 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 │ e.    -o, --outp
    0x6b0 │ 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 │ ut <file>    Wri
    0x6c0 │ 74 65 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 │ te output to <fi
    0x6d0 │ 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 │ le> instead of s
    0x6e0 │ 74 64 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d │ tdout..    -n, -
    0x6f0 │ 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 20 20 20 │ -no-headers     
    0x700 │ 20 20 57 68 65 6e 20 73 65 74 2c 20 74 68 65 20 │   When set, the 
    0x710 │ 66 69 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 4e │ first row will N
    0x720 │ 4f 54 20 62 65 20 69 6e 63 6c 75 64 65 64 0a 20 │ OT be included. 
    0x730 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x740 │ 20 20 20 20 20 20 20 20 20 20 69 6e 20 74 68 65 │           in the
    0x750 │ 20 66 72 65 71 75 65 6e 63 79 20 74 61 62 6c 65 │  frequency table
    0x760 │ 2e 20 41 64 64 69 74 69 6f 6e 61 6c 6c 79 2c 20 │ . Additionally, 
    0x770 │ 74 68 65 20 27 66 69 65 6c 64 27 0a 20 20 20 20 │ the 'field'.    
    0x780 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x790 │ 20 20 20 20 20 20 20 63 6f 6c 75 6d 6e 20 77 69 │        column wi
    0x7a0 │ 6c 6c 20 62 65 20 31 2d 62 61 73 65 64 20 69 6e │ ll be 1-based in
    0x7b0 │ 64 69 63 65 73 20 69 6e 73 74 65 61 64 20 6f 66 │ dices instead of
    0x7c0 │ 20 68 65 61 64 65 72 0a 20 20 20 20 20 20 20 20 │  header.        
    0x7d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x7e0 │ 20 20 20 6e 61 6d 65 73 2e 0a 20 20 20 20 2d 64 │    names..    -d
    0x7f0 │ 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 │ , --delimiter <a
    0x800 │ 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 │ rg>  The field d
    0x810 │ 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 │ elimiter for rea
    0x820 │ 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 │ ding CSV data.. 
    0x830 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x840 │ 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 │           Must b
    0x850 │ 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 │ e a single chara
    0x860 │ 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 │ cter. (default: 
    0x870 │ 2c 29 0a                                        │ ,).
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::rconfig(_1: &frequency::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: std::option::Option<config::Delimiter>;
    let mut _7: bool;
    let mut _8: select::SelectColumns;
    let mut _9: &select::SelectColumns;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _5 = &((*_1).0: std::option::Option<std::string::String>);
        _4 = Config::new(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ((*_1).8: std::option::Option<config::Delimiter>);
        _3 = Config::delimiter(move _4, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = ((*_1).7: bool);
        _2 = Config::no_headers(move _3, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = const true;
        _9 = &((*_1).1: select::SelectColumns);
        _8 = <SelectColumns as Clone>::clone(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = const false;
        _0 = Config::select(move _2, move _8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7];
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts(_1: &frequency::Args, _2: &Frequencies<Vec<u8>>) -> Vec<(Vec<u8>, u64)> {
    debug self => _1;
    debug ftab => _2;
    let mut _0: std::vec::Vec<(std::vec::Vec<u8>, u64)>;
    let mut _3: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _8: std::iter::Take<std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>>;
    let mut _9: std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>;
    let mut _10: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    let mut _11: usize;
    let mut _12: std::iter::Map<std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>, {closure@src/cmd/frequency.rs:124:32: 124:41}>;
    let mut _13: std::vec::IntoIter<(&std::vec::Vec<u8>, u64)>;
    let mut _14: std::vec::Vec<(&std::vec::Vec<u8>, u64)>;
    scope 1 {
        debug counts => _3;
    }

    bb0: {
        _4 = ((*_1).3: bool);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Frequencies::<Vec<u8>>::least_frequent(_2) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = Frequencies::<Vec<u8>>::most_frequent(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = ((*_1).2: usize);
        _5 = Gt(move _6, const 0_usize);
        switchInt(move _5) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _10 = move _3;
        _9 = <Vec<(&Vec<u8>, u64)> as IntoIterator>::into_iter(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = ((*_1).2: usize);
        _8 = <std::vec::IntoIter<(&Vec<u8>, u64)> as Iterator>::take(move _9, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = <std::iter::Take<std::vec::IntoIter<(&Vec<u8>, u64)>> as Iterator>::collect::<Vec<(&Vec<u8>, u64)>>(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _3 = move _7;
        goto -> bb8;
    }

    bb8: {
        _14 = move _3;
        _13 = <Vec<(&Vec<u8>, u64)> as IntoIterator>::into_iter(move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = <std::vec::IntoIter<(&Vec<u8>, u64)> as Iterator>::map::<(Vec<u8>, u64), {closure@src/cmd/frequency.rs:124:32: 124:41}>(move _13, const ZeroSized: {closure@src/cmd/frequency.rs:124:32: 124:41}) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = <std::iter::Map<std::vec::IntoIter<(&Vec<u8>, u64)>, {closure@src/cmd/frequency.rs:124:32: 124:41}> as Iterator>::collect::<Vec<(Vec<u8>, u64)>>(move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts::{closure#0}(_1: &mut {closure@src/cmd/frequency.rs:124:32: 124:41}, _2: (&Vec<u8>, u64)) -> (Vec<u8>, u64) {
    let mut _0: (std::vec::Vec<u8>, u64);
    let _3: &std::vec::Vec<u8>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: &&[u8];
    let _7: &[u8];
    let _8: &[u8];
    let mut _9: std::vec::Vec<u8>;
    let _10: &[u8];
    let _11: &[u8; 6];
    let mut _12: std::vec::Vec<u8>;
    scope 1 {
        debug bs => _3;
        debug c => _4;
        let mut _13: &&[u8; 0];
    }

    bb0: {
        _3 = (_2.0: &std::vec::Vec<u8>);
        _4 = (_2.1: u64);
        _13 = const _;
        _8 = <Vec<u8> as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _8;
        _6 = &_7;
        _5 = <&[u8; 0] as PartialEq<&[u8]>>::eq(_13, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _11 = const b"(NULL)";
        _10 = <[u8; 6] as Index<RangeFull>>::index(_11, const RangeFull) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = std::slice::<impl [u8]>::to_vec(_10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = (move _9, _4);
        goto -> bb8;
    }

    bb6: {
        _12 = <Vec<u8> as Clone>::clone(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = (move _12, _4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

alloc12 (size: 6, align: 1) {
    28 4e 55 4c 4c 29                               │ (NULL)
}

promoted[0] in frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::counts::{closure#0}: &&[u8; 0] = {
    let mut _0: &&[u8; 0];
    let mut _1: &[u8; 0];

    bb0: {
        _1 = const b"";
        _0 = &_1;
        return;
    }
}

alloc11 (size: 0, align: 1) {}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::sequential_ftables(_1: &frequency::Args) -> Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _2: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _4: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _13: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _14: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _15: isize;
    let mut _18: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _19: csv::ByteRecord;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _21: std::result::Result<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>, CliError>;
    let _22: &select::Selection;
    let mut _23: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _24: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _25: isize;
    let mut _28: bool;
    scope 1 {
        debug rdr => _2;
        let _10: csv::ByteRecord;
        let _11: select::Selection;
        let _16: std::result::Result<std::convert::Infallible, CliError>;
        let _17: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _10;
            debug sel => _11;
            let _26: std::result::Result<std::convert::Infallible, CliError>;
            let _27: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
            scope 11 {
                debug residual => _26;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _27;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _28 = const false;
        _6 = frequency::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::reader(move _5) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _3 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _4) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_3 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _2 = move _9;
        drop(_6) -> [return: bb8, unwind: bb29];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        drop(_6) -> [return: bb23, unwind continue];
    }

    bb8: {
        _14 = &mut _2;
        _13 = frequency::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _14) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _12 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _13) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _17 = move ((_12 as Continue).0: (csv::ByteRecord, select::Selection));
        _28 = const true;
        _10 = move (_17.0: csv::ByteRecord);
        _11 = move (_17.1: select::Selection);
        _28 = const false;
        _19 = move _10;
        _22 = &_11;
        _24 = &mut _2;
        _23 = Reader::<Box<dyn std::io::Read>>::byte_records(move _24) -> [return: bb14, unwind: bb27];
    }

    bb12: {
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _16) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb14: {
        _21 = frequency::Args::ftables::<ByteRecordsIter<'_, Box<dyn std::io::Read>>>(_1, _22, move _23) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _20 = <Result<Vec<Frequencies<Vec<u8>>>, CliError> as Try>::branch(move _21) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        _27 = move ((_20 as Continue).0: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
        _18 = (move _19, move _27);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _18);
        drop(_11) -> [return: bb20, unwind: bb26];
    }

    bb18: {
        _26 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _26) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        drop(_19) -> [return: bb21, unwind: bb25];
    }

    bb20: {
        _28 = const false;
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb21: {
        drop(_11) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _28 = const false;
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_19) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_11) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_19) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_11) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_28) -> [0: bb29, otherwise: bb32];
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::parallel_ftables(_1: &frequency::Args, _2: &mut Indexed<File, File>) -> Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> {
    debug self => _1;
    debug idx => _2;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>), CliError>;
    let mut _3: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _5: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _6: &config::Config;
    let _7: config::Config;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _10: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _14: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _15: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _16: isize;
    let mut _19: u64;
    let mut _20: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _21: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _22: csv::ByteRecord;
    let mut _23: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _25: usize;
    let mut _26: u64;
    let mut _27: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _28: usize;
    let mut _30: usize;
    let mut _31: u64;
    let mut _32: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _34: usize;
    let mut _37: (chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>, chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
    let mut _38: std::ops::Range<usize>;
    let mut _39: std::ops::Range<usize>;
    let mut _41: std::option::Option<usize>;
    let mut _42: &mut std::ops::Range<usize>;
    let mut _43: isize;
    let mut _48: (chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>, cmd::frequency::Args, select::Selection);
    let mut _49: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _50: &chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _51: cmd::frequency::Args;
    let mut _52: select::Selection;
    let mut _53: &select::Selection;
    let _54: ();
    let mut _55: &threadpool::ThreadPool;
    let mut _56: {closure@src/cmd/frequency.rs:155:26: 155:33};
    let _57: ();
    let mut _58: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _59: (csv::ByteRecord, std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>);
    let mut _60: csv::ByteRecord;
    let mut _61: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _62: std::option::Option<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _63: chan::Iter<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _64: &chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    scope 1 {
        debug rdr => _3;
        let _11: csv::ByteRecord;
        let _12: select::Selection;
        let _17: std::result::Result<std::convert::Infallible, CliError>;
        let _18: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _11;
            debug sel => _12;
            let _24: usize;
            scope 11 {
                debug chunk_size => _24;
                let _29: usize;
                scope 12 {
                    debug nchunks => _29;
                    let _33: threadpool::ThreadPool;
                    scope 13 {
                        debug pool => _33;
                        let _35: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                        let _36: chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                        scope 14 {
                            debug send => _35;
                            debug recv => _36;
                            let mut _40: std::ops::Range<usize>;
                            scope 15 {
                                debug iter => _40;
                                let _44: usize;
                                scope 16 {
                                    debug i => _44;
                                    let _45: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
                                    let _46: cmd::frequency::Args;
                                    let _47: select::Selection;
                                    scope 17 {
                                        debug send => _45;
                                        debug args => _46;
                                        debug sel => _47;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _18;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _7 = frequency::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = Config::reader(move _6) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _4 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_4 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _3 = move _10;
        drop(_7) -> [return: bb8, unwind: bb54];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb7, unwind: bb55];
    }

    bb7: {
        drop(_7) -> [return: bb43, unwind continue];
    }

    bb8: {
        _15 = &mut _3;
        _14 = frequency::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _15) -> [return: bb9, unwind: bb54];
    }

    bb9: {
        _13 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _14) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _18 = move ((_13 as Continue).0: (csv::ByteRecord, select::Selection));
        _69 = const true;
        _11 = move (_18.0: csv::ByteRecord);
        _12 = move (_18.1: select::Selection);
        _20 = &(*_2);
        _19 = Indexed::<File, File>::count(move _20) -> [return: bb13, unwind: bb53];
    }

    bb12: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _17) -> [return: bb64, unwind: bb54];
    }

    bb13: {
        switchInt(move _19) -> [0: bb14, otherwise: bb16];
    }

    bb14: {
        _69 = const false;
        _22 = move _11;
        _23 = Vec::<Frequencies<Vec<u8>>>::new() -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _21 = (move _22, move _23);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _21);
        drop(_12) -> [return: bb41, unwind: bb63];
    }

    bb16: {
        _27 = &(*_2);
        _26 = Indexed::<File, File>::count(move _27) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        _25 = move _26 as usize (IntToInt);
        _28 = frequency::Args::njobs(_1) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        _24 = chunk_size(move _25, move _28) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        _32 = &(*_2);
        _31 = Indexed::<File, File>::count(move _32) -> [return: bb20, unwind: bb53];
    }

    bb20: {
        _30 = move _31 as usize (IntToInt);
        _29 = num_of_chunks(move _30, _24) -> [return: bb21, unwind: bb53];
    }

    bb21: {
        _34 = frequency::Args::njobs(_1) -> [return: bb22, unwind: bb53];
    }

    bb22: {
        _33 = ThreadPool::new(move _34) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        _37 = sync::<Vec<Frequencies<Vec<u8>>>>(const 0_usize) -> [return: bb24, unwind: bb51];
    }

    bb24: {
        _68 = const true;
        _35 = move (_37.0: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _36 = move (_37.1: chan::Receiver<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _39 = std::ops::Range::<usize> { start: const 0_usize, end: _29 };
        _38 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _39) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _40 = move _38;
        goto -> bb26;
    }

    bb26: {
        _42 = &mut _40;
        _41 = <std::ops::Range<usize> as Iterator>::next(_42) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb29, 1: bb28, otherwise: bb5];
    }

    bb28: {
        _44 = ((_41 as Some).0: usize);
        _50 = &_35;
        _49 = <chan::Sender<Vec<Frequencies<Vec<u8>>>> as Clone>::clone(move _50) -> [return: bb30, unwind: bb50];
    }

    bb29: {
        _68 = const false;
        _58 = move _35;
        _57 = std::mem::drop::<chan::Sender<Vec<Frequencies<Vec<u8>>>>>(move _58) -> [return: bb34, unwind: bb50];
    }

    bb30: {
        _51 = <frequency::Args as Clone>::clone(_1) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _53 = &_12;
        _52 = <Selection as Clone>::clone(move _53) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _48 = (move _49, move _51, move _52);
        _67 = const true;
        _45 = move (_48.0: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _66 = const true;
        _46 = move (_48.1: cmd::frequency::Args);
        _65 = const true;
        _47 = move (_48.2: select::Selection);
        _55 = &_33;
        _66 = const false;
        _67 = const false;
        _65 = const false;
        _56 = {closure@src/cmd/frequency.rs:155:26: 155:33} { args: move _46, i: _44, chunk_size: _24, send: move _45, sel: move _47 };
        _54 = ThreadPool::execute::<{closure@src/cmd/frequency.rs:155:26: 155:33}>(move _55, move _56) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _65 = const false;
        _66 = const false;
        _67 = const false;
        goto -> bb26;
    }

    bb34: {
        _69 = const false;
        _60 = move _11;
        _64 = &_36;
        _63 = chan::Receiver::<Vec<Frequencies<Vec<u8>>>>::iter(move _64) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _62 = merge_all::<Vec<Frequencies<Vec<u8>>>, chan::Iter<Vec<Frequencies<Vec<u8>>>>>(move _63) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _61 = std::option::Option::<Vec<Frequencies<Vec<u8>>>>::unwrap(move _62) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        _59 = (move _60, move _61);
        _0 = Result::<(ByteRecord, Vec<Frequencies<Vec<u8>>>), CliError>::Ok(move _59);
        drop(_36) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        _68 = const false;
        drop(_33) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        drop(_12) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        _69 = const false;
        drop(_3) -> [return: bb43, unwind continue];
    }

    bb41: {
        _69 = const false;
        goto -> bb42;
    }

    bb42: {
        drop(_3) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_60) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_65) -> [0: bb46, otherwise: bb57];
    }

    bb46 (cleanup): {
        switchInt(_66) -> [0: bb47, otherwise: bb58];
    }

    bb47 (cleanup): {
        switchInt(_67) -> [0: bb50, otherwise: bb59];
    }

    bb48 (cleanup): {
        drop(_51) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_49) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_36) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_33) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_22) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_12) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_7) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        drop(_47) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_46) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_45) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_35) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_68) -> [0: bb51, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_11) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_69) -> [0: bb54, otherwise: bb62];
    }

    bb64: {
        goto -> bb42;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::parallel_ftables::{closure#0}(_1: {closure@src/cmd/frequency.rs:155:26: 155:33}) -> () {
    debug args => (_1.0: cmd::frequency::Args);
    debug i => (_1.1: usize);
    debug chunk_size => (_1.2: usize);
    debug send => (_1.3: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
    debug sel => (_1.4: select::Selection);
    let mut _0: ();
    let mut _2: index::Indexed<std::fs::File, std::fs::File>;
    let mut _3: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _4: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: &cmd::frequency::Args;
    let _8: ();
    let mut _9: std::result::Result<(), CliError>;
    let mut _10: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _11: u64;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: (usize, bool);
    let mut _17: csv::ByteRecordsIter<'_, std::fs::File>;
    let mut _18: &mut csv::Reader<std::fs::File>;
    let mut _19: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _20: usize;
    let _21: ();
    let mut _22: &chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>;
    let mut _23: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _24: std::result::Result<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>, CliError>;
    let mut _25: &cmd::frequency::Args;
    let _26: &select::Selection;
    scope 1 {
        debug idx => _2;
        let _16: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
        scope 2 {
            debug it => _16;
        }
    }

    bb0: {
        _7 = &(_1.0: cmd::frequency::Args);
        _6 = frequency::Args::rconfig(move _7) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::indexed(move _5) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _3 = Result::<std::option::Option<Indexed<File, File>>, CliError>::unwrap(move _4) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _2 = std::option::Option::<Indexed<File, File>>::unwrap(move _3) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        drop(_6) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _10 = &mut _2;
        _13 = (_1.1: usize);
        _14 = (_1.2: usize);
        _15 = CheckedMul(_13, _14);
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, move _14) -> [success: bb6, unwind: bb17];
    }

    bb6: {
        _12 = move (_15.0: usize);
        _11 = move _12 as u64 (IntToInt);
        _9 = Indexed::<File, File>::seek(move _10, move _11) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _8 = Result::<(), CliError>::unwrap(move _9) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _19 = &mut _2;
        _18 = <Indexed<File, File> as DerefMut>::deref_mut(move _19) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _17 = Reader::<File>::byte_records(_18) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _20 = (_1.2: usize);
        _16 = <ByteRecordsIter<'_, File> as Iterator>::take(move _17, move _20) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _22 = &(_1.3: chan::Sender<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>>);
        _25 = &(_1.0: cmd::frequency::Args);
        _26 = &(_1.4: select::Selection);
        _24 = frequency::Args::ftables::<std::iter::Take<ByteRecordsIter<'_, File>>>(move _25, _26, move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _23 = Result::<Vec<Frequencies<Vec<u8>>>, CliError>::unwrap(move _24) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _21 = chan::Sender::<Vec<Frequencies<Vec<u8>>>>::send(move _22, move _23) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_1) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::ftables(_1: &frequency::Args, _2: &Selection, _3: I) -> Result<Vec<Frequencies<Vec<u8>>>, CliError> {
    debug self => _1;
    debug sel => _2;
    debug it => _3;
    let mut _0: std::result::Result<std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>, CliError>;
    let _4: &std::vec::Vec<u8>;
    let _5: std::vec::Vec<u8>;
    let _6: &[u8];
    let _7: &[u8; 0];
    let mut _10: std::iter::Map<std::ops::Range<usize>, {closure@src/cmd/frequency.rs:171:33: 171:36}>;
    let mut _11: std::ops::Range<usize>;
    let mut _12: usize;
    let mut _13: &select::NormalSelection;
    let mut _14: I;
    let mut _15: I;
    let mut _17: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _18: &mut I;
    let mut _19: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _23: isize;
    let mut _26: std::iter::Enumerate<std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<csv::ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>>;
    let mut _27: std::iter::Enumerate<std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<csv::ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>>;
    let mut _28: std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<csv::ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>;
    let mut _29: &select::NormalSelection;
    let mut _30: csv::ByteRecordIter<'_>;
    let mut _31: &csv::ByteRecord;
    let mut _33: std::option::Option<(usize, &[u8])>;
    let mut _34: &mut std::iter::Enumerate<std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<csv::ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>>;
    let mut _35: isize;
    let mut _39: std::vec::Vec<u8>;
    let mut _40: bool;
    let mut _41: &std::vec::Vec<u8>;
    let _42: ();
    let mut _43: &mut stats::Frequencies<std::vec::Vec<u8>>;
    let mut _44: &mut std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _45: std::vec::Vec<u8>;
    let mut _46: bool;
    let _47: ();
    let mut _48: &mut stats::Frequencies<std::vec::Vec<u8>>;
    let mut _49: &mut std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _50: std::vec::Vec<u8>;
    let mut _51: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
    let mut _52: bool;
    let mut _53: bool;
    scope 1 {
        debug null => _4;
        let _8: select::NormalSelection;
        scope 2 {
            debug nsel => _8;
            let mut _9: std::vec::Vec<stats::Frequencies<std::vec::Vec<u8>>>;
            scope 3 {
                debug tabs => _9;
                let mut _16: I;
                scope 4 {
                    debug iter => _16;
                    let _20: std::result::Result<csv::ByteRecord, csv::Error>;
                    scope 5 {
                        debug row => _20;
                        let _21: csv::ByteRecord;
                        let _24: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _25: csv::ByteRecord;
                        scope 6 {
                            debug row => _21;
                            let mut _32: std::iter::Enumerate<std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<csv::ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>>;
                            scope 11 {
                                debug iter => _32;
                                let _36: usize;
                                let _37: &[u8];
                                scope 12 {
                                    debug i => _36;
                                    debug field => _37;
                                    let _38: std::vec::Vec<u8>;
                                    scope 13 {
                                        debug field => _38;
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug residual => _24;
                            scope 8 {
                            }
                        }
                        scope 9 {
                            debug val => _25;
                            scope 10 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _53 = const false;
        _52 = const false;
        _53 = const true;
        _7 = const b"";
        _6 = <[u8; 0] as Index<RangeFull>>::index(_7, const RangeFull) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _5 = std::slice::<impl [u8]>::to_vec(_6) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _4 = &_5;
        _8 = Selection::normal(_2) -> [return: bb3, unwind: bb46];
    }

    bb3: {
        _13 = &_8;
        _12 = NormalSelection::len(move _13) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _11 = std::ops::Range::<usize> { start: const 0_usize, end: move _12 };
        _10 = <std::ops::Range<usize> as Iterator>::map::<Frequencies<Vec<u8>>, {closure@src/cmd/frequency.rs:171:33: 171:36}>(move _11, const ZeroSized: {closure@src/cmd/frequency.rs:171:33: 171:36}) -> [return: bb5, unwind: bb45];
    }

    bb5: {
        _9 = <std::iter::Map<std::ops::Range<usize>, {closure@src/cmd/frequency.rs:171:33: 171:36}> as Iterator>::collect::<Vec<Frequencies<Vec<u8>>>>(move _10) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _53 = const false;
        _15 = move _3;
        _14 = <I as IntoIterator>::into_iter(move _15) -> [return: bb7, unwind: bb44];
    }

    bb7: {
        _16 = move _14;
        goto -> bb8;
    }

    bb8: {
        _18 = &mut _16;
        _17 = <I as Iterator>::next(_18) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _20 = move ((_17 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _22 = <Result<ByteRecord, csv::Error> as Try>::branch(move _20) -> [return: bb13, unwind: bb43];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        drop(_16) -> [return: bb36, unwind: bb44];
    }

    bb13: {
        _23 = discriminant(_22);
        switchInt(move _23) -> [0: bb14, 1: bb15, otherwise: bb11];
    }

    bb14: {
        _25 = move ((_22 as Continue).0: csv::ByteRecord);
        _21 = move _25;
        _29 = &_8;
        _31 = &_21;
        _30 = <&ByteRecord as IntoIterator>::into_iter(move _31) -> [return: bb17, unwind: bb42];
    }

    bb15: {
        _24 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Vec<Frequencies<Vec<u8>>>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _24) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        drop(_16) -> [return: bb38, unwind: bb44];
    }

    bb17: {
        _28 = NormalSelection::select::<&[u8], ByteRecordIter<'_>>(move _29, move _30) -> [return: bb18, unwind: bb42];
    }

    bb18: {
        _27 = <FilterMap<Scan<Enumerate<ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>> as Iterator>::enumerate(move _28) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        _26 = <Enumerate<FilterMap<Scan<Enumerate<ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>> as IntoIterator>::into_iter(move _27) -> [return: bb20, unwind: bb42];
    }

    bb20: {
        _32 = move _26;
        goto -> bb21;
    }

    bb21: {
        _34 = &mut _32;
        _33 = <Enumerate<FilterMap<Scan<Enumerate<ByteRecordIter<'_>>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, &[u8])) -> std::option::Option<std::option::Option<&[u8]>>>, fn(std::option::Option<&[u8]>) -> std::option::Option<&[u8]>>> as Iterator>::next(_34) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb24, 1: bb23, otherwise: bb11];
    }

    bb23: {
        _36 = (((_33 as Some).0: (usize, &[u8])).0: usize);
        _37 = (((_33 as Some).0: (usize, &[u8])).1: &[u8]);
        _39 = std::slice::<impl [u8]>::to_vec(_37) -> [return: bb25, unwind: bb42];
    }

    bb24: {
        drop(_21) -> [return: bb8, unwind: bb43];
    }

    bb25: {
        _38 = trim(move _39) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _52 = const true;
        _41 = &_38;
        _40 = Vec::<u8>::is_empty(move _41) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        switchInt(move _40) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _46 = ((*_1).4: bool);
        switchInt(move _46) -> [0: bb31, otherwise: bb34];
    }

    bb29: {
        _44 = &mut _9;
        _43 = <Vec<Frequencies<Vec<u8>>> as IndexMut<usize>>::index_mut(move _44, _36) -> [return: bb30, unwind: bb50];
    }

    bb30: {
        _52 = const false;
        _45 = move _38;
        _42 = Frequencies::<Vec<u8>>::add(_43, move _45) -> [return: bb53, unwind: bb50];
    }

    bb31: {
        _49 = &mut _9;
        _48 = <Vec<Frequencies<Vec<u8>>> as IndexMut<usize>>::index_mut(move _49, _36) -> [return: bb32, unwind: bb50];
    }

    bb32: {
        _50 = <Vec<u8> as Clone>::clone(_4) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _47 = Frequencies::<Vec<u8>>::add(_48, move _50) -> [return: bb54, unwind: bb50];
    }

    bb34: {
        switchInt(_52) -> [0: bb35, otherwise: bb48];
    }

    bb35: {
        _52 = const false;
        goto -> bb21;
    }

    bb36: {
        _51 = move _9;
        _0 = Result::<Vec<Frequencies<Vec<u8>>>, CliError>::Ok(move _51);
        drop(_8) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        drop(_5) -> [return: bb41, unwind: bb52];
    }

    bb38: {
        drop(_9) -> [return: bb39, unwind: bb45];
    }

    bb39: {
        drop(_8) -> [return: bb40, unwind: bb46];
    }

    bb40: {
        drop(_5) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_21) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_16) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_9) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_8) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_5) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48: {
        drop(_38) -> [return: bb35, unwind: bb42];
    }

    bb49 (cleanup): {
        drop(_38) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_52) -> [0: bb42, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_53) -> [0: bb47, otherwise: bb51];
    }

    bb53: {
        goto -> bb34;
    }

    bb54: {
        goto -> bb34;
    }
}

alloc13 (size: 0, align: 1) {}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::ftables::{closure#0}(_1: &mut {closure@src/cmd/frequency.rs:171:33: 171:36}, _2: usize) -> Frequencies<Vec<u8>> {
    let mut _0: stats::Frequencies<std::vec::Vec<u8>>;

    bb0: {
        _0 = Frequencies::<Vec<u8>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::sel_headers(_1: &frequency::Args, _2: &mut Reader<R>) -> Result<(ByteRecord, Selection), CliError> {
    debug self => _1;
    debug rdr => _2;
    let mut _0: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _4: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, csv::Error>;
    let _7: &csv::ByteRecord;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _10: std::result::Result<select::Selection, std::string::String>;
    let mut _11: &config::Config;
    let _12: config::Config;
    let mut _13: isize;
    let mut _16: (csv::ByteRecord, select::Selection);
    let mut _17: csv::ByteRecord;
    let mut _18: std::iter::Map<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/frequency.rs:192:37: 192:40}>;
    let mut _19: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _20: &select::Selection;
    let mut _21: select::Selection;
    scope 1 {
        debug headers => _7;
        let _8: select::Selection;
        let _14: std::result::Result<std::convert::Infallible, std::string::String>;
        let _15: select::Selection;
        scope 6 {
            debug sel => _8;
        }
        scope 7 {
            debug residual => _14;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _15;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = Reader::<R>::byte_headers(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &csv::ByteRecord);
        _12 = frequency::Args::rconfig(_1) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(ByteRecord, Selection), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _6) -> [return: bb16, unwind continue];
    }

    bb6: {
        _11 = &_12;
        _10 = Config::selection(move _11, _7) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _9 = <Result<Selection, std::string::String> as Try>::branch(move _10) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = move ((_9 as Continue).0: select::Selection);
        _8 = move _15;
        drop(_12) -> [return: bb12, unwind: bb17];
    }

    bb10: {
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(ByteRecord, Selection), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _14) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        drop(_12) -> [return: bb16, unwind continue];
    }

    bb12: {
        _20 = &_8;
        _19 = Selection::select(move _20, _7) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _18 = <Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> as Iterator>::map::<Vec<u8>, {closure@src/cmd/frequency.rs:192:37: 192:40}>(move _19, const ZeroSized: {closure@src/cmd/frequency.rs:192:37: 192:40}) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _17 = <std::iter::Map<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/frequency.rs:192:37: 192:40}> as Iterator>::collect::<ByteRecord>(move _18) -> [return: bb15, unwind: bb17];
    }

    bb15: {
        _21 = move _8;
        _16 = (move _17, move _21);
        _0 = Result::<(ByteRecord, Selection), CliError>::Ok(move _16);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_8) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_12) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::sel_headers::{closure#0}(_1: &mut {closure@src/cmd/frequency.rs:192:37: 192:40}, _2: &[u8]) -> Vec<u8> {
    debug h => _2;
    let mut _0: std::vec::Vec<u8>;

    bb0: {
        _0 = std::slice::<impl [u8]>::to_vec(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn frequency::<impl at src/cmd/frequency.rs:107:1: 107:10>::njobs(_1: &frequency::Args) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).5: usize);
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = num_cpus() -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = ((*_1).5: usize);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn trim(_1: Vec<u8>) -> Vec<u8> {
    debug bs => _1;
    let mut _0: std::vec::Vec<u8>;
    let mut _2: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _3: isize;
    let _4: std::string::String;
    let _5: &[u8];
    let _6: &str;
    let _7: &str;
    let mut _8: &std::string::String;
    let _9: std::string::FromUtf8Error;
    scope 1 {
        debug s => _4;
    }
    scope 2 {
        debug bs => _9;
    }

    bb0: {
        _2 = std::string::String::from_utf8(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _9 = move ((_2 as Err).0: std::string::FromUtf8Error);
        _0 = std::string::FromUtf8Error::into_bytes(move _9) -> [return: bb11, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _4 = move ((_2 as Ok).0: std::string::String);
        _8 = &_4;
        _7 = <std::string::String as Deref>::deref(move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _6 = core::str::<impl str>::trim(_7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _5 = core::str::<impl str>::as_bytes(_6) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::slice::<impl [u8]>::to_vec(_5) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        drop(_4) -> [return: bb11, unwind continue];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }
}

static headers::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nPrints the fields of the first row in the CSV data.\n\nThese names can be used in commands like 'select' to refer to columns in the\nCSV data.\n\nNote that multiple CSV files may be given to this command. This is useful with\nthe --intersect flag.\n\nUsage:\n    xsv headers [options] [<input>...]\n\nheaders options:\n    -j, --just-names       Only show the header names (hide column index).\n                           This is automatically enabled if more than one\n                           input is given.\n    --intersect            Shows the intersection of all headers in all of\n                           the inputs given.\n\nCommon options:\n    -h, --help             Display this message\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const headers::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize(_1: __D) -> Result<headers::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::headers::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<headers::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::expecting(_1: &headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_u64(_1: headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E> {
    debug self => const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _4: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _5: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _6: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _7: __E;
    let mut _8: serde::de::Unexpected<'_>;
    let mut _9: &dyn serde::de::Expected;
    let mut _10: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1];
    }

    bb1: {
        _8 = Unexpected::<'_>::Unsigned(_2);
        _10 = const _;
        _9 = _10 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _7 = <__E as serde::de::Error>::invalid_value(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb2: {
        _3 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field0;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb7;
    }

    bb3: {
        _4 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field1;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb7;
    }

    bb4: {
        _5 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field2;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb5: {
        _6 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field3;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

promoted[0] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 4";
        _0 = &_1;
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_str(_1: headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E> {
    debug self => const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _8: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _9: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _10: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _11: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;

    bb0: {
        _6 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb12, unwind continue];
    }

    bb1: {
        _7 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field0;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb13;
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_2, const "flag_just_names") -> [return: bb11, unwind continue];
    }

    bb3: {
        _8 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field1;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb13;
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_2, const "flag_intersect") -> [return: bb10, unwind continue];
    }

    bb5: {
        _9 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field2;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb13;
    }

    bb6: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field3;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb13;
    }

    bb8: {
        _11 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__ignore;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb13;
    }

    bb9: {
        switchInt(move _3) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb11: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb12: {
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb13: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_bytes(_1: headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E> {
    debug self => const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _13: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _14: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _15: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
    let mut _16: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb50, otherwise: bb10];
    }

    bb10: {
        _16 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__ignore;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb54;
    }

    bb11: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb27, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 15]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 15]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 15]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 15]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 15]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 15]) -> [106: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 15]) -> [117: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 15]) -> [115: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 15]) -> [116: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 15]) -> [95: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 15]) -> [110: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[11 of 15]) -> [97: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[12 of 15]) -> [109: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[13 of 15]) -> [101: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[14 of 15]) -> [115: bb51, otherwise: bb10];
    }

    bb27: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb28];
    }

    bb28: {
        switchInt((*_2)[0 of 14]) -> [102: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[1 of 14]) -> [108: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[2 of 14]) -> [97: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[3 of 14]) -> [103: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[4 of 14]) -> [95: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[5 of 14]) -> [105: bb34, 100: bb42, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[6 of 14]) -> [110: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[7 of 14]) -> [116: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[8 of 14]) -> [101: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[9 of 14]) -> [114: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[10 of 14]) -> [115: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[11 of 14]) -> [101: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[12 of 14]) -> [99: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[13 of 14]) -> [116: bb52, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[6 of 14]) -> [101: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[7 of 14]) -> [108: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[8 of 14]) -> [105: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[9 of 14]) -> [109: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[10 of 14]) -> [105: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[11 of 14]) -> [116: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[12 of 14]) -> [101: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[13 of 14]) -> [114: bb53, otherwise: bb10];
    }

    bb50: {
        _12 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field0;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb54;
    }

    bb51: {
        _13 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field1;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb54;
    }

    bb52: {
        _14 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field2;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb54;
    }

    bb53: {
        _15 = headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field::__field3;
        _0 = Result::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb54;
    }

    bb54: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize(_1: __D) -> Result<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor>(move _1, const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::expecting(_1: &headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_seq(_1: headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<headers::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<headers::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::headers::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::vec::Vec<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::vec::Vec<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::vec::Vec<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::vec::Vec<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn serde::de::Expected;
    let mut _40: cmd::headers::Args;
    let mut _41: std::vec::Vec<std::string::String>;
    let mut _42: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<bool>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: bool;
        let mut _43: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<bool>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: bool;
            let mut _44: &&str;
            scope 9 {
                debug __field2 => _28;
                let _34: std::option::Option<std::option::Option<config::Delimiter>>;
                let _35: <__A as serde::de::SeqAccess<'_>>::Error;
                let _37: std::option::Option<config::Delimiter>;
                let mut _45: &&str;
                scope 13 {
                    debug __field3 => _37;
                }
                scope 14 {
                    debug __val => _34;
                }
                scope 15 {
                    debug __err => _35;
                }
                scope 16 {
                    debug __value => _37;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<Vec<std::string::String>>(_5) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb27;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::vec::Vec<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _42 = const _;
        _12 = _42 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb30];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::vec::Vec<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<bool>(_14) -> [return: bb8, unwind: bb29];
    }

    bb7: {
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb27;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb26;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<bool>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _43 = const _;
        _21 = _43 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb29];
    }

    bb12: {
        _19 = ((_16 as Some).0: bool);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<bool>(_23) -> [return: bb14, unwind: bb29];
    }

    bb13: {
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb26;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb26;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<bool>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _44 = const _;
        _30 = _44 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb29];
    }

    bb18: {
        _28 = ((_25 as Some).0: bool);
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_32) -> [return: bb20, unwind: bb29];
    }

    bb19: {
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb26;
    }

    bb20: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _35 = move ((_31 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb26;
    }

    bb22: {
        _34 = ((_31 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _45 = const _;
        _39 = _45 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb25, unwind: bb29];
    }

    bb24: {
        _37 = ((_34 as Some).0: std::option::Option<config::Delimiter>);
        _41 = move _3;
        _40 = headers::Args { arg_input: move _41, flag_just_names: _19, flag_intersect: _28, flag_delimiter: _37 };
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _40);
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb25: {
        _0 = Result::<headers::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb26;
    }

    bb26: {
        drop(_3) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_3) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }
}

promoted[0] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 4 elements";
        _0 = &_1;
        return;
    }
}

fn headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::<impl at src/cmd/headers.rs:34:10: 34:21>::visit_map(_1: headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<headers::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<headers::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::headers::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _7: std::result::Result<std::option::Option<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _8: &mut __A;
    let mut _9: isize;
    let mut _12: isize;
    let mut _14: isize;
    let mut _15: bool;
    let _16: &std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _17: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _18: std::option::Option<std::vec::Vec<std::string::String>>;
    let mut _19: std::result::Result<std::vec::Vec<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _24: bool;
    let _25: &std::option::Option<bool>;
    let mut _26: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _27: std::option::Option<bool>;
    let mut _28: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _29: &mut __A;
    let mut _30: isize;
    let mut _33: bool;
    let _34: &std::option::Option<bool>;
    let mut _35: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _36: std::option::Option<bool>;
    let mut _37: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _38: &mut __A;
    let mut _39: isize;
    let mut _42: bool;
    let _43: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _44: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _45: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _46: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _47: &mut __A;
    let mut _48: isize;
    let mut _51: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: std::result::Result<std::vec::Vec<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: isize;
    let mut _63: isize;
    let mut _65: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _66: isize;
    let mut _70: isize;
    let mut _72: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _73: isize;
    let mut _77: isize;
    let mut _79: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _83: cmd::headers::Args;
    let mut _84: std::vec::Vec<std::string::String>;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: std::option::Option<config::Delimiter>;
    let mut _88: bool;
    let mut _89: isize;
    let mut _90: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<bool>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<bool>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<config::Delimiter>>;
                scope 4 {
                    debug __field3 => _6;
                    let _55: std::vec::Vec<std::string::String>;
                    let _57: std::vec::Vec<std::string::String>;
                    let _60: std::vec::Vec<std::string::String>;
                    let _61: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __key => _13;
                        let _10: std::option::Option<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field>;
                        let _11: <__A as serde::de::MapAccess<'_>>::Error;
                        let _13: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field;
                        let _22: std::vec::Vec<std::string::String>;
                        let _23: <__A as serde::de::MapAccess<'_>>::Error;
                        let _31: bool;
                        let _32: <__A as serde::de::MapAccess<'_>>::Error;
                        let _40: bool;
                        let _41: <__A as serde::de::MapAccess<'_>>::Error;
                        let _49: std::option::Option<config::Delimiter>;
                        let _50: <__A as serde::de::MapAccess<'_>>::Error;
                        let _54: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __val => _10;
                        }
                        scope 7 {
                            debug __err => _11;
                        }
                        scope 8 {
                            debug __val => _22;
                        }
                        scope 9 {
                            debug __err => _23;
                        }
                        scope 10 {
                            debug __val => _31;
                        }
                        scope 11 {
                            debug __err => _32;
                        }
                        scope 12 {
                            debug __val => _40;
                        }
                        scope 13 {
                            debug __err => _41;
                        }
                        scope 14 {
                            debug __val => _49;
                        }
                        scope 15 {
                            debug __err => _50;
                        }
                        scope 16 {
                        }
                        scope 17 {
                            debug __val => const IgnoredAny;
                        }
                        scope 18 {
                            debug __err => _54;
                        }
                    }
                    scope 19 {
                        debug __field0 => _55;
                        let _62: bool;
                        let _64: bool;
                        let _67: bool;
                        let _68: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 23 {
                            debug __field1 => _62;
                            let _69: bool;
                            let _71: bool;
                            let _74: bool;
                            let _75: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 27 {
                                debug __field2 => _69;
                                let _76: std::option::Option<config::Delimiter>;
                                let _78: std::option::Option<config::Delimiter>;
                                let _81: std::option::Option<config::Delimiter>;
                                let _82: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 31 {
                                    debug __field3 => _76;
                                }
                                scope 32 {
                                    debug __field3 => _78;
                                }
                                scope 33 {
                                    debug __val => _81;
                                }
                                scope 34 {
                                    debug __err => _82;
                                }
                            }
                            scope 28 {
                                debug __field2 => _71;
                            }
                            scope 29 {
                                debug __val => _74;
                            }
                            scope 30 {
                                debug __err => _75;
                            }
                        }
                        scope 24 {
                            debug __field1 => _64;
                        }
                        scope 25 {
                            debug __val => _67;
                        }
                        scope 26 {
                            debug __err => _68;
                        }
                    }
                    scope 20 {
                        debug __field0 => _57;
                    }
                    scope 21 {
                        debug __val => _60;
                    }
                    scope 22 {
                        debug __err => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _88 = const false;
        _88 = const true;
        _3 = std::option::Option::<Vec<std::string::String>>::None;
        _4 = std::option::Option::<bool>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _8 = &mut _2;
        _7 = <__A as MapAccess<'_>>::next_key::<headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for headers::Args>::deserialize::__Field>(_8) -> [return: bb2, unwind: bb80];
    }

    bb2: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_7 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _11);
        goto -> bb70;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_7 as Ok).0: std::option::Option<cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field>);
        _12 = discriminant(_10);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _56 = discriminant(_3);
        switchInt(move _56) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb7: {
        _13 = move ((_10 as Some).0: cmd::headers::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::headers::Args>::deserialize::__Field);
        _14 = discriminant(_13);
        switchInt(move _14) -> [0: bb9, 1: bb19, 2: bb27, 3: bb35, otherwise: bb8];
    }

    bb8: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_52) -> [return: bb43, unwind: bb80];
    }

    bb9: {
        _16 = &_3;
        _15 = std::option::Option::<Vec<std::string::String>>::is_some(_16) -> [return: bb10, unwind: bb80];
    }

    bb10: {
        switchInt(move _15) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _17 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb80];
    }

    bb12: {
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb70;
    }

    bb13: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_value::<Vec<std::string::String>>(_20) -> [return: bb14, unwind: bb80];
    }

    bb14: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _23 = move ((_19 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _23);
        goto -> bb70;
    }

    bb16: {
        _22 = move ((_19 as Ok).0: std::vec::Vec<std::string::String>);
        _18 = std::option::Option::<Vec<std::string::String>>::Some(move _22);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _88 = const true;
        _3 = move _18;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _88 = const true;
        _3 = move _18;
        goto -> bb80;
    }

    bb19: {
        _25 = &_4;
        _24 = std::option::Option::<bool>::is_some(_25) -> [return: bb20, unwind: bb80];
    }

    bb20: {
        switchInt(move _24) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _26 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_just_names") -> [return: bb22, unwind: bb80];
    }

    bb22: {
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb70;
    }

    bb23: {
        _29 = &mut _2;
        _28 = <__A as MapAccess<'_>>::next_value::<bool>(_29) -> [return: bb24, unwind: bb80];
    }

    bb24: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _32 = move ((_28 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _32);
        goto -> bb70;
    }

    bb26: {
        _31 = ((_28 as Ok).0: bool);
        _27 = std::option::Option::<bool>::Some(_31);
        _4 = move _27;
        goto -> bb1;
    }

    bb27: {
        _34 = &_5;
        _33 = std::option::Option::<bool>::is_some(_34) -> [return: bb28, unwind: bb80];
    }

    bb28: {
        switchInt(move _33) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _35 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_intersect") -> [return: bb30, unwind: bb80];
    }

    bb30: {
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb70;
    }

    bb31: {
        _38 = &mut _2;
        _37 = <__A as MapAccess<'_>>::next_value::<bool>(_38) -> [return: bb32, unwind: bb80];
    }

    bb32: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _41 = move ((_37 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb70;
    }

    bb34: {
        _40 = ((_37 as Ok).0: bool);
        _36 = std::option::Option::<bool>::Some(_40);
        _5 = move _36;
        goto -> bb1;
    }

    bb35: {
        _43 = &_6;
        _42 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_43) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        switchInt(move _42) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _44 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb38, unwind: bb80];
    }

    bb38: {
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb70;
    }

    bb39: {
        _47 = &mut _2;
        _46 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_47) -> [return: bb40, unwind: bb80];
    }

    bb40: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _50 = move ((_46 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb70;
    }

    bb42: {
        _49 = ((_46 as Ok).0: std::option::Option<config::Delimiter>);
        _45 = std::option::Option::<std::option::Option<Delimiter>>::Some(_49);
        _6 = move _45;
        goto -> bb1;
    }

    bb43: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb1, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _54 = move ((_51 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb70;
    }

    bb45: {
        _58 = serde::private::de::missing_field::<'_, Vec<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb47, unwind: bb80];
    }

    bb46: {
        _88 = const false;
        _57 = move ((_3 as Some).0: std::vec::Vec<std::string::String>);
        _55 = move _57;
        goto -> bb50;
    }

    bb47: {
        _59 = discriminant(_58);
        switchInt(move _59) -> [0: bb49, 1: bb48, otherwise: bb4];
    }

    bb48: {
        _61 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb70;
    }

    bb49: {
        _60 = move ((_58 as Ok).0: std::vec::Vec<std::string::String>);
        _55 = move _60;
        goto -> bb50;
    }

    bb50: {
        _63 = discriminant(_4);
        switchInt(move _63) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        _65 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_just_names") -> [return: bb53, unwind: bb72];
    }

    bb52: {
        _64 = ((_4 as Some).0: bool);
        _62 = _64;
        goto -> bb56;
    }

    bb53: {
        _66 = discriminant(_65);
        switchInt(move _66) -> [0: bb55, 1: bb54, otherwise: bb4];
    }

    bb54: {
        _68 = move ((_65 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _68);
        goto -> bb69;
    }

    bb55: {
        _67 = ((_65 as Ok).0: bool);
        _62 = _67;
        goto -> bb56;
    }

    bb56: {
        _70 = discriminant(_5);
        switchInt(move _70) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        _72 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_intersect") -> [return: bb59, unwind: bb72];
    }

    bb58: {
        _71 = ((_5 as Some).0: bool);
        _69 = _71;
        goto -> bb62;
    }

    bb59: {
        _73 = discriminant(_72);
        switchInt(move _73) -> [0: bb61, 1: bb60, otherwise: bb4];
    }

    bb60: {
        _75 = move ((_72 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb69;
    }

    bb61: {
        _74 = ((_72 as Ok).0: bool);
        _69 = _74;
        goto -> bb62;
    }

    bb62: {
        _77 = discriminant(_6);
        switchInt(move _77) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        _79 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb65, unwind: bb72];
    }

    bb64: {
        _78 = ((_6 as Some).0: std::option::Option<config::Delimiter>);
        _76 = _78;
        goto -> bb68;
    }

    bb65: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb67, 1: bb66, otherwise: bb4];
    }

    bb66: {
        _82 = move ((_79 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb69;
    }

    bb67: {
        _81 = ((_79 as Ok).0: std::option::Option<config::Delimiter>);
        _76 = _81;
        goto -> bb68;
    }

    bb68: {
        _84 = move _55;
        _85 = _62;
        _86 = _69;
        _87 = _76;
        _83 = headers::Args { arg_input: move _84, flag_just_names: move _85, flag_intersect: move _86, flag_delimiter: move _87 };
        _0 = Result::<headers::Args, <__A as MapAccess<'_>>::Error>::Ok(move _83);
        _88 = const false;
        drop(_2) -> [return: bb71, unwind continue];
    }

    bb69: {
        drop(_55) -> [return: bb70, unwind: bb80];
    }

    bb70: {
        _89 = discriminant(_3);
        switchInt(move _89) -> [1: bb76, otherwise: bb75];
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_55) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_2) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        resume;
    }

    bb75: {
        _88 = const false;
        drop(_2) -> [return: bb71, unwind continue];
    }

    bb76: {
        switchInt(_88) -> [0: bb75, otherwise: bb77];
    }

    bb77: {
        drop(((_3 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb75, unwind: bb73];
    }

    bb78 (cleanup): {
        switchInt(_88) -> [0: bb73, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop(((_3 as Some).0: std::vec::Vec<std::string::String>)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        _90 = discriminant(_3);
        switchInt(move _90) -> [1: bb78, otherwise: bb73];
    }
}

const headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 4];
    let _2: &[&str; 4];
    let _3: [&str; 4];
    let mut _4: &[&str; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in headers::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/headers.rs:34:10: 34:21>::deserialize::FIELDS: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "arg_input", const "flag_just_names", const "flag_intersect", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn headers::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::headers::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::headers::Args>;
    let mut _4: std::result::Result<cmd::headers::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::headers::Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, std::vec::Vec<config::Config>>;
    let mut _11: std::result::Result<std::vec::Vec<config::Config>, std::string::String>;
    let _12: &[std::string::String];
    let mut _13: &std::vec::Vec<std::string::String>;
    let mut _14: std::option::Option<config::Delimiter>;
    let mut _15: isize;
    let mut _19: &std::vec::Vec<config::Config>;
    let mut _21: std::vec::IntoIter<config::Config>;
    let mut _22: std::vec::IntoIter<config::Config>;
    let mut _23: std::vec::Vec<config::Config>;
    let mut _25: std::option::Option<config::Config>;
    let mut _26: &mut std::vec::IntoIter<config::Config>;
    let mut _27: isize;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _31: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _32: &config::Config;
    let mut _33: isize;
    let mut _36: csv::ByteRecordIter<'_>;
    let mut _37: csv::ByteRecordIter<'_>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _39: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _40: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _41: isize;
    let mut _45: std::option::Option<&[u8]>;
    let mut _46: &mut csv::ByteRecordIter<'_>;
    let mut _47: isize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: &mut std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _52: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let _53: &[std::vec::Vec<u8>];
    let mut _54: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _55: {closure@src/cmd/headers.rs:53:40: 53:43};
    let mut _56: &&[u8];
    let _57: ();
    let mut _58: &mut std::vec::Vec<std::vec::Vec<u8>>;
    let mut _59: std::vec::Vec<u8>;
    let mut _60: &[u8];
    let mut _62: std::boxed::Box<dyn std::io::Write>;
    let mut _63: bool;
    let mut _64: std::boxed::Box<dyn std::io::Write>;
    let mut _65: std::boxed::Box<std::io::Stdout>;
    let mut _66: std::io::Stdout;
    let mut _67: std::boxed::Box<tabwriter::TabWriter<std::io::Stdout>>;
    let mut _68: tabwriter::TabWriter<std::io::Stdout>;
    let mut _69: std::io::Stdout;
    let mut _70: std::iter::Enumerate<std::vec::IntoIter<std::vec::Vec<u8>>>;
    let mut _71: std::iter::Enumerate<std::vec::IntoIter<std::vec::Vec<u8>>>;
    let mut _72: std::vec::IntoIter<std::vec::Vec<u8>>;
    let mut _73: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _75: std::option::Option<(usize, std::vec::Vec<u8>)>;
    let mut _76: &mut std::iter::Enumerate<std::vec::IntoIter<std::vec::Vec<u8>>>;
    let mut _77: isize;
    let mut _80: bool;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _82: std::result::Result<(), std::io::Error>;
    let mut _83: &mut dyn std::io::Write;
    let mut _84: &mut std::boxed::Box<dyn std::io::Write>;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let _91: &usize;
    let _92: usize;
    let mut _93: (usize, bool);
    let mut _94: isize;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _97: std::result::Result<(), std::io::Error>;
    let mut _98: &mut dyn std::io::Write;
    let _99: &[u8];
    let _100: &std::vec::Vec<u8>;
    let mut _101: isize;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _104: std::result::Result<(), std::io::Error>;
    let mut _105: &mut dyn std::io::Write;
    let mut _106: &[u8];
    let _107: &[u8; 1];
    let mut _108: isize;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _111: std::result::Result<(), std::io::Error>;
    let mut _112: &mut dyn std::io::Write;
    let mut _113: isize;
    let mut _116: &str;
    let mut _117: std::boxed::Box<dyn std::io::Write>;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: *const dyn std::io::Write;
    let mut _121: *const dyn std::io::Write;
    let mut _122: *const dyn std::io::Write;
    let mut _123: *const dyn std::io::Write;
    scope 1 {
        debug args => _2;
        let _9: std::vec::Vec<config::Config>;
        let _16: std::result::Result<std::convert::Infallible, std::string::String>;
        let _17: std::vec::Vec<config::Config>;
        scope 6 {
            debug configs => _9;
            let _18: usize;
            scope 11 {
                debug num_inputs => _18;
                let mut _20: std::vec::Vec<std::vec::Vec<u8>>;
                scope 12 {
                    debug headers => _20;
                    let mut _24: std::vec::IntoIter<config::Config>;
                    let mut _61: std::boxed::Box<dyn std::io::Write>;
                    scope 13 {
                        debug iter => _24;
                        let _28: config::Config;
                        scope 14 {
                            debug conf => _28;
                            let mut _29: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                            let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                            let _35: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                            scope 15 {
                                debug rdr => _29;
                                let _42: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _43: &csv::ByteRecord;
                                let mut _44: csv::ByteRecordIter<'_>;
                                scope 20 {
                                    debug residual => _42;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _43;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug iter => _44;
                                    let _48: &[u8];
                                    scope 25 {
                                        debug header => _48;
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _34;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _35;
                                scope 19 {
                                }
                            }
                        }
                    }
                    scope 26 {
                        debug wtr => _61;
                        let mut _74: std::iter::Enumerate<std::vec::IntoIter<std::vec::Vec<u8>>>;
                        let _114: std::result::Result<std::convert::Infallible, std::io::Error>;
                        scope 27 {
                            debug iter => _74;
                            let _78: usize;
                            let _79: std::vec::Vec<u8>;
                            scope 28 {
                                debug i => _78;
                                debug header => _79;
                                let _95: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let _102: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let _109: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let mut _115: &[&str; 2];
                                scope 29 {
                                    debug residual => _95;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => const ();
                                    scope 32 {
                                    }
                                }
                                scope 33 {
                                    debug residual => _102;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => const ();
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug residual => _109;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => const ();
                                    scope 40 {
                                    }
                                }
                            }
                        }
                        scope 41 {
                            debug residual => _114;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug val => const ();
                            scope 44 {
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _119 = const false;
        _118 = const false;
        _5 = const {alloc14: &&str};
        _116 = deref_copy (*_5);
        _4 = get_args::<headers::Args>(_116, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<headers::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::headers::Args);
        _2 = move _8;
        _13 = &(_2.0: std::vec::Vec<std::string::String>);
        _12 = <Vec<std::string::String> as Deref>::deref(move _13) -> [return: bb6, unwind: bb95];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb88, unwind continue];
    }

    bb6: {
        _14 = (_2.3: std::option::Option<config::Delimiter>);
        _11 = many_configs(_12, move _14, const true) -> [return: bb7, unwind: bb95];
    }

    bb7: {
        _10 = <Result<Vec<Config>, std::string::String> as Try>::branch(move _11) -> [return: bb8, unwind: bb95];
    }

    bb8: {
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _17 = move ((_10 as Continue).0: std::vec::Vec<config::Config>);
        _119 = const true;
        _9 = move _17;
        _19 = &_9;
        _18 = Vec::<Config>::len(move _19) -> [return: bb11, unwind: bb102];
    }

    bb10: {
        _16 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _16) -> [return: bb103, unwind: bb95];
    }

    bb11: {
        _20 = Vec::<Vec<u8>>::new() -> [return: bb12, unwind: bb102];
    }

    bb12: {
        _118 = const true;
        _119 = const false;
        _23 = move _9;
        _22 = <Vec<Config> as IntoIterator>::into_iter(move _23) -> [return: bb13, unwind: bb100];
    }

    bb13: {
        _21 = <std::vec::IntoIter<Config> as IntoIterator>::into_iter(move _22) -> [return: bb14, unwind: bb100];
    }

    bb14: {
        _24 = move _21;
        goto -> bb15;
    }

    bb15: {
        _26 = &mut _24;
        _25 = <std::vec::IntoIter<Config> as Iterator>::next(_26) -> [return: bb16, unwind: bb94];
    }

    bb16: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb18, 1: bb17, otherwise: bb4];
    }

    bb17: {
        _28 = move ((_25 as Some).0: config::Config);
        _32 = &_28;
        _31 = Config::reader(move _32) -> [return: bb19, unwind: bb93];
    }

    bb18: {
        drop(_24) -> [return: bb41, unwind: bb100];
    }

    bb19: {
        _30 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _31) -> [return: bb20, unwind: bb93];
    }

    bb20: {
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _35 = move ((_30 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _29 = move _35;
        _40 = &mut _29;
        _39 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _40) -> [return: bb23, unwind: bb92];
    }

    bb22: {
        _34 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb104, unwind: bb93];
    }

    bb23: {
        _38 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _39) -> [return: bb24, unwind: bb92];
    }

    bb24: {
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        _43 = ((_38 as Continue).0: &csv::ByteRecord);
        _37 = ByteRecord::iter(_43) -> [return: bb28, unwind: bb92];
    }

    bb26: {
        _42 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _42) -> [return: bb27, unwind: bb92];
    }

    bb27: {
        drop(_29) -> [return: bb84, unwind: bb93];
    }

    bb28: {
        _36 = <ByteRecordIter<'_> as IntoIterator>::into_iter(move _37) -> [return: bb29, unwind: bb92];
    }

    bb29: {
        _44 = move _36;
        goto -> bb30;
    }

    bb30: {
        _46 = &mut _44;
        _45 = <ByteRecordIter<'_> as Iterator>::next(_46) -> [return: bb31, unwind: bb92];
    }

    bb31: {
        _47 = discriminant(_45);
        switchInt(move _47) -> [0: bb33, 1: bb32, otherwise: bb4];
    }

    bb32: {
        _48 = ((_45 as Some).0: &[u8]);
        _49 = (_2.2: bool);
        switchInt(move _49) -> [0: bb38, otherwise: bb34];
    }

    bb33: {
        drop(_29) -> [return: bb40, unwind: bb93];
    }

    bb34: {
        _54 = &_20;
        _53 = <Vec<Vec<u8>> as Deref>::deref(move _54) -> [return: bb35, unwind: bb92];
    }

    bb35: {
        _52 = core::slice::<impl [Vec<u8>]>::iter(_53) -> [return: bb36, unwind: bb92];
    }

    bb36: {
        _51 = &mut _52;
        _56 = &_48;
        _55 = {closure@src/cmd/headers.rs:53:40: 53:43} { header: move _56 };
        _50 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::any::<{closure@src/cmd/headers.rs:53:40: 53:43}>(move _51, move _55) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        switchInt(move _50) -> [0: bb38, otherwise: bb30];
    }

    bb38: {
        _58 = &mut _20;
        _60 = _48;
        _59 = std::slice::<impl [u8]>::to_vec(move _60) -> [return: bb39, unwind: bb92];
    }

    bb39: {
        _57 = Vec::<Vec<u8>>::push(move _58, move _59) -> [return: bb105, unwind: bb92];
    }

    bb40: {
        drop(_28) -> [return: bb15, unwind: bb94];
    }

    bb41: {
        _63 = (_2.1: bool);
        switchInt(move _63) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        _66 = stdout() -> [return: bb43, unwind: bb100];
    }

    bb43: {
        _65 = Box::<Stdout>::new(move _66) -> [return: bb44, unwind: bb100];
    }

    bb44: {
        _64 = move _65 as std::boxed::Box<dyn std::io::Write> (PointerCoercion(Unsize));
        _62 = move _64;
        goto -> bb49;
    }

    bb45: {
        _69 = stdout() -> [return: bb46, unwind: bb100];
    }

    bb46: {
        _68 = TabWriter::<Stdout>::new(move _69) -> [return: bb47, unwind: bb100];
    }

    bb47: {
        _67 = Box::<TabWriter<Stdout>>::new(move _68) -> [return: bb48, unwind: bb100];
    }

    bb48: {
        _62 = move _67 as std::boxed::Box<dyn std::io::Write> (PointerCoercion(Unsize));
        goto -> bb49;
    }

    bb49: {
        _61 = move _62;
        _118 = const false;
        _73 = move _20;
        _72 = <Vec<Vec<u8>> as IntoIterator>::into_iter(move _73) -> [return: bb50, unwind: bb91];
    }

    bb50: {
        _71 = <std::vec::IntoIter<Vec<u8>> as Iterator>::enumerate(move _72) -> [return: bb51, unwind: bb91];
    }

    bb51: {
        _70 = <Enumerate<std::vec::IntoIter<Vec<u8>>> as IntoIterator>::into_iter(move _71) -> [return: bb52, unwind: bb91];
    }

    bb52: {
        _74 = move _70;
        goto -> bb53;
    }

    bb53: {
        _76 = &mut _74;
        _75 = <Enumerate<std::vec::IntoIter<Vec<u8>>> as Iterator>::next(_76) -> [return: bb54, unwind: bb90];
    }

    bb54: {
        _77 = discriminant(_75);
        switchInt(move _77) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _78 = (((_75 as Some).0: (usize, std::vec::Vec<u8>)).0: usize);
        _79 = move (((_75 as Some).0: (usize, std::vec::Vec<u8>)).1: std::vec::Vec<u8>);
        switchInt(move _18) -> [1: bb57, otherwise: bb65];
    }

    bb56: {
        drop(_74) -> [return: bb75, unwind: bb91];
    }

    bb57: {
        _80 = (_2.1: bool);
        switchInt(move _80) -> [0: bb58, otherwise: bb65];
    }

    bb58: {
        _84 = &mut _61;
        _117 = deref_copy (*_84);
        _120 = (((_117.0: std::ptr::Unique<dyn std::io::Write>).0: std::ptr::NonNull<dyn std::io::Write>).0: *const dyn std::io::Write);
        _83 = &mut (*_120);
        _115 = const _;
        _86 = _115 as &[&str] (PointerCoercion(Unsize));
        _93 = CheckedAdd(_78, const 1_usize);
        assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", _78, const 1_usize) -> [success: bb59, unwind: bb89];
    }

    bb59: {
        _92 = move (_93.0: usize);
        _91 = &_92;
        _90 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_91) -> [return: bb60, unwind: bb89];
    }

    bb60: {
        _89 = [move _90];
        _88 = &_89;
        _87 = _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _87) -> [return: bb61, unwind: bb89];
    }

    bb61: {
        _82 = <dyn std::io::Write as std::io::Write>::write_fmt(move _83, move _85) -> [return: bb62, unwind: bb89];
    }

    bb62: {
        _81 = <Result<(), std::io::Error> as Try>::branch(move _82) -> [return: bb63, unwind: bb89];
    }

    bb63: {
        _94 = discriminant(_81);
        switchInt(move _94) -> [0: bb65, 1: bb64, otherwise: bb4];
    }

    bb64: {
        _95 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _95) -> [return: bb106, unwind: bb89];
    }

    bb65: {
        _121 = (((_61.0: std::ptr::Unique<dyn std::io::Write>).0: std::ptr::NonNull<dyn std::io::Write>).0: *const dyn std::io::Write);
        _98 = &mut (*_121);
        _100 = &_79;
        _99 = <Vec<u8> as Deref>::deref(_100) -> [return: bb66, unwind: bb89];
    }

    bb66: {
        _97 = <dyn std::io::Write as std::io::Write>::write_all(move _98, _99) -> [return: bb67, unwind: bb89];
    }

    bb67: {
        _96 = <Result<(), std::io::Error> as Try>::branch(move _97) -> [return: bb68, unwind: bb89];
    }

    bb68: {
        _101 = discriminant(_96);
        switchInt(move _101) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        _122 = (((_61.0: std::ptr::Unique<dyn std::io::Write>).0: std::ptr::NonNull<dyn std::io::Write>).0: *const dyn std::io::Write);
        _105 = &mut (*_122);
        _107 = const b"\n";
        _106 = _107 as &[u8] (PointerCoercion(Unsize));
        _104 = <dyn std::io::Write as std::io::Write>::write_all(move _105, move _106) -> [return: bb71, unwind: bb89];
    }

    bb70: {
        _102 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _102) -> [return: bb107, unwind: bb89];
    }

    bb71: {
        _103 = <Result<(), std::io::Error> as Try>::branch(move _104) -> [return: bb72, unwind: bb89];
    }

    bb72: {
        _108 = discriminant(_103);
        switchInt(move _108) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        drop(_79) -> [return: bb53, unwind: bb90];
    }

    bb74: {
        _109 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb108, unwind: bb89];
    }

    bb75: {
        _123 = (((_61.0: std::ptr::Unique<dyn std::io::Write>).0: std::ptr::NonNull<dyn std::io::Write>).0: *const dyn std::io::Write);
        _112 = &mut (*_123);
        _111 = <dyn std::io::Write as std::io::Write>::flush(move _112) -> [return: bb76, unwind: bb91];
    }

    bb76: {
        _110 = <Result<(), std::io::Error> as Try>::branch(move _111) -> [return: bb77, unwind: bb91];
    }

    bb77: {
        _113 = discriminant(_110);
        switchInt(move _113) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_61) -> [return: bb80, unwind: bb100];
    }

    bb79: {
        _114 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _114) -> [return: bb109, unwind: bb91];
    }

    bb80: {
        _118 = const false;
        _119 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb81: {
        drop(_79) -> [return: bb82, unwind: bb90];
    }

    bb82: {
        drop(_74) -> [return: bb83, unwind: bb91];
    }

    bb83: {
        drop(_61) -> [return: bb98, unwind: bb100];
    }

    bb84: {
        drop(_28) -> [return: bb85, unwind: bb94];
    }

    bb85: {
        drop(_24) -> [return: bb98, unwind: bb100];
    }

    bb86: {
        _118 = const false;
        goto -> bb87;
    }

    bb87: {
        _119 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_79) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_74) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_61) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_29) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_28) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_24) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_2) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        resume;
    }

    bb97: {
        drop(_20) -> [return: bb86, unwind: bb102];
    }

    bb98: {
        switchInt(_118) -> [0: bb86, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_20) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_118) -> [0: bb102, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_9) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_119) -> [0: bb95, otherwise: bb101];
    }

    bb103: {
        goto -> bb87;
    }

    bb104: {
        goto -> bb84;
    }

    bb105: {
        goto -> bb30;
    }

    bb106: {
        goto -> bb81;
    }

    bb107: {
        goto -> bb81;
    }

    bb108: {
        goto -> bb81;
    }

    bb109: {
        goto -> bb83;
    }
}

alloc15 (size: 1, align: 1) {
    0a                                              │ .
}

alloc14 (static: headers::USAGE, size: 16, align: 8) {
    ╾────alloc637<imm>────╼ 36 03 00 00 00 00 00 00 │ ╾──────╼6.......
}

alloc637 (size: 822, align: 1) {
    0x000 │ 0a 50 72 69 6e 74 73 20 74 68 65 20 66 69 65 6c │ .Prints the fiel
    0x010 │ 64 73 20 6f 66 20 74 68 65 20 66 69 72 73 74 20 │ ds of the first 
    0x020 │ 72 6f 77 20 69 6e 20 74 68 65 20 43 53 56 20 64 │ row in the CSV d
    0x030 │ 61 74 61 2e 0a 0a 54 68 65 73 65 20 6e 61 6d 65 │ ata...These name
    0x040 │ 73 20 63 61 6e 20 62 65 20 75 73 65 64 20 69 6e │ s can be used in
    0x050 │ 20 63 6f 6d 6d 61 6e 64 73 20 6c 69 6b 65 20 27 │  commands like '
    0x060 │ 73 65 6c 65 63 74 27 20 74 6f 20 72 65 66 65 72 │ select' to refer
    0x070 │ 20 74 6f 20 63 6f 6c 75 6d 6e 73 20 69 6e 20 74 │  to columns in t
    0x080 │ 68 65 0a 43 53 56 20 64 61 74 61 2e 0a 0a 4e 6f │ he.CSV data...No
    0x090 │ 74 65 20 74 68 61 74 20 6d 75 6c 74 69 70 6c 65 │ te that multiple
    0x0a0 │ 20 43 53 56 20 66 69 6c 65 73 20 6d 61 79 20 62 │  CSV files may b
    0x0b0 │ 65 20 67 69 76 65 6e 20 74 6f 20 74 68 69 73 20 │ e given to this 
    0x0c0 │ 63 6f 6d 6d 61 6e 64 2e 20 54 68 69 73 20 69 73 │ command. This is
    0x0d0 │ 20 75 73 65 66 75 6c 20 77 69 74 68 0a 74 68 65 │  useful with.the
    0x0e0 │ 20 2d 2d 69 6e 74 65 72 73 65 63 74 20 66 6c 61 │  --intersect fla
    0x0f0 │ 67 2e 0a 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 │ g...Usage:.    x
    0x100 │ 73 76 20 68 65 61 64 65 72 73 20 5b 6f 70 74 69 │ sv headers [opti
    0x110 │ 6f 6e 73 5d 20 5b 3c 69 6e 70 75 74 3e 2e 2e 2e │ ons] [<input>...
    0x120 │ 5d 0a 0a 68 65 61 64 65 72 73 20 6f 70 74 69 6f │ ]..headers optio
    0x130 │ 6e 73 3a 0a 20 20 20 20 2d 6a 2c 20 2d 2d 6a 75 │ ns:.    -j, --ju
    0x140 │ 73 74 2d 6e 61 6d 65 73 20 20 20 20 20 20 20 4f │ st-names       O
    0x150 │ 6e 6c 79 20 73 68 6f 77 20 74 68 65 20 68 65 61 │ nly show the hea
    0x160 │ 64 65 72 20 6e 61 6d 65 73 20 28 68 69 64 65 20 │ der names (hide 
    0x170 │ 63 6f 6c 75 6d 6e 20 69 6e 64 65 78 29 2e 0a 20 │ column index).. 
    0x180 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x190 │ 20 20 20 20 20 20 20 20 20 20 54 68 69 73 20 69 │           This i
    0x1a0 │ 73 20 61 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 │ s automatically 
    0x1b0 │ 65 6e 61 62 6c 65 64 20 69 66 20 6d 6f 72 65 20 │ enabled if more 
    0x1c0 │ 74 68 61 6e 20 6f 6e 65 0a 20 20 20 20 20 20 20 │ than one.       
    0x1d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1e0 │ 20 20 20 20 69 6e 70 75 74 20 69 73 20 67 69 76 │     input is giv
    0x1f0 │ 65 6e 2e 0a 20 20 20 20 2d 2d 69 6e 74 65 72 73 │ en..    --inters
    0x200 │ 65 63 74 20 20 20 20 20 20 20 20 20 20 20 20 53 │ ect            S
    0x210 │ 68 6f 77 73 20 74 68 65 20 69 6e 74 65 72 73 65 │ hows the interse
    0x220 │ 63 74 69 6f 6e 20 6f 66 20 61 6c 6c 20 68 65 61 │ ction of all hea
    0x230 │ 64 65 72 73 20 69 6e 20 61 6c 6c 20 6f 66 0a 20 │ ders in all of. 
    0x240 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x250 │ 20 20 20 20 20 20 20 20 20 20 74 68 65 20 69 6e │           the in
    0x260 │ 70 75 74 73 20 67 69 76 65 6e 2e 0a 0a 43 6f 6d │ puts given...Com
    0x270 │ 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ mon options:.   
    0x280 │ 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 │  -h, --help     
    0x290 │ 20 20 20 20 20 20 20 20 44 69 73 70 6c 61 79 20 │         Display 
    0x2a0 │ 74 68 69 73 20 6d 65 73 73 61 67 65 0a 20 20 20 │ this message.   
    0x2b0 │ 20 2d 64 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 │  -d, --delimiter
    0x2c0 │ 20 3c 61 72 67 3e 20 20 54 68 65 20 66 69 65 6c │  <arg>  The fiel
    0x2d0 │ 64 20 64 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 │ d delimiter for 
    0x2e0 │ 72 65 61 64 69 6e 67 20 43 53 56 20 64 61 74 61 │ reading CSV data
    0x2f0 │ 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ..              
    0x300 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 4d 75 73 │              Mus
    0x310 │ 74 20 62 65 20 61 20 73 69 6e 67 6c 65 20 63 68 │ t be a single ch
    0x320 │ 61 72 61 63 74 65 72 2e 20 28 64 65 66 61 75 6c │ aracter. (defaul
    0x330 │ 74 3a 20 2c 29 0a                               │ t: ,).
}

promoted[0] in headers::run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\t"];
        _0 = &_1;
        return;
    }
}

fn headers::run::{closure#0}(_1: &mut {closure@src/cmd/headers.rs:53:40: 53:43}, _2: &Vec<u8>) -> bool {
    debug h => _2;
    debug header => (*((*_1).0: &&[u8]));
    let mut _0: bool;
    let mut _3: &&[u8];
    let _4: &[u8];
    let _5: &[u8];
    let mut _6: &&[u8];

    bb0: {
        _5 = <Vec<u8> as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _3 = &_4;
        _6 = deref_copy ((*_1).0: &&[u8]);
        _0 = <&[u8] as PartialEq>::eq(move _3, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

static cmd::index::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nCreates an index of the given CSV data, which can make other operations like\nslicing, splitting and gathering statistics much faster.\n\nNote that this does not accept CSV data on stdin. You must give a file\npath. The index is created at 'path/to/input.csv.idx'. The index will be\nautomatically used by commands that can benefit from it. If the original CSV\ndata changes after the index is made, commands that try to use it will result\nin an error (you have to regenerate the index before it can be used again).\n\nUsage:\n    xsv index [options] <input>\n    xsv index --help\n\nindex options:\n    -o, --output <file>    Write index to <file> instead of <input>.idx.\n                           Generally, this is not currently useful because\n                           the only way to use an index is if it is specially\n                           named <input>.idx.\n\nCommon options:\n    -h, --help             Display this message\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cmd::index::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize(_1: __D) -> Result<cmd::index::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::index::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::index::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::expecting(_1: &cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_u64(_1: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E> {
    debug self => const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _4: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _5: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: serde::de::Unexpected<'_>;
    let mut _8: &dyn serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_str(_1: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E> {
    debug self => const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _7: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _8: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _9: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_bytes(_1: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E> {
    debug self => const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _13: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _14: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
    let mut _15: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb38, otherwise: bb10];
    }

    bb10: {
        _15 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb41;
    }

    bb11: {
        _6 = Len((*_2));
        _7 = const 11_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb23, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 11]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 11]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 11]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 11]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 11]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 11]) -> [111: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 11]) -> [117: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 11]) -> [116: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 11]) -> [112: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 11]) -> [117: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 11]) -> [116: bb39, otherwise: bb10];
    }

    bb23: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb24];
    }

    bb24: {
        switchInt((*_2)[0 of 14]) -> [102: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[1 of 14]) -> [108: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[2 of 14]) -> [97: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[3 of 14]) -> [103: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[4 of 14]) -> [95: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[5 of 14]) -> [100: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[6 of 14]) -> [101: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[7 of 14]) -> [108: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[8 of 14]) -> [105: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[9 of 14]) -> [109: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[10 of 14]) -> [105: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[11 of 14]) -> [116: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[12 of 14]) -> [101: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[13 of 14]) -> [114: bb40, otherwise: bb10];
    }

    bb38: {
        _12 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb41;
    }

    bb39: {
        _13 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb41;
    }

    bb40: {
        _14 = cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb41;
    }

    bb41: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize(_1: __D) -> Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor>(move _1, const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::expecting(_1: &cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_seq(_1: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::index::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::index::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::index::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::string::String;
    let mut _4: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::string::String>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::string::String;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: cmd::index::Args;
    let mut _33: std::string::String;
    let mut _34: std::option::Option<std::string::String>;
    let mut _35: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::option::Option<std::string::String>;
        let _17: std::option::Option<std::option::Option<std::string::String>>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::option::Option<std::string::String>;
        let mut _36: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<std::option::Option<config::Delimiter>>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: std::option::Option<config::Delimiter>;
            let mut _37: &&str;
            scope 9 {
                debug __field2 => _29;
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_5) -> [return: bb1, unwind: bb26];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb22;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::string::String>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _35 = const _;
        _12 = _35 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb26];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::string::String);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_15) -> [return: bb8, unwind: bb25];
    }

    bb7: {
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb22;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb21;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _36 = const _;
        _22 = _36 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb25];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::option::Option<std::string::String>);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_24) -> [return: bb14, unwind: bb24];
    }

    bb13: {
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb21;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb20;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _37 = const _;
        _31 = _37 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb24];
    }

    bb18: {
        _29 = ((_26 as Some).0: std::option::Option<config::Delimiter>);
        _33 = move _3;
        _34 = move _13;
        _32 = cmd::index::Args { arg_input: move _33, flag_output: move _34, flag_delimiter: _29 };
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _32);
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb19: {
        _0 = Result::<cmd::index::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb20;
    }

    bb20: {
        drop(_13) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        drop(_3) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 3 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::<impl at src/cmd/index.rs:37:10: 37:21>::visit_map(_1: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::index::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::index::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::index::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _6: std::result::Result<std::option::Option<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<std::string::String>;
    let mut _16: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<std::string::String>;
    let mut _18: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _25: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<std::option::Option<std::string::String>>;
    let mut _27: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _34: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _36: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _49: isize;
    let mut _53: isize;
    let mut _55: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _56: isize;
    let mut _60: isize;
    let mut _62: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _63: isize;
    let mut _66: cmd::index::Args;
    let mut _67: std::string::String;
    let mut _68: std::option::Option<std::string::String>;
    let mut _69: std::option::Option<config::Delimiter>;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<std::string::String>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<config::Delimiter>>;
            scope 3 {
                debug __field2 => _5;
                let _45: std::string::String;
                let _47: std::string::String;
                let _50: std::string::String;
                let _51: <__A as serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field>;
                    let _10: <__A as serde::de::MapAccess<'_>>::Error;
                    let _12: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field;
                    let _21: std::string::String;
                    let _22: <__A as serde::de::MapAccess<'_>>::Error;
                    let _30: std::option::Option<std::string::String>;
                    let _31: <__A as serde::de::MapAccess<'_>>::Error;
                    let _39: std::option::Option<config::Delimiter>;
                    let _40: <__A as serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __field0 => _45;
                    let _52: std::option::Option<std::string::String>;
                    let _54: std::option::Option<std::string::String>;
                    let _57: std::option::Option<std::string::String>;
                    let _58: <__A as serde::de::MapAccess<'_>>::Error;
                    scope 20 {
                        debug __field1 => _52;
                        let _59: std::option::Option<config::Delimiter>;
                        let _61: std::option::Option<config::Delimiter>;
                        let _64: std::option::Option<config::Delimiter>;
                        let _65: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 24 {
                            debug __field2 => _59;
                        }
                        scope 25 {
                            debug __field2 => _61;
                        }
                        scope 26 {
                            debug __val => _64;
                        }
                        scope 27 {
                            debug __err => _65;
                        }
                    }
                    scope 21 {
                        debug __field1 => _54;
                    }
                    scope 22 {
                        debug __val => _57;
                    }
                    scope 23 {
                        debug __err => _58;
                    }
                }
                scope 17 {
                    debug __field0 => _47;
                }
                scope 18 {
                    debug __val => _50;
                }
                scope 19 {
                    debug __err => _51;
                }
            }
        }
    }

    bb0: {
        _71 = const false;
        _70 = const false;
        _71 = const true;
        _3 = std::option::Option::<std::string::String>::None;
        _70 = const true;
        _4 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _5 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb58;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _46 = discriminant(_3);
        switchInt(move _46) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb7: {
        _12 = move ((_9 as Some).0: cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::index::Args>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb19, 2: bb29, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb37, unwind: bb73];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<std::string::String>::is_some(_15) -> [return: bb10, unwind: bb73];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb73];
    }

    bb12: {
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb58;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_19) -> [return: bb14, unwind: bb73];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb58;
    }

    bb16: {
        _21 = move ((_18 as Ok).0: std::string::String);
        _17 = std::option::Option::<std::string::String>::Some(move _21);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _71 = const true;
        _3 = move _17;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _71 = const true;
        _3 = move _17;
        goto -> bb73;
    }

    bb19: {
        _24 = &_4;
        _23 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_24) -> [return: bb20, unwind: bb73];
    }

    bb20: {
        switchInt(move _23) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _25 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb22, unwind: bb73];
    }

    bb22: {
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb58;
    }

    bb23: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_28) -> [return: bb24, unwind: bb73];
    }

    bb24: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _31 = move ((_27 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb58;
    }

    bb26: {
        _30 = move ((_27 as Ok).0: std::option::Option<std::string::String>);
        _26 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _30);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _70 = const true;
        _4 = move _26;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _70 = const true;
        _4 = move _26;
        goto -> bb73;
    }

    bb29: {
        _33 = &_5;
        _32 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_33) -> [return: bb30, unwind: bb73];
    }

    bb30: {
        switchInt(move _32) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _34 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb32, unwind: bb73];
    }

    bb32: {
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb58;
    }

    bb33: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_37) -> [return: bb34, unwind: bb73];
    }

    bb34: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _40 = move ((_36 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb58;
    }

    bb36: {
        _39 = ((_36 as Ok).0: std::option::Option<config::Delimiter>);
        _35 = std::option::Option::<std::option::Option<Delimiter>>::Some(_39);
        _5 = move _35;
        goto -> bb1;
    }

    bb37: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb38, otherwise: bb4];
    }

    bb38: {
        _44 = move ((_41 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb58;
    }

    bb39: {
        _48 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb41, unwind: bb73];
    }

    bb40: {
        _71 = const false;
        _47 = move ((_3 as Some).0: std::string::String);
        _45 = move _47;
        goto -> bb44;
    }

    bb41: {
        _49 = discriminant(_48);
        switchInt(move _49) -> [0: bb43, 1: bb42, otherwise: bb4];
    }

    bb42: {
        _51 = move ((_48 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb58;
    }

    bb43: {
        _50 = move ((_48 as Ok).0: std::string::String);
        _45 = move _50;
        goto -> bb44;
    }

    bb44: {
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        _55 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb47, unwind: bb61];
    }

    bb46: {
        _70 = const false;
        _54 = move ((_4 as Some).0: std::option::Option<std::string::String>);
        _52 = move _54;
        goto -> bb50;
    }

    bb47: {
        _56 = discriminant(_55);
        switchInt(move _56) -> [0: bb49, 1: bb48, otherwise: bb4];
    }

    bb48: {
        _58 = move ((_55 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb57;
    }

    bb49: {
        _57 = move ((_55 as Ok).0: std::option::Option<std::string::String>);
        _52 = move _57;
        goto -> bb50;
    }

    bb50: {
        _60 = discriminant(_5);
        switchInt(move _60) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        _62 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb53, unwind: bb60];
    }

    bb52: {
        _61 = ((_5 as Some).0: std::option::Option<config::Delimiter>);
        _59 = _61;
        goto -> bb56;
    }

    bb53: {
        _63 = discriminant(_62);
        switchInt(move _63) -> [0: bb55, 1: bb54, otherwise: bb4];
    }

    bb54: {
        _65 = move ((_62 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        drop(_52) -> [return: bb57, unwind: bb61];
    }

    bb55: {
        _64 = ((_62 as Ok).0: std::option::Option<config::Delimiter>);
        _59 = _64;
        goto -> bb56;
    }

    bb56: {
        _67 = move _45;
        _68 = move _52;
        _69 = _59;
        _66 = cmd::index::Args { arg_input: move _67, flag_output: move _68, flag_delimiter: move _69 };
        _0 = Result::<cmd::index::Args, <__A as MapAccess<'_>>::Error>::Ok(move _66);
        _70 = const false;
        _71 = const false;
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb57: {
        drop(_45) -> [return: bb58, unwind: bb73];
    }

    bb58: {
        _72 = discriminant(_4);
        switchInt(move _72) -> [1: bb66, otherwise: bb65];
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_52) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_45) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        _75 = discriminant(_3);
        switchInt(move _75) -> [1: bb74, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop(_2) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65: {
        _70 = const false;
        _73 = discriminant(_3);
        switchInt(move _73) -> [1: bb69, otherwise: bb68];
    }

    bb66: {
        switchInt(_70) -> [0: bb65, otherwise: bb67];
    }

    bb67: {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb65, unwind: bb62];
    }

    bb68: {
        _71 = const false;
        drop(_2) -> [return: bb59, unwind continue];
    }

    bb69: {
        switchInt(_71) -> [0: bb68, otherwise: bb70];
    }

    bb70: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb68, unwind: bb63];
    }

    bb71 (cleanup): {
        switchInt(_70) -> [0: bb62, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        _74 = discriminant(_4);
        switchInt(move _74) -> [1: bb71, otherwise: bb62];
    }

    bb74 (cleanup): {
        switchInt(_71) -> [0: bb63, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb63, unwind terminate(cleanup)];
    }
}

const cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::index::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/index.rs:37:10: 37:21>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "arg_input", const "flag_output", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn cmd::index::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::index::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::index::Args>;
    let mut _4: std::result::Result<cmd::index::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::index::Args;
    let mut _10: isize;
    let _11: &&std::path::Path;
    let _12: &std::path::Path;
    let _13: &std::string::String;
    let mut _15: &std::string::String;
    let mut _17: config::Config;
    let _18: &std::option::Option<std::string::String>;
    let _19: std::option::Option<std::string::String>;
    let mut _20: std::string::String;
    let mut _21: std::option::Option<config::Delimiter>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::fs::File>>;
    let mut _24: std::result::Result<csv::Reader<std::fs::File>, std::io::Error>;
    let mut _25: &config::Config;
    let mut _26: isize;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _31: std::result::Result<std::fs::File, std::io::Error>;
    let mut _32: &std::path::PathBuf;
    let mut _33: isize;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _37: std::result::Result<(), csv::Error>;
    let mut _38: &mut csv::Reader<std::fs::File>;
    let mut _39: &mut std::io::BufWriter<std::fs::File>;
    let mut _40: isize;
    let mut _42: &str;
    let mut _43: &std::path::Path;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    scope 1 {
        debug args => _2;
        let _9: std::path::PathBuf;
        let _14: std::string::String;
        scope 6 {
            debug pidx => _9;
            let _16: config::Config;
            scope 8 {
                debug rconfig => _16;
                let mut _22: csv::Reader<std::fs::File>;
                let _27: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _28: csv::Reader<std::fs::File>;
                scope 9 {
                    debug rdr => _22;
                    let mut _29: std::io::BufWriter<std::fs::File>;
                    let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _35: std::fs::File;
                    scope 14 {
                        debug wtr => _29;
                        let _41: std::result::Result<std::convert::Infallible, csv::Error>;
                        scope 19 {
                            debug residual => _41;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => const ();
                            scope 22 {
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _34;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _35;
                        scope 18 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _27;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _28;
                    scope 13 {
                    }
                }
            }
        }
        scope 7 {
            debug p => _14;
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _45 = const false;
        _44 = const false;
        _5 = const {alloc16: &&str};
        _42 = deref_copy (*_5);
        _4 = get_args::<cmd::index::Args>(_42, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::index::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::index::Args);
        _44 = const true;
        _45 = const true;
        _2 = move _8;
        _10 = discriminant((_2.1: std::option::Option<std::string::String>));
        switchInt(move _10) -> [0: bb7, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb35, unwind continue];
    }

    bb6: {
        _45 = const false;
        _14 = move (((_2.1: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _15 = &_14;
        _9 = <PathBuf as From<&std::string::String>>::from(move _15) -> [return: bb9, unwind: bb42];
    }

    bb7: {
        _13 = &(_2.0: std::string::String);
        _12 = Path::new::<std::string::String>(_13) -> [return: bb8, unwind: bb48];
    }

    bb8: {
        _11 = &_12;
        _43 = deref_copy (*_11);
        _9 = idx_path(_43) -> [return: bb49, unwind: bb48];
    }

    bb9: {
        drop(_14) -> [return: bb10, unwind: bb48];
    }

    bb10: {
        _44 = const false;
        _20 = move (_2.0: std::string::String);
        _19 = std::option::Option::<std::string::String>::Some(move _20);
        _18 = &_19;
        _17 = Config::new(_18) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _21 = (_2.2: std::option::Option<config::Delimiter>);
        _16 = Config::delimiter(move _17, move _21) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        drop(_19) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _25 = &_16;
        _24 = Config::reader_file(move _25) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _23 = <Result<Reader<File>, std::io::Error> as Try>::branch(move _24) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _28 = move ((_23 as Continue).0: csv::Reader<std::fs::File>);
        _22 = move _28;
        _32 = &_9;
        _31 = File::create::<&PathBuf>(move _32) -> [return: bb18, unwind: bb38];
    }

    bb17: {
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _27) -> [return: bb50, unwind: bb39];
    }

    bb18: {
        _30 = <Result<File, std::io::Error> as Try>::branch(move _31) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _35 = move ((_30 as Continue).0: std::fs::File);
        _29 = BufWriter::<File>::new(move _35) -> [return: bb22, unwind: bb38];
    }

    bb21: {
        _34 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb51, unwind: bb38];
    }

    bb22: {
        _38 = &mut _22;
        _39 = &mut _29;
        _37 = RandomAccessSimple::<&mut BufWriter<File>>::create::<File>(_38, move _39) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _36 = <Result<(), csv::Error> as Try>::branch(move _37) -> [return: bb24, unwind: bb37];
    }

    bb24: {
        _40 = discriminant(_36);
        switchInt(move _40) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_29) -> [return: bb28, unwind: bb38];
    }

    bb26: {
        _41 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _41) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        drop(_29) -> [return: bb32, unwind: bb38];
    }

    bb28: {
        drop(_22) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        drop(_16) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        drop(_9) -> [return: bb31, unwind: bb48];
    }

    bb31: {
        _44 = const false;
        _45 = const false;
        goto -> bb36;
    }

    bb32: {
        drop(_22) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        drop(_16) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        drop(_9) -> [return: bb35, unwind: bb48];
    }

    bb35: {
        _44 = const false;
        _45 = const false;
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_29) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_22) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_16) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_19) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_9) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_14) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _46 = discriminant((_2.1: std::option::Option<std::string::String>));
        switchInt(move _46) -> [1: bb45, otherwise: bb43];
    }

    bb45 (cleanup): {
        switchInt(_45) -> [0: bb43, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop((((_2.1: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop((_2.0: std::string::String)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_44) -> [0: bb44, otherwise: bb47];
    }

    bb49: {
        goto -> bb10;
    }

    bb50: {
        goto -> bb33;
    }

    bb51: {
        goto -> bb32;
    }
}

alloc16 (static: cmd::index::USAGE, size: 16, align: 8) {
    ╾────alloc697<imm>────╼ 26 04 00 00 00 00 00 00 │ ╾──────╼&.......
}

alloc697 (size: 1062, align: 1) {
    0x000 │ 0a 43 72 65 61 74 65 73 20 61 6e 20 69 6e 64 65 │ .Creates an inde
    0x010 │ 78 20 6f 66 20 74 68 65 20 67 69 76 65 6e 20 43 │ x of the given C
    0x020 │ 53 56 20 64 61 74 61 2c 20 77 68 69 63 68 20 63 │ SV data, which c
    0x030 │ 61 6e 20 6d 61 6b 65 20 6f 74 68 65 72 20 6f 70 │ an make other op
    0x040 │ 65 72 61 74 69 6f 6e 73 20 6c 69 6b 65 0a 73 6c │ erations like.sl
    0x050 │ 69 63 69 6e 67 2c 20 73 70 6c 69 74 74 69 6e 67 │ icing, splitting
    0x060 │ 20 61 6e 64 20 67 61 74 68 65 72 69 6e 67 20 73 │  and gathering s
    0x070 │ 74 61 74 69 73 74 69 63 73 20 6d 75 63 68 20 66 │ tatistics much f
    0x080 │ 61 73 74 65 72 2e 0a 0a 4e 6f 74 65 20 74 68 61 │ aster...Note tha
    0x090 │ 74 20 74 68 69 73 20 64 6f 65 73 20 6e 6f 74 20 │ t this does not 
    0x0a0 │ 61 63 63 65 70 74 20 43 53 56 20 64 61 74 61 20 │ accept CSV data 
    0x0b0 │ 6f 6e 20 73 74 64 69 6e 2e 20 59 6f 75 20 6d 75 │ on stdin. You mu
    0x0c0 │ 73 74 20 67 69 76 65 20 61 20 66 69 6c 65 0a 70 │ st give a file.p
    0x0d0 │ 61 74 68 2e 20 54 68 65 20 69 6e 64 65 78 20 69 │ ath. The index i
    0x0e0 │ 73 20 63 72 65 61 74 65 64 20 61 74 20 27 70 61 │ s created at 'pa
    0x0f0 │ 74 68 2f 74 6f 2f 69 6e 70 75 74 2e 63 73 76 2e │ th/to/input.csv.
    0x100 │ 69 64 78 27 2e 20 54 68 65 20 69 6e 64 65 78 20 │ idx'. The index 
    0x110 │ 77 69 6c 6c 20 62 65 0a 61 75 74 6f 6d 61 74 69 │ will be.automati
    0x120 │ 63 61 6c 6c 79 20 75 73 65 64 20 62 79 20 63 6f │ cally used by co
    0x130 │ 6d 6d 61 6e 64 73 20 74 68 61 74 20 63 61 6e 20 │ mmands that can 
    0x140 │ 62 65 6e 65 66 69 74 20 66 72 6f 6d 20 69 74 2e │ benefit from it.
    0x150 │ 20 49 66 20 74 68 65 20 6f 72 69 67 69 6e 61 6c │  If the original
    0x160 │ 20 43 53 56 0a 64 61 74 61 20 63 68 61 6e 67 65 │  CSV.data change
    0x170 │ 73 20 61 66 74 65 72 20 74 68 65 20 69 6e 64 65 │ s after the inde
    0x180 │ 78 20 69 73 20 6d 61 64 65 2c 20 63 6f 6d 6d 61 │ x is made, comma
    0x190 │ 6e 64 73 20 74 68 61 74 20 74 72 79 20 74 6f 20 │ nds that try to 
    0x1a0 │ 75 73 65 20 69 74 20 77 69 6c 6c 20 72 65 73 75 │ use it will resu
    0x1b0 │ 6c 74 0a 69 6e 20 61 6e 20 65 72 72 6f 72 20 28 │ lt.in an error (
    0x1c0 │ 79 6f 75 20 68 61 76 65 20 74 6f 20 72 65 67 65 │ you have to rege
    0x1d0 │ 6e 65 72 61 74 65 20 74 68 65 20 69 6e 64 65 78 │ nerate the index
    0x1e0 │ 20 62 65 66 6f 72 65 20 69 74 20 63 61 6e 20 62 │  before it can b
    0x1f0 │ 65 20 75 73 65 64 20 61 67 61 69 6e 29 2e 0a 0a │ e used again)...
    0x200 │ 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 69 │ Usage:.    xsv i
    0x210 │ 6e 64 65 78 20 5b 6f 70 74 69 6f 6e 73 5d 20 3c │ ndex [options] <
    0x220 │ 69 6e 70 75 74 3e 0a 20 20 20 20 78 73 76 20 69 │ input>.    xsv i
    0x230 │ 6e 64 65 78 20 2d 2d 68 65 6c 70 0a 0a 69 6e 64 │ ndex --help..ind
    0x240 │ 65 78 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 │ ex options:.    
    0x250 │ 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 20 3c 66 69 │ -o, --output <fi
    0x260 │ 6c 65 3e 20 20 20 20 57 72 69 74 65 20 69 6e 64 │ le>    Write ind
    0x270 │ 65 78 20 74 6f 20 3c 66 69 6c 65 3e 20 69 6e 73 │ ex to <file> ins
    0x280 │ 74 65 61 64 20 6f 66 20 3c 69 6e 70 75 74 3e 2e │ tead of <input>.
    0x290 │ 69 64 78 2e 0a 20 20 20 20 20 20 20 20 20 20 20 │ idx..           
    0x2a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2b0 │ 47 65 6e 65 72 61 6c 6c 79 2c 20 74 68 69 73 20 │ Generally, this 
    0x2c0 │ 69 73 20 6e 6f 74 20 63 75 72 72 65 6e 74 6c 79 │ is not currently
    0x2d0 │ 20 75 73 65 66 75 6c 20 62 65 63 61 75 73 65 0a │  useful because.
    0x2e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2f0 │ 20 20 20 20 20 20 20 20 20 20 20 74 68 65 20 6f │            the o
    0x300 │ 6e 6c 79 20 77 61 79 20 74 6f 20 75 73 65 20 61 │ nly way to use a
    0x310 │ 6e 20 69 6e 64 65 78 20 69 73 20 69 66 20 69 74 │ n index is if it
    0x320 │ 20 69 73 20 73 70 65 63 69 61 6c 6c 79 0a 20 20 │  is specially.  
    0x330 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x340 │ 20 20 20 20 20 20 20 20 20 6e 61 6d 65 64 20 3c │          named <
    0x350 │ 69 6e 70 75 74 3e 2e 69 64 78 2e 0a 0a 43 6f 6d │ input>.idx...Com
    0x360 │ 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ mon options:.   
    0x370 │ 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 │  -h, --help     
    0x380 │ 20 20 20 20 20 20 20 20 44 69 73 70 6c 61 79 20 │         Display 
    0x390 │ 74 68 69 73 20 6d 65 73 73 61 67 65 0a 20 20 20 │ this message.   
    0x3a0 │ 20 2d 64 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 │  -d, --delimiter
    0x3b0 │ 20 3c 61 72 67 3e 20 20 54 68 65 20 66 69 65 6c │  <arg>  The fiel
    0x3c0 │ 64 20 64 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 │ d delimiter for 
    0x3d0 │ 72 65 61 64 69 6e 67 20 43 53 56 20 64 61 74 61 │ reading CSV data
    0x3e0 │ 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ..              
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 4d 75 73 │              Mus
    0x400 │ 74 20 62 65 20 61 20 73 69 6e 67 6c 65 20 63 68 │ t be a single ch
    0x410 │ 61 72 61 63 74 65 72 2e 20 28 64 65 66 61 75 6c │ aracter. (defaul
    0x420 │ 74 3a 20 2c 29 0a                               │ t: ,).
}

static input::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nRead CSV data with special quoting rules.\n\nGenerally, all xsv commands support basic options like specifying the delimiter\nused in CSV data. This does not cover all possible types of CSV data. For\nexample, some CSV files don't use '\"' for quotes or use different escaping\nstyles.\n\nUsage:\n    xsv input [options] [<input>]\n\ninput options:\n    --quote <arg>          The quote character to use. [default: \"]\n    --escape <arg>         The escape character to use. When not specified,\n                           quotes are escaped by doubling them.\n    --no-quoting           Disable quoting completely.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const input::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize(_1: __D) -> Result<input::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::input::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<input::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::expecting(_1: &input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_u64(_1: input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E> {
    debug self => const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _4: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _5: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _6: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _7: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _8: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _9: __E;
    let mut _10: serde::de::Unexpected<'_>;
    let mut _11: &dyn serde::de::Expected;
    let mut _12: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1];
    }

    bb1: {
        _10 = Unexpected::<'_>::Unsigned(_2);
        _12 = const _;
        _11 = _12 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _9 = <__E as serde::de::Error>::invalid_value(move _10, move _11) -> [return: bb8, unwind continue];
    }

    bb2: {
        _3 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field0;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb9;
    }

    bb3: {
        _4 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field1;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb9;
    }

    bb4: {
        _5 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field2;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb9;
    }

    bb5: {
        _6 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field3;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb9;
    }

    bb6: {
        _7 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field4;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb9;
    }

    bb7: {
        _8 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field5;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb9;
    }

    bb8: {
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

promoted[0] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 6";
        _0 = &_1;
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_str(_1: input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E> {
    debug self => const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _10: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _11: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _12: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _13: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _14: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _15: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;

    bb0: {
        _8 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb18, unwind continue];
    }

    bb1: {
        _9 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field0;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb2: {
        _7 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb17, unwind continue];
    }

    bb3: {
        _10 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field1;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb4: {
        _6 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb16, unwind continue];
    }

    bb5: {
        _11 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field2;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_2, const "flag_quote") -> [return: bb15, unwind continue];
    }

    bb7: {
        _12 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field3;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb19;
    }

    bb8: {
        _4 = <str as PartialEq>::eq(_2, const "flag_escape") -> [return: bb14, unwind continue];
    }

    bb9: {
        _13 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field4;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb19;
    }

    bb10: {
        _3 = <str as PartialEq>::eq(_2, const "flag_no_quoting") -> [return: bb13, unwind continue];
    }

    bb11: {
        _14 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field5;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb19;
    }

    bb12: {
        _15 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__ignore;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb19;
    }

    bb13: {
        switchInt(move _3) -> [0: bb12, otherwise: bb11];
    }

    bb14: {
        switchInt(move _4) -> [0: bb10, otherwise: bb9];
    }

    bb15: {
        switchInt(move _5) -> [0: bb8, otherwise: bb7];
    }

    bb16: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb17: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb18: {
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb19: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_bytes(_1: input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E> {
    debug self => const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _19: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _20: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _21: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _22: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _23: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
    let mut _24: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;

    bb0: {
        _15 = Len((*_2));
        _16 = const 9_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb70, otherwise: bb10];
    }

    bb10: {
        _24 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__ignore;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb76;
    }

    bb11: {
        _12 = Len((*_2));
        _13 = const 11_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb28, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 11]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 11]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 11]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 11]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 11]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 11]) -> [111: bb18, 101: bb23, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 11]) -> [117: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 11]) -> [116: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 11]) -> [112: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 11]) -> [117: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 11]) -> [116: bb71, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[6 of 11]) -> [115: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[7 of 11]) -> [99: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[8 of 11]) -> [97: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[9 of 11]) -> [112: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[10 of 11]) -> [101: bb74, otherwise: bb10];
    }

    bb28: {
        _9 = Len((*_2));
        _10 = const 14_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb43, otherwise: bb29];
    }

    bb29: {
        switchInt((*_2)[0 of 14]) -> [102: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[1 of 14]) -> [108: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[2 of 14]) -> [97: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[3 of 14]) -> [103: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[4 of 14]) -> [95: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[5 of 14]) -> [100: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[6 of 14]) -> [101: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[7 of 14]) -> [108: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[8 of 14]) -> [105: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[9 of 14]) -> [109: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[10 of 14]) -> [105: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[11 of 14]) -> [116: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[12 of 14]) -> [101: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[13 of 14]) -> [114: bb72, otherwise: bb10];
    }

    bb43: {
        _6 = Len((*_2));
        _7 = const 10_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb54, otherwise: bb44];
    }

    bb44: {
        switchInt((*_2)[0 of 10]) -> [102: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[1 of 10]) -> [108: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[2 of 10]) -> [97: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[3 of 10]) -> [103: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[4 of 10]) -> [95: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[5 of 10]) -> [113: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[6 of 10]) -> [117: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[7 of 10]) -> [111: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[8 of 10]) -> [116: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[9 of 10]) -> [101: bb73, otherwise: bb10];
    }

    bb54: {
        _3 = Len((*_2));
        _4 = const 15_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb55];
    }

    bb55: {
        switchInt((*_2)[0 of 15]) -> [102: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[1 of 15]) -> [108: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[2 of 15]) -> [97: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[3 of 15]) -> [103: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[4 of 15]) -> [95: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[5 of 15]) -> [110: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[6 of 15]) -> [111: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[7 of 15]) -> [95: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[8 of 15]) -> [113: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[9 of 15]) -> [117: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[10 of 15]) -> [111: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[11 of 15]) -> [116: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[12 of 15]) -> [105: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[13 of 15]) -> [110: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[14 of 15]) -> [103: bb75, otherwise: bb10];
    }

    bb70: {
        _18 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field0;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb76;
    }

    bb71: {
        _19 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field1;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb76;
    }

    bb72: {
        _20 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field2;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb76;
    }

    bb73: {
        _21 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field3;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb76;
    }

    bb74: {
        _22 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field4;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb76;
    }

    bb75: {
        _23 = input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field::__field5;
        _0 = Result::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb76;
    }

    bb76: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize(_1: __D) -> Result<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor>(move _1, const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::expecting(_1: &input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq(_1: input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<input::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<input::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::input::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: cmd::input::Args;
    let mut _60: std::option::Option<std::string::String>;
    let mut _61: std::option::Option<std::string::String>;
    let mut _62: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::option::Option<std::string::String>;
        let _17: std::option::Option<std::option::Option<std::string::String>>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::option::Option<std::string::String>;
        let mut _63: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<std::option::Option<config::Delimiter>>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: std::option::Option<config::Delimiter>;
            let mut _64: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<config::Delimiter>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: config::Delimiter;
                let mut _65: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<std::option::Option<config::Delimiter>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<config::Delimiter>;
                    let mut _66: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<bool>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: bool;
                        let mut _67: &&str;
                        scope 21 {
                            debug __field5 => _56;
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb44];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb40;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _62 = const _;
        _12 = _62 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb44];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_15) -> [return: bb8, unwind: bb43];
    }

    bb7: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb40;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb39;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _63 = const _;
        _22 = _63 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb43];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::option::Option<std::string::String>);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_24) -> [return: bb14, unwind: bb42];
    }

    bb13: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb39;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb38;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _64 = const _;
        _31 = _64 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb42];
    }

    bb18: {
        _29 = ((_26 as Some).0: std::option::Option<config::Delimiter>);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<Delimiter>(_33) -> [return: bb20, unwind: bb42];
    }

    bb19: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb38;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb38;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<config::Delimiter>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _65 = const _;
        _40 = _65 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb42];
    }

    bb24: {
        _38 = ((_35 as Some).0: config::Delimiter);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_42) -> [return: bb26, unwind: bb42];
    }

    bb25: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb38;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb38;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _66 = const _;
        _49 = _66 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb42];
    }

    bb30: {
        _47 = ((_44 as Some).0: std::option::Option<config::Delimiter>);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<bool>(_51) -> [return: bb32, unwind: bb42];
    }

    bb31: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb38;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb38;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<bool>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _67 = const _;
        _58 = _67 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb42];
    }

    bb36: {
        _56 = ((_53 as Some).0: bool);
        _60 = move _3;
        _61 = move _13;
        _59 = input::Args { arg_input: move _60, flag_output: move _61, flag_delimiter: _29, flag_quote: _38, flag_escape: _47, flag_no_quoting: _56 };
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _59);
        drop(_2) -> [return: bb41, unwind continue];
    }

    bb37: {
        _0 = Result::<input::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb38;
    }

    bb38: {
        drop(_13) -> [return: bb39, unwind: bb43];
    }

    bb39: {
        drop(_3) -> [return: bb40, unwind: bb44];
    }

    bb40: {
        drop(_2) -> [return: bb41, unwind continue];
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_13) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_3) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_2) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }
}

promoted[0] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

fn input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::<impl at src/cmd/input.rs:31:10: 31:21>::visit_map(_1: input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<input::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<input::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::input::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _9: std::result::Result<std::option::Option<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _10: &mut __A;
    let mut _11: isize;
    let mut _14: isize;
    let mut _16: isize;
    let mut _17: bool;
    let _18: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _19: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _20: std::option::Option<std::option::Option<std::string::String>>;
    let mut _21: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: bool;
    let _27: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _28: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _29: std::option::Option<std::option::Option<std::string::String>>;
    let mut _30: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: bool;
    let _36: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _37: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _38: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _39: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _40: &mut __A;
    let mut _41: isize;
    let mut _44: bool;
    let _45: &std::option::Option<config::Delimiter>;
    let mut _46: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _47: std::option::Option<config::Delimiter>;
    let mut _48: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _49: &mut __A;
    let mut _50: isize;
    let mut _53: bool;
    let _54: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _55: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _56: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _57: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _58: &mut __A;
    let mut _59: isize;
    let mut _62: bool;
    let _63: &std::option::Option<bool>;
    let mut _64: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _65: std::option::Option<bool>;
    let mut _66: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _67: &mut __A;
    let mut _68: isize;
    let mut _71: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _72: &mut __A;
    let mut _73: isize;
    let mut _76: isize;
    let mut _78: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: isize;
    let mut _83: isize;
    let mut _85: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _86: isize;
    let mut _90: isize;
    let mut _92: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _93: isize;
    let mut _97: isize;
    let mut _99: std::result::Result<config::Delimiter, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _100: isize;
    let mut _104: isize;
    let mut _106: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _107: isize;
    let mut _111: isize;
    let mut _113: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _114: isize;
    let mut _117: cmd::input::Args;
    let mut _118: std::option::Option<std::string::String>;
    let mut _119: std::option::Option<std::string::String>;
    let mut _120: std::option::Option<config::Delimiter>;
    let mut _121: config::Delimiter;
    let mut _122: std::option::Option<config::Delimiter>;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<std::string::String>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<config::Delimiter>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<config::Delimiter>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<config::Delimiter>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let _75: std::option::Option<std::string::String>;
                            let _77: std::option::Option<std::string::String>;
                            let _80: std::option::Option<std::string::String>;
                            let _81: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 7 {
                                debug __key => _15;
                                let _12: std::option::Option<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field>;
                                let _13: <__A as serde::de::MapAccess<'_>>::Error;
                                let _15: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field;
                                let _24: std::option::Option<std::string::String>;
                                let _25: <__A as serde::de::MapAccess<'_>>::Error;
                                let _33: std::option::Option<std::string::String>;
                                let _34: <__A as serde::de::MapAccess<'_>>::Error;
                                let _42: std::option::Option<config::Delimiter>;
                                let _43: <__A as serde::de::MapAccess<'_>>::Error;
                                let _51: config::Delimiter;
                                let _52: <__A as serde::de::MapAccess<'_>>::Error;
                                let _60: std::option::Option<config::Delimiter>;
                                let _61: <__A as serde::de::MapAccess<'_>>::Error;
                                let _69: bool;
                                let _70: <__A as serde::de::MapAccess<'_>>::Error;
                                let _74: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __val => _12;
                                }
                                scope 9 {
                                    debug __err => _13;
                                }
                                scope 10 {
                                    debug __val => _24;
                                }
                                scope 11 {
                                    debug __err => _25;
                                }
                                scope 12 {
                                    debug __val => _33;
                                }
                                scope 13 {
                                    debug __err => _34;
                                }
                                scope 14 {
                                    debug __val => _42;
                                }
                                scope 15 {
                                    debug __err => _43;
                                }
                                scope 16 {
                                    debug __val => _51;
                                }
                                scope 17 {
                                    debug __err => _52;
                                }
                                scope 18 {
                                    debug __val => _60;
                                }
                                scope 19 {
                                    debug __err => _61;
                                }
                                scope 20 {
                                    debug __val => _69;
                                }
                                scope 21 {
                                    debug __err => _70;
                                }
                                scope 22 {
                                }
                                scope 23 {
                                    debug __val => const IgnoredAny;
                                }
                                scope 24 {
                                    debug __err => _74;
                                }
                            }
                            scope 25 {
                                debug __field0 => _75;
                                let _82: std::option::Option<std::string::String>;
                                let _84: std::option::Option<std::string::String>;
                                let _87: std::option::Option<std::string::String>;
                                let _88: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 29 {
                                    debug __field1 => _82;
                                    let _89: std::option::Option<config::Delimiter>;
                                    let _91: std::option::Option<config::Delimiter>;
                                    let _94: std::option::Option<config::Delimiter>;
                                    let _95: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 33 {
                                        debug __field2 => _89;
                                        let _96: config::Delimiter;
                                        let _98: config::Delimiter;
                                        let _101: config::Delimiter;
                                        let _102: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 37 {
                                            debug __field3 => _96;
                                            let _103: std::option::Option<config::Delimiter>;
                                            let _105: std::option::Option<config::Delimiter>;
                                            let _108: std::option::Option<config::Delimiter>;
                                            let _109: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 41 {
                                                debug __field4 => _103;
                                                let _110: bool;
                                                let _112: bool;
                                                let _115: bool;
                                                let _116: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 45 {
                                                    debug __field5 => _110;
                                                }
                                                scope 46 {
                                                    debug __field5 => _112;
                                                }
                                                scope 47 {
                                                    debug __val => _115;
                                                }
                                                scope 48 {
                                                    debug __err => _116;
                                                }
                                            }
                                            scope 42 {
                                                debug __field4 => _105;
                                            }
                                            scope 43 {
                                                debug __val => _108;
                                            }
                                            scope 44 {
                                                debug __err => _109;
                                            }
                                        }
                                        scope 38 {
                                            debug __field3 => _98;
                                        }
                                        scope 39 {
                                            debug __val => _101;
                                        }
                                        scope 40 {
                                            debug __err => _102;
                                        }
                                    }
                                    scope 34 {
                                        debug __field2 => _91;
                                    }
                                    scope 35 {
                                        debug __val => _94;
                                    }
                                    scope 36 {
                                        debug __err => _95;
                                    }
                                }
                                scope 30 {
                                    debug __field1 => _84;
                                }
                                scope 31 {
                                    debug __val => _87;
                                }
                                scope 32 {
                                    debug __err => _88;
                                }
                            }
                            scope 26 {
                                debug __field0 => _77;
                            }
                            scope 27 {
                                debug __val => _80;
                            }
                            scope 28 {
                                debug __err => _81;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _125 = const false;
        _124 = const false;
        _125 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _124 = const true;
        _4 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _5 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _6 = std::option::Option::<Delimiter>::None;
        _7 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _8 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _10 = &mut _2;
        _9 = <__A as MapAccess<'_>>::next_key::<input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for input::Args>::deserialize::__Field>(_10) -> [return: bb2, unwind: bb116];
    }

    bb2: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_9 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _13);
        goto -> bb101;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_9 as Ok).0: std::option::Option<cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field>);
        _14 = discriminant(_12);
        switchInt(move _14) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _76 = discriminant(_3);
        switchInt(move _76) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb7: {
        _15 = move ((_12 as Some).0: cmd::input::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::input::Args>::deserialize::__Field);
        _16 = discriminant(_15);
        switchInt(move _16) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb53, otherwise: bb8];
    }

    bb8: {
        _72 = &mut _2;
        _71 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_72) -> [return: bb61, unwind: bb116];
    }

    bb9: {
        _18 = &_3;
        _17 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_18) -> [return: bb10, unwind: bb116];
    }

    bb10: {
        switchInt(move _17) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _19 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb116];
    }

    bb12: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _19);
        goto -> bb101;
    }

    bb13: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_22) -> [return: bb14, unwind: bb116];
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb101;
    }

    bb16: {
        _24 = move ((_21 as Ok).0: std::option::Option<std::string::String>);
        _20 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _24);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _125 = const true;
        _3 = move _20;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _125 = const true;
        _3 = move _20;
        goto -> bb116;
    }

    bb19: {
        _27 = &_4;
        _26 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_27) -> [return: bb20, unwind: bb116];
    }

    bb20: {
        switchInt(move _26) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _28 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb22, unwind: bb116];
    }

    bb22: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb101;
    }

    bb23: {
        _31 = &mut _2;
        _30 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_31) -> [return: bb24, unwind: bb116];
    }

    bb24: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _34 = move ((_30 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb101;
    }

    bb26: {
        _33 = move ((_30 as Ok).0: std::option::Option<std::string::String>);
        _29 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _33);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _124 = const true;
        _4 = move _29;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _124 = const true;
        _4 = move _29;
        goto -> bb116;
    }

    bb29: {
        _36 = &_5;
        _35 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_36) -> [return: bb30, unwind: bb116];
    }

    bb30: {
        switchInt(move _35) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _37 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb32, unwind: bb116];
    }

    bb32: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb101;
    }

    bb33: {
        _40 = &mut _2;
        _39 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_40) -> [return: bb34, unwind: bb116];
    }

    bb34: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _43 = move ((_39 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _43);
        goto -> bb101;
    }

    bb36: {
        _42 = ((_39 as Ok).0: std::option::Option<config::Delimiter>);
        _38 = std::option::Option::<std::option::Option<Delimiter>>::Some(_42);
        _5 = move _38;
        goto -> bb1;
    }

    bb37: {
        _45 = &_6;
        _44 = std::option::Option::<Delimiter>::is_some(_45) -> [return: bb38, unwind: bb116];
    }

    bb38: {
        switchInt(move _44) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _46 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_quote") -> [return: bb40, unwind: bb116];
    }

    bb40: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb101;
    }

    bb41: {
        _49 = &mut _2;
        _48 = <__A as MapAccess<'_>>::next_value::<Delimiter>(_49) -> [return: bb42, unwind: bb116];
    }

    bb42: {
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _52 = move ((_48 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _52);
        goto -> bb101;
    }

    bb44: {
        _51 = ((_48 as Ok).0: config::Delimiter);
        _47 = std::option::Option::<Delimiter>::Some(_51);
        _6 = move _47;
        goto -> bb1;
    }

    bb45: {
        _54 = &_7;
        _53 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_54) -> [return: bb46, unwind: bb116];
    }

    bb46: {
        switchInt(move _53) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _55 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_escape") -> [return: bb48, unwind: bb116];
    }

    bb48: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb101;
    }

    bb49: {
        _58 = &mut _2;
        _57 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_58) -> [return: bb50, unwind: bb116];
    }

    bb50: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _61 = move ((_57 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb101;
    }

    bb52: {
        _60 = ((_57 as Ok).0: std::option::Option<config::Delimiter>);
        _56 = std::option::Option::<std::option::Option<Delimiter>>::Some(_60);
        _7 = move _56;
        goto -> bb1;
    }

    bb53: {
        _63 = &_8;
        _62 = std::option::Option::<bool>::is_some(_63) -> [return: bb54, unwind: bb116];
    }

    bb54: {
        switchInt(move _62) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _64 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_quoting") -> [return: bb56, unwind: bb116];
    }

    bb56: {
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb101;
    }

    bb57: {
        _67 = &mut _2;
        _66 = <__A as MapAccess<'_>>::next_value::<bool>(_67) -> [return: bb58, unwind: bb116];
    }

    bb58: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _70 = move ((_66 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _70);
        goto -> bb101;
    }

    bb60: {
        _69 = ((_66 as Ok).0: bool);
        _65 = std::option::Option::<bool>::Some(_69);
        _8 = move _65;
        goto -> bb1;
    }

    bb61: {
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb1, 1: bb62, otherwise: bb4];
    }

    bb62: {
        _74 = move ((_71 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb101;
    }

    bb63: {
        _78 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb65, unwind: bb116];
    }

    bb64: {
        _125 = const false;
        _77 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _75 = move _77;
        goto -> bb68;
    }

    bb65: {
        _79 = discriminant(_78);
        switchInt(move _79) -> [0: bb67, 1: bb66, otherwise: bb4];
    }

    bb66: {
        _81 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _81);
        goto -> bb101;
    }

    bb67: {
        _80 = move ((_78 as Ok).0: std::option::Option<std::string::String>);
        _75 = move _80;
        goto -> bb68;
    }

    bb68: {
        _83 = discriminant(_4);
        switchInt(move _83) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        _85 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb71, unwind: bb104];
    }

    bb70: {
        _124 = const false;
        _84 = move ((_4 as Some).0: std::option::Option<std::string::String>);
        _82 = move _84;
        goto -> bb74;
    }

    bb71: {
        _86 = discriminant(_85);
        switchInt(move _86) -> [0: bb73, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _88 = move ((_85 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _88);
        goto -> bb100;
    }

    bb73: {
        _87 = move ((_85 as Ok).0: std::option::Option<std::string::String>);
        _82 = move _87;
        goto -> bb74;
    }

    bb74: {
        _90 = discriminant(_5);
        switchInt(move _90) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        _92 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb77, unwind: bb103];
    }

    bb76: {
        _91 = ((_5 as Some).0: std::option::Option<config::Delimiter>);
        _89 = _91;
        goto -> bb80;
    }

    bb77: {
        _93 = discriminant(_92);
        switchInt(move _93) -> [0: bb79, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _95 = move ((_92 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _95);
        goto -> bb99;
    }

    bb79: {
        _94 = ((_92 as Ok).0: std::option::Option<config::Delimiter>);
        _89 = _94;
        goto -> bb80;
    }

    bb80: {
        _97 = discriminant(_6);
        switchInt(move _97) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        _99 = serde::private::de::missing_field::<'_, Delimiter, <__A as MapAccess<'_>>::Error>(const "flag_quote") -> [return: bb83, unwind: bb103];
    }

    bb82: {
        _98 = ((_6 as Some).0: config::Delimiter);
        _96 = _98;
        goto -> bb86;
    }

    bb83: {
        _100 = discriminant(_99);
        switchInt(move _100) -> [0: bb85, 1: bb84, otherwise: bb4];
    }

    bb84: {
        _102 = move ((_99 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _102);
        goto -> bb99;
    }

    bb85: {
        _101 = ((_99 as Ok).0: config::Delimiter);
        _96 = _101;
        goto -> bb86;
    }

    bb86: {
        _104 = discriminant(_7);
        switchInt(move _104) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        _106 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_escape") -> [return: bb89, unwind: bb103];
    }

    bb88: {
        _105 = ((_7 as Some).0: std::option::Option<config::Delimiter>);
        _103 = _105;
        goto -> bb92;
    }

    bb89: {
        _107 = discriminant(_106);
        switchInt(move _107) -> [0: bb91, 1: bb90, otherwise: bb4];
    }

    bb90: {
        _109 = move ((_106 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _109);
        goto -> bb99;
    }

    bb91: {
        _108 = ((_106 as Ok).0: std::option::Option<config::Delimiter>);
        _103 = _108;
        goto -> bb92;
    }

    bb92: {
        _111 = discriminant(_8);
        switchInt(move _111) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        _113 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_quoting") -> [return: bb95, unwind: bb103];
    }

    bb94: {
        _112 = ((_8 as Some).0: bool);
        _110 = _112;
        goto -> bb98;
    }

    bb95: {
        _114 = discriminant(_113);
        switchInt(move _114) -> [0: bb97, 1: bb96, otherwise: bb4];
    }

    bb96: {
        _116 = move ((_113 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Err(move _116);
        goto -> bb99;
    }

    bb97: {
        _115 = ((_113 as Ok).0: bool);
        _110 = _115;
        goto -> bb98;
    }

    bb98: {
        _118 = move _75;
        _119 = move _82;
        _120 = _89;
        _121 = _96;
        _122 = _103;
        _123 = _110;
        _117 = input::Args { arg_input: move _118, flag_output: move _119, flag_delimiter: move _120, flag_quote: move _121, flag_escape: move _122, flag_no_quoting: move _123 };
        _0 = Result::<input::Args, <__A as MapAccess<'_>>::Error>::Ok(move _117);
        _124 = const false;
        _125 = const false;
        drop(_2) -> [return: bb102, unwind continue];
    }

    bb99: {
        drop(_82) -> [return: bb100, unwind: bb104];
    }

    bb100: {
        drop(_75) -> [return: bb101, unwind: bb116];
    }

    bb101: {
        _126 = discriminant(_4);
        switchInt(move _126) -> [1: bb109, otherwise: bb108];
    }

    bb102: {
        return;
    }

    bb103 (cleanup): {
        drop(_82) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_75) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        _129 = discriminant(_3);
        switchInt(move _129) -> [1: bb117, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop(_2) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }

    bb108: {
        _124 = const false;
        _127 = discriminant(_3);
        switchInt(move _127) -> [1: bb112, otherwise: bb111];
    }

    bb109: {
        switchInt(_124) -> [0: bb108, otherwise: bb110];
    }

    bb110: {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb108, unwind: bb105];
    }

    bb111: {
        _125 = const false;
        drop(_2) -> [return: bb102, unwind continue];
    }

    bb112: {
        switchInt(_125) -> [0: bb111, otherwise: bb113];
    }

    bb113: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb111, unwind: bb106];
    }

    bb114 (cleanup): {
        switchInt(_124) -> [0: bb105, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        _128 = discriminant(_4);
        switchInt(move _128) -> [1: bb114, otherwise: bb105];
    }

    bb117 (cleanup): {
        switchInt(_125) -> [0: bb106, otherwise: bb118];
    }

    bb118 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb106, unwind terminate(cleanup)];
    }
}

const input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 6];
    let _2: &[&str; 6];
    let _3: [&str; 6];
    let mut _4: &[&str; 6];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in input::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/input.rs:31:10: 31:21>::deserialize::FIELDS: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];

    bb0: {
        _1 = [const "arg_input", const "flag_output", const "flag_delimiter", const "flag_quote", const "flag_escape", const "flag_no_quoting"];
        _0 = &_1;
        return;
    }
}

fn input::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::input::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::input::Args>;
    let mut _4: std::result::Result<cmd::input::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::input::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let mut _12: config::Config;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: std::option::Option<config::Delimiter>;
    let mut _15: u8;
    let mut _16: config::Delimiter;
    let _18: &std::option::Option<std::string::String>;
    let mut _19: isize;
    let mut _21: config::Config;
    let mut _22: config::Config;
    let mut _23: config::Config;
    let mut _24: std::option::Option<u8>;
    let mut _25: u8;
    let mut _26: bool;
    let mut _27: config::Config;
    let mut _28: config::Config;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _31: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _32: &config::Config;
    let mut _33: isize;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _38: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _39: &config::Config;
    let mut _40: isize;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _45: std::result::Result<bool, csv::Error>;
    let mut _46: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _47: &mut csv::ByteRecord;
    let mut _48: isize;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _52: std::result::Result<(), csv::Error>;
    let mut _53: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _54: &csv::ByteRecord;
    let mut _55: isize;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _58: std::result::Result<(), std::io::Error>;
    let mut _59: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _60: isize;
    let mut _62: &str;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    scope 1 {
        debug args => _2;
        let mut _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let _17: config::Config;
            scope 7 {
                debug wconfig => _17;
                let mut _29: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _35: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 8 {
                    debug escape => _20;
                    let _20: config::Delimiter;
                }
                scope 9 {
                    debug rdr => _29;
                    let mut _36: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    let _41: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _42: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    scope 14 {
                        debug wtr => _36;
                        let mut _43: csv::ByteRecord;
                        scope 19 {
                            debug row => _43;
                            let _49: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _50: bool;
                            let _56: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _61: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 20 {
                                debug residual => _49;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _50;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug residual => _56;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => const ();
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug residual => _61;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => const ();
                                scope 31 {
                                }
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _41;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _42;
                        scope 18 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _34;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _35;
                    scope 13 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _64 = const false;
        _65 = const false;
        _63 = const false;
        _5 = const {alloc17: &&str};
        _62 = deref_copy (*_5);
        _4 = get_args::<input::Args>(_62, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<input::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::input::Args);
        _2 = move _8;
        _13 = &(_2.0: std::option::Option<std::string::String>);
        _12 = Config::new(_13) -> [return: bb6, unwind: bb56];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb51, unwind continue];
    }

    bb6: {
        _14 = (_2.2: std::option::Option<config::Delimiter>);
        _11 = Config::delimiter(move _12, move _14) -> [return: bb7, unwind: bb56];
    }

    bb7: {
        _10 = Config::no_headers(move _11, const true) -> [return: bb8, unwind: bb56];
    }

    bb8: {
        _65 = const true;
        _16 = (_2.3: config::Delimiter);
        _15 = Delimiter::as_byte(move _16) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _65 = const false;
        _9 = Config::quote(move _10, move _15) -> [return: bb10, unwind: bb65];
    }

    bb10: {
        _64 = const true;
        _65 = const false;
        _18 = &(_2.1: std::option::Option<std::string::String>);
        _17 = Config::new(_18) -> [return: bb11, unwind: bb63];
    }

    bb11: {
        _19 = discriminant((_2.4: std::option::Option<config::Delimiter>));
        switchInt(move _19) -> [1: bb12, otherwise: bb16];
    }

    bb12: {
        _20 = (((_2.4: std::option::Option<config::Delimiter>) as Some).0: config::Delimiter);
        _64 = const false;
        _63 = const true;
        _23 = move _9;
        _25 = Delimiter::as_byte(_20) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        _24 = std::option::Option::<u8>::Some(move _25);
        _63 = const false;
        _22 = Config::escape(move _23, move _24) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        _63 = const false;
        _21 = Config::double_quote(move _22, const false) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        _64 = const true;
        _9 = move _21;
        goto -> bb16;
    }

    bb16: {
        _26 = (_2.5: bool);
        switchInt(move _26) -> [0: bb19, otherwise: bb17];
    }

    bb17: {
        _64 = const false;
        _28 = move _9;
        _27 = Config::quoting(move _28, const false) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _64 = const true;
        _9 = move _27;
        goto -> bb19;
    }

    bb19: {
        _32 = &_9;
        _31 = Config::reader(move _32) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _30 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _31) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _35 = move ((_30 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _29 = move _35;
        _39 = &_17;
        _38 = Config::writer(move _39) -> [return: bb24, unwind: bb54];
    }

    bb23: {
        _34 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb66, unwind: bb55];
    }

    bb24: {
        _37 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _38) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _42 = move ((_37 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _36 = move _42;
        _43 = ByteRecord::new() -> [return: bb67, unwind: bb53];
    }

    bb27: {
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _41) -> [return: bb68, unwind: bb54];
    }

    bb28: {
        _46 = &mut _29;
        _47 = &mut _43;
        _45 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _46, _47) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        _44 = <Result<bool, csv::Error> as Try>::branch(move _45) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _48 = discriminant(_44);
        switchInt(move _48) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        _50 = ((_44 as Continue).0: bool);
        switchInt(_50) -> [0: bb59, otherwise: bb58];
    }

    bb32: {
        _49 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _49) -> [return: bb69, unwind: bb52];
    }

    bb33: {
        _51 = <Result<(), csv::Error> as Try>::branch(move _52) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb28, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _56 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _56) -> [return: bb70, unwind: bb52];
    }

    bb36: {
        _57 = <Result<(), std::io::Error> as Try>::branch(move _58) -> [return: bb37, unwind: bb52];
    }

    bb37: {
        _60 = discriminant(_57);
        switchInt(move _60) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_43) -> [return: bb40, unwind: bb53];
    }

    bb39: {
        _61 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _61) -> [return: bb71, unwind: bb52];
    }

    bb40: {
        drop(_36) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        drop(_29) -> [return: bb42, unwind: bb55];
    }

    bb42: {
        drop(_17) -> [return: bb43, unwind: bb63];
    }

    bb43: {
        drop(_9) -> [return: bb44, unwind: bb56];
    }

    bb44: {
        _64 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb45: {
        drop(_43) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        drop(_36) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        drop(_29) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        drop(_17) -> [return: bb49, unwind: bb63];
    }

    bb49: {
        drop(_9) -> [return: bb50, unwind: bb56];
    }

    bb50: {
        _64 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_43) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_36) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_29) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_17) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_2) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58: {
        _53 = &mut _36;
        _54 = &_43;
        _52 = Writer::<Box<dyn std::io::Write>>::write_record::<&ByteRecord, &[u8]>(move _53, move _54) -> [return: bb33, unwind: bb52];
    }

    bb59: {
        _59 = &mut _36;
        _58 = Writer::<Box<dyn std::io::Write>>::flush(move _59) -> [return: bb36, unwind: bb52];
    }

    bb60 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_63) -> [0: bb55, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_9) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_64) -> [0: bb56, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_10) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_65) -> [0: bb56, otherwise: bb64];
    }

    bb66: {
        goto -> bb48;
    }

    bb67: {
        goto -> bb28;
    }

    bb68: {
        goto -> bb47;
    }

    bb69: {
        goto -> bb45;
    }

    bb70: {
        goto -> bb45;
    }

    bb71: {
        goto -> bb45;
    }
}

alloc17 (static: input::USAGE, size: 16, align: 8) {
    ╾────alloc773<imm>────╼ 69 03 00 00 00 00 00 00 │ ╾──────╼i.......
}

alloc773 (size: 873, align: 1) {
    0x000 │ 0a 52 65 61 64 20 43 53 56 20 64 61 74 61 20 77 │ .Read CSV data w
    0x010 │ 69 74 68 20 73 70 65 63 69 61 6c 20 71 75 6f 74 │ ith special quot
    0x020 │ 69 6e 67 20 72 75 6c 65 73 2e 0a 0a 47 65 6e 65 │ ing rules...Gene
    0x030 │ 72 61 6c 6c 79 2c 20 61 6c 6c 20 78 73 76 20 63 │ rally, all xsv c
    0x040 │ 6f 6d 6d 61 6e 64 73 20 73 75 70 70 6f 72 74 20 │ ommands support 
    0x050 │ 62 61 73 69 63 20 6f 70 74 69 6f 6e 73 20 6c 69 │ basic options li
    0x060 │ 6b 65 20 73 70 65 63 69 66 79 69 6e 67 20 74 68 │ ke specifying th
    0x070 │ 65 20 64 65 6c 69 6d 69 74 65 72 0a 75 73 65 64 │ e delimiter.used
    0x080 │ 20 69 6e 20 43 53 56 20 64 61 74 61 2e 20 54 68 │  in CSV data. Th
    0x090 │ 69 73 20 64 6f 65 73 20 6e 6f 74 20 63 6f 76 65 │ is does not cove
    0x0a0 │ 72 20 61 6c 6c 20 70 6f 73 73 69 62 6c 65 20 74 │ r all possible t
    0x0b0 │ 79 70 65 73 20 6f 66 20 43 53 56 20 64 61 74 61 │ ypes of CSV data
    0x0c0 │ 2e 20 46 6f 72 0a 65 78 61 6d 70 6c 65 2c 20 73 │ . For.example, s
    0x0d0 │ 6f 6d 65 20 43 53 56 20 66 69 6c 65 73 20 64 6f │ ome CSV files do
    0x0e0 │ 6e 27 74 20 75 73 65 20 27 22 27 20 66 6f 72 20 │ n't use '"' for 
    0x0f0 │ 71 75 6f 74 65 73 20 6f 72 20 75 73 65 20 64 69 │ quotes or use di
    0x100 │ 66 66 65 72 65 6e 74 20 65 73 63 61 70 69 6e 67 │ fferent escaping
    0x110 │ 0a 73 74 79 6c 65 73 2e 0a 0a 55 73 61 67 65 3a │ .styles...Usage:
    0x120 │ 0a 20 20 20 20 78 73 76 20 69 6e 70 75 74 20 5b │ .    xsv input [
    0x130 │ 6f 70 74 69 6f 6e 73 5d 20 5b 3c 69 6e 70 75 74 │ options] [<input
    0x140 │ 3e 5d 0a 0a 69 6e 70 75 74 20 6f 70 74 69 6f 6e │ >]..input option
    0x150 │ 73 3a 0a 20 20 20 20 2d 2d 71 75 6f 74 65 20 3c │ s:.    --quote <
    0x160 │ 61 72 67 3e 20 20 20 20 20 20 20 20 20 20 54 68 │ arg>          Th
    0x170 │ 65 20 71 75 6f 74 65 20 63 68 61 72 61 63 74 65 │ e quote characte
    0x180 │ 72 20 74 6f 20 75 73 65 2e 20 5b 64 65 66 61 75 │ r to use. [defau
    0x190 │ 6c 74 3a 20 22 5d 0a 20 20 20 20 2d 2d 65 73 63 │ lt: "].    --esc
    0x1a0 │ 61 70 65 20 3c 61 72 67 3e 20 20 20 20 20 20 20 │ ape <arg>       
    0x1b0 │ 20 20 54 68 65 20 65 73 63 61 70 65 20 63 68 61 │   The escape cha
    0x1c0 │ 72 61 63 74 65 72 20 74 6f 20 75 73 65 2e 20 57 │ racter to use. W
    0x1d0 │ 68 65 6e 20 6e 6f 74 20 73 70 65 63 69 66 69 65 │ hen not specifie
    0x1e0 │ 64 2c 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ d,.             
    0x1f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 71 75 │               qu
    0x200 │ 6f 74 65 73 20 61 72 65 20 65 73 63 61 70 65 64 │ otes are escaped
    0x210 │ 20 62 79 20 64 6f 75 62 6c 69 6e 67 20 74 68 65 │  by doubling the
    0x220 │ 6d 2e 0a 20 20 20 20 2d 2d 6e 6f 2d 71 75 6f 74 │ m..    --no-quot
    0x230 │ 69 6e 67 20 20 20 20 20 20 20 20 20 20 20 44 69 │ ing           Di
    0x240 │ 73 61 62 6c 65 20 71 75 6f 74 69 6e 67 20 63 6f │ sable quoting co
    0x250 │ 6d 70 6c 65 74 65 6c 79 2e 0a 0a 43 6f 6d 6d 6f │ mpletely...Commo
    0x260 │ 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d │ n options:.    -
    0x270 │ 68 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 20 20 │ h, --help       
    0x280 │ 20 20 20 20 20 20 44 69 73 70 6c 61 79 20 74 68 │       Display th
    0x290 │ 69 73 20 6d 65 73 73 61 67 65 0a 20 20 20 20 2d │ is message.    -
    0x2a0 │ 6f 2c 20 2d 2d 6f 75 74 70 75 74 20 3c 66 69 6c │ o, --output <fil
    0x2b0 │ 65 3e 20 20 20 20 57 72 69 74 65 20 6f 75 74 70 │ e>    Write outp
    0x2c0 │ 75 74 20 74 6f 20 3c 66 69 6c 65 3e 20 69 6e 73 │ ut to <file> ins
    0x2d0 │ 74 65 61 64 20 6f 66 20 73 74 64 6f 75 74 2e 0a │ tead of stdout..
    0x2e0 │ 20 20 20 20 2d 64 2c 20 2d 2d 64 65 6c 69 6d 69 │     -d, --delimi
    0x2f0 │ 74 65 72 20 3c 61 72 67 3e 20 20 54 68 65 20 66 │ ter <arg>  The f
    0x300 │ 69 65 6c 64 20 64 65 6c 69 6d 69 74 65 72 20 66 │ ield delimiter f
    0x310 │ 6f 72 20 72 65 61 64 69 6e 67 20 43 53 56 20 64 │ or reading CSV d
    0x320 │ 61 74 61 2e 0a 20 20 20 20 20 20 20 20 20 20 20 │ ata..           
    0x330 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x340 │ 4d 75 73 74 20 62 65 20 61 20 73 69 6e 67 6c 65 │ Must be a single
    0x350 │ 20 63 68 61 72 61 63 74 65 72 2e 20 28 64 65 66 │  character. (def
    0x360 │ 61 75 6c 74 3a 20 2c 29 0a                      │ ault: ,).
}

static join::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nJoins two sets of CSV data on the specified columns.\n\nThe default join operation is an 'inner' join. This corresponds to the\nintersection of rows on the keys specified.\n\nJoins are always done by ignoring leading and trailing whitespace. By default,\njoins are done case sensitively, but this can be disabled with the --no-case\nflag.\n\nThe columns arguments specify the columns to join for each input. Columns can\nbe referenced by name or index, starting at 1. Specify multiple columns by\nseparating them with a comma. Specify a range of columns with `-`. Both\ncolumns1 and columns2 must specify exactly the same number of columns.\n(See 'xsv select --help' for the full syntax.)\n\nUsage:\n    xsv join [options] <columns1> <input1> <columns2> <input2>\n    xsv join --help\n\njoin options:\n    --no-case              When set, joins are done case insensitively.\n    --left                 Do a 'left outer' join. This returns all rows in\n                           first CSV data set, including rows with no\n                           corresponding row in the second data set. When no\n                           corresponding row exists, it is padded out with\n                           empty fields.\n    --right                Do a 'right outer' join. This returns all rows in\n                           second CSV data set, including rows with no\n                           corresponding row in the first data set. When no\n                           corresponding row exists, it is padded out with\n                           empty fields. (This is the reverse of 'outer left'.)\n    --full                 Do a 'full outer' join. This returns all rows in\n                           both data sets with matching records joined. If\n                           there is no match, the missing side will be padded\n                           out with empty fields. (This is the combination of\n                           'outer left' and 'outer right'.)\n    --cross                USE WITH CAUTION.\n                           This returns the cartesian product of the CSV\n                           data sets given. The number of rows return is\n                           equal to N * M, where N and M correspond to the\n                           number of rows in the given data sets, respectively.\n    --nulls                When set, joins will work on empty fields.\n                           Otherwise, empty fields are completely ignored.\n                           (In fact, any row that has an empty field in the\n                           key specified is ignored.)\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. (i.e., They are not searched, analyzed,\n                           sliced, etc.)\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const join::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize(_1: __D) -> Result<join::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::join::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<join::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::expecting(_1: &join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_u64(_1: join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E> {
    debug self => const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _4: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _5: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _6: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _7: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _8: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _9: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _10: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _11: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _12: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _13: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _14: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _15: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _16: __E;
    let mut _17: serde::de::Unexpected<'_>;
    let mut _18: &dyn serde::de::Expected;
    let mut _19: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, otherwise: bb1];
    }

    bb1: {
        _17 = Unexpected::<'_>::Unsigned(_2);
        _19 = const _;
        _18 = _19 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _16 = <__E as serde::de::Error>::invalid_value(move _17, move _18) -> [return: bb15, unwind continue];
    }

    bb2: {
        _3 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field0;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb16;
    }

    bb3: {
        _4 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field1;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb16;
    }

    bb4: {
        _5 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field2;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb16;
    }

    bb5: {
        _6 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field3;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb16;
    }

    bb6: {
        _7 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field4;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb16;
    }

    bb7: {
        _8 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field5;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb16;
    }

    bb8: {
        _9 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field6;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb16;
    }

    bb9: {
        _10 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field7;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb16;
    }

    bb10: {
        _11 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field8;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb16;
    }

    bb11: {
        _12 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field9;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb16;
    }

    bb12: {
        _13 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field10;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb16;
    }

    bb13: {
        _14 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field11;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb16;
    }

    bb14: {
        _15 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field12;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb16;
    }

    bb15: {
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Err(move _16);
        goto -> bb16;
    }

    bb16: {
        return;
    }
}

promoted[0] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 13";
        _0 = &_1;
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_str(_1: join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E> {
    debug self => const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _17: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _18: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _19: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _20: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _21: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _22: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _23: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _24: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _25: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _26: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _27: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _28: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _29: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;

    bb0: {
        _15 = <str as PartialEq>::eq(_2, const "arg_columns1") -> [return: bb39, unwind continue];
    }

    bb1: {
        _16 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field0;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb40;
    }

    bb2: {
        _14 = <str as PartialEq>::eq(_2, const "arg_input1") -> [return: bb38, unwind continue];
    }

    bb3: {
        _17 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field1;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb40;
    }

    bb4: {
        _13 = <str as PartialEq>::eq(_2, const "arg_columns2") -> [return: bb37, unwind continue];
    }

    bb5: {
        _18 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field2;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb40;
    }

    bb6: {
        _12 = <str as PartialEq>::eq(_2, const "arg_input2") -> [return: bb36, unwind continue];
    }

    bb7: {
        _19 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field3;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb40;
    }

    bb8: {
        _11 = <str as PartialEq>::eq(_2, const "flag_left") -> [return: bb35, unwind continue];
    }

    bb9: {
        _20 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field4;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb40;
    }

    bb10: {
        _10 = <str as PartialEq>::eq(_2, const "flag_right") -> [return: bb34, unwind continue];
    }

    bb11: {
        _21 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field5;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb40;
    }

    bb12: {
        _9 = <str as PartialEq>::eq(_2, const "flag_full") -> [return: bb33, unwind continue];
    }

    bb13: {
        _22 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field6;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb40;
    }

    bb14: {
        _8 = <str as PartialEq>::eq(_2, const "flag_cross") -> [return: bb32, unwind continue];
    }

    bb15: {
        _23 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field7;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb40;
    }

    bb16: {
        _7 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb31, unwind continue];
    }

    bb17: {
        _24 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field8;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb40;
    }

    bb18: {
        _6 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb30, unwind continue];
    }

    bb19: {
        _25 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field9;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb40;
    }

    bb20: {
        _5 = <str as PartialEq>::eq(_2, const "flag_no_case") -> [return: bb29, unwind continue];
    }

    bb21: {
        _26 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field10;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb40;
    }

    bb22: {
        _4 = <str as PartialEq>::eq(_2, const "flag_nulls") -> [return: bb28, unwind continue];
    }

    bb23: {
        _27 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field11;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb40;
    }

    bb24: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb27, unwind continue];
    }

    bb25: {
        _28 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field12;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb40;
    }

    bb26: {
        _29 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__ignore;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb40;
    }

    bb27: {
        switchInt(move _3) -> [0: bb26, otherwise: bb25];
    }

    bb28: {
        switchInt(move _4) -> [0: bb24, otherwise: bb23];
    }

    bb29: {
        switchInt(move _5) -> [0: bb22, otherwise: bb21];
    }

    bb30: {
        switchInt(move _6) -> [0: bb20, otherwise: bb19];
    }

    bb31: {
        switchInt(move _7) -> [0: bb18, otherwise: bb17];
    }

    bb32: {
        switchInt(move _8) -> [0: bb16, otherwise: bb15];
    }

    bb33: {
        switchInt(move _9) -> [0: bb14, otherwise: bb13];
    }

    bb34: {
        switchInt(move _10) -> [0: bb12, otherwise: bb11];
    }

    bb35: {
        switchInt(move _11) -> [0: bb10, otherwise: bb9];
    }

    bb36: {
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb37: {
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb38: {
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb39: {
        switchInt(move _15) -> [0: bb2, otherwise: bb1];
    }

    bb40: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_bytes(_1: join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E> {
    debug self => const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _22: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _23: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _24: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _25: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _26: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _27: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _28: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _29: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _30: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _31: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _32: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _33: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
    let mut _34: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 12_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb25, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 12]) -> [97: bb2, 102: bb14, otherwise: bb13];
    }

    bb2: {
        switchInt((*_2)[1 of 12]) -> [114: bb3, otherwise: bb13];
    }

    bb3: {
        switchInt((*_2)[2 of 12]) -> [103: bb4, otherwise: bb13];
    }

    bb4: {
        switchInt((*_2)[3 of 12]) -> [95: bb5, otherwise: bb13];
    }

    bb5: {
        switchInt((*_2)[4 of 12]) -> [99: bb6, otherwise: bb13];
    }

    bb6: {
        switchInt((*_2)[5 of 12]) -> [111: bb7, otherwise: bb13];
    }

    bb7: {
        switchInt((*_2)[6 of 12]) -> [108: bb8, otherwise: bb13];
    }

    bb8: {
        switchInt((*_2)[7 of 12]) -> [117: bb9, otherwise: bb13];
    }

    bb9: {
        switchInt((*_2)[8 of 12]) -> [109: bb10, otherwise: bb13];
    }

    bb10: {
        switchInt((*_2)[9 of 12]) -> [110: bb11, otherwise: bb13];
    }

    bb11: {
        switchInt((*_2)[10 of 12]) -> [115: bb12, otherwise: bb13];
    }

    bb12: {
        switchInt((*_2)[11 of 12]) -> [49: bb109, 50: bb111, otherwise: bb13];
    }

    bb13: {
        _34 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__ignore;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb122;
    }

    bb14: {
        switchInt((*_2)[1 of 12]) -> [108: bb15, otherwise: bb13];
    }

    bb15: {
        switchInt((*_2)[2 of 12]) -> [97: bb16, otherwise: bb13];
    }

    bb16: {
        switchInt((*_2)[3 of 12]) -> [103: bb17, otherwise: bb13];
    }

    bb17: {
        switchInt((*_2)[4 of 12]) -> [95: bb18, otherwise: bb13];
    }

    bb18: {
        switchInt((*_2)[5 of 12]) -> [110: bb19, otherwise: bb13];
    }

    bb19: {
        switchInt((*_2)[6 of 12]) -> [111: bb20, otherwise: bb13];
    }

    bb20: {
        switchInt((*_2)[7 of 12]) -> [95: bb21, otherwise: bb13];
    }

    bb21: {
        switchInt((*_2)[8 of 12]) -> [99: bb22, otherwise: bb13];
    }

    bb22: {
        switchInt((*_2)[9 of 12]) -> [97: bb23, otherwise: bb13];
    }

    bb23: {
        switchInt((*_2)[10 of 12]) -> [115: bb24, otherwise: bb13];
    }

    bb24: {
        switchInt((*_2)[11 of 12]) -> [101: bb119, otherwise: bb13];
    }

    bb25: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb53, otherwise: bb26];
    }

    bb26: {
        switchInt((*_2)[0 of 10]) -> [97: bb27, 102: bb36, otherwise: bb13];
    }

    bb27: {
        switchInt((*_2)[1 of 10]) -> [114: bb28, otherwise: bb13];
    }

    bb28: {
        switchInt((*_2)[2 of 10]) -> [103: bb29, otherwise: bb13];
    }

    bb29: {
        switchInt((*_2)[3 of 10]) -> [95: bb30, otherwise: bb13];
    }

    bb30: {
        switchInt((*_2)[4 of 10]) -> [105: bb31, otherwise: bb13];
    }

    bb31: {
        switchInt((*_2)[5 of 10]) -> [110: bb32, otherwise: bb13];
    }

    bb32: {
        switchInt((*_2)[6 of 10]) -> [112: bb33, otherwise: bb13];
    }

    bb33: {
        switchInt((*_2)[7 of 10]) -> [117: bb34, otherwise: bb13];
    }

    bb34: {
        switchInt((*_2)[8 of 10]) -> [116: bb35, otherwise: bb13];
    }

    bb35: {
        switchInt((*_2)[9 of 10]) -> [49: bb110, 50: bb112, otherwise: bb13];
    }

    bb36: {
        switchInt((*_2)[1 of 10]) -> [108: bb37, otherwise: bb13];
    }

    bb37: {
        switchInt((*_2)[2 of 10]) -> [97: bb38, otherwise: bb13];
    }

    bb38: {
        switchInt((*_2)[3 of 10]) -> [103: bb39, otherwise: bb13];
    }

    bb39: {
        switchInt((*_2)[4 of 10]) -> [95: bb40, otherwise: bb13];
    }

    bb40: {
        switchInt((*_2)[5 of 10]) -> [114: bb41, 99: bb45, 110: bb49, otherwise: bb13];
    }

    bb41: {
        switchInt((*_2)[6 of 10]) -> [105: bb42, otherwise: bb13];
    }

    bb42: {
        switchInt((*_2)[7 of 10]) -> [103: bb43, otherwise: bb13];
    }

    bb43: {
        switchInt((*_2)[8 of 10]) -> [104: bb44, otherwise: bb13];
    }

    bb44: {
        switchInt((*_2)[9 of 10]) -> [116: bb114, otherwise: bb13];
    }

    bb45: {
        switchInt((*_2)[6 of 10]) -> [114: bb46, otherwise: bb13];
    }

    bb46: {
        switchInt((*_2)[7 of 10]) -> [111: bb47, otherwise: bb13];
    }

    bb47: {
        switchInt((*_2)[8 of 10]) -> [115: bb48, otherwise: bb13];
    }

    bb48: {
        switchInt((*_2)[9 of 10]) -> [115: bb116, otherwise: bb13];
    }

    bb49: {
        switchInt((*_2)[6 of 10]) -> [117: bb50, otherwise: bb13];
    }

    bb50: {
        switchInt((*_2)[7 of 10]) -> [108: bb51, otherwise: bb13];
    }

    bb51: {
        switchInt((*_2)[8 of 10]) -> [108: bb52, otherwise: bb13];
    }

    bb52: {
        switchInt((*_2)[9 of 10]) -> [115: bb120, otherwise: bb13];
    }

    bb53: {
        _12 = Len((*_2));
        _13 = const 9_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb66, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 9]) -> [102: bb55, otherwise: bb13];
    }

    bb55: {
        switchInt((*_2)[1 of 9]) -> [108: bb56, otherwise: bb13];
    }

    bb56: {
        switchInt((*_2)[2 of 9]) -> [97: bb57, otherwise: bb13];
    }

    bb57: {
        switchInt((*_2)[3 of 9]) -> [103: bb58, otherwise: bb13];
    }

    bb58: {
        switchInt((*_2)[4 of 9]) -> [95: bb59, otherwise: bb13];
    }

    bb59: {
        switchInt((*_2)[5 of 9]) -> [108: bb60, 102: bb63, otherwise: bb13];
    }

    bb60: {
        switchInt((*_2)[6 of 9]) -> [101: bb61, otherwise: bb13];
    }

    bb61: {
        switchInt((*_2)[7 of 9]) -> [102: bb62, otherwise: bb13];
    }

    bb62: {
        switchInt((*_2)[8 of 9]) -> [116: bb113, otherwise: bb13];
    }

    bb63: {
        switchInt((*_2)[6 of 9]) -> [117: bb64, otherwise: bb13];
    }

    bb64: {
        switchInt((*_2)[7 of 9]) -> [108: bb65, otherwise: bb13];
    }

    bb65: {
        switchInt((*_2)[8 of 9]) -> [108: bb115, otherwise: bb13];
    }

    bb66: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb78, otherwise: bb67];
    }

    bb67: {
        switchInt((*_2)[0 of 11]) -> [102: bb68, otherwise: bb13];
    }

    bb68: {
        switchInt((*_2)[1 of 11]) -> [108: bb69, otherwise: bb13];
    }

    bb69: {
        switchInt((*_2)[2 of 11]) -> [97: bb70, otherwise: bb13];
    }

    bb70: {
        switchInt((*_2)[3 of 11]) -> [103: bb71, otherwise: bb13];
    }

    bb71: {
        switchInt((*_2)[4 of 11]) -> [95: bb72, otherwise: bb13];
    }

    bb72: {
        switchInt((*_2)[5 of 11]) -> [111: bb73, otherwise: bb13];
    }

    bb73: {
        switchInt((*_2)[6 of 11]) -> [117: bb74, otherwise: bb13];
    }

    bb74: {
        switchInt((*_2)[7 of 11]) -> [116: bb75, otherwise: bb13];
    }

    bb75: {
        switchInt((*_2)[8 of 11]) -> [112: bb76, otherwise: bb13];
    }

    bb76: {
        switchInt((*_2)[9 of 11]) -> [117: bb77, otherwise: bb13];
    }

    bb77: {
        switchInt((*_2)[10 of 11]) -> [116: bb117, otherwise: bb13];
    }

    bb78: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb94, otherwise: bb79];
    }

    bb79: {
        switchInt((*_2)[0 of 15]) -> [102: bb80, otherwise: bb13];
    }

    bb80: {
        switchInt((*_2)[1 of 15]) -> [108: bb81, otherwise: bb13];
    }

    bb81: {
        switchInt((*_2)[2 of 15]) -> [97: bb82, otherwise: bb13];
    }

    bb82: {
        switchInt((*_2)[3 of 15]) -> [103: bb83, otherwise: bb13];
    }

    bb83: {
        switchInt((*_2)[4 of 15]) -> [95: bb84, otherwise: bb13];
    }

    bb84: {
        switchInt((*_2)[5 of 15]) -> [110: bb85, otherwise: bb13];
    }

    bb85: {
        switchInt((*_2)[6 of 15]) -> [111: bb86, otherwise: bb13];
    }

    bb86: {
        switchInt((*_2)[7 of 15]) -> [95: bb87, otherwise: bb13];
    }

    bb87: {
        switchInt((*_2)[8 of 15]) -> [104: bb88, otherwise: bb13];
    }

    bb88: {
        switchInt((*_2)[9 of 15]) -> [101: bb89, otherwise: bb13];
    }

    bb89: {
        switchInt((*_2)[10 of 15]) -> [97: bb90, otherwise: bb13];
    }

    bb90: {
        switchInt((*_2)[11 of 15]) -> [100: bb91, otherwise: bb13];
    }

    bb91: {
        switchInt((*_2)[12 of 15]) -> [101: bb92, otherwise: bb13];
    }

    bb92: {
        switchInt((*_2)[13 of 15]) -> [114: bb93, otherwise: bb13];
    }

    bb93: {
        switchInt((*_2)[14 of 15]) -> [115: bb118, otherwise: bb13];
    }

    bb94: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb13, otherwise: bb95];
    }

    bb95: {
        switchInt((*_2)[0 of 14]) -> [102: bb96, otherwise: bb13];
    }

    bb96: {
        switchInt((*_2)[1 of 14]) -> [108: bb97, otherwise: bb13];
    }

    bb97: {
        switchInt((*_2)[2 of 14]) -> [97: bb98, otherwise: bb13];
    }

    bb98: {
        switchInt((*_2)[3 of 14]) -> [103: bb99, otherwise: bb13];
    }

    bb99: {
        switchInt((*_2)[4 of 14]) -> [95: bb100, otherwise: bb13];
    }

    bb100: {
        switchInt((*_2)[5 of 14]) -> [100: bb101, otherwise: bb13];
    }

    bb101: {
        switchInt((*_2)[6 of 14]) -> [101: bb102, otherwise: bb13];
    }

    bb102: {
        switchInt((*_2)[7 of 14]) -> [108: bb103, otherwise: bb13];
    }

    bb103: {
        switchInt((*_2)[8 of 14]) -> [105: bb104, otherwise: bb13];
    }

    bb104: {
        switchInt((*_2)[9 of 14]) -> [109: bb105, otherwise: bb13];
    }

    bb105: {
        switchInt((*_2)[10 of 14]) -> [105: bb106, otherwise: bb13];
    }

    bb106: {
        switchInt((*_2)[11 of 14]) -> [116: bb107, otherwise: bb13];
    }

    bb107: {
        switchInt((*_2)[12 of 14]) -> [101: bb108, otherwise: bb13];
    }

    bb108: {
        switchInt((*_2)[13 of 14]) -> [114: bb121, otherwise: bb13];
    }

    bb109: {
        _21 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field0;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb122;
    }

    bb110: {
        _22 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field1;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb122;
    }

    bb111: {
        _23 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field2;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb122;
    }

    bb112: {
        _24 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field3;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb122;
    }

    bb113: {
        _25 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field4;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb122;
    }

    bb114: {
        _26 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field5;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb122;
    }

    bb115: {
        _27 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field6;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb122;
    }

    bb116: {
        _28 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field7;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb122;
    }

    bb117: {
        _29 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field8;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb122;
    }

    bb118: {
        _30 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field9;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb122;
    }

    bb119: {
        _31 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field10;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb122;
    }

    bb120: {
        _32 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field11;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb122;
    }

    bb121: {
        _33 = join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field::__field12;
        _0 = Result::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb122;
    }

    bb122: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize(_1: __D) -> Result<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor>(move _1, const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::expecting(_1: &join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq(_1: join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<join::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<join::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::join::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: select::SelectColumns;
    let mut _4: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<select::SelectColumns>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: select::SelectColumns;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _24: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: isize;
    let mut _31: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _32: &dyn serde::de::Expected;
    let mut _34: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _35: &mut __A;
    let mut _36: isize;
    let mut _39: isize;
    let mut _41: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _42: &dyn serde::de::Expected;
    let mut _43: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _44: &mut __A;
    let mut _45: isize;
    let mut _48: isize;
    let mut _50: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _51: &dyn serde::de::Expected;
    let mut _52: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _53: &mut __A;
    let mut _54: isize;
    let mut _57: isize;
    let mut _59: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _60: &dyn serde::de::Expected;
    let mut _61: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _69: &dyn serde::de::Expected;
    let mut _70: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _71: &mut __A;
    let mut _72: isize;
    let mut _75: isize;
    let mut _77: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _78: &dyn serde::de::Expected;
    let mut _80: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _81: &mut __A;
    let mut _82: isize;
    let mut _85: isize;
    let mut _87: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _88: &dyn serde::de::Expected;
    let mut _89: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _90: &mut __A;
    let mut _91: isize;
    let mut _94: isize;
    let mut _96: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _97: &dyn serde::de::Expected;
    let mut _98: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _99: &mut __A;
    let mut _100: isize;
    let mut _103: isize;
    let mut _105: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _106: &dyn serde::de::Expected;
    let mut _107: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _108: &mut __A;
    let mut _109: isize;
    let mut _112: isize;
    let mut _114: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _115: &dyn serde::de::Expected;
    let mut _116: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _117: &mut __A;
    let mut _118: isize;
    let mut _121: isize;
    let mut _123: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _124: &dyn serde::de::Expected;
    let mut _125: cmd::join::Args;
    let mut _126: select::SelectColumns;
    let mut _127: std::string::String;
    let mut _128: select::SelectColumns;
    let mut _129: std::string::String;
    let mut _130: std::option::Option<std::string::String>;
    let mut _131: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::string::String;
        let _17: std::option::Option<std::string::String>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::string::String;
        let mut _132: &&str;
        scope 5 {
            debug __field1 => _13;
            let _23: select::SelectColumns;
            let _27: std::option::Option<select::SelectColumns>;
            let _28: <__A as serde::de::SeqAccess<'_>>::Error;
            let _30: select::SelectColumns;
            let mut _133: &&str;
            scope 9 {
                debug __field2 => _23;
                let _33: std::string::String;
                let _37: std::option::Option<std::string::String>;
                let _38: <__A as serde::de::SeqAccess<'_>>::Error;
                let _40: std::string::String;
                let mut _134: &&str;
                scope 13 {
                    debug __field3 => _33;
                    let _46: std::option::Option<bool>;
                    let _47: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _49: bool;
                    let mut _135: &&str;
                    scope 17 {
                        debug __field4 => _49;
                        let _55: std::option::Option<bool>;
                        let _56: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _58: bool;
                        let mut _136: &&str;
                        scope 21 {
                            debug __field5 => _58;
                            let _64: std::option::Option<bool>;
                            let _65: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _67: bool;
                            let mut _137: &&str;
                            scope 25 {
                                debug __field6 => _67;
                                let _73: std::option::Option<bool>;
                                let _74: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _76: bool;
                                let mut _138: &&str;
                                scope 29 {
                                    debug __field7 => _76;
                                    let _79: std::option::Option<std::string::String>;
                                    let _83: std::option::Option<std::option::Option<std::string::String>>;
                                    let _84: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _86: std::option::Option<std::string::String>;
                                    let mut _139: &&str;
                                    scope 33 {
                                        debug __field8 => _79;
                                        let _92: std::option::Option<bool>;
                                        let _93: <__A as serde::de::SeqAccess<'_>>::Error;
                                        let _95: bool;
                                        let mut _140: &&str;
                                        scope 37 {
                                            debug __field9 => _95;
                                            let _101: std::option::Option<bool>;
                                            let _102: <__A as serde::de::SeqAccess<'_>>::Error;
                                            let _104: bool;
                                            let mut _141: &&str;
                                            scope 41 {
                                                debug __field10 => _104;
                                                let _110: std::option::Option<bool>;
                                                let _111: <__A as serde::de::SeqAccess<'_>>::Error;
                                                let _113: bool;
                                                let mut _142: &&str;
                                                scope 45 {
                                                    debug __field11 => _113;
                                                    let _119: std::option::Option<std::option::Option<config::Delimiter>>;
                                                    let _120: <__A as serde::de::SeqAccess<'_>>::Error;
                                                    let _122: std::option::Option<config::Delimiter>;
                                                    let mut _143: &&str;
                                                    scope 49 {
                                                        debug __field12 => _122;
                                                    }
                                                    scope 50 {
                                                        debug __val => _119;
                                                    }
                                                    scope 51 {
                                                        debug __err => _120;
                                                    }
                                                    scope 52 {
                                                        debug __value => _122;
                                                    }
                                                }
                                                scope 46 {
                                                    debug __val => _110;
                                                }
                                                scope 47 {
                                                    debug __err => _111;
                                                }
                                                scope 48 {
                                                    debug __value => _113;
                                                }
                                            }
                                            scope 42 {
                                                debug __val => _101;
                                            }
                                            scope 43 {
                                                debug __err => _102;
                                            }
                                            scope 44 {
                                                debug __value => _104;
                                            }
                                        }
                                        scope 38 {
                                            debug __val => _92;
                                        }
                                        scope 39 {
                                            debug __err => _93;
                                        }
                                        scope 40 {
                                            debug __value => _95;
                                        }
                                    }
                                    scope 34 {
                                        debug __val => _83;
                                    }
                                    scope 35 {
                                        debug __err => _84;
                                    }
                                    scope 36 {
                                        debug __value => _86;
                                    }
                                }
                                scope 30 {
                                    debug __val => _73;
                                }
                                scope 31 {
                                    debug __err => _74;
                                }
                                scope 32 {
                                    debug __value => _76;
                                }
                            }
                            scope 26 {
                                debug __val => _64;
                            }
                            scope 27 {
                                debug __err => _65;
                            }
                            scope 28 {
                                debug __value => _67;
                            }
                        }
                        scope 22 {
                            debug __val => _55;
                        }
                        scope 23 {
                            debug __err => _56;
                        }
                        scope 24 {
                            debug __value => _58;
                        }
                    }
                    scope 18 {
                        debug __val => _46;
                    }
                    scope 19 {
                        debug __err => _47;
                    }
                    scope 20 {
                        debug __value => _49;
                    }
                }
                scope 14 {
                    debug __val => _37;
                }
                scope 15 {
                    debug __err => _38;
                }
                scope 16 {
                    debug __value => _40;
                }
            }
            scope 10 {
                debug __val => _27;
            }
            scope 11 {
                debug __err => _28;
            }
            scope 12 {
                debug __value => _30;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_5) -> [return: bb1, unwind: bb92];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb85;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<select::SelectColumns>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _131 = const _;
        _12 = _131 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb92];
    }

    bb6: {
        _10 = move ((_7 as Some).0: select::SelectColumns);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb8, unwind: bb91];
    }

    bb7: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb85;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb84;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _132 = const _;
        _22 = _132 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb91];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _25 = &mut _2;
        _24 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_25) -> [return: bb14, unwind: bb90];
    }

    bb13: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb84;
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb83;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<select::SelectColumns>);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _133 = const _;
        _32 = _133 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _31 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _32) -> [return: bb19, unwind: bb90];
    }

    bb18: {
        _30 = move ((_27 as Some).0: select::SelectColumns);
        _23 = move _30;
        _35 = &mut _2;
        _34 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_35) -> [return: bb20, unwind: bb89];
    }

    bb19: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _31);
        goto -> bb83;
    }

    bb20: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _38 = move ((_34 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb82;
    }

    bb22: {
        _37 = move ((_34 as Ok).0: std::option::Option<std::string::String>);
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _134 = const _;
        _42 = _134 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _41 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _42) -> [return: bb25, unwind: bb89];
    }

    bb24: {
        _40 = move ((_37 as Some).0: std::string::String);
        _33 = move _40;
        _44 = &mut _2;
        _43 = <__A as SeqAccess<'_>>::next_element::<bool>(_44) -> [return: bb26, unwind: bb88];
    }

    bb25: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _41);
        goto -> bb82;
    }

    bb26: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _47 = move ((_43 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _47);
        goto -> bb81;
    }

    bb28: {
        _46 = ((_43 as Ok).0: std::option::Option<bool>);
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _135 = const _;
        _51 = _135 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _50 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _51) -> [return: bb31, unwind: bb88];
    }

    bb30: {
        _49 = ((_46 as Some).0: bool);
        _53 = &mut _2;
        _52 = <__A as SeqAccess<'_>>::next_element::<bool>(_53) -> [return: bb32, unwind: bb88];
    }

    bb31: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _50);
        goto -> bb81;
    }

    bb32: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _56 = move ((_52 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _56);
        goto -> bb81;
    }

    bb34: {
        _55 = ((_52 as Ok).0: std::option::Option<bool>);
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _136 = const _;
        _60 = _136 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _59 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _60) -> [return: bb37, unwind: bb88];
    }

    bb36: {
        _58 = ((_55 as Some).0: bool);
        _62 = &mut _2;
        _61 = <__A as SeqAccess<'_>>::next_element::<bool>(_62) -> [return: bb38, unwind: bb88];
    }

    bb37: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _59);
        goto -> bb81;
    }

    bb38: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _65 = move ((_61 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _65);
        goto -> bb81;
    }

    bb40: {
        _64 = ((_61 as Ok).0: std::option::Option<bool>);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _137 = const _;
        _69 = _137 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _68 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _69) -> [return: bb43, unwind: bb88];
    }

    bb42: {
        _67 = ((_64 as Some).0: bool);
        _71 = &mut _2;
        _70 = <__A as SeqAccess<'_>>::next_element::<bool>(_71) -> [return: bb44, unwind: bb88];
    }

    bb43: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _68);
        goto -> bb81;
    }

    bb44: {
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _74 = move ((_70 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _74);
        goto -> bb81;
    }

    bb46: {
        _73 = ((_70 as Ok).0: std::option::Option<bool>);
        _75 = discriminant(_73);
        switchInt(move _75) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _138 = const _;
        _78 = _138 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _77 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _78) -> [return: bb49, unwind: bb88];
    }

    bb48: {
        _76 = ((_73 as Some).0: bool);
        _81 = &mut _2;
        _80 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_81) -> [return: bb50, unwind: bb88];
    }

    bb49: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _77);
        goto -> bb81;
    }

    bb50: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _84 = move ((_80 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _84);
        goto -> bb81;
    }

    bb52: {
        _83 = move ((_80 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _85 = discriminant(_83);
        switchInt(move _85) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _139 = const _;
        _88 = _139 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _87 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _88) -> [return: bb55, unwind: bb88];
    }

    bb54: {
        _86 = move ((_83 as Some).0: std::option::Option<std::string::String>);
        _79 = move _86;
        _90 = &mut _2;
        _89 = <__A as SeqAccess<'_>>::next_element::<bool>(_90) -> [return: bb56, unwind: bb87];
    }

    bb55: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _87);
        goto -> bb81;
    }

    bb56: {
        _91 = discriminant(_89);
        switchInt(move _91) -> [0: bb58, 1: bb57, otherwise: bb3];
    }

    bb57: {
        _93 = move ((_89 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _93);
        goto -> bb80;
    }

    bb58: {
        _92 = ((_89 as Ok).0: std::option::Option<bool>);
        _94 = discriminant(_92);
        switchInt(move _94) -> [0: bb59, 1: bb60, otherwise: bb3];
    }

    bb59: {
        _140 = const _;
        _97 = _140 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _96 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 9_usize, move _97) -> [return: bb61, unwind: bb87];
    }

    bb60: {
        _95 = ((_92 as Some).0: bool);
        _99 = &mut _2;
        _98 = <__A as SeqAccess<'_>>::next_element::<bool>(_99) -> [return: bb62, unwind: bb87];
    }

    bb61: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _96);
        goto -> bb80;
    }

    bb62: {
        _100 = discriminant(_98);
        switchInt(move _100) -> [0: bb64, 1: bb63, otherwise: bb3];
    }

    bb63: {
        _102 = move ((_98 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _102);
        goto -> bb80;
    }

    bb64: {
        _101 = ((_98 as Ok).0: std::option::Option<bool>);
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb65, 1: bb66, otherwise: bb3];
    }

    bb65: {
        _141 = const _;
        _106 = _141 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _105 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 10_usize, move _106) -> [return: bb67, unwind: bb87];
    }

    bb66: {
        _104 = ((_101 as Some).0: bool);
        _108 = &mut _2;
        _107 = <__A as SeqAccess<'_>>::next_element::<bool>(_108) -> [return: bb68, unwind: bb87];
    }

    bb67: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _105);
        goto -> bb80;
    }

    bb68: {
        _109 = discriminant(_107);
        switchInt(move _109) -> [0: bb70, 1: bb69, otherwise: bb3];
    }

    bb69: {
        _111 = move ((_107 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _111);
        goto -> bb80;
    }

    bb70: {
        _110 = ((_107 as Ok).0: std::option::Option<bool>);
        _112 = discriminant(_110);
        switchInt(move _112) -> [0: bb71, 1: bb72, otherwise: bb3];
    }

    bb71: {
        _142 = const _;
        _115 = _142 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _114 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 11_usize, move _115) -> [return: bb73, unwind: bb87];
    }

    bb72: {
        _113 = ((_110 as Some).0: bool);
        _117 = &mut _2;
        _116 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_117) -> [return: bb74, unwind: bb87];
    }

    bb73: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _114);
        goto -> bb80;
    }

    bb74: {
        _118 = discriminant(_116);
        switchInt(move _118) -> [0: bb76, 1: bb75, otherwise: bb3];
    }

    bb75: {
        _120 = move ((_116 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _120);
        goto -> bb80;
    }

    bb76: {
        _119 = ((_116 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _121 = discriminant(_119);
        switchInt(move _121) -> [0: bb77, 1: bb78, otherwise: bb3];
    }

    bb77: {
        _143 = const _;
        _124 = _143 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _123 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 12_usize, move _124) -> [return: bb79, unwind: bb87];
    }

    bb78: {
        _122 = ((_119 as Some).0: std::option::Option<config::Delimiter>);
        _126 = move _3;
        _127 = move _13;
        _128 = move _23;
        _129 = move _33;
        _130 = move _79;
        _125 = join::Args { arg_columns1: move _126, arg_input1: move _127, arg_columns2: move _128, arg_input2: move _129, flag_left: _49, flag_right: _58, flag_full: _67, flag_cross: _76, flag_output: move _130, flag_no_headers: _95, flag_no_case: _104, flag_nulls: _113, flag_delimiter: _122 };
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _125);
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb79: {
        _0 = Result::<join::Args, <__A as SeqAccess<'_>>::Error>::Err(move _123);
        goto -> bb80;
    }

    bb80: {
        drop(_79) -> [return: bb81, unwind: bb88];
    }

    bb81: {
        drop(_33) -> [return: bb82, unwind: bb89];
    }

    bb82: {
        drop(_23) -> [return: bb83, unwind: bb90];
    }

    bb83: {
        drop(_13) -> [return: bb84, unwind: bb91];
    }

    bb84: {
        drop(_3) -> [return: bb85, unwind: bb92];
    }

    bb85: {
        drop(_2) -> [return: bb86, unwind continue];
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_79) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_33) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_23) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_13) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_3) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_2) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        resume;
    }
}

promoted[0] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[9] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[10] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[11] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

promoted[12] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 13 elements";
        _0 = &_1;
        return;
    }
}

fn join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::<impl at src/cmd/join.rs:76:10: 76:21>::visit_map(_1: join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<join::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<join::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::join::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<select::SelectColumns>;
    let mut _16: std::result::Result<std::option::Option<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: isize;
    let mut _23: isize;
    let mut _24: bool;
    let _25: &std::option::Option<select::SelectColumns>;
    let mut _26: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _27: std::option::Option<select::SelectColumns>;
    let mut _28: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _29: &mut __A;
    let mut _30: isize;
    let mut _33: bool;
    let _34: &std::option::Option<std::string::String>;
    let mut _35: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _36: std::option::Option<std::string::String>;
    let mut _37: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _38: &mut __A;
    let mut _39: isize;
    let mut _42: bool;
    let _43: &std::option::Option<select::SelectColumns>;
    let mut _44: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _45: std::option::Option<select::SelectColumns>;
    let mut _46: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _47: &mut __A;
    let mut _48: isize;
    let mut _51: bool;
    let _52: &std::option::Option<std::string::String>;
    let mut _53: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _54: std::option::Option<std::string::String>;
    let mut _55: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _56: &mut __A;
    let mut _57: isize;
    let mut _60: bool;
    let _61: &std::option::Option<bool>;
    let mut _62: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _63: std::option::Option<bool>;
    let mut _64: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _65: &mut __A;
    let mut _66: isize;
    let mut _69: bool;
    let _70: &std::option::Option<bool>;
    let mut _71: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _72: std::option::Option<bool>;
    let mut _73: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _74: &mut __A;
    let mut _75: isize;
    let mut _78: bool;
    let _79: &std::option::Option<bool>;
    let mut _80: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _81: std::option::Option<bool>;
    let mut _82: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _83: &mut __A;
    let mut _84: isize;
    let mut _87: bool;
    let _88: &std::option::Option<bool>;
    let mut _89: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _90: std::option::Option<bool>;
    let mut _91: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _92: &mut __A;
    let mut _93: isize;
    let mut _96: bool;
    let _97: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _98: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _99: std::option::Option<std::option::Option<std::string::String>>;
    let mut _100: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _101: &mut __A;
    let mut _102: isize;
    let mut _105: bool;
    let _106: &std::option::Option<bool>;
    let mut _107: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _108: std::option::Option<bool>;
    let mut _109: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _110: &mut __A;
    let mut _111: isize;
    let mut _114: bool;
    let _115: &std::option::Option<bool>;
    let mut _116: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _117: std::option::Option<bool>;
    let mut _118: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _119: &mut __A;
    let mut _120: isize;
    let mut _123: bool;
    let _124: &std::option::Option<bool>;
    let mut _125: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _126: std::option::Option<bool>;
    let mut _127: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _128: &mut __A;
    let mut _129: isize;
    let mut _132: bool;
    let _133: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _134: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _135: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _136: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _137: &mut __A;
    let mut _138: isize;
    let mut _141: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _142: &mut __A;
    let mut _143: isize;
    let mut _146: isize;
    let mut _148: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _149: isize;
    let mut _153: isize;
    let mut _155: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _156: isize;
    let mut _160: isize;
    let mut _162: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _163: isize;
    let mut _167: isize;
    let mut _169: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _170: isize;
    let mut _174: isize;
    let mut _176: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _177: isize;
    let mut _181: isize;
    let mut _183: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _184: isize;
    let mut _188: isize;
    let mut _190: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _191: isize;
    let mut _195: isize;
    let mut _197: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _198: isize;
    let mut _202: isize;
    let mut _204: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _205: isize;
    let mut _209: isize;
    let mut _211: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _212: isize;
    let mut _216: isize;
    let mut _218: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _219: isize;
    let mut _223: isize;
    let mut _225: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _226: isize;
    let mut _230: isize;
    let mut _232: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _233: isize;
    let mut _236: cmd::join::Args;
    let mut _237: select::SelectColumns;
    let mut _238: std::string::String;
    let mut _239: select::SelectColumns;
    let mut _240: std::string::String;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: std::option::Option<std::string::String>;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: std::option::Option<config::Delimiter>;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<select::SelectColumns>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::string::String>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<bool>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<bool>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<std::string::String>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let mut _12: std::option::Option<bool>;
                                        scope 10 {
                                            debug __field9 => _12;
                                            let mut _13: std::option::Option<bool>;
                                            scope 11 {
                                                debug __field10 => _13;
                                                let mut _14: std::option::Option<bool>;
                                                scope 12 {
                                                    debug __field11 => _14;
                                                    let mut _15: std::option::Option<std::option::Option<config::Delimiter>>;
                                                    scope 13 {
                                                        debug __field12 => _15;
                                                        let _145: select::SelectColumns;
                                                        let _147: select::SelectColumns;
                                                        let _150: select::SelectColumns;
                                                        let _151: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 14 {
                                                            debug __key => _22;
                                                            let _19: std::option::Option<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field>;
                                                            let _20: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _22: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field;
                                                            let _31: select::SelectColumns;
                                                            let _32: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _40: std::string::String;
                                                            let _41: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _49: select::SelectColumns;
                                                            let _50: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _58: std::string::String;
                                                            let _59: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _67: bool;
                                                            let _68: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _76: bool;
                                                            let _77: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _85: bool;
                                                            let _86: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _94: bool;
                                                            let _95: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _103: std::option::Option<std::string::String>;
                                                            let _104: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _112: bool;
                                                            let _113: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _121: bool;
                                                            let _122: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _130: bool;
                                                            let _131: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _139: std::option::Option<config::Delimiter>;
                                                            let _140: <__A as serde::de::MapAccess<'_>>::Error;
                                                            let _144: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 15 {
                                                                debug __val => _19;
                                                            }
                                                            scope 16 {
                                                                debug __err => _20;
                                                            }
                                                            scope 17 {
                                                                debug __val => _31;
                                                            }
                                                            scope 18 {
                                                                debug __err => _32;
                                                            }
                                                            scope 19 {
                                                                debug __val => _40;
                                                            }
                                                            scope 20 {
                                                                debug __err => _41;
                                                            }
                                                            scope 21 {
                                                                debug __val => _49;
                                                            }
                                                            scope 22 {
                                                                debug __err => _50;
                                                            }
                                                            scope 23 {
                                                                debug __val => _58;
                                                            }
                                                            scope 24 {
                                                                debug __err => _59;
                                                            }
                                                            scope 25 {
                                                                debug __val => _67;
                                                            }
                                                            scope 26 {
                                                                debug __err => _68;
                                                            }
                                                            scope 27 {
                                                                debug __val => _76;
                                                            }
                                                            scope 28 {
                                                                debug __err => _77;
                                                            }
                                                            scope 29 {
                                                                debug __val => _85;
                                                            }
                                                            scope 30 {
                                                                debug __err => _86;
                                                            }
                                                            scope 31 {
                                                                debug __val => _94;
                                                            }
                                                            scope 32 {
                                                                debug __err => _95;
                                                            }
                                                            scope 33 {
                                                                debug __val => _103;
                                                            }
                                                            scope 34 {
                                                                debug __err => _104;
                                                            }
                                                            scope 35 {
                                                                debug __val => _112;
                                                            }
                                                            scope 36 {
                                                                debug __err => _113;
                                                            }
                                                            scope 37 {
                                                                debug __val => _121;
                                                            }
                                                            scope 38 {
                                                                debug __err => _122;
                                                            }
                                                            scope 39 {
                                                                debug __val => _130;
                                                            }
                                                            scope 40 {
                                                                debug __err => _131;
                                                            }
                                                            scope 41 {
                                                                debug __val => _139;
                                                            }
                                                            scope 42 {
                                                                debug __err => _140;
                                                            }
                                                            scope 43 {
                                                            }
                                                            scope 44 {
                                                                debug __val => const IgnoredAny;
                                                            }
                                                            scope 45 {
                                                                debug __err => _144;
                                                            }
                                                        }
                                                        scope 46 {
                                                            debug __field0 => _145;
                                                            let _152: std::string::String;
                                                            let _154: std::string::String;
                                                            let _157: std::string::String;
                                                            let _158: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 50 {
                                                                debug __field1 => _152;
                                                                let _159: select::SelectColumns;
                                                                let _161: select::SelectColumns;
                                                                let _164: select::SelectColumns;
                                                                let _165: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 54 {
                                                                    debug __field2 => _159;
                                                                    let _166: std::string::String;
                                                                    let _168: std::string::String;
                                                                    let _171: std::string::String;
                                                                    let _172: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 58 {
                                                                        debug __field3 => _166;
                                                                        let _173: bool;
                                                                        let _175: bool;
                                                                        let _178: bool;
                                                                        let _179: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 62 {
                                                                            debug __field4 => _173;
                                                                            let _180: bool;
                                                                            let _182: bool;
                                                                            let _185: bool;
                                                                            let _186: <__A as serde::de::MapAccess<'_>>::Error;
                                                                            scope 66 {
                                                                                debug __field5 => _180;
                                                                                let _187: bool;
                                                                                let _189: bool;
                                                                                let _192: bool;
                                                                                let _193: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                scope 70 {
                                                                                    debug __field6 => _187;
                                                                                    let _194: bool;
                                                                                    let _196: bool;
                                                                                    let _199: bool;
                                                                                    let _200: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                    scope 74 {
                                                                                        debug __field7 => _194;
                                                                                        let _201: std::option::Option<std::string::String>;
                                                                                        let _203: std::option::Option<std::string::String>;
                                                                                        let _206: std::option::Option<std::string::String>;
                                                                                        let _207: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                        scope 78 {
                                                                                            debug __field8 => _201;
                                                                                            let _208: bool;
                                                                                            let _210: bool;
                                                                                            let _213: bool;
                                                                                            let _214: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                            scope 82 {
                                                                                                debug __field9 => _208;
                                                                                                let _215: bool;
                                                                                                let _217: bool;
                                                                                                let _220: bool;
                                                                                                let _221: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                                scope 86 {
                                                                                                    debug __field10 => _215;
                                                                                                    let _222: bool;
                                                                                                    let _224: bool;
                                                                                                    let _227: bool;
                                                                                                    let _228: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                                    scope 90 {
                                                                                                        debug __field11 => _222;
                                                                                                        let _229: std::option::Option<config::Delimiter>;
                                                                                                        let _231: std::option::Option<config::Delimiter>;
                                                                                                        let _234: std::option::Option<config::Delimiter>;
                                                                                                        let _235: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                                        scope 94 {
                                                                                                            debug __field12 => _229;
                                                                                                        }
                                                                                                        scope 95 {
                                                                                                            debug __field12 => _231;
                                                                                                        }
                                                                                                        scope 96 {
                                                                                                            debug __val => _234;
                                                                                                        }
                                                                                                        scope 97 {
                                                                                                            debug __err => _235;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 91 {
                                                                                                        debug __field11 => _224;
                                                                                                    }
                                                                                                    scope 92 {
                                                                                                        debug __val => _227;
                                                                                                    }
                                                                                                    scope 93 {
                                                                                                        debug __err => _228;
                                                                                                    }
                                                                                                }
                                                                                                scope 87 {
                                                                                                    debug __field10 => _217;
                                                                                                }
                                                                                                scope 88 {
                                                                                                    debug __val => _220;
                                                                                                }
                                                                                                scope 89 {
                                                                                                    debug __err => _221;
                                                                                                }
                                                                                            }
                                                                                            scope 83 {
                                                                                                debug __field9 => _210;
                                                                                            }
                                                                                            scope 84 {
                                                                                                debug __val => _213;
                                                                                            }
                                                                                            scope 85 {
                                                                                                debug __err => _214;
                                                                                            }
                                                                                        }
                                                                                        scope 79 {
                                                                                            debug __field8 => _203;
                                                                                        }
                                                                                        scope 80 {
                                                                                            debug __val => _206;
                                                                                        }
                                                                                        scope 81 {
                                                                                            debug __err => _207;
                                                                                        }
                                                                                    }
                                                                                    scope 75 {
                                                                                        debug __field7 => _196;
                                                                                    }
                                                                                    scope 76 {
                                                                                        debug __val => _199;
                                                                                    }
                                                                                    scope 77 {
                                                                                        debug __err => _200;
                                                                                    }
                                                                                }
                                                                                scope 71 {
                                                                                    debug __field6 => _189;
                                                                                }
                                                                                scope 72 {
                                                                                    debug __val => _192;
                                                                                }
                                                                                scope 73 {
                                                                                    debug __err => _193;
                                                                                }
                                                                            }
                                                                            scope 67 {
                                                                                debug __field5 => _182;
                                                                            }
                                                                            scope 68 {
                                                                                debug __val => _185;
                                                                            }
                                                                            scope 69 {
                                                                                debug __err => _186;
                                                                            }
                                                                        }
                                                                        scope 63 {
                                                                            debug __field4 => _175;
                                                                        }
                                                                        scope 64 {
                                                                            debug __val => _178;
                                                                        }
                                                                        scope 65 {
                                                                            debug __err => _179;
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug __field3 => _168;
                                                                    }
                                                                    scope 60 {
                                                                        debug __val => _171;
                                                                    }
                                                                    scope 61 {
                                                                        debug __err => _172;
                                                                    }
                                                                }
                                                                scope 55 {
                                                                    debug __field2 => _161;
                                                                }
                                                                scope 56 {
                                                                    debug __val => _164;
                                                                }
                                                                scope 57 {
                                                                    debug __err => _165;
                                                                }
                                                            }
                                                            scope 51 {
                                                                debug __field1 => _154;
                                                            }
                                                            scope 52 {
                                                                debug __val => _157;
                                                            }
                                                            scope 53 {
                                                                debug __err => _158;
                                                            }
                                                        }
                                                        scope 47 {
                                                            debug __field0 => _147;
                                                        }
                                                        scope 48 {
                                                            debug __val => _150;
                                                        }
                                                        scope 49 {
                                                            debug __err => _151;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _254 = const true;
        _3 = std::option::Option::<SelectColumns>::None;
        _253 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _252 = const true;
        _5 = std::option::Option::<SelectColumns>::None;
        _251 = const true;
        _6 = std::option::Option::<std::string::String>::None;
        _7 = std::option::Option::<bool>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<bool>::None;
        _10 = std::option::Option::<bool>::None;
        _250 = const true;
        _11 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _12 = std::option::Option::<bool>::None;
        _13 = std::option::Option::<bool>::None;
        _14 = std::option::Option::<bool>::None;
        _15 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_key::<join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for join::Args>::deserialize::__Field>(_17) -> [return: bb2, unwind: bb238];
    }

    bb2: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _20 = move ((_16 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb208;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _19 = move ((_16 as Ok).0: std::option::Option<cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field>);
        _21 = discriminant(_19);
        switchInt(move _21) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _146 = discriminant(_3);
        switchInt(move _146) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb7: {
        _22 = move ((_19 as Some).0: cmd::join::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::join::Args>::deserialize::__Field);
        _23 = discriminant(_22);
        switchInt(move _23) -> [0: bb9, 1: bb19, 2: bb29, 3: bb39, 4: bb49, 5: bb57, 6: bb65, 7: bb73, 8: bb81, 9: bb91, 10: bb99, 11: bb107, 12: bb115, otherwise: bb8];
    }

    bb8: {
        _142 = &mut _2;
        _141 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_142) -> [return: bb123, unwind: bb238];
    }

    bb9: {
        _25 = &_3;
        _24 = std::option::Option::<SelectColumns>::is_some(_25) -> [return: bb10, unwind: bb238];
    }

    bb10: {
        switchInt(move _24) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _26 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_columns1") -> [return: bb12, unwind: bb238];
    }

    bb12: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb208;
    }

    bb13: {
        _29 = &mut _2;
        _28 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_29) -> [return: bb14, unwind: bb238];
    }

    bb14: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _32 = move ((_28 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _32);
        goto -> bb208;
    }

    bb16: {
        _31 = move ((_28 as Ok).0: select::SelectColumns);
        _27 = std::option::Option::<SelectColumns>::Some(move _31);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _254 = const true;
        _3 = move _27;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _254 = const true;
        _3 = move _27;
        goto -> bb238;
    }

    bb19: {
        _34 = &_4;
        _33 = std::option::Option::<std::string::String>::is_some(_34) -> [return: bb20, unwind: bb238];
    }

    bb20: {
        switchInt(move _33) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _35 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input1") -> [return: bb22, unwind: bb238];
    }

    bb22: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb208;
    }

    bb23: {
        _38 = &mut _2;
        _37 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_38) -> [return: bb24, unwind: bb238];
    }

    bb24: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _41 = move ((_37 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb208;
    }

    bb26: {
        _40 = move ((_37 as Ok).0: std::string::String);
        _36 = std::option::Option::<std::string::String>::Some(move _40);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _253 = const true;
        _4 = move _36;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _253 = const true;
        _4 = move _36;
        goto -> bb238;
    }

    bb29: {
        _43 = &_5;
        _42 = std::option::Option::<SelectColumns>::is_some(_43) -> [return: bb30, unwind: bb238];
    }

    bb30: {
        switchInt(move _42) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _44 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_columns2") -> [return: bb32, unwind: bb238];
    }

    bb32: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb208;
    }

    bb33: {
        _47 = &mut _2;
        _46 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_47) -> [return: bb34, unwind: bb238];
    }

    bb34: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _50 = move ((_46 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb208;
    }

    bb36: {
        _49 = move ((_46 as Ok).0: select::SelectColumns);
        _45 = std::option::Option::<SelectColumns>::Some(move _49);
        drop(_5) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _252 = const true;
        _5 = move _45;
        goto -> bb1;
    }

    bb38 (cleanup): {
        _252 = const true;
        _5 = move _45;
        goto -> bb238;
    }

    bb39: {
        _52 = &_6;
        _51 = std::option::Option::<std::string::String>::is_some(_52) -> [return: bb40, unwind: bb238];
    }

    bb40: {
        switchInt(move _51) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _53 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input2") -> [return: bb42, unwind: bb238];
    }

    bb42: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb208;
    }

    bb43: {
        _56 = &mut _2;
        _55 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_56) -> [return: bb44, unwind: bb238];
    }

    bb44: {
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb46, 1: bb45, otherwise: bb4];
    }

    bb45: {
        _59 = move ((_55 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _59);
        goto -> bb208;
    }

    bb46: {
        _58 = move ((_55 as Ok).0: std::string::String);
        _54 = std::option::Option::<std::string::String>::Some(move _58);
        drop(_6) -> [return: bb47, unwind: bb48];
    }

    bb47: {
        _251 = const true;
        _6 = move _54;
        goto -> bb1;
    }

    bb48 (cleanup): {
        _251 = const true;
        _6 = move _54;
        goto -> bb238;
    }

    bb49: {
        _61 = &_7;
        _60 = std::option::Option::<bool>::is_some(_61) -> [return: bb50, unwind: bb238];
    }

    bb50: {
        switchInt(move _60) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        _62 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_left") -> [return: bb52, unwind: bb238];
    }

    bb52: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb208;
    }

    bb53: {
        _65 = &mut _2;
        _64 = <__A as MapAccess<'_>>::next_value::<bool>(_65) -> [return: bb54, unwind: bb238];
    }

    bb54: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _68 = move ((_64 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _68);
        goto -> bb208;
    }

    bb56: {
        _67 = ((_64 as Ok).0: bool);
        _63 = std::option::Option::<bool>::Some(_67);
        _7 = move _63;
        goto -> bb1;
    }

    bb57: {
        _70 = &_8;
        _69 = std::option::Option::<bool>::is_some(_70) -> [return: bb58, unwind: bb238];
    }

    bb58: {
        switchInt(move _69) -> [0: bb61, otherwise: bb59];
    }

    bb59: {
        _71 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_right") -> [return: bb60, unwind: bb238];
    }

    bb60: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb208;
    }

    bb61: {
        _74 = &mut _2;
        _73 = <__A as MapAccess<'_>>::next_value::<bool>(_74) -> [return: bb62, unwind: bb238];
    }

    bb62: {
        _75 = discriminant(_73);
        switchInt(move _75) -> [0: bb64, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _77 = move ((_73 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _77);
        goto -> bb208;
    }

    bb64: {
        _76 = ((_73 as Ok).0: bool);
        _72 = std::option::Option::<bool>::Some(_76);
        _8 = move _72;
        goto -> bb1;
    }

    bb65: {
        _79 = &_9;
        _78 = std::option::Option::<bool>::is_some(_79) -> [return: bb66, unwind: bb238];
    }

    bb66: {
        switchInt(move _78) -> [0: bb69, otherwise: bb67];
    }

    bb67: {
        _80 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_full") -> [return: bb68, unwind: bb238];
    }

    bb68: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb208;
    }

    bb69: {
        _83 = &mut _2;
        _82 = <__A as MapAccess<'_>>::next_value::<bool>(_83) -> [return: bb70, unwind: bb238];
    }

    bb70: {
        _84 = discriminant(_82);
        switchInt(move _84) -> [0: bb72, 1: bb71, otherwise: bb4];
    }

    bb71: {
        _86 = move ((_82 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _86);
        goto -> bb208;
    }

    bb72: {
        _85 = ((_82 as Ok).0: bool);
        _81 = std::option::Option::<bool>::Some(_85);
        _9 = move _81;
        goto -> bb1;
    }

    bb73: {
        _88 = &_10;
        _87 = std::option::Option::<bool>::is_some(_88) -> [return: bb74, unwind: bb238];
    }

    bb74: {
        switchInt(move _87) -> [0: bb77, otherwise: bb75];
    }

    bb75: {
        _89 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_cross") -> [return: bb76, unwind: bb238];
    }

    bb76: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _89);
        goto -> bb208;
    }

    bb77: {
        _92 = &mut _2;
        _91 = <__A as MapAccess<'_>>::next_value::<bool>(_92) -> [return: bb78, unwind: bb238];
    }

    bb78: {
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb80, 1: bb79, otherwise: bb4];
    }

    bb79: {
        _95 = move ((_91 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _95);
        goto -> bb208;
    }

    bb80: {
        _94 = ((_91 as Ok).0: bool);
        _90 = std::option::Option::<bool>::Some(_94);
        _10 = move _90;
        goto -> bb1;
    }

    bb81: {
        _97 = &_11;
        _96 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_97) -> [return: bb82, unwind: bb238];
    }

    bb82: {
        switchInt(move _96) -> [0: bb85, otherwise: bb83];
    }

    bb83: {
        _98 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb84, unwind: bb238];
    }

    bb84: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb208;
    }

    bb85: {
        _101 = &mut _2;
        _100 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_101) -> [return: bb86, unwind: bb238];
    }

    bb86: {
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb88, 1: bb87, otherwise: bb4];
    }

    bb87: {
        _104 = move ((_100 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb208;
    }

    bb88: {
        _103 = move ((_100 as Ok).0: std::option::Option<std::string::String>);
        _99 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _103);
        drop(_11) -> [return: bb89, unwind: bb90];
    }

    bb89: {
        _250 = const true;
        _11 = move _99;
        goto -> bb1;
    }

    bb90 (cleanup): {
        _250 = const true;
        _11 = move _99;
        goto -> bb238;
    }

    bb91: {
        _106 = &_12;
        _105 = std::option::Option::<bool>::is_some(_106) -> [return: bb92, unwind: bb238];
    }

    bb92: {
        switchInt(move _105) -> [0: bb95, otherwise: bb93];
    }

    bb93: {
        _107 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb94, unwind: bb238];
    }

    bb94: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _107);
        goto -> bb208;
    }

    bb95: {
        _110 = &mut _2;
        _109 = <__A as MapAccess<'_>>::next_value::<bool>(_110) -> [return: bb96, unwind: bb238];
    }

    bb96: {
        _111 = discriminant(_109);
        switchInt(move _111) -> [0: bb98, 1: bb97, otherwise: bb4];
    }

    bb97: {
        _113 = move ((_109 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _113);
        goto -> bb208;
    }

    bb98: {
        _112 = ((_109 as Ok).0: bool);
        _108 = std::option::Option::<bool>::Some(_112);
        _12 = move _108;
        goto -> bb1;
    }

    bb99: {
        _115 = &_13;
        _114 = std::option::Option::<bool>::is_some(_115) -> [return: bb100, unwind: bb238];
    }

    bb100: {
        switchInt(move _114) -> [0: bb103, otherwise: bb101];
    }

    bb101: {
        _116 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_case") -> [return: bb102, unwind: bb238];
    }

    bb102: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _116);
        goto -> bb208;
    }

    bb103: {
        _119 = &mut _2;
        _118 = <__A as MapAccess<'_>>::next_value::<bool>(_119) -> [return: bb104, unwind: bb238];
    }

    bb104: {
        _120 = discriminant(_118);
        switchInt(move _120) -> [0: bb106, 1: bb105, otherwise: bb4];
    }

    bb105: {
        _122 = move ((_118 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _122);
        goto -> bb208;
    }

    bb106: {
        _121 = ((_118 as Ok).0: bool);
        _117 = std::option::Option::<bool>::Some(_121);
        _13 = move _117;
        goto -> bb1;
    }

    bb107: {
        _124 = &_14;
        _123 = std::option::Option::<bool>::is_some(_124) -> [return: bb108, unwind: bb238];
    }

    bb108: {
        switchInt(move _123) -> [0: bb111, otherwise: bb109];
    }

    bb109: {
        _125 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_nulls") -> [return: bb110, unwind: bb238];
    }

    bb110: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _125);
        goto -> bb208;
    }

    bb111: {
        _128 = &mut _2;
        _127 = <__A as MapAccess<'_>>::next_value::<bool>(_128) -> [return: bb112, unwind: bb238];
    }

    bb112: {
        _129 = discriminant(_127);
        switchInt(move _129) -> [0: bb114, 1: bb113, otherwise: bb4];
    }

    bb113: {
        _131 = move ((_127 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _131);
        goto -> bb208;
    }

    bb114: {
        _130 = ((_127 as Ok).0: bool);
        _126 = std::option::Option::<bool>::Some(_130);
        _14 = move _126;
        goto -> bb1;
    }

    bb115: {
        _133 = &_15;
        _132 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_133) -> [return: bb116, unwind: bb238];
    }

    bb116: {
        switchInt(move _132) -> [0: bb119, otherwise: bb117];
    }

    bb117: {
        _134 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb118, unwind: bb238];
    }

    bb118: {
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _134);
        goto -> bb208;
    }

    bb119: {
        _137 = &mut _2;
        _136 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_137) -> [return: bb120, unwind: bb238];
    }

    bb120: {
        _138 = discriminant(_136);
        switchInt(move _138) -> [0: bb122, 1: bb121, otherwise: bb4];
    }

    bb121: {
        _140 = move ((_136 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _140);
        goto -> bb208;
    }

    bb122: {
        _139 = ((_136 as Ok).0: std::option::Option<config::Delimiter>);
        _135 = std::option::Option::<std::option::Option<Delimiter>>::Some(_139);
        _15 = move _135;
        goto -> bb1;
    }

    bb123: {
        _143 = discriminant(_141);
        switchInt(move _143) -> [0: bb1, 1: bb124, otherwise: bb4];
    }

    bb124: {
        _144 = move ((_141 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _144);
        goto -> bb208;
    }

    bb125: {
        _148 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "arg_columns1") -> [return: bb127, unwind: bb238];
    }

    bb126: {
        _254 = const false;
        _147 = move ((_3 as Some).0: select::SelectColumns);
        _145 = move _147;
        goto -> bb130;
    }

    bb127: {
        _149 = discriminant(_148);
        switchInt(move _149) -> [0: bb129, 1: bb128, otherwise: bb4];
    }

    bb128: {
        _151 = move ((_148 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _151);
        goto -> bb208;
    }

    bb129: {
        _150 = move ((_148 as Ok).0: select::SelectColumns);
        _145 = move _150;
        goto -> bb130;
    }

    bb130: {
        _153 = discriminant(_4);
        switchInt(move _153) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        _155 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_input1") -> [return: bb133, unwind: bb214];
    }

    bb132: {
        _253 = const false;
        _154 = move ((_4 as Some).0: std::string::String);
        _152 = move _154;
        goto -> bb136;
    }

    bb133: {
        _156 = discriminant(_155);
        switchInt(move _156) -> [0: bb135, 1: bb134, otherwise: bb4];
    }

    bb134: {
        _158 = move ((_155 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _158);
        goto -> bb207;
    }

    bb135: {
        _157 = move ((_155 as Ok).0: std::string::String);
        _152 = move _157;
        goto -> bb136;
    }

    bb136: {
        _160 = discriminant(_5);
        switchInt(move _160) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        _162 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "arg_columns2") -> [return: bb139, unwind: bb213];
    }

    bb138: {
        _252 = const false;
        _161 = move ((_5 as Some).0: select::SelectColumns);
        _159 = move _161;
        goto -> bb142;
    }

    bb139: {
        _163 = discriminant(_162);
        switchInt(move _163) -> [0: bb141, 1: bb140, otherwise: bb4];
    }

    bb140: {
        _165 = move ((_162 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _165);
        goto -> bb206;
    }

    bb141: {
        _164 = move ((_162 as Ok).0: select::SelectColumns);
        _159 = move _164;
        goto -> bb142;
    }

    bb142: {
        _167 = discriminant(_6);
        switchInt(move _167) -> [0: bb143, 1: bb144, otherwise: bb4];
    }

    bb143: {
        _169 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_input2") -> [return: bb145, unwind: bb212];
    }

    bb144: {
        _251 = const false;
        _168 = move ((_6 as Some).0: std::string::String);
        _166 = move _168;
        goto -> bb148;
    }

    bb145: {
        _170 = discriminant(_169);
        switchInt(move _170) -> [0: bb147, 1: bb146, otherwise: bb4];
    }

    bb146: {
        _172 = move ((_169 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _172);
        goto -> bb205;
    }

    bb147: {
        _171 = move ((_169 as Ok).0: std::string::String);
        _166 = move _171;
        goto -> bb148;
    }

    bb148: {
        _174 = discriminant(_7);
        switchInt(move _174) -> [0: bb149, 1: bb150, otherwise: bb4];
    }

    bb149: {
        _176 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_left") -> [return: bb151, unwind: bb211];
    }

    bb150: {
        _175 = ((_7 as Some).0: bool);
        _173 = _175;
        goto -> bb154;
    }

    bb151: {
        _177 = discriminant(_176);
        switchInt(move _177) -> [0: bb153, 1: bb152, otherwise: bb4];
    }

    bb152: {
        _179 = move ((_176 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _179);
        goto -> bb204;
    }

    bb153: {
        _178 = ((_176 as Ok).0: bool);
        _173 = _178;
        goto -> bb154;
    }

    bb154: {
        _181 = discriminant(_8);
        switchInt(move _181) -> [0: bb155, 1: bb156, otherwise: bb4];
    }

    bb155: {
        _183 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_right") -> [return: bb157, unwind: bb211];
    }

    bb156: {
        _182 = ((_8 as Some).0: bool);
        _180 = _182;
        goto -> bb160;
    }

    bb157: {
        _184 = discriminant(_183);
        switchInt(move _184) -> [0: bb159, 1: bb158, otherwise: bb4];
    }

    bb158: {
        _186 = move ((_183 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _186);
        goto -> bb204;
    }

    bb159: {
        _185 = ((_183 as Ok).0: bool);
        _180 = _185;
        goto -> bb160;
    }

    bb160: {
        _188 = discriminant(_9);
        switchInt(move _188) -> [0: bb161, 1: bb162, otherwise: bb4];
    }

    bb161: {
        _190 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_full") -> [return: bb163, unwind: bb211];
    }

    bb162: {
        _189 = ((_9 as Some).0: bool);
        _187 = _189;
        goto -> bb166;
    }

    bb163: {
        _191 = discriminant(_190);
        switchInt(move _191) -> [0: bb165, 1: bb164, otherwise: bb4];
    }

    bb164: {
        _193 = move ((_190 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _193);
        goto -> bb204;
    }

    bb165: {
        _192 = ((_190 as Ok).0: bool);
        _187 = _192;
        goto -> bb166;
    }

    bb166: {
        _195 = discriminant(_10);
        switchInt(move _195) -> [0: bb167, 1: bb168, otherwise: bb4];
    }

    bb167: {
        _197 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_cross") -> [return: bb169, unwind: bb211];
    }

    bb168: {
        _196 = ((_10 as Some).0: bool);
        _194 = _196;
        goto -> bb172;
    }

    bb169: {
        _198 = discriminant(_197);
        switchInt(move _198) -> [0: bb171, 1: bb170, otherwise: bb4];
    }

    bb170: {
        _200 = move ((_197 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _200);
        goto -> bb204;
    }

    bb171: {
        _199 = ((_197 as Ok).0: bool);
        _194 = _199;
        goto -> bb172;
    }

    bb172: {
        _202 = discriminant(_11);
        switchInt(move _202) -> [0: bb173, 1: bb174, otherwise: bb4];
    }

    bb173: {
        _204 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb175, unwind: bb211];
    }

    bb174: {
        _250 = const false;
        _203 = move ((_11 as Some).0: std::option::Option<std::string::String>);
        _201 = move _203;
        goto -> bb178;
    }

    bb175: {
        _205 = discriminant(_204);
        switchInt(move _205) -> [0: bb177, 1: bb176, otherwise: bb4];
    }

    bb176: {
        _207 = move ((_204 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _207);
        goto -> bb204;
    }

    bb177: {
        _206 = move ((_204 as Ok).0: std::option::Option<std::string::String>);
        _201 = move _206;
        goto -> bb178;
    }

    bb178: {
        _209 = discriminant(_12);
        switchInt(move _209) -> [0: bb179, 1: bb180, otherwise: bb4];
    }

    bb179: {
        _211 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb181, unwind: bb210];
    }

    bb180: {
        _210 = ((_12 as Some).0: bool);
        _208 = _210;
        goto -> bb184;
    }

    bb181: {
        _212 = discriminant(_211);
        switchInt(move _212) -> [0: bb183, 1: bb182, otherwise: bb4];
    }

    bb182: {
        _214 = move ((_211 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _214);
        goto -> bb203;
    }

    bb183: {
        _213 = ((_211 as Ok).0: bool);
        _208 = _213;
        goto -> bb184;
    }

    bb184: {
        _216 = discriminant(_13);
        switchInt(move _216) -> [0: bb185, 1: bb186, otherwise: bb4];
    }

    bb185: {
        _218 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_case") -> [return: bb187, unwind: bb210];
    }

    bb186: {
        _217 = ((_13 as Some).0: bool);
        _215 = _217;
        goto -> bb190;
    }

    bb187: {
        _219 = discriminant(_218);
        switchInt(move _219) -> [0: bb189, 1: bb188, otherwise: bb4];
    }

    bb188: {
        _221 = move ((_218 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _221);
        goto -> bb203;
    }

    bb189: {
        _220 = ((_218 as Ok).0: bool);
        _215 = _220;
        goto -> bb190;
    }

    bb190: {
        _223 = discriminant(_14);
        switchInt(move _223) -> [0: bb191, 1: bb192, otherwise: bb4];
    }

    bb191: {
        _225 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_nulls") -> [return: bb193, unwind: bb210];
    }

    bb192: {
        _224 = ((_14 as Some).0: bool);
        _222 = _224;
        goto -> bb196;
    }

    bb193: {
        _226 = discriminant(_225);
        switchInt(move _226) -> [0: bb195, 1: bb194, otherwise: bb4];
    }

    bb194: {
        _228 = move ((_225 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _228);
        goto -> bb203;
    }

    bb195: {
        _227 = ((_225 as Ok).0: bool);
        _222 = _227;
        goto -> bb196;
    }

    bb196: {
        _230 = discriminant(_15);
        switchInt(move _230) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        _232 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb199, unwind: bb210];
    }

    bb198: {
        _231 = ((_15 as Some).0: std::option::Option<config::Delimiter>);
        _229 = _231;
        goto -> bb202;
    }

    bb199: {
        _233 = discriminant(_232);
        switchInt(move _233) -> [0: bb201, 1: bb200, otherwise: bb4];
    }

    bb200: {
        _235 = move ((_232 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Err(move _235);
        goto -> bb203;
    }

    bb201: {
        _234 = ((_232 as Ok).0: std::option::Option<config::Delimiter>);
        _229 = _234;
        goto -> bb202;
    }

    bb202: {
        _237 = move _145;
        _238 = move _152;
        _239 = move _159;
        _240 = move _166;
        _241 = _173;
        _242 = _180;
        _243 = _187;
        _244 = _194;
        _245 = move _201;
        _246 = _208;
        _247 = _215;
        _248 = _222;
        _249 = _229;
        _236 = join::Args { arg_columns1: move _237, arg_input1: move _238, arg_columns2: move _239, arg_input2: move _240, flag_left: move _241, flag_right: move _242, flag_full: move _243, flag_cross: move _244, flag_output: move _245, flag_no_headers: move _246, flag_no_case: move _247, flag_nulls: move _248, flag_delimiter: move _249 };
        _0 = Result::<join::Args, <__A as MapAccess<'_>>::Error>::Ok(move _236);
        _250 = const false;
        _251 = const false;
        _252 = const false;
        _253 = const false;
        _254 = const false;
        drop(_2) -> [return: bb209, unwind continue];
    }

    bb203: {
        drop(_201) -> [return: bb204, unwind: bb211];
    }

    bb204: {
        drop(_166) -> [return: bb205, unwind: bb212];
    }

    bb205: {
        drop(_159) -> [return: bb206, unwind: bb213];
    }

    bb206: {
        drop(_152) -> [return: bb207, unwind: bb214];
    }

    bb207: {
        drop(_145) -> [return: bb208, unwind: bb238];
    }

    bb208: {
        _255 = discriminant(_11);
        switchInt(move _255) -> [1: bb222, otherwise: bb221];
    }

    bb209: {
        return;
    }

    bb210 (cleanup): {
        drop(_201) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_166) -> [return: bb212, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_159) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_152) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_145) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        _261 = discriminant(_6);
        switchInt(move _261) -> [1: bb239, otherwise: bb216];
    }

    bb216 (cleanup): {
        _262 = discriminant(_5);
        switchInt(move _262) -> [1: bb241, otherwise: bb217];
    }

    bb217 (cleanup): {
        _263 = discriminant(_4);
        switchInt(move _263) -> [1: bb243, otherwise: bb218];
    }

    bb218 (cleanup): {
        _264 = discriminant(_3);
        switchInt(move _264) -> [1: bb245, otherwise: bb219];
    }

    bb219 (cleanup): {
        drop(_2) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        resume;
    }

    bb221: {
        _250 = const false;
        _256 = discriminant(_6);
        switchInt(move _256) -> [1: bb225, otherwise: bb224];
    }

    bb222: {
        switchInt(_250) -> [0: bb221, otherwise: bb223];
    }

    bb223: {
        drop(((_11 as Some).0: std::option::Option<std::string::String>)) -> [return: bb221, unwind: bb215];
    }

    bb224: {
        _251 = const false;
        _257 = discriminant(_5);
        switchInt(move _257) -> [1: bb228, otherwise: bb227];
    }

    bb225: {
        switchInt(_251) -> [0: bb224, otherwise: bb226];
    }

    bb226: {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb224, unwind: bb216];
    }

    bb227: {
        _252 = const false;
        _258 = discriminant(_4);
        switchInt(move _258) -> [1: bb231, otherwise: bb230];
    }

    bb228: {
        switchInt(_252) -> [0: bb227, otherwise: bb229];
    }

    bb229: {
        drop(((_5 as Some).0: select::SelectColumns)) -> [return: bb227, unwind: bb217];
    }

    bb230: {
        _253 = const false;
        _259 = discriminant(_3);
        switchInt(move _259) -> [1: bb234, otherwise: bb233];
    }

    bb231: {
        switchInt(_253) -> [0: bb230, otherwise: bb232];
    }

    bb232: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb230, unwind: bb218];
    }

    bb233: {
        _254 = const false;
        drop(_2) -> [return: bb209, unwind continue];
    }

    bb234: {
        switchInt(_254) -> [0: bb233, otherwise: bb235];
    }

    bb235: {
        drop(((_3 as Some).0: select::SelectColumns)) -> [return: bb233, unwind: bb219];
    }

    bb236 (cleanup): {
        switchInt(_250) -> [0: bb215, otherwise: bb237];
    }

    bb237 (cleanup): {
        drop(((_11 as Some).0: std::option::Option<std::string::String>)) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        _260 = discriminant(_11);
        switchInt(move _260) -> [1: bb236, otherwise: bb215];
    }

    bb239 (cleanup): {
        switchInt(_251) -> [0: bb216, otherwise: bb240];
    }

    bb240 (cleanup): {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_252) -> [0: bb217, otherwise: bb242];
    }

    bb242 (cleanup): {
        drop(((_5 as Some).0: select::SelectColumns)) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        switchInt(_253) -> [0: bb218, otherwise: bb244];
    }

    bb244 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb218, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        switchInt(_254) -> [0: bb219, otherwise: bb246];
    }

    bb246 (cleanup): {
        drop(((_3 as Some).0: select::SelectColumns)) -> [return: bb219, unwind terminate(cleanup)];
    }
}

const join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 13];
    let _2: &[&str; 13];
    let _3: [&str; 13];
    let mut _4: &[&str; 13];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in join::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/join.rs:76:10: 76:21>::deserialize::FIELDS: &[&str; 13] = {
    let mut _0: &[&str; 13];
    let mut _1: [&str; 13];

    bb0: {
        _1 = [const "arg_columns1", const "arg_input1", const "arg_columns2", const "arg_input2", const "flag_left", const "flag_right", const "flag_full", const "flag_cross", const "flag_output", const "flag_no_headers", const "flag_no_case", const "flag_nulls", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn join::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::join::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::join::Args>;
    let mut _4: std::result::Result<cmd::join::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::join::Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>>;
    let mut _11: std::result::Result<cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>, CliError>;
    let mut _12: &cmd::join::Args;
    let mut _13: isize;
    let mut _16: (bool, bool, bool, bool);
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _22: std::result::Result<(), CliError>;
    let mut _23: &mut cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _24: isize;
    let mut _26: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _28: std::result::Result<(), CliError>;
    let mut _29: &mut cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _30: isize;
    let mut _32: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _34: std::result::Result<(), CliError>;
    let mut _35: &mut cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _36: isize;
    let mut _38: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _40: std::result::Result<(), CliError>;
    let mut _41: &mut cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _42: isize;
    let mut _44: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _46: std::result::Result<(), CliError>;
    let mut _47: &mut cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _48: isize;
    let mut _50: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _51: CliError;
    let mut _52: &str;
    let mut _53: bool;
    scope 1 {
        debug args => _2;
        let mut _9: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
        let _14: std::result::Result<std::convert::Infallible, CliError>;
        let _15: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
        scope 6 {
            debug state => _9;
            let _25: std::result::Result<std::convert::Infallible, CliError>;
            let _31: std::result::Result<std::convert::Infallible, CliError>;
            let _37: std::result::Result<std::convert::Infallible, CliError>;
            let _43: std::result::Result<std::convert::Infallible, CliError>;
            let _49: std::result::Result<std::convert::Infallible, CliError>;
            scope 11 {
                debug residual => _25;
                scope 12 {
                }
            }
            scope 13 {
                debug val => const ();
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _31;
                scope 16 {
                }
            }
            scope 17 {
                debug val => const ();
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _37;
                scope 20 {
                }
            }
            scope 21 {
                debug val => const ();
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _43;
                scope 24 {
                }
            }
            scope 25 {
                debug val => const ();
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _49;
                scope 28 {
                }
            }
            scope 29 {
                debug val => const ();
                scope 30 {
                }
            }
        }
        scope 7 {
            debug residual => _14;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _15;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _53 = const false;
        _5 = const {alloc18: &&str};
        _52 = deref_copy (*_5);
        _4 = get_args::<join::Args>(_52, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<join::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::join::Args);
        _2 = move _8;
        _12 = &_2;
        _11 = join::Args::new_io_state(move _12) -> [return: bb6, unwind: bb51];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb50, unwind continue];
    }

    bb6: {
        _10 = <Result<IoState<File, Box<dyn std::io::Write>>, CliError> as Try>::branch(move _11) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _15 = move ((_10 as Continue).0: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>);
        _53 = const true;
        _9 = move _15;
        _17 = (_2.4: bool);
        _18 = (_2.5: bool);
        _19 = (_2.6: bool);
        _20 = (_2.7: bool);
        _16 = (move _17, move _18, move _19, move _20);
        switchInt((_16.0: bool)) -> [0: bb15, otherwise: bb11];
    }

    bb9: {
        _14 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _14) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _53 = const false;
        drop(_2) -> [return: bb50, unwind continue];
    }

    bb11: {
        switchInt((_16.1: bool)) -> [0: bb12, otherwise: bb14];
    }

    bb12: {
        switchInt((_16.2: bool)) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        switchInt((_16.3: bool)) -> [0: bb21, otherwise: bb14];
    }

    bb14: {
        _51 = <CliError as From<&str>>::from(const "Please pick exactly one join operation.") -> [return: bb46, unwind: bb56];
    }

    bb15: {
        switchInt((_16.1: bool)) -> [0: bb18, otherwise: bb16];
    }

    bb16: {
        switchInt((_16.2: bool)) -> [0: bb17, otherwise: bb14];
    }

    bb17: {
        switchInt((_16.3: bool)) -> [0: bb26, otherwise: bb14];
    }

    bb18: {
        switchInt((_16.2: bool)) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        switchInt((_16.3: bool)) -> [0: bb31, otherwise: bb14];
    }

    bb20: {
        switchInt((_16.3: bool)) -> [0: bb41, otherwise: bb36];
    }

    bb21: {
        _23 = &mut _9;
        _22 = IoState::<File, Box<dyn std::io::Write>>::write_headers(move _23) -> [return: bb22, unwind: bb56];
    }

    bb22: {
        _21 = <Result<(), CliError> as Try>::branch(move _22) -> [return: bb23, unwind: bb56];
    }

    bb23: {
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        _53 = const false;
        _26 = move _9;
        _0 = IoState::<File, Box<dyn std::io::Write>>::outer_join(move _26, const false) -> [return: bb57, unwind: bb56];
    }

    bb25: {
        _25 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _25) -> [return: bb58, unwind: bb56];
    }

    bb26: {
        _29 = &mut _9;
        _28 = IoState::<File, Box<dyn std::io::Write>>::write_headers(move _29) -> [return: bb27, unwind: bb56];
    }

    bb27: {
        _27 = <Result<(), CliError> as Try>::branch(move _28) -> [return: bb28, unwind: bb56];
    }

    bb28: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        _53 = const false;
        _32 = move _9;
        _0 = IoState::<File, Box<dyn std::io::Write>>::outer_join(move _32, const true) -> [return: bb59, unwind: bb56];
    }

    bb30: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _31) -> [return: bb60, unwind: bb56];
    }

    bb31: {
        _35 = &mut _9;
        _34 = IoState::<File, Box<dyn std::io::Write>>::write_headers(move _35) -> [return: bb32, unwind: bb56];
    }

    bb32: {
        _33 = <Result<(), CliError> as Try>::branch(move _34) -> [return: bb33, unwind: bb56];
    }

    bb33: {
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        _53 = const false;
        _38 = move _9;
        _0 = IoState::<File, Box<dyn std::io::Write>>::full_outer_join(move _38) -> [return: bb61, unwind: bb56];
    }

    bb35: {
        _37 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _37) -> [return: bb62, unwind: bb56];
    }

    bb36: {
        _41 = &mut _9;
        _40 = IoState::<File, Box<dyn std::io::Write>>::write_headers(move _41) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        _39 = <Result<(), CliError> as Try>::branch(move _40) -> [return: bb38, unwind: bb56];
    }

    bb38: {
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        _53 = const false;
        _44 = move _9;
        _0 = IoState::<File, Box<dyn std::io::Write>>::cross_join(move _44) -> [return: bb63, unwind: bb56];
    }

    bb40: {
        _43 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _43) -> [return: bb64, unwind: bb56];
    }

    bb41: {
        _47 = &mut _9;
        _46 = IoState::<File, Box<dyn std::io::Write>>::write_headers(move _47) -> [return: bb42, unwind: bb56];
    }

    bb42: {
        _45 = <Result<(), CliError> as Try>::branch(move _46) -> [return: bb43, unwind: bb56];
    }

    bb43: {
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        _53 = const false;
        _50 = move _9;
        _0 = IoState::<File, Box<dyn std::io::Write>>::inner_join(move _50) -> [return: bb65, unwind: bb56];
    }

    bb45: {
        _49 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _49) -> [return: bb66, unwind: bb56];
    }

    bb46: {
        _0 = Result::<(), CliError>::Err(move _51);
        goto -> bb54;
    }

    bb47: {
        _53 = const false;
        drop(_2) -> [return: bb50, unwind continue];
    }

    bb48: {
        drop(_9) -> [return: bb49, unwind: bb51];
    }

    bb49: {
        _53 = const false;
        drop(_2) -> [return: bb50, unwind continue];
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_2) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53: {
        drop(_9) -> [return: bb47, unwind: bb51];
    }

    bb54: {
        switchInt(_53) -> [0: bb47, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_9) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_53) -> [0: bb51, otherwise: bb55];
    }

    bb57: {
        goto -> bb54;
    }

    bb58: {
        goto -> bb48;
    }

    bb59: {
        goto -> bb54;
    }

    bb60: {
        goto -> bb48;
    }

    bb61: {
        goto -> bb54;
    }

    bb62: {
        goto -> bb48;
    }

    bb63: {
        goto -> bb54;
    }

    bb64: {
        goto -> bb48;
    }

    bb65: {
        goto -> bb54;
    }

    bb66: {
        goto -> bb48;
    }
}

alloc18 (static: join::USAGE, size: 16, align: 8) {
    ╾────alloc915<imm>────╼ d3 0b 00 00 00 00 00 00 │ ╾──────╼........
}

alloc915 (size: 3027, align: 1) {
    0x000 │ 0a 4a 6f 69 6e 73 20 74 77 6f 20 73 65 74 73 20 │ .Joins two sets 
    0x010 │ 6f 66 20 43 53 56 20 64 61 74 61 20 6f 6e 20 74 │ of CSV data on t
    0x020 │ 68 65 20 73 70 65 63 69 66 69 65 64 20 63 6f 6c │ he specified col
    0x030 │ 75 6d 6e 73 2e 0a 0a 54 68 65 20 64 65 66 61 75 │ umns...The defau
    0x040 │ 6c 74 20 6a 6f 69 6e 20 6f 70 65 72 61 74 69 6f │ lt join operatio
    0x050 │ 6e 20 69 73 20 61 6e 20 27 69 6e 6e 65 72 27 20 │ n is an 'inner' 
    0x060 │ 6a 6f 69 6e 2e 20 54 68 69 73 20 63 6f 72 72 65 │ join. This corre
    0x070 │ 73 70 6f 6e 64 73 20 74 6f 20 74 68 65 0a 69 6e │ sponds to the.in
    0x080 │ 74 65 72 73 65 63 74 69 6f 6e 20 6f 66 20 72 6f │ tersection of ro
    0x090 │ 77 73 20 6f 6e 20 74 68 65 20 6b 65 79 73 20 73 │ ws on the keys s
    0x0a0 │ 70 65 63 69 66 69 65 64 2e 0a 0a 4a 6f 69 6e 73 │ pecified...Joins
    0x0b0 │ 20 61 72 65 20 61 6c 77 61 79 73 20 64 6f 6e 65 │  are always done
    0x0c0 │ 20 62 79 20 69 67 6e 6f 72 69 6e 67 20 6c 65 61 │  by ignoring lea
    0x0d0 │ 64 69 6e 67 20 61 6e 64 20 74 72 61 69 6c 69 6e │ ding and trailin
    0x0e0 │ 67 20 77 68 69 74 65 73 70 61 63 65 2e 20 42 79 │ g whitespace. By
    0x0f0 │ 20 64 65 66 61 75 6c 74 2c 0a 6a 6f 69 6e 73 20 │  default,.joins 
    0x100 │ 61 72 65 20 64 6f 6e 65 20 63 61 73 65 20 73 65 │ are done case se
    0x110 │ 6e 73 69 74 69 76 65 6c 79 2c 20 62 75 74 20 74 │ nsitively, but t
    0x120 │ 68 69 73 20 63 61 6e 20 62 65 20 64 69 73 61 62 │ his can be disab
    0x130 │ 6c 65 64 20 77 69 74 68 20 74 68 65 20 2d 2d 6e │ led with the --n
    0x140 │ 6f 2d 63 61 73 65 0a 66 6c 61 67 2e 0a 0a 54 68 │ o-case.flag...Th
    0x150 │ 65 20 63 6f 6c 75 6d 6e 73 20 61 72 67 75 6d 65 │ e columns argume
    0x160 │ 6e 74 73 20 73 70 65 63 69 66 79 20 74 68 65 20 │ nts specify the 
    0x170 │ 63 6f 6c 75 6d 6e 73 20 74 6f 20 6a 6f 69 6e 20 │ columns to join 
    0x180 │ 66 6f 72 20 65 61 63 68 20 69 6e 70 75 74 2e 20 │ for each input. 
    0x190 │ 43 6f 6c 75 6d 6e 73 20 63 61 6e 0a 62 65 20 72 │ Columns can.be r
    0x1a0 │ 65 66 65 72 65 6e 63 65 64 20 62 79 20 6e 61 6d │ eferenced by nam
    0x1b0 │ 65 20 6f 72 20 69 6e 64 65 78 2c 20 73 74 61 72 │ e or index, star
    0x1c0 │ 74 69 6e 67 20 61 74 20 31 2e 20 53 70 65 63 69 │ ting at 1. Speci
    0x1d0 │ 66 79 20 6d 75 6c 74 69 70 6c 65 20 63 6f 6c 75 │ fy multiple colu
    0x1e0 │ 6d 6e 73 20 62 79 0a 73 65 70 61 72 61 74 69 6e │ mns by.separatin
    0x1f0 │ 67 20 74 68 65 6d 20 77 69 74 68 20 61 20 63 6f │ g them with a co
    0x200 │ 6d 6d 61 2e 20 53 70 65 63 69 66 79 20 61 20 72 │ mma. Specify a r
    0x210 │ 61 6e 67 65 20 6f 66 20 63 6f 6c 75 6d 6e 73 20 │ ange of columns 
    0x220 │ 77 69 74 68 20 60 2d 60 2e 20 42 6f 74 68 0a 63 │ with `-`. Both.c
    0x230 │ 6f 6c 75 6d 6e 73 31 20 61 6e 64 20 63 6f 6c 75 │ olumns1 and colu
    0x240 │ 6d 6e 73 32 20 6d 75 73 74 20 73 70 65 63 69 66 │ mns2 must specif
    0x250 │ 79 20 65 78 61 63 74 6c 79 20 74 68 65 20 73 61 │ y exactly the sa
    0x260 │ 6d 65 20 6e 75 6d 62 65 72 20 6f 66 20 63 6f 6c │ me number of col
    0x270 │ 75 6d 6e 73 2e 0a 28 53 65 65 20 27 78 73 76 20 │ umns..(See 'xsv 
    0x280 │ 73 65 6c 65 63 74 20 2d 2d 68 65 6c 70 27 20 66 │ select --help' f
    0x290 │ 6f 72 20 74 68 65 20 66 75 6c 6c 20 73 79 6e 74 │ or the full synt
    0x2a0 │ 61 78 2e 29 0a 0a 55 73 61 67 65 3a 0a 20 20 20 │ ax.)..Usage:.   
    0x2b0 │ 20 78 73 76 20 6a 6f 69 6e 20 5b 6f 70 74 69 6f │  xsv join [optio
    0x2c0 │ 6e 73 5d 20 3c 63 6f 6c 75 6d 6e 73 31 3e 20 3c │ ns] <columns1> <
    0x2d0 │ 69 6e 70 75 74 31 3e 20 3c 63 6f 6c 75 6d 6e 73 │ input1> <columns
    0x2e0 │ 32 3e 20 3c 69 6e 70 75 74 32 3e 0a 20 20 20 20 │ 2> <input2>.    
    0x2f0 │ 78 73 76 20 6a 6f 69 6e 20 2d 2d 68 65 6c 70 0a │ xsv join --help.
    0x300 │ 0a 6a 6f 69 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 │ .join options:. 
    0x310 │ 20 20 20 2d 2d 6e 6f 2d 63 61 73 65 20 20 20 20 │    --no-case    
    0x320 │ 20 20 20 20 20 20 20 20 20 20 57 68 65 6e 20 73 │           When s
    0x330 │ 65 74 2c 20 6a 6f 69 6e 73 20 61 72 65 20 64 6f │ et, joins are do
    0x340 │ 6e 65 20 63 61 73 65 20 69 6e 73 65 6e 73 69 74 │ ne case insensit
    0x350 │ 69 76 65 6c 79 2e 0a 20 20 20 20 2d 2d 6c 65 66 │ ively..    --lef
    0x360 │ 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ t               
    0x370 │ 20 20 44 6f 20 61 20 27 6c 65 66 74 20 6f 75 74 │   Do a 'left out
    0x380 │ 65 72 27 20 6a 6f 69 6e 2e 20 54 68 69 73 20 72 │ er' join. This r
    0x390 │ 65 74 75 72 6e 73 20 61 6c 6c 20 72 6f 77 73 20 │ eturns all rows 
    0x3a0 │ 69 6e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ in.             
    0x3b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 66 69 │               fi
    0x3c0 │ 72 73 74 20 43 53 56 20 64 61 74 61 20 73 65 74 │ rst CSV data set
    0x3d0 │ 2c 20 69 6e 63 6c 75 64 69 6e 67 20 72 6f 77 73 │ , including rows
    0x3e0 │ 20 77 69 74 68 20 6e 6f 0a 20 20 20 20 20 20 20 │  with no.       
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x400 │ 20 20 20 20 63 6f 72 72 65 73 70 6f 6e 64 69 6e │     correspondin
    0x410 │ 67 20 72 6f 77 20 69 6e 20 74 68 65 20 73 65 63 │ g row in the sec
    0x420 │ 6f 6e 64 20 64 61 74 61 20 73 65 74 2e 20 57 68 │ ond data set. Wh
    0x430 │ 65 6e 20 6e 6f 0a 20 20 20 20 20 20 20 20 20 20 │ en no.          
    0x440 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x450 │ 20 63 6f 72 72 65 73 70 6f 6e 64 69 6e 67 20 72 │  corresponding r
    0x460 │ 6f 77 20 65 78 69 73 74 73 2c 20 69 74 20 69 73 │ ow exists, it is
    0x470 │ 20 70 61 64 64 65 64 20 6f 75 74 20 77 69 74 68 │  padded out with
    0x480 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x490 │ 20 20 20 20 20 20 20 20 20 20 20 20 65 6d 70 74 │             empt
    0x4a0 │ 79 20 66 69 65 6c 64 73 2e 0a 20 20 20 20 2d 2d │ y fields..    --
    0x4b0 │ 72 69 67 68 74 20 20 20 20 20 20 20 20 20 20 20 │ right           
    0x4c0 │ 20 20 20 20 20 44 6f 20 61 20 27 72 69 67 68 74 │      Do a 'right
    0x4d0 │ 20 6f 75 74 65 72 27 20 6a 6f 69 6e 2e 20 54 68 │  outer' join. Th
    0x4e0 │ 69 73 20 72 65 74 75 72 6e 73 20 61 6c 6c 20 72 │ is returns all r
    0x4f0 │ 6f 77 73 20 69 6e 0a 20 20 20 20 20 20 20 20 20 │ ows in.         
    0x500 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x510 │ 20 20 73 65 63 6f 6e 64 20 43 53 56 20 64 61 74 │   second CSV dat
    0x520 │ 61 20 73 65 74 2c 20 69 6e 63 6c 75 64 69 6e 67 │ a set, including
    0x530 │ 20 72 6f 77 73 20 77 69 74 68 20 6e 6f 0a 20 20 │  rows with no.  
    0x540 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x550 │ 20 20 20 20 20 20 20 20 20 63 6f 72 72 65 73 70 │          corresp
    0x560 │ 6f 6e 64 69 6e 67 20 72 6f 77 20 69 6e 20 74 68 │ onding row in th
    0x570 │ 65 20 66 69 72 73 74 20 64 61 74 61 20 73 65 74 │ e first data set
    0x580 │ 2e 20 57 68 65 6e 20 6e 6f 0a 20 20 20 20 20 20 │ . When no.      
    0x590 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5a0 │ 20 20 20 20 20 63 6f 72 72 65 73 70 6f 6e 64 69 │      correspondi
    0x5b0 │ 6e 67 20 72 6f 77 20 65 78 69 73 74 73 2c 20 69 │ ng row exists, i
    0x5c0 │ 74 20 69 73 20 70 61 64 64 65 64 20 6f 75 74 20 │ t is padded out 
    0x5d0 │ 77 69 74 68 0a 20 20 20 20 20 20 20 20 20 20 20 │ with.           
    0x5e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5f0 │ 65 6d 70 74 79 20 66 69 65 6c 64 73 2e 20 28 54 │ empty fields. (T
    0x600 │ 68 69 73 20 69 73 20 74 68 65 20 72 65 76 65 72 │ his is the rever
    0x610 │ 73 65 20 6f 66 20 27 6f 75 74 65 72 20 6c 65 66 │ se of 'outer lef
    0x620 │ 74 27 2e 29 0a 20 20 20 20 2d 2d 66 75 6c 6c 20 │ t'.).    --full 
    0x630 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x640 │ 44 6f 20 61 20 27 66 75 6c 6c 20 6f 75 74 65 72 │ Do a 'full outer
    0x650 │ 27 20 6a 6f 69 6e 2e 20 54 68 69 73 20 72 65 74 │ ' join. This ret
    0x660 │ 75 72 6e 73 20 61 6c 6c 20 72 6f 77 73 20 69 6e │ urns all rows in
    0x670 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x680 │ 20 20 20 20 20 20 20 20 20 20 20 20 62 6f 74 68 │             both
    0x690 │ 20 64 61 74 61 20 73 65 74 73 20 77 69 74 68 20 │  data sets with 
    0x6a0 │ 6d 61 74 63 68 69 6e 67 20 72 65 63 6f 72 64 73 │ matching records
    0x6b0 │ 20 6a 6f 69 6e 65 64 2e 20 49 66 0a 20 20 20 20 │  joined. If.    
    0x6c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x6d0 │ 20 20 20 20 20 20 20 74 68 65 72 65 20 69 73 20 │        there is 
    0x6e0 │ 6e 6f 20 6d 61 74 63 68 2c 20 74 68 65 20 6d 69 │ no match, the mi
    0x6f0 │ 73 73 69 6e 67 20 73 69 64 65 20 77 69 6c 6c 20 │ ssing side will 
    0x700 │ 62 65 20 70 61 64 64 65 64 0a 20 20 20 20 20 20 │ be padded.      
    0x710 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x720 │ 20 20 20 20 20 6f 75 74 20 77 69 74 68 20 65 6d │      out with em
    0x730 │ 70 74 79 20 66 69 65 6c 64 73 2e 20 28 54 68 69 │ pty fields. (Thi
    0x740 │ 73 20 69 73 20 74 68 65 20 63 6f 6d 62 69 6e 61 │ s is the combina
    0x750 │ 74 69 6f 6e 20 6f 66 0a 20 20 20 20 20 20 20 20 │ tion of.        
    0x760 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x770 │ 20 20 20 27 6f 75 74 65 72 20 6c 65 66 74 27 20 │    'outer left' 
    0x780 │ 61 6e 64 20 27 6f 75 74 65 72 20 72 69 67 68 74 │ and 'outer right
    0x790 │ 27 2e 29 0a 20 20 20 20 2d 2d 63 72 6f 73 73 20 │ '.).    --cross 
    0x7a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 │                U
    0x7b0 │ 53 45 20 57 49 54 48 20 43 41 55 54 49 4f 4e 2e │ SE WITH CAUTION.
    0x7c0 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x7d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 54 68 69 73 │             This
    0x7e0 │ 20 72 65 74 75 72 6e 73 20 74 68 65 20 63 61 72 │  returns the car
    0x7f0 │ 74 65 73 69 61 6e 20 70 72 6f 64 75 63 74 20 6f │ tesian product o
    0x800 │ 66 20 74 68 65 20 43 53 56 0a 20 20 20 20 20 20 │ f the CSV.      
    0x810 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x820 │ 20 20 20 20 20 64 61 74 61 20 73 65 74 73 20 67 │      data sets g
    0x830 │ 69 76 65 6e 2e 20 54 68 65 20 6e 75 6d 62 65 72 │ iven. The number
    0x840 │ 20 6f 66 20 72 6f 77 73 20 72 65 74 75 72 6e 20 │  of rows return 
    0x850 │ 69 73 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ is.             
    0x860 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 65 71 │               eq
    0x870 │ 75 61 6c 20 74 6f 20 4e 20 2a 20 4d 2c 20 77 68 │ ual to N * M, wh
    0x880 │ 65 72 65 20 4e 20 61 6e 64 20 4d 20 63 6f 72 72 │ ere N and M corr
    0x890 │ 65 73 70 6f 6e 64 20 74 6f 20 74 68 65 0a 20 20 │ espond to the.  
    0x8a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x8b0 │ 20 20 20 20 20 20 20 20 20 6e 75 6d 62 65 72 20 │          number 
    0x8c0 │ 6f 66 20 72 6f 77 73 20 69 6e 20 74 68 65 20 67 │ of rows in the g
    0x8d0 │ 69 76 65 6e 20 64 61 74 61 20 73 65 74 73 2c 20 │ iven data sets, 
    0x8e0 │ 72 65 73 70 65 63 74 69 76 65 6c 79 2e 0a 20 20 │ respectively..  
    0x8f0 │ 20 20 2d 2d 6e 75 6c 6c 73 20 20 20 20 20 20 20 │   --nulls       
    0x900 │ 20 20 20 20 20 20 20 20 20 57 68 65 6e 20 73 65 │          When se
    0x910 │ 74 2c 20 6a 6f 69 6e 73 20 77 69 6c 6c 20 77 6f │ t, joins will wo
    0x920 │ 72 6b 20 6f 6e 20 65 6d 70 74 79 20 66 69 65 6c │ rk on empty fiel
    0x930 │ 64 73 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ ds..            
    0x940 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 4f │                O
    0x950 │ 74 68 65 72 77 69 73 65 2c 20 65 6d 70 74 79 20 │ therwise, empty 
    0x960 │ 66 69 65 6c 64 73 20 61 72 65 20 63 6f 6d 70 6c │ fields are compl
    0x970 │ 65 74 65 6c 79 20 69 67 6e 6f 72 65 64 2e 0a 20 │ etely ignored.. 
    0x980 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x990 │ 20 20 20 20 20 20 20 20 20 20 28 49 6e 20 66 61 │           (In fa
    0x9a0 │ 63 74 2c 20 61 6e 79 20 72 6f 77 20 74 68 61 74 │ ct, any row that
    0x9b0 │ 20 68 61 73 20 61 6e 20 65 6d 70 74 79 20 66 69 │  has an empty fi
    0x9c0 │ 65 6c 64 20 69 6e 20 74 68 65 0a 20 20 20 20 20 │ eld in the.     
    0x9d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x9e0 │ 20 20 20 20 20 20 6b 65 79 20 73 70 65 63 69 66 │       key specif
    0x9f0 │ 69 65 64 20 69 73 20 69 67 6e 6f 72 65 64 2e 29 │ ied is ignored.)
    0xa00 │ 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 │ ..Common options
    0xa10 │ 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 │ :.    -h, --help
    0xa20 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 44 69 73 │              Dis
    0xa30 │ 70 6c 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 │ play this messag
    0xa40 │ 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 │ e.    -o, --outp
    0xa50 │ 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 │ ut <file>    Wri
    0xa60 │ 74 65 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 │ te output to <fi
    0xa70 │ 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 │ le> instead of s
    0xa80 │ 74 64 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d │ tdout..    -n, -
    0xa90 │ 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 20 20 20 │ -no-headers     
    0xaa0 │ 20 20 57 68 65 6e 20 73 65 74 2c 20 74 68 65 20 │   When set, the 
    0xab0 │ 66 69 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 6e │ first row will n
    0xac0 │ 6f 74 20 62 65 20 69 6e 74 65 72 70 72 65 74 65 │ ot be interprete
    0xad0 │ 64 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ d.              
    0xae0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 61 73 20 │              as 
    0xaf0 │ 68 65 61 64 65 72 73 2e 20 28 69 2e 65 2e 2c 20 │ headers. (i.e., 
    0xb00 │ 54 68 65 79 20 61 72 65 20 6e 6f 74 20 73 65 61 │ They are not sea
    0xb10 │ 72 63 68 65 64 2c 20 61 6e 61 6c 79 7a 65 64 2c │ rched, analyzed,
    0xb20 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0xb30 │ 20 20 20 20 20 20 20 20 20 20 20 20 73 6c 69 63 │             slic
    0xb40 │ 65 64 2c 20 65 74 63 2e 29 0a 20 20 20 20 2d 64 │ ed, etc.).    -d
    0xb50 │ 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 │ , --delimiter <a
    0xb60 │ 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 │ rg>  The field d
    0xb70 │ 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 │ elimiter for rea
    0xb80 │ 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 │ ding CSV data.. 
    0xb90 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0xba0 │ 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 │           Must b
    0xbb0 │ 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 │ e a single chara
    0xbc0 │ 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 │ cter. (default: 
    0xbd0 │ 2c 29 0a                                        │ ,).
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::write_headers(_1: &mut IoState<R, W>) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: bool;
    let mut _3: csv::ByteRecord;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _5: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _6: &mut csv::Reader<R>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, csv::Error>;
    let _9: &csv::ByteRecord;
    let _10: ();
    let mut _11: &mut csv::ByteRecord;
    let mut _12: csv::ByteRecordIter<'_>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _14: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _15: &mut csv::Reader<R>;
    let mut _16: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _20: std::result::Result<(), csv::Error>;
    let mut _21: &mut csv::Writer<W>;
    let mut _22: &csv::ByteRecord;
    let mut _23: isize;
    scope 1 {
        debug headers => _3;
        let _17: std::result::Result<std::convert::Infallible, csv::Error>;
        let _18: &csv::ByteRecord;
        let _24: std::result::Result<std::convert::Infallible, csv::Error>;
        scope 6 {
            debug residual => _17;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _18;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _24;
            scope 11 {
            }
        }
        scope 12 {
            debug val => const ();
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _2 = ((*_1).5: bool);
        switchInt(move _2) -> [0: bb1, otherwise: bb18];
    }

    bb1: {
        _6 = &mut ((*_1).1: csv::Reader<R>);
        _5 = Reader::<R>::byte_headers(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = ((_4 as Continue).0: &csv::ByteRecord);
        _3 = <ByteRecord as Clone>::clone(_9) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _8) -> [return: bb20, unwind continue];
    }

    bb7: {
        _11 = &mut _3;
        _15 = &mut ((*_1).3: csv::Reader<R>);
        _14 = Reader::<R>::byte_headers(move _15) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _13 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _14) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        _18 = ((_13 as Continue).0: &csv::ByteRecord);
        _12 = ByteRecord::iter(_18) -> [return: bb12, unwind: bb21];
    }

    bb11: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _17) -> [return: bb23, unwind: bb21];
    }

    bb12: {
        _10 = <ByteRecord as Extend<&[u8]>>::extend::<ByteRecordIter<'_>>(move _11, move _12) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _21 = &mut ((*_1).0: csv::Writer<W>);
        _22 = &_3;
        _20 = Writer::<W>::write_record::<&ByteRecord, &[u8]>(move _21, move _22) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _19 = <Result<(), csv::Error> as Try>::branch(move _20) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        drop(_3) -> [return: bb18, unwind continue];
    }

    bb17: {
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _24) -> [return: bb24, unwind: bb21];
    }

    bb18: {
        _0 = Result::<(), CliError>::Ok(const ());
        goto -> bb20;
    }

    bb19: {
        drop(_3) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23: {
        goto -> bb19;
    }

    bb24: {
        goto -> bb19;
    }
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::inner_join(_1: IoState<R, W>) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::ByteRecord;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::join::ValueIndex<R>>;
    let mut _5: std::result::Result<cmd::join::ValueIndex<R>, CliError>;
    let mut _6: csv::Reader<R>;
    let _7: &select::Selection;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _13: csv::ByteRecordsIter<'_, R>;
    let mut _14: csv::ByteRecordsIter<'_, R>;
    let mut _15: &mut csv::Reader<R>;
    let mut _17: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _18: &mut csv::ByteRecordsIter<'_, R>;
    let mut _19: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _23: isize;
    let _27: &select::Selection;
    let _28: &csv::ByteRecord;
    let mut _29: bool;
    let mut _30: std::option::Option<&std::vec::Vec<usize>>;
    let mut _31: &std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let _32: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _33: isize;
    let mut _35: std::slice::Iter<'_, usize>;
    let mut _36: std::slice::Iter<'_, usize>;
    let _37: &[usize];
    let mut _39: std::option::Option<&usize>;
    let mut _40: &mut std::slice::Iter<'_, usize>;
    let mut _41: isize;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _44: std::result::Result<(), CliError>;
    let mut _45: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _46: u64;
    let mut _47: isize;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _50: std::result::Result<bool, csv::Error>;
    let mut _51: &mut csv::Reader<R>;
    let mut _52: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _53: &mut csv::ByteRecord;
    let mut _54: isize;
    let mut _58: csv::ByteRecordIter<'_>;
    let mut _59: &csv::ByteRecord;
    let mut _60: csv::ByteRecordIter<'_>;
    let mut _61: &csv::ByteRecord;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _63: std::result::Result<(), csv::Error>;
    let mut _64: &mut csv::Writer<W>;
    let mut _65: isize;
    let mut _67: &usize;
    let mut _68: bool;
    scope 1 {
        debug scratch => _2;
        let mut _3: cmd::join::ValueIndex<R>;
        let _11: std::result::Result<std::convert::Infallible, CliError>;
        let _12: cmd::join::ValueIndex<R>;
        scope 2 {
            debug validx => _3;
            let mut _16: csv::ByteRecordsIter<'_, R>;
            scope 7 {
                debug iter => _16;
                let _20: std::result::Result<csv::ByteRecord, csv::Error>;
                scope 8 {
                    debug row => _20;
                    let _21: csv::ByteRecord;
                    let _24: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _25: csv::ByteRecord;
                    scope 9 {
                        debug row => _21;
                        let _26: std::vec::Vec<std::vec::Vec<u8>>;
                        scope 14 {
                            debug key => _26;
                            let _34: &std::vec::Vec<usize>;
                            scope 15 {
                                debug rows => _34;
                                let mut _38: std::slice::Iter<'_, usize>;
                                scope 16 {
                                    debug iter => _38;
                                    let _42: usize;
                                    scope 17 {
                                        debug rowi => _42;
                                        let _48: std::result::Result<std::convert::Infallible, CliError>;
                                        let _55: std::result::Result<std::convert::Infallible, csv::Error>;
                                        let _56: bool;
                                        let _57: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
                                        scope 18 {
                                            debug residual => _48;
                                            scope 19 {
                                            }
                                        }
                                        scope 20 {
                                            debug val => const ();
                                            scope 21 {
                                            }
                                        }
                                        scope 22 {
                                            debug residual => _55;
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug val => _56;
                                            scope 25 {
                                            }
                                        }
                                        scope 26 {
                                            debug combined => _57;
                                            let _66: std::result::Result<std::convert::Infallible, csv::Error>;
                                            scope 27 {
                                                debug residual => _66;
                                                scope 28 {
                                                }
                                            }
                                            scope 29 {
                                                debug val => const ();
                                                scope 30 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _24;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _25;
                        scope 13 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _12;
            scope 6 {
            }
        }
    }

    bb0: {
        _68 = const false;
        _68 = const true;
        _2 = ByteRecord::new() -> [return: bb1, unwind: bb77];
    }

    bb1: {
        _68 = const false;
        _6 = move (_1.3: csv::Reader<R>);
        _7 = &(_1.4: select::Selection);
        _8 = (_1.6: bool);
        _9 = (_1.7: bool);
        _5 = ValueIndex::<R>::new(move _6, _7, move _8, move _9) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _4 = <Result<ValueIndex<R>, CliError> as Try>::branch(move _5) -> [return: bb3, unwind: bb58];
    }

    bb3: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _12 = move ((_4 as Continue).0: cmd::join::ValueIndex<R>);
        _3 = move _12;
        _15 = &mut (_1.1: csv::Reader<R>);
        _14 = Reader::<R>::byte_records(move _15) -> [return: bb7, unwind: bb57];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _11) -> [return: bb78, unwind: bb58];
    }

    bb7: {
        _13 = <ByteRecordsIter<'_, R> as IntoIterator>::into_iter(move _14) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        _16 = move _13;
        goto -> bb9;
    }

    bb9: {
        _18 = &mut _16;
        _17 = <ByteRecordsIter<'_, R> as Iterator>::next(_18) -> [return: bb10, unwind: bb56];
    }

    bb10: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _20 = move ((_17 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _22 = <Result<ByteRecord, csv::Error> as Try>::branch(move _20) -> [return: bb13, unwind: bb56];
    }

    bb12: {
        drop(_16) -> [return: bb44, unwind: bb57];
    }

    bb13: {
        _23 = discriminant(_22);
        switchInt(move _23) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        _25 = move ((_22 as Continue).0: csv::ByteRecord);
        _21 = move _25;
        _27 = &(_1.2: select::Selection);
        _28 = &_21;
        _29 = (_1.6: bool);
        _26 = get_row_key(_27, _28, move _29) -> [return: bb16, unwind: bb55];
    }

    bb15: {
        _24 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _24) -> [return: bb79, unwind: bb56];
    }

    bb16: {
        _31 = &(_3.0: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _32 = &_26;
        _30 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::get::<Vec<Vec<u8>>>(move _31, _32) -> [return: bb17, unwind: bb54];
    }

    bb17: {
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb42, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _34 = ((_30 as Some).0: &std::vec::Vec<usize>);
        _37 = <Vec<usize> as Deref>::deref(_34) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        _36 = core::slice::<impl [usize]>::iter(_37) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _35 = <std::slice::Iter<'_, usize> as IntoIterator>::into_iter(move _36) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        _38 = move _35;
        goto -> bb22;
    }

    bb22: {
        _40 = &mut _38;
        _39 = <std::slice::Iter<'_, usize> as Iterator>::next(_40) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb25, 1: bb24, otherwise: bb5];
    }

    bb24: {
        _67 = deref_copy ((_39 as Some).0: &usize);
        _42 = (*_67);
        _45 = &mut (_3.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _46 = _42 as u64 (IntToInt);
        _44 = Indexed::<R, std::io::Cursor<Vec<u8>>>::seek(move _45, move _46) -> [return: bb26, unwind: bb54];
    }

    bb25: {
        drop(_26) -> [return: bb41, unwind: bb55];
    }

    bb26: {
        _43 = <Result<(), CliError> as Try>::branch(move _44) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        _47 = discriminant(_43);
        switchInt(move _47) -> [0: bb28, 1: bb29, otherwise: bb5];
    }

    bb28: {
        _52 = &mut (_3.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _51 = <Indexed<R, std::io::Cursor<Vec<u8>>> as DerefMut>::deref_mut(move _52) -> [return: bb30, unwind: bb54];
    }

    bb29: {
        _48 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _48) -> [return: bb80, unwind: bb54];
    }

    bb30: {
        _53 = &mut _2;
        _50 = Reader::<R>::read_byte_record(_51, _53) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _49 = <Result<bool, csv::Error> as Try>::branch(move _50) -> [return: bb32, unwind: bb54];
    }

    bb32: {
        _54 = discriminant(_49);
        switchInt(move _54) -> [0: bb33, 1: bb34, otherwise: bb5];
    }

    bb33: {
        _56 = ((_49 as Continue).0: bool);
        _59 = &_21;
        _58 = ByteRecord::iter(move _59) -> [return: bb35, unwind: bb54];
    }

    bb34: {
        _55 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _55) -> [return: bb81, unwind: bb54];
    }

    bb35: {
        _61 = &_2;
        _60 = ByteRecord::iter(move _61) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        _57 = <ByteRecordIter<'_> as Iterator>::chain::<ByteRecordIter<'_>>(move _58, move _60) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        _64 = &mut (_1.0: csv::Writer<W>);
        _63 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _64, move _57) -> [return: bb38, unwind: bb54];
    }

    bb38: {
        _62 = <Result<(), csv::Error> as Try>::branch(move _63) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb22, 1: bb40, otherwise: bb5];
    }

    bb40: {
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _66) -> [return: bb82, unwind: bb54];
    }

    bb41: {
        drop(_21) -> [return: bb9, unwind: bb56];
    }

    bb42: {
        drop(_26) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        drop(_21) -> [return: bb9, unwind: bb56];
    }

    bb44: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_3) -> [return: bb45, unwind: bb58];
    }

    bb45: {
        drop(_2) -> [return: bb46, unwind: bb77];
    }

    bb46: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb65, unwind: bb62];
    }

    bb47: {
        drop(_26) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        drop(_21) -> [return: bb49, unwind: bb56];
    }

    bb49: {
        drop(_16) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        drop(_3) -> [return: bb51, unwind: bb58];
    }

    bb51: {
        drop(_2) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb71, unwind: bb68];
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_26) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_21) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_3) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_2) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }

    bb60 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb63: {
        drop((_1.4: select::Selection)) -> [return: bb53, unwind continue];
    }

    bb64: {
        drop((_1.2: select::Selection)) -> [return: bb63, unwind: bb60];
    }

    bb65: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb64, unwind: bb61];
    }

    bb66 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb69: {
        drop((_1.4: select::Selection)) -> [return: bb53, unwind continue];
    }

    bb70: {
        drop((_1.2: select::Selection)) -> [return: bb69, unwind: bb66];
    }

    bb71: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb70, unwind: bb67];
    }

    bb72 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_68) -> [0: bb72, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.3: csv::Reader<R>)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop((_1.0: csv::Writer<W>)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb78: {
        goto -> bb51;
    }

    bb79: {
        goto -> bb49;
    }

    bb80: {
        goto -> bb47;
    }

    bb81: {
        goto -> bb47;
    }

    bb82: {
        goto -> bb47;
    }
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::outer_join(_1: IoState<R, W>, _2: bool) -> Result<(), CliError> {
    debug self => _1;
    debug right => _2;
    let mut _0: std::result::Result<(), CliError>;
    let _3: ();
    let mut _4: &mut csv::Reader<R>;
    let mut _5: &mut csv::Reader<R>;
    let _6: ();
    let mut _7: &mut select::Selection;
    let mut _8: &mut select::Selection;
    let mut _9: csv::ByteRecord;
    let mut _11: (csv::ByteRecord, csv::ByteRecord);
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, csv::ByteRecord)>;
    let mut _13: std::result::Result<(csv::ByteRecord, csv::ByteRecord), CliError>;
    let mut _14: &mut cmd::join::IoState<R, W>;
    let mut _15: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::join::ValueIndex<R>>;
    let mut _20: std::result::Result<cmd::join::ValueIndex<R>, CliError>;
    let mut _21: csv::Reader<R>;
    let _22: &select::Selection;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _28: csv::ByteRecordsIter<'_, R>;
    let mut _29: csv::ByteRecordsIter<'_, R>;
    let mut _30: &mut csv::Reader<R>;
    let mut _32: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _33: &mut csv::ByteRecordsIter<'_, R>;
    let mut _34: isize;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _38: isize;
    let _42: &select::Selection;
    let _43: &csv::ByteRecord;
    let mut _44: bool;
    let mut _45: std::option::Option<&std::vec::Vec<usize>>;
    let mut _46: &std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let _47: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _48: isize;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _50: std::result::Result<(), csv::Error>;
    let mut _51: &mut csv::Writer<W>;
    let mut _52: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _53: csv::ByteRecordIter<'_>;
    let mut _54: &csv::ByteRecord;
    let mut _55: &csv::ByteRecord;
    let mut _56: isize;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _59: std::result::Result<(), csv::Error>;
    let mut _60: &mut csv::Writer<W>;
    let mut _61: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _62: csv::ByteRecordIter<'_>;
    let mut _63: &csv::ByteRecord;
    let mut _64: &csv::ByteRecord;
    let mut _65: isize;
    let mut _68: std::slice::Iter<'_, usize>;
    let mut _69: std::slice::Iter<'_, usize>;
    let _70: &[usize];
    let mut _72: std::option::Option<&usize>;
    let mut _73: &mut std::slice::Iter<'_, usize>;
    let mut _74: isize;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _77: std::result::Result<(), CliError>;
    let mut _78: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _79: u64;
    let mut _80: isize;
    let mut _83: &csv::ByteRecord;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _85: std::result::Result<bool, csv::Error>;
    let mut _86: &mut csv::Reader<R>;
    let mut _87: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _88: &mut csv::ByteRecord;
    let mut _89: isize;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _93: std::result::Result<(), csv::Error>;
    let mut _94: &mut csv::Writer<W>;
    let mut _95: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _96: csv::ByteRecordIter<'_>;
    let mut _97: &csv::ByteRecord;
    let mut _98: isize;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _101: std::result::Result<(), csv::Error>;
    let mut _102: &mut csv::Writer<W>;
    let mut _103: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _104: &csv::ByteRecord;
    let mut _105: isize;
    let mut _107: &usize;
    let mut _108: bool;
    scope 1 {
        debug scratch => _9;
        let _10: csv::ByteRecord;
        let _16: std::result::Result<std::convert::Infallible, CliError>;
        let _17: (csv::ByteRecord, csv::ByteRecord);
        scope 2 {
            debug pad2 => _10;
            let mut _18: cmd::join::ValueIndex<R>;
            let _26: std::result::Result<std::convert::Infallible, CliError>;
            let _27: cmd::join::ValueIndex<R>;
            scope 7 {
                debug validx => _18;
                let mut _31: csv::ByteRecordsIter<'_, R>;
                scope 12 {
                    debug iter => _31;
                    let _35: std::result::Result<csv::ByteRecord, csv::Error>;
                    scope 13 {
                        debug row => _35;
                        let _36: csv::ByteRecord;
                        let _39: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _40: csv::ByteRecord;
                        scope 14 {
                            debug row => _36;
                            let _41: std::vec::Vec<std::vec::Vec<u8>>;
                            scope 19 {
                                debug key => _41;
                                let _57: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _66: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _67: &std::vec::Vec<usize>;
                                scope 20 {
                                    debug residual => _57;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => const ();
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug residual => _66;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => const ();
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug rows => _67;
                                    let mut _71: std::slice::Iter<'_, usize>;
                                    scope 29 {
                                        debug iter => _71;
                                        let _75: usize;
                                        scope 30 {
                                            debug rowi => _75;
                                            let _81: std::result::Result<std::convert::Infallible, CliError>;
                                            let _82: csv::ByteRecordIter<'_>;
                                            scope 31 {
                                                debug residual => _81;
                                                scope 32 {
                                                }
                                            }
                                            scope 33 {
                                                debug val => const ();
                                                scope 34 {
                                                }
                                            }
                                            scope 35 {
                                                debug row1 => _82;
                                                let _90: std::result::Result<std::convert::Infallible, csv::Error>;
                                                let _91: bool;
                                                let _99: std::result::Result<std::convert::Infallible, csv::Error>;
                                                let _106: std::result::Result<std::convert::Infallible, csv::Error>;
                                                scope 36 {
                                                    debug residual => _90;
                                                    scope 37 {
                                                    }
                                                }
                                                scope 38 {
                                                    debug val => _91;
                                                    scope 39 {
                                                    }
                                                }
                                                scope 40 {
                                                    debug residual => _99;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => const ();
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug residual => _106;
                                                    scope 45 {
                                                    }
                                                }
                                                scope 46 {
                                                    debug val => const ();
                                                    scope 47 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _39;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _40;
                            scope 18 {
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _26;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _27;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }

    bb0: {
        _108 = const false;
        _108 = const true;
        switchInt(_2) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _4 = &mut (_1.1: csv::Reader<R>);
        _5 = &mut (_1.3: csv::Reader<R>);
        _3 = std::mem::swap::<Reader<R>>(_4, _5) -> [return: bb2, unwind: bb109];
    }

    bb2: {
        _7 = &mut (_1.2: select::Selection);
        _8 = &mut (_1.4: select::Selection);
        _6 = std::mem::swap::<Selection>(_7, _8) -> [return: bb110, unwind: bb109];
    }

    bb3: {
        _9 = ByteRecord::new() -> [return: bb4, unwind: bb109];
    }

    bb4: {
        _14 = &mut _1;
        _13 = IoState::<R, W>::get_padding(move _14) -> [return: bb5, unwind: bb85];
    }

    bb5: {
        _12 = <Result<(ByteRecord, ByteRecord), CliError> as Try>::branch(move _13) -> [return: bb6, unwind: bb85];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _17 = move ((_12 as Continue).0: (csv::ByteRecord, csv::ByteRecord));
        _11 = move _17;
        _10 = move (_11.1: csv::ByteRecord);
        drop((_11.0: csv::ByteRecord)) -> [return: bb87, unwind: bb84];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _16) -> [return: bb111, unwind: bb85];
    }

    bb10: {
        _19 = <Result<ValueIndex<R>, CliError> as Try>::branch(move _20) -> [return: bb11, unwind: bb84];
    }

    bb11: {
        _25 = discriminant(_19);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _27 = move ((_19 as Continue).0: cmd::join::ValueIndex<R>);
        _18 = move _27;
        _30 = &mut (_1.1: csv::Reader<R>);
        _29 = Reader::<R>::byte_records(move _30) -> [return: bb14, unwind: bb83];
    }

    bb13: {
        _26 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _26) -> [return: bb112, unwind: bb84];
    }

    bb14: {
        _28 = <ByteRecordsIter<'_, R> as IntoIterator>::into_iter(move _29) -> [return: bb15, unwind: bb83];
    }

    bb15: {
        _31 = move _28;
        goto -> bb16;
    }

    bb16: {
        _33 = &mut _31;
        _32 = <ByteRecordsIter<'_, R> as Iterator>::next(_33) -> [return: bb17, unwind: bb82];
    }

    bb17: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb19, 1: bb18, otherwise: bb8];
    }

    bb18: {
        _35 = move ((_32 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _37 = <Result<ByteRecord, csv::Error> as Try>::branch(move _35) -> [return: bb20, unwind: bb82];
    }

    bb19: {
        drop(_31) -> [return: bb68, unwind: bb83];
    }

    bb20: {
        _38 = discriminant(_37);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb21: {
        _40 = move ((_37 as Continue).0: csv::ByteRecord);
        _36 = move _40;
        _42 = &(_1.2: select::Selection);
        _43 = &_36;
        _44 = (_1.6: bool);
        _41 = get_row_key(_42, _43, move _44) -> [return: bb23, unwind: bb81];
    }

    bb22: {
        _39 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _39) -> [return: bb113, unwind: bb82];
    }

    bb23: {
        _46 = &(_18.0: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _47 = &_41;
        _45 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::get::<Vec<Vec<u8>>>(move _46, _47) -> [return: bb24, unwind: bb80];
    }

    bb24: {
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb26, 1: bb25, otherwise: bb8];
    }

    bb25: {
        _67 = ((_45 as Some).0: &std::vec::Vec<usize>);
        _70 = <Vec<usize> as Deref>::deref(_67) -> [return: bb39, unwind: bb80];
    }

    bb26: {
        switchInt(_2) -> [0: bb33, otherwise: bb27];
    }

    bb27: {
        _51 = &mut (_1.0: csv::Writer<W>);
        _54 = &_10;
        _53 = ByteRecord::iter(move _54) -> [return: bb28, unwind: bb80];
    }

    bb28: {
        _55 = &_36;
        _52 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _53, move _55) -> [return: bb29, unwind: bb80];
    }

    bb29: {
        _50 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _51, move _52) -> [return: bb30, unwind: bb80];
    }

    bb30: {
        _49 = <Result<(), csv::Error> as Try>::branch(move _50) -> [return: bb31, unwind: bb80];
    }

    bb31: {
        _56 = discriminant(_49);
        switchInt(move _56) -> [0: bb66, 1: bb32, otherwise: bb8];
    }

    bb32: {
        _57 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _57) -> [return: bb114, unwind: bb80];
    }

    bb33: {
        _60 = &mut (_1.0: csv::Writer<W>);
        _63 = &_36;
        _62 = ByteRecord::iter(move _63) -> [return: bb34, unwind: bb80];
    }

    bb34: {
        _64 = &_10;
        _61 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _62, move _64) -> [return: bb35, unwind: bb80];
    }

    bb35: {
        _59 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _60, move _61) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        _58 = <Result<(), csv::Error> as Try>::branch(move _59) -> [return: bb37, unwind: bb80];
    }

    bb37: {
        _65 = discriminant(_58);
        switchInt(move _65) -> [0: bb66, 1: bb38, otherwise: bb8];
    }

    bb38: {
        _66 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _66) -> [return: bb115, unwind: bb80];
    }

    bb39: {
        _69 = core::slice::<impl [usize]>::iter(_70) -> [return: bb40, unwind: bb80];
    }

    bb40: {
        _68 = <std::slice::Iter<'_, usize> as IntoIterator>::into_iter(move _69) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        _71 = move _68;
        goto -> bb42;
    }

    bb42: {
        _73 = &mut _71;
        _72 = <std::slice::Iter<'_, usize> as Iterator>::next(_73) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb66, 1: bb44, otherwise: bb8];
    }

    bb44: {
        _107 = deref_copy ((_72 as Some).0: &usize);
        _75 = (*_107);
        _78 = &mut (_18.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _79 = _75 as u64 (IntToInt);
        _77 = Indexed::<R, std::io::Cursor<Vec<u8>>>::seek(move _78, move _79) -> [return: bb45, unwind: bb80];
    }

    bb45: {
        _76 = <Result<(), CliError> as Try>::branch(move _77) -> [return: bb46, unwind: bb80];
    }

    bb46: {
        _80 = discriminant(_76);
        switchInt(move _80) -> [0: bb47, 1: bb48, otherwise: bb8];
    }

    bb47: {
        _83 = &_36;
        _82 = ByteRecord::iter(move _83) -> [return: bb49, unwind: bb80];
    }

    bb48: {
        _81 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _81) -> [return: bb116, unwind: bb80];
    }

    bb49: {
        _87 = &mut (_18.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _86 = <Indexed<R, std::io::Cursor<Vec<u8>>> as DerefMut>::deref_mut(move _87) -> [return: bb50, unwind: bb80];
    }

    bb50: {
        _88 = &mut _9;
        _85 = Reader::<R>::read_byte_record(_86, _88) -> [return: bb51, unwind: bb80];
    }

    bb51: {
        _84 = <Result<bool, csv::Error> as Try>::branch(move _85) -> [return: bb52, unwind: bb80];
    }

    bb52: {
        _89 = discriminant(_84);
        switchInt(move _89) -> [0: bb53, 1: bb54, otherwise: bb8];
    }

    bb53: {
        _91 = ((_84 as Continue).0: bool);
        switchInt(_2) -> [0: bb61, otherwise: bb55];
    }

    bb54: {
        _90 = move ((_84 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _90) -> [return: bb117, unwind: bb80];
    }

    bb55: {
        _94 = &mut (_1.0: csv::Writer<W>);
        _97 = &_9;
        _96 = ByteRecord::iter(move _97) -> [return: bb56, unwind: bb80];
    }

    bb56: {
        _95 = <ByteRecordIter<'_> as Iterator>::chain::<ByteRecordIter<'_>>(move _96, move _82) -> [return: bb57, unwind: bb80];
    }

    bb57: {
        _93 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _94, move _95) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        _92 = <Result<(), csv::Error> as Try>::branch(move _93) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        _98 = discriminant(_92);
        switchInt(move _98) -> [0: bb42, 1: bb60, otherwise: bb8];
    }

    bb60: {
        _99 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _99) -> [return: bb118, unwind: bb80];
    }

    bb61: {
        _102 = &mut (_1.0: csv::Writer<W>);
        _104 = &_9;
        _103 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _82, move _104) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        _101 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _102, move _103) -> [return: bb63, unwind: bb80];
    }

    bb63: {
        _100 = <Result<(), csv::Error> as Try>::branch(move _101) -> [return: bb64, unwind: bb80];
    }

    bb64: {
        _105 = discriminant(_100);
        switchInt(move _105) -> [0: bb42, 1: bb65, otherwise: bb8];
    }

    bb65: {
        _106 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _106) -> [return: bb119, unwind: bb80];
    }

    bb66: {
        drop(_41) -> [return: bb67, unwind: bb81];
    }

    bb67: {
        drop(_36) -> [return: bb16, unwind: bb82];
    }

    bb68: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_18) -> [return: bb69, unwind: bb84];
    }

    bb69: {
        drop(_10) -> [return: bb70, unwind: bb85];
    }

    bb70: {
        drop(_9) -> [return: bb71, unwind: bb109];
    }

    bb71: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb93, unwind: bb90];
    }

    bb72: {
        drop(_41) -> [return: bb73, unwind: bb81];
    }

    bb73: {
        drop(_36) -> [return: bb74, unwind: bb82];
    }

    bb74: {
        drop(_31) -> [return: bb75, unwind: bb83];
    }

    bb75: {
        drop(_18) -> [return: bb76, unwind: bb84];
    }

    bb76: {
        drop(_10) -> [return: bb77, unwind: bb85];
    }

    bb77: {
        drop(_9) -> [return: bb78, unwind: bb109];
    }

    bb78: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb103, unwind: bb98];
    }

    bb79: {
        return;
    }

    bb80 (cleanup): {
        drop(_41) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_36) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_31) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_18) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_10) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_9) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        resume;
    }

    bb87: {
        _108 = const false;
        _21 = move (_1.3: csv::Reader<R>);
        _22 = &(_1.4: select::Selection);
        _23 = (_1.6: bool);
        _24 = (_1.7: bool);
        _20 = ValueIndex::<R>::new(move _21, _22, move _23, move _24) -> [return: bb10, unwind: bb84];
    }

    bb88 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb91: {
        drop((_1.4: select::Selection)) -> [return: bb79, unwind continue];
    }

    bb92: {
        drop((_1.2: select::Selection)) -> [return: bb91, unwind: bb88];
    }

    bb93: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb92, unwind: bb89];
    }

    bb94 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_108) -> [0: bb94, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.3: csv::Reader<R>)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb99: {
        drop((_1.4: select::Selection)) -> [return: bb79, unwind continue];
    }

    bb100: {
        switchInt(_108) -> [0: bb99, otherwise: bb101];
    }

    bb101: {
        drop((_1.3: csv::Reader<R>)) -> [return: bb99, unwind: bb94];
    }

    bb102: {
        drop((_1.2: select::Selection)) -> [return: bb100, unwind: bb95];
    }

    bb103: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb102, unwind: bb97];
    }

    bb104 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_108) -> [0: bb104, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop((_1.3: csv::Reader<R>)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop((_1.0: csv::Writer<W>)) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb110: {
        goto -> bb3;
    }

    bb111: {
        goto -> bb77;
    }

    bb112: {
        goto -> bb76;
    }

    bb113: {
        goto -> bb74;
    }

    bb114: {
        goto -> bb72;
    }

    bb115: {
        goto -> bb72;
    }

    bb116: {
        goto -> bb72;
    }

    bb117: {
        goto -> bb72;
    }

    bb118: {
        goto -> bb72;
    }

    bb119: {
        goto -> bb72;
    }
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::full_outer_join(_1: IoState<R, W>) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::ByteRecord;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, csv::ByteRecord)>;
    let mut _6: std::result::Result<(csv::ByteRecord, csv::ByteRecord), CliError>;
    let mut _7: &mut cmd::join::IoState<R, W>;
    let mut _8: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::join::ValueIndex<R>>;
    let mut _13: std::result::Result<cmd::join::ValueIndex<R>, CliError>;
    let mut _14: csv::Reader<R>;
    let _15: &select::Selection;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    let mut _22: std::iter::Take<std::iter::Repeat<bool>>;
    let mut _23: std::iter::Repeat<bool>;
    let mut _24: usize;
    let mut _25: csv::ByteRecordsIter<'_, R>;
    let mut _26: csv::ByteRecordsIter<'_, R>;
    let mut _27: &mut csv::Reader<R>;
    let mut _29: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _30: &mut csv::ByteRecordsIter<'_, R>;
    let mut _31: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _35: isize;
    let _39: &select::Selection;
    let _40: &csv::ByteRecord;
    let mut _41: bool;
    let mut _42: std::option::Option<&std::vec::Vec<usize>>;
    let mut _43: &std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let _44: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _45: isize;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _47: std::result::Result<(), csv::Error>;
    let mut _48: &mut csv::Writer<W>;
    let mut _49: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _50: csv::ByteRecordIter<'_>;
    let mut _51: &csv::ByteRecord;
    let mut _52: &csv::ByteRecord;
    let mut _53: isize;
    let mut _56: std::slice::Iter<'_, usize>;
    let mut _57: std::slice::Iter<'_, usize>;
    let _58: &[usize];
    let mut _60: std::option::Option<&usize>;
    let mut _61: &mut std::slice::Iter<'_, usize>;
    let mut _62: isize;
    let mut _64: &mut bool;
    let mut _65: &mut std::vec::Vec<bool>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _67: std::result::Result<(), CliError>;
    let mut _68: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _69: u64;
    let mut _70: isize;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _73: std::result::Result<bool, csv::Error>;
    let mut _74: &mut csv::Reader<R>;
    let mut _75: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _76: &mut csv::ByteRecord;
    let mut _77: isize;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _81: std::result::Result<(), csv::Error>;
    let mut _82: &mut csv::Writer<W>;
    let mut _83: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _84: csv::ByteRecordIter<'_>;
    let mut _85: &csv::ByteRecord;
    let mut _86: &csv::ByteRecord;
    let mut _87: isize;
    let mut _89: std::iter::Enumerate<std::slice::Iter<'_, bool>>;
    let mut _90: std::iter::Enumerate<std::slice::Iter<'_, bool>>;
    let mut _91: std::slice::Iter<'_, bool>;
    let _92: &[bool];
    let mut _93: &std::vec::Vec<bool>;
    let mut _95: std::option::Option<(usize, &bool)>;
    let mut _96: &mut std::iter::Enumerate<std::slice::Iter<'_, bool>>;
    let mut _97: isize;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _101: std::result::Result<(), CliError>;
    let mut _102: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _103: u64;
    let mut _104: isize;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _107: std::result::Result<bool, csv::Error>;
    let mut _108: &mut csv::Reader<R>;
    let mut _109: &mut index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
    let mut _110: &mut csv::ByteRecord;
    let mut _111: isize;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _115: std::result::Result<(), csv::Error>;
    let mut _116: &mut csv::Writer<W>;
    let mut _117: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _118: csv::ByteRecordIter<'_>;
    let mut _119: &csv::ByteRecord;
    let mut _120: &csv::ByteRecord;
    let mut _121: isize;
    let mut _123: &usize;
    let mut _124: &bool;
    let mut _125: bool;
    scope 1 {
        debug scratch => _2;
        let _3: csv::ByteRecord;
        let _4: csv::ByteRecord;
        let _9: std::result::Result<std::convert::Infallible, CliError>;
        let _10: (csv::ByteRecord, csv::ByteRecord);
        scope 2 {
            debug pad1 => _3;
            debug pad2 => _4;
            let mut _11: cmd::join::ValueIndex<R>;
            let _19: std::result::Result<std::convert::Infallible, CliError>;
            let _20: cmd::join::ValueIndex<R>;
            scope 7 {
                debug validx => _11;
                let mut _21: std::vec::Vec<bool>;
                scope 12 {
                    debug rdr2_written => _21;
                    let mut _28: csv::ByteRecordsIter<'_, R>;
                    let mut _94: std::iter::Enumerate<std::slice::Iter<'_, bool>>;
                    scope 13 {
                        debug iter => _28;
                        let _32: std::result::Result<csv::ByteRecord, csv::Error>;
                        scope 14 {
                            debug row1 => _32;
                            let _33: csv::ByteRecord;
                            let _36: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _37: csv::ByteRecord;
                            scope 15 {
                                debug row1 => _33;
                                let _38: std::vec::Vec<std::vec::Vec<u8>>;
                                scope 20 {
                                    debug key => _38;
                                    let _54: std::result::Result<std::convert::Infallible, csv::Error>;
                                    let _55: &std::vec::Vec<usize>;
                                    scope 21 {
                                        debug residual => _54;
                                        scope 22 {
                                        }
                                    }
                                    scope 23 {
                                        debug val => const ();
                                        scope 24 {
                                        }
                                    }
                                    scope 25 {
                                        debug rows => _55;
                                        let mut _59: std::slice::Iter<'_, usize>;
                                        scope 26 {
                                            debug iter => _59;
                                            let _63: usize;
                                            scope 27 {
                                                debug rowi => _63;
                                                let _71: std::result::Result<std::convert::Infallible, CliError>;
                                                let _78: std::result::Result<std::convert::Infallible, csv::Error>;
                                                let _79: bool;
                                                let _88: std::result::Result<std::convert::Infallible, csv::Error>;
                                                scope 28 {
                                                    debug residual => _71;
                                                    scope 29 {
                                                    }
                                                }
                                                scope 30 {
                                                    debug val => const ();
                                                    scope 31 {
                                                    }
                                                }
                                                scope 32 {
                                                    debug residual => _78;
                                                    scope 33 {
                                                    }
                                                }
                                                scope 34 {
                                                    debug val => _79;
                                                    scope 35 {
                                                    }
                                                }
                                                scope 36 {
                                                    debug residual => _88;
                                                    scope 37 {
                                                    }
                                                }
                                                scope 38 {
                                                    debug val => const ();
                                                    scope 39 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _36;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _37;
                                scope 19 {
                                }
                            }
                        }
                    }
                    scope 40 {
                        debug iter => _94;
                        let _98: usize;
                        let _99: bool;
                        scope 41 {
                            debug i => _98;
                            debug written => _99;
                            let _105: std::result::Result<std::convert::Infallible, CliError>;
                            let _112: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _113: bool;
                            let _122: std::result::Result<std::convert::Infallible, csv::Error>;
                            scope 42 {
                                debug residual => _105;
                                scope 43 {
                                }
                            }
                            scope 44 {
                                debug val => const ();
                                scope 45 {
                                }
                            }
                            scope 46 {
                                debug residual => _112;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug val => _113;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug residual => _122;
                                scope 51 {
                                }
                            }
                            scope 52 {
                                debug val => const ();
                                scope 53 {
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _19;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _20;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _125 = const false;
        _125 = const true;
        _2 = ByteRecord::new() -> [return: bb1, unwind: bb124];
    }

    bb1: {
        _7 = &mut _1;
        _6 = IoState::<R, W>::get_padding(move _7) -> [return: bb2, unwind: bb101];
    }

    bb2: {
        _5 = <Result<(ByteRecord, ByteRecord), CliError> as Try>::branch(move _6) -> [return: bb3, unwind: bb101];
    }

    bb3: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_5 as Continue).0: (csv::ByteRecord, csv::ByteRecord));
        _3 = move (_10.0: csv::ByteRecord);
        _4 = move (_10.1: csv::ByteRecord);
        _125 = const false;
        _14 = move (_1.3: csv::Reader<R>);
        _15 = &(_1.4: select::Selection);
        _16 = (_1.6: bool);
        _17 = (_1.7: bool);
        _13 = ValueIndex::<R>::new(move _14, _15, move _16, move _17) -> [return: bb7, unwind: bb99];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _9) -> [return: bb125, unwind: bb101];
    }

    bb7: {
        _12 = <Result<ValueIndex<R>, CliError> as Try>::branch(move _13) -> [return: bb8, unwind: bb99];
    }

    bb8: {
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _20 = move ((_12 as Continue).0: cmd::join::ValueIndex<R>);
        _11 = move _20;
        _23 = std::iter::repeat::<bool>(const false) -> [return: bb11, unwind: bb98];
    }

    bb10: {
        _19 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _19) -> [return: bb126, unwind: bb99];
    }

    bb11: {
        _24 = (_11.2: usize);
        _22 = <std::iter::Repeat<bool> as Iterator>::take(move _23, move _24) -> [return: bb12, unwind: bb98];
    }

    bb12: {
        _21 = <std::iter::Take<std::iter::Repeat<bool>> as Iterator>::collect::<Vec<bool>>(move _22) -> [return: bb13, unwind: bb98];
    }

    bb13: {
        _27 = &mut (_1.1: csv::Reader<R>);
        _26 = Reader::<R>::byte_records(move _27) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        _25 = <ByteRecordsIter<'_, R> as IntoIterator>::into_iter(move _26) -> [return: bb15, unwind: bb97];
    }

    bb15: {
        _28 = move _25;
        goto -> bb16;
    }

    bb16: {
        _30 = &mut _28;
        _29 = <ByteRecordsIter<'_, R> as Iterator>::next(_30) -> [return: bb17, unwind: bb96];
    }

    bb17: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb19, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _32 = move ((_29 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _34 = <Result<ByteRecord, csv::Error> as Try>::branch(move _32) -> [return: bb20, unwind: bb96];
    }

    bb19: {
        drop(_28) -> [return: bb55, unwind: bb97];
    }

    bb20: {
        _35 = discriminant(_34);
        switchInt(move _35) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        _37 = move ((_34 as Continue).0: csv::ByteRecord);
        _33 = move _37;
        _39 = &(_1.2: select::Selection);
        _40 = &_33;
        _41 = (_1.6: bool);
        _38 = get_row_key(_39, _40, move _41) -> [return: bb23, unwind: bb95];
    }

    bb22: {
        _36 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _36) -> [return: bb127, unwind: bb96];
    }

    bb23: {
        _43 = &(_11.0: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _44 = &_38;
        _42 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::get::<Vec<Vec<u8>>>(move _43, _44) -> [return: bb24, unwind: bb94];
    }

    bb24: {
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb26, 1: bb25, otherwise: bb5];
    }

    bb25: {
        _55 = ((_42 as Some).0: &std::vec::Vec<usize>);
        _58 = <Vec<usize> as Deref>::deref(_55) -> [return: bb32, unwind: bb94];
    }

    bb26: {
        _48 = &mut (_1.0: csv::Writer<W>);
        _51 = &_33;
        _50 = ByteRecord::iter(move _51) -> [return: bb27, unwind: bb94];
    }

    bb27: {
        _52 = &_4;
        _49 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _50, move _52) -> [return: bb28, unwind: bb94];
    }

    bb28: {
        _47 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _48, move _49) -> [return: bb29, unwind: bb94];
    }

    bb29: {
        _46 = <Result<(), csv::Error> as Try>::branch(move _47) -> [return: bb30, unwind: bb94];
    }

    bb30: {
        _53 = discriminant(_46);
        switchInt(move _53) -> [0: bb53, 1: bb31, otherwise: bb5];
    }

    bb31: {
        _54 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _54) -> [return: bb128, unwind: bb94];
    }

    bb32: {
        _57 = core::slice::<impl [usize]>::iter(_58) -> [return: bb33, unwind: bb94];
    }

    bb33: {
        _56 = <std::slice::Iter<'_, usize> as IntoIterator>::into_iter(move _57) -> [return: bb34, unwind: bb94];
    }

    bb34: {
        _59 = move _56;
        goto -> bb35;
    }

    bb35: {
        _61 = &mut _59;
        _60 = <std::slice::Iter<'_, usize> as Iterator>::next(_61) -> [return: bb36, unwind: bb94];
    }

    bb36: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb53, 1: bb37, otherwise: bb5];
    }

    bb37: {
        _123 = deref_copy ((_60 as Some).0: &usize);
        _63 = (*_123);
        _65 = &mut _21;
        _64 = <Vec<bool> as IndexMut<usize>>::index_mut(move _65, _63) -> [return: bb38, unwind: bb94];
    }

    bb38: {
        (*_64) = const true;
        _68 = &mut (_11.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _69 = _63 as u64 (IntToInt);
        _67 = Indexed::<R, std::io::Cursor<Vec<u8>>>::seek(move _68, move _69) -> [return: bb39, unwind: bb94];
    }

    bb39: {
        _66 = <Result<(), CliError> as Try>::branch(move _67) -> [return: bb40, unwind: bb94];
    }

    bb40: {
        _70 = discriminant(_66);
        switchInt(move _70) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        _75 = &mut (_11.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _74 = <Indexed<R, std::io::Cursor<Vec<u8>>> as DerefMut>::deref_mut(move _75) -> [return: bb43, unwind: bb94];
    }

    bb42: {
        _71 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _71) -> [return: bb129, unwind: bb94];
    }

    bb43: {
        _76 = &mut _2;
        _73 = Reader::<R>::read_byte_record(_74, _76) -> [return: bb44, unwind: bb94];
    }

    bb44: {
        _72 = <Result<bool, csv::Error> as Try>::branch(move _73) -> [return: bb45, unwind: bb94];
    }

    bb45: {
        _77 = discriminant(_72);
        switchInt(move _77) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        _79 = ((_72 as Continue).0: bool);
        _82 = &mut (_1.0: csv::Writer<W>);
        _85 = &_33;
        _84 = ByteRecord::iter(move _85) -> [return: bb48, unwind: bb94];
    }

    bb47: {
        _78 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _78) -> [return: bb130, unwind: bb94];
    }

    bb48: {
        _86 = &_2;
        _83 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _84, move _86) -> [return: bb49, unwind: bb94];
    }

    bb49: {
        _81 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _82, move _83) -> [return: bb50, unwind: bb94];
    }

    bb50: {
        _80 = <Result<(), csv::Error> as Try>::branch(move _81) -> [return: bb51, unwind: bb94];
    }

    bb51: {
        _87 = discriminant(_80);
        switchInt(move _87) -> [0: bb35, 1: bb52, otherwise: bb5];
    }

    bb52: {
        _88 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _88) -> [return: bb131, unwind: bb94];
    }

    bb53: {
        drop(_38) -> [return: bb54, unwind: bb95];
    }

    bb54: {
        drop(_33) -> [return: bb16, unwind: bb96];
    }

    bb55: {
        _93 = &_21;
        _92 = <Vec<bool> as Deref>::deref(move _93) -> [return: bb56, unwind: bb97];
    }

    bb56: {
        _91 = core::slice::<impl [bool]>::iter(_92) -> [return: bb57, unwind: bb97];
    }

    bb57: {
        _90 = <std::slice::Iter<'_, bool> as Iterator>::enumerate(move _91) -> [return: bb58, unwind: bb97];
    }

    bb58: {
        _89 = <Enumerate<std::slice::Iter<'_, bool>> as IntoIterator>::into_iter(move _90) -> [return: bb59, unwind: bb97];
    }

    bb59: {
        _94 = move _89;
        goto -> bb60;
    }

    bb60: {
        _96 = &mut _94;
        _95 = <Enumerate<std::slice::Iter<'_, bool>> as Iterator>::next(_96) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        _97 = discriminant(_95);
        switchInt(move _97) -> [0: bb63, 1: bb62, otherwise: bb5];
    }

    bb62: {
        _124 = deref_copy (((_95 as Some).0: (usize, &bool)).1: &bool);
        _99 = (*_124);
        _98 = (((_95 as Some).0: (usize, &bool)).0: usize);
        switchInt(_99) -> [0: bb64, otherwise: bb60];
    }

    bb63: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_21) -> [return: bb79, unwind: bb98];
    }

    bb64: {
        _102 = &mut (_11.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _103 = _98 as u64 (IntToInt);
        _101 = Indexed::<R, std::io::Cursor<Vec<u8>>>::seek(move _102, move _103) -> [return: bb65, unwind: bb97];
    }

    bb65: {
        _100 = <Result<(), CliError> as Try>::branch(move _101) -> [return: bb66, unwind: bb97];
    }

    bb66: {
        _104 = discriminant(_100);
        switchInt(move _104) -> [0: bb67, 1: bb68, otherwise: bb5];
    }

    bb67: {
        _109 = &mut (_11.1: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _108 = <Indexed<R, std::io::Cursor<Vec<u8>>> as DerefMut>::deref_mut(move _109) -> [return: bb69, unwind: bb97];
    }

    bb68: {
        _105 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _105) -> [return: bb132, unwind: bb97];
    }

    bb69: {
        _110 = &mut _2;
        _107 = Reader::<R>::read_byte_record(_108, _110) -> [return: bb70, unwind: bb97];
    }

    bb70: {
        _106 = <Result<bool, csv::Error> as Try>::branch(move _107) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        _113 = ((_106 as Continue).0: bool);
        _116 = &mut (_1.0: csv::Writer<W>);
        _119 = &_3;
        _118 = ByteRecord::iter(move _119) -> [return: bb74, unwind: bb97];
    }

    bb73: {
        _112 = move ((_106 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _112) -> [return: bb133, unwind: bb97];
    }

    bb74: {
        _120 = &_2;
        _117 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _118, move _120) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        _115 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _116, move _117) -> [return: bb76, unwind: bb97];
    }

    bb76: {
        _114 = <Result<(), csv::Error> as Try>::branch(move _115) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        _121 = discriminant(_114);
        switchInt(move _121) -> [0: bb60, 1: bb78, otherwise: bb5];
    }

    bb78: {
        _122 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _122) -> [return: bb134, unwind: bb97];
    }

    bb79: {
        drop(_11) -> [return: bb80, unwind: bb99];
    }

    bb80: {
        drop(_4) -> [return: bb81, unwind: bb100];
    }

    bb81: {
        drop(_3) -> [return: bb82, unwind: bb101];
    }

    bb82: {
        drop(_2) -> [return: bb83, unwind: bb124];
    }

    bb83: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb108, unwind: bb105];
    }

    bb84: {
        drop(_38) -> [return: bb85, unwind: bb95];
    }

    bb85: {
        drop(_33) -> [return: bb86, unwind: bb96];
    }

    bb86: {
        drop(_28) -> [return: bb87, unwind: bb97];
    }

    bb87: {
        drop(_21) -> [return: bb88, unwind: bb98];
    }

    bb88: {
        drop(_11) -> [return: bb89, unwind: bb99];
    }

    bb89: {
        drop(_4) -> [return: bb90, unwind: bb100];
    }

    bb90: {
        drop(_3) -> [return: bb91, unwind: bb101];
    }

    bb91: {
        drop(_2) -> [return: bb92, unwind: bb124];
    }

    bb92: {
        drop((_1.0: csv::Writer<W>)) -> [return: bb118, unwind: bb113];
    }

    bb93: {
        return;
    }

    bb94 (cleanup): {
        drop(_38) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_33) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_28) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_21) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_11) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_4) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_3) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_2) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }

    bb103 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb106: {
        drop((_1.4: select::Selection)) -> [return: bb93, unwind continue];
    }

    bb107: {
        drop((_1.2: select::Selection)) -> [return: bb106, unwind: bb103];
    }

    bb108: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb107, unwind: bb104];
    }

    bb109 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_125) -> [0: bb109, otherwise: bb111];
    }

    bb111 (cleanup): {
        drop((_1.3: csv::Reader<R>)) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb114: {
        drop((_1.4: select::Selection)) -> [return: bb93, unwind continue];
    }

    bb115: {
        switchInt(_125) -> [0: bb114, otherwise: bb116];
    }

    bb116: {
        drop((_1.3: csv::Reader<R>)) -> [return: bb114, unwind: bb109];
    }

    bb117: {
        drop((_1.2: select::Selection)) -> [return: bb115, unwind: bb110];
    }

    bb118: {
        drop((_1.1: csv::Reader<R>)) -> [return: bb117, unwind: bb112];
    }

    bb119 (cleanup): {
        drop((_1.4: select::Selection)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        switchInt(_125) -> [0: bb119, otherwise: bb121];
    }

    bb121 (cleanup): {
        drop((_1.3: csv::Reader<R>)) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop((_1.2: select::Selection)) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop((_1.1: csv::Reader<R>)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop((_1.0: csv::Writer<W>)) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb125: {
        goto -> bb91;
    }

    bb126: {
        goto -> bb89;
    }

    bb127: {
        goto -> bb86;
    }

    bb128: {
        goto -> bb84;
    }

    bb129: {
        goto -> bb84;
    }

    bb130: {
        goto -> bb84;
    }

    bb131: {
        goto -> bb84;
    }

    bb132: {
        goto -> bb87;
    }

    bb133: {
        goto -> bb87;
    }

    bb134: {
        goto -> bb87;
    }
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::cross_join(_1: IoState<R, W>) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::Position;
    let _3: &mut csv::Position;
    let mut _4: &mut csv::Position;
    let mut _6: csv::ByteRecordsIter<'_, R>;
    let mut _7: csv::ByteRecordsIter<'_, R>;
    let mut _8: &mut csv::Reader<R>;
    let mut _10: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _11: &mut csv::ByteRecordsIter<'_, R>;
    let mut _12: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _16: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _20: std::result::Result<(), csv::Error>;
    let mut _21: &mut csv::Reader<R>;
    let mut _22: csv::Position;
    let mut _23: &csv::Position;
    let mut _24: isize;
    let mut _26: bool;
    let mut _27: &csv::Reader<R>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _29: std::result::Result<bool, csv::Error>;
    let mut _30: &mut csv::Reader<R>;
    let mut _31: &mut csv::ByteRecord;
    let mut _32: isize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _36: std::result::Result<bool, csv::Error>;
    let mut _37: &mut csv::Reader<R>;
    let mut _38: &mut csv::ByteRecord;
    let mut _39: isize;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _43: std::result::Result<(), csv::Error>;
    let mut _44: &mut csv::Writer<W>;
    let mut _45: std::iter::Chain<csv::ByteRecordIter<'_>, csv::ByteRecordIter<'_>>;
    let mut _46: csv::ByteRecordIter<'_>;
    let mut _47: &csv::ByteRecord;
    let mut _48: &csv::ByteRecord;
    let mut _49: isize;
    scope 1 {
        debug pos => _2;
        let mut _5: csv::ByteRecord;
        scope 2 {
            debug row2 => _5;
            let mut _9: csv::ByteRecordsIter<'_, R>;
            scope 3 {
                debug iter => _9;
                let _13: std::result::Result<csv::ByteRecord, csv::Error>;
                scope 4 {
                    debug row1 => _13;
                    let _14: csv::ByteRecord;
                    let _17: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _18: csv::ByteRecord;
                    scope 5 {
                        debug row1 => _14;
                        let _25: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _33: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _34: bool;
                        let _40: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _41: bool;
                        let _50: std::result::Result<std::convert::Infallible, csv::Error>;
                        scope 10 {
                            debug residual => _25;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => const ();
                            scope 13 {
                            }
                        }
                        scope 14 {
                            debug residual => _33;
                            scope 15 {
                            }
                        }
                        scope 16 {
                            debug val => _34;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug residual => _40;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _41;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug residual => _50;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => const ();
                            scope 25 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _17;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _18;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Position::new() -> [return: bb1, unwind: bb45];
    }

    bb1: {
        _4 = &mut _2;
        _3 = Position::set_byte(move _4, const 0_u64) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _5 = ByteRecord::new() -> [return: bb3, unwind: bb45];
    }

    bb3: {
        _8 = &mut (_1.1: csv::Reader<R>);
        _7 = Reader::<R>::byte_records(move _8) -> [return: bb4, unwind: bb44];
    }

    bb4: {
        _6 = <ByteRecordsIter<'_, R> as IntoIterator>::into_iter(move _7) -> [return: bb5, unwind: bb44];
    }

    bb5: {
        _9 = move _6;
        goto -> bb6;
    }

    bb6: {
        _11 = &mut _9;
        _10 = <ByteRecordsIter<'_, R> as Iterator>::next(_11) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _13 = move ((_10 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _15 = <Result<ByteRecord, csv::Error> as Try>::branch(move _13) -> [return: bb11, unwind: bb43];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        drop(_9) -> [return: bb35, unwind: bb44];
    }

    bb11: {
        _16 = discriminant(_15);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb9];
    }

    bb12: {
        _18 = move ((_15 as Continue).0: csv::ByteRecord);
        _14 = move _18;
        _21 = &mut (_1.3: csv::Reader<R>);
        _23 = &_2;
        _22 = <Position as Clone>::clone(move _23) -> [return: bb14, unwind: bb42];
    }

    bb13: {
        _17 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _17) -> [return: bb49, unwind: bb43];
    }

    bb14: {
        _20 = Reader::<R>::seek(move _21, move _22) -> [return: bb15, unwind: bb42];
    }

    bb15: {
        _19 = <Result<(), csv::Error> as Try>::branch(move _20) -> [return: bb16, unwind: bb42];
    }

    bb16: {
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb17, 1: bb18, otherwise: bb9];
    }

    bb17: {
        _27 = &(_1.3: csv::Reader<R>);
        _26 = Reader::<R>::has_headers(move _27) -> [return: bb19, unwind: bb42];
    }

    bb18: {
        _25 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _25) -> [return: bb50, unwind: bb42];
    }

    bb19: {
        switchInt(move _26) -> [0: bb25, otherwise: bb20];
    }

    bb20: {
        _30 = &mut (_1.3: csv::Reader<R>);
        _31 = &mut _5;
        _29 = Reader::<R>::read_byte_record(move _30, _31) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _28 = <Result<bool, csv::Error> as Try>::branch(move _29) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb23, 1: bb24, otherwise: bb9];
    }

    bb23: {
        _34 = ((_28 as Continue).0: bool);
        goto -> bb25;
    }

    bb24: {
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _33) -> [return: bb51, unwind: bb42];
    }

    bb25: {
        _37 = &mut (_1.3: csv::Reader<R>);
        _38 = &mut _5;
        _36 = Reader::<R>::read_byte_record(move _37, _38) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _35 = <Result<bool, csv::Error> as Try>::branch(move _36) -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb28, 1: bb29, otherwise: bb9];
    }

    bb28: {
        _41 = ((_35 as Continue).0: bool);
        switchInt(_41) -> [0: bb48, otherwise: bb47];
    }

    bb29: {
        _40 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _40) -> [return: bb52, unwind: bb42];
    }

    bb30: {
        _48 = &_5;
        _45 = <ByteRecordIter<'_> as Iterator>::chain::<&ByteRecord>(move _46, move _48) -> [return: bb31, unwind: bb42];
    }

    bb31: {
        _43 = Writer::<W>::write_record::<std::iter::Chain<ByteRecordIter<'_>, ByteRecordIter<'_>>, &[u8]>(move _44, move _45) -> [return: bb32, unwind: bb42];
    }

    bb32: {
        _42 = <Result<(), csv::Error> as Try>::branch(move _43) -> [return: bb33, unwind: bb42];
    }

    bb33: {
        _49 = discriminant(_42);
        switchInt(move _49) -> [0: bb25, 1: bb34, otherwise: bb9];
    }

    bb34: {
        _50 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _50) -> [return: bb53, unwind: bb42];
    }

    bb35: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_5) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        drop(_1) -> [return: bb41, unwind continue];
    }

    bb37: {
        drop(_14) -> [return: bb38, unwind: bb43];
    }

    bb38: {
        drop(_9) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        drop(_5) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        drop(_1) -> [return: bb41, unwind continue];
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_14) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_9) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_5) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_1) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47: {
        _44 = &mut (_1.0: csv::Writer<W>);
        _47 = &_14;
        _46 = ByteRecord::iter(move _47) -> [return: bb30, unwind: bb42];
    }

    bb48: {
        drop(_14) -> [return: bb6, unwind: bb43];
    }

    bb49: {
        goto -> bb38;
    }

    bb50: {
        goto -> bb37;
    }

    bb51: {
        goto -> bb37;
    }

    bb52: {
        goto -> bb37;
    }

    bb53: {
        goto -> bb37;
    }
}

fn join::<impl at src/cmd/join.rs:137:1: 137:57>::get_padding(_1: &mut IoState<R, W>) -> Result<(ByteRecord, ByteRecord), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(csv::ByteRecord, csv::ByteRecord), CliError>;
    let _2: usize;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _4: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _5: &mut csv::Reader<R>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, csv::Error>;
    let _8: &csv::ByteRecord;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _11: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _12: &mut csv::Reader<R>;
    let mut _13: isize;
    let mut _16: (csv::ByteRecord, csv::ByteRecord);
    let mut _17: csv::ByteRecord;
    let mut _18: std::iter::Take<std::iter::Repeat<&[u8; 0]>>;
    let mut _19: std::iter::Repeat<&[u8; 0]>;
    let mut _20: csv::ByteRecord;
    let mut _21: std::iter::Take<std::iter::Repeat<&[u8; 0]>>;
    let mut _22: std::iter::Repeat<&[u8; 0]>;
    scope 1 {
        debug len1 => _2;
        let _9: usize;
        let _14: std::result::Result<std::convert::Infallible, csv::Error>;
        let _15: &csv::ByteRecord;
        scope 6 {
            debug len2 => _9;
        }
        scope 7 {
            debug residual => _14;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _15;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = &mut ((*_1).1: csv::Reader<R>);
        _4 = Reader::<R>::byte_headers(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_3 as Continue).0: &csv::ByteRecord);
        _2 = ByteRecord::len(_8) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(ByteRecord, ByteRecord), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _7) -> [return: bb18, unwind continue];
    }

    bb6: {
        _12 = &mut ((*_1).3: csv::Reader<R>);
        _11 = Reader::<R>::byte_headers(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_10 as Continue).0: &csv::ByteRecord);
        _9 = ByteRecord::len(_15) -> [return: bb11, unwind continue];
    }

    bb10: {
        _14 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(ByteRecord, ByteRecord), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _14) -> [return: bb18, unwind continue];
    }

    bb11: {
        _19 = std::iter::repeat::<&[u8; 0]>(const b"") -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = <std::iter::Repeat<&[u8; 0]> as Iterator>::take(move _19, _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _17 = <std::iter::Take<std::iter::Repeat<&[u8; 0]>> as Iterator>::collect::<ByteRecord>(move _18) -> [return: bb14, unwind continue];
    }

    bb14: {
        _22 = std::iter::repeat::<&[u8; 0]>(const b"") -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _21 = <std::iter::Repeat<&[u8; 0]> as Iterator>::take(move _22, _9) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        _20 = <std::iter::Take<std::iter::Repeat<&[u8; 0]>> as Iterator>::collect::<ByteRecord>(move _21) -> [return: bb17, unwind: bb19];
    }

    bb17: {
        _16 = (move _17, move _20);
        _0 = Result::<(ByteRecord, ByteRecord), CliError>::Ok(move _16);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_17) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

alloc20 (size: 0, align: 1) {}

alloc19 (size: 0, align: 1) {}

fn join::<impl at src/cmd/join.rs:279:1: 279:10>::new_io_state(_1: &join::Args) -> Result<IoState<File, Box<dyn std::io::Write>>, CliError> {
    debug self => _1;
    let mut _0: std::result::Result<cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>, CliError>;
    let _2: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let mut _5: config::Config;
    let _6: &std::option::Option<std::string::String>;
    let _7: std::option::Option<std::string::String>;
    let mut _8: std::string::String;
    let mut _9: &std::string::String;
    let mut _10: std::option::Option<config::Delimiter>;
    let mut _11: bool;
    let mut _12: select::SelectColumns;
    let mut _13: &select::SelectColumns;
    let mut _15: config::Config;
    let mut _16: config::Config;
    let mut _17: config::Config;
    let _18: &std::option::Option<std::string::String>;
    let _19: std::option::Option<std::string::String>;
    let mut _20: std::string::String;
    let mut _21: &std::string::String;
    let mut _22: std::option::Option<config::Delimiter>;
    let mut _23: bool;
    let mut _24: select::SelectColumns;
    let mut _25: &select::SelectColumns;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::fs::File>>;
    let mut _28: std::result::Result<csv::Reader<std::fs::File>, std::io::Error>;
    let mut _29: &config::Config;
    let mut _30: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::fs::File>>;
    let mut _35: std::result::Result<csv::Reader<std::fs::File>, std::io::Error>;
    let mut _36: &config::Config;
    let mut _37: isize;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (select::Selection, select::Selection)>;
    let mut _43: std::result::Result<(select::Selection, select::Selection), CliError>;
    let _44: &config::Config;
    let mut _45: &mut csv::Reader<std::fs::File>;
    let _46: &config::Config;
    let mut _47: &mut csv::Reader<std::fs::File>;
    let mut _48: isize;
    let mut _51: cmd::join::IoState<std::fs::File, std::boxed::Box<dyn std::io::Write>>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _53: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _54: &config::Config;
    let _55: config::Config;
    let _56: &std::option::Option<std::string::String>;
    let mut _57: isize;
    let mut _60: csv::Reader<std::fs::File>;
    let mut _61: select::Selection;
    let mut _62: csv::Reader<std::fs::File>;
    let mut _63: select::Selection;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    scope 1 {
        debug rconf1 => _2;
        let _14: config::Config;
        scope 2 {
            debug rconf2 => _14;
            let mut _26: csv::Reader<std::fs::File>;
            let _31: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _32: csv::Reader<std::fs::File>;
            scope 3 {
                debug rdr1 => _26;
                let mut _33: csv::Reader<std::fs::File>;
                let _38: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _39: csv::Reader<std::fs::File>;
                scope 8 {
                    debug rdr2 => _33;
                    let _40: select::Selection;
                    let _41: select::Selection;
                    let _49: std::result::Result<std::convert::Infallible, CliError>;
                    let _50: (select::Selection, select::Selection);
                    scope 13 {
                        debug sel1 => _40;
                        debug sel2 => _41;
                        let _58: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _59: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                        scope 18 {
                            debug residual => _58;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _59;
                            scope 21 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _49;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _50;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _38;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _39;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _31;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _32;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _68 = const false;
        _67 = const false;
        _9 = &((*_1).1: std::string::String);
        _8 = <std::string::String as Clone>::clone(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = std::option::Option::<std::string::String>::Some(move _8);
        _6 = &_7;
        _5 = Config::new(_6) -> [return: bb2, unwind: bb67];
    }

    bb2: {
        _10 = ((*_1).12: std::option::Option<config::Delimiter>);
        _4 = Config::delimiter(move _5, move _10) -> [return: bb3, unwind: bb67];
    }

    bb3: {
        _11 = ((*_1).9: bool);
        _3 = Config::no_headers(move _4, move _11) -> [return: bb4, unwind: bb67];
    }

    bb4: {
        _68 = const true;
        _13 = &((*_1).0: select::SelectColumns);
        _12 = <SelectColumns as Clone>::clone(move _13) -> [return: bb5, unwind: bb72];
    }

    bb5: {
        _68 = const false;
        _2 = Config::select(move _3, move _12) -> [return: bb6, unwind: bb72];
    }

    bb6: {
        _68 = const false;
        drop(_7) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        _21 = &((*_1).3: std::string::String);
        _20 = <std::string::String as Clone>::clone(move _21) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        _19 = std::option::Option::<std::string::String>::Some(move _20);
        _18 = &_19;
        _17 = Config::new(_18) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _22 = ((*_1).12: std::option::Option<config::Delimiter>);
        _16 = Config::delimiter(move _17, move _22) -> [return: bb10, unwind: bb65];
    }

    bb10: {
        _23 = ((*_1).9: bool);
        _15 = Config::no_headers(move _16, move _23) -> [return: bb11, unwind: bb65];
    }

    bb11: {
        _67 = const true;
        _25 = &((*_1).2: select::SelectColumns);
        _24 = <SelectColumns as Clone>::clone(move _25) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        _67 = const false;
        _14 = Config::select(move _15, move _24) -> [return: bb13, unwind: bb70];
    }

    bb13: {
        _67 = const false;
        drop(_19) -> [return: bb14, unwind: bb64];
    }

    bb14: {
        _29 = &_2;
        _28 = Config::reader_file(move _29) -> [return: bb15, unwind: bb64];
    }

    bb15: {
        _27 = <Result<Reader<File>, std::io::Error> as Try>::branch(move _28) -> [return: bb16, unwind: bb64];
    }

    bb16: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        _32 = move ((_27 as Continue).0: csv::Reader<std::fs::File>);
        _26 = move _32;
        _36 = &_14;
        _35 = Config::reader_file(move _36) -> [return: bb20, unwind: bb63];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<IoState<File, Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _31) -> [return: bb73, unwind: bb64];
    }

    bb20: {
        _34 = <Result<Reader<File>, std::io::Error> as Try>::branch(move _35) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb22, 1: bb23, otherwise: bb18];
    }

    bb22: {
        _39 = move ((_34 as Continue).0: csv::Reader<std::fs::File>);
        _33 = move _39;
        _44 = &_2;
        _45 = &mut _26;
        _46 = &_14;
        _47 = &mut _33;
        _43 = join::Args::get_selections::<File>(_1, _44, _45, _46, _47) -> [return: bb24, unwind: bb62];
    }

    bb23: {
        _38 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<IoState<File, Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _38) -> [return: bb74, unwind: bb63];
    }

    bb24: {
        _42 = <Result<(Selection, Selection), CliError> as Try>::branch(move _43) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        _48 = discriminant(_42);
        switchInt(move _48) -> [0: bb26, 1: bb27, otherwise: bb18];
    }

    bb26: {
        _50 = move ((_42 as Continue).0: (select::Selection, select::Selection));
        _40 = move (_50.0: select::Selection);
        _41 = move (_50.1: select::Selection);
        _56 = &((*_1).8: std::option::Option<std::string::String>);
        _55 = Config::new(_56) -> [return: bb29, unwind: bb60];
    }

    bb27: {
        _49 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<IoState<File, Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _49) -> [return: bb28, unwind: bb62];
    }

    bb28: {
        drop(_33) -> [return: bb43, unwind: bb63];
    }

    bb29: {
        _54 = &_55;
        _53 = Config::writer(move _54) -> [return: bb30, unwind: bb53];
    }

    bb30: {
        _52 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _53) -> [return: bb31, unwind: bb53];
    }

    bb31: {
        _57 = discriminant(_52);
        switchInt(move _57) -> [0: bb32, 1: bb33, otherwise: bb18];
    }

    bb32: {
        _59 = move ((_52 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _60 = move _26;
        _61 = move _40;
        _62 = move _33;
        _63 = move _41;
        _64 = (_2.4: bool);
        _65 = ((*_1).10: bool);
        _66 = ((*_1).11: bool);
        _51 = IoState::<File, Box<dyn std::io::Write>> { wtr: move _59, rdr1: move _60, sel1: move _61, rdr2: move _62, sel2: move _63, no_headers: move _64, casei: move _65, nulls: move _66 };
        _0 = Result::<IoState<File, Box<dyn std::io::Write>>, CliError>::Ok(move _51);
        drop(_14) -> [return: bb35, unwind: bb52];
    }

    bb33: {
        _58 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<IoState<File, Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _58) -> [return: bb34, unwind: bb47];
    }

    bb34: {
        drop(_41) -> [return: bb37, unwind: bb48];
    }

    bb35: {
        drop(_2) -> [return: bb36, unwind: bb59];
    }

    bb36: {
        drop(_55) -> [return: bb46, unwind continue];
    }

    bb37: {
        drop(_40) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        drop(_33) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        drop(_26) -> [return: bb40, unwind: bb51];
    }

    bb40: {
        drop(_14) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        drop(_2) -> [return: bb42, unwind: bb59];
    }

    bb42: {
        drop(_55) -> [return: bb46, unwind continue];
    }

    bb43: {
        drop(_26) -> [return: bb44, unwind: bb64];
    }

    bb44: {
        drop(_14) -> [return: bb45, unwind: bb66];
    }

    bb45: {
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_41) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_40) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_33) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_26) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_14) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_41) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_40) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_33) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_26) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_14) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_55) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_41) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_40) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_33) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_26) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_14) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_19) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_2) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_7) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        resume;
    }

    bb69 (cleanup): {
        drop(_15) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_67) -> [0: bb65, otherwise: bb69];
    }

    bb71 (cleanup): {
        drop(_3) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_68) -> [0: bb67, otherwise: bb71];
    }

    bb73: {
        goto -> bb44;
    }

    bb74: {
        goto -> bb43;
    }
}

fn join::<impl at src/cmd/join.rs:279:1: 279:10>::get_selections(_1: &join::Args, _2: &Config, _3: &mut Reader<R>, _4: &Config, _5: &mut Reader<R>) -> Result<(Selection, Selection), CliError> {
    debug self => _1;
    debug rconf1 => _2;
    debug rdr1 => _3;
    debug rconf2 => _4;
    debug rdr2 => _5;
    let mut _0: std::result::Result<(select::Selection, select::Selection), CliError>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _7: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, csv::Error>;
    let _10: &csv::ByteRecord;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _12: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _13: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _18: std::result::Result<select::Selection, std::string::String>;
    let mut _19: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _24: std::result::Result<select::Selection, std::string::String>;
    let mut _25: isize;
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: &select::Selection;
    let mut _31: usize;
    let mut _32: &select::Selection;
    let mut _33: CliError;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 2];
    let _39: [core::fmt::rt::Argument<'_>; 2];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &usize;
    let _42: usize;
    let mut _43: &select::Selection;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &usize;
    let _46: usize;
    let mut _47: &select::Selection;
    let mut _48: (select::Selection, select::Selection);
    let mut _49: select::Selection;
    let mut _50: select::Selection;
    scope 1 {
        debug headers1 => _10;
        let _14: std::result::Result<std::convert::Infallible, csv::Error>;
        let _15: &csv::ByteRecord;
        scope 6 {
            debug headers2 => _15;
            let _16: select::Selection;
            let _20: std::result::Result<std::convert::Infallible, std::string::String>;
            let _21: select::Selection;
            scope 11 {
                debug select1 => _16;
                let _22: select::Selection;
                let _26: std::result::Result<std::convert::Infallible, std::string::String>;
                let _27: select::Selection;
                scope 16 {
                    debug select2 => _22;
                    let _34: std::string::String;
                    let mut _51: &[&str; 3];
                    scope 21 {
                        debug res => _34;
                    }
                }
                scope 17 {
                    debug residual => _26;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _27;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _20;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _21;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _14;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _15;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _7 = Reader::<R>::byte_headers(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _10 = ((_6 as Continue).0: &csv::ByteRecord);
        _12 = Reader::<R>::byte_headers(_5) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(Selection, Selection), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _9) -> [return: bb30, unwind continue];
    }

    bb6: {
        _11 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _15 = ((_11 as Continue).0: &csv::ByteRecord);
        _18 = Config::selection(_2, _10) -> [return: bb10, unwind continue];
    }

    bb9: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(Selection, Selection), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _14) -> [return: bb30, unwind continue];
    }

    bb10: {
        _17 = <Result<Selection, std::string::String> as Try>::branch(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _21 = move ((_17 as Continue).0: select::Selection);
        _16 = move _21;
        _24 = Config::selection(_4, _15) -> [return: bb14, unwind: bb32];
    }

    bb13: {
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(Selection, Selection), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _20) -> [return: bb30, unwind continue];
    }

    bb14: {
        _23 = <Result<Selection, std::string::String> as Try>::branch(move _24) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _27 = move ((_23 as Continue).0: select::Selection);
        _22 = move _27;
        _30 = &_16;
        _29 = Selection::len(move _30) -> [return: bb18, unwind: bb31];
    }

    bb17: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(Selection, Selection), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _26) -> [return: bb34, unwind: bb32];
    }

    bb18: {
        _32 = &_22;
        _31 = Selection::len(move _32) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _28 = Ne(move _29, move _31);
        switchInt(move _28) -> [0: bb28, otherwise: bb20];
    }

    bb20: {
        _51 = const _;
        _36 = _51 as &[&str] (PointerCoercion(Unsize));
        _43 = &_16;
        _42 = Selection::len(move _43) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _41 = &_42;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_41) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _47 = &_22;
        _46 = Selection::len(move _47) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _45 = &_46;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_45) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _39 = [move _40, move _44];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        _34 = format(move _35) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        _33 = <CliError as From<std::string::String>>::from(move _34) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        _0 = Result::<(Selection, Selection), CliError>::Err(move _33);
        drop(_22) -> [return: bb29, unwind: bb32];
    }

    bb28: {
        _49 = move _16;
        _50 = move _22;
        _48 = (move _49, move _50);
        _0 = Result::<(Selection, Selection), CliError>::Ok(move _48);
        goto -> bb30;
    }

    bb29: {
        drop(_16) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_22) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34: {
        goto -> bb29;
    }
}

promoted[0] in join::<impl at src/cmd/join.rs:279:1: 279:10>::get_selections: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Column selections must have the same number of columns, but found column selections with ", const " and ", const " columns."];
        _0 = &_1;
        return;
    }
}

fn join::<impl at src/cmd/join.rs:333:1: 333:43>::new(_1: Reader<R>, _2: &Selection, _3: bool, _4: bool) -> Result<ValueIndex<R>, CliError> {
    debug rdr => _1;
    debug sel => _2;
    debug casei => _3;
    debug nulls => _4;
    let mut _0: std::result::Result<cmd::join::ValueIndex<R>, CliError>;
    let mut _5: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _7: std::vec::Vec<u8>;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _12: (usize, usize);
    let mut _13: bool;
    let mut _14: &csv::Reader<R>;
    let _16: &mut csv::Position;
    let mut _17: &mut csv::Position;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _19: std::result::Result<(), csv::Error>;
    let mut _20: &mut csv::Reader<R>;
    let mut _21: csv::Position;
    let mut _22: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _25: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _26: &mut csv::Reader<R>;
    let mut _27: isize;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _31: std::result::Result<(), std::io::Error>;
    let mut _32: &mut std::io::Cursor<std::vec::Vec<u8>>;
    let mut _33: isize;
    let mut _35: (usize, bool);
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _38: std::result::Result<bool, csv::Error>;
    let mut _39: &mut csv::Reader<R>;
    let mut _40: &mut csv::ByteRecord;
    let mut _41: isize;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _45: std::result::Result<(), std::io::Error>;
    let mut _46: &mut std::io::Cursor<std::vec::Vec<u8>>;
    let mut _47: u64;
    let _48: &csv::Position;
    let mut _49: std::option::Option<&csv::Position>;
    let mut _50: &csv::ByteRecord;
    let mut _51: isize;
    let mut _54: std::iter::Map<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/join.rs:370:22: 370:25}>;
    let mut _55: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let _56: &csv::ByteRecord;
    let mut _57: {closure@src/cmd/join.rs:370:22: 370:25};
    let mut _58: &bool;
    let mut _59: bool;
    let mut _60: &mut std::slice::Iter<'_, std::vec::Vec<u8>>;
    let mut _61: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let _62: &[std::vec::Vec<u8>];
    let mut _63: &std::vec::Vec<std::vec::Vec<u8>>;
    let mut _64: std::collections::hash_map::Entry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _65: &mut std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _66: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _67: isize;
    let _70: ();
    let mut _71: &mut std::vec::Vec<usize>;
    let mut _72: usize;
    let _73: &mut std::vec::Vec<usize>;
    let mut _74: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _75: std::vec::Vec<usize>;
    let _77: ();
    let mut _78: &mut std::vec::Vec<usize>;
    let mut _79: &mut std::collections::hash_map::OccupiedEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _80: usize;
    let mut _81: (usize, bool);
    let mut _82: (usize, bool);
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _84: std::result::Result<(), std::io::Error>;
    let mut _85: &mut std::io::Cursor<std::vec::Vec<u8>>;
    let mut _86: u64;
    let mut _87: usize;
    let mut _88: isize;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>>;
    let mut _91: std::result::Result<index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>, CliError>;
    let mut _92: csv::Reader<R>;
    let mut _93: std::io::Cursor<std::vec::Vec<u8>>;
    let mut _94: std::vec::Vec<u8>;
    let mut _95: std::io::Cursor<std::vec::Vec<u8>>;
    let mut _96: isize;
    let mut _99: cmd::join::ValueIndex<R>;
    let mut _100: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _101: usize;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    scope 1 {
        debug val_idx => _5;
        let mut _6: std::io::Cursor<std::vec::Vec<u8>>;
        scope 2 {
            debug row_idx => _6;
            let mut _10: usize;
            let mut _11: usize;
            scope 3 {
                debug rowi => _10;
                debug count => _11;
                let mut _15: csv::Position;
                let _28: std::result::Result<std::convert::Infallible, csv::Error>;
                let _29: &csv::ByteRecord;
                let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                let mut _36: csv::ByteRecord;
                scope 4 {
                    debug pos => _15;
                    let _23: std::result::Result<std::convert::Infallible, csv::Error>;
                    scope 5 {
                        debug residual => _23;
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => const ();
                        scope 8 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _28;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _29;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug residual => _34;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => const ();
                    scope 16 {
                    }
                }
                scope 17 {
                    debug row => _36;
                    let _42: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _43: bool;
                    let _52: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _53: std::vec::Vec<std::vec::Vec<u8>>;
                    let _89: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _97: std::result::Result<std::convert::Infallible, CliError>;
                    let _98: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>;
                    scope 18 {
                        debug residual => _42;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _43;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _52;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => const ();
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug fields => _53;
                        let _68: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
                        let mut _76: std::collections::hash_map::OccupiedEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
                        scope 27 {
                            debug v => _68;
                            let mut _69: std::vec::Vec<usize>;
                            scope 28 {
                                debug rows => _69;
                            }
                        }
                        scope 29 {
                            debug v => _76;
                        }
                    }
                    scope 30 {
                        debug residual => _89;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => const ();
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug idx => _98;
                    }
                    scope 35 {
                        debug residual => _97;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug val => _98;
                        scope 38 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _104 = const false;
        _108 = const false;
        _103 = const false;
        _102 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const true;
        _5 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::with_capacity(const 10000_usize) -> [return: bb1, unwind: bb93];
    }

    bb1: {
        _108 = const true;
        _9 = CheckedMul(const 8_usize, const 10000_usize);
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, const 10000_usize) -> [success: bb2, unwind: bb91];
    }

    bb2: {
        _8 = move (_9.0: usize);
        _7 = Vec::<u8>::with_capacity(move _8) -> [return: bb3, unwind: bb91];
    }

    bb3: {
        _6 = std::io::Cursor::<Vec<u8>>::new(move _7) -> [return: bb4, unwind: bb91];
    }

    bb4: {
        _103 = const true;
        _12 = (const 0_usize, const 0_usize);
        _10 = (_12.0: usize);
        _11 = (_12.1: usize);
        _14 = &_1;
        _13 = Reader::<R>::has_headers(move _14) -> [return: bb5, unwind: bb89];
    }

    bb5: {
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = &mut _1;
        _25 = Reader::<R>::byte_headers(move _26) -> [return: bb14, unwind: bb89];
    }

    bb7: {
        _15 = Position::new() -> [return: bb8, unwind: bb89];
    }

    bb8: {
        _17 = &mut _15;
        _16 = Position::set_byte(move _17, const 0_u64) -> [return: bb9, unwind: bb89];
    }

    bb9: {
        _20 = &mut _1;
        _21 = move _15;
        _19 = Reader::<R>::seek(move _20, move _21) -> [return: bb10, unwind: bb89];
    }

    bb10: {
        _18 = <Result<(), csv::Error> as Try>::branch(move _19) -> [return: bb11, unwind: bb89];
    }

    bb11: {
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb23, 1: bb13, otherwise: bb12];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _23 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _23) -> [return: bb94, unwind: bb89];
    }

    bb14: {
        _24 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _25) -> [return: bb15, unwind: bb89];
    }

    bb15: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb16, 1: bb17, otherwise: bb12];
    }

    bb16: {
        _29 = ((_24 as Continue).0: &csv::ByteRecord);
        _32 = &mut _6;
        _31 = <std::io::Cursor<Vec<u8>> as WriteBytesExt>::write_u64::<BigEndian>(move _32, const 0_u64) -> [return: bb18, unwind: bb89];
    }

    bb17: {
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _28) -> [return: bb95, unwind: bb89];
    }

    bb18: {
        _30 = <Result<(), std::io::Error> as Try>::branch(move _31) -> [return: bb19, unwind: bb89];
    }

    bb19: {
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb20, 1: bb21, otherwise: bb12];
    }

    bb20: {
        _35 = CheckedAdd(_11, const 1_usize);
        assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb22, unwind: bb89];
    }

    bb21: {
        _34 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb96, unwind: bb89];
    }

    bb22: {
        _11 = move (_35.0: usize);
        goto -> bb23;
    }

    bb23: {
        _36 = ByteRecord::new() -> [return: bb97, unwind: bb89];
    }

    bb24: {
        _39 = &mut _1;
        _40 = &mut _36;
        _38 = Reader::<R>::read_byte_record(move _39, _40) -> [return: bb25, unwind: bb73];
    }

    bb25: {
        _37 = <Result<bool, csv::Error> as Try>::branch(move _38) -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _41 = discriminant(_37);
        switchInt(move _41) -> [0: bb27, 1: bb28, otherwise: bb12];
    }

    bb27: {
        _43 = ((_37 as Continue).0: bool);
        switchInt(_43) -> [0: bb76, otherwise: bb75];
    }

    bb28: {
        _42 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _42) -> [return: bb98, unwind: bb73];
    }

    bb29: {
        _48 = std::option::Option::<&Position>::unwrap(move _49) -> [return: bb30, unwind: bb73];
    }

    bb30: {
        _47 = Position::byte(_48) -> [return: bb31, unwind: bb73];
    }

    bb31: {
        _45 = <std::io::Cursor<Vec<u8>> as WriteBytesExt>::write_u64::<BigEndian>(move _46, move _47) -> [return: bb32, unwind: bb73];
    }

    bb32: {
        _44 = <Result<(), std::io::Error> as Try>::branch(move _45) -> [return: bb33, unwind: bb73];
    }

    bb33: {
        _51 = discriminant(_44);
        switchInt(move _51) -> [0: bb34, 1: bb35, otherwise: bb12];
    }

    bb34: {
        _56 = &_36;
        _55 = Selection::select(_2, _56) -> [return: bb36, unwind: bb73];
    }

    bb35: {
        _52 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _52) -> [return: bb99, unwind: bb73];
    }

    bb36: {
        _58 = &_3;
        _57 = {closure@src/cmd/join.rs:370:22: 370:25} { casei: move _58 };
        _54 = <Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> as Iterator>::map::<Vec<u8>, {closure@src/cmd/join.rs:370:22: 370:25}>(move _55, move _57) -> [return: bb37, unwind: bb73];
    }

    bb37: {
        _53 = <std::iter::Map<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/join.rs:370:22: 370:25}> as Iterator>::collect::<Vec<Vec<u8>>>(move _54) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        _102 = const true;
        switchInt(_4) -> [0: bb39, otherwise: bb43];
    }

    bb39: {
        _63 = &_53;
        _62 = <Vec<Vec<u8>> as Deref>::deref(move _63) -> [return: bb40, unwind: bb87];
    }

    bb40: {
        _61 = core::slice::<impl [Vec<u8>]>::iter(_62) -> [return: bb41, unwind: bb87];
    }

    bb41: {
        _60 = &mut _61;
        _59 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::any::<{closure@src/cmd/join.rs:372:44: 372:47}>(move _60, const ZeroSized: {closure@src/cmd/join.rs:372:44: 372:47}) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        switchInt(move _59) -> [0: bb43, otherwise: bb52];
    }

    bb43: {
        _65 = &mut _5;
        _102 = const false;
        _66 = move _53;
        _64 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::entry(move _65, move _66) -> [return: bb44, unwind: bb87];
    }

    bb44: {
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb45, 1: bb46, otherwise: bb12];
    }

    bb45: {
        _76 = move ((_64 as Occupied).0: std::collections::hash_map::OccupiedEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _79 = &mut _76;
        _78 = std::collections::hash_map::OccupiedEntry::<'_, Vec<Vec<u8>>, Vec<usize>>::get_mut(move _79) -> [return: bb50, unwind: bb72];
    }

    bb46: {
        _107 = const true;
        _68 = move ((_64 as Vacant).0: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _69 = Vec::<usize>::with_capacity(const 4_usize) -> [return: bb47, unwind: bb85];
    }

    bb47: {
        _106 = const true;
        _71 = &mut _69;
        _72 = _10;
        _70 = Vec::<usize>::push(move _71, move _72) -> [return: bb48, unwind: bb83];
    }

    bb48: {
        _107 = const false;
        _74 = move _68;
        _106 = const false;
        _75 = move _69;
        _73 = std::collections::hash_map::VacantEntry::<'_, Vec<Vec<u8>>, Vec<usize>>::insert(move _74, move _75) -> [return: bb49, unwind: bb83];
    }

    bb49: {
        _106 = const false;
        _107 = const false;
        goto -> bb52;
    }

    bb50: {
        _80 = _10;
        _77 = Vec::<usize>::push(_78, move _80) -> [return: bb51, unwind: bb72];
    }

    bb51: {
        drop(_76) -> [return: bb52, unwind: bb87];
    }

    bb52: {
        _81 = CheckedAdd(_10, const 1_usize);
        assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb53, unwind: bb87];
    }

    bb53: {
        _10 = move (_81.0: usize);
        _82 = CheckedAdd(_11, const 1_usize);
        assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb54, unwind: bb87];
    }

    bb54: {
        _11 = move (_82.0: usize);
        switchInt(_102) -> [0: bb55, otherwise: bb77];
    }

    bb55: {
        _102 = const false;
        goto -> bb24;
    }

    bb56: {
        _83 = <Result<(), std::io::Error> as Try>::branch(move _84) -> [return: bb57, unwind: bb73];
    }

    bb57: {
        _88 = discriminant(_83);
        switchInt(move _88) -> [0: bb58, 1: bb59, otherwise: bb12];
    }

    bb58: {
        _104 = const false;
        _105 = const true;
        _92 = move _1;
        _103 = const false;
        _95 = move _6;
        _94 = std::io::Cursor::<Vec<u8>>::into_inner(move _95) -> [return: bb60, unwind: bb81];
    }

    bb59: {
        _89 = move ((_83 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _89) -> [return: bb100, unwind: bb73];
    }

    bb60: {
        _93 = std::io::Cursor::<Vec<u8>>::new(move _94) -> [return: bb61, unwind: bb81];
    }

    bb61: {
        _105 = const false;
        _91 = Indexed::<R, std::io::Cursor<Vec<u8>>>::open(move _92, move _93) -> [return: bb62, unwind: bb81];
    }

    bb62: {
        _105 = const false;
        _90 = <Result<Indexed<R, std::io::Cursor<Vec<u8>>>, CliError> as Try>::branch(move _91) -> [return: bb63, unwind: bb73];
    }

    bb63: {
        _96 = discriminant(_90);
        switchInt(move _96) -> [0: bb64, 1: bb65, otherwise: bb12];
    }

    bb64: {
        _98 = move ((_90 as Continue).0: index::Indexed<R, std::io::Cursor<std::vec::Vec<u8>>>);
        _108 = const false;
        _100 = move _5;
        _101 = _10;
        _99 = ValueIndex::<R> { values: move _100, idx: move _98, num_rows: move _101 };
        _0 = Result::<ValueIndex<R>, CliError>::Ok(move _99);
        drop(_36) -> [return: bb66, unwind: bb89];
    }

    bb65: {
        _97 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<ValueIndex<R>, CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _97) -> [return: bb101, unwind: bb73];
    }

    bb66: {
        _103 = const false;
        _108 = const false;
        goto -> bb71;
    }

    bb67: {
        drop(_36) -> [return: bb68, unwind: bb89];
    }

    bb68: {
        switchInt(_103) -> [0: bb69, otherwise: bb78];
    }

    bb69: {
        _103 = const false;
        drop(_5) -> [return: bb70, unwind: bb93];
    }

    bb70: {
        _108 = const false;
        switchInt(_104) -> [0: bb71, otherwise: bb79];
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_76) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_36) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        resume;
    }

    bb75: {
        _46 = &mut _6;
        _50 = &_36;
        _49 = ByteRecord::position(move _50) -> [return: bb29, unwind: bb73];
    }

    bb76: {
        _85 = &mut _6;
        _87 = _11;
        _86 = move _87 as u64 (IntToInt);
        _84 = <std::io::Cursor<Vec<u8>> as WriteBytesExt>::write_u64::<BigEndian>(move _85, move _86) -> [return: bb56, unwind: bb73];
    }

    bb77: {
        drop(_53) -> [return: bb55, unwind: bb73];
    }

    bb78: {
        drop(_6) -> [return: bb69, unwind: bb91];
    }

    bb79: {
        drop(_1) -> [return: bb71, unwind continue];
    }

    bb80 (cleanup): {
        drop(_92) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_105) -> [0: bb73, otherwise: bb80];
    }

    bb82 (cleanup): {
        drop(_69) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_106) -> [0: bb85, otherwise: bb82];
    }

    bb84 (cleanup): {
        drop(_68) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_107) -> [0: bb87, otherwise: bb84];
    }

    bb86 (cleanup): {
        drop(_53) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_102) -> [0: bb73, otherwise: bb86];
    }

    bb88 (cleanup): {
        drop(_6) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_103) -> [0: bb91, otherwise: bb88];
    }

    bb90 (cleanup): {
        drop(_5) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_108) -> [0: bb93, otherwise: bb90];
    }

    bb92 (cleanup): {
        drop(_1) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_104) -> [0: bb74, otherwise: bb92];
    }

    bb94: {
        goto -> bb68;
    }

    bb95: {
        goto -> bb68;
    }

    bb96: {
        goto -> bb68;
    }

    bb97: {
        goto -> bb24;
    }

    bb98: {
        goto -> bb67;
    }

    bb99: {
        goto -> bb67;
    }

    bb100: {
        goto -> bb67;
    }

    bb101: {
        goto -> bb67;
    }
}

fn join::<impl at src/cmd/join.rs:333:1: 333:43>::new::{closure#0}(_1: &mut {closure@src/cmd/join.rs:370:22: 370:25}, _2: &[u8]) -> Vec<u8> {
    debug v => _2;
    debug casei => (*((*_1).0: &bool));
    let mut _0: std::vec::Vec<u8>;
    let mut _3: bool;
    let mut _4: &bool;

    bb0: {
        _4 = deref_copy ((*_1).0: &bool);
        _3 = (*_4);
        _0 = transform(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::<impl at src/cmd/join.rs:333:1: 333:43>::new::{closure#1}(_1: &mut {closure@src/cmd/join.rs:372:44: 372:47}, _2: &Vec<u8>) -> bool {
    debug f => _2;
    let mut _0: bool;

    bb0: {
        _0 = Vec::<u8>::is_empty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn join::<impl at src/cmd/join.rs:398:1: 398:37>::fmt(_1: &ValueIndex<R>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::vec::Vec<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _4: std::collections::hash_map::Iter<'_, std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let mut _5: &std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>;
    let _6: ();
    let mut _7: &mut [(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)];
    let mut _8: &mut std::vec::Vec<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _9: std::vec::IntoIter<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _10: std::vec::IntoIter<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _11: std::vec::Vec<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _13: std::option::Option<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _14: &mut std::vec::IntoIter<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
    let mut _15: isize;
    let mut _19: std::iter::Map<std::slice::Iter<'_, std::vec::Vec<u8>>, {closure@src/cmd/join.rs:406:33: 406:36}>;
    let mut _20: std::slice::Iter<'_, std::vec::Vec<u8>>;
    let _21: &[std::vec::Vec<u8>];
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _23: std::result::Result<(), std::fmt::Error>;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 2];
    let _28: [core::fmt::rt::Argument<'_>; 2];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &std::string::String;
    let _31: std::string::String;
    let _32: &[std::string::String];
    let mut _33: &std::vec::Vec<std::string::String>;
    let _34: &str;
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &&std::vec::Vec<usize>;
    let mut _37: isize;
    let mut _39: bool;
    scope 1 {
        debug kvs => _3;
        let mut _12: std::vec::IntoIter<(&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)>;
        scope 2 {
            debug iter => _12;
            let _16: &std::vec::Vec<std::vec::Vec<u8>>;
            let _17: &std::vec::Vec<usize>;
            scope 3 {
                debug keys => _16;
                debug rows => _17;
                let _18: std::vec::Vec<std::string::String>;
                scope 4 {
                    debug keys => _18;
                    let mut _38: &[&str; 3];
                    scope 5 {
                        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error);
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => const ();
                        scope 8 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _39 = const false;
        _5 = &((*_1).0: std::collections::HashMap<std::vec::Vec<std::vec::Vec<u8>>, std::vec::Vec<usize>>);
        _4 = HashMap::<Vec<Vec<u8>>, Vec<usize>>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _39 = const true;
        _3 = <std::collections::hash_map::Iter<'_, Vec<Vec<u8>>, Vec<usize>> as Iterator>::collect::<Vec<(&Vec<Vec<u8>>, &Vec<usize>)>>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &mut _3;
        _7 = <Vec<(&Vec<Vec<u8>>, &Vec<usize>)> as DerefMut>::deref_mut(move _8) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _6 = std::slice::<impl [(&Vec<Vec<u8>>, &Vec<usize>)]>::sort_by::<{closure@src/cmd/join.rs:402:21: 402:41}>(_7, const ZeroSized: {closure@src/cmd/join.rs:402:21: 402:41}) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        _39 = const false;
        _11 = move _3;
        _10 = <Vec<(&Vec<Vec<u8>>, &Vec<usize>)> as IntoIterator>::into_iter(move _11) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _9 = <std::vec::IntoIter<(&Vec<Vec<u8>>, &Vec<usize>)> as IntoIterator>::into_iter(move _10) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _12 = move _9;
        goto -> bb7;
    }

    bb7: {
        _14 = &mut _12;
        _13 = <std::vec::IntoIter<(&Vec<Vec<u8>>, &Vec<usize>)> as Iterator>::next(_14) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _16 = (((_13 as Some).0: (&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)).0: &std::vec::Vec<std::vec::Vec<u8>>);
        _17 = (((_13 as Some).0: (&std::vec::Vec<std::vec::Vec<u8>>, &std::vec::Vec<usize>)).1: &std::vec::Vec<usize>);
        _21 = <Vec<Vec<u8>> as Deref>::deref(_16) -> [return: bb12, unwind: bb35];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        drop(_12) -> [return: bb27, unwind: bb38];
    }

    bb12: {
        _20 = core::slice::<impl [Vec<u8>]>::iter(_21) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        _19 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<std::string::String, {closure@src/cmd/join.rs:406:33: 406:36}>(move _20, const ZeroSized: {closure@src/cmd/join.rs:406:33: 406:36}) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _18 = <std::iter::Map<std::slice::Iter<'_, Vec<u8>>, {closure@src/cmd/join.rs:406:33: 406:36}> as Iterator>::collect::<Vec<std::string::String>>(move _19) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _38 = const _;
        _25 = _38 as &[&str] (PointerCoercion(Unsize));
        _33 = &_18;
        _32 = <Vec<std::string::String> as Deref>::deref(move _33) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        _34 = const ", ";
        _31 = std::slice::<impl [std::string::String]>::join::<&str>(_32, _34) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _30 = &_31;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_30) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _36 = &_17;
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<&Vec<usize>>(_36) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _28 = [move _29, move _35];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _23 = Formatter::<'_>::write_fmt(_2, move _24) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _22 = <Result<(), std::fmt::Error> as Try>::branch(move _23) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _37 = discriminant(_22);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb10];
    }

    bb23: {
        drop(_18) -> [return: bb26, unwind: bb33];
    }

    bb24: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        drop(_18) -> [return: bb28, unwind: bb33];
    }

    bb26: {
        drop(_31) -> [return: bb7, unwind: bb35];
    }

    bb27: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        _39 = const false;
        goto -> bb31;
    }

    bb28: {
        drop(_31) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        drop(_12) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        _39 = const false;
        goto -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_18) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_31) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_18) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_12) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37 (cleanup): {
        drop(_3) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_39) -> [0: bb36, otherwise: bb37];
    }
}

promoted[0] in join::<impl at src/cmd/join.rs:398:1: 398:37>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "(", const ") => ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn join::<impl at src/cmd/join.rs:398:1: 398:37>::fmt::{closure#0}(_1: &mut {closure@src/cmd/join.rs:402:21: 402:41}, _2: &(&Vec<Vec<u8>>, &Vec<usize>), _3: &(&Vec<Vec<u8>>, &Vec<usize>)) -> std::cmp::Ordering {
    let mut _0: std::cmp::Ordering;
    let _4: &std::vec::Vec<usize>;
    let _5: &std::vec::Vec<usize>;
    let _6: &usize;
    let _7: &usize;
    scope 1 {
        debug v1 => _4;
        debug v2 => _5;
    }

    bb0: {
        _4 = ((*_2).1: &std::vec::Vec<usize>);
        _5 = ((*_3).1: &std::vec::Vec<usize>);
        _6 = <Vec<usize> as Index<usize>>::index(_4, const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <Vec<usize> as Index<usize>>::index(_5, const 0_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <usize as Ord>::cmp(_6, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn join::<impl at src/cmd/join.rs:398:1: 398:37>::fmt::{closure#1}(_1: &mut {closure@src/cmd/join.rs:406:33: 406:36}, _2: &Vec<u8>) -> std::string::String {
    debug k => _2;
    let mut _0: std::string::String;
    let mut _3: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _4: std::vec::Vec<u8>;
    let _5: &[u8];

    bb0: {
        _5 = <Vec<u8> as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::slice::<impl [u8]>::to_vec(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = std::string::String::from_utf8(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<std::string::String, std::string::FromUtf8Error>::unwrap(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn get_row_key(_1: &Selection, _2: &ByteRecord, _3: bool) -> Vec<Vec<u8>> {
    debug sel => _1;
    debug row => _2;
    debug casei => _3;
    let mut _0: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _4: std::iter::Map<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/join.rs:419:25: 419:28}>;
    let mut _5: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _6: {closure@src/cmd/join.rs:419:25: 419:28};
    let mut _7: &bool;

    bb0: {
        _5 = Selection::select(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_3;
        _6 = {closure@src/cmd/join.rs:419:25: 419:28} { casei: move _7 };
        _4 = <Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> as Iterator>::map::<Vec<u8>, {closure@src/cmd/join.rs:419:25: 419:28}>(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::iter::Map<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, {closure@src/cmd/join.rs:419:25: 419:28}> as Iterator>::collect::<Vec<Vec<u8>>>(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn get_row_key::{closure#0}(_1: &mut {closure@src/cmd/join.rs:419:25: 419:28}, _2: &[u8]) -> Vec<u8> {
    debug v => _2;
    debug casei => (*((*_1).0: &bool));
    let mut _0: std::vec::Vec<u8>;
    let _3: &&[u8];
    let mut _4: bool;
    let mut _5: &[u8];
    let mut _6: &bool;

    bb0: {
        _3 = &_2;
        _5 = deref_copy (*_3);
        _6 = deref_copy ((*_1).0: &bool);
        _4 = (*_6);
        _0 = transform(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn transform(_1: &[u8], _2: bool) -> Vec<u8> {
    debug bs => _1;
    debug casei => _2;
    let mut _0: std::vec::Vec<u8>;
    let mut _3: std::result::Result<&str, std::str::Utf8Error>;
    let mut _4: isize;
    let _5: &str;
    let _6: &[u8];
    let _7: &str;
    let mut _9: std::iter::Map<std::str::Chars<'_>, {closure@src/cmd/join.rs:431:27: 431:30}>;
    let mut _10: std::str::Chars<'_>;
    let _11: &str;
    scope 1 {
        debug s => _5;
        let _8: std::string::String;
        scope 2 {
            debug norm => _8;
        }
    }

    bb0: {
        _3 = from_utf8(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _5 = ((_3 as Ok).0: &str);
        switchInt(_2) -> [0: bb5, otherwise: bb8];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = std::slice::<impl [u8]>::to_vec(_1) -> [return: bb13, unwind continue];
    }

    bb5: {
        _7 = core::str::<impl str>::trim(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = core::str::<impl str>::as_bytes(_7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::slice::<impl [u8]>::to_vec(_6) -> [return: bb13, unwind continue];
    }

    bb8: {
        _11 = core::str::<impl str>::trim(_5) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = core::str::<impl str>::chars(_11) -> [return: bb10, unwind continue];
    }

    bb10: {
        _9 = <Chars<'_> as Iterator>::map::<char, {closure@src/cmd/join.rs:431:27: 431:30}>(move _10, const ZeroSized: {closure@src/cmd/join.rs:431:27: 431:30}) -> [return: bb11, unwind continue];
    }

    bb11: {
        _8 = <std::iter::Map<Chars<'_>, {closure@src/cmd/join.rs:431:27: 431:30}> as Iterator>::collect::<std::string::String>(move _9) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = std::string::String::into_bytes(move _8) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn transform::{closure#0}(_1: &mut {closure@src/cmd/join.rs:431:27: 431:30}, _2: char) -> char {
    debug c => _2;
    let mut _0: char;
    let mut _3: std::option::Option<char>;
    let mut _4: &mut std::char::ToLowercase;
    let mut _5: std::char::ToLowercase;

    bb0: {
        _5 = char::methods::<impl char>::to_lowercase(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <ToLowercase as Iterator>::next(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<char>::unwrap(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

static partition::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nPartitions the given CSV data into chunks based on the value of a column\n\nThe files are written to the output directory with filenames based on the\nvalues in the partition column and the `--filename` flag.\n\nUsage:\n    xsv partition [options] <column> <outdir> [<input>]\n    xsv partition --help\n\npartition options:\n    --filename <filename>  A filename template to use when constructing\n                           the names of the output files.  The string '{}'\n                           will be replaced by a value based on the value\n                           of the field, but sanitized for shell safety.\n                           [default: {}.csv]\n    -p, --prefix-length <n>  Truncate the partition column after the\n                           specified number of bytes when creating the\n                           output file.\n\nCommon options:\n    -h, --help             Display this message\n    -n, --no-headers       When set, the first row will NOT be interpreted\n                           as column names. Otherwise, the first row will\n                           appear in all chunks as the header row.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

fn partition::<impl at src/cmd/partition.rs:44:10: 44:15>::clone(_1: &partition::Args) -> partition::Args {
    debug self => _1;
    let mut _0: cmd::partition::Args;
    let mut _2: select::SelectColumns;
    let _3: &select::SelectColumns;
    let mut _4: std::option::Option<std::string::String>;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: std::string::String;
    let _7: &std::string::String;
    let mut _8: util::FilenameTemplate;
    let _9: &util::FilenameTemplate;
    let mut _10: std::option::Option<usize>;
    let _11: &std::option::Option<usize>;
    let mut _12: bool;
    let _13: &bool;
    let mut _14: std::option::Option<config::Delimiter>;
    let _15: &std::option::Option<config::Delimiter>;

    bb0: {
        _3 = &((*_1).0: select::SelectColumns);
        _2 = <SelectColumns as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::option::Option<std::string::String>);
        _4 = <std::option::Option<std::string::String> as Clone>::clone(_5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _7 = &((*_1).2: std::string::String);
        _6 = <std::string::String as Clone>::clone(_7) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _9 = &((*_1).3: util::FilenameTemplate);
        _8 = <FilenameTemplate as Clone>::clone(_9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _11 = &((*_1).4: std::option::Option<usize>);
        _10 = <std::option::Option<usize> as Clone>::clone(_11) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _13 = &((*_1).5: bool);
        _12 = (*_13);
        _15 = &((*_1).6: std::option::Option<config::Delimiter>);
        _14 = <std::option::Option<Delimiter> as Clone>::clone(_15) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = partition::Args { arg_column: move _2, arg_input: move _4, arg_outdir: move _6, flag_filename: move _8, flag_prefix_length: move _10, flag_no_headers: move _12, flag_delimiter: move _14 };
        return;
    }

    bb7 (cleanup): {
        drop(_8) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_6) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

const partition::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize(_1: __D) -> Result<partition::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::partition::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<partition::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::expecting(_1: &partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_u64(_1: partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E> {
    debug self => const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _4: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _5: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _6: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _7: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _8: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _9: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _10: __E;
    let mut _11: serde::de::Unexpected<'_>;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1];
    }

    bb1: {
        _11 = Unexpected::<'_>::Unsigned(_2);
        _13 = const _;
        _12 = _13 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <__E as serde::de::Error>::invalid_value(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb2: {
        _3 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field0;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field1;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb10;
    }

    bb4: {
        _5 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field2;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field3;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb6: {
        _7 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field4;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field5;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb8: {
        _9 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field6;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 7";
        _0 = &_1;
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_str(_1: partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E> {
    debug self => const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _11: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _12: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _13: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _14: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _15: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _16: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _17: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;

    bb0: {
        _9 = <str as PartialEq>::eq(_2, const "arg_column") -> [return: bb21, unwind continue];
    }

    bb1: {
        _10 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field0;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb22;
    }

    bb2: {
        _8 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb20, unwind continue];
    }

    bb3: {
        _11 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field1;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb22;
    }

    bb4: {
        _7 = <str as PartialEq>::eq(_2, const "arg_outdir") -> [return: bb19, unwind continue];
    }

    bb5: {
        _12 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field2;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb22;
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "flag_filename") -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field3;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb22;
    }

    bb8: {
        _5 = <str as PartialEq>::eq(_2, const "flag_prefix_length") -> [return: bb17, unwind continue];
    }

    bb9: {
        _14 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field4;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb22;
    }

    bb10: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field5;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb22;
    }

    bb12: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb15, unwind continue];
    }

    bb13: {
        _16 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field6;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb22;
    }

    bb14: {
        _17 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__ignore;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb16: {
        switchInt(move _4) -> [0: bb12, otherwise: bb11];
    }

    bb17: {
        switchInt(move _5) -> [0: bb10, otherwise: bb9];
    }

    bb18: {
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb19: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb20: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb21: {
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb22: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_bytes(_1: partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E> {
    debug self => const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _22: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _23: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _24: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _25: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _26: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _27: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
    let mut _28: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 10_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb17, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 10]) -> [97: bb2, otherwise: bb11];
    }

    bb2: {
        switchInt((*_2)[1 of 10]) -> [114: bb3, otherwise: bb11];
    }

    bb3: {
        switchInt((*_2)[2 of 10]) -> [103: bb4, otherwise: bb11];
    }

    bb4: {
        switchInt((*_2)[3 of 10]) -> [95: bb5, otherwise: bb11];
    }

    bb5: {
        switchInt((*_2)[4 of 10]) -> [99: bb6, 111: bb12, otherwise: bb11];
    }

    bb6: {
        switchInt((*_2)[5 of 10]) -> [111: bb7, otherwise: bb11];
    }

    bb7: {
        switchInt((*_2)[6 of 10]) -> [108: bb8, otherwise: bb11];
    }

    bb8: {
        switchInt((*_2)[7 of 10]) -> [117: bb9, otherwise: bb11];
    }

    bb9: {
        switchInt((*_2)[8 of 10]) -> [109: bb10, otherwise: bb11];
    }

    bb10: {
        switchInt((*_2)[9 of 10]) -> [110: bb91, otherwise: bb11];
    }

    bb11: {
        _28 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__ignore;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb98;
    }

    bb12: {
        switchInt((*_2)[5 of 10]) -> [117: bb13, otherwise: bb11];
    }

    bb13: {
        switchInt((*_2)[6 of 10]) -> [116: bb14, otherwise: bb11];
    }

    bb14: {
        switchInt((*_2)[7 of 10]) -> [100: bb15, otherwise: bb11];
    }

    bb15: {
        switchInt((*_2)[8 of 10]) -> [105: bb16, otherwise: bb11];
    }

    bb16: {
        switchInt((*_2)[9 of 10]) -> [114: bb93, otherwise: bb11];
    }

    bb17: {
        _15 = Len((*_2));
        _16 = const 9_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb27, otherwise: bb18];
    }

    bb18: {
        switchInt((*_2)[0 of 9]) -> [97: bb19, otherwise: bb11];
    }

    bb19: {
        switchInt((*_2)[1 of 9]) -> [114: bb20, otherwise: bb11];
    }

    bb20: {
        switchInt((*_2)[2 of 9]) -> [103: bb21, otherwise: bb11];
    }

    bb21: {
        switchInt((*_2)[3 of 9]) -> [95: bb22, otherwise: bb11];
    }

    bb22: {
        switchInt((*_2)[4 of 9]) -> [105: bb23, otherwise: bb11];
    }

    bb23: {
        switchInt((*_2)[5 of 9]) -> [110: bb24, otherwise: bb11];
    }

    bb24: {
        switchInt((*_2)[6 of 9]) -> [112: bb25, otherwise: bb11];
    }

    bb25: {
        switchInt((*_2)[7 of 9]) -> [117: bb26, otherwise: bb11];
    }

    bb26: {
        switchInt((*_2)[8 of 9]) -> [116: bb92, otherwise: bb11];
    }

    bb27: {
        _12 = Len((*_2));
        _13 = const 13_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb41, otherwise: bb28];
    }

    bb28: {
        switchInt((*_2)[0 of 13]) -> [102: bb29, otherwise: bb11];
    }

    bb29: {
        switchInt((*_2)[1 of 13]) -> [108: bb30, otherwise: bb11];
    }

    bb30: {
        switchInt((*_2)[2 of 13]) -> [97: bb31, otherwise: bb11];
    }

    bb31: {
        switchInt((*_2)[3 of 13]) -> [103: bb32, otherwise: bb11];
    }

    bb32: {
        switchInt((*_2)[4 of 13]) -> [95: bb33, otherwise: bb11];
    }

    bb33: {
        switchInt((*_2)[5 of 13]) -> [102: bb34, otherwise: bb11];
    }

    bb34: {
        switchInt((*_2)[6 of 13]) -> [105: bb35, otherwise: bb11];
    }

    bb35: {
        switchInt((*_2)[7 of 13]) -> [108: bb36, otherwise: bb11];
    }

    bb36: {
        switchInt((*_2)[8 of 13]) -> [101: bb37, otherwise: bb11];
    }

    bb37: {
        switchInt((*_2)[9 of 13]) -> [110: bb38, otherwise: bb11];
    }

    bb38: {
        switchInt((*_2)[10 of 13]) -> [97: bb39, otherwise: bb11];
    }

    bb39: {
        switchInt((*_2)[11 of 13]) -> [109: bb40, otherwise: bb11];
    }

    bb40: {
        switchInt((*_2)[12 of 13]) -> [101: bb94, otherwise: bb11];
    }

    bb41: {
        _9 = Len((*_2));
        _10 = const 18_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb60, otherwise: bb42];
    }

    bb42: {
        switchInt((*_2)[0 of 18]) -> [102: bb43, otherwise: bb11];
    }

    bb43: {
        switchInt((*_2)[1 of 18]) -> [108: bb44, otherwise: bb11];
    }

    bb44: {
        switchInt((*_2)[2 of 18]) -> [97: bb45, otherwise: bb11];
    }

    bb45: {
        switchInt((*_2)[3 of 18]) -> [103: bb46, otherwise: bb11];
    }

    bb46: {
        switchInt((*_2)[4 of 18]) -> [95: bb47, otherwise: bb11];
    }

    bb47: {
        switchInt((*_2)[5 of 18]) -> [112: bb48, otherwise: bb11];
    }

    bb48: {
        switchInt((*_2)[6 of 18]) -> [114: bb49, otherwise: bb11];
    }

    bb49: {
        switchInt((*_2)[7 of 18]) -> [101: bb50, otherwise: bb11];
    }

    bb50: {
        switchInt((*_2)[8 of 18]) -> [102: bb51, otherwise: bb11];
    }

    bb51: {
        switchInt((*_2)[9 of 18]) -> [105: bb52, otherwise: bb11];
    }

    bb52: {
        switchInt((*_2)[10 of 18]) -> [120: bb53, otherwise: bb11];
    }

    bb53: {
        switchInt((*_2)[11 of 18]) -> [95: bb54, otherwise: bb11];
    }

    bb54: {
        switchInt((*_2)[12 of 18]) -> [108: bb55, otherwise: bb11];
    }

    bb55: {
        switchInt((*_2)[13 of 18]) -> [101: bb56, otherwise: bb11];
    }

    bb56: {
        switchInt((*_2)[14 of 18]) -> [110: bb57, otherwise: bb11];
    }

    bb57: {
        switchInt((*_2)[15 of 18]) -> [103: bb58, otherwise: bb11];
    }

    bb58: {
        switchInt((*_2)[16 of 18]) -> [116: bb59, otherwise: bb11];
    }

    bb59: {
        switchInt((*_2)[17 of 18]) -> [104: bb95, otherwise: bb11];
    }

    bb60: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb76, otherwise: bb61];
    }

    bb61: {
        switchInt((*_2)[0 of 15]) -> [102: bb62, otherwise: bb11];
    }

    bb62: {
        switchInt((*_2)[1 of 15]) -> [108: bb63, otherwise: bb11];
    }

    bb63: {
        switchInt((*_2)[2 of 15]) -> [97: bb64, otherwise: bb11];
    }

    bb64: {
        switchInt((*_2)[3 of 15]) -> [103: bb65, otherwise: bb11];
    }

    bb65: {
        switchInt((*_2)[4 of 15]) -> [95: bb66, otherwise: bb11];
    }

    bb66: {
        switchInt((*_2)[5 of 15]) -> [110: bb67, otherwise: bb11];
    }

    bb67: {
        switchInt((*_2)[6 of 15]) -> [111: bb68, otherwise: bb11];
    }

    bb68: {
        switchInt((*_2)[7 of 15]) -> [95: bb69, otherwise: bb11];
    }

    bb69: {
        switchInt((*_2)[8 of 15]) -> [104: bb70, otherwise: bb11];
    }

    bb70: {
        switchInt((*_2)[9 of 15]) -> [101: bb71, otherwise: bb11];
    }

    bb71: {
        switchInt((*_2)[10 of 15]) -> [97: bb72, otherwise: bb11];
    }

    bb72: {
        switchInt((*_2)[11 of 15]) -> [100: bb73, otherwise: bb11];
    }

    bb73: {
        switchInt((*_2)[12 of 15]) -> [101: bb74, otherwise: bb11];
    }

    bb74: {
        switchInt((*_2)[13 of 15]) -> [114: bb75, otherwise: bb11];
    }

    bb75: {
        switchInt((*_2)[14 of 15]) -> [115: bb96, otherwise: bb11];
    }

    bb76: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb11, otherwise: bb77];
    }

    bb77: {
        switchInt((*_2)[0 of 14]) -> [102: bb78, otherwise: bb11];
    }

    bb78: {
        switchInt((*_2)[1 of 14]) -> [108: bb79, otherwise: bb11];
    }

    bb79: {
        switchInt((*_2)[2 of 14]) -> [97: bb80, otherwise: bb11];
    }

    bb80: {
        switchInt((*_2)[3 of 14]) -> [103: bb81, otherwise: bb11];
    }

    bb81: {
        switchInt((*_2)[4 of 14]) -> [95: bb82, otherwise: bb11];
    }

    bb82: {
        switchInt((*_2)[5 of 14]) -> [100: bb83, otherwise: bb11];
    }

    bb83: {
        switchInt((*_2)[6 of 14]) -> [101: bb84, otherwise: bb11];
    }

    bb84: {
        switchInt((*_2)[7 of 14]) -> [108: bb85, otherwise: bb11];
    }

    bb85: {
        switchInt((*_2)[8 of 14]) -> [105: bb86, otherwise: bb11];
    }

    bb86: {
        switchInt((*_2)[9 of 14]) -> [109: bb87, otherwise: bb11];
    }

    bb87: {
        switchInt((*_2)[10 of 14]) -> [105: bb88, otherwise: bb11];
    }

    bb88: {
        switchInt((*_2)[11 of 14]) -> [116: bb89, otherwise: bb11];
    }

    bb89: {
        switchInt((*_2)[12 of 14]) -> [101: bb90, otherwise: bb11];
    }

    bb90: {
        switchInt((*_2)[13 of 14]) -> [114: bb97, otherwise: bb11];
    }

    bb91: {
        _21 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field0;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb98;
    }

    bb92: {
        _22 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field1;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb98;
    }

    bb93: {
        _23 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field2;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb98;
    }

    bb94: {
        _24 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field3;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb98;
    }

    bb95: {
        _25 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field4;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb98;
    }

    bb96: {
        _26 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field5;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb98;
    }

    bb97: {
        _27 = partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field::__field6;
        _0 = Result::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb98;
    }

    bb98: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize(_1: __D) -> Result<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor>(move _1, const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::expecting(_1: &partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq(_1: partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<partition::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<partition::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::partition::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: select::SelectColumns;
    let mut _4: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<select::SelectColumns>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: select::SelectColumns;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _24: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: isize;
    let mut _31: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _32: &dyn serde::de::Expected;
    let mut _34: std::result::Result<std::option::Option<util::FilenameTemplate>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _35: &mut __A;
    let mut _36: isize;
    let mut _39: isize;
    let mut _41: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _42: &dyn serde::de::Expected;
    let mut _43: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _44: &mut __A;
    let mut _45: isize;
    let mut _48: isize;
    let mut _50: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _51: &dyn serde::de::Expected;
    let mut _52: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _53: &mut __A;
    let mut _54: isize;
    let mut _57: isize;
    let mut _59: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _60: &dyn serde::de::Expected;
    let mut _61: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _69: &dyn serde::de::Expected;
    let mut _70: cmd::partition::Args;
    let mut _71: select::SelectColumns;
    let mut _72: std::option::Option<std::string::String>;
    let mut _73: std::string::String;
    let mut _74: util::FilenameTemplate;
    let mut _75: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::option::Option<std::string::String>;
        let _17: std::option::Option<std::option::Option<std::string::String>>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::option::Option<std::string::String>;
        let mut _76: &&str;
        scope 5 {
            debug __field1 => _13;
            let _23: std::string::String;
            let _27: std::option::Option<std::string::String>;
            let _28: <__A as serde::de::SeqAccess<'_>>::Error;
            let _30: std::string::String;
            let mut _77: &&str;
            scope 9 {
                debug __field2 => _23;
                let _33: util::FilenameTemplate;
                let _37: std::option::Option<util::FilenameTemplate>;
                let _38: <__A as serde::de::SeqAccess<'_>>::Error;
                let _40: util::FilenameTemplate;
                let mut _78: &&str;
                scope 13 {
                    debug __field3 => _33;
                    let _46: std::option::Option<std::option::Option<usize>>;
                    let _47: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _49: std::option::Option<usize>;
                    let mut _79: &&str;
                    scope 17 {
                        debug __field4 => _49;
                        let _55: std::option::Option<bool>;
                        let _56: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _58: bool;
                        let mut _80: &&str;
                        scope 21 {
                            debug __field5 => _58;
                            let _64: std::option::Option<std::option::Option<config::Delimiter>>;
                            let _65: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _67: std::option::Option<config::Delimiter>;
                            let mut _81: &&str;
                            scope 25 {
                                debug __field6 => _67;
                            }
                            scope 26 {
                                debug __val => _64;
                            }
                            scope 27 {
                                debug __err => _65;
                            }
                            scope 28 {
                                debug __value => _67;
                            }
                        }
                        scope 22 {
                            debug __val => _55;
                        }
                        scope 23 {
                            debug __err => _56;
                        }
                        scope 24 {
                            debug __value => _58;
                        }
                    }
                    scope 18 {
                        debug __val => _46;
                    }
                    scope 19 {
                        debug __err => _47;
                    }
                    scope 20 {
                        debug __value => _49;
                    }
                }
                scope 14 {
                    debug __val => _37;
                }
                scope 15 {
                    debug __err => _38;
                }
                scope 16 {
                    debug __value => _40;
                }
            }
            scope 10 {
                debug __val => _27;
            }
            scope 11 {
                debug __err => _28;
            }
            scope 12 {
                debug __value => _30;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_5) -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb48;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<select::SelectColumns>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _75 = const _;
        _12 = _75 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb54];
    }

    bb6: {
        _10 = move ((_7 as Some).0: select::SelectColumns);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_15) -> [return: bb8, unwind: bb53];
    }

    bb7: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb48;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb47;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _76 = const _;
        _22 = _76 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb53];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::option::Option<std::string::String>);
        _13 = move _20;
        _25 = &mut _2;
        _24 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_25) -> [return: bb14, unwind: bb52];
    }

    bb13: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb47;
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb46;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::string::String>);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _77 = const _;
        _32 = _77 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _31 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _32) -> [return: bb19, unwind: bb52];
    }

    bb18: {
        _30 = move ((_27 as Some).0: std::string::String);
        _23 = move _30;
        _35 = &mut _2;
        _34 = <__A as SeqAccess<'_>>::next_element::<FilenameTemplate>(_35) -> [return: bb20, unwind: bb51];
    }

    bb19: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _31);
        goto -> bb46;
    }

    bb20: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _38 = move ((_34 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb45;
    }

    bb22: {
        _37 = move ((_34 as Ok).0: std::option::Option<util::FilenameTemplate>);
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _78 = const _;
        _42 = _78 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _41 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _42) -> [return: bb25, unwind: bb51];
    }

    bb24: {
        _40 = move ((_37 as Some).0: util::FilenameTemplate);
        _33 = move _40;
        _44 = &mut _2;
        _43 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_44) -> [return: bb26, unwind: bb50];
    }

    bb25: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _41);
        goto -> bb45;
    }

    bb26: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _47 = move ((_43 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _47);
        goto -> bb44;
    }

    bb28: {
        _46 = ((_43 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _79 = const _;
        _51 = _79 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _50 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _51) -> [return: bb31, unwind: bb50];
    }

    bb30: {
        _49 = ((_46 as Some).0: std::option::Option<usize>);
        _53 = &mut _2;
        _52 = <__A as SeqAccess<'_>>::next_element::<bool>(_53) -> [return: bb32, unwind: bb50];
    }

    bb31: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _50);
        goto -> bb44;
    }

    bb32: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _56 = move ((_52 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _56);
        goto -> bb44;
    }

    bb34: {
        _55 = ((_52 as Ok).0: std::option::Option<bool>);
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _80 = const _;
        _60 = _80 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _59 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _60) -> [return: bb37, unwind: bb50];
    }

    bb36: {
        _58 = ((_55 as Some).0: bool);
        _62 = &mut _2;
        _61 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_62) -> [return: bb38, unwind: bb50];
    }

    bb37: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _59);
        goto -> bb44;
    }

    bb38: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _65 = move ((_61 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _65);
        goto -> bb44;
    }

    bb40: {
        _64 = ((_61 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _81 = const _;
        _69 = _81 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _68 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _69) -> [return: bb43, unwind: bb50];
    }

    bb42: {
        _67 = ((_64 as Some).0: std::option::Option<config::Delimiter>);
        _71 = move _3;
        _72 = move _13;
        _73 = move _23;
        _74 = move _33;
        _70 = partition::Args { arg_column: move _71, arg_input: move _72, arg_outdir: move _73, flag_filename: move _74, flag_prefix_length: _49, flag_no_headers: _58, flag_delimiter: _67 };
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _70);
        drop(_2) -> [return: bb49, unwind continue];
    }

    bb43: {
        _0 = Result::<partition::Args, <__A as SeqAccess<'_>>::Error>::Err(move _68);
        goto -> bb44;
    }

    bb44: {
        drop(_33) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        drop(_23) -> [return: bb46, unwind: bb52];
    }

    bb46: {
        drop(_13) -> [return: bb47, unwind: bb53];
    }

    bb47: {
        drop(_3) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        drop(_2) -> [return: bb49, unwind continue];
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_33) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_23) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_13) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_3) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_2) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }
}

promoted[0] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

fn partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::<impl at src/cmd/partition.rs:44:17: 44:28>::visit_map(_1: partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<partition::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<partition::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::partition::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<select::SelectColumns>;
    let mut _10: std::result::Result<std::option::Option<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: bool;
    let _19: &std::option::Option<select::SelectColumns>;
    let mut _20: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _21: std::option::Option<select::SelectColumns>;
    let mut _22: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: bool;
    let _28: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _29: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<std::option::Option<std::string::String>>;
    let mut _31: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<std::string::String>;
    let mut _38: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<std::string::String>;
    let mut _40: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<util::FilenameTemplate>;
    let mut _47: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<util::FilenameTemplate>;
    let mut _49: std::result::Result<util::FilenameTemplate, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<std::option::Option<usize>>;
    let mut _56: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<std::option::Option<usize>>;
    let mut _58: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<bool>;
    let mut _65: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<bool>;
    let mut _67: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _74: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _76: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _82: &mut __A;
    let mut _83: isize;
    let mut _86: isize;
    let mut _88: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _89: isize;
    let mut _93: isize;
    let mut _95: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _96: isize;
    let mut _100: isize;
    let mut _102: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _103: isize;
    let mut _107: isize;
    let mut _109: std::result::Result<util::FilenameTemplate, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _110: isize;
    let mut _114: isize;
    let mut _116: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _117: isize;
    let mut _121: isize;
    let mut _123: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _124: isize;
    let mut _128: isize;
    let mut _130: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _131: isize;
    let mut _134: cmd::partition::Args;
    let mut _135: select::SelectColumns;
    let mut _136: std::option::Option<std::string::String>;
    let mut _137: std::string::String;
    let mut _138: util::FilenameTemplate;
    let mut _139: std::option::Option<usize>;
    let mut _140: bool;
    let mut _141: std::option::Option<config::Delimiter>;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<std::string::String>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::string::String>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<util::FilenameTemplate>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<usize>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<config::Delimiter>>;
                            scope 7 {
                                debug __field6 => _9;
                                let _85: select::SelectColumns;
                                let _87: select::SelectColumns;
                                let _90: select::SelectColumns;
                                let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __key => _16;
                                    let _13: std::option::Option<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field>;
                                    let _14: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _16: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field;
                                    let _25: select::SelectColumns;
                                    let _26: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _34: std::option::Option<std::string::String>;
                                    let _35: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _43: std::string::String;
                                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _52: util::FilenameTemplate;
                                    let _53: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _61: std::option::Option<usize>;
                                    let _62: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _70: bool;
                                    let _71: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _79: std::option::Option<config::Delimiter>;
                                    let _80: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _84: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __val => _13;
                                    }
                                    scope 10 {
                                        debug __err => _14;
                                    }
                                    scope 11 {
                                        debug __val => _25;
                                    }
                                    scope 12 {
                                        debug __err => _26;
                                    }
                                    scope 13 {
                                        debug __val => _34;
                                    }
                                    scope 14 {
                                        debug __err => _35;
                                    }
                                    scope 15 {
                                        debug __val => _43;
                                    }
                                    scope 16 {
                                        debug __err => _44;
                                    }
                                    scope 17 {
                                        debug __val => _52;
                                    }
                                    scope 18 {
                                        debug __err => _53;
                                    }
                                    scope 19 {
                                        debug __val => _61;
                                    }
                                    scope 20 {
                                        debug __err => _62;
                                    }
                                    scope 21 {
                                        debug __val => _70;
                                    }
                                    scope 22 {
                                        debug __err => _71;
                                    }
                                    scope 23 {
                                        debug __val => _79;
                                    }
                                    scope 24 {
                                        debug __err => _80;
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny;
                                    }
                                    scope 27 {
                                        debug __err => _84;
                                    }
                                }
                                scope 28 {
                                    debug __field0 => _85;
                                    let _92: std::option::Option<std::string::String>;
                                    let _94: std::option::Option<std::string::String>;
                                    let _97: std::option::Option<std::string::String>;
                                    let _98: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 32 {
                                        debug __field1 => _92;
                                        let _99: std::string::String;
                                        let _101: std::string::String;
                                        let _104: std::string::String;
                                        let _105: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 36 {
                                            debug __field2 => _99;
                                            let _106: util::FilenameTemplate;
                                            let _108: util::FilenameTemplate;
                                            let _111: util::FilenameTemplate;
                                            let _112: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 40 {
                                                debug __field3 => _106;
                                                let _113: std::option::Option<usize>;
                                                let _115: std::option::Option<usize>;
                                                let _118: std::option::Option<usize>;
                                                let _119: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 44 {
                                                    debug __field4 => _113;
                                                    let _120: bool;
                                                    let _122: bool;
                                                    let _125: bool;
                                                    let _126: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 48 {
                                                        debug __field5 => _120;
                                                        let _127: std::option::Option<config::Delimiter>;
                                                        let _129: std::option::Option<config::Delimiter>;
                                                        let _132: std::option::Option<config::Delimiter>;
                                                        let _133: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 52 {
                                                            debug __field6 => _127;
                                                        }
                                                        scope 53 {
                                                            debug __field6 => _129;
                                                        }
                                                        scope 54 {
                                                            debug __val => _132;
                                                        }
                                                        scope 55 {
                                                            debug __err => _133;
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug __field5 => _122;
                                                    }
                                                    scope 50 {
                                                        debug __val => _125;
                                                    }
                                                    scope 51 {
                                                        debug __err => _126;
                                                    }
                                                }
                                                scope 45 {
                                                    debug __field4 => _115;
                                                }
                                                scope 46 {
                                                    debug __val => _118;
                                                }
                                                scope 47 {
                                                    debug __err => _119;
                                                }
                                            }
                                            scope 41 {
                                                debug __field3 => _108;
                                            }
                                            scope 42 {
                                                debug __val => _111;
                                            }
                                            scope 43 {
                                                debug __err => _112;
                                            }
                                        }
                                        scope 37 {
                                            debug __field2 => _101;
                                        }
                                        scope 38 {
                                            debug __val => _104;
                                        }
                                        scope 39 {
                                            debug __err => _105;
                                        }
                                    }
                                    scope 33 {
                                        debug __field1 => _94;
                                    }
                                    scope 34 {
                                        debug __val => _97;
                                    }
                                    scope 35 {
                                        debug __err => _98;
                                    }
                                }
                                scope 29 {
                                    debug __field0 => _87;
                                }
                                scope 30 {
                                    debug __val => _90;
                                }
                                scope 31 {
                                    debug __err => _91;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _145 = const false;
        _144 = const false;
        _143 = const false;
        _142 = const false;
        _145 = const true;
        _3 = std::option::Option::<SelectColumns>::None;
        _144 = const true;
        _4 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _143 = const true;
        _5 = std::option::Option::<std::string::String>::None;
        _142 = const true;
        _6 = std::option::Option::<FilenameTemplate>::None;
        _7 = std::option::Option::<std::option::Option<usize>>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _11 = &mut _2;
        _10 = <__A as MapAccess<'_>>::next_key::<partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for partition::Args>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb146];
    }

    bb2: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb121;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field>);
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _86 = discriminant(_3);
        switchInt(move _86) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_13 as Some).0: cmd::partition::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::partition::Args>::deserialize::__Field);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb9, 1: bb19, 2: bb29, 3: bb39, 4: bb49, 5: bb57, 6: bb65, otherwise: bb8];
    }

    bb8: {
        _82 = &mut _2;
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb73, unwind: bb146];
    }

    bb9: {
        _19 = &_3;
        _18 = std::option::Option::<SelectColumns>::is_some(_19) -> [return: bb10, unwind: bb146];
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_column") -> [return: bb12, unwind: bb146];
    }

    bb12: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb121;
    }

    bb13: {
        _23 = &mut _2;
        _22 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_23) -> [return: bb14, unwind: bb146];
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb121;
    }

    bb16: {
        _25 = move ((_22 as Ok).0: select::SelectColumns);
        _21 = std::option::Option::<SelectColumns>::Some(move _25);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _145 = const true;
        _3 = move _21;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _145 = const true;
        _3 = move _21;
        goto -> bb146;
    }

    bb19: {
        _28 = &_4;
        _27 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_28) -> [return: bb20, unwind: bb146];
    }

    bb20: {
        switchInt(move _27) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _29 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb22, unwind: bb146];
    }

    bb22: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb121;
    }

    bb23: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_32) -> [return: bb24, unwind: bb146];
    }

    bb24: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _35 = move ((_31 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb121;
    }

    bb26: {
        _34 = move ((_31 as Ok).0: std::option::Option<std::string::String>);
        _30 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _34);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _144 = const true;
        _4 = move _30;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _144 = const true;
        _4 = move _30;
        goto -> bb146;
    }

    bb29: {
        _37 = &_5;
        _36 = std::option::Option::<std::string::String>::is_some(_37) -> [return: bb30, unwind: bb146];
    }

    bb30: {
        switchInt(move _36) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _38 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_outdir") -> [return: bb32, unwind: bb146];
    }

    bb32: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb121;
    }

    bb33: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_41) -> [return: bb34, unwind: bb146];
    }

    bb34: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _44 = move ((_40 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb121;
    }

    bb36: {
        _43 = move ((_40 as Ok).0: std::string::String);
        _39 = std::option::Option::<std::string::String>::Some(move _43);
        drop(_5) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _143 = const true;
        _5 = move _39;
        goto -> bb1;
    }

    bb38 (cleanup): {
        _143 = const true;
        _5 = move _39;
        goto -> bb146;
    }

    bb39: {
        _46 = &_6;
        _45 = std::option::Option::<FilenameTemplate>::is_some(_46) -> [return: bb40, unwind: bb146];
    }

    bb40: {
        switchInt(move _45) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _47 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_filename") -> [return: bb42, unwind: bb146];
    }

    bb42: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb121;
    }

    bb43: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<FilenameTemplate>(_50) -> [return: bb44, unwind: bb146];
    }

    bb44: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb46, 1: bb45, otherwise: bb4];
    }

    bb45: {
        _53 = move ((_49 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb121;
    }

    bb46: {
        _52 = move ((_49 as Ok).0: util::FilenameTemplate);
        _48 = std::option::Option::<FilenameTemplate>::Some(move _52);
        drop(_6) -> [return: bb47, unwind: bb48];
    }

    bb47: {
        _142 = const true;
        _6 = move _48;
        goto -> bb1;
    }

    bb48 (cleanup): {
        _142 = const true;
        _6 = move _48;
        goto -> bb146;
    }

    bb49: {
        _55 = &_7;
        _54 = std::option::Option::<std::option::Option<usize>>::is_some(_55) -> [return: bb50, unwind: bb146];
    }

    bb50: {
        switchInt(move _54) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        _56 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_prefix_length") -> [return: bb52, unwind: bb146];
    }

    bb52: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb121;
    }

    bb53: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_59) -> [return: bb54, unwind: bb146];
    }

    bb54: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _62 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb121;
    }

    bb56: {
        _61 = ((_58 as Ok).0: std::option::Option<usize>);
        _57 = std::option::Option::<std::option::Option<usize>>::Some(_61);
        _7 = move _57;
        goto -> bb1;
    }

    bb57: {
        _64 = &_8;
        _63 = std::option::Option::<bool>::is_some(_64) -> [return: bb58, unwind: bb146];
    }

    bb58: {
        switchInt(move _63) -> [0: bb61, otherwise: bb59];
    }

    bb59: {
        _65 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb60, unwind: bb146];
    }

    bb60: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb121;
    }

    bb61: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<bool>(_68) -> [return: bb62, unwind: bb146];
    }

    bb62: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb64, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _71 = move ((_67 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb121;
    }

    bb64: {
        _70 = ((_67 as Ok).0: bool);
        _66 = std::option::Option::<bool>::Some(_70);
        _8 = move _66;
        goto -> bb1;
    }

    bb65: {
        _73 = &_9;
        _72 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_73) -> [return: bb66, unwind: bb146];
    }

    bb66: {
        switchInt(move _72) -> [0: bb69, otherwise: bb67];
    }

    bb67: {
        _74 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb68, unwind: bb146];
    }

    bb68: {
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb121;
    }

    bb69: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_77) -> [return: bb70, unwind: bb146];
    }

    bb70: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb72, 1: bb71, otherwise: bb4];
    }

    bb71: {
        _80 = move ((_76 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb121;
    }

    bb72: {
        _79 = ((_76 as Ok).0: std::option::Option<config::Delimiter>);
        _75 = std::option::Option::<std::option::Option<Delimiter>>::Some(_79);
        _9 = move _75;
        goto -> bb1;
    }

    bb73: {
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb1, 1: bb74, otherwise: bb4];
    }

    bb74: {
        _84 = move ((_81 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb121;
    }

    bb75: {
        _88 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "arg_column") -> [return: bb77, unwind: bb146];
    }

    bb76: {
        _145 = const false;
        _87 = move ((_3 as Some).0: select::SelectColumns);
        _85 = move _87;
        goto -> bb80;
    }

    bb77: {
        _89 = discriminant(_88);
        switchInt(move _89) -> [0: bb79, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _91 = move ((_88 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb121;
    }

    bb79: {
        _90 = move ((_88 as Ok).0: select::SelectColumns);
        _85 = move _90;
        goto -> bb80;
    }

    bb80: {
        _93 = discriminant(_4);
        switchInt(move _93) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        _95 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb83, unwind: bb126];
    }

    bb82: {
        _144 = const false;
        _94 = move ((_4 as Some).0: std::option::Option<std::string::String>);
        _92 = move _94;
        goto -> bb86;
    }

    bb83: {
        _96 = discriminant(_95);
        switchInt(move _96) -> [0: bb85, 1: bb84, otherwise: bb4];
    }

    bb84: {
        _98 = move ((_95 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb120;
    }

    bb85: {
        _97 = move ((_95 as Ok).0: std::option::Option<std::string::String>);
        _92 = move _97;
        goto -> bb86;
    }

    bb86: {
        _100 = discriminant(_5);
        switchInt(move _100) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        _102 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_outdir") -> [return: bb89, unwind: bb125];
    }

    bb88: {
        _143 = const false;
        _101 = move ((_5 as Some).0: std::string::String);
        _99 = move _101;
        goto -> bb92;
    }

    bb89: {
        _103 = discriminant(_102);
        switchInt(move _103) -> [0: bb91, 1: bb90, otherwise: bb4];
    }

    bb90: {
        _105 = move ((_102 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _105);
        goto -> bb119;
    }

    bb91: {
        _104 = move ((_102 as Ok).0: std::string::String);
        _99 = move _104;
        goto -> bb92;
    }

    bb92: {
        _107 = discriminant(_6);
        switchInt(move _107) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        _109 = serde::private::de::missing_field::<'_, FilenameTemplate, <__A as MapAccess<'_>>::Error>(const "flag_filename") -> [return: bb95, unwind: bb124];
    }

    bb94: {
        _142 = const false;
        _108 = move ((_6 as Some).0: util::FilenameTemplate);
        _106 = move _108;
        goto -> bb98;
    }

    bb95: {
        _110 = discriminant(_109);
        switchInt(move _110) -> [0: bb97, 1: bb96, otherwise: bb4];
    }

    bb96: {
        _112 = move ((_109 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _112);
        goto -> bb118;
    }

    bb97: {
        _111 = move ((_109 as Ok).0: util::FilenameTemplate);
        _106 = move _111;
        goto -> bb98;
    }

    bb98: {
        _114 = discriminant(_7);
        switchInt(move _114) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        _116 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_prefix_length") -> [return: bb101, unwind: bb123];
    }

    bb100: {
        _115 = ((_7 as Some).0: std::option::Option<usize>);
        _113 = _115;
        goto -> bb104;
    }

    bb101: {
        _117 = discriminant(_116);
        switchInt(move _117) -> [0: bb103, 1: bb102, otherwise: bb4];
    }

    bb102: {
        _119 = move ((_116 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _119);
        goto -> bb117;
    }

    bb103: {
        _118 = ((_116 as Ok).0: std::option::Option<usize>);
        _113 = _118;
        goto -> bb104;
    }

    bb104: {
        _121 = discriminant(_8);
        switchInt(move _121) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        _123 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb107, unwind: bb123];
    }

    bb106: {
        _122 = ((_8 as Some).0: bool);
        _120 = _122;
        goto -> bb110;
    }

    bb107: {
        _124 = discriminant(_123);
        switchInt(move _124) -> [0: bb109, 1: bb108, otherwise: bb4];
    }

    bb108: {
        _126 = move ((_123 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _126);
        goto -> bb117;
    }

    bb109: {
        _125 = ((_123 as Ok).0: bool);
        _120 = _125;
        goto -> bb110;
    }

    bb110: {
        _128 = discriminant(_9);
        switchInt(move _128) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        _130 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb113, unwind: bb123];
    }

    bb112: {
        _129 = ((_9 as Some).0: std::option::Option<config::Delimiter>);
        _127 = _129;
        goto -> bb116;
    }

    bb113: {
        _131 = discriminant(_130);
        switchInt(move _131) -> [0: bb115, 1: bb114, otherwise: bb4];
    }

    bb114: {
        _133 = move ((_130 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Err(move _133);
        goto -> bb117;
    }

    bb115: {
        _132 = ((_130 as Ok).0: std::option::Option<config::Delimiter>);
        _127 = _132;
        goto -> bb116;
    }

    bb116: {
        _135 = move _85;
        _136 = move _92;
        _137 = move _99;
        _138 = move _106;
        _139 = _113;
        _140 = _120;
        _141 = _127;
        _134 = partition::Args { arg_column: move _135, arg_input: move _136, arg_outdir: move _137, flag_filename: move _138, flag_prefix_length: move _139, flag_no_headers: move _140, flag_delimiter: move _141 };
        _0 = Result::<partition::Args, <__A as MapAccess<'_>>::Error>::Ok(move _134);
        _142 = const false;
        _143 = const false;
        _144 = const false;
        _145 = const false;
        drop(_2) -> [return: bb122, unwind continue];
    }

    bb117: {
        drop(_106) -> [return: bb118, unwind: bb124];
    }

    bb118: {
        drop(_99) -> [return: bb119, unwind: bb125];
    }

    bb119: {
        drop(_92) -> [return: bb120, unwind: bb126];
    }

    bb120: {
        drop(_85) -> [return: bb121, unwind: bb146];
    }

    bb121: {
        _146 = discriminant(_6);
        switchInt(move _146) -> [1: bb133, otherwise: bb132];
    }

    bb122: {
        return;
    }

    bb123 (cleanup): {
        drop(_106) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_99) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_92) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_85) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        _151 = discriminant(_5);
        switchInt(move _151) -> [1: bb147, otherwise: bb128];
    }

    bb128 (cleanup): {
        _152 = discriminant(_4);
        switchInt(move _152) -> [1: bb149, otherwise: bb129];
    }

    bb129 (cleanup): {
        _153 = discriminant(_3);
        switchInt(move _153) -> [1: bb151, otherwise: bb130];
    }

    bb130 (cleanup): {
        drop(_2) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        resume;
    }

    bb132: {
        _142 = const false;
        _147 = discriminant(_5);
        switchInt(move _147) -> [1: bb136, otherwise: bb135];
    }

    bb133: {
        switchInt(_142) -> [0: bb132, otherwise: bb134];
    }

    bb134: {
        drop(((_6 as Some).0: util::FilenameTemplate)) -> [return: bb132, unwind: bb127];
    }

    bb135: {
        _143 = const false;
        _148 = discriminant(_4);
        switchInt(move _148) -> [1: bb139, otherwise: bb138];
    }

    bb136: {
        switchInt(_143) -> [0: bb135, otherwise: bb137];
    }

    bb137: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb135, unwind: bb128];
    }

    bb138: {
        _144 = const false;
        _149 = discriminant(_3);
        switchInt(move _149) -> [1: bb142, otherwise: bb141];
    }

    bb139: {
        switchInt(_144) -> [0: bb138, otherwise: bb140];
    }

    bb140: {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb138, unwind: bb129];
    }

    bb141: {
        _145 = const false;
        drop(_2) -> [return: bb122, unwind continue];
    }

    bb142: {
        switchInt(_145) -> [0: bb141, otherwise: bb143];
    }

    bb143: {
        drop(((_3 as Some).0: select::SelectColumns)) -> [return: bb141, unwind: bb130];
    }

    bb144 (cleanup): {
        switchInt(_142) -> [0: bb127, otherwise: bb145];
    }

    bb145 (cleanup): {
        drop(((_6 as Some).0: util::FilenameTemplate)) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        _150 = discriminant(_6);
        switchInt(move _150) -> [1: bb144, otherwise: bb127];
    }

    bb147 (cleanup): {
        switchInt(_143) -> [0: bb128, otherwise: bb148];
    }

    bb148 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        switchInt(_144) -> [0: bb129, otherwise: bb150];
    }

    bb150 (cleanup): {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        switchInt(_145) -> [0: bb130, otherwise: bb152];
    }

    bb152 (cleanup): {
        drop(((_3 as Some).0: select::SelectColumns)) -> [return: bb130, unwind terminate(cleanup)];
    }
}

const partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 7];
    let _2: &[&str; 7];
    let _3: [&str; 7];
    let mut _4: &[&str; 7];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in partition::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/partition.rs:44:17: 44:28>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "arg_column", const "arg_input", const "arg_outdir", const "flag_filename", const "flag_prefix_length", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn partition::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::partition::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::partition::Args>;
    let mut _4: std::result::Result<cmd::partition::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::partition::Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _10: std::result::Result<(), std::io::Error>;
    let mut _11: &std::string::String;
    let mut _12: isize;
    let mut _14: &cmd::partition::Args;
    let mut _15: &str;
    scope 1 {
        debug args => _2;
        let _13: std::result::Result<std::convert::Infallible, std::io::Error>;
        scope 6 {
            debug residual => _13;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc21: &&str};
        _15 = deref_copy (*_5);
        _4 = get_args::<partition::Args>(_15, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<partition::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::partition::Args);
        _2 = move _8;
        _11 = &(_2.2: std::string::String);
        _10 = create_dir_all::<&std::string::String>(move _11) -> [return: bb6, unwind: bb13];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb12, unwind continue];
    }

    bb6: {
        _9 = <Result<(), std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _14 = &_2;
        _0 = partition::Args::sequential_partition(move _14) -> [return: bb11, unwind: bb13];
    }

    bb9: {
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _13) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

alloc21 (static: partition::USAGE, size: 16, align: 8) {
    ╾───alloc1040<imm>────╼ e5 04 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1040 (size: 1253, align: 1) {
    0x000 │ 0a 50 61 72 74 69 74 69 6f 6e 73 20 74 68 65 20 │ .Partitions the 
    0x010 │ 67 69 76 65 6e 20 43 53 56 20 64 61 74 61 20 69 │ given CSV data i
    0x020 │ 6e 74 6f 20 63 68 75 6e 6b 73 20 62 61 73 65 64 │ nto chunks based
    0x030 │ 20 6f 6e 20 74 68 65 20 76 61 6c 75 65 20 6f 66 │  on the value of
    0x040 │ 20 61 20 63 6f 6c 75 6d 6e 0a 0a 54 68 65 20 66 │  a column..The f
    0x050 │ 69 6c 65 73 20 61 72 65 20 77 72 69 74 74 65 6e │ iles are written
    0x060 │ 20 74 6f 20 74 68 65 20 6f 75 74 70 75 74 20 64 │  to the output d
    0x070 │ 69 72 65 63 74 6f 72 79 20 77 69 74 68 20 66 69 │ irectory with fi
    0x080 │ 6c 65 6e 61 6d 65 73 20 62 61 73 65 64 20 6f 6e │ lenames based on
    0x090 │ 20 74 68 65 0a 76 61 6c 75 65 73 20 69 6e 20 74 │  the.values in t
    0x0a0 │ 68 65 20 70 61 72 74 69 74 69 6f 6e 20 63 6f 6c │ he partition col
    0x0b0 │ 75 6d 6e 20 61 6e 64 20 74 68 65 20 60 2d 2d 66 │ umn and the `--f
    0x0c0 │ 69 6c 65 6e 61 6d 65 60 20 66 6c 61 67 2e 0a 0a │ ilename` flag...
    0x0d0 │ 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 70 │ Usage:.    xsv p
    0x0e0 │ 61 72 74 69 74 69 6f 6e 20 5b 6f 70 74 69 6f 6e │ artition [option
    0x0f0 │ 73 5d 20 3c 63 6f 6c 75 6d 6e 3e 20 3c 6f 75 74 │ s] <column> <out
    0x100 │ 64 69 72 3e 20 5b 3c 69 6e 70 75 74 3e 5d 0a 20 │ dir> [<input>]. 
    0x110 │ 20 20 20 78 73 76 20 70 61 72 74 69 74 69 6f 6e │    xsv partition
    0x120 │ 20 2d 2d 68 65 6c 70 0a 0a 70 61 72 74 69 74 69 │  --help..partiti
    0x130 │ 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 │ on options:.    
    0x140 │ 2d 2d 66 69 6c 65 6e 61 6d 65 20 3c 66 69 6c 65 │ --filename <file
    0x150 │ 6e 61 6d 65 3e 20 20 41 20 66 69 6c 65 6e 61 6d │ name>  A filenam
    0x160 │ 65 20 74 65 6d 70 6c 61 74 65 20 74 6f 20 75 73 │ e template to us
    0x170 │ 65 20 77 68 65 6e 20 63 6f 6e 73 74 72 75 63 74 │ e when construct
    0x180 │ 69 6e 67 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ ing.            
    0x190 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 74 │                t
    0x1a0 │ 68 65 20 6e 61 6d 65 73 20 6f 66 20 74 68 65 20 │ he names of the 
    0x1b0 │ 6f 75 74 70 75 74 20 66 69 6c 65 73 2e 20 20 54 │ output files.  T
    0x1c0 │ 68 65 20 73 74 72 69 6e 67 20 27 7b 7d 27 0a 20 │ he string '{}'. 
    0x1d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1e0 │ 20 20 20 20 20 20 20 20 20 20 77 69 6c 6c 20 62 │           will b
    0x1f0 │ 65 20 72 65 70 6c 61 63 65 64 20 62 79 20 61 20 │ e replaced by a 
    0x200 │ 76 61 6c 75 65 20 62 61 73 65 64 20 6f 6e 20 74 │ value based on t
    0x210 │ 68 65 20 76 61 6c 75 65 0a 20 20 20 20 20 20 20 │ he value.       
    0x220 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x230 │ 20 20 20 20 6f 66 20 74 68 65 20 66 69 65 6c 64 │     of the field
    0x240 │ 2c 20 62 75 74 20 73 61 6e 69 74 69 7a 65 64 20 │ , but sanitized 
    0x250 │ 66 6f 72 20 73 68 65 6c 6c 20 73 61 66 65 74 79 │ for shell safety
    0x260 │ 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ..              
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 5b 64 65 │              [de
    0x280 │ 66 61 75 6c 74 3a 20 7b 7d 2e 63 73 76 5d 0a 20 │ fault: {}.csv]. 
    0x290 │ 20 20 20 2d 70 2c 20 2d 2d 70 72 65 66 69 78 2d │    -p, --prefix-
    0x2a0 │ 6c 65 6e 67 74 68 20 3c 6e 3e 20 20 54 72 75 6e │ length <n>  Trun
    0x2b0 │ 63 61 74 65 20 74 68 65 20 70 61 72 74 69 74 69 │ cate the partiti
    0x2c0 │ 6f 6e 20 63 6f 6c 75 6d 6e 20 61 66 74 65 72 20 │ on column after 
    0x2d0 │ 74 68 65 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ the.            
    0x2e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 73 │                s
    0x2f0 │ 70 65 63 69 66 69 65 64 20 6e 75 6d 62 65 72 20 │ pecified number 
    0x300 │ 6f 66 20 62 79 74 65 73 20 77 68 65 6e 20 63 72 │ of bytes when cr
    0x310 │ 65 61 74 69 6e 67 20 74 68 65 0a 20 20 20 20 20 │ eating the.     
    0x320 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x330 │ 20 20 20 20 20 20 6f 75 74 70 75 74 20 66 69 6c │       output fil
    0x340 │ 65 2e 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f │ e...Common optio
    0x350 │ 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 │ ns:.    -h, --he
    0x360 │ 6c 70 20 20 20 20 20 20 20 20 20 20 20 20 20 44 │ lp             D
    0x370 │ 69 73 70 6c 61 79 20 74 68 69 73 20 6d 65 73 73 │ isplay this mess
    0x380 │ 61 67 65 0a 20 20 20 20 2d 6e 2c 20 2d 2d 6e 6f │ age.    -n, --no
    0x390 │ 2d 68 65 61 64 65 72 73 20 20 20 20 20 20 20 57 │ -headers       W
    0x3a0 │ 68 65 6e 20 73 65 74 2c 20 74 68 65 20 66 69 72 │ hen set, the fir
    0x3b0 │ 73 74 20 72 6f 77 20 77 69 6c 6c 20 4e 4f 54 20 │ st row will NOT 
    0x3c0 │ 62 65 20 69 6e 74 65 72 70 72 65 74 65 64 0a 20 │ be interpreted. 
    0x3d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3e0 │ 20 20 20 20 20 20 20 20 20 20 61 73 20 63 6f 6c │           as col
    0x3f0 │ 75 6d 6e 20 6e 61 6d 65 73 2e 20 4f 74 68 65 72 │ umn names. Other
    0x400 │ 77 69 73 65 2c 20 74 68 65 20 66 69 72 73 74 20 │ wise, the first 
    0x410 │ 72 6f 77 20 77 69 6c 6c 0a 20 20 20 20 20 20 20 │ row will.       
    0x420 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x430 │ 20 20 20 20 61 70 70 65 61 72 20 69 6e 20 61 6c │     appear in al
    0x440 │ 6c 20 63 68 75 6e 6b 73 20 61 73 20 74 68 65 20 │ l chunks as the 
    0x450 │ 68 65 61 64 65 72 20 72 6f 77 2e 0a 20 20 20 20 │ header row..    
    0x460 │ 2d 64 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 │ -d, --delimiter 
    0x470 │ 3c 61 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 │ <arg>  The field
    0x480 │ 20 64 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 │  delimiter for r
    0x490 │ 65 61 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e │ eading CSV data.
    0x4a0 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x4b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 │             Must
    0x4c0 │ 20 62 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 │  be a single cha
    0x4d0 │ 72 61 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 │ racter. (default
    0x4e0 │ 3a 20 2c 29 0a                                  │ : ,).
}

fn partition::<impl at src/cmd/partition.rs:66:1: 66:10>::rconfig(_1: &partition::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: std::option::Option<config::Delimiter>;
    let mut _7: bool;
    let mut _8: select::SelectColumns;
    let mut _9: &select::SelectColumns;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _5 = &((*_1).1: std::option::Option<std::string::String>);
        _4 = Config::new(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ((*_1).6: std::option::Option<config::Delimiter>);
        _3 = Config::delimiter(move _4, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = ((*_1).5: bool);
        _2 = Config::no_headers(move _3, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = const true;
        _9 = &((*_1).0: select::SelectColumns);
        _8 = <SelectColumns as Clone>::clone(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = const false;
        _0 = Config::select(move _2, move _8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7];
    }
}

fn partition::<impl at src/cmd/partition.rs:66:1: 66:10>::key_column(_1: &partition::Args, _2: &Config, _3: &ByteRecord) -> Result<usize, CliError> {
    debug self => _1;
    debug rconfig => _2;
    debug headers => _3;
    let mut _0: std::result::Result<usize, CliError>;
    let _4: select::Selection;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _6: std::result::Result<select::Selection, std::string::String>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::string::String>;
    let _9: select::Selection;
    let mut _10: usize;
    let mut _11: &select::Selection;
    let mut _12: usize;
    let mut _13: &[usize];
    let mut _14: &select::Selection;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: CliError;
    scope 1 {
        debug select_cols => _4;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _6 = Config::selection(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<Selection, std::string::String> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Continue).0: select::Selection);
        _4 = move _9;
        _11 = &_4;
        _10 = Selection::len(move _11) -> [return: bb6, unwind: bb14];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<usize, CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _8) -> [return: bb13, unwind continue];
    }

    bb6: {
        switchInt(move _10) -> [1: bb7, otherwise: bb10];
    }

    bb7: {
        _14 = &_4;
        _13 = <Selection as Deref>::deref(move _14) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _15 = const 0_usize;
        _16 = Len((*_13));
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb9, unwind: bb14];
    }

    bb9: {
        _12 = (*_13)[_15];
        _0 = Result::<usize, CliError>::Ok(move _12);
        goto -> bb12;
    }

    bb10: {
        _18 = <CliError as From<&str>>::from(const "can only partition on one column") -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _0 = Result::<usize, CliError>::Err(move _18);
        goto -> bb12;
    }

    bb12: {
        drop(_4) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn partition::<impl at src/cmd/partition.rs:66:1: 66:10>::sequential_partition(_1: &partition::Args) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: config::Config;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _5: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _6: &config::Config;
    let mut _7: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _12: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _13: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _14: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, usize>;
    let mut _18: std::result::Result<usize, CliError>;
    let _19: &config::Config;
    let _20: &csv::ByteRecord;
    let mut _21: isize;
    let mut _25: util::FilenameTemplate;
    let mut _26: &util::FilenameTemplate;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _30: std::result::Result<bool, csv::Error>;
    let mut _31: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _32: &mut csv::ByteRecord;
    let mut _33: isize;
    let _36: &[u8];
    let mut _37: &csv::ByteRecord;
    let mut _39: isize;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _45: &[u8];
    let mut _46: std::ops::Range<usize>;
    let _47: &[u8];
    let mut _49: &mut std::collections::HashMap<std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _50: std::vec::Vec<u8>;
    let mut _51: &[u8];
    let mut _53: isize;
    let mut _56: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _59: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _60: &mut cmd::partition::WriterGenerator;
    let _61: &str;
    let mut _62: &std::string::String;
    let mut _63: &[u8];
    let mut _64: isize;
    let mut _67: bool;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _69: std::result::Result<(), csv::Error>;
    let mut _70: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _71: &csv::ByteRecord;
    let mut _72: isize;
    let mut _74: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _75: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _77: std::result::Result<(), csv::Error>;
    let mut _78: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _79: &csv::ByteRecord;
    let mut _80: isize;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    scope 1 {
        debug rconfig => _2;
        let mut _3: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
        let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
        scope 2 {
            debug rdr => _3;
            let _10: csv::ByteRecord;
            let _15: std::result::Result<std::convert::Infallible, csv::Error>;
            let _16: &csv::ByteRecord;
            scope 7 {
                debug headers => _10;
                let _22: std::result::Result<std::convert::Infallible, CliError>;
                let _23: usize;
                scope 12 {
                    debug key_col => _23;
                    let mut _24: cmd::partition::WriterGenerator;
                    scope 17 {
                        debug gen => _24;
                        let mut _27: std::collections::HashMap<std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
                        scope 18 {
                            debug writers => _27;
                            let mut _28: csv::ByteRecord;
                            scope 19 {
                                debug row => _28;
                                let _34: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _35: bool;
                                scope 20 {
                                    debug residual => _34;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _35;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug column => _36;
                                    let _38: &[u8];
                                    let _40: usize;
                                    let _41: &usize;
                                    scope 25 {
                                        debug key => _38;
                                        let mut _48: std::collections::hash_map::Entry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
                                        scope 27 {
                                            debug entry => _48;
                                            let _52: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                                            let _54: &mut std::collections::hash_map::OccupiedEntry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
                                            let _55: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
                                            scope 28 {
                                                debug wtr => _52;
                                                let _81: std::result::Result<std::convert::Infallible, csv::Error>;
                                                scope 40 {
                                                    debug residual => _81;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => const ();
                                                    scope 43 {
                                                    }
                                                }
                                            }
                                            scope 29 {
                                                debug occupied => _54;
                                            }
                                            scope 30 {
                                                debug vacant => _55;
                                                let mut _57: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                                                let _65: std::result::Result<std::convert::Infallible, std::io::Error>;
                                                let _66: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                                                scope 31 {
                                                    debug wtr => _57;
                                                    let _73: std::result::Result<std::convert::Infallible, csv::Error>;
                                                    scope 36 {
                                                        debug residual => _73;
                                                        scope 37 {
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug val => const ();
                                                        scope 39 {
                                                        }
                                                    }
                                                }
                                                scope 32 {
                                                    debug residual => _65;
                                                    scope 33 {
                                                    }
                                                }
                                                scope 34 {
                                                    debug val => _66;
                                                    scope 35 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug len => _40;
                                        debug len => _41;
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _22;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _23;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _15;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _16;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _83 = const false;
        _82 = const false;
        _2 = partition::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _5 = Config::reader(move _6) -> [return: bb2, unwind: bb72];
    }

    bb2: {
        _4 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb72];
    }

    bb3: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_4 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _3 = move _9;
        _13 = &mut _3;
        _12 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _13) -> [return: bb7, unwind: bb71];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb84, unwind: bb72];
    }

    bb7: {
        _11 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _12) -> [return: bb8, unwind: bb71];
    }

    bb8: {
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _16 = ((_11 as Continue).0: &csv::ByteRecord);
        _10 = <ByteRecord as Clone>::clone(_16) -> [return: bb11, unwind: bb71];
    }

    bb10: {
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _15) -> [return: bb85, unwind: bb71];
    }

    bb11: {
        _19 = &_2;
        _20 = &_10;
        _18 = partition::Args::key_column(_1, _19, _20) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        _17 = <Result<usize, CliError> as Try>::branch(move _18) -> [return: bb13, unwind: bb70];
    }

    bb13: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        _23 = ((_17 as Continue).0: usize);
        _26 = &((*_1).3: util::FilenameTemplate);
        _25 = <FilenameTemplate as Clone>::clone(move _26) -> [return: bb16, unwind: bb70];
    }

    bb15: {
        _22 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _22) -> [return: bb86, unwind: bb70];
    }

    bb16: {
        _24 = WriterGenerator::new(move _25) -> [return: bb17, unwind: bb70];
    }

    bb17: {
        _27 = HashMap::<Vec<u8>, Writer<Box<dyn std::io::Write>>>::new() -> [return: bb18, unwind: bb69];
    }

    bb18: {
        _28 = ByteRecord::new() -> [return: bb87, unwind: bb68];
    }

    bb19: {
        _31 = &mut _3;
        _32 = &mut _28;
        _30 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _31, _32) -> [return: bb20, unwind: bb67];
    }

    bb20: {
        _29 = <Result<bool, csv::Error> as Try>::branch(move _30) -> [return: bb21, unwind: bb67];
    }

    bb21: {
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        _35 = ((_29 as Continue).0: bool);
        switchInt(_35) -> [0: bb75, otherwise: bb74];
    }

    bb23: {
        _34 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _34) -> [return: bb88, unwind: bb67];
    }

    bb24: {
        _39 = discriminant(((*_1).4: std::option::Option<usize>));
        switchInt(move _39) -> [1: bb26, otherwise: bb25];
    }

    bb25: {
        _47 = <[u8] as Index<RangeFull>>::index(_36, const RangeFull) -> [return: bb29, unwind: bb67];
    }

    bb26: {
        _41 = &((((*_1).4: std::option::Option<usize>) as Some).0: usize);
        _43 = (*_41);
        _44 = Len((*_36));
        _42 = Lt(move _43, move _44);
        switchInt(move _42) -> [0: bb25, otherwise: bb27];
    }

    bb27: {
        _40 = ((((*_1).4: std::option::Option<usize>) as Some).0: usize);
        _46 = std::ops::Range::<usize> { start: const 0_usize, end: _40 };
        _45 = <[u8] as Index<std::ops::Range<usize>>>::index(_36, move _46) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _38 = _45;
        goto -> bb30;
    }

    bb29: {
        _38 = _47;
        goto -> bb30;
    }

    bb30: {
        _49 = &mut _27;
        _51 = _38;
        _50 = std::slice::<impl [u8]>::to_vec(move _51) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        _48 = HashMap::<Vec<u8>, Writer<Box<dyn std::io::Write>>>::entry(move _49, move _50) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb34, 1: bb33, otherwise: bb5];
    }

    bb33: {
        _83 = const true;
        _55 = move ((_48 as Vacant).0: std::collections::hash_map::VacantEntry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>);
        _60 = &mut _24;
        _62 = &((*_1).2: std::string::String);
        _61 = <std::string::String as Deref>::deref(move _62) -> [return: bb35, unwind: bb81];
    }

    bb34: {
        _54 = &mut ((_48 as Occupied).0: std::collections::hash_map::OccupiedEntry<'_, std::vec::Vec<u8>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>);
        _52 = std::collections::hash_map::OccupiedEntry::<'_, Vec<u8>, Writer<Box<dyn std::io::Write>>>::get_mut(_54) -> [return: bb89, unwind: bb83];
    }

    bb35: {
        _63 = _38;
        _59 = WriterGenerator::writer::<&str>(move _60, _61, move _63) -> [return: bb36, unwind: bb81];
    }

    bb36: {
        _58 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _59) -> [return: bb37, unwind: bb81];
    }

    bb37: {
        _64 = discriminant(_58);
        switchInt(move _64) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        _66 = move ((_58 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _82 = const true;
        _57 = move _66;
        _67 = (_2.4: bool);
        switchInt(move _67) -> [0: bb40, otherwise: bb45];
    }

    bb39: {
        _65 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _65) -> [return: bb90, unwind: bb81];
    }

    bb40: {
        _70 = &mut _57;
        _71 = &_10;
        _69 = Writer::<Box<dyn std::io::Write>>::write_record::<&ByteRecord, &[u8]>(move _70, move _71) -> [return: bb41, unwind: bb79];
    }

    bb41: {
        _68 = <Result<(), csv::Error> as Try>::branch(move _69) -> [return: bb42, unwind: bb79];
    }

    bb42: {
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb45, 1: bb43, otherwise: bb5];
    }

    bb43: {
        _73 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _73) -> [return: bb44, unwind: bb79];
    }

    bb44: {
        drop(_57) -> [return: bb57, unwind: bb81];
    }

    bb45: {
        _83 = const false;
        _74 = move _55;
        _82 = const false;
        _75 = move _57;
        _56 = std::collections::hash_map::VacantEntry::<'_, Vec<u8>, Writer<Box<dyn std::io::Write>>>::insert(move _74, move _75) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        _82 = const false;
        _52 = _56;
        _83 = const false;
        goto -> bb47;
    }

    bb47: {
        _78 = _52;
        _79 = &_28;
        _77 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _78, _79) -> [return: bb48, unwind: bb83];
    }

    bb48: {
        _76 = <Result<(), csv::Error> as Try>::branch(move _77) -> [return: bb49, unwind: bb83];
    }

    bb49: {
        _80 = discriminant(_76);
        switchInt(move _80) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        _84 = discriminant(_48);
        switchInt(move _84) -> [1: bb19, otherwise: bb76];
    }

    bb51: {
        _81 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _81) -> [return: bb91, unwind: bb83];
    }

    bb52: {
        drop(_27) -> [return: bb53, unwind: bb69];
    }

    bb53: {
        drop(_24) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        drop(_10) -> [return: bb55, unwind: bb71];
    }

    bb55: {
        drop(_3) -> [return: bb56, unwind: bb72];
    }

    bb56: {
        drop(_2) -> [return: bb66, unwind continue];
    }

    bb57: {
        _82 = const false;
        drop(_55) -> [return: bb58, unwind: bb83];
    }

    bb58: {
        _83 = const false;
        goto -> bb59;
    }

    bb59: {
        _85 = discriminant(_48);
        switchInt(move _85) -> [1: bb60, otherwise: bb77];
    }

    bb60: {
        drop(_28) -> [return: bb61, unwind: bb68];
    }

    bb61: {
        drop(_27) -> [return: bb62, unwind: bb69];
    }

    bb62: {
        drop(_24) -> [return: bb63, unwind: bb70];
    }

    bb63: {
        drop(_10) -> [return: bb64, unwind: bb71];
    }

    bb64: {
        drop(_3) -> [return: bb65, unwind: bb72];
    }

    bb65: {
        drop(_2) -> [return: bb66, unwind continue];
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_28) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_27) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_24) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_10) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_3) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_2) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74: {
        _37 = &_28;
        _36 = <ByteRecord as Index<usize>>::index(move _37, _23) -> [return: bb24, unwind: bb67];
    }

    bb75: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_28) -> [return: bb52, unwind: bb68];
    }

    bb76: {
        drop(_48) -> [return: bb19, unwind: bb67];
    }

    bb77: {
        drop(_48) -> [return: bb60, unwind: bb67];
    }

    bb78 (cleanup): {
        drop(_57) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_82) -> [0: bb81, otherwise: bb78];
    }

    bb80 (cleanup): {
        drop(_55) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_83) -> [0: bb83, otherwise: bb80];
    }

    bb82 (cleanup): {
        drop(_48) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        _86 = discriminant(_48);
        switchInt(move _86) -> [1: bb67, otherwise: bb82];
    }

    bb84: {
        goto -> bb65;
    }

    bb85: {
        goto -> bb64;
    }

    bb86: {
        goto -> bb63;
    }

    bb87: {
        goto -> bb19;
    }

    bb88: {
        goto -> bb60;
    }

    bb89: {
        goto -> bb47;
    }

    bb90: {
        goto -> bb57;
    }

    bb91: {
        goto -> bb59;
    }
}

fn partition::<impl at src/cmd/partition.rs:136:1: 136:21>::new(_1: FilenameTemplate) -> WriterGenerator {
    debug template => _1;
    let mut _0: cmd::partition::WriterGenerator;
    let mut _2: util::FilenameTemplate;
    let mut _3: std::collections::HashSet<std::string::String>;
    let mut _4: regex::Regex;
    let mut _5: std::result::Result<regex::Regex, regex::Error>;
    let _6: &str;

    bb0: {
        _2 = move _1;
        _3 = HashSet::<std::string::String>::new() -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const "\\W";
        _5 = regex::Regex::new(_6) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _4 = Result::<regex::Regex, regex::Error>::unwrap(move _5) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = WriterGenerator { template: move _2, counter: const 1_usize, used: move _3, non_word_char: move _4 };
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn partition::<impl at src/cmd/partition.rs:136:1: 136:21>::writer(_1: &mut WriterGenerator, _2: P, _3: &[u8]) -> Result<Writer<Box<dyn std::io::Write>>, std::io::Error> {
    debug self => _1;
    debug path => _2;
    debug key => _3;
    let mut _0: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let _4: std::string::String;
    let mut _5: &util::FilenameTemplate;
    let mut _6: &std::path::Path;
    let mut _7: &P;
    let _8: &str;
    let _9: &std::string::String;
    scope 1 {
        debug unique_value => _4;
    }

    bb0: {
        _4 = WriterGenerator::unique_value(_1, _3) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _5 = &((*_1).0: util::FilenameTemplate);
        _7 = &_2;
        _6 = <P as AsRef<Path>>::as_ref(move _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _9 = &_4;
        _8 = <std::string::String as Deref>::deref(_9) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = FilenameTemplate::writer::<&Path>(move _5, move _6, _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn partition::<impl at src/cmd/partition.rs:136:1: 136:21>::unique_value(_1: &mut WriterGenerator, _2: &[u8]) -> std::string::String {
    debug self => _1;
    debug key => _2;
    let mut _0: std::string::String;
    let _3: std::borrow::Cow<'_, str>;
    let mut _5: std::borrow::Cow<'_, str>;
    let mut _6: &regex::Regex;
    let _7: &str;
    let mut _8: &std::borrow::Cow<'_, str>;
    let mut _10: bool;
    let mut _11: &std::string::String;
    let _12: &str;
    let mut _13: bool;
    let mut _14: &std::collections::HashSet<std::string::String>;
    let _15: &std::string::String;
    let _16: bool;
    let mut _17: &mut std::collections::HashSet<std::string::String>;
    let mut _18: std::string::String;
    let mut _19: &std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: [core::fmt::rt::Argument<'_>; 2];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &&std::string::String;
    let _29: &std::string::String;
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &usize;
    let mut _32: usize;
    let mut _33: std::option::Option<usize>;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: &std::collections::HashSet<std::string::String>;
    let _37: &std::string::String;
    let _38: bool;
    let mut _39: &mut std::collections::HashSet<std::string::String>;
    let mut _40: std::string::String;
    let mut _41: &std::string::String;
    let mut _43: bool;
    scope 1 {
        debug utf8 => _3;
        let _4: std::string::String;
        scope 2 {
            debug safe => _4;
            let _9: std::string::String;
            scope 3 {
                debug base => _9;
                let _20: std::string::String;
                let _21: std::string::String;
                let mut _42: &[&str; 2];
                scope 4 {
                    debug candidate => _20;
                }
                scope 5 {
                    debug res => _21;
                }
            }
        }
    }

    bb0: {
        _43 = const false;
        _3 = std::string::String::from_utf8_lossy(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &((*_1).3: regex::Regex);
        _8 = &_3;
        _7 = <Cow<'_, str> as Deref>::deref(move _8) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _5 = regex::Regex::replace_all::<&str>(move _6, _7, const "") -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _4 = Cow::<'_, str>::into_owned(move _5) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        _43 = const true;
        _11 = &_4;
        _10 = std::string::String::is_empty(move _11) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _12 = const "empty";
        _9 = <str as ToOwned>::to_owned(_12) -> [return: bb37, unwind: bb36];
    }

    bb7: {
        _43 = const false;
        _9 = move _4;
        goto -> bb8;
    }

    bb8: {
        _14 = &((*_1).2: std::collections::HashSet<std::string::String>);
        _15 = &_9;
        _13 = HashSet::<std::string::String>::contains::<std::string::String>(move _14, _15) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        switchInt(move _13) -> [0: bb10, otherwise: bb13];
    }

    bb10: {
        _17 = &mut ((*_1).2: std::collections::HashSet<std::string::String>);
        _19 = &_9;
        _18 = <std::string::String as Clone>::clone(move _19) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _16 = HashSet::<std::string::String>::insert(move _17, move _18) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _0 = move _9;
        switchInt(_43) -> [0: bb25, otherwise: bb33];
    }

    bb13: {
        _42 = const _;
        _23 = _42 as &[&str] (PointerCoercion(Unsize));
        _29 = &_9;
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_28) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _31 = &((*_1).1: usize);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_31) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _26 = [move _27, move _30];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _21 = format(move _22) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _20 = move _21;
        _34 = ((*_1).1: usize);
        _33 = core::num::<impl usize>::checked_add(move _34, const 1_usize) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _32 = std::option::Option::<usize>::unwrap_or_else::<{closure@src/cmd/partition.rs:175:75: 175:77}>(move _33, const ZeroSized: {closure@src/cmd/partition.rs:175:75: 175:77}) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        ((*_1).1: usize) = move _32;
        _36 = &((*_1).2: std::collections::HashSet<std::string::String>);
        _37 = &_20;
        _35 = HashSet::<std::string::String>::contains::<std::string::String>(move _36, _37) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        switchInt(move _35) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        drop(_20) -> [return: bb13, unwind: bb30];
    }

    bb22: {
        _39 = &mut ((*_1).2: std::collections::HashSet<std::string::String>);
        _41 = &_20;
        _40 = <std::string::String as Clone>::clone(move _41) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _38 = HashSet::<std::string::String>::insert(move _39, move _40) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _0 = move _20;
        drop(_9) -> [return: bb26, unwind: bb36];
    }

    bb25: {
        _43 = const false;
        drop(_3) -> [return: bb28, unwind continue];
    }

    bb26: {
        switchInt(_43) -> [0: bb27, otherwise: bb34];
    }

    bb27: {
        _43 = const false;
        drop(_3) -> [return: bb28, unwind continue];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_20) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_9) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        drop(_4) -> [return: bb25, unwind: bb31];
    }

    bb34: {
        drop(_4) -> [return: bb27, unwind: bb31];
    }

    bb35 (cleanup): {
        drop(_4) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_43) -> [0: bb31, otherwise: bb35];
    }

    bb37: {
        goto -> bb8;
    }
}

promoted[0] in partition::<impl at src/cmd/partition.rs:136:1: 136:21>::unique_value: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "_"];
        _0 = &_1;
        return;
    }
}

fn partition::<impl at src/cmd/partition.rs:136:1: 136:21>::unique_value::{closure#0}(_1: {closure@src/cmd/partition.rs:175:75: 175:77}) -> usize {
    let mut _0: usize;
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "Cannot generate unique value") -> unwind continue;
    }
}

static sample::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nRandomly samples CSV data uniformly using memory proportional to the size of\nthe sample.\n\nWhen an index is present, this command will use random indexing if the sample\nsize is less than 10% of the total number of records. This allows for efficient\nsampling such that the entire CSV file is not parsed.\n\nThis command is intended to provide a means to sample from a CSV data set that\nis too big to fit into memory (for example, for use with commands like 'xsv\nfrequency' or 'xsv stats'). It will however visit every CSV record exactly\nonce, which is necessary to provide a uniform random sample. If you wish to\nlimit the number of records visited, use the 'xsv slice' command to pipe into\n'xsv sample'.\n\nUsage:\n    xsv sample [options] <sample-size> [<input>]\n    xsv sample --help\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will be consider as part of\n                           the population to sample from. (When not set, the\n                           first row is the header row and will always appear\n                           in the output.)\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const sample::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<sample::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::sample::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sample::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::expecting(_1: &sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_u64(_1: sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E> {
    debug self => const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _4: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _5: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _6: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _7: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _8: __E;
    let mut _9: serde::de::Unexpected<'_>;
    let mut _10: &dyn serde::de::Expected;
    let mut _11: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1];
    }

    bb1: {
        _9 = Unexpected::<'_>::Unsigned(_2);
        _11 = const _;
        _10 = _11 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _8 = <__E as serde::de::Error>::invalid_value(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb2: {
        _3 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field0;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _4 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field1;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb8;
    }

    bb4: {
        _5 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field2;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb5: {
        _6 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field3;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb6: {
        _7 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field4;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb8;
    }

    bb7: {
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Err(move _8);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 5";
        _0 = &_1;
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_str(_1: sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E> {
    debug self => const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _9: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _10: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _11: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _12: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _13: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;

    bb0: {
        _7 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb15, unwind continue];
    }

    bb1: {
        _8 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field0;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb16;
    }

    bb2: {
        _6 = <str as PartialEq>::eq(_2, const "arg_sample_size") -> [return: bb14, unwind continue];
    }

    bb3: {
        _9 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field1;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb16;
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb13, unwind continue];
    }

    bb5: {
        _10 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field2;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb16;
    }

    bb6: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb12, unwind continue];
    }

    bb7: {
        _11 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field3;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb16;
    }

    bb8: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb11, unwind continue];
    }

    bb9: {
        _12 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field4;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb16;
    }

    bb10: {
        _13 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__ignore;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb16;
    }

    bb11: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb12: {
        switchInt(move _4) -> [0: bb8, otherwise: bb7];
    }

    bb13: {
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb14: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb15: {
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb16: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_bytes(_1: sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E> {
    debug self => const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _16: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _17: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _18: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _19: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
    let mut _20: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;

    bb0: {
        _12 = Len((*_2));
        _13 = const 9_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb68, otherwise: bb10];
    }

    bb10: {
        _20 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__ignore;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb73;
    }

    bb11: {
        _9 = Len((*_2));
        _10 = const 15_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb41, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 15]) -> [97: bb13, 102: bb27, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 15]) -> [114: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 15]) -> [103: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 15]) -> [95: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 15]) -> [115: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 15]) -> [97: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 15]) -> [109: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 15]) -> [112: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 15]) -> [108: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 15]) -> [101: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 15]) -> [95: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[11 of 15]) -> [115: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[12 of 15]) -> [105: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[13 of 15]) -> [122: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[14 of 15]) -> [101: bb69, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[1 of 15]) -> [108: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[2 of 15]) -> [97: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[3 of 15]) -> [103: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[4 of 15]) -> [95: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[5 of 15]) -> [110: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[6 of 15]) -> [111: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[7 of 15]) -> [95: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[8 of 15]) -> [104: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[9 of 15]) -> [101: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[10 of 15]) -> [97: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[11 of 15]) -> [100: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[12 of 15]) -> [101: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[13 of 15]) -> [114: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[14 of 15]) -> [115: bb71, otherwise: bb10];
    }

    bb41: {
        _6 = Len((*_2));
        _7 = const 11_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb53, otherwise: bb42];
    }

    bb42: {
        switchInt((*_2)[0 of 11]) -> [102: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[1 of 11]) -> [108: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[2 of 11]) -> [97: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[3 of 11]) -> [103: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[4 of 11]) -> [95: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[5 of 11]) -> [111: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[6 of 11]) -> [117: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[7 of 11]) -> [116: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[8 of 11]) -> [112: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[9 of 11]) -> [117: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[10 of 11]) -> [116: bb70, otherwise: bb10];
    }

    bb53: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 14]) -> [102: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[1 of 14]) -> [108: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[2 of 14]) -> [97: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[3 of 14]) -> [103: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[4 of 14]) -> [95: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[5 of 14]) -> [100: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[6 of 14]) -> [101: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[7 of 14]) -> [108: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[8 of 14]) -> [105: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[9 of 14]) -> [109: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[10 of 14]) -> [105: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[11 of 14]) -> [116: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[12 of 14]) -> [101: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[13 of 14]) -> [114: bb72, otherwise: bb10];
    }

    bb68: {
        _15 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field0;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb73;
    }

    bb69: {
        _16 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field1;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb73;
    }

    bb70: {
        _17 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field2;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb73;
    }

    bb71: {
        _18 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field3;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb73;
    }

    bb72: {
        _19 = sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field::__field4;
        _0 = Result::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb73;
    }

    bb73: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize(_1: __D) -> Result<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor>(move _1, const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::expecting(_1: &sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq(_1: sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<sample::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sample::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::sample::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<u64>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: cmd::sample::Args;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: std::option::Option<std::string::String>;
    let mut _53: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<u64>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: u64;
        let mut _54: &&str;
        scope 5 {
            debug __field1 => _19;
            let _22: std::option::Option<std::string::String>;
            let _26: std::option::Option<std::option::Option<std::string::String>>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: std::option::Option<std::string::String>;
            let mut _55: &&str;
            scope 9 {
                debug __field2 => _22;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _56: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<std::option::Option<config::Delimiter>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<config::Delimiter>;
                    let mut _57: &&str;
                    scope 17 {
                        debug __field4 => _47;
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb38];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb34;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _53 = const _;
        _12 = _53 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb38];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<u64>(_14) -> [return: bb8, unwind: bb37];
    }

    bb7: {
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb34;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb33;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<u64>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _54 = const _;
        _21 = _54 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb37];
    }

    bb12: {
        _19 = ((_16 as Some).0: u64);
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_24) -> [return: bb14, unwind: bb37];
    }

    bb13: {
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb33;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb33;
    }

    bb16: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _55 = const _;
        _31 = _55 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb37];
    }

    bb18: {
        _29 = move ((_26 as Some).0: std::option::Option<std::string::String>);
        _22 = move _29;
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb36];
    }

    bb19: {
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb33;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb32;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _56 = const _;
        _40 = _56 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb36];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_42) -> [return: bb26, unwind: bb36];
    }

    bb25: {
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb32;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb32;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _57 = const _;
        _49 = _57 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb36];
    }

    bb30: {
        _47 = ((_44 as Some).0: std::option::Option<config::Delimiter>);
        _51 = move _3;
        _52 = move _22;
        _50 = sample::Args { arg_input: move _51, arg_sample_size: _19, flag_output: move _52, flag_no_headers: _38, flag_delimiter: _47 };
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _50);
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb31: {
        _0 = Result::<sample::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb32;
    }

    bb32: {
        drop(_22) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        drop(_3) -> [return: bb34, unwind: bb38];
    }

    bb34: {
        drop(_2) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_3) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }
}

promoted[0] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

fn sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::<impl at src/cmd/sample.rs:41:10: 41:21>::visit_map(_1: sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<sample::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sample::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::sample::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _8: std::result::Result<std::option::Option<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _9: &mut __A;
    let mut _10: isize;
    let mut _13: isize;
    let mut _15: isize;
    let mut _16: bool;
    let _17: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _18: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _19: std::option::Option<std::option::Option<std::string::String>>;
    let mut _20: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _21: &mut __A;
    let mut _22: isize;
    let mut _25: bool;
    let _26: &std::option::Option<u64>;
    let mut _27: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _28: std::option::Option<u64>;
    let mut _29: std::result::Result<u64, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _30: &mut __A;
    let mut _31: isize;
    let mut _34: bool;
    let _35: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _36: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _37: std::option::Option<std::option::Option<std::string::String>>;
    let mut _38: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _39: &mut __A;
    let mut _40: isize;
    let mut _43: bool;
    let _44: &std::option::Option<bool>;
    let mut _45: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _46: std::option::Option<bool>;
    let mut _47: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _48: &mut __A;
    let mut _49: isize;
    let mut _52: bool;
    let _53: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _54: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _55: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _56: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _57: &mut __A;
    let mut _58: isize;
    let mut _61: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _69: isize;
    let mut _73: isize;
    let mut _75: std::result::Result<u64, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _76: isize;
    let mut _80: isize;
    let mut _82: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _83: isize;
    let mut _87: isize;
    let mut _89: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _90: isize;
    let mut _94: isize;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: isize;
    let mut _100: cmd::sample::Args;
    let mut _101: std::option::Option<std::string::String>;
    let mut _102: u64;
    let mut _103: std::option::Option<std::string::String>;
    let mut _104: bool;
    let mut _105: std::option::Option<config::Delimiter>;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<u64>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<std::string::String>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<config::Delimiter>>;
                    scope 5 {
                        debug __field4 => _7;
                        let _65: std::option::Option<std::string::String>;
                        let _67: std::option::Option<std::string::String>;
                        let _70: std::option::Option<std::string::String>;
                        let _71: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __key => _14;
                            let _11: std::option::Option<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field>;
                            let _12: <__A as serde::de::MapAccess<'_>>::Error;
                            let _14: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field;
                            let _23: std::option::Option<std::string::String>;
                            let _24: <__A as serde::de::MapAccess<'_>>::Error;
                            let _32: u64;
                            let _33: <__A as serde::de::MapAccess<'_>>::Error;
                            let _41: std::option::Option<std::string::String>;
                            let _42: <__A as serde::de::MapAccess<'_>>::Error;
                            let _50: bool;
                            let _51: <__A as serde::de::MapAccess<'_>>::Error;
                            let _59: std::option::Option<config::Delimiter>;
                            let _60: <__A as serde::de::MapAccess<'_>>::Error;
                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 7 {
                                debug __val => _11;
                            }
                            scope 8 {
                                debug __err => _12;
                            }
                            scope 9 {
                                debug __val => _23;
                            }
                            scope 10 {
                                debug __err => _24;
                            }
                            scope 11 {
                                debug __val => _32;
                            }
                            scope 12 {
                                debug __err => _33;
                            }
                            scope 13 {
                                debug __val => _41;
                            }
                            scope 14 {
                                debug __err => _42;
                            }
                            scope 15 {
                                debug __val => _50;
                            }
                            scope 16 {
                                debug __err => _51;
                            }
                            scope 17 {
                                debug __val => _59;
                            }
                            scope 18 {
                                debug __err => _60;
                            }
                            scope 19 {
                            }
                            scope 20 {
                                debug __val => const IgnoredAny;
                            }
                            scope 21 {
                                debug __err => _64;
                            }
                        }
                        scope 22 {
                            debug __field0 => _65;
                            let _72: u64;
                            let _74: u64;
                            let _77: u64;
                            let _78: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 26 {
                                debug __field1 => _72;
                                let _79: std::option::Option<std::string::String>;
                                let _81: std::option::Option<std::string::String>;
                                let _84: std::option::Option<std::string::String>;
                                let _85: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 30 {
                                    debug __field2 => _79;
                                    let _86: bool;
                                    let _88: bool;
                                    let _91: bool;
                                    let _92: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 34 {
                                        debug __field3 => _86;
                                        let _93: std::option::Option<config::Delimiter>;
                                        let _95: std::option::Option<config::Delimiter>;
                                        let _98: std::option::Option<config::Delimiter>;
                                        let _99: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 38 {
                                            debug __field4 => _93;
                                        }
                                        scope 39 {
                                            debug __field4 => _95;
                                        }
                                        scope 40 {
                                            debug __val => _98;
                                        }
                                        scope 41 {
                                            debug __err => _99;
                                        }
                                    }
                                    scope 35 {
                                        debug __field3 => _88;
                                    }
                                    scope 36 {
                                        debug __val => _91;
                                    }
                                    scope 37 {
                                        debug __err => _92;
                                    }
                                }
                                scope 31 {
                                    debug __field2 => _81;
                                }
                                scope 32 {
                                    debug __val => _84;
                                }
                                scope 33 {
                                    debug __err => _85;
                                }
                            }
                            scope 27 {
                                debug __field1 => _74;
                            }
                            scope 28 {
                                debug __val => _77;
                            }
                            scope 29 {
                                debug __err => _78;
                            }
                        }
                        scope 23 {
                            debug __field0 => _67;
                        }
                        scope 24 {
                            debug __val => _70;
                        }
                        scope 25 {
                            debug __err => _71;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _107 = const false;
        _106 = const false;
        _107 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<u64>::None;
        _106 = const true;
        _5 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _9 = &mut _2;
        _8 = <__A as MapAccess<'_>>::next_key::<sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sample::Args>::deserialize::__Field>(_9) -> [return: bb2, unwind: bb102];
    }

    bb2: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_8 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _12);
        goto -> bb87;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_8 as Ok).0: std::option::Option<cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field>);
        _13 = discriminant(_11);
        switchInt(move _13) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _66 = discriminant(_3);
        switchInt(move _66) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb7: {
        _14 = move ((_11 as Some).0: cmd::sample::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sample::Args>::deserialize::__Field);
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb9, 1: bb19, 2: bb27, 3: bb37, 4: bb45, otherwise: bb8];
    }

    bb8: {
        _62 = &mut _2;
        _61 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_62) -> [return: bb53, unwind: bb102];
    }

    bb9: {
        _17 = &_3;
        _16 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_17) -> [return: bb10, unwind: bb102];
    }

    bb10: {
        switchInt(move _16) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _18 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb102];
    }

    bb12: {
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _18);
        goto -> bb87;
    }

    bb13: {
        _21 = &mut _2;
        _20 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_21) -> [return: bb14, unwind: bb102];
    }

    bb14: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _24 = move ((_20 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb87;
    }

    bb16: {
        _23 = move ((_20 as Ok).0: std::option::Option<std::string::String>);
        _19 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _23);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _107 = const true;
        _3 = move _19;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _107 = const true;
        _3 = move _19;
        goto -> bb102;
    }

    bb19: {
        _26 = &_4;
        _25 = std::option::Option::<u64>::is_some(_26) -> [return: bb20, unwind: bb102];
    }

    bb20: {
        switchInt(move _25) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _27 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_sample_size") -> [return: bb22, unwind: bb102];
    }

    bb22: {
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _27);
        goto -> bb87;
    }

    bb23: {
        _30 = &mut _2;
        _29 = <__A as MapAccess<'_>>::next_value::<u64>(_30) -> [return: bb24, unwind: bb102];
    }

    bb24: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _33 = move ((_29 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _33);
        goto -> bb87;
    }

    bb26: {
        _32 = ((_29 as Ok).0: u64);
        _28 = std::option::Option::<u64>::Some(_32);
        _4 = move _28;
        goto -> bb1;
    }

    bb27: {
        _35 = &_5;
        _34 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_35) -> [return: bb28, unwind: bb102];
    }

    bb28: {
        switchInt(move _34) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _36 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb30, unwind: bb102];
    }

    bb30: {
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb87;
    }

    bb31: {
        _39 = &mut _2;
        _38 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_39) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _42 = move ((_38 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _42);
        goto -> bb87;
    }

    bb34: {
        _41 = move ((_38 as Ok).0: std::option::Option<std::string::String>);
        _37 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _41);
        drop(_5) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _106 = const true;
        _5 = move _37;
        goto -> bb1;
    }

    bb36 (cleanup): {
        _106 = const true;
        _5 = move _37;
        goto -> bb102;
    }

    bb37: {
        _44 = &_6;
        _43 = std::option::Option::<bool>::is_some(_44) -> [return: bb38, unwind: bb102];
    }

    bb38: {
        switchInt(move _43) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _45 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb40, unwind: bb102];
    }

    bb40: {
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _45);
        goto -> bb87;
    }

    bb41: {
        _48 = &mut _2;
        _47 = <__A as MapAccess<'_>>::next_value::<bool>(_48) -> [return: bb42, unwind: bb102];
    }

    bb42: {
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _51 = move ((_47 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb87;
    }

    bb44: {
        _50 = ((_47 as Ok).0: bool);
        _46 = std::option::Option::<bool>::Some(_50);
        _6 = move _46;
        goto -> bb1;
    }

    bb45: {
        _53 = &_7;
        _52 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_53) -> [return: bb46, unwind: bb102];
    }

    bb46: {
        switchInt(move _52) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _54 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb48, unwind: bb102];
    }

    bb48: {
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb87;
    }

    bb49: {
        _57 = &mut _2;
        _56 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_57) -> [return: bb50, unwind: bb102];
    }

    bb50: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _60 = move ((_56 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _60);
        goto -> bb87;
    }

    bb52: {
        _59 = ((_56 as Ok).0: std::option::Option<config::Delimiter>);
        _55 = std::option::Option::<std::option::Option<Delimiter>>::Some(_59);
        _7 = move _55;
        goto -> bb1;
    }

    bb53: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb1, 1: bb54, otherwise: bb4];
    }

    bb54: {
        _64 = move ((_61 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb87;
    }

    bb55: {
        _68 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb57, unwind: bb102];
    }

    bb56: {
        _107 = const false;
        _67 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _65 = move _67;
        goto -> bb60;
    }

    bb57: {
        _69 = discriminant(_68);
        switchInt(move _69) -> [0: bb59, 1: bb58, otherwise: bb4];
    }

    bb58: {
        _71 = move ((_68 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb87;
    }

    bb59: {
        _70 = move ((_68 as Ok).0: std::option::Option<std::string::String>);
        _65 = move _70;
        goto -> bb60;
    }

    bb60: {
        _73 = discriminant(_4);
        switchInt(move _73) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        _75 = serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>(const "arg_sample_size") -> [return: bb63, unwind: bb90];
    }

    bb62: {
        _74 = ((_4 as Some).0: u64);
        _72 = _74;
        goto -> bb66;
    }

    bb63: {
        _76 = discriminant(_75);
        switchInt(move _76) -> [0: bb65, 1: bb64, otherwise: bb4];
    }

    bb64: {
        _78 = move ((_75 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _78);
        goto -> bb86;
    }

    bb65: {
        _77 = ((_75 as Ok).0: u64);
        _72 = _77;
        goto -> bb66;
    }

    bb66: {
        _80 = discriminant(_5);
        switchInt(move _80) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        _82 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb69, unwind: bb90];
    }

    bb68: {
        _106 = const false;
        _81 = move ((_5 as Some).0: std::option::Option<std::string::String>);
        _79 = move _81;
        goto -> bb72;
    }

    bb69: {
        _83 = discriminant(_82);
        switchInt(move _83) -> [0: bb71, 1: bb70, otherwise: bb4];
    }

    bb70: {
        _85 = move ((_82 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb86;
    }

    bb71: {
        _84 = move ((_82 as Ok).0: std::option::Option<std::string::String>);
        _79 = move _84;
        goto -> bb72;
    }

    bb72: {
        _87 = discriminant(_6);
        switchInt(move _87) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        _89 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb75, unwind: bb89];
    }

    bb74: {
        _88 = ((_6 as Some).0: bool);
        _86 = _88;
        goto -> bb78;
    }

    bb75: {
        _90 = discriminant(_89);
        switchInt(move _90) -> [0: bb77, 1: bb76, otherwise: bb4];
    }

    bb76: {
        _92 = move ((_89 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _92);
        goto -> bb85;
    }

    bb77: {
        _91 = ((_89 as Ok).0: bool);
        _86 = _91;
        goto -> bb78;
    }

    bb78: {
        _94 = discriminant(_7);
        switchInt(move _94) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        _96 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb81, unwind: bb89];
    }

    bb80: {
        _95 = ((_7 as Some).0: std::option::Option<config::Delimiter>);
        _93 = _95;
        goto -> bb84;
    }

    bb81: {
        _97 = discriminant(_96);
        switchInt(move _97) -> [0: bb83, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _99 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Err(move _99);
        goto -> bb85;
    }

    bb83: {
        _98 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _93 = _98;
        goto -> bb84;
    }

    bb84: {
        _101 = move _65;
        _102 = _72;
        _103 = move _79;
        _104 = _86;
        _105 = _93;
        _100 = sample::Args { arg_input: move _101, arg_sample_size: move _102, flag_output: move _103, flag_no_headers: move _104, flag_delimiter: move _105 };
        _0 = Result::<sample::Args, <__A as MapAccess<'_>>::Error>::Ok(move _100);
        _106 = const false;
        _107 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb85: {
        drop(_79) -> [return: bb86, unwind: bb90];
    }

    bb86: {
        drop(_65) -> [return: bb87, unwind: bb102];
    }

    bb87: {
        _108 = discriminant(_5);
        switchInt(move _108) -> [1: bb95, otherwise: bb94];
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_79) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_65) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        _111 = discriminant(_3);
        switchInt(move _111) -> [1: bb103, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop(_2) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        resume;
    }

    bb94: {
        _106 = const false;
        _109 = discriminant(_3);
        switchInt(move _109) -> [1: bb98, otherwise: bb97];
    }

    bb95: {
        switchInt(_106) -> [0: bb94, otherwise: bb96];
    }

    bb96: {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb94, unwind: bb91];
    }

    bb97: {
        _107 = const false;
        drop(_2) -> [return: bb88, unwind continue];
    }

    bb98: {
        switchInt(_107) -> [0: bb97, otherwise: bb99];
    }

    bb99: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb97, unwind: bb92];
    }

    bb100 (cleanup): {
        switchInt(_106) -> [0: bb91, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        _110 = discriminant(_5);
        switchInt(move _110) -> [1: bb100, otherwise: bb91];
    }

    bb103 (cleanup): {
        switchInt(_107) -> [0: bb92, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb92, unwind terminate(cleanup)];
    }
}

const sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 5];
    let _2: &[&str; 5];
    let _3: [&str; 5];
    let mut _4: &[&str; 5];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in sample::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sample.rs:41:10: 41:21>::deserialize::FIELDS: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "arg_input", const "arg_sample_size", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn sample::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::sample::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::sample::Args>;
    let mut _4: std::result::Result<cmd::sample::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::sample::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _14: bool;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _18: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _19: &config::Config;
    let _20: config::Config;
    let _21: &std::option::Option<std::string::String>;
    let mut _22: isize;
    let mut _26: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _28: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _29: &config::Config;
    let mut _30: isize;
    let mut _33: isize;
    let mut _35: bool;
    let mut _36: u64;
    let mut _37: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _39: std::result::Result<(), csv::Error>;
    let mut _40: &config::Config;
    let mut _41: &mut csv::Reader<std::fs::File>;
    let mut _42: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _43: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _44: isize;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<csv::ByteRecord>>;
    let mut _47: std::result::Result<std::vec::Vec<csv::ByteRecord>, CliError>;
    let mut _48: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _49: isize;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _54: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _55: &config::Config;
    let mut _56: isize;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _60: std::result::Result<(), csv::Error>;
    let mut _61: &config::Config;
    let mut _62: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _63: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _64: isize;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<csv::ByteRecord>>;
    let mut _67: std::result::Result<std::vec::Vec<csv::ByteRecord>, CliError>;
    let mut _68: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _69: isize;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _74: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _75: &config::Config;
    let mut _76: isize;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _80: std::result::Result<(), csv::Error>;
    let mut _81: &config::Config;
    let mut _82: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _83: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _84: isize;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<csv::ByteRecord>>;
    let mut _87: std::result::Result<std::vec::Vec<csv::ByteRecord>, CliError>;
    let mut _88: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _89: isize;
    let mut _92: std::vec::IntoIter<csv::ByteRecord>;
    let mut _93: std::vec::IntoIter<csv::ByteRecord>;
    let mut _94: std::vec::Vec<csv::ByteRecord>;
    let mut _96: std::option::Option<csv::ByteRecord>;
    let mut _97: &mut std::vec::IntoIter<csv::ByteRecord>;
    let mut _98: isize;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _101: std::result::Result<(), csv::Error>;
    let mut _102: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _103: &csv::ByteRecord;
    let mut _104: isize;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _107: std::result::Result<(), std::io::Error>;
    let mut _108: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _109: isize;
    let mut _111: &str;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let _15: u64;
            scope 7 {
                debug sample_size => _15;
                let mut _16: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _24: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                scope 8 {
                    debug wtr => _16;
                    let _25: std::vec::Vec<csv::ByteRecord>;
                    let _31: std::result::Result<std::convert::Infallible, CliError>;
                    let _32: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
                    let mut _34: index::Indexed<std::fs::File, std::fs::File>;
                    let mut _72: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    let _77: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _78: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    scope 13 {
                        debug sampled => _25;
                        let mut _95: std::vec::IntoIter<csv::ByteRecord>;
                        let _110: std::result::Result<std::convert::Infallible, std::io::Error>;
                        scope 53 {
                            debug iter => _95;
                            let _99: csv::ByteRecord;
                            scope 54 {
                                debug row => _99;
                                let _105: std::result::Result<std::convert::Infallible, csv::Error>;
                                scope 55 {
                                    debug residual => _105;
                                    scope 56 {
                                    }
                                }
                                scope 57 {
                                    debug val => const ();
                                    scope 58 {
                                    }
                                }
                            }
                        }
                        scope 59 {
                            debug residual => _110;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => const ();
                            scope 62 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _31;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _32;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug idx => _34;
                        let _45: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _50: std::result::Result<std::convert::Infallible, CliError>;
                        let _51: std::vec::Vec<csv::ByteRecord>;
                        let mut _52: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                        let _57: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _58: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                        scope 19 {
                            debug residual => _45;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => const ();
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug residual => _50;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _51;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug rdr => _52;
                            let _65: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _70: std::result::Result<std::convert::Infallible, CliError>;
                            let _71: std::vec::Vec<csv::ByteRecord>;
                            scope 32 {
                                debug residual => _65;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => const ();
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug residual => _70;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _71;
                                scope 39 {
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _57;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _58;
                            scope 31 {
                            }
                        }
                    }
                    scope 40 {
                        debug rdr => _72;
                        let _85: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _90: std::result::Result<std::convert::Infallible, CliError>;
                        let _91: std::vec::Vec<csv::ByteRecord>;
                        scope 45 {
                            debug residual => _85;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => const ();
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug residual => _90;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug val => _91;
                            scope 52 {
                            }
                        }
                    }
                    scope 41 {
                        debug residual => _77;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _78;
                        scope 44 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _23;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _24;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _113 = const false;
        _112 = const false;
        _5 = const {alloc22: &&str};
        _111 = deref_copy (*_5);
        _4 = get_args::<sample::Args>(_111, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<sample::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::sample::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb105];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb91, unwind continue];
    }

    bb6: {
        _13 = (_2.4: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb105];
    }

    bb7: {
        _14 = (_2.3: bool);
        _9 = Config::no_headers(move _10, move _14) -> [return: bb8, unwind: bb105];
    }

    bb8: {
        _15 = (_2.1: u64);
        _21 = &(_2.2: std::option::Option<std::string::String>);
        _20 = Config::new(_21) -> [return: bb9, unwind: bb104];
    }

    bb9: {
        _19 = &_20;
        _18 = Config::writer(move _19) -> [return: bb10, unwind: bb103];
    }

    bb10: {
        _17 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _18) -> [return: bb11, unwind: bb103];
    }

    bb11: {
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _24 = move ((_17 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _16 = move _24;
        drop(_20) -> [return: bb15, unwind: bb102];
    }

    bb13: {
        _23 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb14, unwind: bb103];
    }

    bb14: {
        drop(_20) -> [return: bb89, unwind: bb104];
    }

    bb15: {
        _29 = &_9;
        _28 = Config::indexed(move _29) -> [return: bb16, unwind: bb102];
    }

    bb16: {
        _27 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _28) -> [return: bb17, unwind: bb102];
    }

    bb17: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _32 = move ((_27 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _112 = const true;
        _26 = move _32;
        _33 = discriminant(_26);
        switchInt(move _33) -> [1: bb21, otherwise: bb20];
    }

    bb19: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _31) -> [return: bb119, unwind: bb102];
    }

    bb20: {
        _75 = &_9;
        _74 = Config::reader(move _75) -> [return: bb50, unwind: bb118];
    }

    bb21: {
        _112 = const false;
        _34 = move ((_26 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _37 = &_34;
        _36 = Indexed::<File, File>::count(move _37) -> [return: bb22, unwind: bb101];
    }

    bb22: {
        _35 = do_random_access(_15, move _36) -> [return: bb23, unwind: bb101];
    }

    bb23: {
        switchInt(move _35) -> [0: bb34, otherwise: bb24];
    }

    bb24: {
        _40 = &_9;
        _42 = &mut _34;
        _41 = <Indexed<File, File> as DerefMut>::deref_mut(move _42) -> [return: bb25, unwind: bb101];
    }

    bb25: {
        _43 = &mut _16;
        _39 = Config::write_headers::<File, Box<dyn std::io::Write>>(move _40, _41, _43) -> [return: bb26, unwind: bb101];
    }

    bb26: {
        _38 = <Result<(), csv::Error> as Try>::branch(move _39) -> [return: bb27, unwind: bb101];
    }

    bb27: {
        _44 = discriminant(_38);
        switchInt(move _44) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        _48 = &mut _34;
        _47 = sample_random_access::<File, File>(_48, _15) -> [return: bb30, unwind: bb101];
    }

    bb29: {
        _45 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _45) -> [return: bb120, unwind: bb101];
    }

    bb30: {
        _46 = <Result<Vec<ByteRecord>, CliError> as Try>::branch(move _47) -> [return: bb31, unwind: bb101];
    }

    bb31: {
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _51 = move ((_46 as Continue).0: std::vec::Vec<csv::ByteRecord>);
        _113 = const true;
        _25 = move _51;
        goto -> bb49;
    }

    bb33: {
        _50 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _50) -> [return: bb121, unwind: bb101];
    }

    bb34: {
        _55 = &_9;
        _54 = Config::reader(move _55) -> [return: bb35, unwind: bb101];
    }

    bb35: {
        _53 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _54) -> [return: bb36, unwind: bb101];
    }

    bb36: {
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _58 = move ((_53 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _52 = move _58;
        _61 = &_9;
        _62 = &mut _52;
        _63 = &mut _16;
        _60 = Config::write_headers::<Box<dyn std::io::Read>, Box<dyn std::io::Write>>(move _61, _62, _63) -> [return: bb39, unwind: bb100];
    }

    bb38: {
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _57) -> [return: bb122, unwind: bb101];
    }

    bb39: {
        _59 = <Result<(), csv::Error> as Try>::branch(move _60) -> [return: bb40, unwind: bb100];
    }

    bb40: {
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        _68 = &mut _52;
        _67 = sample_reservoir::<Box<dyn std::io::Read>>(_68, _15) -> [return: bb44, unwind: bb100];
    }

    bb42: {
        _65 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _65) -> [return: bb43, unwind: bb100];
    }

    bb43: {
        drop(_52) -> [return: bb86, unwind: bb101];
    }

    bb44: {
        _66 = <Result<Vec<ByteRecord>, CliError> as Try>::branch(move _67) -> [return: bb45, unwind: bb100];
    }

    bb45: {
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        _71 = move ((_66 as Continue).0: std::vec::Vec<csv::ByteRecord>);
        _113 = const true;
        _25 = move _71;
        drop(_52) -> [return: bb49, unwind: bb101];
    }

    bb47: {
        _70 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _70) -> [return: bb48, unwind: bb99];
    }

    bb48: {
        drop(_52) -> [return: bb86, unwind: bb101];
    }

    bb49: {
        drop(_34) -> [return: bb110, unwind: bb118];
    }

    bb50: {
        _73 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _74) -> [return: bb51, unwind: bb118];
    }

    bb51: {
        _76 = discriminant(_73);
        switchInt(move _76) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        _78 = move ((_73 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _72 = move _78;
        _81 = &_9;
        _82 = &mut _72;
        _83 = &mut _16;
        _80 = Config::write_headers::<Box<dyn std::io::Read>, Box<dyn std::io::Write>>(move _81, _82, _83) -> [return: bb54, unwind: bb98];
    }

    bb53: {
        _77 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _77) -> [return: bb123, unwind: bb118];
    }

    bb54: {
        _79 = <Result<(), csv::Error> as Try>::branch(move _80) -> [return: bb55, unwind: bb98];
    }

    bb55: {
        _84 = discriminant(_79);
        switchInt(move _84) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        _88 = &mut _72;
        _87 = sample_reservoir::<Box<dyn std::io::Read>>(_88, _15) -> [return: bb59, unwind: bb98];
    }

    bb57: {
        _85 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _85) -> [return: bb58, unwind: bb98];
    }

    bb58: {
        drop(_72) -> [return: bb113, unwind: bb118];
    }

    bb59: {
        _86 = <Result<Vec<ByteRecord>, CliError> as Try>::branch(move _87) -> [return: bb60, unwind: bb98];
    }

    bb60: {
        _89 = discriminant(_86);
        switchInt(move _89) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        _91 = move ((_86 as Continue).0: std::vec::Vec<csv::ByteRecord>);
        _113 = const true;
        _25 = move _91;
        drop(_72) -> [return: bb110, unwind: bb118];
    }

    bb62: {
        _90 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _90) -> [return: bb63, unwind: bb97];
    }

    bb63: {
        drop(_72) -> [return: bb113, unwind: bb118];
    }

    bb64: {
        _92 = <std::vec::IntoIter<ByteRecord> as IntoIterator>::into_iter(move _93) -> [return: bb65, unwind: bb115];
    }

    bb65: {
        _95 = move _92;
        goto -> bb66;
    }

    bb66: {
        _97 = &mut _95;
        _96 = <std::vec::IntoIter<ByteRecord> as Iterator>::next(_97) -> [return: bb67, unwind: bb96];
    }

    bb67: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb69, 1: bb68, otherwise: bb4];
    }

    bb68: {
        _99 = move ((_96 as Some).0: csv::ByteRecord);
        _102 = &mut _16;
        _103 = &_99;
        _101 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _102, _103) -> [return: bb70, unwind: bb95];
    }

    bb69: {
        drop(_95) -> [return: bb75, unwind: bb115];
    }

    bb70: {
        _100 = <Result<(), csv::Error> as Try>::branch(move _101) -> [return: bb71, unwind: bb95];
    }

    bb71: {
        _104 = discriminant(_100);
        switchInt(move _104) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        drop(_99) -> [return: bb66, unwind: bb96];
    }

    bb73: {
        _105 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _105) -> [return: bb74, unwind: bb95];
    }

    bb74: {
        drop(_99) -> [return: bb85, unwind: bb96];
    }

    bb75: {
        _108 = &mut _16;
        _107 = Writer::<Box<dyn std::io::Write>>::flush(move _108) -> [return: bb76, unwind: bb115];
    }

    bb76: {
        _106 = <Result<(), std::io::Error> as Try>::branch(move _107) -> [return: bb77, unwind: bb115];
    }

    bb77: {
        _109 = discriminant(_106);
        switchInt(move _109) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        _0 = Result::<(), CliError>::Ok(const ());
        _113 = const false;
        drop(_16) -> [return: bb81, unwind: bb93];
    }

    bb79: {
        _110 = move ((_106 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _110) -> [return: bb80, unwind: bb92];
    }

    bb80: {
        _113 = const false;
        drop(_16) -> [return: bb83, unwind: bb93];
    }

    bb81: {
        drop(_9) -> [return: bb82, unwind: bb94];
    }

    bb82: {
        drop(_2) -> [return: bb91, unwind continue];
    }

    bb83: {
        drop(_9) -> [return: bb84, unwind: bb94];
    }

    bb84: {
        drop(_2) -> [return: bb91, unwind continue];
    }

    bb85: {
        drop(_95) -> [return: bb88, unwind: bb115];
    }

    bb86: {
        drop(_34) -> [return: bb113, unwind: bb118];
    }

    bb87: {
        _112 = const false;
        goto -> bb88;
    }

    bb88: {
        _113 = const false;
        drop(_16) -> [return: bb89, unwind: bb104];
    }

    bb89: {
        drop(_9) -> [return: bb90, unwind: bb105];
    }

    bb90: {
        drop(_2) -> [return: bb91, unwind continue];
    }

    bb91: {
        return;
    }

    bb92 (cleanup): {
        drop(_16) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_9) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_2) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_99) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_95) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_72) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_72) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_52) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_52) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_34) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_16) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_20) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_9) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_2) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        resume;
    }

    bb107: {
        _112 = const false;
        _113 = const false;
        _94 = move _25;
        _93 = <Vec<ByteRecord> as IntoIterator>::into_iter(move _94) -> [return: bb64, unwind: bb115];
    }

    bb108: {
        switchInt(_112) -> [0: bb107, otherwise: bb109];
    }

    bb109: {
        drop(((_26 as Some).0: index::Indexed<std::fs::File, std::fs::File>)) -> [return: bb107, unwind: bb115];
    }

    bb110: {
        _114 = discriminant(_26);
        switchInt(move _114) -> [1: bb108, otherwise: bb107];
    }

    bb111: {
        switchInt(_112) -> [0: bb87, otherwise: bb112];
    }

    bb112: {
        drop(((_26 as Some).0: index::Indexed<std::fs::File, std::fs::File>)) -> [return: bb87, unwind: bb102];
    }

    bb113: {
        _115 = discriminant(_26);
        switchInt(move _115) -> [1: bb111, otherwise: bb87];
    }

    bb114 (cleanup): {
        drop(_25) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_113) -> [0: bb102, otherwise: bb114];
    }

    bb116 (cleanup): {
        switchInt(_112) -> [0: bb102, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop(((_26 as Some).0: index::Indexed<std::fs::File, std::fs::File>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        _116 = discriminant(_26);
        switchInt(move _116) -> [1: bb116, otherwise: bb102];
    }

    bb119: {
        goto -> bb87;
    }

    bb120: {
        goto -> bb86;
    }

    bb121: {
        goto -> bb86;
    }

    bb122: {
        goto -> bb86;
    }

    bb123: {
        goto -> bb113;
    }
}

alloc22 (static: sample::USAGE, size: 16, align: 8) {
    ╾───alloc1130<imm>────╼ 31 05 00 00 00 00 00 00 │ ╾──────╼1.......
}

alloc1130 (size: 1329, align: 1) {
    0x000 │ 0a 52 61 6e 64 6f 6d 6c 79 20 73 61 6d 70 6c 65 │ .Randomly sample
    0x010 │ 73 20 43 53 56 20 64 61 74 61 20 75 6e 69 66 6f │ s CSV data unifo
    0x020 │ 72 6d 6c 79 20 75 73 69 6e 67 20 6d 65 6d 6f 72 │ rmly using memor
    0x030 │ 79 20 70 72 6f 70 6f 72 74 69 6f 6e 61 6c 20 74 │ y proportional t
    0x040 │ 6f 20 74 68 65 20 73 69 7a 65 20 6f 66 0a 74 68 │ o the size of.th
    0x050 │ 65 20 73 61 6d 70 6c 65 2e 0a 0a 57 68 65 6e 20 │ e sample...When 
    0x060 │ 61 6e 20 69 6e 64 65 78 20 69 73 20 70 72 65 73 │ an index is pres
    0x070 │ 65 6e 74 2c 20 74 68 69 73 20 63 6f 6d 6d 61 6e │ ent, this comman
    0x080 │ 64 20 77 69 6c 6c 20 75 73 65 20 72 61 6e 64 6f │ d will use rando
    0x090 │ 6d 20 69 6e 64 65 78 69 6e 67 20 69 66 20 74 68 │ m indexing if th
    0x0a0 │ 65 20 73 61 6d 70 6c 65 0a 73 69 7a 65 20 69 73 │ e sample.size is
    0x0b0 │ 20 6c 65 73 73 20 74 68 61 6e 20 31 30 25 20 6f │  less than 10% o
    0x0c0 │ 66 20 74 68 65 20 74 6f 74 61 6c 20 6e 75 6d 62 │ f the total numb
    0x0d0 │ 65 72 20 6f 66 20 72 65 63 6f 72 64 73 2e 20 54 │ er of records. T
    0x0e0 │ 68 69 73 20 61 6c 6c 6f 77 73 20 66 6f 72 20 65 │ his allows for e
    0x0f0 │ 66 66 69 63 69 65 6e 74 0a 73 61 6d 70 6c 69 6e │ fficient.samplin
    0x100 │ 67 20 73 75 63 68 20 74 68 61 74 20 74 68 65 20 │ g such that the 
    0x110 │ 65 6e 74 69 72 65 20 43 53 56 20 66 69 6c 65 20 │ entire CSV file 
    0x120 │ 69 73 20 6e 6f 74 20 70 61 72 73 65 64 2e 0a 0a │ is not parsed...
    0x130 │ 54 68 69 73 20 63 6f 6d 6d 61 6e 64 20 69 73 20 │ This command is 
    0x140 │ 69 6e 74 65 6e 64 65 64 20 74 6f 20 70 72 6f 76 │ intended to prov
    0x150 │ 69 64 65 20 61 20 6d 65 61 6e 73 20 74 6f 20 73 │ ide a means to s
    0x160 │ 61 6d 70 6c 65 20 66 72 6f 6d 20 61 20 43 53 56 │ ample from a CSV
    0x170 │ 20 64 61 74 61 20 73 65 74 20 74 68 61 74 0a 69 │  data set that.i
    0x180 │ 73 20 74 6f 6f 20 62 69 67 20 74 6f 20 66 69 74 │ s too big to fit
    0x190 │ 20 69 6e 74 6f 20 6d 65 6d 6f 72 79 20 28 66 6f │  into memory (fo
    0x1a0 │ 72 20 65 78 61 6d 70 6c 65 2c 20 66 6f 72 20 75 │ r example, for u
    0x1b0 │ 73 65 20 77 69 74 68 20 63 6f 6d 6d 61 6e 64 73 │ se with commands
    0x1c0 │ 20 6c 69 6b 65 20 27 78 73 76 0a 66 72 65 71 75 │  like 'xsv.frequ
    0x1d0 │ 65 6e 63 79 27 20 6f 72 20 27 78 73 76 20 73 74 │ ency' or 'xsv st
    0x1e0 │ 61 74 73 27 29 2e 20 49 74 20 77 69 6c 6c 20 68 │ ats'). It will h
    0x1f0 │ 6f 77 65 76 65 72 20 76 69 73 69 74 20 65 76 65 │ owever visit eve
    0x200 │ 72 79 20 43 53 56 20 72 65 63 6f 72 64 20 65 78 │ ry CSV record ex
    0x210 │ 61 63 74 6c 79 0a 6f 6e 63 65 2c 20 77 68 69 63 │ actly.once, whic
    0x220 │ 68 20 69 73 20 6e 65 63 65 73 73 61 72 79 20 74 │ h is necessary t
    0x230 │ 6f 20 70 72 6f 76 69 64 65 20 61 20 75 6e 69 66 │ o provide a unif
    0x240 │ 6f 72 6d 20 72 61 6e 64 6f 6d 20 73 61 6d 70 6c │ orm random sampl
    0x250 │ 65 2e 20 49 66 20 79 6f 75 20 77 69 73 68 20 74 │ e. If you wish t
    0x260 │ 6f 0a 6c 69 6d 69 74 20 74 68 65 20 6e 75 6d 62 │ o.limit the numb
    0x270 │ 65 72 20 6f 66 20 72 65 63 6f 72 64 73 20 76 69 │ er of records vi
    0x280 │ 73 69 74 65 64 2c 20 75 73 65 20 74 68 65 20 27 │ sited, use the '
    0x290 │ 78 73 76 20 73 6c 69 63 65 27 20 63 6f 6d 6d 61 │ xsv slice' comma
    0x2a0 │ 6e 64 20 74 6f 20 70 69 70 65 20 69 6e 74 6f 0a │ nd to pipe into.
    0x2b0 │ 27 78 73 76 20 73 61 6d 70 6c 65 27 2e 0a 0a 55 │ 'xsv sample'...U
    0x2c0 │ 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 73 61 │ sage:.    xsv sa
    0x2d0 │ 6d 70 6c 65 20 5b 6f 70 74 69 6f 6e 73 5d 20 3c │ mple [options] <
    0x2e0 │ 73 61 6d 70 6c 65 2d 73 69 7a 65 3e 20 5b 3c 69 │ sample-size> [<i
    0x2f0 │ 6e 70 75 74 3e 5d 0a 20 20 20 20 78 73 76 20 73 │ nput>].    xsv s
    0x300 │ 61 6d 70 6c 65 20 2d 2d 68 65 6c 70 0a 0a 43 6f │ ample --help..Co
    0x310 │ 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 │ mmon options:.  
    0x320 │ 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 20 20 │   -h, --help    
    0x330 │ 20 20 20 20 20 20 20 20 20 44 69 73 70 6c 61 79 │          Display
    0x340 │ 20 74 68 69 73 20 6d 65 73 73 61 67 65 0a 20 20 │  this message.  
    0x350 │ 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 20 3c │   -o, --output <
    0x360 │ 66 69 6c 65 3e 20 20 20 20 57 72 69 74 65 20 6f │ file>    Write o
    0x370 │ 75 74 70 75 74 20 74 6f 20 3c 66 69 6c 65 3e 20 │ utput to <file> 
    0x380 │ 69 6e 73 74 65 61 64 20 6f 66 20 73 74 64 6f 75 │ instead of stdou
    0x390 │ 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d 2d 6e 6f 2d │ t..    -n, --no-
    0x3a0 │ 68 65 61 64 65 72 73 20 20 20 20 20 20 20 57 68 │ headers       Wh
    0x3b0 │ 65 6e 20 73 65 74 2c 20 74 68 65 20 66 69 72 73 │ en set, the firs
    0x3c0 │ 74 20 72 6f 77 20 77 69 6c 6c 20 62 65 20 63 6f │ t row will be co
    0x3d0 │ 6e 73 69 64 65 72 20 61 73 20 70 61 72 74 20 6f │ nsider as part o
    0x3e0 │ 66 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ f.              
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 74 68 65 │              the
    0x400 │ 20 70 6f 70 75 6c 61 74 69 6f 6e 20 74 6f 20 73 │  population to s
    0x410 │ 61 6d 70 6c 65 20 66 72 6f 6d 2e 20 28 57 68 65 │ ample from. (Whe
    0x420 │ 6e 20 6e 6f 74 20 73 65 74 2c 20 74 68 65 0a 20 │ n not set, the. 
    0x430 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x440 │ 20 20 20 20 20 20 20 20 20 20 66 69 72 73 74 20 │           first 
    0x450 │ 72 6f 77 20 69 73 20 74 68 65 20 68 65 61 64 65 │ row is the heade
    0x460 │ 72 20 72 6f 77 20 61 6e 64 20 77 69 6c 6c 20 61 │ r row and will a
    0x470 │ 6c 77 61 79 73 20 61 70 70 65 61 72 0a 20 20 20 │ lways appear.   
    0x480 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x490 │ 20 20 20 20 20 20 20 20 69 6e 20 74 68 65 20 6f │         in the o
    0x4a0 │ 75 74 70 75 74 2e 29 0a 20 20 20 20 2d 64 2c 20 │ utput.).    -d, 
    0x4b0 │ 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 │ --delimiter <arg
    0x4c0 │ 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c │ >  The field del
    0x4d0 │ 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 64 69 │ imiter for readi
    0x4e0 │ 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 │ ng CSV data..   
    0x4f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x500 │ 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 65 20 │         Must be 
    0x510 │ 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 63 74 │ a single charact
    0x520 │ 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 │ er. (default: ,)
    0x530 │ 0a                                              │ .
}

fn sample_random_access(_1: &mut Indexed<R, I>, _2: u64) -> Result<Vec<ByteRecord>, CliError> {
    debug idx => _1;
    debug sample_size => _2;
    let mut _0: std::result::Result<std::vec::Vec<csv::ByteRecord>, CliError>;
    let mut _3: std::vec::Vec<u64>;
    let mut _4: std::ops::Range<u64>;
    let mut _5: u64;
    let mut _6: &index::Indexed<R, I>;
    let _8: ();
    let mut _9: &mut rand::ThreadRng;
    let mut _10: &mut [u64];
    let mut _11: &mut std::vec::Vec<u64>;
    let mut _13: usize;
    let mut _14: std::iter::Take<std::vec::IntoIter<u64>>;
    let mut _15: std::iter::Take<std::vec::IntoIter<u64>>;
    let mut _16: std::vec::IntoIter<u64>;
    let mut _17: std::vec::Vec<u64>;
    let mut _18: usize;
    let mut _20: std::option::Option<u64>;
    let mut _21: &mut std::iter::Take<std::vec::IntoIter<u64>>;
    let mut _22: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _25: std::result::Result<(), CliError>;
    let mut _26: isize;
    let _28: ();
    let mut _29: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _31: std::result::Result<csv::ByteRecord, csv::Error>;
    let mut _32: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _33: &mut csv::ByteRecordsIter<'_, R>;
    let mut _34: csv::ByteRecordsIter<'_, R>;
    let mut _35: &mut csv::Reader<R>;
    let mut _36: isize;
    let mut _39: std::vec::Vec<csv::ByteRecord>;
    let mut _40: bool;
    scope 1 {
        debug all_indices => _3;
        let mut _7: rand::ThreadRng;
        scope 2 {
            debug rng => _7;
            let mut _12: std::vec::Vec<csv::ByteRecord>;
            scope 3 {
                debug sampled => _12;
                let mut _19: std::iter::Take<std::vec::IntoIter<u64>>;
                scope 4 {
                    debug iter => _19;
                    let _23: u64;
                    scope 5 {
                        debug i => _23;
                        let _27: std::result::Result<std::convert::Infallible, CliError>;
                        let _37: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _38: csv::ByteRecord;
                        scope 6 {
                            debug residual => _27;
                            scope 7 {
                            }
                        }
                        scope 8 {
                            debug val => const ();
                            scope 9 {
                            }
                        }
                        scope 10 {
                            debug residual => _37;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => _38;
                            scope 13 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _40 = const false;
        _6 = &(*_1);
        _5 = Indexed::<R, I>::count(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::ops::Range::<u64> { start: const 0_u64, end: move _5 };
        _40 = const true;
        _3 = <std::ops::Range<u64> as Iterator>::collect::<Vec<u64>>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = thread_rng() -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _9 = &mut _7;
        _11 = &mut _3;
        _10 = <Vec<u64> as DerefMut>::deref_mut(move _11) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        _8 = <ThreadRng as Rng>::shuffle::<u64>(move _9, _10) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _13 = _2 as usize (IntToInt);
        _12 = Vec::<ByteRecord>::with_capacity(move _13) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _40 = const false;
        _17 = move _3;
        _16 = <Vec<u64> as IntoIterator>::into_iter(move _17) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        _18 = _2 as usize (IntToInt);
        _15 = <std::vec::IntoIter<u64> as Iterator>::take(move _16, move _18) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _14 = <std::iter::Take<std::vec::IntoIter<u64>> as IntoIterator>::into_iter(move _15) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        _19 = move _14;
        goto -> bb10;
    }

    bb10: {
        _21 = &mut _19;
        _20 = <std::iter::Take<std::vec::IntoIter<u64>> as Iterator>::next(_21) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _23 = ((_20 as Some).0: u64);
        _25 = Indexed::<R, I>::seek(_1, _23) -> [return: bb15, unwind: bb36];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        drop(_19) -> [return: bb28, unwind: bb37];
    }

    bb15: {
        _24 = <Result<(), CliError> as Try>::branch(move _25) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        _29 = &mut _12;
        _35 = <Indexed<R, I> as DerefMut>::deref_mut(_1) -> [return: bb19, unwind: bb36];
    }

    bb18: {
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<Vec<ByteRecord>, CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _27) -> [return: bb42, unwind: bb36];
    }

    bb19: {
        _34 = Reader::<R>::byte_records(_35) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        _33 = &mut _34;
        _32 = <ByteRecordsIter<'_, R> as Iterator>::next(move _33) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _31 = std::option::Option::<Result<ByteRecord, csv::Error>>::unwrap(move _32) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _30 = <Result<ByteRecord, csv::Error> as Try>::branch(move _31) -> [return: bb23, unwind: bb35];
    }

    bb23: {
        _36 = discriminant(_30);
        switchInt(move _36) -> [0: bb24, 1: bb25, otherwise: bb13];
    }

    bb24: {
        _38 = move ((_30 as Continue).0: csv::ByteRecord);
        _28 = Vec::<ByteRecord>::push(move _29, move _38) -> [return: bb27, unwind: bb35];
    }

    bb25: {
        _37 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Vec<ByteRecord>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _37) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        drop(_34) -> [return: bb30, unwind: bb36];
    }

    bb27: {
        drop(_34) -> [return: bb10, unwind: bb36];
    }

    bb28: {
        _39 = move _12;
        _0 = Result::<Vec<ByteRecord>, CliError>::Ok(move _39);
        drop(_7) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _40 = const false;
        goto -> bb34;
    }

    bb30: {
        drop(_19) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        drop(_12) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        drop(_7) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        _40 = const false;
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_19) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_7) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40 (cleanup): {
        drop(_3) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_40) -> [0: bb39, otherwise: bb40];
    }

    bb42: {
        goto -> bb30;
    }
}

fn sample_reservoir(_1: &mut Reader<R>, _2: u64) -> Result<Vec<ByteRecord>, CliError> {
    debug rdr => _1;
    debug sample_size => _2;
    let mut _0: std::result::Result<std::vec::Vec<csv::ByteRecord>, CliError>;
    let mut _3: std::vec::Vec<csv::ByteRecord>;
    let mut _4: usize;
    let mut _6: csv::ByteRecordsIter<'_, R>;
    let mut _7: std::iter::Take<&mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>>;
    let mut _8: std::iter::Take<&mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>>;
    let mut _9: &mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
    let mut _10: &mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
    let mut _11: usize;
    let mut _12: &std::vec::Vec<csv::ByteRecord>;
    let mut _14: std::option::Option<(usize, std::result::Result<csv::ByteRecord, csv::Error>)>;
    let mut _15: &mut std::iter::Take<&mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>>;
    let mut _16: isize;
    let _18: ();
    let mut _19: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _21: isize;
    let mut _25: std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
    let mut _26: std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
    let mut _28: std::option::Option<(usize, std::result::Result<csv::ByteRecord, csv::Error>)>;
    let mut _29: &mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
    let mut _30: isize;
    let mut _34: &mut rand::ThreadRng;
    let mut _35: usize;
    let mut _36: (usize, bool);
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: csv::ByteRecord;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _41: std::result::Result<csv::ByteRecord, csv::Error>;
    let mut _42: isize;
    let mut _45: &mut csv::ByteRecord;
    let mut _46: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _47: std::vec::Vec<csv::ByteRecord>;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    scope 1 {
        debug reservoir => _3;
        let mut _5: std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
        scope 2 {
            debug records => _5;
            let mut _13: std::iter::Take<&mut std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>>;
            let mut _24: rand::ThreadRng;
            scope 3 {
                debug iter => _13;
                let _17: std::result::Result<csv::ByteRecord, csv::Error>;
                scope 4 {
                    debug row => _17;
                    let _22: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _23: csv::ByteRecord;
                    scope 5 {
                        debug residual => _22;
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => _23;
                        scope 8 {
                        }
                    }
                }
            }
            scope 9 {
                debug rng => _24;
                let mut _27: std::iter::Enumerate<csv::ByteRecordsIter<'_, R>>;
                scope 10 {
                    debug iter => _27;
                    let _31: usize;
                    let _32: std::result::Result<csv::ByteRecord, csv::Error>;
                    scope 11 {
                        debug i => _31;
                        debug row => _32;
                        let _33: usize;
                        scope 12 {
                            debug random => _33;
                            let _43: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _44: csv::ByteRecord;
                            scope 13 {
                                debug residual => _43;
                                scope 14 {
                                }
                            }
                            scope 15 {
                                debug val => _44;
                                scope 16 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _51 = const false;
        _49 = const false;
        _48 = const false;
        _50 = const false;
        _4 = _2 as usize (IntToInt);
        _51 = const true;
        _3 = Vec::<ByteRecord>::with_capacity(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Reader::<R>::byte_records(_1) -> [return: bb2, unwind: bb53];
    }

    bb2: {
        _5 = <ByteRecordsIter<'_, R> as Iterator>::enumerate(move _6) -> [return: bb3, unwind: bb53];
    }

    bb3: {
        _49 = const true;
        _10 = &mut _5;
        _9 = <Enumerate<ByteRecordsIter<'_, R>> as Iterator>::by_ref(move _10) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        _12 = &_3;
        _11 = Vec::<ByteRecord>::capacity(move _12) -> [return: bb5, unwind: bb51];
    }

    bb5: {
        _8 = <&mut Enumerate<ByteRecordsIter<'_, R>> as Iterator>::take(_9, move _11) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        _7 = <std::iter::Take<&mut Enumerate<ByteRecordsIter<'_, R>>> as IntoIterator>::into_iter(move _8) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _13 = move _7;
        goto -> bb8;
    }

    bb8: {
        _15 = &mut _13;
        _14 = <std::iter::Take<&mut Enumerate<ByteRecordsIter<'_, R>>> as Iterator>::next(_15) -> [return: bb9, unwind: bb51];
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _17 = move (((_14 as Some).0: (usize, std::result::Result<csv::ByteRecord, csv::Error>)).1: std::result::Result<csv::ByteRecord, csv::Error>);
        _19 = &mut _3;
        _20 = <Result<ByteRecord, csv::Error> as Try>::branch(move _17) -> [return: bb13, unwind: bb51];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _24 = thread_rng() -> [return: bb16, unwind: bb51];
    }

    bb13: {
        _21 = discriminant(_20);
        switchInt(move _21) -> [0: bb14, 1: bb15, otherwise: bb11];
    }

    bb14: {
        _23 = move ((_20 as Continue).0: csv::ByteRecord);
        _18 = Vec::<ByteRecord>::push(move _19, move _23) -> [return: bb54, unwind: bb51];
    }

    bb15: {
        _22 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Vec<ByteRecord>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _22) -> [return: bb55, unwind: bb51];
    }

    bb16: {
        _49 = const false;
        _26 = move _5;
        _25 = <Enumerate<ByteRecordsIter<'_, R>> as IntoIterator>::into_iter(move _26) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _27 = move _25;
        goto -> bb18;
    }

    bb18: {
        _29 = &mut _27;
        _28 = <Enumerate<ByteRecordsIter<'_, R>> as Iterator>::next(_29) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb21, 1: bb20, otherwise: bb11];
    }

    bb20: {
        _31 = (((_28 as Some).0: (usize, std::result::Result<csv::ByteRecord, csv::Error>)).0: usize);
        _48 = const true;
        _32 = move (((_28 as Some).0: (usize, std::result::Result<csv::ByteRecord, csv::Error>)).1: std::result::Result<csv::ByteRecord, csv::Error>);
        _34 = &mut _24;
        _36 = CheckedAdd(_31, const 1_usize);
        assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", _31, const 1_usize) -> [success: bb22, unwind: bb49];
    }

    bb21: {
        drop(_27) -> [return: bb34, unwind: bb41];
    }

    bb22: {
        _35 = move (_36.0: usize);
        _33 = <ThreadRng as Rng>::gen_range::<usize>(move _34, const 0_usize, move _35) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        _38 = _2 as usize (IntToInt);
        _37 = Lt(_33, move _38);
        switchInt(move _37) -> [0: bb32, otherwise: bb24];
    }

    bb24: {
        _48 = const false;
        _41 = move _32;
        _40 = <Result<ByteRecord, csv::Error> as Try>::branch(move _41) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb26, 1: bb27, otherwise: bb11];
    }

    bb26: {
        _44 = move ((_40 as Continue).0: csv::ByteRecord);
        _50 = const true;
        _39 = move _44;
        _46 = &mut _3;
        _45 = <Vec<ByteRecord> as IndexMut<usize>>::index_mut(move _46, _33) -> [return: bb29, unwind: bb47];
    }

    bb27: {
        _43 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Vec<ByteRecord>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _43) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        _50 = const false;
        _48 = const false;
        drop(_27) -> [return: bb36, unwind: bb41];
    }

    bb29: {
        drop((*_45)) -> [return: bb30, unwind: bb31];
    }

    bb30: {
        _50 = const false;
        (*_45) = move _39;
        _50 = const false;
        goto -> bb32;
    }

    bb31 (cleanup): {
        _50 = const false;
        (*_45) = move _39;
        goto -> bb47;
    }

    bb32: {
        switchInt(_48) -> [0: bb33, otherwise: bb43];
    }

    bb33: {
        _48 = const false;
        goto -> bb18;
    }

    bb34: {
        _51 = const false;
        _47 = move _3;
        _0 = Result::<Vec<ByteRecord>, CliError>::Ok(move _47);
        drop(_24) -> [return: bb35, unwind: bb51];
    }

    bb35: {
        _49 = const false;
        _51 = const false;
        goto -> bb39;
    }

    bb36: {
        drop(_24) -> [return: bb45, unwind: bb51];
    }

    bb37: {
        _49 = const false;
        drop(_3) -> [return: bb38, unwind continue];
    }

    bb38: {
        _51 = const false;
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_27) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_24) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        drop(_32) -> [return: bb33, unwind: bb40];
    }

    bb44: {
        drop(_5) -> [return: bb37, unwind: bb53];
    }

    bb45: {
        switchInt(_49) -> [0: bb37, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_39) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_50) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_32) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_48) -> [0: bb40, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_5) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_49) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_3) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_51) -> [0: bb42, otherwise: bb52];
    }

    bb54: {
        goto -> bb8;
    }

    bb55: {
        goto -> bb45;
    }
}

fn do_random_access(_1: u64, _2: u64) -> bool {
    debug sample_size => _1;
    debug total => _2;
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: bool;

    bb0: {
        _4 = Eq(const 10_u64, const 0_u64);
        assert(!move _4, "attempt to divide `{}` by zero", _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = Div(_2, const 10_u64);
        _0 = Le(_1, move _3);
        return;
    }
}

static search::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nFilters CSV data by whether the given regex matches a row.\n\nThe regex is applied to each field in each row, and if any field matches,\nthen the row is written to the output. The columns to search can be limited\nwith the '--select' flag (but the full row is still written to the output if\nthere is a match).\n\nUsage:\n    xsv search [options] <regex> [<input>]\n    xsv search --help\n\nsearch options:\n    -i, --ignore-case      Case insensitive search. This is equivalent to\n                           prefixing the regex with '(?i)'.\n    -s, --select <arg>     Select the columns to search. See 'xsv select -h'\n                           for the full syntax.\n    -v, --invert-match     Select only rows that did not match\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. (i.e., They are not searched, analyzed,\n                           sliced, etc.)\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const search::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize(_1: __D) -> Result<search::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::search::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<search::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::expecting(_1: &search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_u64(_1: search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E> {
    debug self => const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _4: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _5: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _6: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _7: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _8: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _9: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _10: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _11: __E;
    let mut _12: serde::de::Unexpected<'_>;
    let mut _13: &dyn serde::de::Expected;
    let mut _14: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, otherwise: bb1];
    }

    bb1: {
        _12 = Unexpected::<'_>::Unsigned(_2);
        _14 = const _;
        _13 = _14 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <__E as serde::de::Error>::invalid_value(move _12, move _13) -> [return: bb10, unwind continue];
    }

    bb2: {
        _3 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field0;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb11;
    }

    bb3: {
        _4 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field1;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb11;
    }

    bb4: {
        _5 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field2;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb11;
    }

    bb5: {
        _6 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field3;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb6: {
        _7 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field4;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb7: {
        _8 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field5;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb8: {
        _9 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field6;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb11;
    }

    bb9: {
        _10 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field7;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb11;
    }

    bb10: {
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Err(move _11);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

promoted[0] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 8";
        _0 = &_1;
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_str(_1: search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E> {
    debug self => const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _12: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _13: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _14: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _15: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _16: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _17: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _18: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _19: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;

    bb0: {
        _10 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb24, unwind continue];
    }

    bb1: {
        _11 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field0;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb25;
    }

    bb2: {
        _9 = <str as PartialEq>::eq(_2, const "arg_regex") -> [return: bb23, unwind continue];
    }

    bb3: {
        _12 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field1;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb25;
    }

    bb4: {
        _8 = <str as PartialEq>::eq(_2, const "flag_select") -> [return: bb22, unwind continue];
    }

    bb5: {
        _13 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field2;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb25;
    }

    bb6: {
        _7 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb21, unwind continue];
    }

    bb7: {
        _14 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field3;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb25;
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb20, unwind continue];
    }

    bb9: {
        _15 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field4;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb25;
    }

    bb10: {
        _5 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb19, unwind continue];
    }

    bb11: {
        _16 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field5;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb25;
    }

    bb12: {
        _4 = <str as PartialEq>::eq(_2, const "flag_invert_match") -> [return: bb18, unwind continue];
    }

    bb13: {
        _17 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field6;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb25;
    }

    bb14: {
        _3 = <str as PartialEq>::eq(_2, const "flag_ignore_case") -> [return: bb17, unwind continue];
    }

    bb15: {
        _18 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field7;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb25;
    }

    bb16: {
        _19 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__ignore;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb25;
    }

    bb17: {
        switchInt(move _3) -> [0: bb16, otherwise: bb15];
    }

    bb18: {
        switchInt(move _4) -> [0: bb14, otherwise: bb13];
    }

    bb19: {
        switchInt(move _5) -> [0: bb12, otherwise: bb11];
    }

    bb20: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb21: {
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb22: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb23: {
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb24: {
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb25: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_bytes(_1: search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E> {
    debug self => const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _22: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _23: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _24: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _25: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _26: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _27: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _28: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
    let mut _29: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, 114: bb11, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb98, otherwise: bb10];
    }

    bb10: {
        _29 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__ignore;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb106;
    }

    bb11: {
        switchInt((*_2)[5 of 9]) -> [101: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[6 of 9]) -> [103: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[7 of 9]) -> [101: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[8 of 9]) -> [120: bb99, otherwise: bb10];
    }

    bb15: {
        _15 = Len((*_2));
        _16 = const 11_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb32, otherwise: bb16];
    }

    bb16: {
        switchInt((*_2)[0 of 11]) -> [102: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[1 of 11]) -> [108: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[2 of 11]) -> [97: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[3 of 11]) -> [103: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[4 of 11]) -> [95: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[5 of 11]) -> [115: bb22, 111: bb27, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[6 of 11]) -> [101: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[7 of 11]) -> [108: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[8 of 11]) -> [101: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[9 of 11]) -> [99: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[10 of 11]) -> [116: bb100, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[6 of 11]) -> [117: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[7 of 11]) -> [116: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[8 of 11]) -> [112: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[9 of 11]) -> [117: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[10 of 11]) -> [116: bb101, otherwise: bb10];
    }

    bb32: {
        _12 = Len((*_2));
        _13 = const 15_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb48, otherwise: bb33];
    }

    bb33: {
        switchInt((*_2)[0 of 15]) -> [102: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[1 of 15]) -> [108: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[2 of 15]) -> [97: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[3 of 15]) -> [103: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[4 of 15]) -> [95: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[5 of 15]) -> [110: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[6 of 15]) -> [111: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[7 of 15]) -> [95: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[8 of 15]) -> [104: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[9 of 15]) -> [101: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[10 of 15]) -> [97: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[11 of 15]) -> [100: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[12 of 15]) -> [101: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[13 of 15]) -> [114: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[14 of 15]) -> [115: bb102, otherwise: bb10];
    }

    bb48: {
        _9 = Len((*_2));
        _10 = const 14_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb63, otherwise: bb49];
    }

    bb49: {
        switchInt((*_2)[0 of 14]) -> [102: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[1 of 14]) -> [108: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[2 of 14]) -> [97: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[3 of 14]) -> [103: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[4 of 14]) -> [95: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[5 of 14]) -> [100: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[6 of 14]) -> [101: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[7 of 14]) -> [108: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[8 of 14]) -> [105: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[9 of 14]) -> [109: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[10 of 14]) -> [105: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[11 of 14]) -> [116: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[12 of 14]) -> [101: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[13 of 14]) -> [114: bb103, otherwise: bb10];
    }

    bb63: {
        _6 = Len((*_2));
        _7 = const 17_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb81, otherwise: bb64];
    }

    bb64: {
        switchInt((*_2)[0 of 17]) -> [102: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[1 of 17]) -> [108: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[2 of 17]) -> [97: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[3 of 17]) -> [103: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[4 of 17]) -> [95: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[5 of 17]) -> [105: bb70, otherwise: bb10];
    }

    bb70: {
        switchInt((*_2)[6 of 17]) -> [110: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[7 of 17]) -> [118: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[8 of 17]) -> [101: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[9 of 17]) -> [114: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[10 of 17]) -> [116: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[11 of 17]) -> [95: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[12 of 17]) -> [109: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[13 of 17]) -> [97: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[14 of 17]) -> [116: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[15 of 17]) -> [99: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[16 of 17]) -> [104: bb104, otherwise: bb10];
    }

    bb81: {
        _3 = Len((*_2));
        _4 = const 16_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb82];
    }

    bb82: {
        switchInt((*_2)[0 of 16]) -> [102: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[1 of 16]) -> [108: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[2 of 16]) -> [97: bb85, otherwise: bb10];
    }

    bb85: {
        switchInt((*_2)[3 of 16]) -> [103: bb86, otherwise: bb10];
    }

    bb86: {
        switchInt((*_2)[4 of 16]) -> [95: bb87, otherwise: bb10];
    }

    bb87: {
        switchInt((*_2)[5 of 16]) -> [105: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[6 of 16]) -> [103: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[7 of 16]) -> [110: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[8 of 16]) -> [111: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[9 of 16]) -> [114: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[10 of 16]) -> [101: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[11 of 16]) -> [95: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[12 of 16]) -> [99: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[13 of 16]) -> [97: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[14 of 16]) -> [115: bb97, otherwise: bb10];
    }

    bb97: {
        switchInt((*_2)[15 of 16]) -> [101: bb105, otherwise: bb10];
    }

    bb98: {
        _21 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field0;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb106;
    }

    bb99: {
        _22 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field1;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb106;
    }

    bb100: {
        _23 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field2;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb106;
    }

    bb101: {
        _24 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field3;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb106;
    }

    bb102: {
        _25 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field4;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb106;
    }

    bb103: {
        _26 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field5;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb106;
    }

    bb104: {
        _27 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field6;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb106;
    }

    bb105: {
        _28 = search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field::__field7;
        _0 = Result::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb106;
    }

    bb106: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize(_1: __D) -> Result<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor>(move _1, const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::expecting(_1: &search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq(_1: search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<search::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<search::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::search::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _24: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: isize;
    let mut _31: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _32: &dyn serde::de::Expected;
    let mut _34: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _35: &mut __A;
    let mut _36: isize;
    let mut _39: isize;
    let mut _41: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _42: &dyn serde::de::Expected;
    let mut _43: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _44: &mut __A;
    let mut _45: isize;
    let mut _48: isize;
    let mut _50: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _51: &dyn serde::de::Expected;
    let mut _52: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _53: &mut __A;
    let mut _54: isize;
    let mut _57: isize;
    let mut _59: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _60: &dyn serde::de::Expected;
    let mut _61: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _69: &dyn serde::de::Expected;
    let mut _70: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _71: &mut __A;
    let mut _72: isize;
    let mut _75: isize;
    let mut _77: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _78: &dyn serde::de::Expected;
    let mut _79: cmd::search::Args;
    let mut _80: std::option::Option<std::string::String>;
    let mut _81: std::string::String;
    let mut _82: select::SelectColumns;
    let mut _83: std::option::Option<std::string::String>;
    let mut _84: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::string::String;
        let _17: std::option::Option<std::string::String>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::string::String;
        let mut _85: &&str;
        scope 5 {
            debug __field1 => _13;
            let _23: select::SelectColumns;
            let _27: std::option::Option<select::SelectColumns>;
            let _28: <__A as serde::de::SeqAccess<'_>>::Error;
            let _30: select::SelectColumns;
            let mut _86: &&str;
            scope 9 {
                debug __field2 => _23;
                let _33: std::option::Option<std::string::String>;
                let _37: std::option::Option<std::option::Option<std::string::String>>;
                let _38: <__A as serde::de::SeqAccess<'_>>::Error;
                let _40: std::option::Option<std::string::String>;
                let mut _87: &&str;
                scope 13 {
                    debug __field3 => _33;
                    let _46: std::option::Option<bool>;
                    let _47: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _49: bool;
                    let mut _88: &&str;
                    scope 17 {
                        debug __field4 => _49;
                        let _55: std::option::Option<std::option::Option<config::Delimiter>>;
                        let _56: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _58: std::option::Option<config::Delimiter>;
                        let mut _89: &&str;
                        scope 21 {
                            debug __field5 => _58;
                            let _64: std::option::Option<bool>;
                            let _65: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _67: bool;
                            let mut _90: &&str;
                            scope 25 {
                                debug __field6 => _67;
                                let _73: std::option::Option<bool>;
                                let _74: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _76: bool;
                                let mut _91: &&str;
                                scope 29 {
                                    debug __field7 => _76;
                                }
                                scope 30 {
                                    debug __val => _73;
                                }
                                scope 31 {
                                    debug __err => _74;
                                }
                                scope 32 {
                                    debug __value => _76;
                                }
                            }
                            scope 26 {
                                debug __val => _64;
                            }
                            scope 27 {
                                debug __err => _65;
                            }
                            scope 28 {
                                debug __value => _67;
                            }
                        }
                        scope 22 {
                            debug __val => _55;
                        }
                        scope 23 {
                            debug __err => _56;
                        }
                        scope 24 {
                            debug __value => _58;
                        }
                    }
                    scope 18 {
                        debug __val => _46;
                    }
                    scope 19 {
                        debug __err => _47;
                    }
                    scope 20 {
                        debug __value => _49;
                    }
                }
                scope 14 {
                    debug __val => _37;
                }
                scope 15 {
                    debug __err => _38;
                }
                scope 16 {
                    debug __value => _40;
                }
            }
            scope 10 {
                debug __val => _27;
            }
            scope 11 {
                debug __err => _28;
            }
            scope 12 {
                debug __value => _30;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb60];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb54;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _84 = const _;
        _12 = _84 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb60];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb8, unwind: bb59];
    }

    bb7: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb54;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb53;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _85 = const _;
        _22 = _85 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb59];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _25 = &mut _2;
        _24 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_25) -> [return: bb14, unwind: bb58];
    }

    bb13: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb53;
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb52;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<select::SelectColumns>);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _86 = const _;
        _32 = _86 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _31 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _32) -> [return: bb19, unwind: bb58];
    }

    bb18: {
        _30 = move ((_27 as Some).0: select::SelectColumns);
        _23 = move _30;
        _35 = &mut _2;
        _34 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_35) -> [return: bb20, unwind: bb57];
    }

    bb19: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _31);
        goto -> bb52;
    }

    bb20: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _38 = move ((_34 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb51;
    }

    bb22: {
        _37 = move ((_34 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _87 = const _;
        _42 = _87 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _41 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _42) -> [return: bb25, unwind: bb57];
    }

    bb24: {
        _40 = move ((_37 as Some).0: std::option::Option<std::string::String>);
        _33 = move _40;
        _44 = &mut _2;
        _43 = <__A as SeqAccess<'_>>::next_element::<bool>(_44) -> [return: bb26, unwind: bb56];
    }

    bb25: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _41);
        goto -> bb51;
    }

    bb26: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _47 = move ((_43 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _47);
        goto -> bb50;
    }

    bb28: {
        _46 = ((_43 as Ok).0: std::option::Option<bool>);
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _88 = const _;
        _51 = _88 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _50 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _51) -> [return: bb31, unwind: bb56];
    }

    bb30: {
        _49 = ((_46 as Some).0: bool);
        _53 = &mut _2;
        _52 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_53) -> [return: bb32, unwind: bb56];
    }

    bb31: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _50);
        goto -> bb50;
    }

    bb32: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _56 = move ((_52 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _56);
        goto -> bb50;
    }

    bb34: {
        _55 = ((_52 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _89 = const _;
        _60 = _89 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _59 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _60) -> [return: bb37, unwind: bb56];
    }

    bb36: {
        _58 = ((_55 as Some).0: std::option::Option<config::Delimiter>);
        _62 = &mut _2;
        _61 = <__A as SeqAccess<'_>>::next_element::<bool>(_62) -> [return: bb38, unwind: bb56];
    }

    bb37: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _59);
        goto -> bb50;
    }

    bb38: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _65 = move ((_61 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _65);
        goto -> bb50;
    }

    bb40: {
        _64 = ((_61 as Ok).0: std::option::Option<bool>);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _90 = const _;
        _69 = _90 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _68 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _69) -> [return: bb43, unwind: bb56];
    }

    bb42: {
        _67 = ((_64 as Some).0: bool);
        _71 = &mut _2;
        _70 = <__A as SeqAccess<'_>>::next_element::<bool>(_71) -> [return: bb44, unwind: bb56];
    }

    bb43: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _68);
        goto -> bb50;
    }

    bb44: {
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _74 = move ((_70 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _74);
        goto -> bb50;
    }

    bb46: {
        _73 = ((_70 as Ok).0: std::option::Option<bool>);
        _75 = discriminant(_73);
        switchInt(move _75) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _91 = const _;
        _78 = _91 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _77 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _78) -> [return: bb49, unwind: bb56];
    }

    bb48: {
        _76 = ((_73 as Some).0: bool);
        _80 = move _3;
        _81 = move _13;
        _82 = move _23;
        _83 = move _33;
        _79 = search::Args { arg_input: move _80, arg_regex: move _81, flag_select: move _82, flag_output: move _83, flag_no_headers: _49, flag_delimiter: _58, flag_invert_match: _67, flag_ignore_case: _76 };
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _79);
        drop(_2) -> [return: bb55, unwind continue];
    }

    bb49: {
        _0 = Result::<search::Args, <__A as SeqAccess<'_>>::Error>::Err(move _77);
        goto -> bb50;
    }

    bb50: {
        drop(_33) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        drop(_23) -> [return: bb52, unwind: bb58];
    }

    bb52: {
        drop(_13) -> [return: bb53, unwind: bb59];
    }

    bb53: {
        drop(_3) -> [return: bb54, unwind: bb60];
    }

    bb54: {
        drop(_2) -> [return: bb55, unwind continue];
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_33) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_23) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_13) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_3) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_2) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }
}

promoted[0] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

fn search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::<impl at src/cmd/search.rs:38:10: 38:21>::visit_map(_1: search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<search::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<search::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::search::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _11: std::result::Result<std::option::Option<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _12: &mut __A;
    let mut _13: isize;
    let mut _16: isize;
    let mut _18: isize;
    let mut _19: bool;
    let _20: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _21: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _22: std::option::Option<std::option::Option<std::string::String>>;
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: bool;
    let _29: &std::option::Option<std::string::String>;
    let mut _30: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _31: std::option::Option<std::string::String>;
    let mut _32: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: bool;
    let _38: &std::option::Option<select::SelectColumns>;
    let mut _39: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _40: std::option::Option<select::SelectColumns>;
    let mut _41: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: bool;
    let _47: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _48: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _49: std::option::Option<std::option::Option<std::string::String>>;
    let mut _50: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: bool;
    let _56: &std::option::Option<bool>;
    let mut _57: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _58: std::option::Option<bool>;
    let mut _59: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: bool;
    let _65: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _66: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _67: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _68: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: bool;
    let _74: &std::option::Option<bool>;
    let mut _75: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _76: std::option::Option<bool>;
    let mut _77: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _78: &mut __A;
    let mut _79: isize;
    let mut _82: bool;
    let _83: &std::option::Option<bool>;
    let mut _84: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _85: std::option::Option<bool>;
    let mut _86: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _87: &mut __A;
    let mut _88: isize;
    let mut _91: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _92: &mut __A;
    let mut _93: isize;
    let mut _96: isize;
    let mut _98: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _99: isize;
    let mut _103: isize;
    let mut _105: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _106: isize;
    let mut _110: isize;
    let mut _112: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _113: isize;
    let mut _117: isize;
    let mut _119: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _120: isize;
    let mut _124: isize;
    let mut _126: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _127: isize;
    let mut _131: isize;
    let mut _133: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _134: isize;
    let mut _138: isize;
    let mut _140: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _141: isize;
    let mut _145: isize;
    let mut _147: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _148: isize;
    let mut _151: cmd::search::Args;
    let mut _152: std::option::Option<std::string::String>;
    let mut _153: std::string::String;
    let mut _154: select::SelectColumns;
    let mut _155: std::option::Option<std::string::String>;
    let mut _156: bool;
    let mut _157: std::option::Option<config::Delimiter>;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<select::SelectColumns>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<std::string::String>>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<bool>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<config::Delimiter>>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<bool>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<bool>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let _95: std::option::Option<std::string::String>;
                                    let _97: std::option::Option<std::string::String>;
                                    let _100: std::option::Option<std::string::String>;
                                    let _101: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __key => _17;
                                        let _14: std::option::Option<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field>;
                                        let _15: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _17: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field;
                                        let _26: std::option::Option<std::string::String>;
                                        let _27: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _35: std::string::String;
                                        let _36: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _44: select::SelectColumns;
                                        let _45: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _53: std::option::Option<std::string::String>;
                                        let _54: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _62: bool;
                                        let _63: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _71: std::option::Option<config::Delimiter>;
                                        let _72: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _80: bool;
                                        let _81: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _89: bool;
                                        let _90: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _94: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __val => _14;
                                        }
                                        scope 11 {
                                            debug __err => _15;
                                        }
                                        scope 12 {
                                            debug __val => _26;
                                        }
                                        scope 13 {
                                            debug __err => _27;
                                        }
                                        scope 14 {
                                            debug __val => _35;
                                        }
                                        scope 15 {
                                            debug __err => _36;
                                        }
                                        scope 16 {
                                            debug __val => _44;
                                        }
                                        scope 17 {
                                            debug __err => _45;
                                        }
                                        scope 18 {
                                            debug __val => _53;
                                        }
                                        scope 19 {
                                            debug __err => _54;
                                        }
                                        scope 20 {
                                            debug __val => _62;
                                        }
                                        scope 21 {
                                            debug __err => _63;
                                        }
                                        scope 22 {
                                            debug __val => _71;
                                        }
                                        scope 23 {
                                            debug __err => _72;
                                        }
                                        scope 24 {
                                            debug __val => _80;
                                        }
                                        scope 25 {
                                            debug __err => _81;
                                        }
                                        scope 26 {
                                            debug __val => _89;
                                        }
                                        scope 27 {
                                            debug __err => _90;
                                        }
                                        scope 28 {
                                        }
                                        scope 29 {
                                            debug __val => const IgnoredAny;
                                        }
                                        scope 30 {
                                            debug __err => _94;
                                        }
                                    }
                                    scope 31 {
                                        debug __field0 => _95;
                                        let _102: std::string::String;
                                        let _104: std::string::String;
                                        let _107: std::string::String;
                                        let _108: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 35 {
                                            debug __field1 => _102;
                                            let _109: select::SelectColumns;
                                            let _111: select::SelectColumns;
                                            let _114: select::SelectColumns;
                                            let _115: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 39 {
                                                debug __field2 => _109;
                                                let _116: std::option::Option<std::string::String>;
                                                let _118: std::option::Option<std::string::String>;
                                                let _121: std::option::Option<std::string::String>;
                                                let _122: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 43 {
                                                    debug __field3 => _116;
                                                    let _123: bool;
                                                    let _125: bool;
                                                    let _128: bool;
                                                    let _129: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 47 {
                                                        debug __field4 => _123;
                                                        let _130: std::option::Option<config::Delimiter>;
                                                        let _132: std::option::Option<config::Delimiter>;
                                                        let _135: std::option::Option<config::Delimiter>;
                                                        let _136: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 51 {
                                                            debug __field5 => _130;
                                                            let _137: bool;
                                                            let _139: bool;
                                                            let _142: bool;
                                                            let _143: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 55 {
                                                                debug __field6 => _137;
                                                                let _144: bool;
                                                                let _146: bool;
                                                                let _149: bool;
                                                                let _150: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 59 {
                                                                    debug __field7 => _144;
                                                                }
                                                                scope 60 {
                                                                    debug __field7 => _146;
                                                                }
                                                                scope 61 {
                                                                    debug __val => _149;
                                                                }
                                                                scope 62 {
                                                                    debug __err => _150;
                                                                }
                                                            }
                                                            scope 56 {
                                                                debug __field6 => _139;
                                                            }
                                                            scope 57 {
                                                                debug __val => _142;
                                                            }
                                                            scope 58 {
                                                                debug __err => _143;
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug __field5 => _132;
                                                        }
                                                        scope 53 {
                                                            debug __val => _135;
                                                        }
                                                        scope 54 {
                                                            debug __err => _136;
                                                        }
                                                    }
                                                    scope 48 {
                                                        debug __field4 => _125;
                                                    }
                                                    scope 49 {
                                                        debug __val => _128;
                                                    }
                                                    scope 50 {
                                                        debug __err => _129;
                                                    }
                                                }
                                                scope 44 {
                                                    debug __field3 => _118;
                                                }
                                                scope 45 {
                                                    debug __val => _121;
                                                }
                                                scope 46 {
                                                    debug __err => _122;
                                                }
                                            }
                                            scope 40 {
                                                debug __field2 => _111;
                                            }
                                            scope 41 {
                                                debug __val => _114;
                                            }
                                            scope 42 {
                                                debug __err => _115;
                                            }
                                        }
                                        scope 36 {
                                            debug __field1 => _104;
                                        }
                                        scope 37 {
                                            debug __val => _107;
                                        }
                                        scope 38 {
                                            debug __err => _108;
                                        }
                                    }
                                    scope 32 {
                                        debug __field0 => _97;
                                    }
                                    scope 33 {
                                        debug __val => _100;
                                    }
                                    scope 34 {
                                        debug __err => _101;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _163 = const false;
        _162 = const false;
        _161 = const false;
        _160 = const false;
        _163 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _162 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _161 = const true;
        _5 = std::option::Option::<SelectColumns>::None;
        _160 = const true;
        _6 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _7 = std::option::Option::<bool>::None;
        _8 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _9 = std::option::Option::<bool>::None;
        _10 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _12 = &mut _2;
        _11 = <__A as MapAccess<'_>>::next_key::<search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for search::Args>::deserialize::__Field>(_12) -> [return: bb2, unwind: bb160];
    }

    bb2: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _15 = move ((_11 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb135;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _14 = move ((_11 as Ok).0: std::option::Option<cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field>);
        _16 = discriminant(_14);
        switchInt(move _16) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _96 = discriminant(_3);
        switchInt(move _96) -> [0: bb83, 1: bb84, otherwise: bb4];
    }

    bb7: {
        _17 = move ((_14 as Some).0: cmd::search::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::search::Args>::deserialize::__Field);
        _18 = discriminant(_17);
        switchInt(move _18) -> [0: bb9, 1: bb19, 2: bb29, 3: bb39, 4: bb49, 5: bb57, 6: bb65, 7: bb73, otherwise: bb8];
    }

    bb8: {
        _92 = &mut _2;
        _91 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_92) -> [return: bb81, unwind: bb160];
    }

    bb9: {
        _20 = &_3;
        _19 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_20) -> [return: bb10, unwind: bb160];
    }

    bb10: {
        switchInt(move _19) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _21 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb160];
    }

    bb12: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb135;
    }

    bb13: {
        _24 = &mut _2;
        _23 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_24) -> [return: bb14, unwind: bb160];
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _27);
        goto -> bb135;
    }

    bb16: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>);
        _22 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _26);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _163 = const true;
        _3 = move _22;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _163 = const true;
        _3 = move _22;
        goto -> bb160;
    }

    bb19: {
        _29 = &_4;
        _28 = std::option::Option::<std::string::String>::is_some(_29) -> [return: bb20, unwind: bb160];
    }

    bb20: {
        switchInt(move _28) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _30 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_regex") -> [return: bb22, unwind: bb160];
    }

    bb22: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb135;
    }

    bb23: {
        _33 = &mut _2;
        _32 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_33) -> [return: bb24, unwind: bb160];
    }

    bb24: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _36 = move ((_32 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb135;
    }

    bb26: {
        _35 = move ((_32 as Ok).0: std::string::String);
        _31 = std::option::Option::<std::string::String>::Some(move _35);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _162 = const true;
        _4 = move _31;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _162 = const true;
        _4 = move _31;
        goto -> bb160;
    }

    bb29: {
        _38 = &_5;
        _37 = std::option::Option::<SelectColumns>::is_some(_38) -> [return: bb30, unwind: bb160];
    }

    bb30: {
        switchInt(move _37) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _39 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_select") -> [return: bb32, unwind: bb160];
    }

    bb32: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _39);
        goto -> bb135;
    }

    bb33: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_42) -> [return: bb34, unwind: bb160];
    }

    bb34: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _45 = move ((_41 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _45);
        goto -> bb135;
    }

    bb36: {
        _44 = move ((_41 as Ok).0: select::SelectColumns);
        _40 = std::option::Option::<SelectColumns>::Some(move _44);
        drop(_5) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _161 = const true;
        _5 = move _40;
        goto -> bb1;
    }

    bb38 (cleanup): {
        _161 = const true;
        _5 = move _40;
        goto -> bb160;
    }

    bb39: {
        _47 = &_6;
        _46 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_47) -> [return: bb40, unwind: bb160];
    }

    bb40: {
        switchInt(move _46) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _48 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb42, unwind: bb160];
    }

    bb42: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _48);
        goto -> bb135;
    }

    bb43: {
        _51 = &mut _2;
        _50 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_51) -> [return: bb44, unwind: bb160];
    }

    bb44: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb46, 1: bb45, otherwise: bb4];
    }

    bb45: {
        _54 = move ((_50 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb135;
    }

    bb46: {
        _53 = move ((_50 as Ok).0: std::option::Option<std::string::String>);
        _49 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _53);
        drop(_6) -> [return: bb47, unwind: bb48];
    }

    bb47: {
        _160 = const true;
        _6 = move _49;
        goto -> bb1;
    }

    bb48 (cleanup): {
        _160 = const true;
        _6 = move _49;
        goto -> bb160;
    }

    bb49: {
        _56 = &_7;
        _55 = std::option::Option::<bool>::is_some(_56) -> [return: bb50, unwind: bb160];
    }

    bb50: {
        switchInt(move _55) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        _57 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb52, unwind: bb160];
    }

    bb52: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _57);
        goto -> bb135;
    }

    bb53: {
        _60 = &mut _2;
        _59 = <__A as MapAccess<'_>>::next_value::<bool>(_60) -> [return: bb54, unwind: bb160];
    }

    bb54: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _63 = move ((_59 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _63);
        goto -> bb135;
    }

    bb56: {
        _62 = ((_59 as Ok).0: bool);
        _58 = std::option::Option::<bool>::Some(_62);
        _7 = move _58;
        goto -> bb1;
    }

    bb57: {
        _65 = &_8;
        _64 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_65) -> [return: bb58, unwind: bb160];
    }

    bb58: {
        switchInt(move _64) -> [0: bb61, otherwise: bb59];
    }

    bb59: {
        _66 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb60, unwind: bb160];
    }

    bb60: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _66);
        goto -> bb135;
    }

    bb61: {
        _69 = &mut _2;
        _68 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_69) -> [return: bb62, unwind: bb160];
    }

    bb62: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb64, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _72 = move ((_68 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _72);
        goto -> bb135;
    }

    bb64: {
        _71 = ((_68 as Ok).0: std::option::Option<config::Delimiter>);
        _67 = std::option::Option::<std::option::Option<Delimiter>>::Some(_71);
        _8 = move _67;
        goto -> bb1;
    }

    bb65: {
        _74 = &_9;
        _73 = std::option::Option::<bool>::is_some(_74) -> [return: bb66, unwind: bb160];
    }

    bb66: {
        switchInt(move _73) -> [0: bb69, otherwise: bb67];
    }

    bb67: {
        _75 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_invert_match") -> [return: bb68, unwind: bb160];
    }

    bb68: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb135;
    }

    bb69: {
        _78 = &mut _2;
        _77 = <__A as MapAccess<'_>>::next_value::<bool>(_78) -> [return: bb70, unwind: bb160];
    }

    bb70: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb72, 1: bb71, otherwise: bb4];
    }

    bb71: {
        _81 = move ((_77 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _81);
        goto -> bb135;
    }

    bb72: {
        _80 = ((_77 as Ok).0: bool);
        _76 = std::option::Option::<bool>::Some(_80);
        _9 = move _76;
        goto -> bb1;
    }

    bb73: {
        _83 = &_10;
        _82 = std::option::Option::<bool>::is_some(_83) -> [return: bb74, unwind: bb160];
    }

    bb74: {
        switchInt(move _82) -> [0: bb77, otherwise: bb75];
    }

    bb75: {
        _84 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_ignore_case") -> [return: bb76, unwind: bb160];
    }

    bb76: {
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb135;
    }

    bb77: {
        _87 = &mut _2;
        _86 = <__A as MapAccess<'_>>::next_value::<bool>(_87) -> [return: bb78, unwind: bb160];
    }

    bb78: {
        _88 = discriminant(_86);
        switchInt(move _88) -> [0: bb80, 1: bb79, otherwise: bb4];
    }

    bb79: {
        _90 = move ((_86 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _90);
        goto -> bb135;
    }

    bb80: {
        _89 = ((_86 as Ok).0: bool);
        _85 = std::option::Option::<bool>::Some(_89);
        _10 = move _85;
        goto -> bb1;
    }

    bb81: {
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb1, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _94 = move ((_91 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb135;
    }

    bb83: {
        _98 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb85, unwind: bb160];
    }

    bb84: {
        _163 = const false;
        _97 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _95 = move _97;
        goto -> bb88;
    }

    bb85: {
        _99 = discriminant(_98);
        switchInt(move _99) -> [0: bb87, 1: bb86, otherwise: bb4];
    }

    bb86: {
        _101 = move ((_98 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _101);
        goto -> bb135;
    }

    bb87: {
        _100 = move ((_98 as Ok).0: std::option::Option<std::string::String>);
        _95 = move _100;
        goto -> bb88;
    }

    bb88: {
        _103 = discriminant(_4);
        switchInt(move _103) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        _105 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_regex") -> [return: bb91, unwind: bb140];
    }

    bb90: {
        _162 = const false;
        _104 = move ((_4 as Some).0: std::string::String);
        _102 = move _104;
        goto -> bb94;
    }

    bb91: {
        _106 = discriminant(_105);
        switchInt(move _106) -> [0: bb93, 1: bb92, otherwise: bb4];
    }

    bb92: {
        _108 = move ((_105 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _108);
        goto -> bb134;
    }

    bb93: {
        _107 = move ((_105 as Ok).0: std::string::String);
        _102 = move _107;
        goto -> bb94;
    }

    bb94: {
        _110 = discriminant(_5);
        switchInt(move _110) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        _112 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "flag_select") -> [return: bb97, unwind: bb139];
    }

    bb96: {
        _161 = const false;
        _111 = move ((_5 as Some).0: select::SelectColumns);
        _109 = move _111;
        goto -> bb100;
    }

    bb97: {
        _113 = discriminant(_112);
        switchInt(move _113) -> [0: bb99, 1: bb98, otherwise: bb4];
    }

    bb98: {
        _115 = move ((_112 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _115);
        goto -> bb133;
    }

    bb99: {
        _114 = move ((_112 as Ok).0: select::SelectColumns);
        _109 = move _114;
        goto -> bb100;
    }

    bb100: {
        _117 = discriminant(_6);
        switchInt(move _117) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        _119 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb103, unwind: bb138];
    }

    bb102: {
        _160 = const false;
        _118 = move ((_6 as Some).0: std::option::Option<std::string::String>);
        _116 = move _118;
        goto -> bb106;
    }

    bb103: {
        _120 = discriminant(_119);
        switchInt(move _120) -> [0: bb105, 1: bb104, otherwise: bb4];
    }

    bb104: {
        _122 = move ((_119 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _122);
        goto -> bb132;
    }

    bb105: {
        _121 = move ((_119 as Ok).0: std::option::Option<std::string::String>);
        _116 = move _121;
        goto -> bb106;
    }

    bb106: {
        _124 = discriminant(_7);
        switchInt(move _124) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        _126 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb109, unwind: bb137];
    }

    bb108: {
        _125 = ((_7 as Some).0: bool);
        _123 = _125;
        goto -> bb112;
    }

    bb109: {
        _127 = discriminant(_126);
        switchInt(move _127) -> [0: bb111, 1: bb110, otherwise: bb4];
    }

    bb110: {
        _129 = move ((_126 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _129);
        goto -> bb131;
    }

    bb111: {
        _128 = ((_126 as Ok).0: bool);
        _123 = _128;
        goto -> bb112;
    }

    bb112: {
        _131 = discriminant(_8);
        switchInt(move _131) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        _133 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb115, unwind: bb137];
    }

    bb114: {
        _132 = ((_8 as Some).0: std::option::Option<config::Delimiter>);
        _130 = _132;
        goto -> bb118;
    }

    bb115: {
        _134 = discriminant(_133);
        switchInt(move _134) -> [0: bb117, 1: bb116, otherwise: bb4];
    }

    bb116: {
        _136 = move ((_133 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _136);
        goto -> bb131;
    }

    bb117: {
        _135 = ((_133 as Ok).0: std::option::Option<config::Delimiter>);
        _130 = _135;
        goto -> bb118;
    }

    bb118: {
        _138 = discriminant(_9);
        switchInt(move _138) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        _140 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_invert_match") -> [return: bb121, unwind: bb137];
    }

    bb120: {
        _139 = ((_9 as Some).0: bool);
        _137 = _139;
        goto -> bb124;
    }

    bb121: {
        _141 = discriminant(_140);
        switchInt(move _141) -> [0: bb123, 1: bb122, otherwise: bb4];
    }

    bb122: {
        _143 = move ((_140 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _143);
        goto -> bb131;
    }

    bb123: {
        _142 = ((_140 as Ok).0: bool);
        _137 = _142;
        goto -> bb124;
    }

    bb124: {
        _145 = discriminant(_10);
        switchInt(move _145) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        _147 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_ignore_case") -> [return: bb127, unwind: bb137];
    }

    bb126: {
        _146 = ((_10 as Some).0: bool);
        _144 = _146;
        goto -> bb130;
    }

    bb127: {
        _148 = discriminant(_147);
        switchInt(move _148) -> [0: bb129, 1: bb128, otherwise: bb4];
    }

    bb128: {
        _150 = move ((_147 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Err(move _150);
        goto -> bb131;
    }

    bb129: {
        _149 = ((_147 as Ok).0: bool);
        _144 = _149;
        goto -> bb130;
    }

    bb130: {
        _152 = move _95;
        _153 = move _102;
        _154 = move _109;
        _155 = move _116;
        _156 = _123;
        _157 = _130;
        _158 = _137;
        _159 = _144;
        _151 = search::Args { arg_input: move _152, arg_regex: move _153, flag_select: move _154, flag_output: move _155, flag_no_headers: move _156, flag_delimiter: move _157, flag_invert_match: move _158, flag_ignore_case: move _159 };
        _0 = Result::<search::Args, <__A as MapAccess<'_>>::Error>::Ok(move _151);
        _160 = const false;
        _161 = const false;
        _162 = const false;
        _163 = const false;
        drop(_2) -> [return: bb136, unwind continue];
    }

    bb131: {
        drop(_116) -> [return: bb132, unwind: bb138];
    }

    bb132: {
        drop(_109) -> [return: bb133, unwind: bb139];
    }

    bb133: {
        drop(_102) -> [return: bb134, unwind: bb140];
    }

    bb134: {
        drop(_95) -> [return: bb135, unwind: bb160];
    }

    bb135: {
        _164 = discriminant(_6);
        switchInt(move _164) -> [1: bb147, otherwise: bb146];
    }

    bb136: {
        return;
    }

    bb137 (cleanup): {
        drop(_116) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_109) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_102) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_95) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        _169 = discriminant(_5);
        switchInt(move _169) -> [1: bb161, otherwise: bb142];
    }

    bb142 (cleanup): {
        _170 = discriminant(_4);
        switchInt(move _170) -> [1: bb163, otherwise: bb143];
    }

    bb143 (cleanup): {
        _171 = discriminant(_3);
        switchInt(move _171) -> [1: bb165, otherwise: bb144];
    }

    bb144 (cleanup): {
        drop(_2) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        resume;
    }

    bb146: {
        _160 = const false;
        _165 = discriminant(_5);
        switchInt(move _165) -> [1: bb150, otherwise: bb149];
    }

    bb147: {
        switchInt(_160) -> [0: bb146, otherwise: bb148];
    }

    bb148: {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb146, unwind: bb141];
    }

    bb149: {
        _161 = const false;
        _166 = discriminant(_4);
        switchInt(move _166) -> [1: bb153, otherwise: bb152];
    }

    bb150: {
        switchInt(_161) -> [0: bb149, otherwise: bb151];
    }

    bb151: {
        drop(((_5 as Some).0: select::SelectColumns)) -> [return: bb149, unwind: bb142];
    }

    bb152: {
        _162 = const false;
        _167 = discriminant(_3);
        switchInt(move _167) -> [1: bb156, otherwise: bb155];
    }

    bb153: {
        switchInt(_162) -> [0: bb152, otherwise: bb154];
    }

    bb154: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb152, unwind: bb143];
    }

    bb155: {
        _163 = const false;
        drop(_2) -> [return: bb136, unwind continue];
    }

    bb156: {
        switchInt(_163) -> [0: bb155, otherwise: bb157];
    }

    bb157: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb155, unwind: bb144];
    }

    bb158 (cleanup): {
        switchInt(_160) -> [0: bb141, otherwise: bb159];
    }

    bb159 (cleanup): {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        _168 = discriminant(_6);
        switchInt(move _168) -> [1: bb158, otherwise: bb141];
    }

    bb161 (cleanup): {
        switchInt(_161) -> [0: bb142, otherwise: bb162];
    }

    bb162 (cleanup): {
        drop(((_5 as Some).0: select::SelectColumns)) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_162) -> [0: bb143, otherwise: bb164];
    }

    bb164 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        switchInt(_163) -> [0: bb144, otherwise: bb166];
    }

    bb166 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb144, unwind terminate(cleanup)];
    }
}

const search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 8];
    let _2: &[&str; 8];
    let _3: [&str; 8];
    let mut _4: &[&str; 8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in search::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/search.rs:38:10: 38:21>::deserialize::FIELDS: &[&str; 8] = {
    let mut _0: &[&str; 8];
    let mut _1: [&str; 8];

    bb0: {
        _1 = [const "arg_input", const "arg_regex", const "flag_select", const "flag_output", const "flag_no_headers", const "flag_delimiter", const "flag_invert_match", const "flag_ignore_case"];
        _0 = &_1;
        return;
    }
}

fn search::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::search::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::search::Args>;
    let mut _4: std::result::Result<cmd::search::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::search::Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, regex::Error>, regex::bytes::Regex>;
    let mut _11: std::result::Result<regex::bytes::Regex, regex::Error>;
    let mut _12: &regex::bytes::RegexBuilder;
    let _13: &mut regex::bytes::RegexBuilder;
    let mut _14: &mut regex::bytes::RegexBuilder;
    let mut _15: regex::bytes::RegexBuilder;
    let _16: &str;
    let mut _17: &std::string::String;
    let mut _18: bool;
    let mut _19: isize;
    let mut _23: config::Config;
    let mut _24: config::Config;
    let mut _25: config::Config;
    let _26: &std::option::Option<std::string::String>;
    let mut _27: std::option::Option<config::Delimiter>;
    let mut _28: bool;
    let mut _29: select::SelectColumns;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _32: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _33: &config::Config;
    let mut _34: isize;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _39: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _40: &config::Config;
    let _41: config::Config;
    let _42: &std::option::Option<std::string::String>;
    let mut _43: isize;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _48: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _49: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _50: isize;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _55: std::result::Result<select::Selection, std::string::String>;
    let mut _56: &config::Config;
    let _57: &csv::ByteRecord;
    let mut _58: isize;
    let mut _61: bool;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _63: std::result::Result<(), csv::Error>;
    let mut _64: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _65: &csv::ByteRecord;
    let mut _66: isize;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _70: std::result::Result<bool, csv::Error>;
    let mut _71: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _72: &mut csv::ByteRecord;
    let mut _73: isize;
    let mut _77: &mut std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _78: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _79: &select::Selection;
    let _80: &csv::ByteRecord;
    let mut _81: {closure@src/cmd/search.rs:71:45: 71:48};
    let mut _82: &regex::bytes::Regex;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _87: std::result::Result<(), csv::Error>;
    let mut _88: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _89: &csv::ByteRecord;
    let mut _90: isize;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _93: std::result::Result<(), std::io::Error>;
    let mut _94: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _95: isize;
    let mut _97: &str;
    let mut _98: bool;
    scope 1 {
        debug args => _2;
        let _9: regex::bytes::Regex;
        let _20: std::result::Result<std::convert::Infallible, regex::Error>;
        let _21: regex::bytes::Regex;
        scope 6 {
            debug pattern => _9;
            let _22: config::Config;
            scope 11 {
                debug rconfig => _22;
                let mut _30: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _36: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                scope 12 {
                    debug rdr => _30;
                    let mut _37: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _45: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                    scope 17 {
                        debug wtr => _37;
                        let _46: csv::ByteRecord;
                        let _51: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _52: &csv::ByteRecord;
                        scope 22 {
                            debug headers => _46;
                            let _53: select::Selection;
                            let _59: std::result::Result<std::convert::Infallible, std::string::String>;
                            let _60: select::Selection;
                            scope 27 {
                                debug sel => _53;
                                let _67: std::result::Result<std::convert::Infallible, csv::Error>;
                                let mut _68: csv::ByteRecord;
                                scope 32 {
                                    debug residual => _67;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => const ();
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug record => _68;
                                    let _74: std::result::Result<std::convert::Infallible, csv::Error>;
                                    let _75: bool;
                                    let mut _76: bool;
                                    let _96: std::result::Result<std::convert::Infallible, std::io::Error>;
                                    scope 37 {
                                        debug residual => _74;
                                        scope 38 {
                                        }
                                    }
                                    scope 39 {
                                        debug val => _75;
                                        scope 40 {
                                        }
                                    }
                                    scope 41 {
                                        debug m => _76;
                                        let _91: std::result::Result<std::convert::Infallible, csv::Error>;
                                        scope 42 {
                                            debug residual => _91;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => const ();
                                            scope 45 {
                                            }
                                        }
                                    }
                                    scope 46 {
                                        debug residual => _96;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => const ();
                                        scope 49 {
                                        }
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _59;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _60;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _51;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _52;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _44;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _45;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _35;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _36;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _98 = const false;
        _5 = const {alloc23: &&str};
        _97 = deref_copy (*_5);
        _4 = get_args::<search::Args>(_97, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<search::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::search::Args);
        _98 = const true;
        _2 = move _8;
        _17 = &(_2.1: std::string::String);
        _16 = <std::string::String as Deref>::deref(move _17) -> [return: bb6, unwind: bb130];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb84, unwind continue];
    }

    bb6: {
        _15 = regex::bytes::RegexBuilder::new(_16) -> [return: bb7, unwind: bb130];
    }

    bb7: {
        _14 = &mut _15;
        _18 = (_2.7: bool);
        _13 = regex::bytes::RegexBuilder::case_insensitive(move _14, move _18) -> [return: bb8, unwind: bb101];
    }

    bb8: {
        _12 = &(*_13);
        _11 = regex::bytes::RegexBuilder::build(move _12) -> [return: bb9, unwind: bb101];
    }

    bb9: {
        _10 = <Result<regex::bytes::Regex, regex::Error> as Try>::branch(move _11) -> [return: bb10, unwind: bb101];
    }

    bb10: {
        _19 = discriminant(_10);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        _21 = move ((_10 as Continue).0: regex::bytes::Regex);
        _9 = move _21;
        drop(_15) -> [return: bb14, unwind: bb100];
    }

    bb12: {
        _20 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, regex::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, regex::Error>>>::from_residual(move _20) -> [return: bb13, unwind: bb101];
    }

    bb13: {
        drop(_15) -> [return: bb83, unwind: bb130];
    }

    bb14: {
        _26 = &(_2.0: std::option::Option<std::string::String>);
        _25 = Config::new(_26) -> [return: bb15, unwind: bb100];
    }

    bb15: {
        _27 = (_2.5: std::option::Option<config::Delimiter>);
        _24 = Config::delimiter(move _25, move _27) -> [return: bb16, unwind: bb100];
    }

    bb16: {
        _28 = (_2.4: bool);
        _23 = Config::no_headers(move _24, move _28) -> [return: bb17, unwind: bb100];
    }

    bb17: {
        _98 = const false;
        _29 = move (_2.2: select::SelectColumns);
        _22 = Config::select(move _23, move _29) -> [return: bb18, unwind: bb100];
    }

    bb18: {
        _33 = &_22;
        _32 = Config::reader(move _33) -> [return: bb19, unwind: bb99];
    }

    bb19: {
        _31 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _32) -> [return: bb20, unwind: bb99];
    }

    bb20: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _36 = move ((_31 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _30 = move _36;
        _42 = &(_2.3: std::option::Option<std::string::String>);
        _41 = Config::new(_42) -> [return: bb23, unwind: bb98];
    }

    bb22: {
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _35) -> [return: bb131, unwind: bb99];
    }

    bb23: {
        _40 = &_41;
        _39 = Config::writer(move _40) -> [return: bb24, unwind: bb97];
    }

    bb24: {
        _38 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _39) -> [return: bb25, unwind: bb97];
    }

    bb25: {
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _45 = move ((_38 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _37 = move _45;
        drop(_41) -> [return: bb29, unwind: bb96];
    }

    bb27: {
        _44 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _44) -> [return: bb28, unwind: bb97];
    }

    bb28: {
        drop(_41) -> [return: bb80, unwind: bb98];
    }

    bb29: {
        _49 = &mut _30;
        _48 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _49) -> [return: bb30, unwind: bb96];
    }

    bb30: {
        _47 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _48) -> [return: bb31, unwind: bb96];
    }

    bb31: {
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _52 = ((_47 as Continue).0: &csv::ByteRecord);
        _46 = <ByteRecord as Clone>::clone(_52) -> [return: bb34, unwind: bb96];
    }

    bb33: {
        _51 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _51) -> [return: bb132, unwind: bb96];
    }

    bb34: {
        _56 = &_22;
        _57 = &_46;
        _55 = Config::selection(move _56, _57) -> [return: bb35, unwind: bb95];
    }

    bb35: {
        _54 = <Result<Selection, std::string::String> as Try>::branch(move _55) -> [return: bb36, unwind: bb95];
    }

    bb36: {
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _60 = move ((_54 as Continue).0: select::Selection);
        _53 = move _60;
        _61 = (_22.4: bool);
        switchInt(move _61) -> [0: bb39, otherwise: bb43];
    }

    bb38: {
        _59 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _59) -> [return: bb133, unwind: bb95];
    }

    bb39: {
        _64 = &mut _37;
        _65 = &_46;
        _63 = Writer::<Box<dyn std::io::Write>>::write_record::<&ByteRecord, &[u8]>(move _64, move _65) -> [return: bb40, unwind: bb94];
    }

    bb40: {
        _62 = <Result<(), csv::Error> as Try>::branch(move _63) -> [return: bb41, unwind: bb94];
    }

    bb41: {
        _66 = discriminant(_62);
        switchInt(move _66) -> [0: bb43, 1: bb42, otherwise: bb4];
    }

    bb42: {
        _67 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _67) -> [return: bb134, unwind: bb94];
    }

    bb43: {
        _68 = ByteRecord::new() -> [return: bb135, unwind: bb94];
    }

    bb44: {
        _71 = &mut _30;
        _72 = &mut _68;
        _70 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _71, _72) -> [return: bb45, unwind: bb93];
    }

    bb45: {
        _69 = <Result<bool, csv::Error> as Try>::branch(move _70) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        _73 = discriminant(_69);
        switchInt(move _73) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        _75 = ((_69 as Continue).0: bool);
        switchInt(_75) -> [0: bb104, otherwise: bb103];
    }

    bb48: {
        _74 = move ((_69 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _74) -> [return: bb136, unwind: bb93];
    }

    bb49: {
        _77 = &mut _78;
        _82 = &_9;
        _81 = {closure@src/cmd/search.rs:71:45: 71:48} { pattern: move _82 };
        _76 = <Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> as Iterator>::any::<{closure@src/cmd/search.rs:71:45: 71:48}>(move _77, move _81) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        _83 = (_2.6: bool);
        switchInt(move _83) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _84 = _76;
        _76 = Not(move _84);
        goto -> bb52;
    }

    bb52: {
        _85 = _76;
        switchInt(move _85) -> [0: bb44, otherwise: bb53];
    }

    bb53: {
        _88 = &mut _37;
        _89 = &_68;
        _87 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _88, _89) -> [return: bb54, unwind: bb93];
    }

    bb54: {
        _86 = <Result<(), csv::Error> as Try>::branch(move _87) -> [return: bb55, unwind: bb93];
    }

    bb55: {
        _90 = discriminant(_86);
        switchInt(move _90) -> [0: bb44, 1: bb56, otherwise: bb4];
    }

    bb56: {
        _91 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _91) -> [return: bb137, unwind: bb93];
    }

    bb57: {
        _92 = <Result<(), std::io::Error> as Try>::branch(move _93) -> [return: bb58, unwind: bb93];
    }

    bb58: {
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_68) -> [return: bb62, unwind: bb87];
    }

    bb60: {
        _96 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _96) -> [return: bb61, unwind: bb86];
    }

    bb61: {
        drop(_68) -> [return: bb69, unwind: bb87];
    }

    bb62: {
        drop(_53) -> [return: bb63, unwind: bb88];
    }

    bb63: {
        drop(_46) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        drop(_37) -> [return: bb65, unwind: bb90];
    }

    bb65: {
        drop(_30) -> [return: bb66, unwind: bb91];
    }

    bb66: {
        drop(_22) -> [return: bb67, unwind: bb92];
    }

    bb67: {
        drop(_9) -> [return: bb68, unwind: bb125];
    }

    bb68: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb109, unwind: bb107];
    }

    bb69: {
        drop(_53) -> [return: bb70, unwind: bb88];
    }

    bb70: {
        drop(_46) -> [return: bb71, unwind: bb89];
    }

    bb71: {
        drop(_37) -> [return: bb72, unwind: bb90];
    }

    bb72: {
        drop(_30) -> [return: bb73, unwind: bb91];
    }

    bb73: {
        drop(_22) -> [return: bb74, unwind: bb92];
    }

    bb74: {
        drop(_9) -> [return: bb75, unwind: bb125];
    }

    bb75: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb114, unwind: bb112];
    }

    bb76: {
        drop(_68) -> [return: bb77, unwind: bb94];
    }

    bb77: {
        drop(_53) -> [return: bb78, unwind: bb95];
    }

    bb78: {
        drop(_46) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        drop(_37) -> [return: bb80, unwind: bb98];
    }

    bb80: {
        drop(_30) -> [return: bb81, unwind: bb99];
    }

    bb81: {
        drop(_22) -> [return: bb82, unwind: bb100];
    }

    bb82: {
        drop(_9) -> [return: bb83, unwind: bb130];
    }

    bb83: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb122, unwind: bb118];
    }

    bb84: {
        _98 = const false;
        goto -> bb85;
    }

    bb85: {
        return;
    }

    bb86 (cleanup): {
        drop(_68) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_53) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_46) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_37) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_30) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_22) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_9) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_68) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_53) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_46) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_37) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_41) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_30) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_22) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_9) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_15) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }

    bb103: {
        _79 = &_53;
        _80 = &_68;
        _78 = Selection::select(move _79, _80) -> [return: bb49, unwind: bb93];
    }

    bb104: {
        _94 = &mut _37;
        _93 = Writer::<Box<dyn std::io::Write>>::flush(move _94) -> [return: bb57, unwind: bb93];
    }

    bb105: {
        _98 = const false;
        goto -> bb85;
    }

    bb106 (cleanup): {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop((_2.1: std::string::String)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb108: {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb105, unwind continue];
    }

    bb109: {
        drop((_2.1: std::string::String)) -> [return: bb108, unwind: bb106];
    }

    bb110: {
        _98 = const false;
        goto -> bb85;
    }

    bb111 (cleanup): {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop((_2.1: std::string::String)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb113: {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb110, unwind continue];
    }

    bb114: {
        drop((_2.1: std::string::String)) -> [return: bb113, unwind: bb111];
    }

    bb115 (cleanup): {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_98) -> [0: bb115, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop((_2.2: select::SelectColumns)) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop((_2.1: std::string::String)) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb119: {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb84, unwind continue];
    }

    bb120: {
        switchInt(_98) -> [0: bb119, otherwise: bb121];
    }

    bb121: {
        drop((_2.2: select::SelectColumns)) -> [return: bb119, unwind: bb115];
    }

    bb122: {
        drop((_2.1: std::string::String)) -> [return: bb120, unwind: bb116];
    }

    bb123 (cleanup): {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop((_2.1: std::string::String)) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop((_2.3: std::option::Option<std::string::String>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        switchInt(_98) -> [0: bb126, otherwise: bb128];
    }

    bb128 (cleanup): {
        drop((_2.2: select::SelectColumns)) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop((_2.1: std::string::String)) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb131: {
        goto -> bb81;
    }

    bb132: {
        goto -> bb79;
    }

    bb133: {
        goto -> bb78;
    }

    bb134: {
        goto -> bb77;
    }

    bb135: {
        goto -> bb44;
    }

    bb136: {
        goto -> bb76;
    }

    bb137: {
        goto -> bb76;
    }
}

alloc23 (static: search::USAGE, size: 16, align: 8) {
    ╾───alloc1230<imm>────╼ a1 04 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1230 (size: 1185, align: 1) {
    0x000 │ 0a 46 69 6c 74 65 72 73 20 43 53 56 20 64 61 74 │ .Filters CSV dat
    0x010 │ 61 20 62 79 20 77 68 65 74 68 65 72 20 74 68 65 │ a by whether the
    0x020 │ 20 67 69 76 65 6e 20 72 65 67 65 78 20 6d 61 74 │  given regex mat
    0x030 │ 63 68 65 73 20 61 20 72 6f 77 2e 0a 0a 54 68 65 │ ches a row...The
    0x040 │ 20 72 65 67 65 78 20 69 73 20 61 70 70 6c 69 65 │  regex is applie
    0x050 │ 64 20 74 6f 20 65 61 63 68 20 66 69 65 6c 64 20 │ d to each field 
    0x060 │ 69 6e 20 65 61 63 68 20 72 6f 77 2c 20 61 6e 64 │ in each row, and
    0x070 │ 20 69 66 20 61 6e 79 20 66 69 65 6c 64 20 6d 61 │  if any field ma
    0x080 │ 74 63 68 65 73 2c 0a 74 68 65 6e 20 74 68 65 20 │ tches,.then the 
    0x090 │ 72 6f 77 20 69 73 20 77 72 69 74 74 65 6e 20 74 │ row is written t
    0x0a0 │ 6f 20 74 68 65 20 6f 75 74 70 75 74 2e 20 54 68 │ o the output. Th
    0x0b0 │ 65 20 63 6f 6c 75 6d 6e 73 20 74 6f 20 73 65 61 │ e columns to sea
    0x0c0 │ 72 63 68 20 63 61 6e 20 62 65 20 6c 69 6d 69 74 │ rch can be limit
    0x0d0 │ 65 64 0a 77 69 74 68 20 74 68 65 20 27 2d 2d 73 │ ed.with the '--s
    0x0e0 │ 65 6c 65 63 74 27 20 66 6c 61 67 20 28 62 75 74 │ elect' flag (but
    0x0f0 │ 20 74 68 65 20 66 75 6c 6c 20 72 6f 77 20 69 73 │  the full row is
    0x100 │ 20 73 74 69 6c 6c 20 77 72 69 74 74 65 6e 20 74 │  still written t
    0x110 │ 6f 20 74 68 65 20 6f 75 74 70 75 74 20 69 66 0a │ o the output if.
    0x120 │ 74 68 65 72 65 20 69 73 20 61 20 6d 61 74 63 68 │ there is a match
    0x130 │ 29 2e 0a 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 │ )...Usage:.    x
    0x140 │ 73 76 20 73 65 61 72 63 68 20 5b 6f 70 74 69 6f │ sv search [optio
    0x150 │ 6e 73 5d 20 3c 72 65 67 65 78 3e 20 5b 3c 69 6e │ ns] <regex> [<in
    0x160 │ 70 75 74 3e 5d 0a 20 20 20 20 78 73 76 20 73 65 │ put>].    xsv se
    0x170 │ 61 72 63 68 20 2d 2d 68 65 6c 70 0a 0a 73 65 61 │ arch --help..sea
    0x180 │ 72 63 68 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ rch options:.   
    0x190 │ 20 2d 69 2c 20 2d 2d 69 67 6e 6f 72 65 2d 63 61 │  -i, --ignore-ca
    0x1a0 │ 73 65 20 20 20 20 20 20 43 61 73 65 20 69 6e 73 │ se      Case ins
    0x1b0 │ 65 6e 73 69 74 69 76 65 20 73 65 61 72 63 68 2e │ ensitive search.
    0x1c0 │ 20 54 68 69 73 20 69 73 20 65 71 75 69 76 61 6c │  This is equival
    0x1d0 │ 65 6e 74 20 74 6f 0a 20 20 20 20 20 20 20 20 20 │ ent to.         
    0x1e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1f0 │ 20 20 70 72 65 66 69 78 69 6e 67 20 74 68 65 20 │   prefixing the 
    0x200 │ 72 65 67 65 78 20 77 69 74 68 20 27 28 3f 69 29 │ regex with '(?i)
    0x210 │ 27 2e 0a 20 20 20 20 2d 73 2c 20 2d 2d 73 65 6c │ '..    -s, --sel
    0x220 │ 65 63 74 20 3c 61 72 67 3e 20 20 20 20 20 53 65 │ ect <arg>     Se
    0x230 │ 6c 65 63 74 20 74 68 65 20 63 6f 6c 75 6d 6e 73 │ lect the columns
    0x240 │ 20 74 6f 20 73 65 61 72 63 68 2e 20 53 65 65 20 │  to search. See 
    0x250 │ 27 78 73 76 20 73 65 6c 65 63 74 20 2d 68 27 0a │ 'xsv select -h'.
    0x260 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 66 6f 72 20 74 │            for t
    0x280 │ 68 65 20 66 75 6c 6c 20 73 79 6e 74 61 78 2e 0a │ he full syntax..
    0x290 │ 20 20 20 20 2d 76 2c 20 2d 2d 69 6e 76 65 72 74 │     -v, --invert
    0x2a0 │ 2d 6d 61 74 63 68 20 20 20 20 20 53 65 6c 65 63 │ -match     Selec
    0x2b0 │ 74 20 6f 6e 6c 79 20 72 6f 77 73 20 74 68 61 74 │ t only rows that
    0x2c0 │ 20 64 69 64 20 6e 6f 74 20 6d 61 74 63 68 0a 0a │  did not match..
    0x2d0 │ 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a │ Common options:.
    0x2e0 │ 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 │     -h, --help  
    0x2f0 │ 20 20 20 20 20 20 20 20 20 20 20 44 69 73 70 6c │            Displ
    0x300 │ 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 65 0a │ ay this message.
    0x310 │ 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 74 │     -o, --output
    0x320 │ 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 74 65 │  <file>    Write
    0x330 │ 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 6c 65 │  output to <file
    0x340 │ 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 74 64 │ > instead of std
    0x350 │ 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d 2d 6e │ out..    -n, --n
    0x360 │ 6f 2d 68 65 61 64 65 72 73 20 20 20 20 20 20 20 │ o-headers       
    0x370 │ 57 68 65 6e 20 73 65 74 2c 20 74 68 65 20 66 69 │ When set, the fi
    0x380 │ 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 6e 6f 74 │ rst row will not
    0x390 │ 20 62 65 20 69 6e 74 65 72 70 72 65 74 65 64 0a │  be interpreted.
    0x3a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3b0 │ 20 20 20 20 20 20 20 20 20 20 20 61 73 20 68 65 │            as he
    0x3c0 │ 61 64 65 72 73 2e 20 28 69 2e 65 2e 2c 20 54 68 │ aders. (i.e., Th
    0x3d0 │ 65 79 20 61 72 65 20 6e 6f 74 20 73 65 61 72 63 │ ey are not searc
    0x3e0 │ 68 65 64 2c 20 61 6e 61 6c 79 7a 65 64 2c 0a 20 │ hed, analyzed,. 
    0x3f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x400 │ 20 20 20 20 20 20 20 20 20 20 73 6c 69 63 65 64 │           sliced
    0x410 │ 2c 20 65 74 63 2e 29 0a 20 20 20 20 2d 64 2c 20 │ , etc.).    -d, 
    0x420 │ 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 │ --delimiter <arg
    0x430 │ 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c │ >  The field del
    0x440 │ 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 64 69 │ imiter for readi
    0x450 │ 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 │ ng CSV data..   
    0x460 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x470 │ 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 65 20 │         Must be 
    0x480 │ 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 63 74 │ a single charact
    0x490 │ 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 │ er. (default: ,)
    0x4a0 │ 0a                                              │ .
}

fn search::run::{closure#0}(_1: &mut {closure@src/cmd/search.rs:71:45: 71:48}, _2: &[u8]) -> bool {
    debug f => _2;
    debug pattern => (*((*_1).0: &regex::bytes::Regex));
    let mut _0: bool;
    let mut _3: &regex::bytes::Regex;

    bb0: {
        _3 = deref_copy ((*_1).0: &regex::bytes::Regex);
        _0 = regex::bytes::Regex::is_match(_3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static cmd::select::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nSelect columns from CSV data efficiently.\n\nThis command lets you manipulate the columns in CSV data. You can re-order\nthem, duplicate them or drop them. Columns can be referenced by index or by\nname if there is a header row (duplicate column names can be disambiguated with\nmore indexing). Finally, column ranges can be specified.\n\n  Select the first and fourth columns:\n  $ xsv select 1,4\n\n  Select the first 4 columns (by index and by name):\n  $ xsv select 1-4\n  $ xsv select Header1-Header4\n\n  Ignore the first 2 columns (by range and by omission):\n  $ xsv select 3-\n  $ xsv select '!1-2'\n\n  Select the third column named 'Foo':\n  $ xsv select 'Foo[2]'\n\n  Re-order and duplicate columns arbitrarily:\n  $ xsv select 3-1,Header3-Header1,Header1,Foo[2],Header1\n\n  Quote column names that conflict with selector syntax:\n  $ xsv select '\"Date - Opening\",\"Date - Actual Closing\"'\n\nUsage:\n    xsv select [options] [--] <selection> [<input>]\n    xsv select --help\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. (i.e., They are not searched, analyzed,\n                           sliced, etc.)\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cmd::select::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize(_1: __D) -> Result<cmd::select::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::select::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::select::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::expecting(_1: &cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_u64(_1: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E> {
    debug self => const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _4: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _5: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _6: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _7: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _8: __E;
    let mut _9: serde::de::Unexpected<'_>;
    let mut _10: &dyn serde::de::Expected;
    let mut _11: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1];
    }

    bb1: {
        _9 = Unexpected::<'_>::Unsigned(_2);
        _11 = const _;
        _10 = _11 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _8 = <__E as serde::de::Error>::invalid_value(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb2: {
        _3 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _4 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb8;
    }

    bb4: {
        _5 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb5: {
        _6 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb6: {
        _7 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb8;
    }

    bb7: {
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Err(move _8);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 5";
        _0 = &_1;
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_str(_1: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E> {
    debug self => const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _9: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _10: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _11: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _12: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _13: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;

    bb0: {
        _7 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb15, unwind continue];
    }

    bb1: {
        _8 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb16;
    }

    bb2: {
        _6 = <str as PartialEq>::eq(_2, const "arg_selection") -> [return: bb14, unwind continue];
    }

    bb3: {
        _9 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb16;
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb13, unwind continue];
    }

    bb5: {
        _10 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb16;
    }

    bb6: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb12, unwind continue];
    }

    bb7: {
        _11 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb16;
    }

    bb8: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb11, unwind continue];
    }

    bb9: {
        _12 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb16;
    }

    bb10: {
        _13 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb16;
    }

    bb11: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb12: {
        switchInt(move _4) -> [0: bb8, otherwise: bb7];
    }

    bb13: {
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb14: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb15: {
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb16: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_bytes(_1: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E> {
    debug self => const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _19: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _20: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _21: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _22: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
    let mut _23: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;

    bb0: {
        _15 = Len((*_2));
        _16 = const 9_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb68, otherwise: bb10];
    }

    bb10: {
        _23 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb73;
    }

    bb11: {
        _12 = Len((*_2));
        _13 = const 13_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb25, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 13]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 13]) -> [114: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 13]) -> [103: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 13]) -> [95: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 13]) -> [115: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 13]) -> [101: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 13]) -> [108: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 13]) -> [101: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 13]) -> [99: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 13]) -> [116: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 13]) -> [105: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[11 of 13]) -> [111: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[12 of 13]) -> [110: bb69, otherwise: bb10];
    }

    bb25: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb37, otherwise: bb26];
    }

    bb26: {
        switchInt((*_2)[0 of 11]) -> [102: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[1 of 11]) -> [108: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[2 of 11]) -> [97: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[3 of 11]) -> [103: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[4 of 11]) -> [95: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[5 of 11]) -> [111: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[6 of 11]) -> [117: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[7 of 11]) -> [116: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[8 of 11]) -> [112: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[9 of 11]) -> [117: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[10 of 11]) -> [116: bb70, otherwise: bb10];
    }

    bb37: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb53, otherwise: bb38];
    }

    bb38: {
        switchInt((*_2)[0 of 15]) -> [102: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[1 of 15]) -> [108: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[2 of 15]) -> [97: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[3 of 15]) -> [103: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[4 of 15]) -> [95: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[5 of 15]) -> [110: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[6 of 15]) -> [111: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[7 of 15]) -> [95: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[8 of 15]) -> [104: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[9 of 15]) -> [101: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[10 of 15]) -> [97: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[11 of 15]) -> [100: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[12 of 15]) -> [101: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[13 of 15]) -> [114: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[14 of 15]) -> [115: bb71, otherwise: bb10];
    }

    bb53: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 14]) -> [102: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[1 of 14]) -> [108: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[2 of 14]) -> [97: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[3 of 14]) -> [103: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[4 of 14]) -> [95: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[5 of 14]) -> [100: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[6 of 14]) -> [101: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[7 of 14]) -> [108: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[8 of 14]) -> [105: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[9 of 14]) -> [109: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[10 of 14]) -> [105: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[11 of 14]) -> [116: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[12 of 14]) -> [101: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[13 of 14]) -> [114: bb72, otherwise: bb10];
    }

    bb68: {
        _18 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb73;
    }

    bb69: {
        _19 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb73;
    }

    bb70: {
        _20 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb73;
    }

    bb71: {
        _21 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb73;
    }

    bb72: {
        _22 = cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb73;
    }

    bb73: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize(_1: __D) -> Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor>(move _1, const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::expecting(_1: &cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq(_1: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::select::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::select::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::select::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _24: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: isize;
    let mut _31: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _32: &dyn serde::de::Expected;
    let mut _33: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: isize;
    let mut _40: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _41: &dyn serde::de::Expected;
    let mut _42: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: isize;
    let mut _49: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _50: &dyn serde::de::Expected;
    let mut _51: cmd::select::Args;
    let mut _52: std::option::Option<std::string::String>;
    let mut _53: select::SelectColumns;
    let mut _54: std::option::Option<std::string::String>;
    let mut _55: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: select::SelectColumns;
        let _17: std::option::Option<select::SelectColumns>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: select::SelectColumns;
        let mut _56: &&str;
        scope 5 {
            debug __field1 => _13;
            let _23: std::option::Option<std::string::String>;
            let _27: std::option::Option<std::option::Option<std::string::String>>;
            let _28: <__A as serde::de::SeqAccess<'_>>::Error;
            let _30: std::option::Option<std::string::String>;
            let mut _57: &&str;
            scope 9 {
                debug __field2 => _23;
                let _36: std::option::Option<bool>;
                let _37: <__A as serde::de::SeqAccess<'_>>::Error;
                let _39: bool;
                let mut _58: &&str;
                scope 13 {
                    debug __field3 => _39;
                    let _45: std::option::Option<std::option::Option<config::Delimiter>>;
                    let _46: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _48: std::option::Option<config::Delimiter>;
                    let mut _59: &&str;
                    scope 17 {
                        debug __field4 => _48;
                    }
                    scope 18 {
                        debug __val => _45;
                    }
                    scope 19 {
                        debug __err => _46;
                    }
                    scope 20 {
                        debug __value => _48;
                    }
                }
                scope 14 {
                    debug __val => _36;
                }
                scope 15 {
                    debug __err => _37;
                }
                scope 16 {
                    debug __value => _39;
                }
            }
            scope 10 {
                debug __val => _27;
            }
            scope 11 {
                debug __err => _28;
            }
            scope 12 {
                debug __value => _30;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb40];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb35;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _55 = const _;
        _12 = _55 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb40];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_15) -> [return: bb8, unwind: bb39];
    }

    bb7: {
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb35;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb34;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<select::SelectColumns>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _56 = const _;
        _22 = _56 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb39];
    }

    bb12: {
        _20 = move ((_17 as Some).0: select::SelectColumns);
        _13 = move _20;
        _25 = &mut _2;
        _24 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_25) -> [return: bb14, unwind: bb38];
    }

    bb13: {
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb34;
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb33;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _57 = const _;
        _32 = _57 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _31 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _32) -> [return: bb19, unwind: bb38];
    }

    bb18: {
        _30 = move ((_27 as Some).0: std::option::Option<std::string::String>);
        _23 = move _30;
        _34 = &mut _2;
        _33 = <__A as SeqAccess<'_>>::next_element::<bool>(_34) -> [return: bb20, unwind: bb37];
    }

    bb19: {
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _31);
        goto -> bb33;
    }

    bb20: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _37 = move ((_33 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _37);
        goto -> bb32;
    }

    bb22: {
        _36 = ((_33 as Ok).0: std::option::Option<bool>);
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _58 = const _;
        _41 = _58 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _40 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _41) -> [return: bb25, unwind: bb37];
    }

    bb24: {
        _39 = ((_36 as Some).0: bool);
        _43 = &mut _2;
        _42 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_43) -> [return: bb26, unwind: bb37];
    }

    bb25: {
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _40);
        goto -> bb32;
    }

    bb26: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _46 = move ((_42 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _46);
        goto -> bb32;
    }

    bb28: {
        _45 = ((_42 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _47 = discriminant(_45);
        switchInt(move _47) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _59 = const _;
        _50 = _59 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _49 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _50) -> [return: bb31, unwind: bb37];
    }

    bb30: {
        _48 = ((_45 as Some).0: std::option::Option<config::Delimiter>);
        _52 = move _3;
        _53 = move _13;
        _54 = move _23;
        _51 = cmd::select::Args { arg_input: move _52, arg_selection: move _53, flag_output: move _54, flag_no_headers: _39, flag_delimiter: _48 };
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _51);
        drop(_2) -> [return: bb36, unwind continue];
    }

    bb31: {
        _0 = Result::<cmd::select::Args, <__A as SeqAccess<'_>>::Error>::Err(move _49);
        goto -> bb32;
    }

    bb32: {
        drop(_23) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        drop(_13) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        drop(_3) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        drop(_2) -> [return: bb36, unwind continue];
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_23) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_13) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_3) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_2) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 5 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::<impl at src/cmd/select.rs:50:10: 50:21>::visit_map(_1: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::select::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::select::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::select::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _8: std::result::Result<std::option::Option<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _9: &mut __A;
    let mut _10: isize;
    let mut _13: isize;
    let mut _15: isize;
    let mut _16: bool;
    let _17: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _18: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _19: std::option::Option<std::option::Option<std::string::String>>;
    let mut _20: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _21: &mut __A;
    let mut _22: isize;
    let mut _25: bool;
    let _26: &std::option::Option<select::SelectColumns>;
    let mut _27: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _28: std::option::Option<select::SelectColumns>;
    let mut _29: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _30: &mut __A;
    let mut _31: isize;
    let mut _34: bool;
    let _35: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _36: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _37: std::option::Option<std::option::Option<std::string::String>>;
    let mut _38: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _39: &mut __A;
    let mut _40: isize;
    let mut _43: bool;
    let _44: &std::option::Option<bool>;
    let mut _45: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _46: std::option::Option<bool>;
    let mut _47: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _48: &mut __A;
    let mut _49: isize;
    let mut _52: bool;
    let _53: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _54: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _55: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _56: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _57: &mut __A;
    let mut _58: isize;
    let mut _61: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _62: &mut __A;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _69: isize;
    let mut _73: isize;
    let mut _75: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _76: isize;
    let mut _80: isize;
    let mut _82: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _83: isize;
    let mut _87: isize;
    let mut _89: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _90: isize;
    let mut _94: isize;
    let mut _96: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _97: isize;
    let mut _100: cmd::select::Args;
    let mut _101: std::option::Option<std::string::String>;
    let mut _102: select::SelectColumns;
    let mut _103: std::option::Option<std::string::String>;
    let mut _104: bool;
    let mut _105: std::option::Option<config::Delimiter>;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<select::SelectColumns>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<std::string::String>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<config::Delimiter>>;
                    scope 5 {
                        debug __field4 => _7;
                        let _65: std::option::Option<std::string::String>;
                        let _67: std::option::Option<std::string::String>;
                        let _70: std::option::Option<std::string::String>;
                        let _71: <__A as serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __key => _14;
                            let _11: std::option::Option<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field>;
                            let _12: <__A as serde::de::MapAccess<'_>>::Error;
                            let _14: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field;
                            let _23: std::option::Option<std::string::String>;
                            let _24: <__A as serde::de::MapAccess<'_>>::Error;
                            let _32: select::SelectColumns;
                            let _33: <__A as serde::de::MapAccess<'_>>::Error;
                            let _41: std::option::Option<std::string::String>;
                            let _42: <__A as serde::de::MapAccess<'_>>::Error;
                            let _50: bool;
                            let _51: <__A as serde::de::MapAccess<'_>>::Error;
                            let _59: std::option::Option<config::Delimiter>;
                            let _60: <__A as serde::de::MapAccess<'_>>::Error;
                            let _64: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 7 {
                                debug __val => _11;
                            }
                            scope 8 {
                                debug __err => _12;
                            }
                            scope 9 {
                                debug __val => _23;
                            }
                            scope 10 {
                                debug __err => _24;
                            }
                            scope 11 {
                                debug __val => _32;
                            }
                            scope 12 {
                                debug __err => _33;
                            }
                            scope 13 {
                                debug __val => _41;
                            }
                            scope 14 {
                                debug __err => _42;
                            }
                            scope 15 {
                                debug __val => _50;
                            }
                            scope 16 {
                                debug __err => _51;
                            }
                            scope 17 {
                                debug __val => _59;
                            }
                            scope 18 {
                                debug __err => _60;
                            }
                            scope 19 {
                            }
                            scope 20 {
                                debug __val => const IgnoredAny;
                            }
                            scope 21 {
                                debug __err => _64;
                            }
                        }
                        scope 22 {
                            debug __field0 => _65;
                            let _72: select::SelectColumns;
                            let _74: select::SelectColumns;
                            let _77: select::SelectColumns;
                            let _78: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 26 {
                                debug __field1 => _72;
                                let _79: std::option::Option<std::string::String>;
                                let _81: std::option::Option<std::string::String>;
                                let _84: std::option::Option<std::string::String>;
                                let _85: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 30 {
                                    debug __field2 => _79;
                                    let _86: bool;
                                    let _88: bool;
                                    let _91: bool;
                                    let _92: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 34 {
                                        debug __field3 => _86;
                                        let _93: std::option::Option<config::Delimiter>;
                                        let _95: std::option::Option<config::Delimiter>;
                                        let _98: std::option::Option<config::Delimiter>;
                                        let _99: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 38 {
                                            debug __field4 => _93;
                                        }
                                        scope 39 {
                                            debug __field4 => _95;
                                        }
                                        scope 40 {
                                            debug __val => _98;
                                        }
                                        scope 41 {
                                            debug __err => _99;
                                        }
                                    }
                                    scope 35 {
                                        debug __field3 => _88;
                                    }
                                    scope 36 {
                                        debug __val => _91;
                                    }
                                    scope 37 {
                                        debug __err => _92;
                                    }
                                }
                                scope 31 {
                                    debug __field2 => _81;
                                }
                                scope 32 {
                                    debug __val => _84;
                                }
                                scope 33 {
                                    debug __err => _85;
                                }
                            }
                            scope 27 {
                                debug __field1 => _74;
                            }
                            scope 28 {
                                debug __val => _77;
                            }
                            scope 29 {
                                debug __err => _78;
                            }
                        }
                        scope 23 {
                            debug __field0 => _67;
                        }
                        scope 24 {
                            debug __val => _70;
                        }
                        scope 25 {
                            debug __err => _71;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _108 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _107 = const true;
        _4 = std::option::Option::<SelectColumns>::None;
        _106 = const true;
        _5 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _9 = &mut _2;
        _8 = <__A as MapAccess<'_>>::next_key::<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field>(_9) -> [return: bb2, unwind: bb110];
    }

    bb2: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_8 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _12);
        goto -> bb90;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_8 as Ok).0: std::option::Option<cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field>);
        _13 = discriminant(_11);
        switchInt(move _13) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _66 = discriminant(_3);
        switchInt(move _66) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb7: {
        _14 = move ((_11 as Some).0: cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::select::Args>::deserialize::__Field);
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb9, 1: bb19, 2: bb29, 3: bb39, 4: bb47, otherwise: bb8];
    }

    bb8: {
        _62 = &mut _2;
        _61 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_62) -> [return: bb55, unwind: bb110];
    }

    bb9: {
        _17 = &_3;
        _16 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_17) -> [return: bb10, unwind: bb110];
    }

    bb10: {
        switchInt(move _16) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _18 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb110];
    }

    bb12: {
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _18);
        goto -> bb90;
    }

    bb13: {
        _21 = &mut _2;
        _20 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_21) -> [return: bb14, unwind: bb110];
    }

    bb14: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _24 = move ((_20 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb90;
    }

    bb16: {
        _23 = move ((_20 as Ok).0: std::option::Option<std::string::String>);
        _19 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _23);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _108 = const true;
        _3 = move _19;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _108 = const true;
        _3 = move _19;
        goto -> bb110;
    }

    bb19: {
        _26 = &_4;
        _25 = std::option::Option::<SelectColumns>::is_some(_26) -> [return: bb20, unwind: bb110];
    }

    bb20: {
        switchInt(move _25) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _27 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_selection") -> [return: bb22, unwind: bb110];
    }

    bb22: {
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _27);
        goto -> bb90;
    }

    bb23: {
        _30 = &mut _2;
        _29 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_30) -> [return: bb24, unwind: bb110];
    }

    bb24: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _33 = move ((_29 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _33);
        goto -> bb90;
    }

    bb26: {
        _32 = move ((_29 as Ok).0: select::SelectColumns);
        _28 = std::option::Option::<SelectColumns>::Some(move _32);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _107 = const true;
        _4 = move _28;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _107 = const true;
        _4 = move _28;
        goto -> bb110;
    }

    bb29: {
        _35 = &_5;
        _34 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_35) -> [return: bb30, unwind: bb110];
    }

    bb30: {
        switchInt(move _34) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _36 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb32, unwind: bb110];
    }

    bb32: {
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb90;
    }

    bb33: {
        _39 = &mut _2;
        _38 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_39) -> [return: bb34, unwind: bb110];
    }

    bb34: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _42 = move ((_38 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _42);
        goto -> bb90;
    }

    bb36: {
        _41 = move ((_38 as Ok).0: std::option::Option<std::string::String>);
        _37 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _41);
        drop(_5) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _106 = const true;
        _5 = move _37;
        goto -> bb1;
    }

    bb38 (cleanup): {
        _106 = const true;
        _5 = move _37;
        goto -> bb110;
    }

    bb39: {
        _44 = &_6;
        _43 = std::option::Option::<bool>::is_some(_44) -> [return: bb40, unwind: bb110];
    }

    bb40: {
        switchInt(move _43) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _45 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb42, unwind: bb110];
    }

    bb42: {
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _45);
        goto -> bb90;
    }

    bb43: {
        _48 = &mut _2;
        _47 = <__A as MapAccess<'_>>::next_value::<bool>(_48) -> [return: bb44, unwind: bb110];
    }

    bb44: {
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb46, 1: bb45, otherwise: bb4];
    }

    bb45: {
        _51 = move ((_47 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb90;
    }

    bb46: {
        _50 = ((_47 as Ok).0: bool);
        _46 = std::option::Option::<bool>::Some(_50);
        _6 = move _46;
        goto -> bb1;
    }

    bb47: {
        _53 = &_7;
        _52 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_53) -> [return: bb48, unwind: bb110];
    }

    bb48: {
        switchInt(move _52) -> [0: bb51, otherwise: bb49];
    }

    bb49: {
        _54 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb50, unwind: bb110];
    }

    bb50: {
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb90;
    }

    bb51: {
        _57 = &mut _2;
        _56 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_57) -> [return: bb52, unwind: bb110];
    }

    bb52: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb54, 1: bb53, otherwise: bb4];
    }

    bb53: {
        _60 = move ((_56 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _60);
        goto -> bb90;
    }

    bb54: {
        _59 = ((_56 as Ok).0: std::option::Option<config::Delimiter>);
        _55 = std::option::Option::<std::option::Option<Delimiter>>::Some(_59);
        _7 = move _55;
        goto -> bb1;
    }

    bb55: {
        _63 = discriminant(_61);
        switchInt(move _63) -> [0: bb1, 1: bb56, otherwise: bb4];
    }

    bb56: {
        _64 = move ((_61 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb90;
    }

    bb57: {
        _68 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb59, unwind: bb110];
    }

    bb58: {
        _108 = const false;
        _67 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _65 = move _67;
        goto -> bb62;
    }

    bb59: {
        _69 = discriminant(_68);
        switchInt(move _69) -> [0: bb61, 1: bb60, otherwise: bb4];
    }

    bb60: {
        _71 = move ((_68 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb90;
    }

    bb61: {
        _70 = move ((_68 as Ok).0: std::option::Option<std::string::String>);
        _65 = move _70;
        goto -> bb62;
    }

    bb62: {
        _73 = discriminant(_4);
        switchInt(move _73) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        _75 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "arg_selection") -> [return: bb65, unwind: bb94];
    }

    bb64: {
        _107 = const false;
        _74 = move ((_4 as Some).0: select::SelectColumns);
        _72 = move _74;
        goto -> bb68;
    }

    bb65: {
        _76 = discriminant(_75);
        switchInt(move _76) -> [0: bb67, 1: bb66, otherwise: bb4];
    }

    bb66: {
        _78 = move ((_75 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _78);
        goto -> bb89;
    }

    bb67: {
        _77 = move ((_75 as Ok).0: select::SelectColumns);
        _72 = move _77;
        goto -> bb68;
    }

    bb68: {
        _80 = discriminant(_5);
        switchInt(move _80) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        _82 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb71, unwind: bb93];
    }

    bb70: {
        _106 = const false;
        _81 = move ((_5 as Some).0: std::option::Option<std::string::String>);
        _79 = move _81;
        goto -> bb74;
    }

    bb71: {
        _83 = discriminant(_82);
        switchInt(move _83) -> [0: bb73, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _85 = move ((_82 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb88;
    }

    bb73: {
        _84 = move ((_82 as Ok).0: std::option::Option<std::string::String>);
        _79 = move _84;
        goto -> bb74;
    }

    bb74: {
        _87 = discriminant(_6);
        switchInt(move _87) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        _89 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb77, unwind: bb92];
    }

    bb76: {
        _88 = ((_6 as Some).0: bool);
        _86 = _88;
        goto -> bb80;
    }

    bb77: {
        _90 = discriminant(_89);
        switchInt(move _90) -> [0: bb79, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _92 = move ((_89 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _92);
        goto -> bb87;
    }

    bb79: {
        _91 = ((_89 as Ok).0: bool);
        _86 = _91;
        goto -> bb80;
    }

    bb80: {
        _94 = discriminant(_7);
        switchInt(move _94) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        _96 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb83, unwind: bb92];
    }

    bb82: {
        _95 = ((_7 as Some).0: std::option::Option<config::Delimiter>);
        _93 = _95;
        goto -> bb86;
    }

    bb83: {
        _97 = discriminant(_96);
        switchInt(move _97) -> [0: bb85, 1: bb84, otherwise: bb4];
    }

    bb84: {
        _99 = move ((_96 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Err(move _99);
        goto -> bb87;
    }

    bb85: {
        _98 = ((_96 as Ok).0: std::option::Option<config::Delimiter>);
        _93 = _98;
        goto -> bb86;
    }

    bb86: {
        _101 = move _65;
        _102 = move _72;
        _103 = move _79;
        _104 = _86;
        _105 = _93;
        _100 = cmd::select::Args { arg_input: move _101, arg_selection: move _102, flag_output: move _103, flag_no_headers: move _104, flag_delimiter: move _105 };
        _0 = Result::<cmd::select::Args, <__A as MapAccess<'_>>::Error>::Ok(move _100);
        _106 = const false;
        _107 = const false;
        _108 = const false;
        drop(_2) -> [return: bb91, unwind continue];
    }

    bb87: {
        drop(_79) -> [return: bb88, unwind: bb93];
    }

    bb88: {
        drop(_72) -> [return: bb89, unwind: bb94];
    }

    bb89: {
        drop(_65) -> [return: bb90, unwind: bb110];
    }

    bb90: {
        _109 = discriminant(_5);
        switchInt(move _109) -> [1: bb100, otherwise: bb99];
    }

    bb91: {
        return;
    }

    bb92 (cleanup): {
        drop(_79) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_72) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_65) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        _113 = discriminant(_4);
        switchInt(move _113) -> [1: bb111, otherwise: bb96];
    }

    bb96 (cleanup): {
        _114 = discriminant(_3);
        switchInt(move _114) -> [1: bb113, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop(_2) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        resume;
    }

    bb99: {
        _106 = const false;
        _110 = discriminant(_4);
        switchInt(move _110) -> [1: bb103, otherwise: bb102];
    }

    bb100: {
        switchInt(_106) -> [0: bb99, otherwise: bb101];
    }

    bb101: {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb99, unwind: bb95];
    }

    bb102: {
        _107 = const false;
        _111 = discriminant(_3);
        switchInt(move _111) -> [1: bb106, otherwise: bb105];
    }

    bb103: {
        switchInt(_107) -> [0: bb102, otherwise: bb104];
    }

    bb104: {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb102, unwind: bb96];
    }

    bb105: {
        _108 = const false;
        drop(_2) -> [return: bb91, unwind continue];
    }

    bb106: {
        switchInt(_108) -> [0: bb105, otherwise: bb107];
    }

    bb107: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb105, unwind: bb97];
    }

    bb108 (cleanup): {
        switchInt(_106) -> [0: bb95, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop(((_5 as Some).0: std::option::Option<std::string::String>)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        _112 = discriminant(_5);
        switchInt(move _112) -> [1: bb108, otherwise: bb95];
    }

    bb111 (cleanup): {
        switchInt(_107) -> [0: bb96, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_108) -> [0: bb97, otherwise: bb114];
    }

    bb114 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb97, unwind terminate(cleanup)];
    }
}

const cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 5];
    let _2: &[&str; 5];
    let _3: [&str; 5];
    let mut _4: &[&str; 5];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::select::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/select.rs:50:10: 50:21>::deserialize::FIELDS: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "arg_input", const "arg_selection", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn cmd::select::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::select::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::select::Args>;
    let mut _4: std::result::Result<cmd::select::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::select::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let mut _12: config::Config;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: std::option::Option<config::Delimiter>;
    let mut _15: bool;
    let mut _16: select::SelectColumns;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _19: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _20: &config::Config;
    let mut _21: isize;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _26: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _27: &config::Config;
    let _28: config::Config;
    let _29: &std::option::Option<std::string::String>;
    let mut _30: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _35: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _36: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _37: isize;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _42: std::result::Result<select::Selection, std::string::String>;
    let mut _43: &config::Config;
    let _44: &csv::ByteRecord;
    let mut _45: isize;
    let mut _48: bool;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _50: std::result::Result<(), csv::Error>;
    let mut _51: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _52: std::iter::Map<std::slice::Iter<'_, usize>, {closure@src/cmd/select.rs:74:41: 74:45}>;
    let mut _53: std::slice::Iter<'_, usize>;
    let _54: &[usize];
    let mut _55: &select::Selection;
    let mut _56: {closure@src/cmd/select.rs:74:41: 74:45};
    let mut _57: &csv::ByteRecord;
    let mut _58: isize;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _62: std::result::Result<bool, csv::Error>;
    let mut _63: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _64: &mut csv::ByteRecord;
    let mut _65: isize;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _69: std::result::Result<(), csv::Error>;
    let mut _70: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _71: std::iter::Map<std::slice::Iter<'_, usize>, {closure@src/cmd/select.rs:78:41: 78:45}>;
    let mut _72: std::slice::Iter<'_, usize>;
    let _73: &[usize];
    let mut _74: &select::Selection;
    let mut _75: {closure@src/cmd/select.rs:78:41: 78:45};
    let mut _76: &csv::ByteRecord;
    let mut _77: isize;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _80: std::result::Result<(), std::io::Error>;
    let mut _81: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _82: isize;
    let mut _84: &str;
    let mut _85: bool;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let mut _17: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _23: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
            scope 7 {
                debug rdr => _17;
                let mut _24: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                let _31: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _32: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                scope 12 {
                    debug wtr => _24;
                    let _33: csv::ByteRecord;
                    let _38: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _39: &csv::ByteRecord;
                    scope 17 {
                        debug headers => _33;
                        let _40: select::Selection;
                        let _46: std::result::Result<std::convert::Infallible, std::string::String>;
                        let _47: select::Selection;
                        scope 22 {
                            debug sel => _40;
                            let _59: std::result::Result<std::convert::Infallible, csv::Error>;
                            let mut _60: csv::ByteRecord;
                            scope 27 {
                                debug residual => _59;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => const ();
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug record => _60;
                                let _66: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _67: bool;
                                let _78: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _83: std::result::Result<std::convert::Infallible, std::io::Error>;
                                scope 32 {
                                    debug residual => _66;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => _67;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug residual => _78;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => const ();
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug residual => _83;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug val => const ();
                                    scope 43 {
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _46;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _47;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _38;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _39;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _31;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _32;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _22;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _85 = const false;
        _5 = const {alloc24: &&str};
        _84 = deref_copy (*_5);
        _4 = get_args::<cmd::select::Args>(_84, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::select::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::select::Args);
        _85 = const true;
        _2 = move _8;
        _13 = &(_2.0: std::option::Option<std::string::String>);
        _12 = Config::new(_13) -> [return: bb6, unwind: bb86];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb66, unwind continue];
    }

    bb6: {
        _14 = (_2.4: std::option::Option<config::Delimiter>);
        _11 = Config::delimiter(move _12, move _14) -> [return: bb7, unwind: bb86];
    }

    bb7: {
        _15 = (_2.3: bool);
        _10 = Config::no_headers(move _11, move _15) -> [return: bb8, unwind: bb86];
    }

    bb8: {
        _85 = const false;
        _16 = move (_2.1: select::SelectColumns);
        _9 = Config::select(move _10, move _16) -> [return: bb9, unwind: bb86];
    }

    bb9: {
        _20 = &_9;
        _19 = Config::reader(move _20) -> [return: bb10, unwind: bb74];
    }

    bb10: {
        _18 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _19) -> [return: bb11, unwind: bb74];
    }

    bb11: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _23 = move ((_18 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _17 = move _23;
        _29 = &(_2.2: std::option::Option<std::string::String>);
        _28 = Config::new(_29) -> [return: bb14, unwind: bb73];
    }

    bb13: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb87, unwind: bb74];
    }

    bb14: {
        _27 = &_28;
        _26 = Config::writer(move _27) -> [return: bb15, unwind: bb72];
    }

    bb15: {
        _25 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _26) -> [return: bb16, unwind: bb72];
    }

    bb16: {
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _32 = move ((_25 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _24 = move _32;
        drop(_28) -> [return: bb20, unwind: bb71];
    }

    bb18: {
        _31 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _31) -> [return: bb19, unwind: bb72];
    }

    bb19: {
        drop(_28) -> [return: bb63, unwind: bb73];
    }

    bb20: {
        _36 = &mut _17;
        _35 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _36) -> [return: bb21, unwind: bb71];
    }

    bb21: {
        _34 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _35) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        _39 = ((_34 as Continue).0: &csv::ByteRecord);
        _33 = <ByteRecord as Clone>::clone(_39) -> [return: bb25, unwind: bb71];
    }

    bb24: {
        _38 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _38) -> [return: bb88, unwind: bb71];
    }

    bb25: {
        _43 = &_9;
        _44 = &_33;
        _42 = Config::selection(move _43, _44) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        _41 = <Result<Selection, std::string::String> as Try>::branch(move _42) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        _45 = discriminant(_41);
        switchInt(move _45) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        _47 = move ((_41 as Continue).0: select::Selection);
        _40 = move _47;
        _48 = (_9.4: bool);
        switchInt(move _48) -> [0: bb30, otherwise: bb37];
    }

    bb29: {
        _46 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _46) -> [return: bb89, unwind: bb70];
    }

    bb30: {
        _51 = &mut _24;
        _55 = &_40;
        _54 = <Selection as Deref>::deref(move _55) -> [return: bb31, unwind: bb69];
    }

    bb31: {
        _53 = core::slice::<impl [usize]>::iter(_54) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        _57 = &_33;
        _56 = {closure@src/cmd/select.rs:74:41: 74:45} { headers: move _57 };
        _52 = <std::slice::Iter<'_, usize> as Iterator>::map::<&[u8], {closure@src/cmd/select.rs:74:41: 74:45}>(move _53, move _56) -> [return: bb33, unwind: bb69];
    }

    bb33: {
        _50 = Writer::<Box<dyn std::io::Write>>::write_record::<std::iter::Map<std::slice::Iter<'_, usize>, {closure@src/cmd/select.rs:74:41: 74:45}>, &[u8]>(move _51, move _52) -> [return: bb34, unwind: bb69];
    }

    bb34: {
        _49 = <Result<(), csv::Error> as Try>::branch(move _50) -> [return: bb35, unwind: bb69];
    }

    bb35: {
        _58 = discriminant(_49);
        switchInt(move _58) -> [0: bb37, 1: bb36, otherwise: bb4];
    }

    bb36: {
        _59 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _59) -> [return: bb90, unwind: bb69];
    }

    bb37: {
        _60 = ByteRecord::new() -> [return: bb91, unwind: bb69];
    }

    bb38: {
        _63 = &mut _17;
        _64 = &mut _60;
        _62 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _63, _64) -> [return: bb39, unwind: bb68];
    }

    bb39: {
        _61 = <Result<bool, csv::Error> as Try>::branch(move _62) -> [return: bb40, unwind: bb68];
    }

    bb40: {
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        _67 = ((_61 as Continue).0: bool);
        switchInt(_67) -> [0: bb77, otherwise: bb76];
    }

    bb42: {
        _66 = move ((_61 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _66) -> [return: bb92, unwind: bb68];
    }

    bb43: {
        _72 = core::slice::<impl [usize]>::iter(_73) -> [return: bb44, unwind: bb68];
    }

    bb44: {
        _76 = &_60;
        _75 = {closure@src/cmd/select.rs:78:41: 78:45} { record: move _76 };
        _71 = <std::slice::Iter<'_, usize> as Iterator>::map::<&[u8], {closure@src/cmd/select.rs:78:41: 78:45}>(move _72, move _75) -> [return: bb45, unwind: bb68];
    }

    bb45: {
        _69 = Writer::<Box<dyn std::io::Write>>::write_record::<std::iter::Map<std::slice::Iter<'_, usize>, {closure@src/cmd/select.rs:78:41: 78:45}>, &[u8]>(move _70, move _71) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        _68 = <Result<(), csv::Error> as Try>::branch(move _69) -> [return: bb47, unwind: bb68];
    }

    bb47: {
        _77 = discriminant(_68);
        switchInt(move _77) -> [0: bb38, 1: bb48, otherwise: bb4];
    }

    bb48: {
        _78 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _78) -> [return: bb93, unwind: bb68];
    }

    bb49: {
        _79 = <Result<(), std::io::Error> as Try>::branch(move _80) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_60) -> [return: bb53, unwind: bb69];
    }

    bb52: {
        _83 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _83) -> [return: bb94, unwind: bb68];
    }

    bb53: {
        drop(_40) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        drop(_33) -> [return: bb55, unwind: bb71];
    }

    bb55: {
        drop(_24) -> [return: bb56, unwind: bb73];
    }

    bb56: {
        drop(_17) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        drop(_9) -> [return: bb58, unwind: bb86];
    }

    bb58: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb80, unwind: bb79];
    }

    bb59: {
        drop(_60) -> [return: bb60, unwind: bb69];
    }

    bb60: {
        drop(_40) -> [return: bb61, unwind: bb70];
    }

    bb61: {
        drop(_33) -> [return: bb62, unwind: bb71];
    }

    bb62: {
        drop(_24) -> [return: bb63, unwind: bb73];
    }

    bb63: {
        drop(_17) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        drop(_9) -> [return: bb65, unwind: bb86];
    }

    bb65: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb82, unwind: bb81];
    }

    bb66: {
        _85 = const false;
        goto -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_60) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_40) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_33) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_24) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_28) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_17) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_9) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76: {
        _70 = &mut _24;
        _74 = &_40;
        _73 = <Selection as Deref>::deref(move _74) -> [return: bb43, unwind: bb68];
    }

    bb77: {
        _81 = &mut _24;
        _80 = Writer::<Box<dyn std::io::Write>>::flush(move _81) -> [return: bb49, unwind: bb68];
    }

    bb78: {
        _85 = const false;
        goto -> bb67;
    }

    bb79 (cleanup): {
        drop((_2.2: std::option::Option<std::string::String>)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb80: {
        drop((_2.2: std::option::Option<std::string::String>)) -> [return: bb78, unwind continue];
    }

    bb81 (cleanup): {
        drop((_2.2: std::option::Option<std::string::String>)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb82: {
        drop((_2.2: std::option::Option<std::string::String>)) -> [return: bb66, unwind continue];
    }

    bb83 (cleanup): {
        drop((_2.2: std::option::Option<std::string::String>)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_85) -> [0: bb83, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_2.1: select::SelectColumns)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb87: {
        goto -> bb64;
    }

    bb88: {
        goto -> bb62;
    }

    bb89: {
        goto -> bb61;
    }

    bb90: {
        goto -> bb60;
    }

    bb91: {
        goto -> bb38;
    }

    bb92: {
        goto -> bb59;
    }

    bb93: {
        goto -> bb59;
    }

    bb94: {
        goto -> bb59;
    }
}

alloc24 (static: cmd::select::USAGE, size: 16, align: 8) {
    ╾───alloc1300<imm>────╼ 92 05 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1300 (size: 1426, align: 1) {
    0x000 │ 0a 53 65 6c 65 63 74 20 63 6f 6c 75 6d 6e 73 20 │ .Select columns 
    0x010 │ 66 72 6f 6d 20 43 53 56 20 64 61 74 61 20 65 66 │ from CSV data ef
    0x020 │ 66 69 63 69 65 6e 74 6c 79 2e 0a 0a 54 68 69 73 │ ficiently...This
    0x030 │ 20 63 6f 6d 6d 61 6e 64 20 6c 65 74 73 20 79 6f │  command lets yo
    0x040 │ 75 20 6d 61 6e 69 70 75 6c 61 74 65 20 74 68 65 │ u manipulate the
    0x050 │ 20 63 6f 6c 75 6d 6e 73 20 69 6e 20 43 53 56 20 │  columns in CSV 
    0x060 │ 64 61 74 61 2e 20 59 6f 75 20 63 61 6e 20 72 65 │ data. You can re
    0x070 │ 2d 6f 72 64 65 72 0a 74 68 65 6d 2c 20 64 75 70 │ -order.them, dup
    0x080 │ 6c 69 63 61 74 65 20 74 68 65 6d 20 6f 72 20 64 │ licate them or d
    0x090 │ 72 6f 70 20 74 68 65 6d 2e 20 43 6f 6c 75 6d 6e │ rop them. Column
    0x0a0 │ 73 20 63 61 6e 20 62 65 20 72 65 66 65 72 65 6e │ s can be referen
    0x0b0 │ 63 65 64 20 62 79 20 69 6e 64 65 78 20 6f 72 20 │ ced by index or 
    0x0c0 │ 62 79 0a 6e 61 6d 65 20 69 66 20 74 68 65 72 65 │ by.name if there
    0x0d0 │ 20 69 73 20 61 20 68 65 61 64 65 72 20 72 6f 77 │  is a header row
    0x0e0 │ 20 28 64 75 70 6c 69 63 61 74 65 20 63 6f 6c 75 │  (duplicate colu
    0x0f0 │ 6d 6e 20 6e 61 6d 65 73 20 63 61 6e 20 62 65 20 │ mn names can be 
    0x100 │ 64 69 73 61 6d 62 69 67 75 61 74 65 64 20 77 69 │ disambiguated wi
    0x110 │ 74 68 0a 6d 6f 72 65 20 69 6e 64 65 78 69 6e 67 │ th.more indexing
    0x120 │ 29 2e 20 46 69 6e 61 6c 6c 79 2c 20 63 6f 6c 75 │ ). Finally, colu
    0x130 │ 6d 6e 20 72 61 6e 67 65 73 20 63 61 6e 20 62 65 │ mn ranges can be
    0x140 │ 20 73 70 65 63 69 66 69 65 64 2e 0a 0a 20 20 53 │  specified...  S
    0x150 │ 65 6c 65 63 74 20 74 68 65 20 66 69 72 73 74 20 │ elect the first 
    0x160 │ 61 6e 64 20 66 6f 75 72 74 68 20 63 6f 6c 75 6d │ and fourth colum
    0x170 │ 6e 73 3a 0a 20 20 24 20 78 73 76 20 73 65 6c 65 │ ns:.  $ xsv sele
    0x180 │ 63 74 20 31 2c 34 0a 0a 20 20 53 65 6c 65 63 74 │ ct 1,4..  Select
    0x190 │ 20 74 68 65 20 66 69 72 73 74 20 34 20 63 6f 6c │  the first 4 col
    0x1a0 │ 75 6d 6e 73 20 28 62 79 20 69 6e 64 65 78 20 61 │ umns (by index a
    0x1b0 │ 6e 64 20 62 79 20 6e 61 6d 65 29 3a 0a 20 20 24 │ nd by name):.  $
    0x1c0 │ 20 78 73 76 20 73 65 6c 65 63 74 20 31 2d 34 0a │  xsv select 1-4.
    0x1d0 │ 20 20 24 20 78 73 76 20 73 65 6c 65 63 74 20 48 │   $ xsv select H
    0x1e0 │ 65 61 64 65 72 31 2d 48 65 61 64 65 72 34 0a 0a │ eader1-Header4..
    0x1f0 │ 20 20 49 67 6e 6f 72 65 20 74 68 65 20 66 69 72 │   Ignore the fir
    0x200 │ 73 74 20 32 20 63 6f 6c 75 6d 6e 73 20 28 62 79 │ st 2 columns (by
    0x210 │ 20 72 61 6e 67 65 20 61 6e 64 20 62 79 20 6f 6d │  range and by om
    0x220 │ 69 73 73 69 6f 6e 29 3a 0a 20 20 24 20 78 73 76 │ ission):.  $ xsv
    0x230 │ 20 73 65 6c 65 63 74 20 33 2d 0a 20 20 24 20 78 │  select 3-.  $ x
    0x240 │ 73 76 20 73 65 6c 65 63 74 20 27 21 31 2d 32 27 │ sv select '!1-2'
    0x250 │ 0a 0a 20 20 53 65 6c 65 63 74 20 74 68 65 20 74 │ ..  Select the t
    0x260 │ 68 69 72 64 20 63 6f 6c 75 6d 6e 20 6e 61 6d 65 │ hird column name
    0x270 │ 64 20 27 46 6f 6f 27 3a 0a 20 20 24 20 78 73 76 │ d 'Foo':.  $ xsv
    0x280 │ 20 73 65 6c 65 63 74 20 27 46 6f 6f 5b 32 5d 27 │  select 'Foo[2]'
    0x290 │ 0a 0a 20 20 52 65 2d 6f 72 64 65 72 20 61 6e 64 │ ..  Re-order and
    0x2a0 │ 20 64 75 70 6c 69 63 61 74 65 20 63 6f 6c 75 6d │  duplicate colum
    0x2b0 │ 6e 73 20 61 72 62 69 74 72 61 72 69 6c 79 3a 0a │ ns arbitrarily:.
    0x2c0 │ 20 20 24 20 78 73 76 20 73 65 6c 65 63 74 20 33 │   $ xsv select 3
    0x2d0 │ 2d 31 2c 48 65 61 64 65 72 33 2d 48 65 61 64 65 │ -1,Header3-Heade
    0x2e0 │ 72 31 2c 48 65 61 64 65 72 31 2c 46 6f 6f 5b 32 │ r1,Header1,Foo[2
    0x2f0 │ 5d 2c 48 65 61 64 65 72 31 0a 0a 20 20 51 75 6f │ ],Header1..  Quo
    0x300 │ 74 65 20 63 6f 6c 75 6d 6e 20 6e 61 6d 65 73 20 │ te column names 
    0x310 │ 74 68 61 74 20 63 6f 6e 66 6c 69 63 74 20 77 69 │ that conflict wi
    0x320 │ 74 68 20 73 65 6c 65 63 74 6f 72 20 73 79 6e 74 │ th selector synt
    0x330 │ 61 78 3a 0a 20 20 24 20 78 73 76 20 73 65 6c 65 │ ax:.  $ xsv sele
    0x340 │ 63 74 20 27 22 44 61 74 65 20 2d 20 4f 70 65 6e │ ct '"Date - Open
    0x350 │ 69 6e 67 22 2c 22 44 61 74 65 20 2d 20 41 63 74 │ ing","Date - Act
    0x360 │ 75 61 6c 20 43 6c 6f 73 69 6e 67 22 27 0a 0a 55 │ ual Closing"'..U
    0x370 │ 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 73 65 │ sage:.    xsv se
    0x380 │ 6c 65 63 74 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b │ lect [options] [
    0x390 │ 2d 2d 5d 20 3c 73 65 6c 65 63 74 69 6f 6e 3e 20 │ --] <selection> 
    0x3a0 │ 5b 3c 69 6e 70 75 74 3e 5d 0a 20 20 20 20 78 73 │ [<input>].    xs
    0x3b0 │ 76 20 73 65 6c 65 63 74 20 2d 2d 68 65 6c 70 0a │ v select --help.
    0x3c0 │ 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 6f 6e 73 3a │ .Common options:
    0x3d0 │ 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 │ .    -h, --help 
    0x3e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 44 69 73 70 │             Disp
    0x3f0 │ 6c 61 79 20 74 68 69 73 20 6d 65 73 73 61 67 65 │ lay this message
    0x400 │ 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f 75 74 70 75 │ .    -o, --outpu
    0x410 │ 74 20 3c 66 69 6c 65 3e 20 20 20 20 57 72 69 74 │ t <file>    Writ
    0x420 │ 65 20 6f 75 74 70 75 74 20 74 6f 20 3c 66 69 6c │ e output to <fil
    0x430 │ 65 3e 20 69 6e 73 74 65 61 64 20 6f 66 20 73 74 │ e> instead of st
    0x440 │ 64 6f 75 74 2e 0a 20 20 20 20 2d 6e 2c 20 2d 2d │ dout..    -n, --
    0x450 │ 6e 6f 2d 68 65 61 64 65 72 73 20 20 20 20 20 20 │ no-headers      
    0x460 │ 20 57 68 65 6e 20 73 65 74 2c 20 74 68 65 20 66 │  When set, the f
    0x470 │ 69 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 6e 6f │ irst row will no
    0x480 │ 74 20 62 65 20 69 6e 74 65 72 70 72 65 74 65 64 │ t be interpreted
    0x490 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x4a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 61 73 20 68 │             as h
    0x4b0 │ 65 61 64 65 72 73 2e 20 28 69 2e 65 2e 2c 20 54 │ eaders. (i.e., T
    0x4c0 │ 68 65 79 20 61 72 65 20 6e 6f 74 20 73 65 61 72 │ hey are not sear
    0x4d0 │ 63 68 65 64 2c 20 61 6e 61 6c 79 7a 65 64 2c 0a │ ched, analyzed,.
    0x4e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x4f0 │ 20 20 20 20 20 20 20 20 20 20 20 73 6c 69 63 65 │            slice
    0x500 │ 64 2c 20 65 74 63 2e 29 0a 20 20 20 20 2d 64 2c │ d, etc.).    -d,
    0x510 │ 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 │  --delimiter <ar
    0x520 │ 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 │ g>  The field de
    0x530 │ 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 64 │ limiter for read
    0x540 │ 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 │ ing CSV data..  
    0x550 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x560 │ 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 65 │          Must be
    0x570 │ 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 63 │  a single charac
    0x580 │ 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 2c │ ter. (default: ,
    0x590 │ 29 0a                                           │ ).
}

fn cmd::select::run::{closure#0}(_1: &mut {closure@src/cmd/select.rs:74:41: 74:45}, _2: &usize) -> &[u8] {
    debug headers => (*((*_1).0: &csv::ByteRecord));
    let mut _0: &[u8];
    let _3: usize;
    let mut _4: &csv::ByteRecord;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _3 = (*_2);
        _4 = deref_copy ((*_1).0: &csv::ByteRecord);
        _0 = <ByteRecord as Index<usize>>::index(_4, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::select::run::{closure#1}(_1: &mut {closure@src/cmd/select.rs:78:41: 78:45}, _2: &usize) -> &[u8] {
    debug record => (*((*_1).0: &csv::ByteRecord));
    let mut _0: &[u8];
    let _3: usize;
    let mut _4: &csv::ByteRecord;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _3 = (*_2);
        _4 = deref_copy ((*_1).0: &csv::ByteRecord);
        _0 = <ByteRecord as Index<usize>>::index(_4, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static cmd::slice::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nReturns the rows in the range specified (starting at 0, half-open interval).\nThe range does not include headers.\n\nIf the start of the range isn't specified, then the slice starts from the first\nrecord in the CSV data.\n\nIf the end of the range isn't specified, then the slice continues to the last\nrecord in the CSV data.\n\nThis operation can be made much faster by creating an index with 'xsv index'\nfirst. Namely, a slice on an index requires parsing just the rows that are\nsliced. Without an index, all rows up to the first row in the slice must be\nparsed.\n\nUsage:\n    xsv slice [options] [<input>]\n\nslice options:\n    -s, --start <arg>      The index of the record to slice from.\n    -e, --end <arg>        The index of the record to slice to.\n    -l, --len <arg>        The length of the slice (can be used instead\n                           of --end).\n    -i, --index <arg>      Slice a single record (shortcut for -s N -l 1).\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. Otherwise, the first row will always\n                           appear in the output as the header row.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const cmd::slice::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize(_1: __D) -> Result<cmd::slice::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::slice::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::slice::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::expecting(_1: &cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_u64(_1: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E> {
    debug self => const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _4: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _5: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _6: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _7: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _8: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _9: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _10: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _11: __E;
    let mut _12: serde::de::Unexpected<'_>;
    let mut _13: &dyn serde::de::Expected;
    let mut _14: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, otherwise: bb1];
    }

    bb1: {
        _12 = Unexpected::<'_>::Unsigned(_2);
        _14 = const _;
        _13 = _14 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <__E as serde::de::Error>::invalid_value(move _12, move _13) -> [return: bb10, unwind continue];
    }

    bb2: {
        _3 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb11;
    }

    bb3: {
        _4 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb11;
    }

    bb4: {
        _5 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb11;
    }

    bb5: {
        _6 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb6: {
        _7 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb7: {
        _8 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb8: {
        _9 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb11;
    }

    bb9: {
        _10 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb11;
    }

    bb10: {
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Err(move _11);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

promoted[0] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 8";
        _0 = &_1;
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_str(_1: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E> {
    debug self => const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _12: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _13: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _14: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _15: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _16: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _17: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _18: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _19: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;

    bb0: {
        _10 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb24, unwind continue];
    }

    bb1: {
        _11 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb25;
    }

    bb2: {
        _9 = <str as PartialEq>::eq(_2, const "flag_start") -> [return: bb23, unwind continue];
    }

    bb3: {
        _12 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb25;
    }

    bb4: {
        _8 = <str as PartialEq>::eq(_2, const "flag_end") -> [return: bb22, unwind continue];
    }

    bb5: {
        _13 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb25;
    }

    bb6: {
        _7 = <str as PartialEq>::eq(_2, const "flag_len") -> [return: bb21, unwind continue];
    }

    bb7: {
        _14 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb25;
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_2, const "flag_index") -> [return: bb20, unwind continue];
    }

    bb9: {
        _15 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb25;
    }

    bb10: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb19, unwind continue];
    }

    bb11: {
        _16 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb25;
    }

    bb12: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb18, unwind continue];
    }

    bb13: {
        _17 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb25;
    }

    bb14: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb17, unwind continue];
    }

    bb15: {
        _18 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb25;
    }

    bb16: {
        _19 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb25;
    }

    bb17: {
        switchInt(move _3) -> [0: bb16, otherwise: bb15];
    }

    bb18: {
        switchInt(move _4) -> [0: bb14, otherwise: bb13];
    }

    bb19: {
        switchInt(move _5) -> [0: bb12, otherwise: bb11];
    }

    bb20: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb21: {
        switchInt(move _7) -> [0: bb8, otherwise: bb7];
    }

    bb22: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb23: {
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb24: {
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb25: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_bytes(_1: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E> {
    debug self => const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _22: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _23: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _24: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _25: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _26: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _27: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _28: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
    let mut _29: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb80, otherwise: bb10];
    }

    bb10: {
        _29 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb88;
    }

    bb11: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb26, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 10]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 10]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 10]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 10]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 10]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 10]) -> [115: bb18, 105: bb22, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 10]) -> [116: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 10]) -> [97: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 10]) -> [114: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 10]) -> [116: bb81, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[6 of 10]) -> [110: bb23, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[7 of 10]) -> [100: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[8 of 10]) -> [101: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[9 of 10]) -> [120: bb84, otherwise: bb10];
    }

    bb26: {
        _12 = Len((*_2));
        _13 = const 8_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb37, otherwise: bb27];
    }

    bb27: {
        switchInt((*_2)[0 of 8]) -> [102: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[1 of 8]) -> [108: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[2 of 8]) -> [97: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[3 of 8]) -> [103: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[4 of 8]) -> [95: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[5 of 8]) -> [101: bb33, 108: bb35, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[6 of 8]) -> [110: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[7 of 8]) -> [100: bb82, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[6 of 8]) -> [101: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[7 of 8]) -> [110: bb83, otherwise: bb10];
    }

    bb37: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb49, otherwise: bb38];
    }

    bb38: {
        switchInt((*_2)[0 of 11]) -> [102: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[1 of 11]) -> [108: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[2 of 11]) -> [97: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[3 of 11]) -> [103: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[4 of 11]) -> [95: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[5 of 11]) -> [111: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[6 of 11]) -> [117: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[7 of 11]) -> [116: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[8 of 11]) -> [112: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[9 of 11]) -> [117: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[10 of 11]) -> [116: bb85, otherwise: bb10];
    }

    bb49: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb65, otherwise: bb50];
    }

    bb50: {
        switchInt((*_2)[0 of 15]) -> [102: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[1 of 15]) -> [108: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[2 of 15]) -> [97: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[3 of 15]) -> [103: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[4 of 15]) -> [95: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[5 of 15]) -> [110: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[6 of 15]) -> [111: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[7 of 15]) -> [95: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[8 of 15]) -> [104: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[9 of 15]) -> [101: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[10 of 15]) -> [97: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[11 of 15]) -> [100: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[12 of 15]) -> [101: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[13 of 15]) -> [114: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[14 of 15]) -> [115: bb86, otherwise: bb10];
    }

    bb65: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb66];
    }

    bb66: {
        switchInt((*_2)[0 of 14]) -> [102: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[1 of 14]) -> [108: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[2 of 14]) -> [97: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[3 of 14]) -> [103: bb70, otherwise: bb10];
    }

    bb70: {
        switchInt((*_2)[4 of 14]) -> [95: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[5 of 14]) -> [100: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[6 of 14]) -> [101: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[7 of 14]) -> [108: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[8 of 14]) -> [105: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[9 of 14]) -> [109: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[10 of 14]) -> [105: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[11 of 14]) -> [116: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[12 of 14]) -> [101: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[13 of 14]) -> [114: bb87, otherwise: bb10];
    }

    bb80: {
        _21 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb88;
    }

    bb81: {
        _22 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb88;
    }

    bb82: {
        _23 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb88;
    }

    bb83: {
        _24 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb88;
    }

    bb84: {
        _25 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb88;
    }

    bb85: {
        _26 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb88;
    }

    bb86: {
        _27 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb88;
    }

    bb87: {
        _28 = cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb88;
    }

    bb88: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize(_1: __D) -> Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor>(move _1, const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::expecting(_1: &cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq(_1: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::slice::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::slice::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::slice::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn serde::de::Expected;
    let mut _40: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: isize;
    let mut _47: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _48: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: isize;
    let mut _66: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _67: &dyn serde::de::Expected;
    let mut _68: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: isize;
    let mut _75: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _76: &dyn serde::de::Expected;
    let mut _77: cmd::slice::Args;
    let mut _78: std::option::Option<std::string::String>;
    let mut _79: std::option::Option<std::string::String>;
    let mut _80: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<usize>>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<usize>;
        let mut _81: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<std::option::Option<usize>>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: std::option::Option<usize>;
            let mut _82: &&str;
            scope 9 {
                debug __field2 => _28;
                let _34: std::option::Option<std::option::Option<usize>>;
                let _35: <__A as serde::de::SeqAccess<'_>>::Error;
                let _37: std::option::Option<usize>;
                let mut _83: &&str;
                scope 13 {
                    debug __field3 => _37;
                    let _43: std::option::Option<std::option::Option<usize>>;
                    let _44: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _46: std::option::Option<usize>;
                    let mut _84: &&str;
                    scope 17 {
                        debug __field4 => _46;
                        let _49: std::option::Option<std::string::String>;
                        let _53: std::option::Option<std::option::Option<std::string::String>>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: std::option::Option<std::string::String>;
                        let mut _85: &&str;
                        scope 21 {
                            debug __field5 => _49;
                            let _62: std::option::Option<bool>;
                            let _63: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _65: bool;
                            let mut _86: &&str;
                            scope 25 {
                                debug __field6 => _65;
                                let _71: std::option::Option<std::option::Option<config::Delimiter>>;
                                let _72: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _74: std::option::Option<config::Delimiter>;
                                let mut _87: &&str;
                                scope 29 {
                                    debug __field7 => _74;
                                }
                                scope 30 {
                                    debug __val => _71;
                                }
                                scope 31 {
                                    debug __err => _72;
                                }
                                scope 32 {
                                    debug __value => _74;
                                }
                            }
                            scope 26 {
                                debug __val => _62;
                            }
                            scope 27 {
                                debug __err => _63;
                            }
                            scope 28 {
                                debug __value => _65;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _43;
                    }
                    scope 19 {
                        debug __err => _44;
                    }
                    scope 20 {
                        debug __value => _46;
                    }
                }
                scope 14 {
                    debug __val => _34;
                }
                scope 15 {
                    debug __err => _35;
                }
                scope 16 {
                    debug __value => _37;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb56];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb52;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _80 = const _;
        _12 = _80 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb56];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_14) -> [return: bb8, unwind: bb55];
    }

    bb7: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb52;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb51;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _81 = const _;
        _21 = _81 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb55];
    }

    bb12: {
        _19 = ((_16 as Some).0: std::option::Option<usize>);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_23) -> [return: bb14, unwind: bb55];
    }

    bb13: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb51;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb51;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _82 = const _;
        _30 = _82 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb55];
    }

    bb18: {
        _28 = ((_25 as Some).0: std::option::Option<usize>);
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_32) -> [return: bb20, unwind: bb55];
    }

    bb19: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb51;
    }

    bb20: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _35 = move ((_31 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb51;
    }

    bb22: {
        _34 = ((_31 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _83 = const _;
        _39 = _83 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb25, unwind: bb55];
    }

    bb24: {
        _37 = ((_34 as Some).0: std::option::Option<usize>);
        _41 = &mut _2;
        _40 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_41) -> [return: bb26, unwind: bb55];
    }

    bb25: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb51;
    }

    bb26: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _44 = move ((_40 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _44);
        goto -> bb51;
    }

    bb28: {
        _43 = ((_40 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _84 = const _;
        _48 = _84 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _47 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _48) -> [return: bb31, unwind: bb55];
    }

    bb30: {
        _46 = ((_43 as Some).0: std::option::Option<usize>);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_51) -> [return: bb32, unwind: bb55];
    }

    bb31: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _47);
        goto -> bb51;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb51;
    }

    bb34: {
        _53 = move ((_50 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _85 = const _;
        _58 = _85 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb55];
    }

    bb36: {
        _56 = move ((_53 as Some).0: std::option::Option<std::string::String>);
        _49 = move _56;
        _60 = &mut _2;
        _59 = <__A as SeqAccess<'_>>::next_element::<bool>(_60) -> [return: bb38, unwind: bb54];
    }

    bb37: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb51;
    }

    bb38: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _63 = move ((_59 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _63);
        goto -> bb50;
    }

    bb40: {
        _62 = ((_59 as Ok).0: std::option::Option<bool>);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _86 = const _;
        _67 = _86 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _66 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb43, unwind: bb54];
    }

    bb42: {
        _65 = ((_62 as Some).0: bool);
        _69 = &mut _2;
        _68 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_69) -> [return: bb44, unwind: bb54];
    }

    bb43: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb50;
    }

    bb44: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _72 = move ((_68 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _72);
        goto -> bb50;
    }

    bb46: {
        _71 = ((_68 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _87 = const _;
        _76 = _87 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _75 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _76) -> [return: bb49, unwind: bb54];
    }

    bb48: {
        _74 = ((_71 as Some).0: std::option::Option<config::Delimiter>);
        _78 = move _3;
        _79 = move _49;
        _77 = cmd::slice::Args { arg_input: move _78, flag_start: _19, flag_end: _28, flag_len: _37, flag_index: _46, flag_output: move _79, flag_no_headers: _65, flag_delimiter: _74 };
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _77);
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb49: {
        _0 = Result::<cmd::slice::Args, <__A as SeqAccess<'_>>::Error>::Err(move _75);
        goto -> bb50;
    }

    bb50: {
        drop(_49) -> [return: bb51, unwind: bb55];
    }

    bb51: {
        drop(_3) -> [return: bb52, unwind: bb56];
    }

    bb52: {
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_49) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_2) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 8 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::<impl at src/cmd/slice.rs:44:10: 44:21>::visit_map(_1: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::slice::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::slice::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::slice::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _11: std::result::Result<std::option::Option<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _12: &mut __A;
    let mut _13: isize;
    let mut _16: isize;
    let mut _18: isize;
    let mut _19: bool;
    let _20: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _21: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _22: std::option::Option<std::option::Option<std::string::String>>;
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: bool;
    let _29: &std::option::Option<std::option::Option<usize>>;
    let mut _30: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _31: std::option::Option<std::option::Option<usize>>;
    let mut _32: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: bool;
    let _38: &std::option::Option<std::option::Option<usize>>;
    let mut _39: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _40: std::option::Option<std::option::Option<usize>>;
    let mut _41: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: bool;
    let _47: &std::option::Option<std::option::Option<usize>>;
    let mut _48: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _49: std::option::Option<std::option::Option<usize>>;
    let mut _50: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: bool;
    let _56: &std::option::Option<std::option::Option<usize>>;
    let mut _57: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _58: std::option::Option<std::option::Option<usize>>;
    let mut _59: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: bool;
    let _65: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _66: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _67: std::option::Option<std::option::Option<std::string::String>>;
    let mut _68: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: bool;
    let _74: &std::option::Option<bool>;
    let mut _75: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _76: std::option::Option<bool>;
    let mut _77: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _78: &mut __A;
    let mut _79: isize;
    let mut _82: bool;
    let _83: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _84: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _85: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _86: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _87: &mut __A;
    let mut _88: isize;
    let mut _91: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _92: &mut __A;
    let mut _93: isize;
    let mut _96: isize;
    let mut _98: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _99: isize;
    let mut _103: isize;
    let mut _105: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _106: isize;
    let mut _110: isize;
    let mut _112: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _113: isize;
    let mut _117: isize;
    let mut _119: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _120: isize;
    let mut _124: isize;
    let mut _126: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _127: isize;
    let mut _131: isize;
    let mut _133: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _134: isize;
    let mut _138: isize;
    let mut _140: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _141: isize;
    let mut _145: isize;
    let mut _147: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _148: isize;
    let mut _151: cmd::slice::Args;
    let mut _152: std::option::Option<std::string::String>;
    let mut _153: std::option::Option<usize>;
    let mut _154: std::option::Option<usize>;
    let mut _155: std::option::Option<usize>;
    let mut _156: std::option::Option<usize>;
    let mut _157: std::option::Option<std::string::String>;
    let mut _158: bool;
    let mut _159: std::option::Option<config::Delimiter>;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<usize>>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::option::Option<usize>>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<usize>>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<usize>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<std::string::String>>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<bool>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<std::option::Option<config::Delimiter>>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let _95: std::option::Option<std::string::String>;
                                    let _97: std::option::Option<std::string::String>;
                                    let _100: std::option::Option<std::string::String>;
                                    let _101: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __key => _17;
                                        let _14: std::option::Option<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field>;
                                        let _15: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _17: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field;
                                        let _26: std::option::Option<std::string::String>;
                                        let _27: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _35: std::option::Option<usize>;
                                        let _36: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _44: std::option::Option<usize>;
                                        let _45: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _53: std::option::Option<usize>;
                                        let _54: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _62: std::option::Option<usize>;
                                        let _63: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _71: std::option::Option<std::string::String>;
                                        let _72: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _80: bool;
                                        let _81: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _89: std::option::Option<config::Delimiter>;
                                        let _90: <__A as serde::de::MapAccess<'_>>::Error;
                                        let _94: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 10 {
                                            debug __val => _14;
                                        }
                                        scope 11 {
                                            debug __err => _15;
                                        }
                                        scope 12 {
                                            debug __val => _26;
                                        }
                                        scope 13 {
                                            debug __err => _27;
                                        }
                                        scope 14 {
                                            debug __val => _35;
                                        }
                                        scope 15 {
                                            debug __err => _36;
                                        }
                                        scope 16 {
                                            debug __val => _44;
                                        }
                                        scope 17 {
                                            debug __err => _45;
                                        }
                                        scope 18 {
                                            debug __val => _53;
                                        }
                                        scope 19 {
                                            debug __err => _54;
                                        }
                                        scope 20 {
                                            debug __val => _62;
                                        }
                                        scope 21 {
                                            debug __err => _63;
                                        }
                                        scope 22 {
                                            debug __val => _71;
                                        }
                                        scope 23 {
                                            debug __err => _72;
                                        }
                                        scope 24 {
                                            debug __val => _80;
                                        }
                                        scope 25 {
                                            debug __err => _81;
                                        }
                                        scope 26 {
                                            debug __val => _89;
                                        }
                                        scope 27 {
                                            debug __err => _90;
                                        }
                                        scope 28 {
                                        }
                                        scope 29 {
                                            debug __val => const IgnoredAny;
                                        }
                                        scope 30 {
                                            debug __err => _94;
                                        }
                                    }
                                    scope 31 {
                                        debug __field0 => _95;
                                        let _102: std::option::Option<usize>;
                                        let _104: std::option::Option<usize>;
                                        let _107: std::option::Option<usize>;
                                        let _108: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 35 {
                                            debug __field1 => _102;
                                            let _109: std::option::Option<usize>;
                                            let _111: std::option::Option<usize>;
                                            let _114: std::option::Option<usize>;
                                            let _115: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 39 {
                                                debug __field2 => _109;
                                                let _116: std::option::Option<usize>;
                                                let _118: std::option::Option<usize>;
                                                let _121: std::option::Option<usize>;
                                                let _122: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 43 {
                                                    debug __field3 => _116;
                                                    let _123: std::option::Option<usize>;
                                                    let _125: std::option::Option<usize>;
                                                    let _128: std::option::Option<usize>;
                                                    let _129: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 47 {
                                                        debug __field4 => _123;
                                                        let _130: std::option::Option<std::string::String>;
                                                        let _132: std::option::Option<std::string::String>;
                                                        let _135: std::option::Option<std::string::String>;
                                                        let _136: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 51 {
                                                            debug __field5 => _130;
                                                            let _137: bool;
                                                            let _139: bool;
                                                            let _142: bool;
                                                            let _143: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 55 {
                                                                debug __field6 => _137;
                                                                let _144: std::option::Option<config::Delimiter>;
                                                                let _146: std::option::Option<config::Delimiter>;
                                                                let _149: std::option::Option<config::Delimiter>;
                                                                let _150: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 59 {
                                                                    debug __field7 => _144;
                                                                }
                                                                scope 60 {
                                                                    debug __field7 => _146;
                                                                }
                                                                scope 61 {
                                                                    debug __val => _149;
                                                                }
                                                                scope 62 {
                                                                    debug __err => _150;
                                                                }
                                                            }
                                                            scope 56 {
                                                                debug __field6 => _139;
                                                            }
                                                            scope 57 {
                                                                debug __val => _142;
                                                            }
                                                            scope 58 {
                                                                debug __err => _143;
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug __field5 => _132;
                                                        }
                                                        scope 53 {
                                                            debug __val => _135;
                                                        }
                                                        scope 54 {
                                                            debug __err => _136;
                                                        }
                                                    }
                                                    scope 48 {
                                                        debug __field4 => _125;
                                                    }
                                                    scope 49 {
                                                        debug __val => _128;
                                                    }
                                                    scope 50 {
                                                        debug __err => _129;
                                                    }
                                                }
                                                scope 44 {
                                                    debug __field3 => _118;
                                                }
                                                scope 45 {
                                                    debug __val => _121;
                                                }
                                                scope 46 {
                                                    debug __err => _122;
                                                }
                                            }
                                            scope 40 {
                                                debug __field2 => _111;
                                            }
                                            scope 41 {
                                                debug __val => _114;
                                            }
                                            scope 42 {
                                                debug __err => _115;
                                            }
                                        }
                                        scope 36 {
                                            debug __field1 => _104;
                                        }
                                        scope 37 {
                                            debug __val => _107;
                                        }
                                        scope 38 {
                                            debug __err => _108;
                                        }
                                    }
                                    scope 32 {
                                        debug __field0 => _97;
                                    }
                                    scope 33 {
                                        debug __val => _100;
                                    }
                                    scope 34 {
                                        debug __err => _101;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _161 = const false;
        _160 = const false;
        _161 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<std::option::Option<usize>>::None;
        _5 = std::option::Option::<std::option::Option<usize>>::None;
        _6 = std::option::Option::<std::option::Option<usize>>::None;
        _7 = std::option::Option::<std::option::Option<usize>>::None;
        _160 = const true;
        _8 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _9 = std::option::Option::<bool>::None;
        _10 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _12 = &mut _2;
        _11 = <__A as MapAccess<'_>>::next_key::<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field>(_12) -> [return: bb2, unwind: bb144];
    }

    bb2: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _15 = move ((_11 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb129;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _14 = move ((_11 as Ok).0: std::option::Option<cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field>);
        _16 = discriminant(_14);
        switchInt(move _16) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _96 = discriminant(_3);
        switchInt(move _96) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb7: {
        _17 = move ((_14 as Some).0: cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::slice::Args>::deserialize::__Field);
        _18 = discriminant(_17);
        switchInt(move _18) -> [0: bb9, 1: bb19, 2: bb27, 3: bb35, 4: bb43, 5: bb51, 6: bb61, 7: bb69, otherwise: bb8];
    }

    bb8: {
        _92 = &mut _2;
        _91 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_92) -> [return: bb77, unwind: bb144];
    }

    bb9: {
        _20 = &_3;
        _19 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_20) -> [return: bb10, unwind: bb144];
    }

    bb10: {
        switchInt(move _19) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _21 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb144];
    }

    bb12: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb129;
    }

    bb13: {
        _24 = &mut _2;
        _23 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_24) -> [return: bb14, unwind: bb144];
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _27);
        goto -> bb129;
    }

    bb16: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>);
        _22 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _26);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _161 = const true;
        _3 = move _22;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _161 = const true;
        _3 = move _22;
        goto -> bb144;
    }

    bb19: {
        _29 = &_4;
        _28 = std::option::Option::<std::option::Option<usize>>::is_some(_29) -> [return: bb20, unwind: bb144];
    }

    bb20: {
        switchInt(move _28) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _30 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_start") -> [return: bb22, unwind: bb144];
    }

    bb22: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb129;
    }

    bb23: {
        _33 = &mut _2;
        _32 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_33) -> [return: bb24, unwind: bb144];
    }

    bb24: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _36 = move ((_32 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb129;
    }

    bb26: {
        _35 = ((_32 as Ok).0: std::option::Option<usize>);
        _31 = std::option::Option::<std::option::Option<usize>>::Some(_35);
        _4 = move _31;
        goto -> bb1;
    }

    bb27: {
        _38 = &_5;
        _37 = std::option::Option::<std::option::Option<usize>>::is_some(_38) -> [return: bb28, unwind: bb144];
    }

    bb28: {
        switchInt(move _37) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _39 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_end") -> [return: bb30, unwind: bb144];
    }

    bb30: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _39);
        goto -> bb129;
    }

    bb31: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_42) -> [return: bb32, unwind: bb144];
    }

    bb32: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _45 = move ((_41 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _45);
        goto -> bb129;
    }

    bb34: {
        _44 = ((_41 as Ok).0: std::option::Option<usize>);
        _40 = std::option::Option::<std::option::Option<usize>>::Some(_44);
        _5 = move _40;
        goto -> bb1;
    }

    bb35: {
        _47 = &_6;
        _46 = std::option::Option::<std::option::Option<usize>>::is_some(_47) -> [return: bb36, unwind: bb144];
    }

    bb36: {
        switchInt(move _46) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _48 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_len") -> [return: bb38, unwind: bb144];
    }

    bb38: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _48);
        goto -> bb129;
    }

    bb39: {
        _51 = &mut _2;
        _50 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_51) -> [return: bb40, unwind: bb144];
    }

    bb40: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _54 = move ((_50 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb129;
    }

    bb42: {
        _53 = ((_50 as Ok).0: std::option::Option<usize>);
        _49 = std::option::Option::<std::option::Option<usize>>::Some(_53);
        _6 = move _49;
        goto -> bb1;
    }

    bb43: {
        _56 = &_7;
        _55 = std::option::Option::<std::option::Option<usize>>::is_some(_56) -> [return: bb44, unwind: bb144];
    }

    bb44: {
        switchInt(move _55) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        _57 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_index") -> [return: bb46, unwind: bb144];
    }

    bb46: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _57);
        goto -> bb129;
    }

    bb47: {
        _60 = &mut _2;
        _59 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_60) -> [return: bb48, unwind: bb144];
    }

    bb48: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb50, 1: bb49, otherwise: bb4];
    }

    bb49: {
        _63 = move ((_59 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _63);
        goto -> bb129;
    }

    bb50: {
        _62 = ((_59 as Ok).0: std::option::Option<usize>);
        _58 = std::option::Option::<std::option::Option<usize>>::Some(_62);
        _7 = move _58;
        goto -> bb1;
    }

    bb51: {
        _65 = &_8;
        _64 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_65) -> [return: bb52, unwind: bb144];
    }

    bb52: {
        switchInt(move _64) -> [0: bb55, otherwise: bb53];
    }

    bb53: {
        _66 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb54, unwind: bb144];
    }

    bb54: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _66);
        goto -> bb129;
    }

    bb55: {
        _69 = &mut _2;
        _68 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_69) -> [return: bb56, unwind: bb144];
    }

    bb56: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        _72 = move ((_68 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _72);
        goto -> bb129;
    }

    bb58: {
        _71 = move ((_68 as Ok).0: std::option::Option<std::string::String>);
        _67 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _71);
        drop(_8) -> [return: bb59, unwind: bb60];
    }

    bb59: {
        _160 = const true;
        _8 = move _67;
        goto -> bb1;
    }

    bb60 (cleanup): {
        _160 = const true;
        _8 = move _67;
        goto -> bb144;
    }

    bb61: {
        _74 = &_9;
        _73 = std::option::Option::<bool>::is_some(_74) -> [return: bb62, unwind: bb144];
    }

    bb62: {
        switchInt(move _73) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _75 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb64, unwind: bb144];
    }

    bb64: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb129;
    }

    bb65: {
        _78 = &mut _2;
        _77 = <__A as MapAccess<'_>>::next_value::<bool>(_78) -> [return: bb66, unwind: bb144];
    }

    bb66: {
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _81 = move ((_77 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _81);
        goto -> bb129;
    }

    bb68: {
        _80 = ((_77 as Ok).0: bool);
        _76 = std::option::Option::<bool>::Some(_80);
        _9 = move _76;
        goto -> bb1;
    }

    bb69: {
        _83 = &_10;
        _82 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_83) -> [return: bb70, unwind: bb144];
    }

    bb70: {
        switchInt(move _82) -> [0: bb73, otherwise: bb71];
    }

    bb71: {
        _84 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb72, unwind: bb144];
    }

    bb72: {
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb129;
    }

    bb73: {
        _87 = &mut _2;
        _86 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_87) -> [return: bb74, unwind: bb144];
    }

    bb74: {
        _88 = discriminant(_86);
        switchInt(move _88) -> [0: bb76, 1: bb75, otherwise: bb4];
    }

    bb75: {
        _90 = move ((_86 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _90);
        goto -> bb129;
    }

    bb76: {
        _89 = ((_86 as Ok).0: std::option::Option<config::Delimiter>);
        _85 = std::option::Option::<std::option::Option<Delimiter>>::Some(_89);
        _10 = move _85;
        goto -> bb1;
    }

    bb77: {
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb1, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _94 = move ((_91 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb129;
    }

    bb79: {
        _98 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb81, unwind: bb144];
    }

    bb80: {
        _161 = const false;
        _97 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _95 = move _97;
        goto -> bb84;
    }

    bb81: {
        _99 = discriminant(_98);
        switchInt(move _99) -> [0: bb83, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _101 = move ((_98 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _101);
        goto -> bb129;
    }

    bb83: {
        _100 = move ((_98 as Ok).0: std::option::Option<std::string::String>);
        _95 = move _100;
        goto -> bb84;
    }

    bb84: {
        _103 = discriminant(_4);
        switchInt(move _103) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        _105 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_start") -> [return: bb87, unwind: bb132];
    }

    bb86: {
        _104 = ((_4 as Some).0: std::option::Option<usize>);
        _102 = _104;
        goto -> bb90;
    }

    bb87: {
        _106 = discriminant(_105);
        switchInt(move _106) -> [0: bb89, 1: bb88, otherwise: bb4];
    }

    bb88: {
        _108 = move ((_105 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _108);
        goto -> bb128;
    }

    bb89: {
        _107 = ((_105 as Ok).0: std::option::Option<usize>);
        _102 = _107;
        goto -> bb90;
    }

    bb90: {
        _110 = discriminant(_5);
        switchInt(move _110) -> [0: bb91, 1: bb92, otherwise: bb4];
    }

    bb91: {
        _112 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_end") -> [return: bb93, unwind: bb132];
    }

    bb92: {
        _111 = ((_5 as Some).0: std::option::Option<usize>);
        _109 = _111;
        goto -> bb96;
    }

    bb93: {
        _113 = discriminant(_112);
        switchInt(move _113) -> [0: bb95, 1: bb94, otherwise: bb4];
    }

    bb94: {
        _115 = move ((_112 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _115);
        goto -> bb128;
    }

    bb95: {
        _114 = ((_112 as Ok).0: std::option::Option<usize>);
        _109 = _114;
        goto -> bb96;
    }

    bb96: {
        _117 = discriminant(_6);
        switchInt(move _117) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        _119 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_len") -> [return: bb99, unwind: bb132];
    }

    bb98: {
        _118 = ((_6 as Some).0: std::option::Option<usize>);
        _116 = _118;
        goto -> bb102;
    }

    bb99: {
        _120 = discriminant(_119);
        switchInt(move _120) -> [0: bb101, 1: bb100, otherwise: bb4];
    }

    bb100: {
        _122 = move ((_119 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _122);
        goto -> bb128;
    }

    bb101: {
        _121 = ((_119 as Ok).0: std::option::Option<usize>);
        _116 = _121;
        goto -> bb102;
    }

    bb102: {
        _124 = discriminant(_7);
        switchInt(move _124) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        _126 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_index") -> [return: bb105, unwind: bb132];
    }

    bb104: {
        _125 = ((_7 as Some).0: std::option::Option<usize>);
        _123 = _125;
        goto -> bb108;
    }

    bb105: {
        _127 = discriminant(_126);
        switchInt(move _127) -> [0: bb107, 1: bb106, otherwise: bb4];
    }

    bb106: {
        _129 = move ((_126 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _129);
        goto -> bb128;
    }

    bb107: {
        _128 = ((_126 as Ok).0: std::option::Option<usize>);
        _123 = _128;
        goto -> bb108;
    }

    bb108: {
        _131 = discriminant(_8);
        switchInt(move _131) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        _133 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb111, unwind: bb132];
    }

    bb110: {
        _160 = const false;
        _132 = move ((_8 as Some).0: std::option::Option<std::string::String>);
        _130 = move _132;
        goto -> bb114;
    }

    bb111: {
        _134 = discriminant(_133);
        switchInt(move _134) -> [0: bb113, 1: bb112, otherwise: bb4];
    }

    bb112: {
        _136 = move ((_133 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _136);
        goto -> bb128;
    }

    bb113: {
        _135 = move ((_133 as Ok).0: std::option::Option<std::string::String>);
        _130 = move _135;
        goto -> bb114;
    }

    bb114: {
        _138 = discriminant(_9);
        switchInt(move _138) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        _140 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb117, unwind: bb131];
    }

    bb116: {
        _139 = ((_9 as Some).0: bool);
        _137 = _139;
        goto -> bb120;
    }

    bb117: {
        _141 = discriminant(_140);
        switchInt(move _141) -> [0: bb119, 1: bb118, otherwise: bb4];
    }

    bb118: {
        _143 = move ((_140 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _143);
        goto -> bb127;
    }

    bb119: {
        _142 = ((_140 as Ok).0: bool);
        _137 = _142;
        goto -> bb120;
    }

    bb120: {
        _145 = discriminant(_10);
        switchInt(move _145) -> [0: bb121, 1: bb122, otherwise: bb4];
    }

    bb121: {
        _147 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb123, unwind: bb131];
    }

    bb122: {
        _146 = ((_10 as Some).0: std::option::Option<config::Delimiter>);
        _144 = _146;
        goto -> bb126;
    }

    bb123: {
        _148 = discriminant(_147);
        switchInt(move _148) -> [0: bb125, 1: bb124, otherwise: bb4];
    }

    bb124: {
        _150 = move ((_147 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Err(move _150);
        goto -> bb127;
    }

    bb125: {
        _149 = ((_147 as Ok).0: std::option::Option<config::Delimiter>);
        _144 = _149;
        goto -> bb126;
    }

    bb126: {
        _152 = move _95;
        _153 = _102;
        _154 = _109;
        _155 = _116;
        _156 = _123;
        _157 = move _130;
        _158 = _137;
        _159 = _144;
        _151 = cmd::slice::Args { arg_input: move _152, flag_start: move _153, flag_end: move _154, flag_len: move _155, flag_index: move _156, flag_output: move _157, flag_no_headers: move _158, flag_delimiter: move _159 };
        _0 = Result::<cmd::slice::Args, <__A as MapAccess<'_>>::Error>::Ok(move _151);
        _160 = const false;
        _161 = const false;
        drop(_2) -> [return: bb130, unwind continue];
    }

    bb127: {
        drop(_130) -> [return: bb128, unwind: bb132];
    }

    bb128: {
        drop(_95) -> [return: bb129, unwind: bb144];
    }

    bb129: {
        _162 = discriminant(_8);
        switchInt(move _162) -> [1: bb137, otherwise: bb136];
    }

    bb130: {
        return;
    }

    bb131 (cleanup): {
        drop(_130) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_95) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        _165 = discriminant(_3);
        switchInt(move _165) -> [1: bb145, otherwise: bb134];
    }

    bb134 (cleanup): {
        drop(_2) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        resume;
    }

    bb136: {
        _160 = const false;
        _163 = discriminant(_3);
        switchInt(move _163) -> [1: bb140, otherwise: bb139];
    }

    bb137: {
        switchInt(_160) -> [0: bb136, otherwise: bb138];
    }

    bb138: {
        drop(((_8 as Some).0: std::option::Option<std::string::String>)) -> [return: bb136, unwind: bb133];
    }

    bb139: {
        _161 = const false;
        drop(_2) -> [return: bb130, unwind continue];
    }

    bb140: {
        switchInt(_161) -> [0: bb139, otherwise: bb141];
    }

    bb141: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb139, unwind: bb134];
    }

    bb142 (cleanup): {
        switchInt(_160) -> [0: bb133, otherwise: bb143];
    }

    bb143 (cleanup): {
        drop(((_8 as Some).0: std::option::Option<std::string::String>)) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        _164 = discriminant(_8);
        switchInt(move _164) -> [1: bb142, otherwise: bb133];
    }

    bb145 (cleanup): {
        switchInt(_161) -> [0: bb134, otherwise: bb146];
    }

    bb146 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb134, unwind terminate(cleanup)];
    }
}

const cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 8];
    let _2: &[&str; 8];
    let _3: [&str; 8];
    let mut _4: &[&str; 8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::slice::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/slice.rs:44:10: 44:21>::deserialize::FIELDS: &[&str; 8] = {
    let mut _0: &[&str; 8];
    let mut _1: [&str; 8];

    bb0: {
        _1 = [const "arg_input", const "flag_start", const "flag_end", const "flag_len", const "flag_index", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn cmd::slice::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::slice::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::slice::Args>;
    let mut _4: std::result::Result<cmd::slice::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::slice::Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _10: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _11: &config::Config;
    let _12: config::Config;
    let mut _13: &cmd::slice::Args;
    let mut _14: isize;
    let mut _17: isize;
    let mut _18: &cmd::slice::Args;
    let mut _20: &cmd::slice::Args;
    let mut _21: &str;
    scope 1 {
        debug args => _2;
        let _15: std::result::Result<std::convert::Infallible, CliError>;
        let _16: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
        let _19: index::Indexed<std::fs::File, std::fs::File>;
        scope 6 {
            debug residual => _15;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _16;
            scope 9 {
            }
        }
        scope 10 {
            debug idxed => _19;
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc25: &&str};
        _21 = deref_copy (*_5);
        _4 = get_args::<cmd::slice::Args>(_21, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::slice::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::slice::Args);
        _2 = move _8;
        _13 = &_2;
        _12 = cmd::slice::Args::rconfig(move _13) -> [return: bb6, unwind: bb22];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb17, unwind continue];
    }

    bb6: {
        _11 = &_12;
        _10 = Config::indexed(move _11) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _9 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _10) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _16 = move ((_9 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb13, 1: bb12, otherwise: bb4];
    }

    bb10: {
        _15 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _15) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        drop(_2) -> [return: bb16, unwind: bb21];
    }

    bb12: {
        _19 = move ((_16 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _20 = &_2;
        _0 = cmd::slice::Args::with_index(move _20, move _19) -> [return: bb24, unwind: bb18];
    }

    bb13: {
        _18 = &_2;
        _0 = cmd::slice::Args::no_index(move _18) -> [return: bb25, unwind: bb18];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        drop(_12) -> [return: bb17, unwind continue];
    }

    bb16: {
        drop(_12) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_12) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        goto -> bb14;
    }

    bb25: {
        goto -> bb14;
    }
}

alloc25 (static: cmd::slice::USAGE, size: 16, align: 8) {
    ╾───alloc1399<imm>────╼ 8d 05 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1399 (size: 1421, align: 1) {
    0x000 │ 0a 52 65 74 75 72 6e 73 20 74 68 65 20 72 6f 77 │ .Returns the row
    0x010 │ 73 20 69 6e 20 74 68 65 20 72 61 6e 67 65 20 73 │ s in the range s
    0x020 │ 70 65 63 69 66 69 65 64 20 28 73 74 61 72 74 69 │ pecified (starti
    0x030 │ 6e 67 20 61 74 20 30 2c 20 68 61 6c 66 2d 6f 70 │ ng at 0, half-op
    0x040 │ 65 6e 20 69 6e 74 65 72 76 61 6c 29 2e 0a 54 68 │ en interval)..Th
    0x050 │ 65 20 72 61 6e 67 65 20 64 6f 65 73 20 6e 6f 74 │ e range does not
    0x060 │ 20 69 6e 63 6c 75 64 65 20 68 65 61 64 65 72 73 │  include headers
    0x070 │ 2e 0a 0a 49 66 20 74 68 65 20 73 74 61 72 74 20 │ ...If the start 
    0x080 │ 6f 66 20 74 68 65 20 72 61 6e 67 65 20 69 73 6e │ of the range isn
    0x090 │ 27 74 20 73 70 65 63 69 66 69 65 64 2c 20 74 68 │ 't specified, th
    0x0a0 │ 65 6e 20 74 68 65 20 73 6c 69 63 65 20 73 74 61 │ en the slice sta
    0x0b0 │ 72 74 73 20 66 72 6f 6d 20 74 68 65 20 66 69 72 │ rts from the fir
    0x0c0 │ 73 74 0a 72 65 63 6f 72 64 20 69 6e 20 74 68 65 │ st.record in the
    0x0d0 │ 20 43 53 56 20 64 61 74 61 2e 0a 0a 49 66 20 74 │  CSV data...If t
    0x0e0 │ 68 65 20 65 6e 64 20 6f 66 20 74 68 65 20 72 61 │ he end of the ra
    0x0f0 │ 6e 67 65 20 69 73 6e 27 74 20 73 70 65 63 69 66 │ nge isn't specif
    0x100 │ 69 65 64 2c 20 74 68 65 6e 20 74 68 65 20 73 6c │ ied, then the sl
    0x110 │ 69 63 65 20 63 6f 6e 74 69 6e 75 65 73 20 74 6f │ ice continues to
    0x120 │ 20 74 68 65 20 6c 61 73 74 0a 72 65 63 6f 72 64 │  the last.record
    0x130 │ 20 69 6e 20 74 68 65 20 43 53 56 20 64 61 74 61 │  in the CSV data
    0x140 │ 2e 0a 0a 54 68 69 73 20 6f 70 65 72 61 74 69 6f │ ...This operatio
    0x150 │ 6e 20 63 61 6e 20 62 65 20 6d 61 64 65 20 6d 75 │ n can be made mu
    0x160 │ 63 68 20 66 61 73 74 65 72 20 62 79 20 63 72 65 │ ch faster by cre
    0x170 │ 61 74 69 6e 67 20 61 6e 20 69 6e 64 65 78 20 77 │ ating an index w
    0x180 │ 69 74 68 20 27 78 73 76 20 69 6e 64 65 78 27 0a │ ith 'xsv index'.
    0x190 │ 66 69 72 73 74 2e 20 4e 61 6d 65 6c 79 2c 20 61 │ first. Namely, a
    0x1a0 │ 20 73 6c 69 63 65 20 6f 6e 20 61 6e 20 69 6e 64 │  slice on an ind
    0x1b0 │ 65 78 20 72 65 71 75 69 72 65 73 20 70 61 72 73 │ ex requires pars
    0x1c0 │ 69 6e 67 20 6a 75 73 74 20 74 68 65 20 72 6f 77 │ ing just the row
    0x1d0 │ 73 20 74 68 61 74 20 61 72 65 0a 73 6c 69 63 65 │ s that are.slice
    0x1e0 │ 64 2e 20 57 69 74 68 6f 75 74 20 61 6e 20 69 6e │ d. Without an in
    0x1f0 │ 64 65 78 2c 20 61 6c 6c 20 72 6f 77 73 20 75 70 │ dex, all rows up
    0x200 │ 20 74 6f 20 74 68 65 20 66 69 72 73 74 20 72 6f │  to the first ro
    0x210 │ 77 20 69 6e 20 74 68 65 20 73 6c 69 63 65 20 6d │ w in the slice m
    0x220 │ 75 73 74 20 62 65 0a 70 61 72 73 65 64 2e 0a 0a │ ust be.parsed...
    0x230 │ 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 73 │ Usage:.    xsv s
    0x240 │ 6c 69 63 65 20 5b 6f 70 74 69 6f 6e 73 5d 20 5b │ lice [options] [
    0x250 │ 3c 69 6e 70 75 74 3e 5d 0a 0a 73 6c 69 63 65 20 │ <input>]..slice 
    0x260 │ 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 73 2c │ options:.    -s,
    0x270 │ 20 2d 2d 73 74 61 72 74 20 3c 61 72 67 3e 20 20 │  --start <arg>  
    0x280 │ 20 20 20 20 54 68 65 20 69 6e 64 65 78 20 6f 66 │     The index of
    0x290 │ 20 74 68 65 20 72 65 63 6f 72 64 20 74 6f 20 73 │  the record to s
    0x2a0 │ 6c 69 63 65 20 66 72 6f 6d 2e 0a 20 20 20 20 2d │ lice from..    -
    0x2b0 │ 65 2c 20 2d 2d 65 6e 64 20 3c 61 72 67 3e 20 20 │ e, --end <arg>  
    0x2c0 │ 20 20 20 20 20 20 54 68 65 20 69 6e 64 65 78 20 │       The index 
    0x2d0 │ 6f 66 20 74 68 65 20 72 65 63 6f 72 64 20 74 6f │ of the record to
    0x2e0 │ 20 73 6c 69 63 65 20 74 6f 2e 0a 20 20 20 20 2d │  slice to..    -
    0x2f0 │ 6c 2c 20 2d 2d 6c 65 6e 20 3c 61 72 67 3e 20 20 │ l, --len <arg>  
    0x300 │ 20 20 20 20 20 20 54 68 65 20 6c 65 6e 67 74 68 │       The length
    0x310 │ 20 6f 66 20 74 68 65 20 73 6c 69 63 65 20 28 63 │  of the slice (c
    0x320 │ 61 6e 20 62 65 20 75 73 65 64 20 69 6e 73 74 65 │ an be used inste
    0x330 │ 61 64 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ad.             
    0x340 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 6f 66 │               of
    0x350 │ 20 2d 2d 65 6e 64 29 2e 0a 20 20 20 20 2d 69 2c │  --end)..    -i,
    0x360 │ 20 2d 2d 69 6e 64 65 78 20 3c 61 72 67 3e 20 20 │  --index <arg>  
    0x370 │ 20 20 20 20 53 6c 69 63 65 20 61 20 73 69 6e 67 │     Slice a sing
    0x380 │ 6c 65 20 72 65 63 6f 72 64 20 28 73 68 6f 72 74 │ le record (short
    0x390 │ 63 75 74 20 66 6f 72 20 2d 73 20 4e 20 2d 6c 20 │ cut for -s N -l 
    0x3a0 │ 31 29 2e 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 │ 1)...Common opti
    0x3b0 │ 6f 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 │ ons:.    -h, --h
    0x3c0 │ 65 6c 70 20 20 20 20 20 20 20 20 20 20 20 20 20 │ elp             
    0x3d0 │ 44 69 73 70 6c 61 79 20 74 68 69 73 20 6d 65 73 │ Display this mes
    0x3e0 │ 73 61 67 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f │ sage.    -o, --o
    0x3f0 │ 75 74 70 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 │ utput <file>    
    0x400 │ 57 72 69 74 65 20 6f 75 74 70 75 74 20 74 6f 20 │ Write output to 
    0x410 │ 3c 66 69 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f │ <file> instead o
    0x420 │ 66 20 73 74 64 6f 75 74 2e 0a 20 20 20 20 2d 6e │ f stdout..    -n
    0x430 │ 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 20 20 │ , --no-headers  
    0x440 │ 20 20 20 20 20 57 68 65 6e 20 73 65 74 2c 20 74 │      When set, t
    0x450 │ 68 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 6c │ he first row wil
    0x460 │ 6c 20 6e 6f 74 20 62 65 20 69 6e 74 65 72 70 72 │ l not be interpr
    0x470 │ 65 74 65 64 0a 20 20 20 20 20 20 20 20 20 20 20 │ eted.           
    0x480 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x490 │ 61 73 20 68 65 61 64 65 72 73 2e 20 4f 74 68 65 │ as headers. Othe
    0x4a0 │ 72 77 69 73 65 2c 20 74 68 65 20 66 69 72 73 74 │ rwise, the first
    0x4b0 │ 20 72 6f 77 20 77 69 6c 6c 20 61 6c 77 61 79 73 │  row will always
    0x4c0 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x4d0 │ 20 20 20 20 20 20 20 20 20 20 20 20 61 70 70 65 │             appe
    0x4e0 │ 61 72 20 69 6e 20 74 68 65 20 6f 75 74 70 75 74 │ ar in the output
    0x4f0 │ 20 61 73 20 74 68 65 20 68 65 61 64 65 72 20 72 │  as the header r
    0x500 │ 6f 77 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 65 │ ow..    -d, --de
    0x510 │ 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 54 │ limiter <arg>  T
    0x520 │ 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 74 │ he field delimit
    0x530 │ 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 43 │ er for reading C
    0x540 │ 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 20 │ SV data..       
    0x550 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x560 │ 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 69 │     Must be a si
    0x570 │ 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e 20 │ ngle character. 
    0x580 │ 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a          │ (default: ,).
}

fn cmd::slice::<impl at src/cmd/slice.rs:64:1: 64:10>::no_index(_1: &cmd::slice::Args) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let mut _2: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _4: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _12: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _13: &config::Config;
    let _14: config::Config;
    let mut _15: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _19: std::result::Result<(), csv::Error>;
    let mut _20: &config::Config;
    let _21: config::Config;
    let mut _22: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _23: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _24: isize;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, (usize, usize)>;
    let mut _29: std::result::Result<(usize, usize), std::string::String>;
    let mut _30: isize;
    let mut _33: std::iter::Take<std::iter::Skip<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>>;
    let mut _34: std::iter::Take<std::iter::Skip<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>>;
    let mut _35: std::iter::Skip<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>;
    let mut _36: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _37: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _38: usize;
    let mut _39: (usize, bool);
    let mut _41: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _42: &mut std::iter::Take<std::iter::Skip<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>>;
    let mut _43: isize;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _46: std::result::Result<(), csv::Error>;
    let mut _47: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _48: &csv::ByteRecord;
    let _49: csv::ByteRecord;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _51: isize;
    let mut _54: isize;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _57: std::result::Result<(), std::io::Error>;
    let mut _58: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _59: isize;
    let mut _61: bool;
    scope 1 {
        debug rdr => _2;
        let mut _10: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        let _16: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _17: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        scope 6 {
            debug wtr => _10;
            let _25: std::result::Result<std::convert::Infallible, csv::Error>;
            let _26: usize;
            let _27: usize;
            let _31: std::result::Result<std::convert::Infallible, std::string::String>;
            let _32: (usize, usize);
            scope 11 {
                debug residual => _25;
                scope 12 {
                }
            }
            scope 13 {
                debug val => const ();
                scope 14 {
                }
            }
            scope 15 {
                debug start => _26;
                debug end => _27;
                let mut _40: std::iter::Take<std::iter::Skip<csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>>>;
                let _60: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 20 {
                    debug iter => _40;
                    let _44: std::result::Result<csv::ByteRecord, csv::Error>;
                    scope 21 {
                        debug r => _44;
                        let _52: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _53: csv::ByteRecord;
                        let _55: std::result::Result<std::convert::Infallible, csv::Error>;
                        scope 22 {
                            debug residual => _52;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _53;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug residual => _55;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => const ();
                            scope 29 {
                            }
                        }
                    }
                }
                scope 30 {
                    debug residual => _60;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug val => const ();
                    scope 33 {
                    }
                }
            }
            scope 16 {
                debug residual => _31;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _32;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _61 = const false;
        _6 = cmd::slice::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::reader(move _5) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        _3 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _4) -> [return: bb3, unwind: bb63];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_3 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _2 = move _9;
        drop(_6) -> [return: bb8, unwind: bb62];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        drop(_6) -> [return: bb54, unwind continue];
    }

    bb8: {
        _14 = cmd::slice::Args::wconfig(_1) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        _13 = &_14;
        _12 = Config::writer(move _13) -> [return: bb10, unwind: bb61];
    }

    bb10: {
        _11 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _12) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        _17 = move ((_11 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _10 = move _17;
        drop(_14) -> [return: bb15, unwind: bb60];
    }

    bb13: {
        _16 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        drop(_14) -> [return: bb53, unwind: bb62];
    }

    bb15: {
        _21 = cmd::slice::Args::rconfig(_1) -> [return: bb16, unwind: bb60];
    }

    bb16: {
        _20 = &_21;
        _22 = &mut _2;
        _23 = &mut _10;
        _19 = Config::write_headers::<Box<dyn std::io::Read>, Box<dyn std::io::Write>>(move _20, _22, _23) -> [return: bb17, unwind: bb59];
    }

    bb17: {
        _18 = <Result<(), csv::Error> as Try>::branch(move _19) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        _24 = discriminant(_18);
        switchInt(move _24) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        drop(_21) -> [return: bb22, unwind: bb60];
    }

    bb20: {
        _25 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _25) -> [return: bb21, unwind: bb59];
    }

    bb21: {
        drop(_21) -> [return: bb52, unwind: bb60];
    }

    bb22: {
        _29 = cmd::slice::Args::range(_1) -> [return: bb23, unwind: bb60];
    }

    bb23: {
        _28 = <Result<(usize, usize), std::string::String> as Try>::branch(move _29) -> [return: bb24, unwind: bb60];
    }

    bb24: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        _32 = ((_28 as Continue).0: (usize, usize));
        _26 = (_32.0: usize);
        _27 = (_32.1: usize);
        _37 = &mut _2;
        _36 = Reader::<Box<dyn std::io::Read>>::byte_records(move _37) -> [return: bb27, unwind: bb60];
    }

    bb26: {
        _31 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _31) -> [return: bb68, unwind: bb60];
    }

    bb27: {
        _35 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as Iterator>::skip(move _36, _26) -> [return: bb28, unwind: bb60];
    }

    bb28: {
        _61 = const true;
        _39 = CheckedSub(_27, _26);
        assert(!move (_39.1: bool), "attempt to compute `{} - {}`, which would overflow", _27, _26) -> [success: bb29, unwind: bb67];
    }

    bb29: {
        _38 = move (_39.0: usize);
        _61 = const false;
        _34 = <Skip<ByteRecordsIter<'_, Box<dyn std::io::Read>>> as Iterator>::take(move _35, move _38) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        _61 = const false;
        _33 = <std::iter::Take<Skip<ByteRecordsIter<'_, Box<dyn std::io::Read>>>> as IntoIterator>::into_iter(move _34) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        _40 = move _33;
        goto -> bb32;
    }

    bb32: {
        _42 = &mut _40;
        _41 = <std::iter::Take<Skip<ByteRecordsIter<'_, Box<dyn std::io::Read>>>> as Iterator>::next(_42) -> [return: bb33, unwind: bb58];
    }

    bb33: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb35, 1: bb34, otherwise: bb5];
    }

    bb34: {
        _44 = move ((_41 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _47 = &mut _10;
        _50 = <Result<ByteRecord, csv::Error> as Try>::branch(move _44) -> [return: bb36, unwind: bb58];
    }

    bb35: {
        drop(_40) -> [return: bb44, unwind: bb60];
    }

    bb36: {
        _51 = discriminant(_50);
        switchInt(move _51) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        _53 = move ((_50 as Continue).0: csv::ByteRecord);
        _49 = move _53;
        _48 = &_49;
        _46 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _47, _48) -> [return: bb39, unwind: bb57];
    }

    bb38: {
        _52 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _52) -> [return: bb69, unwind: bb58];
    }

    bb39: {
        _45 = <Result<(), csv::Error> as Try>::branch(move _46) -> [return: bb40, unwind: bb57];
    }

    bb40: {
        _54 = discriminant(_45);
        switchInt(move _54) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        drop(_49) -> [return: bb32, unwind: bb58];
    }

    bb42: {
        _55 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _55) -> [return: bb43, unwind: bb57];
    }

    bb43: {
        drop(_49) -> [return: bb65, unwind: bb58];
    }

    bb44: {
        _58 = &mut _10;
        _57 = Writer::<Box<dyn std::io::Write>>::flush(move _58) -> [return: bb45, unwind: bb60];
    }

    bb45: {
        _56 = <Result<(), std::io::Error> as Try>::branch(move _57) -> [return: bb46, unwind: bb60];
    }

    bb46: {
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_10) -> [return: bb50, unwind: bb56];
    }

    bb48: {
        _60 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _60) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        drop(_10) -> [return: bb51, unwind: bb56];
    }

    bb50: {
        drop(_2) -> [return: bb54, unwind continue];
    }

    bb51: {
        drop(_2) -> [return: bb54, unwind continue];
    }

    bb52: {
        drop(_10) -> [return: bb53, unwind: bb62];
    }

    bb53: {
        drop(_2) -> [return: bb54, unwind continue];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_10) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_2) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_49) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_40) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_21) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_10) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_14) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_2) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65: {
        drop(_40) -> [return: bb52, unwind: bb60];
    }

    bb66 (cleanup): {
        drop(_35) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_61) -> [0: bb60, otherwise: bb66];
    }

    bb68: {
        goto -> bb52;
    }

    bb69: {
        goto -> bb65;
    }
}

fn cmd::slice::<impl at src/cmd/slice.rs:64:1: 64:10>::with_index(_1: &cmd::slice::Args, _2: Indexed<File, File>) -> Result<(), CliError> {
    debug self => _1;
    debug idx => _2;
    let mut _0: std::result::Result<(), CliError>;
    let mut _3: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _5: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _6: &config::Config;
    let _7: config::Config;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _10: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _12: std::result::Result<(), csv::Error>;
    let mut _13: &config::Config;
    let _14: config::Config;
    let mut _15: &mut csv::Reader<std::fs::File>;
    let mut _16: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _17: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _18: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, (usize, usize)>;
    let mut _23: std::result::Result<(usize, usize), std::string::String>;
    let mut _24: isize;
    let mut _27: usize;
    let mut _28: (usize, bool);
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>>;
    let mut _30: std::result::Result<(), CliError>;
    let mut _31: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _32: u64;
    let mut _33: isize;
    let mut _35: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _36: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _37: csv::ByteRecordsIter<'_, std::fs::File>;
    let mut _38: &mut csv::Reader<std::fs::File>;
    let mut _39: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _40: usize;
    let mut _41: (usize, bool);
    let mut _43: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _44: &mut std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _45: isize;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _48: std::result::Result<(), csv::Error>;
    let mut _49: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _50: &csv::ByteRecord;
    let _51: csv::ByteRecord;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _59: std::result::Result<(), std::io::Error>;
    let mut _60: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _61: isize;
    let mut _63: bool;
    scope 1 {
        debug wtr => _3;
        let _19: std::result::Result<std::convert::Infallible, csv::Error>;
        let _20: usize;
        let _21: usize;
        let _25: std::result::Result<std::convert::Infallible, std::string::String>;
        let _26: (usize, usize);
        scope 6 {
            debug residual => _19;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
        scope 10 {
            debug start => _20;
            debug end => _21;
            let _34: std::result::Result<std::convert::Infallible, CliError>;
            let mut _42: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
            let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 15 {
                debug residual => _34;
                scope 16 {
                }
            }
            scope 17 {
                debug val => const ();
                scope 18 {
                }
            }
            scope 19 {
                debug iter => _42;
                let _46: std::result::Result<csv::ByteRecord, csv::Error>;
                scope 20 {
                    debug r => _46;
                    let _54: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _55: csv::ByteRecord;
                    let _57: std::result::Result<std::convert::Infallible, csv::Error>;
                    scope 21 {
                        debug residual => _54;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _55;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug residual => _57;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => const ();
                        scope 28 {
                        }
                    }
                }
            }
            scope 29 {
                debug residual => _62;
                scope 30 {
                }
            }
            scope 31 {
                debug val => const ();
                scope 32 {
                }
            }
        }
        scope 11 {
            debug residual => _25;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _26;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _63 = const false;
        _7 = cmd::slice::Args::wconfig(_1) -> [return: bb1, unwind: bb59];
    }

    bb1: {
        _6 = &_7;
        _5 = Config::writer(move _6) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _4 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb58];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_4 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _3 = move _10;
        drop(_7) -> [return: bb8, unwind: bb57];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb7, unwind: bb58];
    }

    bb7: {
        drop(_7) -> [return: bb52, unwind: bb59];
    }

    bb8: {
        _14 = cmd::slice::Args::rconfig(_1) -> [return: bb9, unwind: bb57];
    }

    bb9: {
        _13 = &_14;
        _16 = &mut _2;
        _15 = <Indexed<File, File> as DerefMut>::deref_mut(move _16) -> [return: bb10, unwind: bb56];
    }

    bb10: {
        _17 = &mut _3;
        _12 = Config::write_headers::<File, Box<dyn std::io::Write>>(move _13, _15, _17) -> [return: bb11, unwind: bb56];
    }

    bb11: {
        _11 = <Result<(), csv::Error> as Try>::branch(move _12) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        _18 = discriminant(_11);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        drop(_14) -> [return: bb16, unwind: bb57];
    }

    bb14: {
        _19 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _19) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        drop(_14) -> [return: bb51, unwind: bb57];
    }

    bb16: {
        _23 = cmd::slice::Args::range(_1) -> [return: bb17, unwind: bb57];
    }

    bb17: {
        _22 = <Result<(usize, usize), std::string::String> as Try>::branch(move _23) -> [return: bb18, unwind: bb57];
    }

    bb18: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        _26 = ((_22 as Continue).0: (usize, usize));
        _20 = (_26.0: usize);
        _21 = (_26.1: usize);
        _28 = CheckedSub(_21, _20);
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", _21, _20) -> [success: bb21, unwind: bb57];
    }

    bb20: {
        _25 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _25) -> [return: bb64, unwind: bb57];
    }

    bb21: {
        _27 = move (_28.0: usize);
        switchInt(move _27) -> [0: bb22, otherwise: bb23];
    }

    bb22: {
        _0 = Result::<(), CliError>::Ok(const ());
        goto -> bb51;
    }

    bb23: {
        _31 = &mut _2;
        _32 = _20 as u64 (IntToInt);
        _30 = Indexed::<File, File>::seek(move _31, move _32) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        _29 = <Result<(), CliError> as Try>::branch(move _30) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        _39 = &mut _2;
        _38 = <Indexed<File, File> as DerefMut>::deref_mut(move _39) -> [return: bb28, unwind: bb57];
    }

    bb27: {
        _34 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _34) -> [return: bb65, unwind: bb57];
    }

    bb28: {
        _37 = Reader::<File>::byte_records(_38) -> [return: bb29, unwind: bb57];
    }

    bb29: {
        _63 = const true;
        _41 = CheckedSub(_21, _20);
        assert(!move (_41.1: bool), "attempt to compute `{} - {}`, which would overflow", _21, _20) -> [success: bb30, unwind: bb63];
    }

    bb30: {
        _40 = move (_41.0: usize);
        _63 = const false;
        _36 = <ByteRecordsIter<'_, File> as Iterator>::take(move _37, move _40) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        _63 = const false;
        _35 = <std::iter::Take<ByteRecordsIter<'_, File>> as IntoIterator>::into_iter(move _36) -> [return: bb32, unwind: bb57];
    }

    bb32: {
        _42 = move _35;
        goto -> bb33;
    }

    bb33: {
        _44 = &mut _42;
        _43 = <std::iter::Take<ByteRecordsIter<'_, File>> as Iterator>::next(_44) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb36, 1: bb35, otherwise: bb5];
    }

    bb35: {
        _46 = move ((_43 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _49 = &mut _3;
        _52 = <Result<ByteRecord, csv::Error> as Try>::branch(move _46) -> [return: bb37, unwind: bb55];
    }

    bb36: {
        drop(_42) -> [return: bb45, unwind: bb57];
    }

    bb37: {
        _53 = discriminant(_52);
        switchInt(move _53) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        _55 = move ((_52 as Continue).0: csv::ByteRecord);
        _51 = move _55;
        _50 = &_51;
        _48 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _49, _50) -> [return: bb40, unwind: bb54];
    }

    bb39: {
        _54 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _54) -> [return: bb66, unwind: bb55];
    }

    bb40: {
        _47 = <Result<(), csv::Error> as Try>::branch(move _48) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        _56 = discriminant(_47);
        switchInt(move _56) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        drop(_51) -> [return: bb33, unwind: bb55];
    }

    bb43: {
        _57 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _57) -> [return: bb44, unwind: bb54];
    }

    bb44: {
        drop(_51) -> [return: bb61, unwind: bb55];
    }

    bb45: {
        _60 = &mut _3;
        _59 = Writer::<Box<dyn std::io::Write>>::flush(move _60) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        _58 = <Result<(), std::io::Error> as Try>::branch(move _59) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb48, 1: bb49, otherwise: bb5];
    }

    bb48: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_3) -> [return: bb50, unwind: bb59];
    }

    bb49: {
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _62) -> [return: bb67, unwind: bb57];
    }

    bb50: {
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb51: {
        drop(_3) -> [return: bb52, unwind: bb59];
    }

    bb52: {
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_51) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_42) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_14) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_3) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_7) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_2) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }

    bb61: {
        drop(_42) -> [return: bb51, unwind: bb57];
    }

    bb62 (cleanup): {
        drop(_37) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_63) -> [0: bb57, otherwise: bb62];
    }

    bb64: {
        goto -> bb51;
    }

    bb65: {
        goto -> bb51;
    }

    bb66: {
        goto -> bb61;
    }

    bb67: {
        goto -> bb51;
    }
}

fn cmd::slice::<impl at src/cmd/slice.rs:64:1: 64:10>::range(_1: &cmd::slice::Args) -> Result<(usize, usize), std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<(usize, usize), std::string::String>;
    let mut _2: std::option::Option<usize>;
    let mut _3: std::option::Option<usize>;
    let mut _4: std::option::Option<usize>;
    let mut _5: std::option::Option<usize>;

    bb0: {
        _2 = ((*_1).1: std::option::Option<usize>);
        _3 = ((*_1).2: std::option::Option<usize>);
        _4 = ((*_1).3: std::option::Option<usize>);
        _5 = ((*_1).4: std::option::Option<usize>);
        _0 = util::range(move _2, move _3, move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::slice::<impl at src/cmd/slice.rs:64:1: 64:10>::rconfig(_1: &cmd::slice::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let _4: &std::option::Option<std::string::String>;
    let mut _5: std::option::Option<config::Delimiter>;
    let mut _6: bool;

    bb0: {
        _4 = &((*_1).0: std::option::Option<std::string::String>);
        _3 = Config::new(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_1).7: std::option::Option<config::Delimiter>);
        _2 = Config::delimiter(move _3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = ((*_1).6: bool);
        _0 = Config::no_headers(move _2, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn cmd::slice::<impl at src/cmd/slice.rs:64:1: 64:10>::wconfig(_1: &cmd::slice::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let _2: &std::option::Option<std::string::String>;

    bb0: {
        _2 = &((*_1).5: std::option::Option<std::string::String>);
        _0 = Config::new(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static sort::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nSorts CSV data lexicographically.\n\nNote that this requires reading all of the CSV data into memory.\n\nUsage:\n    xsv sort [options] [<input>]\n\nsort options:\n    -s, --select <arg>     Select a subset of columns to sort.\n                           See 'xsv select --help' for the format details.\n    -N, --numeric          Compare according to string numerical value\n    -R, --reverse          Reverse order\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will not be interpreted\n                           as headers. Namely, it will be sorted with the rest\n                           of the rows. Otherwise, the first row will always\n                           appear as the header row in the output.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const sort::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<sort::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::sort::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sort::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::expecting(_1: &sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_u64(_1: sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E> {
    debug self => const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _4: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _5: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _6: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _7: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _8: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _9: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _10: __E;
    let mut _11: serde::de::Unexpected<'_>;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1];
    }

    bb1: {
        _11 = Unexpected::<'_>::Unsigned(_2);
        _13 = const _;
        _12 = _13 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <__E as serde::de::Error>::invalid_value(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb2: {
        _3 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field0;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field1;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb10;
    }

    bb4: {
        _5 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field2;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field3;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb6: {
        _7 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field4;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field5;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb8: {
        _9 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field6;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 7";
        _0 = &_1;
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_str(_1: sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E> {
    debug self => const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _11: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _12: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _13: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _14: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _15: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _16: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _17: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;

    bb0: {
        _9 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb21, unwind continue];
    }

    bb1: {
        _10 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field0;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb22;
    }

    bb2: {
        _8 = <str as PartialEq>::eq(_2, const "flag_select") -> [return: bb20, unwind continue];
    }

    bb3: {
        _11 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field1;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb22;
    }

    bb4: {
        _7 = <str as PartialEq>::eq(_2, const "flag_numeric") -> [return: bb19, unwind continue];
    }

    bb5: {
        _12 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field2;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb22;
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "flag_reverse") -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field3;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb22;
    }

    bb8: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb17, unwind continue];
    }

    bb9: {
        _14 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field4;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb22;
    }

    bb10: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field5;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb22;
    }

    bb12: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb15, unwind continue];
    }

    bb13: {
        _16 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field6;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb22;
    }

    bb14: {
        _17 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__ignore;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb16: {
        switchInt(move _4) -> [0: bb12, otherwise: bb11];
    }

    bb17: {
        switchInt(move _5) -> [0: bb10, otherwise: bb9];
    }

    bb18: {
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb19: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb20: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb21: {
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb22: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_bytes(_1: sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E> {
    debug self => const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _19: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _20: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _21: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _22: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _23: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _24: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
    let mut _25: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;

    bb0: {
        _15 = Len((*_2));
        _16 = const 9_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb78, otherwise: bb10];
    }

    bb10: {
        _25 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__ignore;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb85;
    }

    bb11: {
        _12 = Len((*_2));
        _13 = const 11_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb28, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 11]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 11]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 11]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 11]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 11]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 11]) -> [115: bb18, 111: bb23, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 11]) -> [101: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 11]) -> [108: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 11]) -> [101: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 11]) -> [99: bb22, otherwise: bb10];
    }

    bb22: {
        switchInt((*_2)[10 of 11]) -> [116: bb79, otherwise: bb10];
    }

    bb23: {
        switchInt((*_2)[6 of 11]) -> [117: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[7 of 11]) -> [116: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[8 of 11]) -> [112: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[9 of 11]) -> [117: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[10 of 11]) -> [116: bb82, otherwise: bb10];
    }

    bb28: {
        _9 = Len((*_2));
        _10 = const 12_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb47, otherwise: bb29];
    }

    bb29: {
        switchInt((*_2)[0 of 12]) -> [102: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[1 of 12]) -> [108: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[2 of 12]) -> [97: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[3 of 12]) -> [103: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[4 of 12]) -> [95: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[5 of 12]) -> [110: bb35, 114: bb41, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[6 of 12]) -> [117: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[7 of 12]) -> [109: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[8 of 12]) -> [101: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[9 of 12]) -> [114: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[10 of 12]) -> [105: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[11 of 12]) -> [99: bb80, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[6 of 12]) -> [101: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[7 of 12]) -> [118: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[8 of 12]) -> [101: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[9 of 12]) -> [114: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[10 of 12]) -> [115: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[11 of 12]) -> [101: bb81, otherwise: bb10];
    }

    bb47: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb63, otherwise: bb48];
    }

    bb48: {
        switchInt((*_2)[0 of 15]) -> [102: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[1 of 15]) -> [108: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[2 of 15]) -> [97: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[3 of 15]) -> [103: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[4 of 15]) -> [95: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[5 of 15]) -> [110: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[6 of 15]) -> [111: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[7 of 15]) -> [95: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[8 of 15]) -> [104: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[9 of 15]) -> [101: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[10 of 15]) -> [97: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[11 of 15]) -> [100: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[12 of 15]) -> [101: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[13 of 15]) -> [114: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[14 of 15]) -> [115: bb83, otherwise: bb10];
    }

    bb63: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb64];
    }

    bb64: {
        switchInt((*_2)[0 of 14]) -> [102: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[1 of 14]) -> [108: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[2 of 14]) -> [97: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[3 of 14]) -> [103: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[4 of 14]) -> [95: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[5 of 14]) -> [100: bb70, otherwise: bb10];
    }

    bb70: {
        switchInt((*_2)[6 of 14]) -> [101: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[7 of 14]) -> [108: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[8 of 14]) -> [105: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[9 of 14]) -> [109: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[10 of 14]) -> [105: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[11 of 14]) -> [116: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[12 of 14]) -> [101: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[13 of 14]) -> [114: bb84, otherwise: bb10];
    }

    bb78: {
        _18 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field0;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb85;
    }

    bb79: {
        _19 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field1;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb85;
    }

    bb80: {
        _20 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field2;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb85;
    }

    bb81: {
        _21 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field3;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb85;
    }

    bb82: {
        _22 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field4;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb85;
    }

    bb83: {
        _23 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field5;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb85;
    }

    bb84: {
        _24 = sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field::__field6;
        _0 = Result::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb85;
    }

    bb85: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize(_1: __D) -> Result<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor>(move _1, const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::expecting(_1: &sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq(_1: sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<sort::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sort::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::sort::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _42: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: isize;
    let mut _49: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _50: &dyn serde::de::Expected;
    let mut _51: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _59: &dyn serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn serde::de::Expected;
    let mut _69: cmd::sort::Args;
    let mut _70: std::option::Option<std::string::String>;
    let mut _71: select::SelectColumns;
    let mut _72: std::option::Option<std::string::String>;
    let mut _73: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: select::SelectColumns;
        let _17: std::option::Option<select::SelectColumns>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: select::SelectColumns;
        let mut _74: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<bool>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: bool;
            let mut _75: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _76: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _41: std::option::Option<std::string::String>;
                    let _45: std::option::Option<std::option::Option<std::string::String>>;
                    let _46: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _48: std::option::Option<std::string::String>;
                    let mut _77: &&str;
                    scope 17 {
                        debug __field4 => _41;
                        let _54: std::option::Option<bool>;
                        let _55: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _57: bool;
                        let mut _78: &&str;
                        scope 21 {
                            debug __field5 => _57;
                            let _63: std::option::Option<std::option::Option<config::Delimiter>>;
                            let _64: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _66: std::option::Option<config::Delimiter>;
                            let mut _79: &&str;
                            scope 25 {
                                debug __field6 => _66;
                            }
                            scope 26 {
                                debug __val => _63;
                            }
                            scope 27 {
                                debug __err => _64;
                            }
                            scope 28 {
                                debug __value => _66;
                            }
                        }
                        scope 22 {
                            debug __val => _54;
                        }
                        scope 23 {
                            debug __err => _55;
                        }
                        scope 24 {
                            debug __value => _57;
                        }
                    }
                    scope 18 {
                        debug __val => _45;
                    }
                    scope 19 {
                        debug __err => _46;
                    }
                    scope 20 {
                        debug __value => _48;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb47;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _73 = const _;
        _12 = _73 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb52];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_15) -> [return: bb8, unwind: bb51];
    }

    bb7: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb47;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb46;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<select::SelectColumns>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _74 = const _;
        _22 = _74 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb51];
    }

    bb12: {
        _20 = move ((_17 as Some).0: select::SelectColumns);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<bool>(_24) -> [return: bb14, unwind: bb50];
    }

    bb13: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb46;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb45;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<bool>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _75 = const _;
        _31 = _75 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb50];
    }

    bb18: {
        _29 = ((_26 as Some).0: bool);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb50];
    }

    bb19: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb45;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb45;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _76 = const _;
        _40 = _76 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb50];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _43 = &mut _2;
        _42 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_43) -> [return: bb26, unwind: bb50];
    }

    bb25: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb45;
    }

    bb26: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _46 = move ((_42 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _46);
        goto -> bb45;
    }

    bb28: {
        _45 = move ((_42 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _47 = discriminant(_45);
        switchInt(move _47) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _77 = const _;
        _50 = _77 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _49 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _50) -> [return: bb31, unwind: bb50];
    }

    bb30: {
        _48 = move ((_45 as Some).0: std::option::Option<std::string::String>);
        _41 = move _48;
        _52 = &mut _2;
        _51 = <__A as SeqAccess<'_>>::next_element::<bool>(_52) -> [return: bb32, unwind: bb49];
    }

    bb31: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _49);
        goto -> bb45;
    }

    bb32: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _55 = move ((_51 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _55);
        goto -> bb44;
    }

    bb34: {
        _54 = ((_51 as Ok).0: std::option::Option<bool>);
        _56 = discriminant(_54);
        switchInt(move _56) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _78 = const _;
        _59 = _78 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _58 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _59) -> [return: bb37, unwind: bb49];
    }

    bb36: {
        _57 = ((_54 as Some).0: bool);
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_61) -> [return: bb38, unwind: bb49];
    }

    bb37: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _58);
        goto -> bb44;
    }

    bb38: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _64 = move ((_60 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb44;
    }

    bb40: {
        _63 = ((_60 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _79 = const _;
        _68 = _79 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb43, unwind: bb49];
    }

    bb42: {
        _66 = ((_63 as Some).0: std::option::Option<config::Delimiter>);
        _70 = move _3;
        _71 = move _13;
        _72 = move _41;
        _69 = sort::Args { arg_input: move _70, flag_select: move _71, flag_numeric: _29, flag_reverse: _38, flag_output: move _72, flag_no_headers: _57, flag_delimiter: _66 };
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _69);
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb43: {
        _0 = Result::<sort::Args, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb44;
    }

    bb44: {
        drop(_41) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        drop(_13) -> [return: bb46, unwind: bb51];
    }

    bb46: {
        drop(_3) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_41) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_13) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}

promoted[0] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

fn sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::<impl at src/cmd/sort.rs:36:10: 36:21>::visit_map(_1: sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<sort::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<sort::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::sort::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _10: std::result::Result<std::option::Option<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: bool;
    let _19: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _20: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _21: std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: bool;
    let _28: &std::option::Option<select::SelectColumns>;
    let mut _29: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<select::SelectColumns>;
    let mut _31: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<bool>;
    let mut _38: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<bool>;
    let mut _40: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<bool>;
    let mut _47: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<bool>;
    let mut _49: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _56: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<std::option::Option<std::string::String>>;
    let mut _58: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<bool>;
    let mut _65: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<bool>;
    let mut _67: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _74: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _76: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _82: &mut __A;
    let mut _83: isize;
    let mut _86: isize;
    let mut _88: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _89: isize;
    let mut _93: isize;
    let mut _95: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _96: isize;
    let mut _100: isize;
    let mut _102: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _103: isize;
    let mut _107: isize;
    let mut _109: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _110: isize;
    let mut _114: isize;
    let mut _116: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _117: isize;
    let mut _121: isize;
    let mut _123: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _124: isize;
    let mut _128: isize;
    let mut _130: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _131: isize;
    let mut _134: cmd::sort::Args;
    let mut _135: std::option::Option<std::string::String>;
    let mut _136: select::SelectColumns;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: std::option::Option<std::string::String>;
    let mut _140: bool;
    let mut _141: std::option::Option<config::Delimiter>;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<select::SelectColumns>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<bool>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<std::string::String>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<config::Delimiter>>;
                            scope 7 {
                                debug __field6 => _9;
                                let _85: std::option::Option<std::string::String>;
                                let _87: std::option::Option<std::string::String>;
                                let _90: std::option::Option<std::string::String>;
                                let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __key => _16;
                                    let _13: std::option::Option<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field>;
                                    let _14: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _16: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field;
                                    let _25: std::option::Option<std::string::String>;
                                    let _26: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _34: select::SelectColumns;
                                    let _35: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _43: bool;
                                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _52: bool;
                                    let _53: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _61: std::option::Option<std::string::String>;
                                    let _62: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _70: bool;
                                    let _71: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _79: std::option::Option<config::Delimiter>;
                                    let _80: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _84: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __val => _13;
                                    }
                                    scope 10 {
                                        debug __err => _14;
                                    }
                                    scope 11 {
                                        debug __val => _25;
                                    }
                                    scope 12 {
                                        debug __err => _26;
                                    }
                                    scope 13 {
                                        debug __val => _34;
                                    }
                                    scope 14 {
                                        debug __err => _35;
                                    }
                                    scope 15 {
                                        debug __val => _43;
                                    }
                                    scope 16 {
                                        debug __err => _44;
                                    }
                                    scope 17 {
                                        debug __val => _52;
                                    }
                                    scope 18 {
                                        debug __err => _53;
                                    }
                                    scope 19 {
                                        debug __val => _61;
                                    }
                                    scope 20 {
                                        debug __err => _62;
                                    }
                                    scope 21 {
                                        debug __val => _70;
                                    }
                                    scope 22 {
                                        debug __err => _71;
                                    }
                                    scope 23 {
                                        debug __val => _79;
                                    }
                                    scope 24 {
                                        debug __err => _80;
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny;
                                    }
                                    scope 27 {
                                        debug __err => _84;
                                    }
                                }
                                scope 28 {
                                    debug __field0 => _85;
                                    let _92: select::SelectColumns;
                                    let _94: select::SelectColumns;
                                    let _97: select::SelectColumns;
                                    let _98: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 32 {
                                        debug __field1 => _92;
                                        let _99: bool;
                                        let _101: bool;
                                        let _104: bool;
                                        let _105: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 36 {
                                            debug __field2 => _99;
                                            let _106: bool;
                                            let _108: bool;
                                            let _111: bool;
                                            let _112: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 40 {
                                                debug __field3 => _106;
                                                let _113: std::option::Option<std::string::String>;
                                                let _115: std::option::Option<std::string::String>;
                                                let _118: std::option::Option<std::string::String>;
                                                let _119: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 44 {
                                                    debug __field4 => _113;
                                                    let _120: bool;
                                                    let _122: bool;
                                                    let _125: bool;
                                                    let _126: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 48 {
                                                        debug __field5 => _120;
                                                        let _127: std::option::Option<config::Delimiter>;
                                                        let _129: std::option::Option<config::Delimiter>;
                                                        let _132: std::option::Option<config::Delimiter>;
                                                        let _133: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 52 {
                                                            debug __field6 => _127;
                                                        }
                                                        scope 53 {
                                                            debug __field6 => _129;
                                                        }
                                                        scope 54 {
                                                            debug __val => _132;
                                                        }
                                                        scope 55 {
                                                            debug __err => _133;
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug __field5 => _122;
                                                    }
                                                    scope 50 {
                                                        debug __val => _125;
                                                    }
                                                    scope 51 {
                                                        debug __err => _126;
                                                    }
                                                }
                                                scope 45 {
                                                    debug __field4 => _115;
                                                }
                                                scope 46 {
                                                    debug __val => _118;
                                                }
                                                scope 47 {
                                                    debug __err => _119;
                                                }
                                            }
                                            scope 41 {
                                                debug __field3 => _108;
                                            }
                                            scope 42 {
                                                debug __val => _111;
                                            }
                                            scope 43 {
                                                debug __err => _112;
                                            }
                                        }
                                        scope 37 {
                                            debug __field2 => _101;
                                        }
                                        scope 38 {
                                            debug __val => _104;
                                        }
                                        scope 39 {
                                            debug __err => _105;
                                        }
                                    }
                                    scope 33 {
                                        debug __field1 => _94;
                                    }
                                    scope 34 {
                                        debug __val => _97;
                                    }
                                    scope 35 {
                                        debug __err => _98;
                                    }
                                }
                                scope 29 {
                                    debug __field0 => _87;
                                }
                                scope 30 {
                                    debug __val => _90;
                                }
                                scope 31 {
                                    debug __err => _91;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _144 = const false;
        _143 = const false;
        _142 = const false;
        _144 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _143 = const true;
        _4 = std::option::Option::<SelectColumns>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<bool>::None;
        _142 = const true;
        _7 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _11 = &mut _2;
        _10 = <__A as MapAccess<'_>>::next_key::<sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for sort::Args>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb138];
    }

    bb2: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb118;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field>);
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _86 = discriminant(_3);
        switchInt(move _86) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_13 as Some).0: cmd::sort::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::sort::Args>::deserialize::__Field);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb55, 6: bb63, otherwise: bb8];
    }

    bb8: {
        _82 = &mut _2;
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb71, unwind: bb138];
    }

    bb9: {
        _19 = &_3;
        _18 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_19) -> [return: bb10, unwind: bb138];
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb138];
    }

    bb12: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb118;
    }

    bb13: {
        _23 = &mut _2;
        _22 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_23) -> [return: bb14, unwind: bb138];
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb118;
    }

    bb16: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::string::String>);
        _21 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _25);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _144 = const true;
        _3 = move _21;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _144 = const true;
        _3 = move _21;
        goto -> bb138;
    }

    bb19: {
        _28 = &_4;
        _27 = std::option::Option::<SelectColumns>::is_some(_28) -> [return: bb20, unwind: bb138];
    }

    bb20: {
        switchInt(move _27) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _29 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_select") -> [return: bb22, unwind: bb138];
    }

    bb22: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb118;
    }

    bb23: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_32) -> [return: bb24, unwind: bb138];
    }

    bb24: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _35 = move ((_31 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb118;
    }

    bb26: {
        _34 = move ((_31 as Ok).0: select::SelectColumns);
        _30 = std::option::Option::<SelectColumns>::Some(move _34);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _143 = const true;
        _4 = move _30;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _143 = const true;
        _4 = move _30;
        goto -> bb138;
    }

    bb29: {
        _37 = &_5;
        _36 = std::option::Option::<bool>::is_some(_37) -> [return: bb30, unwind: bb138];
    }

    bb30: {
        switchInt(move _36) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _38 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_numeric") -> [return: bb32, unwind: bb138];
    }

    bb32: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb118;
    }

    bb33: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<bool>(_41) -> [return: bb34, unwind: bb138];
    }

    bb34: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _44 = move ((_40 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb118;
    }

    bb36: {
        _43 = ((_40 as Ok).0: bool);
        _39 = std::option::Option::<bool>::Some(_43);
        _5 = move _39;
        goto -> bb1;
    }

    bb37: {
        _46 = &_6;
        _45 = std::option::Option::<bool>::is_some(_46) -> [return: bb38, unwind: bb138];
    }

    bb38: {
        switchInt(move _45) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _47 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_reverse") -> [return: bb40, unwind: bb138];
    }

    bb40: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb118;
    }

    bb41: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<bool>(_50) -> [return: bb42, unwind: bb138];
    }

    bb42: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _53 = move ((_49 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb118;
    }

    bb44: {
        _52 = ((_49 as Ok).0: bool);
        _48 = std::option::Option::<bool>::Some(_52);
        _6 = move _48;
        goto -> bb1;
    }

    bb45: {
        _55 = &_7;
        _54 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_55) -> [return: bb46, unwind: bb138];
    }

    bb46: {
        switchInt(move _54) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _56 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb48, unwind: bb138];
    }

    bb48: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb118;
    }

    bb49: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_59) -> [return: bb50, unwind: bb138];
    }

    bb50: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _62 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb118;
    }

    bb52: {
        _61 = move ((_58 as Ok).0: std::option::Option<std::string::String>);
        _57 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _61);
        drop(_7) -> [return: bb53, unwind: bb54];
    }

    bb53: {
        _142 = const true;
        _7 = move _57;
        goto -> bb1;
    }

    bb54 (cleanup): {
        _142 = const true;
        _7 = move _57;
        goto -> bb138;
    }

    bb55: {
        _64 = &_8;
        _63 = std::option::Option::<bool>::is_some(_64) -> [return: bb56, unwind: bb138];
    }

    bb56: {
        switchInt(move _63) -> [0: bb59, otherwise: bb57];
    }

    bb57: {
        _65 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb58, unwind: bb138];
    }

    bb58: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb118;
    }

    bb59: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<bool>(_68) -> [return: bb60, unwind: bb138];
    }

    bb60: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb62, 1: bb61, otherwise: bb4];
    }

    bb61: {
        _71 = move ((_67 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb118;
    }

    bb62: {
        _70 = ((_67 as Ok).0: bool);
        _66 = std::option::Option::<bool>::Some(_70);
        _8 = move _66;
        goto -> bb1;
    }

    bb63: {
        _73 = &_9;
        _72 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_73) -> [return: bb64, unwind: bb138];
    }

    bb64: {
        switchInt(move _72) -> [0: bb67, otherwise: bb65];
    }

    bb65: {
        _74 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb66, unwind: bb138];
    }

    bb66: {
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb118;
    }

    bb67: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_77) -> [return: bb68, unwind: bb138];
    }

    bb68: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb70, 1: bb69, otherwise: bb4];
    }

    bb69: {
        _80 = move ((_76 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb118;
    }

    bb70: {
        _79 = ((_76 as Ok).0: std::option::Option<config::Delimiter>);
        _75 = std::option::Option::<std::option::Option<Delimiter>>::Some(_79);
        _9 = move _75;
        goto -> bb1;
    }

    bb71: {
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb1, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _84 = move ((_81 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb118;
    }

    bb73: {
        _88 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb75, unwind: bb138];
    }

    bb74: {
        _144 = const false;
        _87 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _85 = move _87;
        goto -> bb78;
    }

    bb75: {
        _89 = discriminant(_88);
        switchInt(move _89) -> [0: bb77, 1: bb76, otherwise: bb4];
    }

    bb76: {
        _91 = move ((_88 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb118;
    }

    bb77: {
        _90 = move ((_88 as Ok).0: std::option::Option<std::string::String>);
        _85 = move _90;
        goto -> bb78;
    }

    bb78: {
        _93 = discriminant(_4);
        switchInt(move _93) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        _95 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "flag_select") -> [return: bb81, unwind: bb122];
    }

    bb80: {
        _143 = const false;
        _94 = move ((_4 as Some).0: select::SelectColumns);
        _92 = move _94;
        goto -> bb84;
    }

    bb81: {
        _96 = discriminant(_95);
        switchInt(move _96) -> [0: bb83, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _98 = move ((_95 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb117;
    }

    bb83: {
        _97 = move ((_95 as Ok).0: select::SelectColumns);
        _92 = move _97;
        goto -> bb84;
    }

    bb84: {
        _100 = discriminant(_5);
        switchInt(move _100) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        _102 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_numeric") -> [return: bb87, unwind: bb121];
    }

    bb86: {
        _101 = ((_5 as Some).0: bool);
        _99 = _101;
        goto -> bb90;
    }

    bb87: {
        _103 = discriminant(_102);
        switchInt(move _103) -> [0: bb89, 1: bb88, otherwise: bb4];
    }

    bb88: {
        _105 = move ((_102 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _105);
        goto -> bb116;
    }

    bb89: {
        _104 = ((_102 as Ok).0: bool);
        _99 = _104;
        goto -> bb90;
    }

    bb90: {
        _107 = discriminant(_6);
        switchInt(move _107) -> [0: bb91, 1: bb92, otherwise: bb4];
    }

    bb91: {
        _109 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_reverse") -> [return: bb93, unwind: bb121];
    }

    bb92: {
        _108 = ((_6 as Some).0: bool);
        _106 = _108;
        goto -> bb96;
    }

    bb93: {
        _110 = discriminant(_109);
        switchInt(move _110) -> [0: bb95, 1: bb94, otherwise: bb4];
    }

    bb94: {
        _112 = move ((_109 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _112);
        goto -> bb116;
    }

    bb95: {
        _111 = ((_109 as Ok).0: bool);
        _106 = _111;
        goto -> bb96;
    }

    bb96: {
        _114 = discriminant(_7);
        switchInt(move _114) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        _116 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb99, unwind: bb121];
    }

    bb98: {
        _142 = const false;
        _115 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _113 = move _115;
        goto -> bb102;
    }

    bb99: {
        _117 = discriminant(_116);
        switchInt(move _117) -> [0: bb101, 1: bb100, otherwise: bb4];
    }

    bb100: {
        _119 = move ((_116 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _119);
        goto -> bb116;
    }

    bb101: {
        _118 = move ((_116 as Ok).0: std::option::Option<std::string::String>);
        _113 = move _118;
        goto -> bb102;
    }

    bb102: {
        _121 = discriminant(_8);
        switchInt(move _121) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        _123 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb105, unwind: bb120];
    }

    bb104: {
        _122 = ((_8 as Some).0: bool);
        _120 = _122;
        goto -> bb108;
    }

    bb105: {
        _124 = discriminant(_123);
        switchInt(move _124) -> [0: bb107, 1: bb106, otherwise: bb4];
    }

    bb106: {
        _126 = move ((_123 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _126);
        goto -> bb115;
    }

    bb107: {
        _125 = ((_123 as Ok).0: bool);
        _120 = _125;
        goto -> bb108;
    }

    bb108: {
        _128 = discriminant(_9);
        switchInt(move _128) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        _130 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb111, unwind: bb120];
    }

    bb110: {
        _129 = ((_9 as Some).0: std::option::Option<config::Delimiter>);
        _127 = _129;
        goto -> bb114;
    }

    bb111: {
        _131 = discriminant(_130);
        switchInt(move _131) -> [0: bb113, 1: bb112, otherwise: bb4];
    }

    bb112: {
        _133 = move ((_130 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Err(move _133);
        goto -> bb115;
    }

    bb113: {
        _132 = ((_130 as Ok).0: std::option::Option<config::Delimiter>);
        _127 = _132;
        goto -> bb114;
    }

    bb114: {
        _135 = move _85;
        _136 = move _92;
        _137 = _99;
        _138 = _106;
        _139 = move _113;
        _140 = _120;
        _141 = _127;
        _134 = sort::Args { arg_input: move _135, flag_select: move _136, flag_numeric: move _137, flag_reverse: move _138, flag_output: move _139, flag_no_headers: move _140, flag_delimiter: move _141 };
        _0 = Result::<sort::Args, <__A as MapAccess<'_>>::Error>::Ok(move _134);
        _142 = const false;
        _143 = const false;
        _144 = const false;
        drop(_2) -> [return: bb119, unwind continue];
    }

    bb115: {
        drop(_113) -> [return: bb116, unwind: bb121];
    }

    bb116: {
        drop(_92) -> [return: bb117, unwind: bb122];
    }

    bb117: {
        drop(_85) -> [return: bb118, unwind: bb138];
    }

    bb118: {
        _145 = discriminant(_7);
        switchInt(move _145) -> [1: bb128, otherwise: bb127];
    }

    bb119: {
        return;
    }

    bb120 (cleanup): {
        drop(_113) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_92) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_85) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        _149 = discriminant(_4);
        switchInt(move _149) -> [1: bb139, otherwise: bb124];
    }

    bb124 (cleanup): {
        _150 = discriminant(_3);
        switchInt(move _150) -> [1: bb141, otherwise: bb125];
    }

    bb125 (cleanup): {
        drop(_2) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        resume;
    }

    bb127: {
        _142 = const false;
        _146 = discriminant(_4);
        switchInt(move _146) -> [1: bb131, otherwise: bb130];
    }

    bb128: {
        switchInt(_142) -> [0: bb127, otherwise: bb129];
    }

    bb129: {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb127, unwind: bb123];
    }

    bb130: {
        _143 = const false;
        _147 = discriminant(_3);
        switchInt(move _147) -> [1: bb134, otherwise: bb133];
    }

    bb131: {
        switchInt(_143) -> [0: bb130, otherwise: bb132];
    }

    bb132: {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb130, unwind: bb124];
    }

    bb133: {
        _144 = const false;
        drop(_2) -> [return: bb119, unwind continue];
    }

    bb134: {
        switchInt(_144) -> [0: bb133, otherwise: bb135];
    }

    bb135: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb133, unwind: bb125];
    }

    bb136 (cleanup): {
        switchInt(_142) -> [0: bb123, otherwise: bb137];
    }

    bb137 (cleanup): {
        drop(((_7 as Some).0: std::option::Option<std::string::String>)) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        _148 = discriminant(_7);
        switchInt(move _148) -> [1: bb136, otherwise: bb123];
    }

    bb139 (cleanup): {
        switchInt(_143) -> [0: bb124, otherwise: bb140];
    }

    bb140 (cleanup): {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_144) -> [0: bb125, otherwise: bb142];
    }

    bb142 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb125, unwind terminate(cleanup)];
    }
}

const sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 7];
    let _2: &[&str; 7];
    let _3: [&str; 7];
    let mut _4: &[&str; 7];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in sort::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/sort.rs:36:10: 36:21>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "arg_input", const "flag_select", const "flag_numeric", const "flag_reverse", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn sort::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::sort::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::sort::Args>;
    let mut _4: std::result::Result<cmd::sort::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::sort::Args;
    let mut _12: config::Config;
    let mut _13: config::Config;
    let mut _14: config::Config;
    let _15: &std::option::Option<std::string::String>;
    let mut _16: std::option::Option<config::Delimiter>;
    let mut _17: bool;
    let mut _18: select::SelectColumns;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _21: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _22: &config::Config;
    let mut _23: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _28: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _29: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _30: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _35: std::result::Result<select::Selection, std::string::String>;
    let mut _36: &config::Config;
    let _37: &csv::ByteRecord;
    let mut _38: isize;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, std::vec::Vec<csv::ByteRecord>>;
    let mut _43: std::result::Result<std::vec::Vec<csv::ByteRecord>, csv::Error>;
    let mut _44: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _45: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _46: isize;
    let _49: ();
    let mut _50: (bool, bool);
    let mut _51: &mut [csv::ByteRecord];
    let mut _52: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _53: {closure@src/cmd/sort.rs:64:25: 64:33};
    let mut _54: &select::Selection;
    let mut _55: &mut [csv::ByteRecord];
    let mut _56: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _57: {closure@src/cmd/sort.rs:70:25: 70:33};
    let mut _58: &select::Selection;
    let mut _59: &mut [csv::ByteRecord];
    let mut _60: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _61: {closure@src/cmd/sort.rs:76:25: 76:33};
    let mut _62: &select::Selection;
    let mut _63: &mut [csv::ByteRecord];
    let mut _64: &mut std::vec::Vec<csv::ByteRecord>;
    let mut _65: {closure@src/cmd/sort.rs:82:25: 82:33};
    let mut _66: &select::Selection;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _69: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _70: &config::Config;
    let _71: config::Config;
    let _72: &std::option::Option<std::string::String>;
    let mut _73: isize;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _77: std::result::Result<(), csv::Error>;
    let mut _78: &config::Config;
    let mut _79: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _80: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _81: isize;
    let mut _83: std::vec::IntoIter<csv::ByteRecord>;
    let mut _84: std::vec::IntoIter<csv::ByteRecord>;
    let mut _85: std::vec::Vec<csv::ByteRecord>;
    let mut _87: std::option::Option<csv::ByteRecord>;
    let mut _88: &mut std::vec::IntoIter<csv::ByteRecord>;
    let mut _89: isize;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _92: std::result::Result<(), csv::Error>;
    let mut _93: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _94: &csv::ByteRecord;
    let mut _95: isize;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _98: std::result::Result<(), std::io::Error>;
    let mut _99: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _100: isize;
    let mut _102: &str;
    let mut _103: bool;
    let mut _104: bool;
    scope 1 {
        debug args => _2;
        let _9: bool;
        scope 6 {
            debug numeric => _9;
            let _10: bool;
            scope 7 {
                debug reverse => _10;
                let _11: config::Config;
                scope 8 {
                    debug rconfig => _11;
                    let mut _19: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    let _24: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _25: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                    scope 9 {
                        debug rdr => _19;
                        let _26: csv::ByteRecord;
                        let _31: std::result::Result<std::convert::Infallible, csv::Error>;
                        let _32: &csv::ByteRecord;
                        scope 14 {
                            debug headers => _26;
                            let _33: select::Selection;
                            let _39: std::result::Result<std::convert::Infallible, std::string::String>;
                            let _40: select::Selection;
                            scope 19 {
                                debug sel => _33;
                                let mut _41: std::vec::Vec<csv::ByteRecord>;
                                let _47: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _48: std::vec::Vec<csv::ByteRecord>;
                                scope 24 {
                                    debug all => _41;
                                    let mut _67: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                                    let _74: std::result::Result<std::convert::Infallible, std::io::Error>;
                                    let _75: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                                    scope 29 {
                                        debug wtr => _67;
                                        let _82: std::result::Result<std::convert::Infallible, csv::Error>;
                                        let mut _86: std::vec::IntoIter<csv::ByteRecord>;
                                        let _101: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        scope 34 {
                                            debug residual => _82;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug val => const ();
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug iter => _86;
                                            let _90: csv::ByteRecord;
                                            scope 39 {
                                                debug r => _90;
                                                let _96: std::result::Result<std::convert::Infallible, csv::Error>;
                                                scope 40 {
                                                    debug residual => _96;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => const ();
                                                    scope 43 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 44 {
                                            debug residual => _101;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug val => const ();
                                            scope 47 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _74;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _75;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _47;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _48;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _39;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _40;
                                scope 23 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _31;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _32;
                            scope 18 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _24;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _25;
                        scope 13 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _103 = const false;
        _104 = const false;
        _5 = const {alloc26: &&str};
        _102 = deref_copy (*_5);
        _4 = get_args::<sort::Args>(_102, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<sort::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::sort::Args);
        _104 = const true;
        _2 = move _8;
        _9 = (_2.2: bool);
        _10 = (_2.3: bool);
        _15 = &(_2.0: std::option::Option<std::string::String>);
        _14 = Config::new(_15) -> [return: bb6, unwind: bb117];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb85, unwind continue];
    }

    bb6: {
        _16 = (_2.6: std::option::Option<config::Delimiter>);
        _13 = Config::delimiter(move _14, move _16) -> [return: bb7, unwind: bb117];
    }

    bb7: {
        _17 = (_2.5: bool);
        _12 = Config::no_headers(move _13, move _17) -> [return: bb8, unwind: bb117];
    }

    bb8: {
        _104 = const false;
        _18 = move (_2.1: select::SelectColumns);
        _11 = Config::select(move _12, move _18) -> [return: bb9, unwind: bb117];
    }

    bb9: {
        _22 = &_11;
        _21 = Config::reader(move _22) -> [return: bb10, unwind: bb99];
    }

    bb10: {
        _20 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _21) -> [return: bb11, unwind: bb99];
    }

    bb11: {
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _25 = move ((_20 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _19 = move _25;
        _29 = &mut _19;
        _28 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _29) -> [return: bb14, unwind: bb98];
    }

    bb13: {
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb118, unwind: bb99];
    }

    bb14: {
        _27 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _28) -> [return: bb15, unwind: bb98];
    }

    bb15: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _32 = ((_27 as Continue).0: &csv::ByteRecord);
        _26 = <ByteRecord as Clone>::clone(_32) -> [return: bb18, unwind: bb98];
    }

    bb17: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _31) -> [return: bb119, unwind: bb98];
    }

    bb18: {
        _36 = &_11;
        _37 = &_26;
        _35 = Config::selection(move _36, _37) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        _34 = <Result<Selection, std::string::String> as Try>::branch(move _35) -> [return: bb20, unwind: bb97];
    }

    bb20: {
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _40 = move ((_34 as Continue).0: select::Selection);
        _33 = move _40;
        _45 = &mut _19;
        _44 = Reader::<Box<dyn std::io::Read>>::byte_records(move _45) -> [return: bb23, unwind: bb96];
    }

    bb22: {
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _39) -> [return: bb120, unwind: bb97];
    }

    bb23: {
        _43 = <ByteRecordsIter<'_, Box<dyn std::io::Read>> as Iterator>::collect::<Result<Vec<ByteRecord>, csv::Error>>(move _44) -> [return: bb24, unwind: bb96];
    }

    bb24: {
        _42 = <Result<Vec<ByteRecord>, csv::Error> as Try>::branch(move _43) -> [return: bb25, unwind: bb96];
    }

    bb25: {
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _48 = move ((_42 as Continue).0: std::vec::Vec<csv::ByteRecord>);
        _103 = const true;
        _41 = move _48;
        _50 = (_9, _10);
        switchInt((_50.0: bool)) -> [0: bb28, otherwise: bb29];
    }

    bb27: {
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _47) -> [return: bb121, unwind: bb96];
    }

    bb28: {
        switchInt((_50.1: bool)) -> [0: bb31, otherwise: bb35];
    }

    bb29: {
        switchInt((_50.1: bool)) -> [0: bb33, otherwise: bb30];
    }

    bb30: {
        _64 = &mut _41;
        _63 = <Vec<ByteRecord> as DerefMut>::deref_mut(move _64) -> [return: bb37, unwind: bb113];
    }

    bb31: {
        _52 = &mut _41;
        _51 = <Vec<ByteRecord> as DerefMut>::deref_mut(move _52) -> [return: bb32, unwind: bb113];
    }

    bb32: {
        _54 = &_33;
        _53 = {closure@src/cmd/sort.rs:64:25: 64:33} { sel: move _54 };
        _49 = std::slice::<impl [ByteRecord]>::sort_by::<{closure@src/cmd/sort.rs:64:25: 64:33}>(_51, move _53) -> [return: bb122, unwind: bb113];
    }

    bb33: {
        _56 = &mut _41;
        _55 = <Vec<ByteRecord> as DerefMut>::deref_mut(move _56) -> [return: bb34, unwind: bb113];
    }

    bb34: {
        _58 = &_33;
        _57 = {closure@src/cmd/sort.rs:70:25: 70:33} { sel: move _58 };
        _49 = std::slice::<impl [ByteRecord]>::sort_by::<{closure@src/cmd/sort.rs:70:25: 70:33}>(_55, move _57) -> [return: bb123, unwind: bb113];
    }

    bb35: {
        _60 = &mut _41;
        _59 = <Vec<ByteRecord> as DerefMut>::deref_mut(move _60) -> [return: bb36, unwind: bb113];
    }

    bb36: {
        _62 = &_33;
        _61 = {closure@src/cmd/sort.rs:76:25: 76:33} { sel: move _62 };
        _49 = std::slice::<impl [ByteRecord]>::sort_by::<{closure@src/cmd/sort.rs:76:25: 76:33}>(_59, move _61) -> [return: bb124, unwind: bb113];
    }

    bb37: {
        _66 = &_33;
        _65 = {closure@src/cmd/sort.rs:82:25: 82:33} { sel: move _66 };
        _49 = std::slice::<impl [ByteRecord]>::sort_by::<{closure@src/cmd/sort.rs:82:25: 82:33}>(_63, move _65) -> [return: bb125, unwind: bb113];
    }

    bb38: {
        _72 = &(_2.4: std::option::Option<std::string::String>);
        _71 = Config::new(_72) -> [return: bb39, unwind: bb113];
    }

    bb39: {
        _70 = &_71;
        _69 = Config::writer(move _70) -> [return: bb40, unwind: bb95];
    }

    bb40: {
        _68 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _69) -> [return: bb41, unwind: bb95];
    }

    bb41: {
        _73 = discriminant(_68);
        switchInt(move _73) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        _75 = move ((_68 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _67 = move _75;
        drop(_71) -> [return: bb45, unwind: bb94];
    }

    bb43: {
        _74 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb44, unwind: bb95];
    }

    bb44: {
        drop(_71) -> [return: bb79, unwind: bb113];
    }

    bb45: {
        _78 = &_11;
        _79 = &mut _19;
        _80 = &mut _67;
        _77 = Config::write_headers::<Box<dyn std::io::Read>, Box<dyn std::io::Write>>(move _78, _79, _80) -> [return: bb46, unwind: bb94];
    }

    bb46: {
        _76 = <Result<(), csv::Error> as Try>::branch(move _77) -> [return: bb47, unwind: bb94];
    }

    bb47: {
        _81 = discriminant(_76);
        switchInt(move _81) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        _103 = const false;
        _85 = move _41;
        _84 = <Vec<ByteRecord> as IntoIterator>::into_iter(move _85) -> [return: bb50, unwind: bb94];
    }

    bb49: {
        _82 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _82) -> [return: bb126, unwind: bb94];
    }

    bb50: {
        _83 = <std::vec::IntoIter<ByteRecord> as IntoIterator>::into_iter(move _84) -> [return: bb51, unwind: bb94];
    }

    bb51: {
        _86 = move _83;
        goto -> bb52;
    }

    bb52: {
        _88 = &mut _86;
        _87 = <std::vec::IntoIter<ByteRecord> as Iterator>::next(_88) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb55, 1: bb54, otherwise: bb4];
    }

    bb54: {
        _90 = move ((_87 as Some).0: csv::ByteRecord);
        _93 = &mut _67;
        _94 = &_90;
        _92 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _93, _94) -> [return: bb56, unwind: bb92];
    }

    bb55: {
        drop(_86) -> [return: bb61, unwind: bb94];
    }

    bb56: {
        _91 = <Result<(), csv::Error> as Try>::branch(move _92) -> [return: bb57, unwind: bb92];
    }

    bb57: {
        _95 = discriminant(_91);
        switchInt(move _95) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        drop(_90) -> [return: bb52, unwind: bb93];
    }

    bb59: {
        _96 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _96) -> [return: bb60, unwind: bb92];
    }

    bb60: {
        drop(_90) -> [return: bb77, unwind: bb93];
    }

    bb61: {
        _99 = &mut _67;
        _98 = Writer::<Box<dyn std::io::Write>>::flush(move _99) -> [return: bb62, unwind: bb94];
    }

    bb62: {
        _97 = <Result<(), std::io::Error> as Try>::branch(move _98) -> [return: bb63, unwind: bb94];
    }

    bb63: {
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_67) -> [return: bb67, unwind: bb88];
    }

    bb65: {
        _101 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _101) -> [return: bb66, unwind: bb87];
    }

    bb66: {
        drop(_67) -> [return: bb72, unwind: bb88];
    }

    bb67: {
        _103 = const false;
        drop(_33) -> [return: bb68, unwind: bb89];
    }

    bb68: {
        drop(_26) -> [return: bb69, unwind: bb90];
    }

    bb69: {
        drop(_19) -> [return: bb70, unwind: bb91];
    }

    bb70: {
        drop(_11) -> [return: bb71, unwind: bb111];
    }

    bb71: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb103, unwind: bb102];
    }

    bb72: {
        _103 = const false;
        drop(_33) -> [return: bb73, unwind: bb89];
    }

    bb73: {
        drop(_26) -> [return: bb74, unwind: bb90];
    }

    bb74: {
        drop(_19) -> [return: bb75, unwind: bb91];
    }

    bb75: {
        drop(_11) -> [return: bb76, unwind: bb111];
    }

    bb76: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb106, unwind: bb105];
    }

    bb77: {
        drop(_86) -> [return: bb78, unwind: bb94];
    }

    bb78: {
        drop(_67) -> [return: bb79, unwind: bb113];
    }

    bb79: {
        switchInt(_103) -> [0: bb80, otherwise: bb107];
    }

    bb80: {
        _103 = const false;
        drop(_33) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        drop(_26) -> [return: bb82, unwind: bb98];
    }

    bb82: {
        drop(_19) -> [return: bb83, unwind: bb99];
    }

    bb83: {
        drop(_11) -> [return: bb84, unwind: bb117];
    }

    bb84: {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb109, unwind: bb108];
    }

    bb85: {
        _104 = const false;
        goto -> bb86;
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_67) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_33) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_26) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_19) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_11) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_90) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_86) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_67) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_71) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_33) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_26) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_19) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_11) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        resume;
    }

    bb101: {
        _104 = const false;
        goto -> bb86;
    }

    bb102 (cleanup): {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb103: {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb101, unwind continue];
    }

    bb104: {
        _104 = const false;
        goto -> bb86;
    }

    bb105 (cleanup): {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb106: {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb104, unwind continue];
    }

    bb107: {
        drop(_41) -> [return: bb80, unwind: bb96];
    }

    bb108 (cleanup): {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb109: {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb85, unwind continue];
    }

    bb110 (cleanup): {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_41) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_103) -> [0: bb96, otherwise: bb112];
    }

    bb114 (cleanup): {
        drop((_2.4: std::option::Option<std::string::String>)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_104) -> [0: bb114, otherwise: bb116];
    }

    bb116 (cleanup): {
        drop((_2.1: select::SelectColumns)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop((_2.0: std::option::Option<std::string::String>)) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb118: {
        goto -> bb83;
    }

    bb119: {
        goto -> bb82;
    }

    bb120: {
        goto -> bb81;
    }

    bb121: {
        goto -> bb80;
    }

    bb122: {
        goto -> bb38;
    }

    bb123: {
        goto -> bb38;
    }

    bb124: {
        goto -> bb38;
    }

    bb125: {
        goto -> bb38;
    }

    bb126: {
        goto -> bb78;
    }
}

alloc26 (static: sort::USAGE, size: 16, align: 8) {
    ╾───alloc1491<imm>────╼ d0 03 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1491 (size: 976, align: 1) {
    0x000 │ 0a 53 6f 72 74 73 20 43 53 56 20 64 61 74 61 20 │ .Sorts CSV data 
    0x010 │ 6c 65 78 69 63 6f 67 72 61 70 68 69 63 61 6c 6c │ lexicographicall
    0x020 │ 79 2e 0a 0a 4e 6f 74 65 20 74 68 61 74 20 74 68 │ y...Note that th
    0x030 │ 69 73 20 72 65 71 75 69 72 65 73 20 72 65 61 64 │ is requires read
    0x040 │ 69 6e 67 20 61 6c 6c 20 6f 66 20 74 68 65 20 43 │ ing all of the C
    0x050 │ 53 56 20 64 61 74 61 20 69 6e 74 6f 20 6d 65 6d │ SV data into mem
    0x060 │ 6f 72 79 2e 0a 0a 55 73 61 67 65 3a 0a 20 20 20 │ ory...Usage:.   
    0x070 │ 20 78 73 76 20 73 6f 72 74 20 5b 6f 70 74 69 6f │  xsv sort [optio
    0x080 │ 6e 73 5d 20 5b 3c 69 6e 70 75 74 3e 5d 0a 0a 73 │ ns] [<input>]..s
    0x090 │ 6f 72 74 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ ort options:.   
    0x0a0 │ 20 2d 73 2c 20 2d 2d 73 65 6c 65 63 74 20 3c 61 │  -s, --select <a
    0x0b0 │ 72 67 3e 20 20 20 20 20 53 65 6c 65 63 74 20 61 │ rg>     Select a
    0x0c0 │ 20 73 75 62 73 65 74 20 6f 66 20 63 6f 6c 75 6d │  subset of colum
    0x0d0 │ 6e 73 20 74 6f 20 73 6f 72 74 2e 0a 20 20 20 20 │ ns to sort..    
    0x0e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x0f0 │ 20 20 20 20 20 20 20 53 65 65 20 27 78 73 76 20 │        See 'xsv 
    0x100 │ 73 65 6c 65 63 74 20 2d 2d 68 65 6c 70 27 20 66 │ select --help' f
    0x110 │ 6f 72 20 74 68 65 20 66 6f 72 6d 61 74 20 64 65 │ or the format de
    0x120 │ 74 61 69 6c 73 2e 0a 20 20 20 20 2d 4e 2c 20 2d │ tails..    -N, -
    0x130 │ 2d 6e 75 6d 65 72 69 63 20 20 20 20 20 20 20 20 │ -numeric        
    0x140 │ 20 20 43 6f 6d 70 61 72 65 20 61 63 63 6f 72 64 │   Compare accord
    0x150 │ 69 6e 67 20 74 6f 20 73 74 72 69 6e 67 20 6e 75 │ ing to string nu
    0x160 │ 6d 65 72 69 63 61 6c 20 76 61 6c 75 65 0a 20 20 │ merical value.  
    0x170 │ 20 20 2d 52 2c 20 2d 2d 72 65 76 65 72 73 65 20 │   -R, --reverse 
    0x180 │ 20 20 20 20 20 20 20 20 20 52 65 76 65 72 73 65 │          Reverse
    0x190 │ 20 6f 72 64 65 72 0a 0a 43 6f 6d 6d 6f 6e 20 6f │  order..Common o
    0x1a0 │ 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 │ ptions:.    -h, 
    0x1b0 │ 2d 2d 68 65 6c 70 20 20 20 20 20 20 20 20 20 20 │ --help          
    0x1c0 │ 20 20 20 44 69 73 70 6c 61 79 20 74 68 69 73 20 │    Display this 
    0x1d0 │ 6d 65 73 73 61 67 65 0a 20 20 20 20 2d 6f 2c 20 │ message.    -o, 
    0x1e0 │ 2d 2d 6f 75 74 70 75 74 20 3c 66 69 6c 65 3e 20 │ --output <file> 
    0x1f0 │ 20 20 20 57 72 69 74 65 20 6f 75 74 70 75 74 20 │    Write output 
    0x200 │ 74 6f 20 3c 66 69 6c 65 3e 20 69 6e 73 74 65 61 │ to <file> instea
    0x210 │ 64 20 6f 66 20 73 74 64 6f 75 74 2e 0a 20 20 20 │ d of stdout..   
    0x220 │ 20 2d 6e 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 │  -n, --no-header
    0x230 │ 73 20 20 20 20 20 20 20 57 68 65 6e 20 73 65 74 │ s       When set
    0x240 │ 2c 20 74 68 65 20 66 69 72 73 74 20 72 6f 77 20 │ , the first row 
    0x250 │ 77 69 6c 6c 20 6e 6f 74 20 62 65 20 69 6e 74 65 │ will not be inte
    0x260 │ 72 70 72 65 74 65 64 0a 20 20 20 20 20 20 20 20 │ rpreted.        
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x280 │ 20 20 20 61 73 20 68 65 61 64 65 72 73 2e 20 4e │    as headers. N
    0x290 │ 61 6d 65 6c 79 2c 20 69 74 20 77 69 6c 6c 20 62 │ amely, it will b
    0x2a0 │ 65 20 73 6f 72 74 65 64 20 77 69 74 68 20 74 68 │ e sorted with th
    0x2b0 │ 65 20 72 65 73 74 0a 20 20 20 20 20 20 20 20 20 │ e rest.         
    0x2c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2d0 │ 20 20 6f 66 20 74 68 65 20 72 6f 77 73 2e 20 4f │   of the rows. O
    0x2e0 │ 74 68 65 72 77 69 73 65 2c 20 74 68 65 20 66 69 │ therwise, the fi
    0x2f0 │ 72 73 74 20 72 6f 77 20 77 69 6c 6c 20 61 6c 77 │ rst row will alw
    0x300 │ 61 79 73 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ ays.            
    0x310 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 61 │                a
    0x320 │ 70 70 65 61 72 20 61 73 20 74 68 65 20 68 65 61 │ ppear as the hea
    0x330 │ 64 65 72 20 72 6f 77 20 69 6e 20 74 68 65 20 6f │ der row in the o
    0x340 │ 75 74 70 75 74 2e 0a 20 20 20 20 2d 64 2c 20 2d │ utput..    -d, -
    0x350 │ 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e │ -delimiter <arg>
    0x360 │ 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c 69 │   The field deli
    0x370 │ 6d 69 74 65 72 20 66 6f 72 20 72 65 61 64 69 6e │ miter for readin
    0x380 │ 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 20 │ g CSV data..    
    0x390 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3a0 │ 20 20 20 20 20 20 20 4d 75 73 74 20 62 65 20 61 │        Must be a
    0x3b0 │ 20 73 69 6e 67 6c 65 20 63 68 61 72 61 63 74 65 │  single characte
    0x3c0 │ 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a │ r. (default: ,).
}

fn sort::run::{closure#0}(_1: &mut {closure@src/cmd/sort.rs:64:25: 64:33}, _2: &ByteRecord, _3: &ByteRecord) -> std::cmp::Ordering {
    debug r1 => _2;
    debug r2 => _3;
    debug sel => (*((*_1).0: &select::Selection));
    let mut _0: std::cmp::Ordering;
    let _4: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _6: &select::Selection;
    let mut _7: &select::Selection;
    scope 1 {
        debug a => _4;
        let _5: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
        scope 2 {
            debug b => _5;
        }
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &select::Selection);
        _4 = Selection::select(_6, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &select::Selection);
        _5 = Selection::select(_7, _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = iter_cmp::<&[u8], Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn sort::run::{closure#1}(_1: &mut {closure@src/cmd/sort.rs:70:25: 70:33}, _2: &ByteRecord, _3: &ByteRecord) -> std::cmp::Ordering {
    debug r1 => _2;
    debug r2 => _3;
    debug sel => (*((*_1).0: &select::Selection));
    let mut _0: std::cmp::Ordering;
    let _4: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _6: &select::Selection;
    let mut _7: &select::Selection;
    scope 1 {
        debug a => _4;
        let _5: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
        scope 2 {
            debug b => _5;
        }
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &select::Selection);
        _4 = Selection::select(_6, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &select::Selection);
        _5 = Selection::select(_7, _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = iter_cmp_num::<'_, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn sort::run::{closure#2}(_1: &mut {closure@src/cmd/sort.rs:76:25: 76:33}, _2: &ByteRecord, _3: &ByteRecord) -> std::cmp::Ordering {
    debug r1 => _2;
    debug r2 => _3;
    debug sel => (*((*_1).0: &select::Selection));
    let mut _0: std::cmp::Ordering;
    let _4: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _6: &select::Selection;
    let mut _7: &select::Selection;
    scope 1 {
        debug a => _4;
        let _5: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
        scope 2 {
            debug b => _5;
        }
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &select::Selection);
        _4 = Selection::select(_6, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &select::Selection);
        _5 = Selection::select(_7, _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = iter_cmp::<&[u8], Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>(move _5, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn sort::run::{closure#3}(_1: &mut {closure@src/cmd/sort.rs:82:25: 82:33}, _2: &ByteRecord, _3: &ByteRecord) -> std::cmp::Ordering {
    debug r1 => _2;
    debug r2 => _3;
    debug sel => (*((*_1).0: &select::Selection));
    let mut _0: std::cmp::Ordering;
    let _4: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _6: &select::Selection;
    let mut _7: &select::Selection;
    scope 1 {
        debug a => _4;
        let _5: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
        scope 2 {
            debug b => _5;
        }
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &select::Selection);
        _4 = Selection::select(_6, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &select::Selection);
        _5 = Selection::select(_7, _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = iter_cmp_num::<'_, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>, Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>(move _5, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn iter_cmp(_1: L, _2: R) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: (std::option::Option<A>, std::option::Option<A>);
    let mut _4: std::option::Option<A>;
    let mut _5: &mut L;
    let mut _6: std::option::Option<A>;
    let mut _7: &mut R;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let _12: A;
    let _13: A;
    let mut _14: std::cmp::Ordering;
    let mut _15: &A;
    let _16: &A;
    let mut _17: i8;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    scope 1 {
        debug x => _12;
        debug y => _13;
        scope 2 {
            debug non_eq => _14;
        }
    }

    bb0: {
        _19 = const false;
        _18 = const false;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = <L as Iterator>::next(move _5) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        _7 = &mut _2;
        _6 = <R as Iterator>::next(move _7) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _18 = const true;
        _19 = const true;
        _3 = (move _4, move _6);
        _11 = discriminant((_3.0: std::option::Option<A>));
        switchInt(move _11) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = discriminant((_3.1: std::option::Option<A>));
        switchInt(move _8) -> [0: bb9, otherwise: bb10];
    }

    bb5: {
        _10 = discriminant((_3.1: std::option::Option<A>));
        switchInt(move _10) -> [0: bb11, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _9 = discriminant((_3.0: std::option::Option<A>));
        switchInt(move _9) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _19 = const false;
        _13 = move (((_3.1: std::option::Option<A>) as Some).0: A);
        _18 = const false;
        _12 = move (((_3.0: std::option::Option<A>) as Some).0: A);
        _15 = &_12;
        _16 = &_13;
        _14 = <A as Ord>::cmp(move _15, _16) -> [return: bb12, unwind: bb20];
    }

    bb9: {
        _0 = Equal;
        goto -> bb35;
    }

    bb10: {
        _0 = Less;
        goto -> bb35;
    }

    bb11: {
        _0 = Greater;
        goto -> bb35;
    }

    bb12: {
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _0 = _14;
        drop(_12) -> [return: bb17, unwind: bb21];
    }

    bb14: {
        drop(_12) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        drop(_13) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _18 = const false;
        _19 = const false;
        goto -> bb1;
    }

    bb17: {
        drop(_13) -> [return: bb35, unwind: bb23];
    }

    bb18: {
        drop(_1) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_12) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_13) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_4) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_2) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_1) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _20 = discriminant((_3.1: std::option::Option<A>));
        switchInt(move _20) -> [1: bb27, otherwise: bb23];
    }

    bb27 (cleanup): {
        switchInt(_19) -> [0: bb23, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((((_3.1: std::option::Option<A>) as Some).0: A)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb29: {
        _18 = const false;
        _19 = const false;
        drop(_2) -> [return: bb18, unwind: bb24];
    }

    bb30: {
        switchInt(_19) -> [0: bb29, otherwise: bb31];
    }

    bb31: {
        drop((((_3.1: std::option::Option<A>) as Some).0: A)) -> [return: bb29, unwind: bb23];
    }

    bb32: {
        _21 = discriminant((_3.1: std::option::Option<A>));
        switchInt(move _21) -> [1: bb30, otherwise: bb29];
    }

    bb33: {
        switchInt(_18) -> [0: bb32, otherwise: bb34];
    }

    bb34: {
        drop((((_3.0: std::option::Option<A>) as Some).0: A)) -> [return: bb32, unwind: bb26];
    }

    bb35: {
        _22 = discriminant((_3.0: std::option::Option<A>));
        switchInt(move _22) -> [1: bb33, otherwise: bb32];
    }
}

fn iter_cmp_num(_1: L, _2: R) -> std::cmp::Ordering {
    debug a => _1;
    debug b => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: (std::option::Option<cmd::sort::Number>, std::option::Option<cmd::sort::Number>);
    let mut _4: std::option::Option<cmd::sort::Number>;
    let mut _5: &mut L;
    let mut _6: std::option::Option<cmd::sort::Number>;
    let mut _7: &mut R;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let _12: cmd::sort::Number;
    let _13: cmd::sort::Number;
    let mut _14: std::cmp::Ordering;
    let mut _15: i8;
    scope 1 {
        debug x => _12;
        debug y => _13;
        scope 2 {
            debug non_eq => _14;
        }
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _1;
        _4 = next_num::<'_, L>(_5) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _7 = &mut _2;
        _6 = next_num::<'_, R>(_7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _3 = (move _4, move _6);
        _11 = discriminant((_3.0: std::option::Option<cmd::sort::Number>));
        switchInt(move _11) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = discriminant((_3.1: std::option::Option<cmd::sort::Number>));
        switchInt(move _8) -> [0: bb9, otherwise: bb10];
    }

    bb5: {
        _10 = discriminant((_3.1: std::option::Option<cmd::sort::Number>));
        switchInt(move _10) -> [0: bb11, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _9 = discriminant((_3.0: std::option::Option<cmd::sort::Number>));
        switchInt(move _9) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _13 = (((_3.1: std::option::Option<cmd::sort::Number>) as Some).0: cmd::sort::Number);
        _12 = (((_3.0: std::option::Option<cmd::sort::Number>) as Some).0: cmd::sort::Number);
        _14 = compare_num(_12, _13) -> [return: bb12, unwind: bb17];
    }

    bb9: {
        _0 = Equal;
        goto -> bb14;
    }

    bb10: {
        _0 = Less;
        goto -> bb14;
    }

    bb11: {
        _0 = Greater;
        goto -> bb14;
    }

    bb12: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb1, otherwise: bb13];
    }

    bb13: {
        _0 = _14;
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_1) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}

fn sort::<impl at src/cmd/sort.rs:129:10: 129:15>::clone(_1: &Number) -> Number {
    debug self => _1;
    let mut _0: cmd::sort::Number;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sort::<impl at src/cmd/sort.rs:129:23: 129:32>::eq(_1: &Number, _2: &Number) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&cmd::sort::Number, &cmd::sort::Number);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: i64;
    let mut _13: i64;
    let mut _16: f64;
    let mut _17: f64;
    let mut _18: &cmd::sort::Number;
    let mut _19: &cmd::sort::Number;
    let mut _20: &cmd::sort::Number;
    let mut _21: &cmd::sort::Number;
    let mut _22: &cmd::sort::Number;
    let mut _23: &cmd::sort::Number;
    let mut _24: &cmd::sort::Number;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &i64;
            let _11: &i64;
            let _14: &f64;
            let _15: &f64;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _14;
                debug __arg1_0 => _15;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _18 = deref_copy (_6.0: &cmd::sort::Number);
        _9 = discriminant((*_18));
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _19 = deref_copy (_6.1: &cmd::sort::Number);
        _7 = discriminant((*_19));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _20 = deref_copy (_6.1: &cmd::sort::Number);
        _8 = discriminant((*_20));
        switchInt(move _8) -> [1: bb7, otherwise: bb4];
    }

    bb6: {
        _21 = deref_copy (_6.0: &cmd::sort::Number);
        _10 = &(((*_21) as Int).0: i64);
        _22 = deref_copy (_6.1: &cmd::sort::Number);
        _11 = &(((*_22) as Int).0: i64);
        _12 = (*_10);
        _13 = (*_11);
        _0 = Eq(move _12, move _13);
        goto -> bb8;
    }

    bb7: {
        _23 = deref_copy (_6.0: &cmd::sort::Number);
        _14 = &(((*_23) as Float).0: f64);
        _24 = deref_copy (_6.1: &cmd::sort::Number);
        _15 = &(((*_24) as Float).0: f64);
        _16 = (*_14);
        _17 = (*_15);
        _0 = Eq(move _16, move _17);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn compare_num(_1: Number, _2: Number) -> std::cmp::Ordering {
    debug n1 => _1;
    debug n2 => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: (cmd::sort::Number, cmd::sort::Number);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let _7: i64;
    let _8: i64;
    let mut _9: &i64;
    let _10: &i64;
    let _11: i64;
    let _12: f64;
    let mut _13: f64;
    let _14: f64;
    let _15: i64;
    let mut _16: f64;
    let _17: f64;
    let _18: f64;
    scope 1 {
        debug i1 => _7;
        debug i2 => _8;
    }
    scope 2 {
        debug i1 => _11;
        debug f2 => _12;
    }
    scope 3 {
        debug f1 => _14;
        debug i2 => _15;
    }
    scope 4 {
        debug f1 => _17;
        debug f2 => _18;
    }

    bb0: {
        _3 = (_1, _2);
        _6 = discriminant((_3.0: cmd::sort::Number));
        switchInt(move _6) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _4 = discriminant((_3.1: cmd::sort::Number));
        switchInt(move _4) -> [0: bb5, 1: bb6, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = discriminant((_3.1: cmd::sort::Number));
        switchInt(move _5) -> [0: bb7, 1: bb4, otherwise: bb2];
    }

    bb4: {
        _17 = (((_3.0: cmd::sort::Number) as Float).0: f64);
        _18 = (((_3.1: cmd::sort::Number) as Float).0: f64);
        _0 = compare_float(_17, _18) -> [return: bb8, unwind continue];
    }

    bb5: {
        _7 = (((_3.0: cmd::sort::Number) as Int).0: i64);
        _8 = (((_3.1: cmd::sort::Number) as Int).0: i64);
        _9 = &_7;
        _10 = &_8;
        _0 = <i64 as Ord>::cmp(move _9, _10) -> [return: bb8, unwind continue];
    }

    bb6: {
        _11 = (((_3.0: cmd::sort::Number) as Int).0: i64);
        _12 = (((_3.1: cmd::sort::Number) as Float).0: f64);
        _13 = _11 as f64 (IntToFloat);
        _0 = compare_float(move _13, _12) -> [return: bb8, unwind continue];
    }

    bb7: {
        _14 = (((_3.0: cmd::sort::Number) as Float).0: f64);
        _15 = (((_3.1: cmd::sort::Number) as Int).0: i64);
        _16 = _15 as f64 (IntToFloat);
        _0 = compare_float(_14, move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn compare_float(_1: f64, _2: f64) -> std::cmp::Ordering {
    debug f1 => _1;
    debug f2 => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let mut _4: &f64;
    let _5: &f64;
    let mut _6: std::cmp::Ordering;

    bb0: {
        _4 = &_1;
        _5 = &_2;
        _3 = <f64 as PartialOrd>::partial_cmp(move _4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Equal;
        _0 = std::option::Option::<std::cmp::Ordering>::unwrap_or(move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn next_num(_1: &mut X) -> std::option::Option<Number> {
    debug xs => _1;
    let mut _0: std::option::Option<cmd::sort::Number>;
    let mut _2: std::option::Option<&str>;
    let mut _3: std::option::Option<&[u8]>;

    bb0: {
        _3 = <X as Iterator>::next(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::option::Option::<&[u8]>::and_then::<&str, {closure@src/cmd/sort.rs:153:19: 153:26}>(move _3, const ZeroSized: {closure@src/cmd/sort.rs:153:19: 153:26}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<&str>::and_then::<Number, {closure@src/cmd/sort.rs:154:19: 154:22}>(move _2, const ZeroSized: {closure@src/cmd/sort.rs:154:19: 154:22}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn next_num::{closure#0}(_1: {closure@src/cmd/sort.rs:153:19: 153:26}, _2: &[u8]) -> std::option::Option<&str> {
    debug bytes => _2;
    let mut _0: std::option::Option<&str>;
    let mut _3: std::result::Result<&str, std::str::Utf8Error>;

    bb0: {
        _3 = from_utf8(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<&str, std::str::Utf8Error>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn next_num::{closure#1}(_1: {closure@src/cmd/sort.rs:154:19: 154:22}, _2: &str) -> std::option::Option<Number> {
    debug s => _2;
    let mut _0: std::option::Option<cmd::sort::Number>;
    let mut _3: std::result::Result<i64, std::num::ParseIntError>;
    let mut _4: isize;
    let mut _6: cmd::sort::Number;
    let mut _7: std::result::Result<f64, std::num::ParseFloatError>;
    let mut _8: isize;
    let mut _10: cmd::sort::Number;
    scope 1 {
        debug i => _5;
        let _5: i64;
    }
    scope 2 {
        debug f => _9;
        let _9: f64;
    }

    bb0: {
        _3 = core::str::<impl str>::parse::<i64>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = ((_3 as Ok).0: i64);
        _6 = Number::Int(_5);
        _0 = std::option::Option::<Number>::Some(move _6);
        goto -> bb7;
    }

    bb3: {
        _7 = core::str::<impl str>::parse::<f64>(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_7);
        switchInt(move _8) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_7 as Ok).0: f64);
        _10 = Number::Float(_9);
        _0 = std::option::Option::<Number>::Some(move _10);
        goto -> bb7;
    }

    bb6: {
        _0 = std::option::Option::<Number>::None;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

static split::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nSplits the given CSV data into chunks.\n\nThe files are written to the directory given with the name '{start}.csv',\nwhere {start} is the index of the first record of the chunk (starting at 0).\n\nUsage:\n    xsv split [options] <outdir> [<input>]\n    xsv split --help\n\nsplit options:\n    -s, --size <arg>       The number of records to write into each chunk.\n                           [default: 500]\n    -j, --jobs <arg>       The number of spliting jobs to run in parallel.\n                           This only works when the given CSV data has\n                           an index already created. Note that a file handle\n                           is opened for each job.\n                           When set to '0', the number of jobs is set to the\n                           number of CPUs detected.\n                           [default: 0]\n    --filename <filename>  A filename template to use when constructing\n                           the names of the output files.  The string '{}'\n                           will be replaced by a value based on the value\n                           of the field, but sanitized for shell safety.\n                           [default: {}.csv]\n\nCommon options:\n    -h, --help             Display this message\n    -n, --no-headers       When set, the first row will NOT be interpreted\n                           as column names. Otherwise, the first row will\n                           appear in all chunks as the header row.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

fn split::<impl at src/cmd/split.rs:49:10: 49:15>::clone(_1: &split::Args) -> split::Args {
    debug self => _1;
    let mut _0: cmd::split::Args;
    let mut _2: std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: std::string::String;
    let _5: &std::string::String;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: usize;
    let _9: &usize;
    let mut _10: util::FilenameTemplate;
    let _11: &util::FilenameTemplate;
    let mut _12: bool;
    let _13: &bool;
    let mut _14: std::option::Option<config::Delimiter>;
    let _15: &std::option::Option<config::Delimiter>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::string::String>);
        _2 = <std::option::Option<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: usize);
        _8 = (*_9);
        _11 = &((*_1).4: util::FilenameTemplate);
        _10 = <FilenameTemplate as Clone>::clone(_11) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _13 = &((*_1).5: bool);
        _12 = (*_13);
        _15 = &((*_1).6: std::option::Option<config::Delimiter>);
        _14 = <std::option::Option<Delimiter> as Clone>::clone(_15) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = split::Args { arg_input: move _2, arg_outdir: move _4, flag_size: move _6, flag_jobs: move _8, flag_filename: move _10, flag_no_headers: move _12, flag_delimiter: move _14 };
        return;
    }

    bb5 (cleanup): {
        drop(_10) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

const split::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize(_1: __D) -> Result<split::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::split::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<split::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::expecting(_1: &split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_u64(_1: split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E> {
    debug self => const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _4: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _5: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _6: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _7: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _8: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _9: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _10: __E;
    let mut _11: serde::de::Unexpected<'_>;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1];
    }

    bb1: {
        _11 = Unexpected::<'_>::Unsigned(_2);
        _13 = const _;
        _12 = _13 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <__E as serde::de::Error>::invalid_value(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb2: {
        _3 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field0;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field1;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb10;
    }

    bb4: {
        _5 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field2;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field3;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb6: {
        _7 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field4;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field5;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb8: {
        _9 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field6;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 7";
        _0 = &_1;
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_str(_1: split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E> {
    debug self => const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _11: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _12: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _13: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _14: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _15: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _16: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _17: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;

    bb0: {
        _9 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb21, unwind continue];
    }

    bb1: {
        _10 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field0;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb22;
    }

    bb2: {
        _8 = <str as PartialEq>::eq(_2, const "arg_outdir") -> [return: bb20, unwind continue];
    }

    bb3: {
        _11 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field1;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb22;
    }

    bb4: {
        _7 = <str as PartialEq>::eq(_2, const "flag_size") -> [return: bb19, unwind continue];
    }

    bb5: {
        _12 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field2;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb22;
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "flag_jobs") -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field3;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb22;
    }

    bb8: {
        _5 = <str as PartialEq>::eq(_2, const "flag_filename") -> [return: bb17, unwind continue];
    }

    bb9: {
        _14 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field4;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb22;
    }

    bb10: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field5;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb22;
    }

    bb12: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb15, unwind continue];
    }

    bb13: {
        _16 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field6;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb22;
    }

    bb14: {
        _17 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__ignore;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb16: {
        switchInt(move _4) -> [0: bb12, otherwise: bb11];
    }

    bb17: {
        switchInt(move _5) -> [0: bb10, otherwise: bb9];
    }

    bb18: {
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb19: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb20: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb21: {
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb22: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_bytes(_1: split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E> {
    debug self => const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _19: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _20: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _21: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _22: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _23: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _24: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
    let mut _25: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;

    bb0: {
        _15 = Len((*_2));
        _16 = const 9_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb22, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb78, otherwise: bb10];
    }

    bb10: {
        _25 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__ignore;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb85;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [115: bb16, 106: bb19, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [105: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [122: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [101: bb80, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[6 of 9]) -> [111: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[7 of 9]) -> [98: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[8 of 9]) -> [115: bb81, otherwise: bb10];
    }

    bb22: {
        _12 = Len((*_2));
        _13 = const 10_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb33, otherwise: bb23];
    }

    bb23: {
        switchInt((*_2)[0 of 10]) -> [97: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[1 of 10]) -> [114: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[2 of 10]) -> [103: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[3 of 10]) -> [95: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[4 of 10]) -> [111: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[5 of 10]) -> [117: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[6 of 10]) -> [116: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[7 of 10]) -> [100: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[8 of 10]) -> [105: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[9 of 10]) -> [114: bb79, otherwise: bb10];
    }

    bb33: {
        _9 = Len((*_2));
        _10 = const 13_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb47, otherwise: bb34];
    }

    bb34: {
        switchInt((*_2)[0 of 13]) -> [102: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[1 of 13]) -> [108: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[2 of 13]) -> [97: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[3 of 13]) -> [103: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[4 of 13]) -> [95: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[5 of 13]) -> [102: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[6 of 13]) -> [105: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[7 of 13]) -> [108: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[8 of 13]) -> [101: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[9 of 13]) -> [110: bb44, otherwise: bb10];
    }

    bb44: {
        switchInt((*_2)[10 of 13]) -> [97: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[11 of 13]) -> [109: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[12 of 13]) -> [101: bb82, otherwise: bb10];
    }

    bb47: {
        _6 = Len((*_2));
        _7 = const 15_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb63, otherwise: bb48];
    }

    bb48: {
        switchInt((*_2)[0 of 15]) -> [102: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[1 of 15]) -> [108: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[2 of 15]) -> [97: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[3 of 15]) -> [103: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[4 of 15]) -> [95: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[5 of 15]) -> [110: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[6 of 15]) -> [111: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[7 of 15]) -> [95: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[8 of 15]) -> [104: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[9 of 15]) -> [101: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[10 of 15]) -> [97: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[11 of 15]) -> [100: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[12 of 15]) -> [101: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[13 of 15]) -> [114: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[14 of 15]) -> [115: bb83, otherwise: bb10];
    }

    bb63: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb64];
    }

    bb64: {
        switchInt((*_2)[0 of 14]) -> [102: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[1 of 14]) -> [108: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[2 of 14]) -> [97: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[3 of 14]) -> [103: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[4 of 14]) -> [95: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[5 of 14]) -> [100: bb70, otherwise: bb10];
    }

    bb70: {
        switchInt((*_2)[6 of 14]) -> [101: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[7 of 14]) -> [108: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[8 of 14]) -> [105: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[9 of 14]) -> [109: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[10 of 14]) -> [105: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[11 of 14]) -> [116: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[12 of 14]) -> [101: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[13 of 14]) -> [114: bb84, otherwise: bb10];
    }

    bb78: {
        _18 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field0;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb85;
    }

    bb79: {
        _19 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field1;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb85;
    }

    bb80: {
        _20 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field2;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb85;
    }

    bb81: {
        _21 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field3;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb85;
    }

    bb82: {
        _22 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field4;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb85;
    }

    bb83: {
        _23 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field5;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb85;
    }

    bb84: {
        _24 = split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field::__field6;
        _0 = Result::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb85;
    }

    bb85: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize(_1: __D) -> Result<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor>(move _1, const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::expecting(_1: &split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq(_1: split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<split::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<split::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::split::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _42: std::result::Result<std::option::Option<util::FilenameTemplate>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: isize;
    let mut _49: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _50: &dyn serde::de::Expected;
    let mut _51: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _59: &dyn serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn serde::de::Expected;
    let mut _69: cmd::split::Args;
    let mut _70: std::option::Option<std::string::String>;
    let mut _71: std::string::String;
    let mut _72: util::FilenameTemplate;
    let mut _73: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::string::String;
        let _17: std::option::Option<std::string::String>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: std::string::String;
        let mut _74: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<usize>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: usize;
            let mut _75: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<usize>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: usize;
                let mut _76: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _41: util::FilenameTemplate;
                    let _45: std::option::Option<util::FilenameTemplate>;
                    let _46: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _48: util::FilenameTemplate;
                    let mut _77: &&str;
                    scope 17 {
                        debug __field4 => _41;
                        let _54: std::option::Option<bool>;
                        let _55: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _57: bool;
                        let mut _78: &&str;
                        scope 21 {
                            debug __field5 => _57;
                            let _63: std::option::Option<std::option::Option<config::Delimiter>>;
                            let _64: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _66: std::option::Option<config::Delimiter>;
                            let mut _79: &&str;
                            scope 25 {
                                debug __field6 => _66;
                            }
                            scope 26 {
                                debug __val => _63;
                            }
                            scope 27 {
                                debug __err => _64;
                            }
                            scope 28 {
                                debug __value => _66;
                            }
                        }
                        scope 22 {
                            debug __val => _54;
                        }
                        scope 23 {
                            debug __err => _55;
                        }
                        scope 24 {
                            debug __value => _57;
                        }
                    }
                    scope 18 {
                        debug __val => _45;
                    }
                    scope 19 {
                        debug __err => _46;
                    }
                    scope 20 {
                        debug __value => _48;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb47;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _73 = const _;
        _12 = _73 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb52];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb8, unwind: bb51];
    }

    bb7: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb47;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb46;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _74 = const _;
        _22 = _74 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb51];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<usize>(_24) -> [return: bb14, unwind: bb50];
    }

    bb13: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb46;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb45;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<usize>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _75 = const _;
        _31 = _75 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb50];
    }

    bb18: {
        _29 = ((_26 as Some).0: usize);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<usize>(_33) -> [return: bb20, unwind: bb50];
    }

    bb19: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb45;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb45;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<usize>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _76 = const _;
        _40 = _76 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb50];
    }

    bb24: {
        _38 = ((_35 as Some).0: usize);
        _43 = &mut _2;
        _42 = <__A as SeqAccess<'_>>::next_element::<FilenameTemplate>(_43) -> [return: bb26, unwind: bb50];
    }

    bb25: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb45;
    }

    bb26: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _46 = move ((_42 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _46);
        goto -> bb45;
    }

    bb28: {
        _45 = move ((_42 as Ok).0: std::option::Option<util::FilenameTemplate>);
        _47 = discriminant(_45);
        switchInt(move _47) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _77 = const _;
        _50 = _77 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _49 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _50) -> [return: bb31, unwind: bb50];
    }

    bb30: {
        _48 = move ((_45 as Some).0: util::FilenameTemplate);
        _41 = move _48;
        _52 = &mut _2;
        _51 = <__A as SeqAccess<'_>>::next_element::<bool>(_52) -> [return: bb32, unwind: bb49];
    }

    bb31: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _49);
        goto -> bb45;
    }

    bb32: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _55 = move ((_51 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _55);
        goto -> bb44;
    }

    bb34: {
        _54 = ((_51 as Ok).0: std::option::Option<bool>);
        _56 = discriminant(_54);
        switchInt(move _56) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _78 = const _;
        _59 = _78 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _58 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _59) -> [return: bb37, unwind: bb49];
    }

    bb36: {
        _57 = ((_54 as Some).0: bool);
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_61) -> [return: bb38, unwind: bb49];
    }

    bb37: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _58);
        goto -> bb44;
    }

    bb38: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _64 = move ((_60 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb44;
    }

    bb40: {
        _63 = ((_60 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _79 = const _;
        _68 = _79 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb43, unwind: bb49];
    }

    bb42: {
        _66 = ((_63 as Some).0: std::option::Option<config::Delimiter>);
        _70 = move _3;
        _71 = move _13;
        _72 = move _41;
        _69 = split::Args { arg_input: move _70, arg_outdir: move _71, flag_size: _29, flag_jobs: _38, flag_filename: move _72, flag_no_headers: _57, flag_delimiter: _66 };
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _69);
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb43: {
        _0 = Result::<split::Args, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb44;
    }

    bb44: {
        drop(_41) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        drop(_13) -> [return: bb46, unwind: bb51];
    }

    bb46: {
        drop(_3) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_41) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_13) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}

promoted[0] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 7 elements";
        _0 = &_1;
        return;
    }
}

fn split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::<impl at src/cmd/split.rs:49:17: 49:28>::visit_map(_1: split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<split::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<split::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::split::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _10: std::result::Result<std::option::Option<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: bool;
    let _19: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _20: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _21: std::option::Option<std::option::Option<std::string::String>>;
    let mut _22: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: bool;
    let _28: &std::option::Option<std::string::String>;
    let mut _29: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<std::string::String>;
    let mut _31: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<usize>;
    let mut _38: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<usize>;
    let mut _40: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<usize>;
    let mut _47: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<usize>;
    let mut _49: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<util::FilenameTemplate>;
    let mut _56: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<util::FilenameTemplate>;
    let mut _58: std::result::Result<util::FilenameTemplate, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<bool>;
    let mut _65: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<bool>;
    let mut _67: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _74: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _76: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _82: &mut __A;
    let mut _83: isize;
    let mut _86: isize;
    let mut _88: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _89: isize;
    let mut _93: isize;
    let mut _95: std::result::Result<std::string::String, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _96: isize;
    let mut _100: isize;
    let mut _102: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _103: isize;
    let mut _107: isize;
    let mut _109: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _110: isize;
    let mut _114: isize;
    let mut _116: std::result::Result<util::FilenameTemplate, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _117: isize;
    let mut _121: isize;
    let mut _123: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _124: isize;
    let mut _128: isize;
    let mut _130: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _131: isize;
    let mut _134: cmd::split::Args;
    let mut _135: std::option::Option<std::string::String>;
    let mut _136: std::string::String;
    let mut _137: usize;
    let mut _138: usize;
    let mut _139: util::FilenameTemplate;
    let mut _140: bool;
    let mut _141: std::option::Option<config::Delimiter>;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<usize>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<usize>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<util::FilenameTemplate>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<std::option::Option<config::Delimiter>>;
                            scope 7 {
                                debug __field6 => _9;
                                let _85: std::option::Option<std::string::String>;
                                let _87: std::option::Option<std::string::String>;
                                let _90: std::option::Option<std::string::String>;
                                let _91: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __key => _16;
                                    let _13: std::option::Option<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field>;
                                    let _14: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _16: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field;
                                    let _25: std::option::Option<std::string::String>;
                                    let _26: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _34: std::string::String;
                                    let _35: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _43: usize;
                                    let _44: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _52: usize;
                                    let _53: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _61: util::FilenameTemplate;
                                    let _62: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _70: bool;
                                    let _71: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _79: std::option::Option<config::Delimiter>;
                                    let _80: <__A as serde::de::MapAccess<'_>>::Error;
                                    let _84: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __val => _13;
                                    }
                                    scope 10 {
                                        debug __err => _14;
                                    }
                                    scope 11 {
                                        debug __val => _25;
                                    }
                                    scope 12 {
                                        debug __err => _26;
                                    }
                                    scope 13 {
                                        debug __val => _34;
                                    }
                                    scope 14 {
                                        debug __err => _35;
                                    }
                                    scope 15 {
                                        debug __val => _43;
                                    }
                                    scope 16 {
                                        debug __err => _44;
                                    }
                                    scope 17 {
                                        debug __val => _52;
                                    }
                                    scope 18 {
                                        debug __err => _53;
                                    }
                                    scope 19 {
                                        debug __val => _61;
                                    }
                                    scope 20 {
                                        debug __err => _62;
                                    }
                                    scope 21 {
                                        debug __val => _70;
                                    }
                                    scope 22 {
                                        debug __err => _71;
                                    }
                                    scope 23 {
                                        debug __val => _79;
                                    }
                                    scope 24 {
                                        debug __err => _80;
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny;
                                    }
                                    scope 27 {
                                        debug __err => _84;
                                    }
                                }
                                scope 28 {
                                    debug __field0 => _85;
                                    let _92: std::string::String;
                                    let _94: std::string::String;
                                    let _97: std::string::String;
                                    let _98: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 32 {
                                        debug __field1 => _92;
                                        let _99: usize;
                                        let _101: usize;
                                        let _104: usize;
                                        let _105: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 36 {
                                            debug __field2 => _99;
                                            let _106: usize;
                                            let _108: usize;
                                            let _111: usize;
                                            let _112: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 40 {
                                                debug __field3 => _106;
                                                let _113: util::FilenameTemplate;
                                                let _115: util::FilenameTemplate;
                                                let _118: util::FilenameTemplate;
                                                let _119: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 44 {
                                                    debug __field4 => _113;
                                                    let _120: bool;
                                                    let _122: bool;
                                                    let _125: bool;
                                                    let _126: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 48 {
                                                        debug __field5 => _120;
                                                        let _127: std::option::Option<config::Delimiter>;
                                                        let _129: std::option::Option<config::Delimiter>;
                                                        let _132: std::option::Option<config::Delimiter>;
                                                        let _133: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 52 {
                                                            debug __field6 => _127;
                                                        }
                                                        scope 53 {
                                                            debug __field6 => _129;
                                                        }
                                                        scope 54 {
                                                            debug __val => _132;
                                                        }
                                                        scope 55 {
                                                            debug __err => _133;
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug __field5 => _122;
                                                    }
                                                    scope 50 {
                                                        debug __val => _125;
                                                    }
                                                    scope 51 {
                                                        debug __err => _126;
                                                    }
                                                }
                                                scope 45 {
                                                    debug __field4 => _115;
                                                }
                                                scope 46 {
                                                    debug __val => _118;
                                                }
                                                scope 47 {
                                                    debug __err => _119;
                                                }
                                            }
                                            scope 41 {
                                                debug __field3 => _108;
                                            }
                                            scope 42 {
                                                debug __val => _111;
                                            }
                                            scope 43 {
                                                debug __err => _112;
                                            }
                                        }
                                        scope 37 {
                                            debug __field2 => _101;
                                        }
                                        scope 38 {
                                            debug __val => _104;
                                        }
                                        scope 39 {
                                            debug __err => _105;
                                        }
                                    }
                                    scope 33 {
                                        debug __field1 => _94;
                                    }
                                    scope 34 {
                                        debug __val => _97;
                                    }
                                    scope 35 {
                                        debug __err => _98;
                                    }
                                }
                                scope 29 {
                                    debug __field0 => _87;
                                }
                                scope 30 {
                                    debug __val => _90;
                                }
                                scope 31 {
                                    debug __err => _91;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _144 = const false;
        _143 = const false;
        _142 = const false;
        _144 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _143 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _5 = std::option::Option::<usize>::None;
        _6 = std::option::Option::<usize>::None;
        _142 = const true;
        _7 = std::option::Option::<FilenameTemplate>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _11 = &mut _2;
        _10 = <__A as MapAccess<'_>>::next_key::<split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for split::Args>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb138];
    }

    bb2: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb118;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field>);
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _86 = discriminant(_3);
        switchInt(move _86) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_13 as Some).0: cmd::split::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::split::Args>::deserialize::__Field);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb55, 6: bb63, otherwise: bb8];
    }

    bb8: {
        _82 = &mut _2;
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb71, unwind: bb138];
    }

    bb9: {
        _19 = &_3;
        _18 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_19) -> [return: bb10, unwind: bb138];
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb138];
    }

    bb12: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb118;
    }

    bb13: {
        _23 = &mut _2;
        _22 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_23) -> [return: bb14, unwind: bb138];
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb118;
    }

    bb16: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::string::String>);
        _21 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _25);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _144 = const true;
        _3 = move _21;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _144 = const true;
        _3 = move _21;
        goto -> bb138;
    }

    bb19: {
        _28 = &_4;
        _27 = std::option::Option::<std::string::String>::is_some(_28) -> [return: bb20, unwind: bb138];
    }

    bb20: {
        switchInt(move _27) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _29 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_outdir") -> [return: bb22, unwind: bb138];
    }

    bb22: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb118;
    }

    bb23: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_32) -> [return: bb24, unwind: bb138];
    }

    bb24: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _35 = move ((_31 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb118;
    }

    bb26: {
        _34 = move ((_31 as Ok).0: std::string::String);
        _30 = std::option::Option::<std::string::String>::Some(move _34);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _143 = const true;
        _4 = move _30;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _143 = const true;
        _4 = move _30;
        goto -> bb138;
    }

    bb29: {
        _37 = &_5;
        _36 = std::option::Option::<usize>::is_some(_37) -> [return: bb30, unwind: bb138];
    }

    bb30: {
        switchInt(move _36) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _38 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_size") -> [return: bb32, unwind: bb138];
    }

    bb32: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb118;
    }

    bb33: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<usize>(_41) -> [return: bb34, unwind: bb138];
    }

    bb34: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _44 = move ((_40 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb118;
    }

    bb36: {
        _43 = ((_40 as Ok).0: usize);
        _39 = std::option::Option::<usize>::Some(_43);
        _5 = move _39;
        goto -> bb1;
    }

    bb37: {
        _46 = &_6;
        _45 = std::option::Option::<usize>::is_some(_46) -> [return: bb38, unwind: bb138];
    }

    bb38: {
        switchInt(move _45) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _47 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_jobs") -> [return: bb40, unwind: bb138];
    }

    bb40: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb118;
    }

    bb41: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<usize>(_50) -> [return: bb42, unwind: bb138];
    }

    bb42: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _53 = move ((_49 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb118;
    }

    bb44: {
        _52 = ((_49 as Ok).0: usize);
        _48 = std::option::Option::<usize>::Some(_52);
        _6 = move _48;
        goto -> bb1;
    }

    bb45: {
        _55 = &_7;
        _54 = std::option::Option::<FilenameTemplate>::is_some(_55) -> [return: bb46, unwind: bb138];
    }

    bb46: {
        switchInt(move _54) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _56 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_filename") -> [return: bb48, unwind: bb138];
    }

    bb48: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb118;
    }

    bb49: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<FilenameTemplate>(_59) -> [return: bb50, unwind: bb138];
    }

    bb50: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _62 = move ((_58 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb118;
    }

    bb52: {
        _61 = move ((_58 as Ok).0: util::FilenameTemplate);
        _57 = std::option::Option::<FilenameTemplate>::Some(move _61);
        drop(_7) -> [return: bb53, unwind: bb54];
    }

    bb53: {
        _142 = const true;
        _7 = move _57;
        goto -> bb1;
    }

    bb54 (cleanup): {
        _142 = const true;
        _7 = move _57;
        goto -> bb138;
    }

    bb55: {
        _64 = &_8;
        _63 = std::option::Option::<bool>::is_some(_64) -> [return: bb56, unwind: bb138];
    }

    bb56: {
        switchInt(move _63) -> [0: bb59, otherwise: bb57];
    }

    bb57: {
        _65 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb58, unwind: bb138];
    }

    bb58: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb118;
    }

    bb59: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<bool>(_68) -> [return: bb60, unwind: bb138];
    }

    bb60: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb62, 1: bb61, otherwise: bb4];
    }

    bb61: {
        _71 = move ((_67 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb118;
    }

    bb62: {
        _70 = ((_67 as Ok).0: bool);
        _66 = std::option::Option::<bool>::Some(_70);
        _8 = move _66;
        goto -> bb1;
    }

    bb63: {
        _73 = &_9;
        _72 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_73) -> [return: bb64, unwind: bb138];
    }

    bb64: {
        switchInt(move _72) -> [0: bb67, otherwise: bb65];
    }

    bb65: {
        _74 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb66, unwind: bb138];
    }

    bb66: {
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb118;
    }

    bb67: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_77) -> [return: bb68, unwind: bb138];
    }

    bb68: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb70, 1: bb69, otherwise: bb4];
    }

    bb69: {
        _80 = move ((_76 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb118;
    }

    bb70: {
        _79 = ((_76 as Ok).0: std::option::Option<config::Delimiter>);
        _75 = std::option::Option::<std::option::Option<Delimiter>>::Some(_79);
        _9 = move _75;
        goto -> bb1;
    }

    bb71: {
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb1, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _84 = move ((_81 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb118;
    }

    bb73: {
        _88 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb75, unwind: bb138];
    }

    bb74: {
        _144 = const false;
        _87 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _85 = move _87;
        goto -> bb78;
    }

    bb75: {
        _89 = discriminant(_88);
        switchInt(move _89) -> [0: bb77, 1: bb76, otherwise: bb4];
    }

    bb76: {
        _91 = move ((_88 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb118;
    }

    bb77: {
        _90 = move ((_88 as Ok).0: std::option::Option<std::string::String>);
        _85 = move _90;
        goto -> bb78;
    }

    bb78: {
        _93 = discriminant(_4);
        switchInt(move _93) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        _95 = serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "arg_outdir") -> [return: bb81, unwind: bb122];
    }

    bb80: {
        _143 = const false;
        _94 = move ((_4 as Some).0: std::string::String);
        _92 = move _94;
        goto -> bb84;
    }

    bb81: {
        _96 = discriminant(_95);
        switchInt(move _96) -> [0: bb83, 1: bb82, otherwise: bb4];
    }

    bb82: {
        _98 = move ((_95 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _98);
        goto -> bb117;
    }

    bb83: {
        _97 = move ((_95 as Ok).0: std::string::String);
        _92 = move _97;
        goto -> bb84;
    }

    bb84: {
        _100 = discriminant(_5);
        switchInt(move _100) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        _102 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_size") -> [return: bb87, unwind: bb121];
    }

    bb86: {
        _101 = ((_5 as Some).0: usize);
        _99 = _101;
        goto -> bb90;
    }

    bb87: {
        _103 = discriminant(_102);
        switchInt(move _103) -> [0: bb89, 1: bb88, otherwise: bb4];
    }

    bb88: {
        _105 = move ((_102 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _105);
        goto -> bb116;
    }

    bb89: {
        _104 = ((_102 as Ok).0: usize);
        _99 = _104;
        goto -> bb90;
    }

    bb90: {
        _107 = discriminant(_6);
        switchInt(move _107) -> [0: bb91, 1: bb92, otherwise: bb4];
    }

    bb91: {
        _109 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_jobs") -> [return: bb93, unwind: bb121];
    }

    bb92: {
        _108 = ((_6 as Some).0: usize);
        _106 = _108;
        goto -> bb96;
    }

    bb93: {
        _110 = discriminant(_109);
        switchInt(move _110) -> [0: bb95, 1: bb94, otherwise: bb4];
    }

    bb94: {
        _112 = move ((_109 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _112);
        goto -> bb116;
    }

    bb95: {
        _111 = ((_109 as Ok).0: usize);
        _106 = _111;
        goto -> bb96;
    }

    bb96: {
        _114 = discriminant(_7);
        switchInt(move _114) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        _116 = serde::private::de::missing_field::<'_, FilenameTemplate, <__A as MapAccess<'_>>::Error>(const "flag_filename") -> [return: bb99, unwind: bb121];
    }

    bb98: {
        _142 = const false;
        _115 = move ((_7 as Some).0: util::FilenameTemplate);
        _113 = move _115;
        goto -> bb102;
    }

    bb99: {
        _117 = discriminant(_116);
        switchInt(move _117) -> [0: bb101, 1: bb100, otherwise: bb4];
    }

    bb100: {
        _119 = move ((_116 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _119);
        goto -> bb116;
    }

    bb101: {
        _118 = move ((_116 as Ok).0: util::FilenameTemplate);
        _113 = move _118;
        goto -> bb102;
    }

    bb102: {
        _121 = discriminant(_8);
        switchInt(move _121) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        _123 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb105, unwind: bb120];
    }

    bb104: {
        _122 = ((_8 as Some).0: bool);
        _120 = _122;
        goto -> bb108;
    }

    bb105: {
        _124 = discriminant(_123);
        switchInt(move _124) -> [0: bb107, 1: bb106, otherwise: bb4];
    }

    bb106: {
        _126 = move ((_123 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _126);
        goto -> bb115;
    }

    bb107: {
        _125 = ((_123 as Ok).0: bool);
        _120 = _125;
        goto -> bb108;
    }

    bb108: {
        _128 = discriminant(_9);
        switchInt(move _128) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        _130 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb111, unwind: bb120];
    }

    bb110: {
        _129 = ((_9 as Some).0: std::option::Option<config::Delimiter>);
        _127 = _129;
        goto -> bb114;
    }

    bb111: {
        _131 = discriminant(_130);
        switchInt(move _131) -> [0: bb113, 1: bb112, otherwise: bb4];
    }

    bb112: {
        _133 = move ((_130 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Err(move _133);
        goto -> bb115;
    }

    bb113: {
        _132 = ((_130 as Ok).0: std::option::Option<config::Delimiter>);
        _127 = _132;
        goto -> bb114;
    }

    bb114: {
        _135 = move _85;
        _136 = move _92;
        _137 = _99;
        _138 = _106;
        _139 = move _113;
        _140 = _120;
        _141 = _127;
        _134 = split::Args { arg_input: move _135, arg_outdir: move _136, flag_size: move _137, flag_jobs: move _138, flag_filename: move _139, flag_no_headers: move _140, flag_delimiter: move _141 };
        _0 = Result::<split::Args, <__A as MapAccess<'_>>::Error>::Ok(move _134);
        _142 = const false;
        _143 = const false;
        _144 = const false;
        drop(_2) -> [return: bb119, unwind continue];
    }

    bb115: {
        drop(_113) -> [return: bb116, unwind: bb121];
    }

    bb116: {
        drop(_92) -> [return: bb117, unwind: bb122];
    }

    bb117: {
        drop(_85) -> [return: bb118, unwind: bb138];
    }

    bb118: {
        _145 = discriminant(_7);
        switchInt(move _145) -> [1: bb128, otherwise: bb127];
    }

    bb119: {
        return;
    }

    bb120 (cleanup): {
        drop(_113) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_92) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_85) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        _149 = discriminant(_4);
        switchInt(move _149) -> [1: bb139, otherwise: bb124];
    }

    bb124 (cleanup): {
        _150 = discriminant(_3);
        switchInt(move _150) -> [1: bb141, otherwise: bb125];
    }

    bb125 (cleanup): {
        drop(_2) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        resume;
    }

    bb127: {
        _142 = const false;
        _146 = discriminant(_4);
        switchInt(move _146) -> [1: bb131, otherwise: bb130];
    }

    bb128: {
        switchInt(_142) -> [0: bb127, otherwise: bb129];
    }

    bb129: {
        drop(((_7 as Some).0: util::FilenameTemplate)) -> [return: bb127, unwind: bb123];
    }

    bb130: {
        _143 = const false;
        _147 = discriminant(_3);
        switchInt(move _147) -> [1: bb134, otherwise: bb133];
    }

    bb131: {
        switchInt(_143) -> [0: bb130, otherwise: bb132];
    }

    bb132: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb130, unwind: bb124];
    }

    bb133: {
        _144 = const false;
        drop(_2) -> [return: bb119, unwind continue];
    }

    bb134: {
        switchInt(_144) -> [0: bb133, otherwise: bb135];
    }

    bb135: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb133, unwind: bb125];
    }

    bb136 (cleanup): {
        switchInt(_142) -> [0: bb123, otherwise: bb137];
    }

    bb137 (cleanup): {
        drop(((_7 as Some).0: util::FilenameTemplate)) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        _148 = discriminant(_7);
        switchInt(move _148) -> [1: bb136, otherwise: bb123];
    }

    bb139 (cleanup): {
        switchInt(_143) -> [0: bb124, otherwise: bb140];
    }

    bb140 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_144) -> [0: bb125, otherwise: bb142];
    }

    bb142 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb125, unwind terminate(cleanup)];
    }
}

const split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 7];
    let _2: &[&str; 7];
    let _3: [&str; 7];
    let mut _4: &[&str; 7];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in split::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/split.rs:49:17: 49:28>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "arg_input", const "arg_outdir", const "flag_size", const "flag_jobs", const "flag_filename", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn split::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::split::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::split::Args>;
    let mut _4: std::result::Result<cmd::split::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::split::Args;
    let mut _9: usize;
    let mut _10: CliError;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _12: std::result::Result<(), std::io::Error>;
    let mut _13: &std::string::String;
    let mut _14: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _17: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _18: &config::Config;
    let _19: config::Config;
    let mut _20: &cmd::split::Args;
    let mut _21: isize;
    let mut _24: isize;
    let mut _26: &cmd::split::Args;
    let mut _27: &cmd::split::Args;
    let mut _28: &str;
    scope 1 {
        debug args => _2;
        let _15: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _22: std::result::Result<std::convert::Infallible, CliError>;
        let _23: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
        let _25: index::Indexed<std::fs::File, std::fs::File>;
        scope 6 {
            debug residual => _15;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _22;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _23;
            scope 13 {
            }
        }
        scope 14 {
            debug idx => _25;
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const {alloc30: &&str};
        _28 = deref_copy (*_5);
        _4 = get_args::<split::Args>(_28, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<split::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::split::Args);
        _2 = move _8;
        _9 = (_2.2: usize);
        switchInt(move _9) -> [0: bb6, otherwise: bb8];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb25, unwind continue];
    }

    bb6: {
        _10 = <CliError as From<&str>>::from(const "--size must be greater than 0.") -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _0 = Result::<(), CliError>::Err(move _10);
        goto -> bb24;
    }

    bb8: {
        _13 = &(_2.1: std::string::String);
        _12 = create_dir_all::<&std::string::String>(move _13) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _11 = <Result<(), std::io::Error> as Try>::branch(move _12) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        _20 = &_2;
        _19 = split::Args::rconfig(move _20) -> [return: bb13, unwind: bb30];
    }

    bb12: {
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _15) -> [return: bb32, unwind: bb30];
    }

    bb13: {
        _18 = &_19;
        _17 = Config::indexed(move _18) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _16 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _17) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _23 = move ((_16 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _24 = discriminant(_23);
        switchInt(move _24) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb17: {
        _22 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _22) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        drop(_2) -> [return: bb23, unwind: bb29];
    }

    bb19: {
        _27 = &_2;
        _0 = split::Args::sequential_split(move _27) -> [return: bb33, unwind: bb26];
    }

    bb20: {
        _25 = move ((_23 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _26 = &_2;
        _0 = split::Args::parallel_split(move _26, move _25) -> [return: bb34, unwind: bb26];
    }

    bb21: {
        drop(_2) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        drop(_19) -> [return: bb25, unwind continue];
    }

    bb23: {
        drop(_19) -> [return: bb25, unwind continue];
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_19) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        goto -> bb24;
    }

    bb33: {
        goto -> bb21;
    }

    bb34: {
        goto -> bb21;
    }
}

alloc30 (static: split::USAGE, size: 16, align: 8) {
    ╾───alloc1614<imm>────╼ 3d 06 00 00 00 00 00 00 │ ╾──────╼=.......
}

alloc1614 (size: 1597, align: 1) {
    0x000 │ 0a 53 70 6c 69 74 73 20 74 68 65 20 67 69 76 65 │ .Splits the give
    0x010 │ 6e 20 43 53 56 20 64 61 74 61 20 69 6e 74 6f 20 │ n CSV data into 
    0x020 │ 63 68 75 6e 6b 73 2e 0a 0a 54 68 65 20 66 69 6c │ chunks...The fil
    0x030 │ 65 73 20 61 72 65 20 77 72 69 74 74 65 6e 20 74 │ es are written t
    0x040 │ 6f 20 74 68 65 20 64 69 72 65 63 74 6f 72 79 20 │ o the directory 
    0x050 │ 67 69 76 65 6e 20 77 69 74 68 20 74 68 65 20 6e │ given with the n
    0x060 │ 61 6d 65 20 27 7b 73 74 61 72 74 7d 2e 63 73 76 │ ame '{start}.csv
    0x070 │ 27 2c 0a 77 68 65 72 65 20 7b 73 74 61 72 74 7d │ ',.where {start}
    0x080 │ 20 69 73 20 74 68 65 20 69 6e 64 65 78 20 6f 66 │  is the index of
    0x090 │ 20 74 68 65 20 66 69 72 73 74 20 72 65 63 6f 72 │  the first recor
    0x0a0 │ 64 20 6f 66 20 74 68 65 20 63 68 75 6e 6b 20 28 │ d of the chunk (
    0x0b0 │ 73 74 61 72 74 69 6e 67 20 61 74 20 30 29 2e 0a │ starting at 0)..
    0x0c0 │ 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 │ .Usage:.    xsv 
    0x0d0 │ 73 70 6c 69 74 20 5b 6f 70 74 69 6f 6e 73 5d 20 │ split [options] 
    0x0e0 │ 3c 6f 75 74 64 69 72 3e 20 5b 3c 69 6e 70 75 74 │ <outdir> [<input
    0x0f0 │ 3e 5d 0a 20 20 20 20 78 73 76 20 73 70 6c 69 74 │ >].    xsv split
    0x100 │ 20 2d 2d 68 65 6c 70 0a 0a 73 70 6c 69 74 20 6f │  --help..split o
    0x110 │ 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d 73 2c 20 │ ptions:.    -s, 
    0x120 │ 2d 2d 73 69 7a 65 20 3c 61 72 67 3e 20 20 20 20 │ --size <arg>    
    0x130 │ 20 20 20 54 68 65 20 6e 75 6d 62 65 72 20 6f 66 │    The number of
    0x140 │ 20 72 65 63 6f 72 64 73 20 74 6f 20 77 72 69 74 │  records to writ
    0x150 │ 65 20 69 6e 74 6f 20 65 61 63 68 20 63 68 75 6e │ e into each chun
    0x160 │ 6b 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ k..             
    0x170 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 5b 64 │               [d
    0x180 │ 65 66 61 75 6c 74 3a 20 35 30 30 5d 0a 20 20 20 │ efault: 500].   
    0x190 │ 20 2d 6a 2c 20 2d 2d 6a 6f 62 73 20 3c 61 72 67 │  -j, --jobs <arg
    0x1a0 │ 3e 20 20 20 20 20 20 20 54 68 65 20 6e 75 6d 62 │ >       The numb
    0x1b0 │ 65 72 20 6f 66 20 73 70 6c 69 74 69 6e 67 20 6a │ er of spliting j
    0x1c0 │ 6f 62 73 20 74 6f 20 72 75 6e 20 69 6e 20 70 61 │ obs to run in pa
    0x1d0 │ 72 61 6c 6c 65 6c 2e 0a 20 20 20 20 20 20 20 20 │ rallel..        
    0x1e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1f0 │ 20 20 20 54 68 69 73 20 6f 6e 6c 79 20 77 6f 72 │    This only wor
    0x200 │ 6b 73 20 77 68 65 6e 20 74 68 65 20 67 69 76 65 │ ks when the give
    0x210 │ 6e 20 43 53 56 20 64 61 74 61 20 68 61 73 0a 20 │ n CSV data has. 
    0x220 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x230 │ 20 20 20 20 20 20 20 20 20 20 61 6e 20 69 6e 64 │           an ind
    0x240 │ 65 78 20 61 6c 72 65 61 64 79 20 63 72 65 61 74 │ ex already creat
    0x250 │ 65 64 2e 20 4e 6f 74 65 20 74 68 61 74 20 61 20 │ ed. Note that a 
    0x260 │ 66 69 6c 65 20 68 61 6e 64 6c 65 0a 20 20 20 20 │ file handle.    
    0x270 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x280 │ 20 20 20 20 20 20 20 69 73 20 6f 70 65 6e 65 64 │        is opened
    0x290 │ 20 66 6f 72 20 65 61 63 68 20 6a 6f 62 2e 0a 20 │  for each job.. 
    0x2a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2b0 │ 20 20 20 20 20 20 20 20 20 20 57 68 65 6e 20 73 │           When s
    0x2c0 │ 65 74 20 74 6f 20 27 30 27 2c 20 74 68 65 20 6e │ et to '0', the n
    0x2d0 │ 75 6d 62 65 72 20 6f 66 20 6a 6f 62 73 20 69 73 │ umber of jobs is
    0x2e0 │ 20 73 65 74 20 74 6f 20 74 68 65 0a 20 20 20 20 │  set to the.    
    0x2f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x300 │ 20 20 20 20 20 20 20 6e 75 6d 62 65 72 20 6f 66 │        number of
    0x310 │ 20 43 50 55 73 20 64 65 74 65 63 74 65 64 2e 0a │  CPUs detected..
    0x320 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x330 │ 20 20 20 20 20 20 20 20 20 20 20 5b 64 65 66 61 │            [defa
    0x340 │ 75 6c 74 3a 20 30 5d 0a 20 20 20 20 2d 2d 66 69 │ ult: 0].    --fi
    0x350 │ 6c 65 6e 61 6d 65 20 3c 66 69 6c 65 6e 61 6d 65 │ lename <filename
    0x360 │ 3e 20 20 41 20 66 69 6c 65 6e 61 6d 65 20 74 65 │ >  A filename te
    0x370 │ 6d 70 6c 61 74 65 20 74 6f 20 75 73 65 20 77 68 │ mplate to use wh
    0x380 │ 65 6e 20 63 6f 6e 73 74 72 75 63 74 69 6e 67 0a │ en constructing.
    0x390 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3a0 │ 20 20 20 20 20 20 20 20 20 20 20 74 68 65 20 6e │            the n
    0x3b0 │ 61 6d 65 73 20 6f 66 20 74 68 65 20 6f 75 74 70 │ ames of the outp
    0x3c0 │ 75 74 20 66 69 6c 65 73 2e 20 20 54 68 65 20 73 │ ut files.  The s
    0x3d0 │ 74 72 69 6e 67 20 27 7b 7d 27 0a 20 20 20 20 20 │ tring '{}'.     
    0x3e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x3f0 │ 20 20 20 20 20 20 77 69 6c 6c 20 62 65 20 72 65 │       will be re
    0x400 │ 70 6c 61 63 65 64 20 62 79 20 61 20 76 61 6c 75 │ placed by a valu
    0x410 │ 65 20 62 61 73 65 64 20 6f 6e 20 74 68 65 20 76 │ e based on the v
    0x420 │ 61 6c 75 65 0a 20 20 20 20 20 20 20 20 20 20 20 │ alue.           
    0x430 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x440 │ 6f 66 20 74 68 65 20 66 69 65 6c 64 2c 20 62 75 │ of the field, bu
    0x450 │ 74 20 73 61 6e 69 74 69 7a 65 64 20 66 6f 72 20 │ t sanitized for 
    0x460 │ 73 68 65 6c 6c 20 73 61 66 65 74 79 2e 0a 20 20 │ shell safety..  
    0x470 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x480 │ 20 20 20 20 20 20 20 20 20 5b 64 65 66 61 75 6c │          [defaul
    0x490 │ 74 3a 20 7b 7d 2e 63 73 76 5d 0a 0a 43 6f 6d 6d │ t: {}.csv]..Comm
    0x4a0 │ 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 │ on options:.    
    0x4b0 │ 2d 68 2c 20 2d 2d 68 65 6c 70 20 20 20 20 20 20 │ -h, --help      
    0x4c0 │ 20 20 20 20 20 20 20 44 69 73 70 6c 61 79 20 74 │        Display t
    0x4d0 │ 68 69 73 20 6d 65 73 73 61 67 65 0a 20 20 20 20 │ his message.    
    0x4e0 │ 2d 6e 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 │ -n, --no-headers
    0x4f0 │ 20 20 20 20 20 20 20 57 68 65 6e 20 73 65 74 2c │        When set,
    0x500 │ 20 74 68 65 20 66 69 72 73 74 20 72 6f 77 20 77 │  the first row w
    0x510 │ 69 6c 6c 20 4e 4f 54 20 62 65 20 69 6e 74 65 72 │ ill NOT be inter
    0x520 │ 70 72 65 74 65 64 0a 20 20 20 20 20 20 20 20 20 │ preted.         
    0x530 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x540 │ 20 20 61 73 20 63 6f 6c 75 6d 6e 20 6e 61 6d 65 │   as column name
    0x550 │ 73 2e 20 4f 74 68 65 72 77 69 73 65 2c 20 74 68 │ s. Otherwise, th
    0x560 │ 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 6c 6c │ e first row will
    0x570 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x580 │ 20 20 20 20 20 20 20 20 20 20 20 20 61 70 70 65 │             appe
    0x590 │ 61 72 20 69 6e 20 61 6c 6c 20 63 68 75 6e 6b 73 │ ar in all chunks
    0x5a0 │ 20 61 73 20 74 68 65 20 68 65 61 64 65 72 20 72 │  as the header r
    0x5b0 │ 6f 77 2e 0a 20 20 20 20 2d 64 2c 20 2d 2d 64 65 │ ow..    -d, --de
    0x5c0 │ 6c 69 6d 69 74 65 72 20 3c 61 72 67 3e 20 20 54 │ limiter <arg>  T
    0x5d0 │ 68 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 74 │ he field delimit
    0x5e0 │ 65 72 20 66 6f 72 20 72 65 61 64 69 6e 67 20 43 │ er for reading C
    0x5f0 │ 53 56 20 64 61 74 61 2e 0a 20 20 20 20 20 20 20 │ SV data..       
    0x600 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x610 │ 20 20 20 20 4d 75 73 74 20 62 65 20 61 20 73 69 │     Must be a si
    0x620 │ 6e 67 6c 65 20 63 68 61 72 61 63 74 65 72 2e 20 │ ngle character. 
    0x630 │ 28 64 65 66 61 75 6c 74 3a 20 2c 29 0a          │ (default: ,).
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::sequential_split(_1: &split::Args) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: config::Config;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _5: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _6: &config::Config;
    let mut _7: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _12: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _13: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _14: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _19: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, CliError>;
    let _20: &csv::ByteRecord;
    let mut _21: isize;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _27: std::result::Result<bool, csv::Error>;
    let mut _28: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _29: &mut csv::ByteRecord;
    let mut _30: isize;
    let mut _33: bool;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _40: std::result::Result<(), std::io::Error>;
    let mut _41: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _42: isize;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _45: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, CliError>;
    let _46: &csv::ByteRecord;
    let mut _47: usize;
    let mut _48: isize;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _52: std::result::Result<(), csv::Error>;
    let mut _53: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _54: &csv::ByteRecord;
    let mut _55: isize;
    let mut _57: (usize, bool);
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _59: std::result::Result<(), std::io::Error>;
    let mut _60: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _61: isize;
    scope 1 {
        debug rconfig => _2;
        let mut _3: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
        let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
        scope 2 {
            debug rdr => _3;
            let _10: csv::ByteRecord;
            let _15: std::result::Result<std::convert::Infallible, csv::Error>;
            let _16: &csv::ByteRecord;
            scope 7 {
                debug headers => _10;
                let mut _17: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                let _22: std::result::Result<std::convert::Infallible, CliError>;
                let _23: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                scope 12 {
                    debug wtr => _17;
                    let mut _24: usize;
                    scope 17 {
                        debug i => _24;
                        let mut _25: csv::ByteRecord;
                        scope 18 {
                            debug row => _25;
                            let _31: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _32: bool;
                            let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
                            let _49: std::result::Result<std::convert::Infallible, CliError>;
                            let _50: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                            let _56: std::result::Result<std::convert::Infallible, csv::Error>;
                            let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 19 {
                                debug residual => _31;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug val => _32;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug residual => _43;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => const ();
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug residual => _49;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => _50;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug residual => _56;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => const ();
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug residual => _62;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug val => const ();
                                scope 38 {
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _22;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _23;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _15;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _16;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = split::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _5 = Config::reader(move _6) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _4 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb58];
    }

    bb3: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_4 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _3 = move _9;
        _13 = &mut _3;
        _12 = Reader::<Box<dyn std::io::Read>>::byte_headers(move _13) -> [return: bb7, unwind: bb57];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb62, unwind: bb58];
    }

    bb7: {
        _11 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _12) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _16 = ((_11 as Continue).0: &csv::ByteRecord);
        _10 = <ByteRecord as Clone>::clone(_16) -> [return: bb11, unwind: bb57];
    }

    bb10: {
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _15) -> [return: bb63, unwind: bb57];
    }

    bb11: {
        _20 = &_10;
        _19 = split::Args::new_writer(_1, _20, const 0_usize) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        _18 = <Result<Writer<Box<dyn std::io::Write>>, CliError> as Try>::branch(move _19) -> [return: bb13, unwind: bb56];
    }

    bb13: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        _23 = move ((_18 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _17 = move _23;
        _24 = const 0_usize;
        _25 = ByteRecord::new() -> [return: bb64, unwind: bb55];
    }

    bb15: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _22) -> [return: bb65, unwind: bb56];
    }

    bb16: {
        _28 = &mut _3;
        _29 = &mut _25;
        _27 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _28, _29) -> [return: bb17, unwind: bb54];
    }

    bb17: {
        _26 = <Result<bool, csv::Error> as Try>::branch(move _27) -> [return: bb18, unwind: bb54];
    }

    bb18: {
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        _32 = ((_26 as Continue).0: bool);
        switchInt(_32) -> [0: bb61, otherwise: bb60];
    }

    bb20: {
        _31 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _31) -> [return: bb66, unwind: bb54];
    }

    bb21: {
        _36 = _24;
        _37 = ((*_1).2: usize);
        _38 = Eq(_37, const 0_usize);
        assert(!move _38, "attempt to calculate the remainder of `{}` with a divisor of zero", _36) -> [success: bb22, unwind: bb54];
    }

    bb22: {
        _35 = Rem(move _36, move _37);
        switchInt(move _35) -> [0: bb23, otherwise: bb34];
    }

    bb23: {
        _41 = &mut _17;
        _40 = Writer::<Box<dyn std::io::Write>>::flush(move _41) -> [return: bb24, unwind: bb54];
    }

    bb24: {
        _39 = <Result<(), std::io::Error> as Try>::branch(move _40) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        _46 = &_10;
        _47 = _24;
        _45 = split::Args::new_writer(_1, _46, move _47) -> [return: bb28, unwind: bb54];
    }

    bb27: {
        _43 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _43) -> [return: bb67, unwind: bb54];
    }

    bb28: {
        _44 = <Result<Writer<Box<dyn std::io::Write>>, CliError> as Try>::branch(move _45) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        _48 = discriminant(_44);
        switchInt(move _48) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        _50 = move ((_44 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        drop(_17) -> [return: bb32, unwind: bb33];
    }

    bb31: {
        _49 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _49) -> [return: bb68, unwind: bb54];
    }

    bb32: {
        _17 = move _50;
        goto -> bb34;
    }

    bb33 (cleanup): {
        _17 = move _50;
        goto -> bb54;
    }

    bb34: {
        _53 = &mut _17;
        _54 = &_25;
        _52 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _53, _54) -> [return: bb35, unwind: bb54];
    }

    bb35: {
        _51 = <Result<(), csv::Error> as Try>::branch(move _52) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        _57 = CheckedAdd(_24, const 1_usize);
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", _24, const 1_usize) -> [success: bb39, unwind: bb54];
    }

    bb38: {
        _56 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _56) -> [return: bb69, unwind: bb54];
    }

    bb39: {
        _24 = move (_57.0: usize);
        goto -> bb16;
    }

    bb40: {
        _58 = <Result<(), std::io::Error> as Try>::branch(move _59) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_25) -> [return: bb44, unwind: bb55];
    }

    bb43: {
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _62) -> [return: bb70, unwind: bb54];
    }

    bb44: {
        drop(_17) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        drop(_10) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        drop(_3) -> [return: bb47, unwind: bb58];
    }

    bb47: {
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb48: {
        drop(_25) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        drop(_17) -> [return: bb50, unwind: bb56];
    }

    bb50: {
        drop(_10) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        drop(_3) -> [return: bb52, unwind: bb58];
    }

    bb52: {
        drop(_2) -> [return: bb53, unwind continue];
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_25) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_17) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_10) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_3) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }

    bb60: {
        _34 = _24;
        _33 = Gt(move _34, const 0_usize);
        switchInt(move _33) -> [0: bb34, otherwise: bb21];
    }

    bb61: {
        _60 = &mut _17;
        _59 = Writer::<Box<dyn std::io::Write>>::flush(move _60) -> [return: bb40, unwind: bb54];
    }

    bb62: {
        goto -> bb52;
    }

    bb63: {
        goto -> bb51;
    }

    bb64: {
        goto -> bb16;
    }

    bb65: {
        goto -> bb50;
    }

    bb66: {
        goto -> bb48;
    }

    bb67: {
        goto -> bb48;
    }

    bb68: {
        goto -> bb48;
    }

    bb69: {
        goto -> bb48;
    }

    bb70: {
        goto -> bb48;
    }
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::parallel_split(_1: &split::Args, _2: Indexed<File, File>) -> Result<(), CliError> {
    debug self => _1;
    debug idx => _2;
    let mut _0: std::result::Result<(), CliError>;
    let _3: usize;
    let mut _4: usize;
    let mut _5: u64;
    let mut _6: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _7: usize;
    let mut _9: usize;
    let mut _11: std::ops::Range<usize>;
    let mut _12: std::ops::Range<usize>;
    let mut _14: std::option::Option<usize>;
    let mut _15: &mut std::ops::Range<usize>;
    let mut _16: isize;
    let _18: ();
    let mut _19: &chan::WaitGroup;
    let mut _22: &chan::WaitGroup;
    let _23: ();
    let mut _24: &threadpool::ThreadPool;
    let mut _25: {closure@src/cmd/split.rs:106:26: 106:33};
    let _26: ();
    let mut _27: &chan::WaitGroup;
    let mut _28: bool;
    scope 1 {
        debug nchunks => _3;
        let _8: threadpool::ThreadPool;
        scope 2 {
            debug pool => _8;
            let _10: chan::WaitGroup;
            scope 3 {
                debug wg => _10;
                let mut _13: std::ops::Range<usize>;
                scope 4 {
                    debug iter => _13;
                    let _17: usize;
                    scope 5 {
                        debug i => _17;
                        let _20: cmd::split::Args;
                        scope 6 {
                            debug args => _20;
                            let _21: chan::WaitGroup;
                            scope 7 {
                                debug wg => _21;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _28 = const false;
        _6 = &_2;
        _5 = Indexed::<File, File>::count(move _6) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _4 = move _5 as usize (IntToInt);
        _7 = ((*_1).2: usize);
        _3 = num_of_chunks(move _4, move _7) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _9 = split::Args::njobs(_1) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _8 = ThreadPool::new(move _9) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _10 = WaitGroup::new() -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _12 = std::ops::Range::<usize> { start: const 0_usize, end: _3 };
        _11 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _12) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _13 = move _11;
        goto -> bb7;
    }

    bb7: {
        _15 = &mut _13;
        _14 = <std::ops::Range<usize> as Iterator>::next(_15) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _17 = ((_14 as Some).0: usize);
        _19 = &_10;
        _18 = WaitGroup::add(move _19, const 1_i32) -> [return: bb12, unwind: bb20];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _27 = &_10;
        _26 = WaitGroup::wait(move _27) -> [return: bb16, unwind: bb20];
    }

    bb12: {
        _20 = <split::Args as Clone>::clone(_1) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _28 = const true;
        _22 = &_10;
        _21 = <WaitGroup as Clone>::clone(move _22) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _24 = &_8;
        _28 = const false;
        _25 = {closure@src/cmd/split.rs:106:26: 106:33} { args: move _20, i: _17, wg: move _21 };
        _23 = ThreadPool::execute::<{closure@src/cmd/split.rs:106:26: 106:33}>(move _24, move _25) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        _28 = const false;
        goto -> bb7;
    }

    bb16: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_10) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        drop(_8) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_8) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_20) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_28) -> [0: bb20, otherwise: bb24];
    }
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::parallel_split::{closure#0}(_1: {closure@src/cmd/split.rs:106:26: 106:33}) -> () {
    debug args => (_1.0: cmd::split::Args);
    debug i => (_1.1: usize);
    debug wg => (_1.2: chan::WaitGroup);
    let mut _0: ();
    let _2: config::Config;
    let mut _3: &cmd::split::Args;
    let mut _5: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _6: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _7: &config::Config;
    let _9: &csv::ByteRecord;
    let mut _10: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _11: &mut csv::Reader<std::fs::File>;
    let mut _12: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _14: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, CliError>;
    let mut _15: &cmd::split::Args;
    let _16: &csv::ByteRecord;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: (usize, bool);
    let _21: ();
    let mut _22: std::result::Result<(), CliError>;
    let mut _23: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _24: u64;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: (usize, bool);
    let mut _29: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _30: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _31: csv::ByteRecordsIter<'_, std::fs::File>;
    let mut _32: &mut csv::Reader<std::fs::File>;
    let mut _33: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _34: usize;
    let mut _36: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _37: &mut std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
    let mut _38: isize;
    let _41: ();
    let mut _42: std::result::Result<(), csv::Error>;
    let mut _43: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _44: &csv::ByteRecord;
    let _45: ();
    let mut _46: std::result::Result<(), std::io::Error>;
    let mut _47: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let _48: ();
    let mut _49: &chan::WaitGroup;
    scope 1 {
        debug conf => _2;
        let mut _4: index::Indexed<std::fs::File, std::fs::File>;
        scope 2 {
            debug idx => _4;
            let _8: csv::ByteRecord;
            scope 3 {
                debug headers => _8;
                let mut _13: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                scope 4 {
                    debug wtr => _13;
                    let mut _35: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
                    scope 5 {
                        debug iter => _35;
                        let _39: std::result::Result<csv::ByteRecord, csv::Error>;
                        scope 6 {
                            debug row => _39;
                            let _40: csv::ByteRecord;
                            scope 7 {
                                debug row => _40;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &(_1.0: cmd::split::Args);
        _2 = split::Args::rconfig(move _3) -> [return: bb1, unwind: bb42];
    }

    bb1: {
        _7 = &_2;
        _6 = Config::indexed(move _7) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _5 = Result::<std::option::Option<Indexed<File, File>>, CliError>::unwrap(move _6) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _4 = std::option::Option::<Indexed<File, File>>::unwrap(move _5) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _12 = &mut _4;
        _11 = <Indexed<File, File> as DerefMut>::deref_mut(move _12) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _10 = Reader::<File>::byte_headers(_11) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _9 = Result::<&ByteRecord, csv::Error>::unwrap(move _10) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _8 = <ByteRecord as Clone>::clone(_9) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _15 = &(_1.0: cmd::split::Args);
        _16 = &_8;
        _18 = (_1.1: usize);
        _19 = ((_1.0: cmd::split::Args).2: usize);
        _20 = CheckedMul(_18, _19);
        assert(!move (_20.1: bool), "attempt to compute `{} * {}`, which would overflow", move _18, move _19) -> [success: bb9, unwind: bb39];
    }

    bb9: {
        _17 = move (_20.0: usize);
        _14 = split::Args::new_writer(move _15, _16, move _17) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _13 = Result::<Writer<Box<dyn std::io::Write>>, CliError>::unwrap(move _14) -> [return: bb11, unwind: bb39];
    }

    bb11: {
        _23 = &mut _4;
        _26 = (_1.1: usize);
        _27 = ((_1.0: cmd::split::Args).2: usize);
        _28 = CheckedMul(_26, _27);
        assert(!move (_28.1: bool), "attempt to compute `{} * {}`, which would overflow", move _26, move _27) -> [success: bb12, unwind: bb38];
    }

    bb12: {
        _25 = move (_28.0: usize);
        _24 = move _25 as u64 (IntToInt);
        _22 = Indexed::<File, File>::seek(move _23, move _24) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _21 = Result::<(), CliError>::unwrap(move _22) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _33 = &mut _4;
        _32 = <Indexed<File, File> as DerefMut>::deref_mut(move _33) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _31 = Reader::<File>::byte_records(_32) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _34 = ((_1.0: cmd::split::Args).2: usize);
        _30 = <ByteRecordsIter<'_, File> as Iterator>::take(move _31, move _34) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        _29 = <std::iter::Take<ByteRecordsIter<'_, File>> as IntoIterator>::into_iter(move _30) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _35 = move _29;
        goto -> bb19;
    }

    bb19: {
        _37 = &mut _35;
        _36 = <std::iter::Take<ByteRecordsIter<'_, File>> as Iterator>::next(_37) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb23, 1: bb21, otherwise: bb22];
    }

    bb21: {
        _39 = move ((_36 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _40 = Result::<ByteRecord, csv::Error>::unwrap(move _39) -> [return: bb24, unwind: bb37];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        drop(_35) -> [return: bb27, unwind: bb38];
    }

    bb24: {
        _43 = &mut _13;
        _44 = &_40;
        _42 = Writer::<Box<dyn std::io::Write>>::write_byte_record(move _43, _44) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        _41 = Result::<(), csv::Error>::unwrap(move _42) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        drop(_40) -> [return: bb19, unwind: bb37];
    }

    bb27: {
        _47 = &mut _13;
        _46 = Writer::<Box<dyn std::io::Write>>::flush(move _47) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        _45 = Result::<(), std::io::Error>::unwrap(move _46) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        _49 = &(_1.2: chan::WaitGroup);
        _48 = WaitGroup::done(move _49) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        drop(_13) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        drop(_8) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        drop(_4) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        drop(_2) -> [return: bb34, unwind: bb42];
    }

    bb34: {
        drop(_1) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_40) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_35) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_13) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_8) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_4) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_1) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::new_writer(_1: &split::Args, _2: &ByteRecord, _3: usize) -> Result<Writer<Box<dyn std::io::Write>>, CliError> {
    debug self => _1;
    debug headers => _2;
    debug start => _3;
    let mut _0: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, CliError>;
    let _4: &std::path::Path;
    let _5: &std::string::String;
    let mut _7: std::string::String;
    let mut _8: &util::FilenameTemplate;
    let _9: &str;
    let _10: &std::string::String;
    let _11: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &usize;
    let mut _21: std::string::String;
    let mut _22: &std::path::Display<'_>;
    let _23: std::path::Display<'_>;
    let _24: &std::path::Path;
    let mut _25: &std::path::PathBuf;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _28: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _29: &config::Config;
    let _30: config::Config;
    let _31: &std::option::Option<std::string::String>;
    let mut _32: isize;
    let mut _35: bool;
    let mut _36: config::Config;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _38: std::result::Result<(), csv::Error>;
    let mut _39: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _40: isize;
    let mut _42: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    scope 1 {
        debug dir => _4;
        let _6: std::path::PathBuf;
        let _12: std::string::String;
        let mut _43: &[&str; 1];
        scope 2 {
            debug path => _6;
            let _20: std::option::Option<std::string::String>;
            scope 4 {
                debug spath => _20;
                let mut _26: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                let _33: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _34: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
                scope 5 {
                    debug wtr => _26;
                    let _41: std::result::Result<std::convert::Infallible, csv::Error>;
                    scope 10 {
                        debug residual => _41;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => const ();
                        scope 13 {
                        }
                    }
                }
                scope 6 {
                    debug residual => _33;
                    scope 7 {
                    }
                }
                scope 8 {
                    debug val => _34;
                    scope 9 {
                    }
                }
            }
        }
        scope 3 {
            debug res => _12;
        }
    }

    bb0: {
        _5 = &((*_1).1: std::string::String);
        _4 = Path::new::<std::string::String>(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).4: util::FilenameTemplate);
        _43 = const _;
        _14 = _43 as &[&str] (PointerCoercion(Unsize));
        _19 = &_3;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_19) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = format(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = move _12;
        _10 = &_11;
        _9 = <std::string::String as Deref>::deref(_10) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _7 = FilenameTemplate::filename(move _8, _9) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _6 = Path::join::<std::string::String>(_4, move _7) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _25 = &_6;
        _24 = <PathBuf as Deref>::deref(move _25) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _23 = Path::display(_24) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        _22 = &_23;
        _21 = <std::path::Display<'_> as ToString>::to_string(move _22) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _20 = std::option::Option::<std::string::String>::Some(move _21);
        _31 = &_20;
        _30 = Config::new(_31) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _29 = &_30;
        _28 = Config::writer(move _29) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _27 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _28) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        _34 = move ((_27 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _26 = move _34;
        drop(_30) -> [return: bb19, unwind: bb33];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _33 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Writer<Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _33) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        drop(_30) -> [return: bb30, unwind: bb35];
    }

    bb19: {
        _36 = split::Args::rconfig(_1) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _35 = (_36.4: bool);
        switchInt(move _35) -> [0: bb21, otherwise: bb27];
    }

    bb21: {
        drop(_36) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _39 = &mut _26;
        _38 = Writer::<Box<dyn std::io::Write>>::write_record::<&ByteRecord, &[u8]>(move _39, _2) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        _37 = <Result<(), csv::Error> as Try>::branch(move _38) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb28, 1: bb25, otherwise: bb16];
    }

    bb25: {
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Writer<Box<dyn std::io::Write>>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _41) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        drop(_26) -> [return: bb30, unwind: bb35];
    }

    bb27: {
        drop(_36) -> [return: bb28, unwind: bb33];
    }

    bb28: {
        _42 = move _26;
        _0 = Result::<Writer<Box<dyn std::io::Write>>, CliError>::Ok(move _42);
        drop(_20) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        drop(_6) -> [return: bb32, unwind continue];
    }

    bb30: {
        drop(_20) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        drop(_6) -> [return: bb32, unwind continue];
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_26) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_30) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_6) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }
}

promoted[0] in split::<impl at src/cmd/split.rs:73:1: 73:10>::new_writer: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::rconfig(_1: &split::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let _4: &std::option::Option<std::string::String>;
    let mut _5: std::option::Option<config::Delimiter>;
    let mut _6: bool;

    bb0: {
        _4 = &((*_1).0: std::option::Option<std::string::String>);
        _3 = Config::new(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_1).6: std::option::Option<config::Delimiter>);
        _2 = Config::delimiter(move _3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = ((*_1).5: bool);
        _0 = Config::no_headers(move _2, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn split::<impl at src/cmd/split.rs:73:1: 73:10>::njobs(_1: &split::Args) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).3: usize);
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = num_cpus() -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = ((*_1).3: usize);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

static cmd::stats::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nComputes basic statistics on CSV data.\n\nBasic statistics includes mean, median, mode, standard deviation, sum, max and\nmin values. Note that some statistics are expensive to compute, so they must\nbe enabled explicitly. By default, the following statistics are reported for\n*every* column in the CSV data: mean, max, min and standard deviation. The\ndefault set of statistics corresponds to statistics that can be computed\nefficiently on a stream of data (i.e., constant memory).\n\nComputing statistics on a large file can be made much faster if you create\nan index for it first with 'xsv index'.\n\nUsage:\n    xsv stats [options] [<input>]\n\nstats options:\n    -s, --select <arg>     Select a subset of columns to compute stats for.\n                           See 'xsv select --help' for the format details.\n                           This is provided here because piping 'xsv select'\n                           into 'xsv stats' will disable the use of indexing.\n    --everything           Show all statistics available.\n    --mode                 Show the mode.\n                           This requires storing all CSV data in memory.\n    --cardinality          Show the cardinality.\n                           This requires storing all CSV data in memory.\n    --median               Show the median.\n                           This requires storing all CSV data in memory.\n    --nulls                Include NULLs in the population size for computing\n                           mean and standard deviation.\n    -j, --jobs <arg>       The number of jobs to run in parallel.\n                           This works better when the given CSV data has\n                           an index already created. Note that a file handle\n                           is opened for each job.\n                           When set to '0', the number of jobs is set to the\n                           number of CPUs detected.\n                           [default: 0]\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -n, --no-headers       When set, the first row will NOT be interpreted\n                           as column names. i.e., They will be included\n                           in statistics.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:70:10: 70:15>::clone(_1: &cmd::stats::Args) -> cmd::stats::Args {
    debug self => _1;
    let mut _0: cmd::stats::Args;
    let mut _2: std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: select::SelectColumns;
    let _5: &select::SelectColumns;
    let mut _6: bool;
    let _7: &bool;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: bool;
    let _11: &bool;
    let mut _12: bool;
    let _13: &bool;
    let mut _14: bool;
    let _15: &bool;
    let mut _16: usize;
    let _17: &usize;
    let mut _18: std::option::Option<std::string::String>;
    let _19: &std::option::Option<std::string::String>;
    let mut _20: bool;
    let _21: &bool;
    let mut _22: std::option::Option<config::Delimiter>;
    let _23: &std::option::Option<config::Delimiter>;

    bb0: {
        _3 = &((*_1).0: std::option::Option<std::string::String>);
        _2 = <std::option::Option<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: select::SelectColumns);
        _4 = <SelectColumns as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: bool);
        _6 = (*_7);
        _9 = &((*_1).3: bool);
        _8 = (*_9);
        _11 = &((*_1).4: bool);
        _10 = (*_11);
        _13 = &((*_1).5: bool);
        _12 = (*_13);
        _15 = &((*_1).6: bool);
        _14 = (*_15);
        _17 = &((*_1).7: usize);
        _16 = (*_17);
        _19 = &((*_1).8: std::option::Option<std::string::String>);
        _18 = <std::option::Option<std::string::String> as Clone>::clone(_19) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _21 = &((*_1).9: bool);
        _20 = (*_21);
        _23 = &((*_1).10: std::option::Option<config::Delimiter>);
        _22 = <std::option::Option<Delimiter> as Clone>::clone(_23) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = cmd::stats::Args { arg_input: move _2, flag_select: move _4, flag_everything: move _6, flag_mode: move _8, flag_cardinality: move _10, flag_median: move _12, flag_nulls: move _14, flag_jobs: move _16, flag_output: move _18, flag_no_headers: move _20, flag_delimiter: move _22 };
        return;
    }

    bb5 (cleanup): {
        drop(_18) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

const cmd::stats::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize(_1: __D) -> Result<cmd::stats::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::stats::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::stats::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::expecting(_1: &cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_u64(_1: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E> {
    debug self => const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _4: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _5: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _6: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _7: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _8: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _9: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _10: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _11: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _12: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _13: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _14: __E;
    let mut _15: serde::de::Unexpected<'_>;
    let mut _16: &dyn serde::de::Expected;
    let mut _17: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, otherwise: bb1];
    }

    bb1: {
        _15 = Unexpected::<'_>::Unsigned(_2);
        _17 = const _;
        _16 = _17 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _14 = <__E as serde::de::Error>::invalid_value(move _15, move _16) -> [return: bb13, unwind continue];
    }

    bb2: {
        _3 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb14;
    }

    bb3: {
        _4 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb14;
    }

    bb4: {
        _5 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb14;
    }

    bb5: {
        _6 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb14;
    }

    bb6: {
        _7 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb14;
    }

    bb7: {
        _8 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb14;
    }

    bb8: {
        _9 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb14;
    }

    bb9: {
        _10 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb14;
    }

    bb10: {
        _11 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb14;
    }

    bb11: {
        _12 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field9;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb14;
    }

    bb12: {
        _13 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field10;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb14;
    }

    bb13: {
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Err(move _14);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

promoted[0] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 11";
        _0 = &_1;
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_str(_1: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E> {
    debug self => const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _15: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _16: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _17: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _18: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _19: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _20: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _21: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _22: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _23: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _24: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _25: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;

    bb0: {
        _13 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb33, unwind continue];
    }

    bb1: {
        _14 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb34;
    }

    bb2: {
        _12 = <str as PartialEq>::eq(_2, const "flag_select") -> [return: bb32, unwind continue];
    }

    bb3: {
        _15 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb34;
    }

    bb4: {
        _11 = <str as PartialEq>::eq(_2, const "flag_everything") -> [return: bb31, unwind continue];
    }

    bb5: {
        _16 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb34;
    }

    bb6: {
        _10 = <str as PartialEq>::eq(_2, const "flag_mode") -> [return: bb30, unwind continue];
    }

    bb7: {
        _17 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb34;
    }

    bb8: {
        _9 = <str as PartialEq>::eq(_2, const "flag_cardinality") -> [return: bb29, unwind continue];
    }

    bb9: {
        _18 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb34;
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "flag_median") -> [return: bb28, unwind continue];
    }

    bb11: {
        _19 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb34;
    }

    bb12: {
        _7 = <str as PartialEq>::eq(_2, const "flag_nulls") -> [return: bb27, unwind continue];
    }

    bb13: {
        _20 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb34;
    }

    bb14: {
        _6 = <str as PartialEq>::eq(_2, const "flag_jobs") -> [return: bb26, unwind continue];
    }

    bb15: {
        _21 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb34;
    }

    bb16: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb25, unwind continue];
    }

    bb17: {
        _22 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb34;
    }

    bb18: {
        _4 = <str as PartialEq>::eq(_2, const "flag_no_headers") -> [return: bb24, unwind continue];
    }

    bb19: {
        _23 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field9;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb34;
    }

    bb20: {
        _3 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb23, unwind continue];
    }

    bb21: {
        _24 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field10;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb34;
    }

    bb22: {
        _25 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb34;
    }

    bb23: {
        switchInt(move _3) -> [0: bb22, otherwise: bb21];
    }

    bb24: {
        switchInt(move _4) -> [0: bb20, otherwise: bb19];
    }

    bb25: {
        switchInt(move _5) -> [0: bb18, otherwise: bb17];
    }

    bb26: {
        switchInt(move _6) -> [0: bb16, otherwise: bb15];
    }

    bb27: {
        switchInt(move _7) -> [0: bb14, otherwise: bb13];
    }

    bb28: {
        switchInt(move _8) -> [0: bb12, otherwise: bb11];
    }

    bb29: {
        switchInt(move _9) -> [0: bb10, otherwise: bb9];
    }

    bb30: {
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb31: {
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb32: {
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb33: {
        switchInt(move _13) -> [0: bb2, otherwise: bb1];
    }

    bb34: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_bytes(_1: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E> {
    debug self => const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _22: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _23: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _24: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _25: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _26: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _27: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _28: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _29: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _30: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _31: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
    let mut _32: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb22, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, 102: bb11, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb112, otherwise: bb10];
    }

    bb10: {
        _32 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__ignore;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb123;
    }

    bb11: {
        switchInt((*_2)[1 of 9]) -> [108: bb12, otherwise: bb10];
    }

    bb12: {
        switchInt((*_2)[2 of 9]) -> [97: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[3 of 9]) -> [103: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[4 of 9]) -> [95: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[5 of 9]) -> [109: bb16, 106: bb19, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[6 of 9]) -> [111: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[7 of 9]) -> [100: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[8 of 9]) -> [101: bb115, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[6 of 9]) -> [111: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[7 of 9]) -> [98: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[8 of 9]) -> [115: bb119, otherwise: bb10];
    }

    bb22: {
        _15 = Len((*_2));
        _16 = const 11_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb44, otherwise: bb23];
    }

    bb23: {
        switchInt((*_2)[0 of 11]) -> [102: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[1 of 11]) -> [108: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[2 of 11]) -> [97: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[3 of 11]) -> [103: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[4 of 11]) -> [95: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[5 of 11]) -> [115: bb29, 109: bb34, 111: bb39, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[6 of 11]) -> [101: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[7 of 11]) -> [108: bb31, otherwise: bb10];
    }

    bb31: {
        switchInt((*_2)[8 of 11]) -> [101: bb32, otherwise: bb10];
    }

    bb32: {
        switchInt((*_2)[9 of 11]) -> [99: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[10 of 11]) -> [116: bb113, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[6 of 11]) -> [101: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[7 of 11]) -> [100: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[8 of 11]) -> [105: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[9 of 11]) -> [97: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[10 of 11]) -> [110: bb117, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[6 of 11]) -> [117: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[7 of 11]) -> [116: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[8 of 11]) -> [112: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[9 of 11]) -> [117: bb43, otherwise: bb10];
    }

    bb43: {
        switchInt((*_2)[10 of 11]) -> [116: bb120, otherwise: bb10];
    }

    bb44: {
        _12 = Len((*_2));
        _13 = const 15_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb69, otherwise: bb45];
    }

    bb45: {
        switchInt((*_2)[0 of 15]) -> [102: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[1 of 15]) -> [108: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[2 of 15]) -> [97: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[3 of 15]) -> [103: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[4 of 15]) -> [95: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[5 of 15]) -> [101: bb51, 110: bb60, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[6 of 15]) -> [118: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[7 of 15]) -> [101: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[8 of 15]) -> [114: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[9 of 15]) -> [121: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[10 of 15]) -> [116: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[11 of 15]) -> [104: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[12 of 15]) -> [105: bb58, otherwise: bb10];
    }

    bb58: {
        switchInt((*_2)[13 of 15]) -> [110: bb59, otherwise: bb10];
    }

    bb59: {
        switchInt((*_2)[14 of 15]) -> [103: bb114, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[6 of 15]) -> [111: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[7 of 15]) -> [95: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[8 of 15]) -> [104: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[9 of 15]) -> [101: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[10 of 15]) -> [97: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[11 of 15]) -> [100: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[12 of 15]) -> [101: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[13 of 15]) -> [114: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[14 of 15]) -> [115: bb121, otherwise: bb10];
    }

    bb69: {
        _9 = Len((*_2));
        _10 = const 16_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb86, otherwise: bb70];
    }

    bb70: {
        switchInt((*_2)[0 of 16]) -> [102: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[1 of 16]) -> [108: bb72, otherwise: bb10];
    }

    bb72: {
        switchInt((*_2)[2 of 16]) -> [97: bb73, otherwise: bb10];
    }

    bb73: {
        switchInt((*_2)[3 of 16]) -> [103: bb74, otherwise: bb10];
    }

    bb74: {
        switchInt((*_2)[4 of 16]) -> [95: bb75, otherwise: bb10];
    }

    bb75: {
        switchInt((*_2)[5 of 16]) -> [99: bb76, otherwise: bb10];
    }

    bb76: {
        switchInt((*_2)[6 of 16]) -> [97: bb77, otherwise: bb10];
    }

    bb77: {
        switchInt((*_2)[7 of 16]) -> [114: bb78, otherwise: bb10];
    }

    bb78: {
        switchInt((*_2)[8 of 16]) -> [100: bb79, otherwise: bb10];
    }

    bb79: {
        switchInt((*_2)[9 of 16]) -> [105: bb80, otherwise: bb10];
    }

    bb80: {
        switchInt((*_2)[10 of 16]) -> [110: bb81, otherwise: bb10];
    }

    bb81: {
        switchInt((*_2)[11 of 16]) -> [97: bb82, otherwise: bb10];
    }

    bb82: {
        switchInt((*_2)[12 of 16]) -> [108: bb83, otherwise: bb10];
    }

    bb83: {
        switchInt((*_2)[13 of 16]) -> [105: bb84, otherwise: bb10];
    }

    bb84: {
        switchInt((*_2)[14 of 16]) -> [116: bb85, otherwise: bb10];
    }

    bb85: {
        switchInt((*_2)[15 of 16]) -> [121: bb116, otherwise: bb10];
    }

    bb86: {
        _6 = Len((*_2));
        _7 = const 10_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb97, otherwise: bb87];
    }

    bb87: {
        switchInt((*_2)[0 of 10]) -> [102: bb88, otherwise: bb10];
    }

    bb88: {
        switchInt((*_2)[1 of 10]) -> [108: bb89, otherwise: bb10];
    }

    bb89: {
        switchInt((*_2)[2 of 10]) -> [97: bb90, otherwise: bb10];
    }

    bb90: {
        switchInt((*_2)[3 of 10]) -> [103: bb91, otherwise: bb10];
    }

    bb91: {
        switchInt((*_2)[4 of 10]) -> [95: bb92, otherwise: bb10];
    }

    bb92: {
        switchInt((*_2)[5 of 10]) -> [110: bb93, otherwise: bb10];
    }

    bb93: {
        switchInt((*_2)[6 of 10]) -> [117: bb94, otherwise: bb10];
    }

    bb94: {
        switchInt((*_2)[7 of 10]) -> [108: bb95, otherwise: bb10];
    }

    bb95: {
        switchInt((*_2)[8 of 10]) -> [108: bb96, otherwise: bb10];
    }

    bb96: {
        switchInt((*_2)[9 of 10]) -> [115: bb118, otherwise: bb10];
    }

    bb97: {
        _3 = Len((*_2));
        _4 = const 14_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb98];
    }

    bb98: {
        switchInt((*_2)[0 of 14]) -> [102: bb99, otherwise: bb10];
    }

    bb99: {
        switchInt((*_2)[1 of 14]) -> [108: bb100, otherwise: bb10];
    }

    bb100: {
        switchInt((*_2)[2 of 14]) -> [97: bb101, otherwise: bb10];
    }

    bb101: {
        switchInt((*_2)[3 of 14]) -> [103: bb102, otherwise: bb10];
    }

    bb102: {
        switchInt((*_2)[4 of 14]) -> [95: bb103, otherwise: bb10];
    }

    bb103: {
        switchInt((*_2)[5 of 14]) -> [100: bb104, otherwise: bb10];
    }

    bb104: {
        switchInt((*_2)[6 of 14]) -> [101: bb105, otherwise: bb10];
    }

    bb105: {
        switchInt((*_2)[7 of 14]) -> [108: bb106, otherwise: bb10];
    }

    bb106: {
        switchInt((*_2)[8 of 14]) -> [105: bb107, otherwise: bb10];
    }

    bb107: {
        switchInt((*_2)[9 of 14]) -> [109: bb108, otherwise: bb10];
    }

    bb108: {
        switchInt((*_2)[10 of 14]) -> [105: bb109, otherwise: bb10];
    }

    bb109: {
        switchInt((*_2)[11 of 14]) -> [116: bb110, otherwise: bb10];
    }

    bb110: {
        switchInt((*_2)[12 of 14]) -> [101: bb111, otherwise: bb10];
    }

    bb111: {
        switchInt((*_2)[13 of 14]) -> [114: bb122, otherwise: bb10];
    }

    bb112: {
        _21 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field0;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb123;
    }

    bb113: {
        _22 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field1;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb123;
    }

    bb114: {
        _23 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field2;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb123;
    }

    bb115: {
        _24 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field3;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb123;
    }

    bb116: {
        _25 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field4;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb123;
    }

    bb117: {
        _26 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field5;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb123;
    }

    bb118: {
        _27 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field6;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb123;
    }

    bb119: {
        _28 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field7;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb123;
    }

    bb120: {
        _29 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field8;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb123;
    }

    bb121: {
        _30 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field9;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb123;
    }

    bb122: {
        _31 = cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field::__field10;
        _0 = Result::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb123;
    }

    bb123: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize(_1: __D) -> Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor>(move _1, const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::expecting(_1: &cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq(_1: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::stats::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::stats::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::stats::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<select::SelectColumns>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _60: &mut __A;
    let mut _61: isize;
    let mut _64: isize;
    let mut _66: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _67: &dyn serde::de::Expected;
    let mut _68: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _69: &mut __A;
    let mut _70: isize;
    let mut _73: isize;
    let mut _75: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _76: &dyn serde::de::Expected;
    let mut _78: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: isize;
    let mut _85: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _86: &dyn serde::de::Expected;
    let mut _87: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: isize;
    let mut _94: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _95: &dyn serde::de::Expected;
    let mut _96: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: isize;
    let mut _103: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _104: &dyn serde::de::Expected;
    let mut _105: cmd::stats::Args;
    let mut _106: std::option::Option<std::string::String>;
    let mut _107: select::SelectColumns;
    let mut _108: std::option::Option<std::string::String>;
    let mut _109: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: select::SelectColumns;
        let _17: std::option::Option<select::SelectColumns>;
        let _18: <__A as serde::de::SeqAccess<'_>>::Error;
        let _20: select::SelectColumns;
        let mut _110: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<bool>;
            let _27: <__A as serde::de::SeqAccess<'_>>::Error;
            let _29: bool;
            let mut _111: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<bool>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: bool;
                let mut _112: &&str;
                scope 13 {
                    debug __field3 => _38;
                    let _44: std::option::Option<bool>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: bool;
                    let mut _113: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<bool>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: bool;
                        let mut _114: &&str;
                        scope 21 {
                            debug __field5 => _56;
                            let _62: std::option::Option<bool>;
                            let _63: <__A as serde::de::SeqAccess<'_>>::Error;
                            let _65: bool;
                            let mut _115: &&str;
                            scope 25 {
                                debug __field6 => _65;
                                let _71: std::option::Option<usize>;
                                let _72: <__A as serde::de::SeqAccess<'_>>::Error;
                                let _74: usize;
                                let mut _116: &&str;
                                scope 29 {
                                    debug __field7 => _74;
                                    let _77: std::option::Option<std::string::String>;
                                    let _81: std::option::Option<std::option::Option<std::string::String>>;
                                    let _82: <__A as serde::de::SeqAccess<'_>>::Error;
                                    let _84: std::option::Option<std::string::String>;
                                    let mut _117: &&str;
                                    scope 33 {
                                        debug __field8 => _77;
                                        let _90: std::option::Option<bool>;
                                        let _91: <__A as serde::de::SeqAccess<'_>>::Error;
                                        let _93: bool;
                                        let mut _118: &&str;
                                        scope 37 {
                                            debug __field9 => _93;
                                            let _99: std::option::Option<std::option::Option<config::Delimiter>>;
                                            let _100: <__A as serde::de::SeqAccess<'_>>::Error;
                                            let _102: std::option::Option<config::Delimiter>;
                                            let mut _119: &&str;
                                            scope 41 {
                                                debug __field10 => _102;
                                            }
                                            scope 42 {
                                                debug __val => _99;
                                            }
                                            scope 43 {
                                                debug __err => _100;
                                            }
                                            scope 44 {
                                                debug __value => _102;
                                            }
                                        }
                                        scope 38 {
                                            debug __val => _90;
                                        }
                                        scope 39 {
                                            debug __err => _91;
                                        }
                                        scope 40 {
                                            debug __value => _93;
                                        }
                                    }
                                    scope 34 {
                                        debug __val => _81;
                                    }
                                    scope 35 {
                                        debug __err => _82;
                                    }
                                    scope 36 {
                                        debug __value => _84;
                                    }
                                }
                                scope 30 {
                                    debug __val => _71;
                                }
                                scope 31 {
                                    debug __err => _72;
                                }
                                scope 32 {
                                    debug __value => _74;
                                }
                            }
                            scope 26 {
                                debug __val => _62;
                            }
                            scope 27 {
                                debug __err => _63;
                            }
                            scope 28 {
                                debug __value => _65;
                            }
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb76];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb71;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _109 = const _;
        _12 = _109 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb76];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<SelectColumns>(_15) -> [return: bb8, unwind: bb75];
    }

    bb7: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb71;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb70;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<select::SelectColumns>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _110 = const _;
        _22 = _110 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb75];
    }

    bb12: {
        _20 = move ((_17 as Some).0: select::SelectColumns);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<bool>(_24) -> [return: bb14, unwind: bb74];
    }

    bb13: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb70;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb69;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<bool>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _111 = const _;
        _31 = _111 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb74];
    }

    bb18: {
        _29 = ((_26 as Some).0: bool);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<bool>(_33) -> [return: bb20, unwind: bb74];
    }

    bb19: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb69;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb69;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<bool>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _112 = const _;
        _40 = _112 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb74];
    }

    bb24: {
        _38 = ((_35 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<bool>(_42) -> [return: bb26, unwind: bb74];
    }

    bb25: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb69;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb69;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<bool>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _113 = const _;
        _49 = _113 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb74];
    }

    bb30: {
        _47 = ((_44 as Some).0: bool);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<bool>(_51) -> [return: bb32, unwind: bb74];
    }

    bb31: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb69;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb69;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<bool>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _114 = const _;
        _58 = _114 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb74];
    }

    bb36: {
        _56 = ((_53 as Some).0: bool);
        _60 = &mut _2;
        _59 = <__A as SeqAccess<'_>>::next_element::<bool>(_60) -> [return: bb38, unwind: bb74];
    }

    bb37: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb69;
    }

    bb38: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb40, 1: bb39, otherwise: bb3];
    }

    bb39: {
        _63 = move ((_59 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _63);
        goto -> bb69;
    }

    bb40: {
        _62 = ((_59 as Ok).0: std::option::Option<bool>);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb42, otherwise: bb3];
    }

    bb41: {
        _115 = const _;
        _67 = _115 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _66 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb43, unwind: bb74];
    }

    bb42: {
        _65 = ((_62 as Some).0: bool);
        _69 = &mut _2;
        _68 = <__A as SeqAccess<'_>>::next_element::<usize>(_69) -> [return: bb44, unwind: bb74];
    }

    bb43: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb69;
    }

    bb44: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb46, 1: bb45, otherwise: bb3];
    }

    bb45: {
        _72 = move ((_68 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _72);
        goto -> bb69;
    }

    bb46: {
        _71 = ((_68 as Ok).0: std::option::Option<usize>);
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb47, 1: bb48, otherwise: bb3];
    }

    bb47: {
        _116 = const _;
        _76 = _116 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _75 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 7_usize, move _76) -> [return: bb49, unwind: bb74];
    }

    bb48: {
        _74 = ((_71 as Some).0: usize);
        _79 = &mut _2;
        _78 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_79) -> [return: bb50, unwind: bb74];
    }

    bb49: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _75);
        goto -> bb69;
    }

    bb50: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb52, 1: bb51, otherwise: bb3];
    }

    bb51: {
        _82 = move ((_78 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _82);
        goto -> bb69;
    }

    bb52: {
        _81 = move ((_78 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        _117 = const _;
        _86 = _117 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _85 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 8_usize, move _86) -> [return: bb55, unwind: bb74];
    }

    bb54: {
        _84 = move ((_81 as Some).0: std::option::Option<std::string::String>);
        _77 = move _84;
        _88 = &mut _2;
        _87 = <__A as SeqAccess<'_>>::next_element::<bool>(_88) -> [return: bb56, unwind: bb73];
    }

    bb55: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _85);
        goto -> bb69;
    }

    bb56: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb58, 1: bb57, otherwise: bb3];
    }

    bb57: {
        _91 = move ((_87 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _91);
        goto -> bb68;
    }

    bb58: {
        _90 = ((_87 as Ok).0: std::option::Option<bool>);
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb59, 1: bb60, otherwise: bb3];
    }

    bb59: {
        _118 = const _;
        _95 = _118 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _94 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 9_usize, move _95) -> [return: bb61, unwind: bb73];
    }

    bb60: {
        _93 = ((_90 as Some).0: bool);
        _97 = &mut _2;
        _96 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_97) -> [return: bb62, unwind: bb73];
    }

    bb61: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _94);
        goto -> bb68;
    }

    bb62: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb64, 1: bb63, otherwise: bb3];
    }

    bb63: {
        _100 = move ((_96 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _100);
        goto -> bb68;
    }

    bb64: {
        _99 = ((_96 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _101 = discriminant(_99);
        switchInt(move _101) -> [0: bb65, 1: bb66, otherwise: bb3];
    }

    bb65: {
        _119 = const _;
        _104 = _119 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _103 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 10_usize, move _104) -> [return: bb67, unwind: bb73];
    }

    bb66: {
        _102 = ((_99 as Some).0: std::option::Option<config::Delimiter>);
        _106 = move _3;
        _107 = move _13;
        _108 = move _77;
        _105 = cmd::stats::Args { arg_input: move _106, flag_select: move _107, flag_everything: _29, flag_mode: _38, flag_cardinality: _47, flag_median: _56, flag_nulls: _65, flag_jobs: _74, flag_output: move _108, flag_no_headers: _93, flag_delimiter: _102 };
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _105);
        drop(_2) -> [return: bb72, unwind continue];
    }

    bb67: {
        _0 = Result::<cmd::stats::Args, <__A as SeqAccess<'_>>::Error>::Err(move _103);
        goto -> bb68;
    }

    bb68: {
        drop(_77) -> [return: bb69, unwind: bb74];
    }

    bb69: {
        drop(_13) -> [return: bb70, unwind: bb75];
    }

    bb70: {
        drop(_3) -> [return: bb71, unwind: bb76];
    }

    bb71: {
        drop(_2) -> [return: bb72, unwind continue];
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_77) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_13) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_3) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_2) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }
}

promoted[0] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[9] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

promoted[10] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 11 elements";
        _0 = &_1;
        return;
    }
}

fn cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::<impl at src/cmd/stats.rs:70:17: 70:28>::visit_map(_1: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<cmd::stats::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<cmd::stats::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::stats::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _14: std::result::Result<std::option::Option<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: isize;
    let mut _22: bool;
    let _23: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<std::option::Option<std::string::String>>;
    let mut _26: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: bool;
    let _32: &std::option::Option<select::SelectColumns>;
    let mut _33: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _34: std::option::Option<select::SelectColumns>;
    let mut _35: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _36: &mut __A;
    let mut _37: isize;
    let mut _40: bool;
    let _41: &std::option::Option<bool>;
    let mut _42: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _43: std::option::Option<bool>;
    let mut _44: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _45: &mut __A;
    let mut _46: isize;
    let mut _49: bool;
    let _50: &std::option::Option<bool>;
    let mut _51: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _52: std::option::Option<bool>;
    let mut _53: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _54: &mut __A;
    let mut _55: isize;
    let mut _58: bool;
    let _59: &std::option::Option<bool>;
    let mut _60: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _61: std::option::Option<bool>;
    let mut _62: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _63: &mut __A;
    let mut _64: isize;
    let mut _67: bool;
    let _68: &std::option::Option<bool>;
    let mut _69: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _70: std::option::Option<bool>;
    let mut _71: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _72: &mut __A;
    let mut _73: isize;
    let mut _76: bool;
    let _77: &std::option::Option<bool>;
    let mut _78: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _79: std::option::Option<bool>;
    let mut _80: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _81: &mut __A;
    let mut _82: isize;
    let mut _85: bool;
    let _86: &std::option::Option<usize>;
    let mut _87: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _88: std::option::Option<usize>;
    let mut _89: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _90: &mut __A;
    let mut _91: isize;
    let mut _94: bool;
    let _95: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _96: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _97: std::option::Option<std::option::Option<std::string::String>>;
    let mut _98: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _99: &mut __A;
    let mut _100: isize;
    let mut _103: bool;
    let _104: &std::option::Option<bool>;
    let mut _105: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _106: std::option::Option<bool>;
    let mut _107: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _108: &mut __A;
    let mut _109: isize;
    let mut _112: bool;
    let _113: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _114: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _115: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _116: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _117: &mut __A;
    let mut _118: isize;
    let mut _121: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _122: &mut __A;
    let mut _123: isize;
    let mut _126: isize;
    let mut _128: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _129: isize;
    let mut _133: isize;
    let mut _135: std::result::Result<select::SelectColumns, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _136: isize;
    let mut _140: isize;
    let mut _142: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _143: isize;
    let mut _147: isize;
    let mut _149: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _150: isize;
    let mut _154: isize;
    let mut _156: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _157: isize;
    let mut _161: isize;
    let mut _163: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _164: isize;
    let mut _168: isize;
    let mut _170: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _171: isize;
    let mut _175: isize;
    let mut _177: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _178: isize;
    let mut _182: isize;
    let mut _184: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _185: isize;
    let mut _189: isize;
    let mut _191: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _192: isize;
    let mut _196: isize;
    let mut _198: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _199: isize;
    let mut _202: cmd::stats::Args;
    let mut _203: std::option::Option<std::string::String>;
    let mut _204: select::SelectColumns;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: usize;
    let mut _211: std::option::Option<std::string::String>;
    let mut _212: bool;
    let mut _213: std::option::Option<config::Delimiter>;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: bool;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<select::SelectColumns>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<bool>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<bool>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<bool>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<bool>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<usize>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<std::option::Option<std::string::String>>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let mut _12: std::option::Option<bool>;
                                        scope 10 {
                                            debug __field9 => _12;
                                            let mut _13: std::option::Option<std::option::Option<config::Delimiter>>;
                                            scope 11 {
                                                debug __field10 => _13;
                                                let _125: std::option::Option<std::string::String>;
                                                let _127: std::option::Option<std::string::String>;
                                                let _130: std::option::Option<std::string::String>;
                                                let _131: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 12 {
                                                    debug __key => _20;
                                                    let _17: std::option::Option<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field>;
                                                    let _18: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _20: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field;
                                                    let _29: std::option::Option<std::string::String>;
                                                    let _30: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _38: select::SelectColumns;
                                                    let _39: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _47: bool;
                                                    let _48: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _56: bool;
                                                    let _57: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _65: bool;
                                                    let _66: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _74: bool;
                                                    let _75: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _83: bool;
                                                    let _84: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _92: usize;
                                                    let _93: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _101: std::option::Option<std::string::String>;
                                                    let _102: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _110: bool;
                                                    let _111: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _119: std::option::Option<config::Delimiter>;
                                                    let _120: <__A as serde::de::MapAccess<'_>>::Error;
                                                    let _124: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 13 {
                                                        debug __val => _17;
                                                    }
                                                    scope 14 {
                                                        debug __err => _18;
                                                    }
                                                    scope 15 {
                                                        debug __val => _29;
                                                    }
                                                    scope 16 {
                                                        debug __err => _30;
                                                    }
                                                    scope 17 {
                                                        debug __val => _38;
                                                    }
                                                    scope 18 {
                                                        debug __err => _39;
                                                    }
                                                    scope 19 {
                                                        debug __val => _47;
                                                    }
                                                    scope 20 {
                                                        debug __err => _48;
                                                    }
                                                    scope 21 {
                                                        debug __val => _56;
                                                    }
                                                    scope 22 {
                                                        debug __err => _57;
                                                    }
                                                    scope 23 {
                                                        debug __val => _65;
                                                    }
                                                    scope 24 {
                                                        debug __err => _66;
                                                    }
                                                    scope 25 {
                                                        debug __val => _74;
                                                    }
                                                    scope 26 {
                                                        debug __err => _75;
                                                    }
                                                    scope 27 {
                                                        debug __val => _83;
                                                    }
                                                    scope 28 {
                                                        debug __err => _84;
                                                    }
                                                    scope 29 {
                                                        debug __val => _92;
                                                    }
                                                    scope 30 {
                                                        debug __err => _93;
                                                    }
                                                    scope 31 {
                                                        debug __val => _101;
                                                    }
                                                    scope 32 {
                                                        debug __err => _102;
                                                    }
                                                    scope 33 {
                                                        debug __val => _110;
                                                    }
                                                    scope 34 {
                                                        debug __err => _111;
                                                    }
                                                    scope 35 {
                                                        debug __val => _119;
                                                    }
                                                    scope 36 {
                                                        debug __err => _120;
                                                    }
                                                    scope 37 {
                                                    }
                                                    scope 38 {
                                                        debug __val => const IgnoredAny;
                                                    }
                                                    scope 39 {
                                                        debug __err => _124;
                                                    }
                                                }
                                                scope 40 {
                                                    debug __field0 => _125;
                                                    let _132: select::SelectColumns;
                                                    let _134: select::SelectColumns;
                                                    let _137: select::SelectColumns;
                                                    let _138: <__A as serde::de::MapAccess<'_>>::Error;
                                                    scope 44 {
                                                        debug __field1 => _132;
                                                        let _139: bool;
                                                        let _141: bool;
                                                        let _144: bool;
                                                        let _145: <__A as serde::de::MapAccess<'_>>::Error;
                                                        scope 48 {
                                                            debug __field2 => _139;
                                                            let _146: bool;
                                                            let _148: bool;
                                                            let _151: bool;
                                                            let _152: <__A as serde::de::MapAccess<'_>>::Error;
                                                            scope 52 {
                                                                debug __field3 => _146;
                                                                let _153: bool;
                                                                let _155: bool;
                                                                let _158: bool;
                                                                let _159: <__A as serde::de::MapAccess<'_>>::Error;
                                                                scope 56 {
                                                                    debug __field4 => _153;
                                                                    let _160: bool;
                                                                    let _162: bool;
                                                                    let _165: bool;
                                                                    let _166: <__A as serde::de::MapAccess<'_>>::Error;
                                                                    scope 60 {
                                                                        debug __field5 => _160;
                                                                        let _167: bool;
                                                                        let _169: bool;
                                                                        let _172: bool;
                                                                        let _173: <__A as serde::de::MapAccess<'_>>::Error;
                                                                        scope 64 {
                                                                            debug __field6 => _167;
                                                                            let _174: usize;
                                                                            let _176: usize;
                                                                            let _179: usize;
                                                                            let _180: <__A as serde::de::MapAccess<'_>>::Error;
                                                                            scope 68 {
                                                                                debug __field7 => _174;
                                                                                let _181: std::option::Option<std::string::String>;
                                                                                let _183: std::option::Option<std::string::String>;
                                                                                let _186: std::option::Option<std::string::String>;
                                                                                let _187: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                scope 72 {
                                                                                    debug __field8 => _181;
                                                                                    let _188: bool;
                                                                                    let _190: bool;
                                                                                    let _193: bool;
                                                                                    let _194: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                    scope 76 {
                                                                                        debug __field9 => _188;
                                                                                        let _195: std::option::Option<config::Delimiter>;
                                                                                        let _197: std::option::Option<config::Delimiter>;
                                                                                        let _200: std::option::Option<config::Delimiter>;
                                                                                        let _201: <__A as serde::de::MapAccess<'_>>::Error;
                                                                                        scope 80 {
                                                                                            debug __field10 => _195;
                                                                                        }
                                                                                        scope 81 {
                                                                                            debug __field10 => _197;
                                                                                        }
                                                                                        scope 82 {
                                                                                            debug __val => _200;
                                                                                        }
                                                                                        scope 83 {
                                                                                            debug __err => _201;
                                                                                        }
                                                                                    }
                                                                                    scope 77 {
                                                                                        debug __field9 => _190;
                                                                                    }
                                                                                    scope 78 {
                                                                                        debug __val => _193;
                                                                                    }
                                                                                    scope 79 {
                                                                                        debug __err => _194;
                                                                                    }
                                                                                }
                                                                                scope 73 {
                                                                                    debug __field8 => _183;
                                                                                }
                                                                                scope 74 {
                                                                                    debug __val => _186;
                                                                                }
                                                                                scope 75 {
                                                                                    debug __err => _187;
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug __field7 => _176;
                                                                            }
                                                                            scope 70 {
                                                                                debug __val => _179;
                                                                            }
                                                                            scope 71 {
                                                                                debug __err => _180;
                                                                            }
                                                                        }
                                                                        scope 65 {
                                                                            debug __field6 => _169;
                                                                        }
                                                                        scope 66 {
                                                                            debug __val => _172;
                                                                        }
                                                                        scope 67 {
                                                                            debug __err => _173;
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug __field5 => _162;
                                                                    }
                                                                    scope 62 {
                                                                        debug __val => _165;
                                                                    }
                                                                    scope 63 {
                                                                        debug __err => _166;
                                                                    }
                                                                }
                                                                scope 57 {
                                                                    debug __field4 => _155;
                                                                }
                                                                scope 58 {
                                                                    debug __val => _158;
                                                                }
                                                                scope 59 {
                                                                    debug __err => _159;
                                                                }
                                                            }
                                                            scope 53 {
                                                                debug __field3 => _148;
                                                            }
                                                            scope 54 {
                                                                debug __val => _151;
                                                            }
                                                            scope 55 {
                                                                debug __err => _152;
                                                            }
                                                        }
                                                        scope 49 {
                                                            debug __field2 => _141;
                                                        }
                                                        scope 50 {
                                                            debug __val => _144;
                                                        }
                                                        scope 51 {
                                                            debug __err => _145;
                                                        }
                                                    }
                                                    scope 45 {
                                                        debug __field1 => _134;
                                                    }
                                                    scope 46 {
                                                        debug __val => _137;
                                                    }
                                                    scope 47 {
                                                        debug __err => _138;
                                                    }
                                                }
                                                scope 41 {
                                                    debug __field0 => _127;
                                                }
                                                scope 42 {
                                                    debug __val => _130;
                                                }
                                                scope 43 {
                                                    debug __err => _131;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _216 = const false;
        _215 = const false;
        _214 = const false;
        _216 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _215 = const true;
        _4 = std::option::Option::<SelectColumns>::None;
        _5 = std::option::Option::<bool>::None;
        _6 = std::option::Option::<bool>::None;
        _7 = std::option::Option::<bool>::None;
        _8 = std::option::Option::<bool>::None;
        _9 = std::option::Option::<bool>::None;
        _10 = std::option::Option::<usize>::None;
        _214 = const true;
        _11 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _12 = std::option::Option::<bool>::None;
        _13 = std::option::Option::<std::option::Option<Delimiter>>::None;
        goto -> bb1;
    }

    bb1: {
        _15 = &mut _2;
        _14 = <__A as MapAccess<'_>>::next_key::<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field>(_15) -> [return: bb2, unwind: bb194];
    }

    bb2: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _18 = move ((_14 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _18);
        goto -> bb174;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _17 = move ((_14 as Ok).0: std::option::Option<cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _126 = discriminant(_3);
        switchInt(move _126) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb7: {
        _20 = move ((_17 as Some).0: cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::stats::Args>::deserialize::__Field);
        _21 = discriminant(_20);
        switchInt(move _21) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, 4: bb45, 5: bb53, 6: bb61, 7: bb69, 8: bb77, 9: bb87, 10: bb95, otherwise: bb8];
    }

    bb8: {
        _122 = &mut _2;
        _121 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_122) -> [return: bb103, unwind: bb194];
    }

    bb9: {
        _23 = &_3;
        _22 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_23) -> [return: bb10, unwind: bb194];
    }

    bb10: {
        switchInt(move _22) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _24 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb194];
    }

    bb12: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb174;
    }

    bb13: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_27) -> [return: bb14, unwind: bb194];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _30 = move ((_26 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb174;
    }

    bb16: {
        _29 = move ((_26 as Ok).0: std::option::Option<std::string::String>);
        _25 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _29);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _216 = const true;
        _3 = move _25;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _216 = const true;
        _3 = move _25;
        goto -> bb194;
    }

    bb19: {
        _32 = &_4;
        _31 = std::option::Option::<SelectColumns>::is_some(_32) -> [return: bb20, unwind: bb194];
    }

    bb20: {
        switchInt(move _31) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _33 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_select") -> [return: bb22, unwind: bb194];
    }

    bb22: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _33);
        goto -> bb174;
    }

    bb23: {
        _36 = &mut _2;
        _35 = <__A as MapAccess<'_>>::next_value::<SelectColumns>(_36) -> [return: bb24, unwind: bb194];
    }

    bb24: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _39 = move ((_35 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _39);
        goto -> bb174;
    }

    bb26: {
        _38 = move ((_35 as Ok).0: select::SelectColumns);
        _34 = std::option::Option::<SelectColumns>::Some(move _38);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _215 = const true;
        _4 = move _34;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _215 = const true;
        _4 = move _34;
        goto -> bb194;
    }

    bb29: {
        _41 = &_5;
        _40 = std::option::Option::<bool>::is_some(_41) -> [return: bb30, unwind: bb194];
    }

    bb30: {
        switchInt(move _40) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _42 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_everything") -> [return: bb32, unwind: bb194];
    }

    bb32: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _42);
        goto -> bb174;
    }

    bb33: {
        _45 = &mut _2;
        _44 = <__A as MapAccess<'_>>::next_value::<bool>(_45) -> [return: bb34, unwind: bb194];
    }

    bb34: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _48 = move ((_44 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _48);
        goto -> bb174;
    }

    bb36: {
        _47 = ((_44 as Ok).0: bool);
        _43 = std::option::Option::<bool>::Some(_47);
        _5 = move _43;
        goto -> bb1;
    }

    bb37: {
        _50 = &_6;
        _49 = std::option::Option::<bool>::is_some(_50) -> [return: bb38, unwind: bb194];
    }

    bb38: {
        switchInt(move _49) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _51 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_mode") -> [return: bb40, unwind: bb194];
    }

    bb40: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _51);
        goto -> bb174;
    }

    bb41: {
        _54 = &mut _2;
        _53 = <__A as MapAccess<'_>>::next_value::<bool>(_54) -> [return: bb42, unwind: bb194];
    }

    bb42: {
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _57 = move ((_53 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _57);
        goto -> bb174;
    }

    bb44: {
        _56 = ((_53 as Ok).0: bool);
        _52 = std::option::Option::<bool>::Some(_56);
        _6 = move _52;
        goto -> bb1;
    }

    bb45: {
        _59 = &_7;
        _58 = std::option::Option::<bool>::is_some(_59) -> [return: bb46, unwind: bb194];
    }

    bb46: {
        switchInt(move _58) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _60 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_cardinality") -> [return: bb48, unwind: bb194];
    }

    bb48: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _60);
        goto -> bb174;
    }

    bb49: {
        _63 = &mut _2;
        _62 = <__A as MapAccess<'_>>::next_value::<bool>(_63) -> [return: bb50, unwind: bb194];
    }

    bb50: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _66 = move ((_62 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _66);
        goto -> bb174;
    }

    bb52: {
        _65 = ((_62 as Ok).0: bool);
        _61 = std::option::Option::<bool>::Some(_65);
        _7 = move _61;
        goto -> bb1;
    }

    bb53: {
        _68 = &_8;
        _67 = std::option::Option::<bool>::is_some(_68) -> [return: bb54, unwind: bb194];
    }

    bb54: {
        switchInt(move _67) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _69 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_median") -> [return: bb56, unwind: bb194];
    }

    bb56: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _69);
        goto -> bb174;
    }

    bb57: {
        _72 = &mut _2;
        _71 = <__A as MapAccess<'_>>::next_value::<bool>(_72) -> [return: bb58, unwind: bb194];
    }

    bb58: {
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _75 = move ((_71 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb174;
    }

    bb60: {
        _74 = ((_71 as Ok).0: bool);
        _70 = std::option::Option::<bool>::Some(_74);
        _8 = move _70;
        goto -> bb1;
    }

    bb61: {
        _77 = &_9;
        _76 = std::option::Option::<bool>::is_some(_77) -> [return: bb62, unwind: bb194];
    }

    bb62: {
        switchInt(move _76) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _78 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_nulls") -> [return: bb64, unwind: bb194];
    }

    bb64: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _78);
        goto -> bb174;
    }

    bb65: {
        _81 = &mut _2;
        _80 = <__A as MapAccess<'_>>::next_value::<bool>(_81) -> [return: bb66, unwind: bb194];
    }

    bb66: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _84 = move ((_80 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb174;
    }

    bb68: {
        _83 = ((_80 as Ok).0: bool);
        _79 = std::option::Option::<bool>::Some(_83);
        _9 = move _79;
        goto -> bb1;
    }

    bb69: {
        _86 = &_10;
        _85 = std::option::Option::<usize>::is_some(_86) -> [return: bb70, unwind: bb194];
    }

    bb70: {
        switchInt(move _85) -> [0: bb73, otherwise: bb71];
    }

    bb71: {
        _87 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_jobs") -> [return: bb72, unwind: bb194];
    }

    bb72: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _87);
        goto -> bb174;
    }

    bb73: {
        _90 = &mut _2;
        _89 = <__A as MapAccess<'_>>::next_value::<usize>(_90) -> [return: bb74, unwind: bb194];
    }

    bb74: {
        _91 = discriminant(_89);
        switchInt(move _91) -> [0: bb76, 1: bb75, otherwise: bb4];
    }

    bb75: {
        _93 = move ((_89 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _93);
        goto -> bb174;
    }

    bb76: {
        _92 = ((_89 as Ok).0: usize);
        _88 = std::option::Option::<usize>::Some(_92);
        _10 = move _88;
        goto -> bb1;
    }

    bb77: {
        _95 = &_11;
        _94 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_95) -> [return: bb78, unwind: bb194];
    }

    bb78: {
        switchInt(move _94) -> [0: bb81, otherwise: bb79];
    }

    bb79: {
        _96 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb80, unwind: bb194];
    }

    bb80: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _96);
        goto -> bb174;
    }

    bb81: {
        _99 = &mut _2;
        _98 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_99) -> [return: bb82, unwind: bb194];
    }

    bb82: {
        _100 = discriminant(_98);
        switchInt(move _100) -> [0: bb84, 1: bb83, otherwise: bb4];
    }

    bb83: {
        _102 = move ((_98 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _102);
        goto -> bb174;
    }

    bb84: {
        _101 = move ((_98 as Ok).0: std::option::Option<std::string::String>);
        _97 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _101);
        drop(_11) -> [return: bb85, unwind: bb86];
    }

    bb85: {
        _214 = const true;
        _11 = move _97;
        goto -> bb1;
    }

    bb86 (cleanup): {
        _214 = const true;
        _11 = move _97;
        goto -> bb194;
    }

    bb87: {
        _104 = &_12;
        _103 = std::option::Option::<bool>::is_some(_104) -> [return: bb88, unwind: bb194];
    }

    bb88: {
        switchInt(move _103) -> [0: bb91, otherwise: bb89];
    }

    bb89: {
        _105 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_no_headers") -> [return: bb90, unwind: bb194];
    }

    bb90: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _105);
        goto -> bb174;
    }

    bb91: {
        _108 = &mut _2;
        _107 = <__A as MapAccess<'_>>::next_value::<bool>(_108) -> [return: bb92, unwind: bb194];
    }

    bb92: {
        _109 = discriminant(_107);
        switchInt(move _109) -> [0: bb94, 1: bb93, otherwise: bb4];
    }

    bb93: {
        _111 = move ((_107 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _111);
        goto -> bb174;
    }

    bb94: {
        _110 = ((_107 as Ok).0: bool);
        _106 = std::option::Option::<bool>::Some(_110);
        _12 = move _106;
        goto -> bb1;
    }

    bb95: {
        _113 = &_13;
        _112 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_113) -> [return: bb96, unwind: bb194];
    }

    bb96: {
        switchInt(move _112) -> [0: bb99, otherwise: bb97];
    }

    bb97: {
        _114 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb98, unwind: bb194];
    }

    bb98: {
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _114);
        goto -> bb174;
    }

    bb99: {
        _117 = &mut _2;
        _116 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_117) -> [return: bb100, unwind: bb194];
    }

    bb100: {
        _118 = discriminant(_116);
        switchInt(move _118) -> [0: bb102, 1: bb101, otherwise: bb4];
    }

    bb101: {
        _120 = move ((_116 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _120);
        goto -> bb174;
    }

    bb102: {
        _119 = ((_116 as Ok).0: std::option::Option<config::Delimiter>);
        _115 = std::option::Option::<std::option::Option<Delimiter>>::Some(_119);
        _13 = move _115;
        goto -> bb1;
    }

    bb103: {
        _123 = discriminant(_121);
        switchInt(move _123) -> [0: bb1, 1: bb104, otherwise: bb4];
    }

    bb104: {
        _124 = move ((_121 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _124);
        goto -> bb174;
    }

    bb105: {
        _128 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb107, unwind: bb194];
    }

    bb106: {
        _216 = const false;
        _127 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _125 = move _127;
        goto -> bb110;
    }

    bb107: {
        _129 = discriminant(_128);
        switchInt(move _129) -> [0: bb109, 1: bb108, otherwise: bb4];
    }

    bb108: {
        _131 = move ((_128 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _131);
        goto -> bb174;
    }

    bb109: {
        _130 = move ((_128 as Ok).0: std::option::Option<std::string::String>);
        _125 = move _130;
        goto -> bb110;
    }

    bb110: {
        _133 = discriminant(_4);
        switchInt(move _133) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        _135 = serde::private::de::missing_field::<'_, SelectColumns, <__A as MapAccess<'_>>::Error>(const "flag_select") -> [return: bb113, unwind: bb178];
    }

    bb112: {
        _215 = const false;
        _134 = move ((_4 as Some).0: select::SelectColumns);
        _132 = move _134;
        goto -> bb116;
    }

    bb113: {
        _136 = discriminant(_135);
        switchInt(move _136) -> [0: bb115, 1: bb114, otherwise: bb4];
    }

    bb114: {
        _138 = move ((_135 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _138);
        goto -> bb173;
    }

    bb115: {
        _137 = move ((_135 as Ok).0: select::SelectColumns);
        _132 = move _137;
        goto -> bb116;
    }

    bb116: {
        _140 = discriminant(_5);
        switchInt(move _140) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        _142 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_everything") -> [return: bb119, unwind: bb177];
    }

    bb118: {
        _141 = ((_5 as Some).0: bool);
        _139 = _141;
        goto -> bb122;
    }

    bb119: {
        _143 = discriminant(_142);
        switchInt(move _143) -> [0: bb121, 1: bb120, otherwise: bb4];
    }

    bb120: {
        _145 = move ((_142 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _145);
        goto -> bb172;
    }

    bb121: {
        _144 = ((_142 as Ok).0: bool);
        _139 = _144;
        goto -> bb122;
    }

    bb122: {
        _147 = discriminant(_6);
        switchInt(move _147) -> [0: bb123, 1: bb124, otherwise: bb4];
    }

    bb123: {
        _149 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_mode") -> [return: bb125, unwind: bb177];
    }

    bb124: {
        _148 = ((_6 as Some).0: bool);
        _146 = _148;
        goto -> bb128;
    }

    bb125: {
        _150 = discriminant(_149);
        switchInt(move _150) -> [0: bb127, 1: bb126, otherwise: bb4];
    }

    bb126: {
        _152 = move ((_149 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _152);
        goto -> bb172;
    }

    bb127: {
        _151 = ((_149 as Ok).0: bool);
        _146 = _151;
        goto -> bb128;
    }

    bb128: {
        _154 = discriminant(_7);
        switchInt(move _154) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        _156 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_cardinality") -> [return: bb131, unwind: bb177];
    }

    bb130: {
        _155 = ((_7 as Some).0: bool);
        _153 = _155;
        goto -> bb134;
    }

    bb131: {
        _157 = discriminant(_156);
        switchInt(move _157) -> [0: bb133, 1: bb132, otherwise: bb4];
    }

    bb132: {
        _159 = move ((_156 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _159);
        goto -> bb172;
    }

    bb133: {
        _158 = ((_156 as Ok).0: bool);
        _153 = _158;
        goto -> bb134;
    }

    bb134: {
        _161 = discriminant(_8);
        switchInt(move _161) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        _163 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_median") -> [return: bb137, unwind: bb177];
    }

    bb136: {
        _162 = ((_8 as Some).0: bool);
        _160 = _162;
        goto -> bb140;
    }

    bb137: {
        _164 = discriminant(_163);
        switchInt(move _164) -> [0: bb139, 1: bb138, otherwise: bb4];
    }

    bb138: {
        _166 = move ((_163 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _166);
        goto -> bb172;
    }

    bb139: {
        _165 = ((_163 as Ok).0: bool);
        _160 = _165;
        goto -> bb140;
    }

    bb140: {
        _168 = discriminant(_9);
        switchInt(move _168) -> [0: bb141, 1: bb142, otherwise: bb4];
    }

    bb141: {
        _170 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_nulls") -> [return: bb143, unwind: bb177];
    }

    bb142: {
        _169 = ((_9 as Some).0: bool);
        _167 = _169;
        goto -> bb146;
    }

    bb143: {
        _171 = discriminant(_170);
        switchInt(move _171) -> [0: bb145, 1: bb144, otherwise: bb4];
    }

    bb144: {
        _173 = move ((_170 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _173);
        goto -> bb172;
    }

    bb145: {
        _172 = ((_170 as Ok).0: bool);
        _167 = _172;
        goto -> bb146;
    }

    bb146: {
        _175 = discriminant(_10);
        switchInt(move _175) -> [0: bb147, 1: bb148, otherwise: bb4];
    }

    bb147: {
        _177 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_jobs") -> [return: bb149, unwind: bb177];
    }

    bb148: {
        _176 = ((_10 as Some).0: usize);
        _174 = _176;
        goto -> bb152;
    }

    bb149: {
        _178 = discriminant(_177);
        switchInt(move _178) -> [0: bb151, 1: bb150, otherwise: bb4];
    }

    bb150: {
        _180 = move ((_177 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _180);
        goto -> bb172;
    }

    bb151: {
        _179 = ((_177 as Ok).0: usize);
        _174 = _179;
        goto -> bb152;
    }

    bb152: {
        _182 = discriminant(_11);
        switchInt(move _182) -> [0: bb153, 1: bb154, otherwise: bb4];
    }

    bb153: {
        _184 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb155, unwind: bb177];
    }

    bb154: {
        _214 = const false;
        _183 = move ((_11 as Some).0: std::option::Option<std::string::String>);
        _181 = move _183;
        goto -> bb158;
    }

    bb155: {
        _185 = discriminant(_184);
        switchInt(move _185) -> [0: bb157, 1: bb156, otherwise: bb4];
    }

    bb156: {
        _187 = move ((_184 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _187);
        goto -> bb172;
    }

    bb157: {
        _186 = move ((_184 as Ok).0: std::option::Option<std::string::String>);
        _181 = move _186;
        goto -> bb158;
    }

    bb158: {
        _189 = discriminant(_12);
        switchInt(move _189) -> [0: bb159, 1: bb160, otherwise: bb4];
    }

    bb159: {
        _191 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_no_headers") -> [return: bb161, unwind: bb176];
    }

    bb160: {
        _190 = ((_12 as Some).0: bool);
        _188 = _190;
        goto -> bb164;
    }

    bb161: {
        _192 = discriminant(_191);
        switchInt(move _192) -> [0: bb163, 1: bb162, otherwise: bb4];
    }

    bb162: {
        _194 = move ((_191 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _194);
        goto -> bb171;
    }

    bb163: {
        _193 = ((_191 as Ok).0: bool);
        _188 = _193;
        goto -> bb164;
    }

    bb164: {
        _196 = discriminant(_13);
        switchInt(move _196) -> [0: bb165, 1: bb166, otherwise: bb4];
    }

    bb165: {
        _198 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb167, unwind: bb176];
    }

    bb166: {
        _197 = ((_13 as Some).0: std::option::Option<config::Delimiter>);
        _195 = _197;
        goto -> bb170;
    }

    bb167: {
        _199 = discriminant(_198);
        switchInt(move _199) -> [0: bb169, 1: bb168, otherwise: bb4];
    }

    bb168: {
        _201 = move ((_198 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Err(move _201);
        goto -> bb171;
    }

    bb169: {
        _200 = ((_198 as Ok).0: std::option::Option<config::Delimiter>);
        _195 = _200;
        goto -> bb170;
    }

    bb170: {
        _203 = move _125;
        _204 = move _132;
        _205 = _139;
        _206 = _146;
        _207 = _153;
        _208 = _160;
        _209 = _167;
        _210 = _174;
        _211 = move _181;
        _212 = _188;
        _213 = _195;
        _202 = cmd::stats::Args { arg_input: move _203, flag_select: move _204, flag_everything: move _205, flag_mode: move _206, flag_cardinality: move _207, flag_median: move _208, flag_nulls: move _209, flag_jobs: move _210, flag_output: move _211, flag_no_headers: move _212, flag_delimiter: move _213 };
        _0 = Result::<cmd::stats::Args, <__A as MapAccess<'_>>::Error>::Ok(move _202);
        _214 = const false;
        _215 = const false;
        _216 = const false;
        drop(_2) -> [return: bb175, unwind continue];
    }

    bb171: {
        drop(_181) -> [return: bb172, unwind: bb177];
    }

    bb172: {
        drop(_132) -> [return: bb173, unwind: bb178];
    }

    bb173: {
        drop(_125) -> [return: bb174, unwind: bb194];
    }

    bb174: {
        _217 = discriminant(_11);
        switchInt(move _217) -> [1: bb184, otherwise: bb183];
    }

    bb175: {
        return;
    }

    bb176 (cleanup): {
        drop(_181) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_132) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_125) -> [return: bb194, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        _221 = discriminant(_4);
        switchInt(move _221) -> [1: bb195, otherwise: bb180];
    }

    bb180 (cleanup): {
        _222 = discriminant(_3);
        switchInt(move _222) -> [1: bb197, otherwise: bb181];
    }

    bb181 (cleanup): {
        drop(_2) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        resume;
    }

    bb183: {
        _214 = const false;
        _218 = discriminant(_4);
        switchInt(move _218) -> [1: bb187, otherwise: bb186];
    }

    bb184: {
        switchInt(_214) -> [0: bb183, otherwise: bb185];
    }

    bb185: {
        drop(((_11 as Some).0: std::option::Option<std::string::String>)) -> [return: bb183, unwind: bb179];
    }

    bb186: {
        _215 = const false;
        _219 = discriminant(_3);
        switchInt(move _219) -> [1: bb190, otherwise: bb189];
    }

    bb187: {
        switchInt(_215) -> [0: bb186, otherwise: bb188];
    }

    bb188: {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb186, unwind: bb180];
    }

    bb189: {
        _216 = const false;
        drop(_2) -> [return: bb175, unwind continue];
    }

    bb190: {
        switchInt(_216) -> [0: bb189, otherwise: bb191];
    }

    bb191: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb189, unwind: bb181];
    }

    bb192 (cleanup): {
        switchInt(_214) -> [0: bb179, otherwise: bb193];
    }

    bb193 (cleanup): {
        drop(((_11 as Some).0: std::option::Option<std::string::String>)) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        _220 = discriminant(_11);
        switchInt(move _220) -> [1: bb192, otherwise: bb179];
    }

    bb195 (cleanup): {
        switchInt(_215) -> [0: bb180, otherwise: bb196];
    }

    bb196 (cleanup): {
        drop(((_4 as Some).0: select::SelectColumns)) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        switchInt(_216) -> [0: bb181, otherwise: bb198];
    }

    bb198 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb181, unwind terminate(cleanup)];
    }
}

const cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 11];
    let _2: &[&str; 11];
    let _3: [&str; 11];
    let mut _4: &[&str; 11];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in cmd::stats::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/stats.rs:70:17: 70:28>::deserialize::FIELDS: &[&str; 11] = {
    let mut _0: &[&str; 11];
    let mut _1: [&str; 11];

    bb0: {
        _1 = [const "arg_input", const "flag_select", const "flag_everything", const "flag_mode", const "flag_cardinality", const "flag_median", const "flag_nulls", const "flag_jobs", const "flag_output", const "flag_no_headers", const "flag_delimiter"];
        _0 = &_1;
        return;
    }
}

fn cmd::stats::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::stats::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::stats::Args>;
    let mut _4: std::result::Result<cmd::stats::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::stats::Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Writer<std::boxed::Box<dyn std::io::Write>>>;
    let mut _11: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _12: &config::Config;
    let _13: config::Config;
    let _14: &std::option::Option<std::string::String>;
    let mut _15: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>)>;
    let mut _21: std::result::Result<(csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>), CliError>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::option::Option<index::Indexed<std::fs::File, std::fs::File>>>;
    let mut _23: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _24: &config::Config;
    let _25: config::Config;
    let mut _26: &cmd::stats::Args;
    let mut _27: isize;
    let mut _30: isize;
    let mut _31: &cmd::stats::Args;
    let mut _33: usize;
    let mut _34: &cmd::stats::Args;
    let mut _35: &cmd::stats::Args;
    let mut _36: index::Indexed<std::fs::File, std::fs::File>;
    let mut _37: isize;
    let mut _41: &cmd::stats::Args;
    let mut _42: std::vec::Vec<cmd::stats::Stats>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _44: std::result::Result<(), csv::Error>;
    let mut _45: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _46: &csv::StringRecord;
    let _47: csv::StringRecord;
    let mut _48: &cmd::stats::Args;
    let mut _49: isize;
    let mut _52: csv::ByteRecordIter<'_>;
    let mut _53: &csv::ByteRecord;
    let mut _54: std::vec::IntoIter<csv::StringRecord>;
    let mut _55: std::vec::Vec<csv::StringRecord>;
    let mut _56: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<csv::StringRecord>>>;
    let mut _57: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<csv::StringRecord>>>;
    let mut _59: std::option::Option<(usize, (&[u8], csv::StringRecord))>;
    let mut _60: &mut std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<csv::StringRecord>>>;
    let mut _61: isize;
    let mut _66: bool;
    let mut _67: std::string::String;
    let mut _68: &usize;
    let mut _70: csv::StringRecordIter<'_>;
    let mut _71: &csv::StringRecord;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _73: std::result::Result<(), csv::Error>;
    let mut _74: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _75: std::iter::Chain<std::vec::IntoIter<&[u8]>, std::iter::Map<csv::StringRecordIter<'_>, {closure@src/cmd/stats.rs:110:36: 110:39}>>;
    let mut _76: std::vec::IntoIter<&[u8]>;
    let mut _77: std::vec::Vec<&[u8]>;
    let mut _78: std::boxed::Box<[&[u8]]>;
    let mut _79: std::boxed::Box<[&[u8]; 1]>;
    let mut _80: usize;
    let mut _81: usize;
    let mut _82: *mut u8;
    let mut _83: std::boxed::Box<[&[u8]; 1]>;
    let _84: &[u8];
    let mut _85: &std::vec::Vec<u8>;
    let mut _86: isize;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _89: std::result::Result<(), std::io::Error>;
    let mut _90: &mut csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _91: isize;
    let mut _93: &str;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: *const [&[u8]; 1];
    scope 1 {
        debug args => _2;
        let mut _9: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        let _16: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _17: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
        scope 6 {
            debug wtr => _9;
            let _18: csv::ByteRecord;
            let _19: std::vec::Vec<cmd::stats::Stats>;
            let _28: std::result::Result<std::convert::Infallible, CliError>;
            let _29: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
            let _32: index::Indexed<std::fs::File, std::fs::File>;
            let _38: std::result::Result<std::convert::Infallible, CliError>;
            let _39: (csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>);
            scope 11 {
                debug headers => _18;
                debug stats => _19;
                let _40: std::vec::Vec<csv::StringRecord>;
                scope 21 {
                    debug stats => _40;
                    let _50: std::result::Result<std::convert::Infallible, csv::Error>;
                    let _51: std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<csv::StringRecord>>;
                    scope 22 {
                        debug residual => _50;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => const ();
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug fields => _51;
                        let mut _58: std::iter::Enumerate<std::iter::Zip<csv::ByteRecordIter<'_>, std::vec::IntoIter<csv::StringRecord>>>;
                        let _92: std::result::Result<std::convert::Infallible, std::io::Error>;
                        scope 27 {
                            debug iter => _58;
                            let _62: usize;
                            let _63: &[u8];
                            let _64: csv::StringRecord;
                            scope 28 {
                                debug i => _62;
                                debug header => _63;
                                debug stat => _64;
                                let _65: std::vec::Vec<u8>;
                                scope 29 {
                                    debug header => _65;
                                    let _69: std::iter::Map<csv::StringRecordIter<'_>, {closure@src/cmd/stats.rs:110:36: 110:39}>;
                                    scope 30 {
                                        debug stat => _69;
                                        let _87: std::result::Result<std::convert::Infallible, csv::Error>;
                                        let mut _98: *const ();
                                        let mut _99: usize;
                                        let mut _100: usize;
                                        let mut _101: usize;
                                        let mut _102: usize;
                                        let mut _103: bool;
                                        scope 31 {
                                        }
                                        scope 32 {
                                            debug residual => _87;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug val => const ();
                                            scope 35 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 36 {
                            debug residual => _92;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => const ();
                            scope 39 {
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _28;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _29;
                scope 15 {
                }
            }
            scope 16 {
                debug idx => _32;
            }
            scope 17 {
                debug residual => _38;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _39;
                scope 20 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _96 = const false;
        _94 = const false;
        _95 = const false;
        _5 = const {alloc31: &&str};
        _93 = deref_copy (*_5);
        _4 = get_args::<cmd::stats::Args>(_93, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<cmd::stats::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::stats::Args);
        _2 = move _8;
        _14 = &(_2.8: std::option::Option<std::string::String>);
        _13 = Config::new(_14) -> [return: bb6, unwind: bb86];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb76, unwind continue];
    }

    bb6: {
        _12 = &_13;
        _11 = Config::writer(move _12) -> [return: bb7, unwind: bb85];
    }

    bb7: {
        _10 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as Try>::branch(move _11) -> [return: bb8, unwind: bb85];
    }

    bb8: {
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _17 = move ((_10 as Continue).0: csv::Writer<std::boxed::Box<dyn std::io::Write>>);
        _9 = move _17;
        drop(_13) -> [return: bb12, unwind: bb84];
    }

    bb10: {
        _16 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb11, unwind: bb85];
    }

    bb11: {
        drop(_13) -> [return: bb75, unwind: bb86];
    }

    bb12: {
        _26 = &_2;
        _25 = cmd::stats::Args::rconfig(move _26) -> [return: bb13, unwind: bb84];
    }

    bb13: {
        _24 = &_25;
        _23 = Config::indexed(move _24) -> [return: bb14, unwind: bb83];
    }

    bb14: {
        _22 = <Result<std::option::Option<Indexed<File, File>>, CliError> as Try>::branch(move _23) -> [return: bb15, unwind: bb83];
    }

    bb15: {
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _29 = move ((_22 as Continue).0: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>);
        _30 = discriminant(_29);
        switchInt(move _30) -> [0: bb19, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _28 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _28) -> [return: bb98, unwind: bb83];
    }

    bb18: {
        _94 = const true;
        _32 = move ((_29 as Some).0: index::Indexed<std::fs::File, std::fs::File>);
        _33 = (_2.7: usize);
        switchInt(move _33) -> [1: bb20, otherwise: bb21];
    }

    bb19: {
        _31 = &_2;
        _21 = cmd::stats::Args::sequential_stats(move _31) -> [return: bb99, unwind: bb83];
    }

    bb20: {
        _34 = &_2;
        _21 = cmd::stats::Args::sequential_stats(move _34) -> [return: bb100, unwind: bb96];
    }

    bb21: {
        _35 = &_2;
        _94 = const false;
        _36 = move _32;
        _21 = cmd::stats::Args::parallel_stats(move _35, move _36) -> [return: bb101, unwind: bb96];
    }

    bb22: {
        switchInt(_94) -> [0: bb23, otherwise: bb88];
    }

    bb23: {
        _94 = const false;
        goto -> bb24;
    }

    bb24: {
        _20 = <Result<(ByteRecord, Vec<Stats>), CliError> as Try>::branch(move _21) -> [return: bb25, unwind: bb83];
    }

    bb25: {
        _37 = discriminant(_20);
        switchInt(move _37) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _39 = move ((_20 as Continue).0: (csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>));
        _18 = move (_39.0: csv::ByteRecord);
        _96 = const true;
        _19 = move (_39.1: std::vec::Vec<cmd::stats::Stats>);
        drop(_25) -> [return: bb28, unwind: bb94];
    }

    bb27: {
        _38 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _38) -> [return: bb102, unwind: bb83];
    }

    bb28: {
        _41 = &_2;
        _96 = const false;
        _42 = move _19;
        _40 = cmd::stats::Args::stats_to_records(move _41, move _42) -> [return: bb29, unwind: bb94];
    }

    bb29: {
        _95 = const true;
        _45 = &mut _9;
        _48 = &_2;
        _47 = cmd::stats::Args::stat_headers(move _48) -> [return: bb30, unwind: bb92];
    }

    bb30: {
        _46 = &_47;
        _44 = Writer::<Box<dyn std::io::Write>>::write_record::<&StringRecord, &str>(move _45, move _46) -> [return: bb31, unwind: bb81];
    }

    bb31: {
        _43 = <Result<(), csv::Error> as Try>::branch(move _44) -> [return: bb32, unwind: bb81];
    }

    bb32: {
        _49 = discriminant(_43);
        switchInt(move _49) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        drop(_47) -> [return: bb36, unwind: bb92];
    }

    bb34: {
        _50 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _50) -> [return: bb35, unwind: bb81];
    }

    bb35: {
        drop(_47) -> [return: bb90, unwind: bb92];
    }

    bb36: {
        _53 = &_18;
        _52 = ByteRecord::iter(move _53) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        _95 = const false;
        _55 = move _40;
        _54 = <Vec<StringRecord> as IntoIterator>::into_iter(move _55) -> [return: bb38, unwind: bb92];
    }

    bb38: {
        _51 = <ByteRecordIter<'_> as Iterator>::zip::<std::vec::IntoIter<StringRecord>>(move _52, move _54) -> [return: bb39, unwind: bb92];
    }

    bb39: {
        _57 = <Zip<ByteRecordIter<'_>, std::vec::IntoIter<StringRecord>> as Iterator>::enumerate(move _51) -> [return: bb40, unwind: bb92];
    }

    bb40: {
        _56 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<StringRecord>>> as IntoIterator>::into_iter(move _57) -> [return: bb41, unwind: bb92];
    }

    bb41: {
        _58 = move _56;
        goto -> bb42;
    }

    bb42: {
        _60 = &mut _58;
        _59 = <Enumerate<Zip<ByteRecordIter<'_>, std::vec::IntoIter<StringRecord>>> as Iterator>::next(_60) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb45, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _63 = ((((_59 as Some).0: (usize, (&[u8], csv::StringRecord))).1: (&[u8], csv::StringRecord)).0: &[u8]);
        _64 = move ((((_59 as Some).0: (usize, (&[u8], csv::StringRecord))).1: (&[u8], csv::StringRecord)).1: csv::StringRecord);
        _62 = (((_59 as Some).0: (usize, (&[u8], csv::StringRecord))).0: usize);
        _66 = (_2.9: bool);
        switchInt(move _66) -> [0: bb48, otherwise: bb46];
    }

    bb45: {
        drop(_58) -> [return: bb63, unwind: bb92];
    }

    bb46: {
        _68 = &_62;
        _67 = <usize as ToString>::to_string(move _68) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        _65 = std::string::String::into_bytes(move _67) -> [return: bb103, unwind: bb79];
    }

    bb48: {
        _65 = std::slice::<impl [u8]>::to_vec(_63) -> [return: bb104, unwind: bb79];
    }

    bb49: {
        _71 = &_64;
        _70 = StringRecord::iter(move _71) -> [return: bb50, unwind: bb78];
    }

    bb50: {
        _69 = <StringRecordIter<'_> as Iterator>::map::<&[u8], {closure@src/cmd/stats.rs:110:36: 110:39}>(move _70, const ZeroSized: {closure@src/cmd/stats.rs:110:36: 110:39}) -> [return: bb51, unwind: bb78];
    }

    bb51: {
        _74 = &mut _9;
        _80 = SizeOf([&[u8]; 1]);
        _81 = AlignOf([&[u8]; 1]);
        _82 = alloc::alloc::exchange_malloc(move _80, move _81) -> [return: bb52, unwind: bb78];
    }

    bb52: {
        _83 = ShallowInitBox(move _82, [&[u8]; 1]);
        _85 = &_65;
        _84 = <Vec<u8> as Deref>::deref(move _85) -> [return: bb53, unwind: bb77];
    }

    bb53: {
        _97 = (((_83.0: std::ptr::Unique<[&[u8]; 1]>).0: std::ptr::NonNull<[&[u8]; 1]>).0: *const [&[u8]; 1]);
        _98 = _97 as *const () (PtrToPtr);
        _99 = _98 as usize (Transmute);
        _100 = AlignOf([&[u8]; 1]);
        _101 = Sub(_100, const 1_usize);
        _102 = BitAnd(_99, _101);
        _103 = Eq(_102, const 0_usize);
        assert(_103, "misaligned pointer dereference: address must be a multiple of {} but is {}", _100, _99) -> [success: bb97, unwind unreachable];
    }

    bb54: {
        _76 = <Vec<&[u8]> as IntoIterator>::into_iter(move _77) -> [return: bb55, unwind: bb78];
    }

    bb55: {
        _75 = <std::vec::IntoIter<&[u8]> as Iterator>::chain::<std::iter::Map<StringRecordIter<'_>, {closure@src/cmd/stats.rs:110:36: 110:39}>>(move _76, move _69) -> [return: bb56, unwind: bb78];
    }

    bb56: {
        _73 = Writer::<Box<dyn std::io::Write>>::write_record::<std::iter::Chain<std::vec::IntoIter<&[u8]>, std::iter::Map<StringRecordIter<'_>, {closure@src/cmd/stats.rs:110:36: 110:39}>>, &[u8]>(move _74, move _75) -> [return: bb57, unwind: bb78];
    }

    bb57: {
        _72 = <Result<(), csv::Error> as Try>::branch(move _73) -> [return: bb58, unwind: bb78];
    }

    bb58: {
        _86 = discriminant(_72);
        switchInt(move _86) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        drop(_65) -> [return: bb62, unwind: bb79];
    }

    bb60: {
        _87 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _87) -> [return: bb61, unwind: bb78];
    }

    bb61: {
        drop(_65) -> [return: bb70, unwind: bb79];
    }

    bb62: {
        drop(_64) -> [return: bb42, unwind: bb80];
    }

    bb63: {
        _90 = &mut _9;
        _89 = Writer::<Box<dyn std::io::Write>>::flush(move _90) -> [return: bb64, unwind: bb92];
    }

    bb64: {
        _88 = <Result<(), std::io::Error> as Try>::branch(move _89) -> [return: bb65, unwind: bb92];
    }

    bb65: {
        _91 = discriminant(_88);
        switchInt(move _91) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        _0 = Result::<(), CliError>::Ok(const ());
        _95 = const false;
        _96 = const false;
        drop(_18) -> [return: bb68, unwind: bb84];
    }

    bb67: {
        _92 = move ((_88 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _92) -> [return: bb105, unwind: bb92];
    }

    bb68: {
        drop(_9) -> [return: bb69, unwind: bb86];
    }

    bb69: {
        drop(_2) -> [return: bb76, unwind continue];
    }

    bb70: {
        drop(_64) -> [return: bb71, unwind: bb80];
    }

    bb71: {
        drop(_58) -> [return: bb90, unwind: bb92];
    }

    bb72: {
        _95 = const false;
        _96 = const false;
        drop(_18) -> [return: bb74, unwind: bb84];
    }

    bb73: {
        drop(_25) -> [return: bb74, unwind: bb84];
    }

    bb74: {
        drop(_9) -> [return: bb75, unwind: bb86];
    }

    bb75: {
        drop(_2) -> [return: bb76, unwind continue];
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_83) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_65) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_64) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_58) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_47) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_18) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_25) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_9) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_13) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_2) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }

    bb88: {
        drop(_32) -> [return: bb23, unwind: bb83];
    }

    bb89: {
        drop(_40) -> [return: bb72, unwind: bb94];
    }

    bb90: {
        switchInt(_95) -> [0: bb72, otherwise: bb89];
    }

    bb91 (cleanup): {
        drop(_40) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_95) -> [0: bb94, otherwise: bb91];
    }

    bb93 (cleanup): {
        drop(_19) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_96) -> [0: bb82, otherwise: bb93];
    }

    bb95 (cleanup): {
        drop(_32) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_94) -> [0: bb83, otherwise: bb95];
    }

    bb97: {
        (*_97) = [_84];
        _79 = move _83;
        _78 = move _79 as std::boxed::Box<[&[u8]]> (PointerCoercion(Unsize));
        _77 = std::slice::<impl [&[u8]]>::into_vec::<std::alloc::Global>(move _78) -> [return: bb54, unwind: bb78];
    }

    bb98: {
        goto -> bb73;
    }

    bb99: {
        goto -> bb24;
    }

    bb100: {
        goto -> bb22;
    }

    bb101: {
        goto -> bb22;
    }

    bb102: {
        goto -> bb73;
    }

    bb103: {
        goto -> bb49;
    }

    bb104: {
        goto -> bb49;
    }

    bb105: {
        goto -> bb90;
    }
}

alloc31 (static: cmd::stats::USAGE, size: 16, align: 8) {
    ╾───alloc1750<imm>────╼ 61 09 00 00 00 00 00 00 │ ╾──────╼a.......
}

alloc1750 (size: 2401, align: 1) {
    0x000 │ 0a 43 6f 6d 70 75 74 65 73 20 62 61 73 69 63 20 │ .Computes basic 
    0x010 │ 73 74 61 74 69 73 74 69 63 73 20 6f 6e 20 43 53 │ statistics on CS
    0x020 │ 56 20 64 61 74 61 2e 0a 0a 42 61 73 69 63 20 73 │ V data...Basic s
    0x030 │ 74 61 74 69 73 74 69 63 73 20 69 6e 63 6c 75 64 │ tatistics includ
    0x040 │ 65 73 20 6d 65 61 6e 2c 20 6d 65 64 69 61 6e 2c │ es mean, median,
    0x050 │ 20 6d 6f 64 65 2c 20 73 74 61 6e 64 61 72 64 20 │  mode, standard 
    0x060 │ 64 65 76 69 61 74 69 6f 6e 2c 20 73 75 6d 2c 20 │ deviation, sum, 
    0x070 │ 6d 61 78 20 61 6e 64 0a 6d 69 6e 20 76 61 6c 75 │ max and.min valu
    0x080 │ 65 73 2e 20 4e 6f 74 65 20 74 68 61 74 20 73 6f │ es. Note that so
    0x090 │ 6d 65 20 73 74 61 74 69 73 74 69 63 73 20 61 72 │ me statistics ar
    0x0a0 │ 65 20 65 78 70 65 6e 73 69 76 65 20 74 6f 20 63 │ e expensive to c
    0x0b0 │ 6f 6d 70 75 74 65 2c 20 73 6f 20 74 68 65 79 20 │ ompute, so they 
    0x0c0 │ 6d 75 73 74 0a 62 65 20 65 6e 61 62 6c 65 64 20 │ must.be enabled 
    0x0d0 │ 65 78 70 6c 69 63 69 74 6c 79 2e 20 42 79 20 64 │ explicitly. By d
    0x0e0 │ 65 66 61 75 6c 74 2c 20 74 68 65 20 66 6f 6c 6c │ efault, the foll
    0x0f0 │ 6f 77 69 6e 67 20 73 74 61 74 69 73 74 69 63 73 │ owing statistics
    0x100 │ 20 61 72 65 20 72 65 70 6f 72 74 65 64 20 66 6f │  are reported fo
    0x110 │ 72 0a 2a 65 76 65 72 79 2a 20 63 6f 6c 75 6d 6e │ r.*every* column
    0x120 │ 20 69 6e 20 74 68 65 20 43 53 56 20 64 61 74 61 │  in the CSV data
    0x130 │ 3a 20 6d 65 61 6e 2c 20 6d 61 78 2c 20 6d 69 6e │ : mean, max, min
    0x140 │ 20 61 6e 64 20 73 74 61 6e 64 61 72 64 20 64 65 │  and standard de
    0x150 │ 76 69 61 74 69 6f 6e 2e 20 54 68 65 0a 64 65 66 │ viation. The.def
    0x160 │ 61 75 6c 74 20 73 65 74 20 6f 66 20 73 74 61 74 │ ault set of stat
    0x170 │ 69 73 74 69 63 73 20 63 6f 72 72 65 73 70 6f 6e │ istics correspon
    0x180 │ 64 73 20 74 6f 20 73 74 61 74 69 73 74 69 63 73 │ ds to statistics
    0x190 │ 20 74 68 61 74 20 63 61 6e 20 62 65 20 63 6f 6d │  that can be com
    0x1a0 │ 70 75 74 65 64 0a 65 66 66 69 63 69 65 6e 74 6c │ puted.efficientl
    0x1b0 │ 79 20 6f 6e 20 61 20 73 74 72 65 61 6d 20 6f 66 │ y on a stream of
    0x1c0 │ 20 64 61 74 61 20 28 69 2e 65 2e 2c 20 63 6f 6e │  data (i.e., con
    0x1d0 │ 73 74 61 6e 74 20 6d 65 6d 6f 72 79 29 2e 0a 0a │ stant memory)...
    0x1e0 │ 43 6f 6d 70 75 74 69 6e 67 20 73 74 61 74 69 73 │ Computing statis
    0x1f0 │ 74 69 63 73 20 6f 6e 20 61 20 6c 61 72 67 65 20 │ tics on a large 
    0x200 │ 66 69 6c 65 20 63 61 6e 20 62 65 20 6d 61 64 65 │ file can be made
    0x210 │ 20 6d 75 63 68 20 66 61 73 74 65 72 20 69 66 20 │  much faster if 
    0x220 │ 79 6f 75 20 63 72 65 61 74 65 0a 61 6e 20 69 6e │ you create.an in
    0x230 │ 64 65 78 20 66 6f 72 20 69 74 20 66 69 72 73 74 │ dex for it first
    0x240 │ 20 77 69 74 68 20 27 78 73 76 20 69 6e 64 65 78 │  with 'xsv index
    0x250 │ 27 2e 0a 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 │ '...Usage:.    x
    0x260 │ 73 76 20 73 74 61 74 73 20 5b 6f 70 74 69 6f 6e │ sv stats [option
    0x270 │ 73 5d 20 5b 3c 69 6e 70 75 74 3e 5d 0a 0a 73 74 │ s] [<input>]..st
    0x280 │ 61 74 73 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 │ ats options:.   
    0x290 │ 20 2d 73 2c 20 2d 2d 73 65 6c 65 63 74 20 3c 61 │  -s, --select <a
    0x2a0 │ 72 67 3e 20 20 20 20 20 53 65 6c 65 63 74 20 61 │ rg>     Select a
    0x2b0 │ 20 73 75 62 73 65 74 20 6f 66 20 63 6f 6c 75 6d │  subset of colum
    0x2c0 │ 6e 73 20 74 6f 20 63 6f 6d 70 75 74 65 20 73 74 │ ns to compute st
    0x2d0 │ 61 74 73 20 66 6f 72 2e 0a 20 20 20 20 20 20 20 │ ats for..       
    0x2e0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2f0 │ 20 20 20 20 53 65 65 20 27 78 73 76 20 73 65 6c │     See 'xsv sel
    0x300 │ 65 63 74 20 2d 2d 68 65 6c 70 27 20 66 6f 72 20 │ ect --help' for 
    0x310 │ 74 68 65 20 66 6f 72 6d 61 74 20 64 65 74 61 69 │ the format detai
    0x320 │ 6c 73 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 │ ls..            
    0x330 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54 │                T
    0x340 │ 68 69 73 20 69 73 20 70 72 6f 76 69 64 65 64 20 │ his is provided 
    0x350 │ 68 65 72 65 20 62 65 63 61 75 73 65 20 70 69 70 │ here because pip
    0x360 │ 69 6e 67 20 27 78 73 76 20 73 65 6c 65 63 74 27 │ ing 'xsv select'
    0x370 │ 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ .               
    0x380 │ 20 20 20 20 20 20 20 20 20 20 20 20 69 6e 74 6f │             into
    0x390 │ 20 27 78 73 76 20 73 74 61 74 73 27 20 77 69 6c │  'xsv stats' wil
    0x3a0 │ 6c 20 64 69 73 61 62 6c 65 20 74 68 65 20 75 73 │ l disable the us
    0x3b0 │ 65 20 6f 66 20 69 6e 64 65 78 69 6e 67 2e 0a 20 │ e of indexing.. 
    0x3c0 │ 20 20 20 2d 2d 65 76 65 72 79 74 68 69 6e 67 20 │    --everything 
    0x3d0 │ 20 20 20 20 20 20 20 20 20 20 53 68 6f 77 20 61 │           Show a
    0x3e0 │ 6c 6c 20 73 74 61 74 69 73 74 69 63 73 20 61 76 │ ll statistics av
    0x3f0 │ 61 69 6c 61 62 6c 65 2e 0a 20 20 20 20 2d 2d 6d │ ailable..    --m
    0x400 │ 6f 64 65 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ode             
    0x410 │ 20 20 20 20 53 68 6f 77 20 74 68 65 20 6d 6f 64 │     Show the mod
    0x420 │ 65 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ e..             
    0x430 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54 68 │               Th
    0x440 │ 69 73 20 72 65 71 75 69 72 65 73 20 73 74 6f 72 │ is requires stor
    0x450 │ 69 6e 67 20 61 6c 6c 20 43 53 56 20 64 61 74 61 │ ing all CSV data
    0x460 │ 20 69 6e 20 6d 65 6d 6f 72 79 2e 0a 20 20 20 20 │  in memory..    
    0x470 │ 2d 2d 63 61 72 64 69 6e 61 6c 69 74 79 20 20 20 │ --cardinality   
    0x480 │ 20 20 20 20 20 20 20 53 68 6f 77 20 74 68 65 20 │        Show the 
    0x490 │ 63 61 72 64 69 6e 61 6c 69 74 79 2e 0a 20 20 20 │ cardinality..   
    0x4a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x4b0 │ 20 20 20 20 20 20 20 20 54 68 69 73 20 72 65 71 │         This req
    0x4c0 │ 75 69 72 65 73 20 73 74 6f 72 69 6e 67 20 61 6c │ uires storing al
    0x4d0 │ 6c 20 43 53 56 20 64 61 74 61 20 69 6e 20 6d 65 │ l CSV data in me
    0x4e0 │ 6d 6f 72 79 2e 0a 20 20 20 20 2d 2d 6d 65 64 69 │ mory..    --medi
    0x4f0 │ 61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ an              
    0x500 │ 20 53 68 6f 77 20 74 68 65 20 6d 65 64 69 61 6e │  Show the median
    0x510 │ 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │ ..              
    0x520 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 54 68 69 │              Thi
    0x530 │ 73 20 72 65 71 75 69 72 65 73 20 73 74 6f 72 69 │ s requires stori
    0x540 │ 6e 67 20 61 6c 6c 20 43 53 56 20 64 61 74 61 20 │ ng all CSV data 
    0x550 │ 69 6e 20 6d 65 6d 6f 72 79 2e 0a 20 20 20 20 2d │ in memory..    -
    0x560 │ 2d 6e 75 6c 6c 73 20 20 20 20 20 20 20 20 20 20 │ -nulls          
    0x570 │ 20 20 20 20 20 20 49 6e 63 6c 75 64 65 20 4e 55 │       Include NU
    0x580 │ 4c 4c 73 20 69 6e 20 74 68 65 20 70 6f 70 75 6c │ LLs in the popul
    0x590 │ 61 74 69 6f 6e 20 73 69 7a 65 20 66 6f 72 20 63 │ ation size for c
    0x5a0 │ 6f 6d 70 75 74 69 6e 67 0a 20 20 20 20 20 20 20 │ omputing.       
    0x5b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x5c0 │ 20 20 20 20 6d 65 61 6e 20 61 6e 64 20 73 74 61 │     mean and sta
    0x5d0 │ 6e 64 61 72 64 20 64 65 76 69 61 74 69 6f 6e 2e │ ndard deviation.
    0x5e0 │ 0a 20 20 20 20 2d 6a 2c 20 2d 2d 6a 6f 62 73 20 │ .    -j, --jobs 
    0x5f0 │ 3c 61 72 67 3e 20 20 20 20 20 20 20 54 68 65 20 │ <arg>       The 
    0x600 │ 6e 75 6d 62 65 72 20 6f 66 20 6a 6f 62 73 20 74 │ number of jobs t
    0x610 │ 6f 20 72 75 6e 20 69 6e 20 70 61 72 61 6c 6c 65 │ o run in paralle
    0x620 │ 6c 2e 0a 20 20 20 20 20 20 20 20 20 20 20 20 20 │ l..             
    0x630 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54 68 │               Th
    0x640 │ 69 73 20 77 6f 72 6b 73 20 62 65 74 74 65 72 20 │ is works better 
    0x650 │ 77 68 65 6e 20 74 68 65 20 67 69 76 65 6e 20 43 │ when the given C
    0x660 │ 53 56 20 64 61 74 61 20 68 61 73 0a 20 20 20 20 │ SV data has.    
    0x670 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x680 │ 20 20 20 20 20 20 20 61 6e 20 69 6e 64 65 78 20 │        an index 
    0x690 │ 61 6c 72 65 61 64 79 20 63 72 65 61 74 65 64 2e │ already created.
    0x6a0 │ 20 4e 6f 74 65 20 74 68 61 74 20 61 20 66 69 6c │  Note that a fil
    0x6b0 │ 65 20 68 61 6e 64 6c 65 0a 20 20 20 20 20 20 20 │ e handle.       
    0x6c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x6d0 │ 20 20 20 20 69 73 20 6f 70 65 6e 65 64 20 66 6f │     is opened fo
    0x6e0 │ 72 20 65 61 63 68 20 6a 6f 62 2e 0a 20 20 20 20 │ r each job..    
    0x6f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x700 │ 20 20 20 20 20 20 20 57 68 65 6e 20 73 65 74 20 │        When set 
    0x710 │ 74 6f 20 27 30 27 2c 20 74 68 65 20 6e 75 6d 62 │ to '0', the numb
    0x720 │ 65 72 20 6f 66 20 6a 6f 62 73 20 69 73 20 73 65 │ er of jobs is se
    0x730 │ 74 20 74 6f 20 74 68 65 0a 20 20 20 20 20 20 20 │ t to the.       
    0x740 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x750 │ 20 20 20 20 6e 75 6d 62 65 72 20 6f 66 20 43 50 │     number of CP
    0x760 │ 55 73 20 64 65 74 65 63 74 65 64 2e 0a 20 20 20 │ Us detected..   
    0x770 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x780 │ 20 20 20 20 20 20 20 20 5b 64 65 66 61 75 6c 74 │         [default
    0x790 │ 3a 20 30 5d 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 │ : 0]..Common opt
    0x7a0 │ 69 6f 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d │ ions:.    -h, --
    0x7b0 │ 68 65 6c 70 20 20 20 20 20 20 20 20 20 20 20 20 │ help            
    0x7c0 │ 20 44 69 73 70 6c 61 79 20 74 68 69 73 20 6d 65 │  Display this me
    0x7d0 │ 73 73 61 67 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d │ ssage.    -o, --
    0x7e0 │ 6f 75 74 70 75 74 20 3c 66 69 6c 65 3e 20 20 20 │ output <file>   
    0x7f0 │ 20 57 72 69 74 65 20 6f 75 74 70 75 74 20 74 6f │  Write output to
    0x800 │ 20 3c 66 69 6c 65 3e 20 69 6e 73 74 65 61 64 20 │  <file> instead 
    0x810 │ 6f 66 20 73 74 64 6f 75 74 2e 0a 20 20 20 20 2d │ of stdout..    -
    0x820 │ 6e 2c 20 2d 2d 6e 6f 2d 68 65 61 64 65 72 73 20 │ n, --no-headers 
    0x830 │ 20 20 20 20 20 20 57 68 65 6e 20 73 65 74 2c 20 │       When set, 
    0x840 │ 74 68 65 20 66 69 72 73 74 20 72 6f 77 20 77 69 │ the first row wi
    0x850 │ 6c 6c 20 4e 4f 54 20 62 65 20 69 6e 74 65 72 70 │ ll NOT be interp
    0x860 │ 72 65 74 65 64 0a 20 20 20 20 20 20 20 20 20 20 │ reted.          
    0x870 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x880 │ 20 61 73 20 63 6f 6c 75 6d 6e 20 6e 61 6d 65 73 │  as column names
    0x890 │ 2e 20 69 2e 65 2e 2c 20 54 68 65 79 20 77 69 6c │ . i.e., They wil
    0x8a0 │ 6c 20 62 65 20 69 6e 63 6c 75 64 65 64 0a 20 20 │ l be included.  
    0x8b0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x8c0 │ 20 20 20 20 20 20 20 20 20 69 6e 20 73 74 61 74 │          in stat
    0x8d0 │ 69 73 74 69 63 73 2e 0a 20 20 20 20 2d 64 2c 20 │ istics..    -d, 
    0x8e0 │ 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 72 67 │ --delimiter <arg
    0x8f0 │ 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 65 6c │ >  The field del
    0x900 │ 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 64 69 │ imiter for readi
    0x910 │ 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 20 20 │ ng CSV data..   
    0x920 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x930 │ 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 65 20 │         Must be 
    0x940 │ 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 63 74 │ a single charact
    0x950 │ 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 2c 29 │ er. (default: ,)
    0x960 │ 0a                                              │ .
}

fn cmd::stats::run::{closure#0}(_1: &mut {closure@src/cmd/stats.rs:110:36: 110:39}, _2: &str) -> &[u8] {
    debug f => _2;
    let mut _0: &[u8];

    bb0: {
        _0 = core::str::<impl str>::as_bytes(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::sequential_stats(_1: &cmd::stats::Args) -> Result<(ByteRecord, Vec<Stats>), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>), CliError>;
    let mut _2: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _4: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _13: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _14: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _15: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, std::vec::Vec<cmd::stats::Stats>>;
    let mut _19: std::result::Result<std::vec::Vec<cmd::stats::Stats>, CliError>;
    let _20: &select::Selection;
    let mut _21: csv::ByteRecordsIter<'_, std::boxed::Box<dyn std::io::Read>>;
    let mut _22: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _23: isize;
    let mut _26: (csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>);
    let mut _27: csv::ByteRecord;
    let mut _28: bool;
    scope 1 {
        debug rdr => _2;
        let _10: csv::ByteRecord;
        let _11: select::Selection;
        let _16: std::result::Result<std::convert::Infallible, CliError>;
        let _17: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _10;
            debug sel => _11;
            let _24: std::result::Result<std::convert::Infallible, CliError>;
            let _25: std::vec::Vec<cmd::stats::Stats>;
            scope 11 {
                debug stats => _25;
            }
            scope 12 {
                debug residual => _24;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _25;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _28 = const false;
        _6 = cmd::stats::Args::rconfig(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::reader(move _5) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _3 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _4) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_3 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _2 = move _9;
        drop(_6) -> [return: bb8, unwind: bb25];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Stats>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        drop(_6) -> [return: bb23, unwind continue];
    }

    bb8: {
        _14 = &mut _2;
        _13 = cmd::stats::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _14) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        _12 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _13) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _17 = move ((_12 as Continue).0: (csv::ByteRecord, select::Selection));
        _28 = const true;
        _10 = move (_17.0: csv::ByteRecord);
        _11 = move (_17.1: select::Selection);
        _20 = &_11;
        _22 = &mut _2;
        _21 = Reader::<Box<dyn std::io::Read>>::byte_records(move _22) -> [return: bb13, unwind: bb24];
    }

    bb12: {
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Stats>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _16) -> [return: bb30, unwind: bb25];
    }

    bb13: {
        _19 = cmd::stats::Args::compute::<ByteRecordsIter<'_, Box<dyn std::io::Read>>>(_1, _20, move _21) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = <Result<Vec<Stats>, CliError> as Try>::branch(move _19) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        _25 = move ((_18 as Continue).0: std::vec::Vec<cmd::stats::Stats>);
        _28 = const false;
        _27 = move _10;
        _26 = (move _27, move _25);
        _0 = Result::<(ByteRecord, Vec<Stats>), CliError>::Ok(move _26);
        drop(_11) -> [return: bb19, unwind: bb29];
    }

    bb17: {
        _24 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Stats>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _24) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        drop(_11) -> [return: bb20, unwind: bb29];
    }

    bb19: {
        _28 = const false;
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb20: {
        drop(_10) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _28 = const false;
        goto -> bb22;
    }

    bb22: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_11) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_2) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_6) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_10) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_28) -> [0: bb25, otherwise: bb28];
    }

    bb30: {
        goto -> bb22;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::parallel_stats(_1: &cmd::stats::Args, _2: Indexed<File, File>) -> Result<(ByteRecord, Vec<Stats>), CliError> {
    debug self => _1;
    debug idx => _2;
    let mut _0: std::result::Result<(csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>), CliError>;
    let mut _3: u64;
    let mut _4: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _5: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _7: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _8: &config::Config;
    let _9: config::Config;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _12: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, (csv::ByteRecord, select::Selection)>;
    let mut _16: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let mut _17: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _18: isize;
    let mut _22: usize;
    let mut _23: u64;
    let mut _24: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _25: usize;
    let mut _27: usize;
    let mut _28: u64;
    let mut _29: &index::Indexed<std::fs::File, std::fs::File>;
    let mut _31: usize;
    let mut _34: (chan::Sender<std::vec::Vec<cmd::stats::Stats>>, chan::Receiver<std::vec::Vec<cmd::stats::Stats>>);
    let mut _35: std::ops::Range<usize>;
    let mut _36: std::ops::Range<usize>;
    let mut _38: std::option::Option<usize>;
    let mut _39: &mut std::ops::Range<usize>;
    let mut _40: isize;
    let mut _45: (chan::Sender<std::vec::Vec<cmd::stats::Stats>>, cmd::stats::Args, select::Selection);
    let mut _46: chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
    let mut _47: &chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
    let mut _48: cmd::stats::Args;
    let mut _49: select::Selection;
    let mut _50: &select::Selection;
    let _51: ();
    let mut _52: &threadpool::ThreadPool;
    let mut _53: {closure@src/cmd/stats.rs:145:26: 145:33};
    let _54: ();
    let mut _55: chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
    let mut _56: (csv::ByteRecord, std::vec::Vec<cmd::stats::Stats>);
    let mut _57: csv::ByteRecord;
    let mut _58: std::vec::Vec<cmd::stats::Stats>;
    let mut _59: std::option::Option<std::vec::Vec<cmd::stats::Stats>>;
    let mut _60: chan::Iter<std::vec::Vec<cmd::stats::Stats>>;
    let mut _61: &chan::Receiver<std::vec::Vec<cmd::stats::Stats>>;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    scope 1 {
        debug rdr => _5;
        let _13: csv::ByteRecord;
        let _14: select::Selection;
        let _19: std::result::Result<std::convert::Infallible, CliError>;
        let _20: (csv::ByteRecord, select::Selection);
        scope 6 {
            debug headers => _13;
            debug sel => _14;
            let _21: usize;
            scope 11 {
                debug chunk_size => _21;
                let _26: usize;
                scope 12 {
                    debug nchunks => _26;
                    let _30: threadpool::ThreadPool;
                    scope 13 {
                        debug pool => _30;
                        let _32: chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
                        let _33: chan::Receiver<std::vec::Vec<cmd::stats::Stats>>;
                        scope 14 {
                            debug send => _32;
                            debug recv => _33;
                            let mut _37: std::ops::Range<usize>;
                            scope 15 {
                                debug iter => _37;
                                let _41: usize;
                                scope 16 {
                                    debug i => _41;
                                    let _42: chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
                                    let _43: cmd::stats::Args;
                                    let _44: select::Selection;
                                    scope 17 {
                                        debug send => _42;
                                        debug args => _43;
                                        debug sel => _44;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _4 = &_2;
        _3 = Indexed::<File, File>::count(move _4) -> [return: bb1, unwind: bb55];
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = cmd::stats::Args::sequential_stats(_1) -> [return: bb64, unwind: bb55];
    }

    bb3: {
        _9 = cmd::stats::Args::rconfig(_1) -> [return: bb4, unwind: bb55];
    }

    bb4: {
        _8 = &_9;
        _7 = Config::reader(move _8) -> [return: bb5, unwind: bb54];
    }

    bb5: {
        _6 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _7) -> [return: bb6, unwind: bb54];
    }

    bb6: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _12 = move ((_6 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _5 = move _12;
        drop(_9) -> [return: bb11, unwind: bb53];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(ByteRecord, Vec<Stats>), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        drop(_9) -> [return: bb42, unwind: bb55];
    }

    bb11: {
        _17 = &mut _5;
        _16 = cmd::stats::Args::sel_headers::<Box<dyn std::io::Read>>(_1, _17) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        _15 = <Result<(ByteRecord, Selection), CliError> as Try>::branch(move _16) -> [return: bb13, unwind: bb53];
    }

    bb13: {
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb14, 1: bb15, otherwise: bb8];
    }

    bb14: {
        _20 = move ((_15 as Continue).0: (csv::ByteRecord, select::Selection));
        _66 = const true;
        _13 = move (_20.0: csv::ByteRecord);
        _14 = move (_20.1: select::Selection);
        _24 = &_2;
        _23 = Indexed::<File, File>::count(move _24) -> [return: bb17, unwind: bb52];
    }

    bb15: {
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(ByteRecord, Vec<Stats>), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _19) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        drop(_5) -> [return: bb42, unwind: bb55];
    }

    bb17: {
        _22 = move _23 as usize (IntToInt);
        _25 = cmd::stats::Args::njobs(_1) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        _21 = chunk_size(move _22, move _25) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _29 = &_2;
        _28 = Indexed::<File, File>::count(move _29) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        _27 = move _28 as usize (IntToInt);
        _26 = num_of_chunks(move _27, _21) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _31 = cmd::stats::Args::njobs(_1) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        _30 = ThreadPool::new(move _31) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        _34 = sync::<Vec<Stats>>(const 0_usize) -> [return: bb24, unwind: bb51];
    }

    bb24: {
        _65 = const true;
        _32 = move (_34.0: chan::Sender<std::vec::Vec<cmd::stats::Stats>>);
        _33 = move (_34.1: chan::Receiver<std::vec::Vec<cmd::stats::Stats>>);
        _36 = std::ops::Range::<usize> { start: const 0_usize, end: _26 };
        _35 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _36) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _37 = move _35;
        goto -> bb26;
    }

    bb26: {
        _39 = &mut _37;
        _38 = <std::ops::Range<usize> as Iterator>::next(_39) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb29, 1: bb28, otherwise: bb8];
    }

    bb28: {
        _41 = ((_38 as Some).0: usize);
        _47 = &_32;
        _46 = <chan::Sender<Vec<Stats>> as Clone>::clone(move _47) -> [return: bb30, unwind: bb50];
    }

    bb29: {
        _65 = const false;
        _55 = move _32;
        _54 = std::mem::drop::<chan::Sender<Vec<Stats>>>(move _55) -> [return: bb34, unwind: bb50];
    }

    bb30: {
        _48 = <cmd::stats::Args as Clone>::clone(_1) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _50 = &_14;
        _49 = <Selection as Clone>::clone(move _50) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _45 = (move _46, move _48, move _49);
        _64 = const true;
        _42 = move (_45.0: chan::Sender<std::vec::Vec<cmd::stats::Stats>>);
        _63 = const true;
        _43 = move (_45.1: cmd::stats::Args);
        _62 = const true;
        _44 = move (_45.2: select::Selection);
        _52 = &_30;
        _63 = const false;
        _64 = const false;
        _62 = const false;
        _53 = {closure@src/cmd/stats.rs:145:26: 145:33} { args: move _43, i: _41, chunk_size: _21, send: move _42, sel: move _44 };
        _51 = ThreadPool::execute::<{closure@src/cmd/stats.rs:145:26: 145:33}>(move _52, move _53) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _62 = const false;
        _63 = const false;
        _64 = const false;
        goto -> bb26;
    }

    bb34: {
        _66 = const false;
        _57 = move _13;
        _61 = &_33;
        _60 = chan::Receiver::<Vec<Stats>>::iter(move _61) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _59 = merge_all::<Vec<Stats>, chan::Iter<Vec<Stats>>>(move _60) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _58 = std::option::Option::<Vec<Stats>>::unwrap_or_else::<fn() -> Vec<Stats> {Vec::<Stats>::new}>(move _59, Vec::<Stats>::new) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        _56 = (move _57, move _58);
        _0 = Result::<(ByteRecord, Vec<Stats>), CliError>::Ok(move _56);
        drop(_33) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        _65 = const false;
        drop(_30) -> [return: bb39, unwind: bb52];
    }

    bb39: {
        drop(_14) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        _66 = const false;
        drop(_5) -> [return: bb41, unwind: bb55];
    }

    bb41: {
        drop(_2) -> [return: bb43, unwind continue];
    }

    bb42: {
        drop(_2) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_57) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_62) -> [0: bb46, otherwise: bb57];
    }

    bb46 (cleanup): {
        switchInt(_63) -> [0: bb47, otherwise: bb58];
    }

    bb47 (cleanup): {
        switchInt(_64) -> [0: bb50, otherwise: bb59];
    }

    bb48 (cleanup): {
        drop(_48) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_46) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_33) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_30) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_14) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_5) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_9) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_2) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        drop(_44) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_43) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_42) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_32) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_65) -> [0: bb51, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_13) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_66) -> [0: bb53, otherwise: bb62];
    }

    bb64: {
        goto -> bb42;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::parallel_stats::{closure#0}(_1: {closure@src/cmd/stats.rs:145:26: 145:33}) -> () {
    debug args => (_1.0: cmd::stats::Args);
    debug i => (_1.1: usize);
    debug chunk_size => (_1.2: usize);
    debug send => (_1.3: chan::Sender<std::vec::Vec<cmd::stats::Stats>>);
    debug sel => (_1.4: select::Selection);
    let mut _0: ();
    let mut _2: index::Indexed<std::fs::File, std::fs::File>;
    let mut _3: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _4: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _5: &config::Config;
    let _6: config::Config;
    let mut _7: &cmd::stats::Args;
    let _8: ();
    let mut _9: std::result::Result<(), CliError>;
    let mut _10: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _11: u64;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: (usize, bool);
    let mut _17: csv::ByteRecordsIter<'_, std::fs::File>;
    let mut _18: &mut csv::Reader<std::fs::File>;
    let mut _19: &mut index::Indexed<std::fs::File, std::fs::File>;
    let mut _20: usize;
    let _21: ();
    let mut _22: &chan::Sender<std::vec::Vec<cmd::stats::Stats>>;
    let mut _23: std::vec::Vec<cmd::stats::Stats>;
    let mut _24: std::result::Result<std::vec::Vec<cmd::stats::Stats>, CliError>;
    let mut _25: &cmd::stats::Args;
    let _26: &select::Selection;
    scope 1 {
        debug idx => _2;
        let _16: std::iter::Take<csv::ByteRecordsIter<'_, std::fs::File>>;
        scope 2 {
            debug it => _16;
        }
    }

    bb0: {
        _7 = &(_1.0: cmd::stats::Args);
        _6 = cmd::stats::Args::rconfig(move _7) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _5 = &_6;
        _4 = Config::indexed(move _5) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _3 = Result::<std::option::Option<Indexed<File, File>>, CliError>::unwrap(move _4) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _2 = std::option::Option::<Indexed<File, File>>::unwrap(move _3) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        drop(_6) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _10 = &mut _2;
        _13 = (_1.1: usize);
        _14 = (_1.2: usize);
        _15 = CheckedMul(_13, _14);
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, move _14) -> [success: bb6, unwind: bb17];
    }

    bb6: {
        _12 = move (_15.0: usize);
        _11 = move _12 as u64 (IntToInt);
        _9 = Indexed::<File, File>::seek(move _10, move _11) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _8 = Result::<(), CliError>::unwrap(move _9) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _19 = &mut _2;
        _18 = <Indexed<File, File> as DerefMut>::deref_mut(move _19) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _17 = Reader::<File>::byte_records(_18) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _20 = (_1.2: usize);
        _16 = <ByteRecordsIter<'_, File> as Iterator>::take(move _17, move _20) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _22 = &(_1.3: chan::Sender<std::vec::Vec<cmd::stats::Stats>>);
        _25 = &(_1.0: cmd::stats::Args);
        _26 = &(_1.4: select::Selection);
        _24 = cmd::stats::Args::compute::<std::iter::Take<ByteRecordsIter<'_, File>>>(move _25, _26, move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _23 = Result::<Vec<Stats>, CliError>::unwrap(move _24) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _21 = chan::Sender::<Vec<Stats>>::send(move _22, move _23) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_1) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::stats_to_records(_1: &cmd::stats::Args, _2: Vec<Stats>) -> Vec<StringRecord> {
    debug self => _1;
    debug stats => _2;
    let mut _0: std::vec::Vec<csv::StringRecord>;
    let mut _3: std::vec::Vec<csv::StringRecord>;
    let mut _4: std::iter::Take<std::iter::Repeat<csv::StringRecord>>;
    let mut _5: std::iter::Repeat<csv::StringRecord>;
    let mut _6: csv::StringRecord;
    let mut _7: usize;
    let mut _8: &std::vec::Vec<cmd::stats::Stats>;
    let mut _10: usize;
    let mut _12: std::vec::IntoIter<cmd::stats::Stats>;
    let mut _13: std::vec::IntoIter<cmd::stats::Stats>;
    let mut _14: std::vec::Vec<cmd::stats::Stats>;
    let mut _16: std::option::Option<cmd::stats::Stats>;
    let mut _17: &mut std::vec::IntoIter<cmd::stats::Stats>;
    let mut _18: isize;
    let mut _22: (chan::Sender<csv::StringRecord>, chan::Receiver<csv::StringRecord>);
    let _23: ();
    let mut _24: &mut std::vec::Vec<chan::Receiver<csv::StringRecord>>;
    let mut _25: chan::Receiver<csv::StringRecord>;
    let _26: ();
    let mut _27: &threadpool::ThreadPool;
    let mut _28: {closure@src/cmd/stats.rs:165:26: 165:33};
    let mut _29: std::iter::Enumerate<std::vec::IntoIter<chan::Receiver<csv::StringRecord>>>;
    let mut _30: std::iter::Enumerate<std::vec::IntoIter<chan::Receiver<csv::StringRecord>>>;
    let mut _31: std::vec::IntoIter<chan::Receiver<csv::StringRecord>>;
    let mut _32: std::vec::Vec<chan::Receiver<csv::StringRecord>>;
    let mut _34: std::option::Option<(usize, chan::Receiver<csv::StringRecord>)>;
    let mut _35: &mut std::iter::Enumerate<std::vec::IntoIter<chan::Receiver<csv::StringRecord>>>;
    let mut _36: isize;
    let mut _39: csv::StringRecord;
    let mut _40: std::option::Option<csv::StringRecord>;
    let mut _41: &chan::Receiver<csv::StringRecord>;
    let mut _42: &mut csv::StringRecord;
    let mut _43: &mut std::vec::Vec<csv::StringRecord>;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    scope 1 {
        debug records => _3;
        let _9: threadpool::ThreadPool;
        scope 2 {
            debug pool => _9;
            let mut _11: std::vec::Vec<chan::Receiver<csv::StringRecord>>;
            scope 3 {
                debug results => _11;
                let mut _15: std::vec::IntoIter<cmd::stats::Stats>;
                let mut _33: std::iter::Enumerate<std::vec::IntoIter<chan::Receiver<csv::StringRecord>>>;
                scope 4 {
                    debug iter => _15;
                    let mut _19: cmd::stats::Stats;
                    scope 5 {
                        debug stat => _19;
                        let _20: chan::Sender<csv::StringRecord>;
                        let _21: chan::Receiver<csv::StringRecord>;
                        scope 6 {
                            debug send => _20;
                            debug recv => _21;
                        }
                    }
                }
                scope 7 {
                    debug iter => _33;
                    let _37: usize;
                    let _38: chan::Receiver<csv::StringRecord>;
                    scope 8 {
                        debug i => _37;
                        debug recv => _38;
                    }
                }
            }
        }
    }

    bb0: {
        _51 = const false;
        _49 = const false;
        _50 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _51 = const true;
        _6 = StringRecord::new() -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _5 = std::iter::repeat::<StringRecord>(move _6) -> [return: bb2, unwind: bb54];
    }

    bb2: {
        _50 = const true;
        _8 = &_2;
        _7 = Vec::<Stats>::len(move _8) -> [return: bb3, unwind: bb52];
    }

    bb3: {
        _50 = const false;
        _4 = <std::iter::Repeat<StringRecord> as Iterator>::take(move _5, move _7) -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _50 = const false;
        _3 = <std::iter::Take<std::iter::Repeat<StringRecord>> as Iterator>::collect::<Vec<StringRecord>>(move _4) -> [return: bb5, unwind: bb54];
    }

    bb5: {
        _49 = const true;
        _10 = cmd::stats::Args::njobs(_1) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        _9 = ThreadPool::new(move _10) -> [return: bb7, unwind: bb50];
    }

    bb7: {
        _11 = Vec::<chan::Receiver<StringRecord>>::new() -> [return: bb8, unwind: bb38];
    }

    bb8: {
        _48 = const true;
        _51 = const false;
        _14 = move _2;
        _13 = <Vec<Stats> as IntoIterator>::into_iter(move _14) -> [return: bb9, unwind: bb48];
    }

    bb9: {
        _12 = <std::vec::IntoIter<Stats> as IntoIterator>::into_iter(move _13) -> [return: bb10, unwind: bb48];
    }

    bb10: {
        _15 = move _12;
        goto -> bb11;
    }

    bb11: {
        _17 = &mut _15;
        _16 = <std::vec::IntoIter<Stats> as Iterator>::next(_17) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb15, 1: bb13, otherwise: bb14];
    }

    bb13: {
        _47 = const true;
        _19 = move ((_16 as Some).0: cmd::stats::Stats);
        _22 = sync::<StringRecord>(const 0_usize) -> [return: bb16, unwind: bb46];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        drop(_15) -> [return: bb19, unwind: bb48];
    }

    bb16: {
        _46 = const true;
        _20 = move (_22.0: chan::Sender<csv::StringRecord>);
        _45 = const true;
        _21 = move (_22.1: chan::Receiver<csv::StringRecord>);
        _24 = &mut _11;
        _45 = const false;
        _25 = move _21;
        _23 = Vec::<chan::Receiver<StringRecord>>::push(move _24, move _25) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _27 = &_9;
        _46 = const false;
        _47 = const false;
        _28 = {closure@src/cmd/stats.rs:165:26: 165:33} { send: move _20, stat: move _19 };
        _26 = ThreadPool::execute::<{closure@src/cmd/stats.rs:165:26: 165:33}>(move _27, move _28) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        _45 = const false;
        _46 = const false;
        _47 = const false;
        goto -> bb11;
    }

    bb19: {
        _48 = const false;
        _32 = move _11;
        _31 = <Vec<chan::Receiver<StringRecord>> as IntoIterator>::into_iter(move _32) -> [return: bb20, unwind: bb48];
    }

    bb20: {
        _30 = <std::vec::IntoIter<chan::Receiver<StringRecord>> as Iterator>::enumerate(move _31) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        _29 = <Enumerate<std::vec::IntoIter<chan::Receiver<StringRecord>>> as IntoIterator>::into_iter(move _30) -> [return: bb22, unwind: bb48];
    }

    bb22: {
        _33 = move _29;
        goto -> bb23;
    }

    bb23: {
        _35 = &mut _33;
        _34 = <Enumerate<std::vec::IntoIter<chan::Receiver<StringRecord>>> as Iterator>::next(_35) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb26, 1: bb25, otherwise: bb14];
    }

    bb25: {
        _37 = (((_34 as Some).0: (usize, chan::Receiver<csv::StringRecord>)).0: usize);
        _38 = move (((_34 as Some).0: (usize, chan::Receiver<csv::StringRecord>)).1: chan::Receiver<csv::StringRecord>);
        _41 = &_38;
        _40 = chan::Receiver::<StringRecord>::recv(move _41) -> [return: bb27, unwind: bb34];
    }

    bb26: {
        drop(_33) -> [return: bb32, unwind: bb48];
    }

    bb27: {
        _39 = std::option::Option::<StringRecord>::unwrap(move _40) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _44 = const true;
        _43 = &mut _3;
        _42 = <Vec<StringRecord> as IndexMut<usize>>::index_mut(move _43, _37) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        drop((*_42)) -> [return: bb30, unwind: bb31];
    }

    bb30: {
        _44 = const false;
        (*_42) = move _39;
        _44 = const false;
        drop(_38) -> [return: bb23, unwind: bb35];
    }

    bb31 (cleanup): {
        _44 = const false;
        (*_42) = move _39;
        goto -> bb41;
    }

    bb32: {
        _49 = const false;
        _0 = move _3;
        _48 = const false;
        drop(_9) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _49 = const false;
        return;
    }

    bb34 (cleanup): {
        drop(_38) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_33) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_46) -> [0: bb46, otherwise: bb44];
    }

    bb37 (cleanup): {
        drop(_15) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_9) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40 (cleanup): {
        drop(_39) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_44) -> [0: bb34, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_21) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_45) -> [0: bb36, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_20) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_19) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_47) -> [0: bb37, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_48) -> [0: bb38, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_3) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_49) -> [0: bb54, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_5) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_50) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_51) -> [0: bb39, otherwise: bb53];
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::stats_to_records::{closure#0}(_1: {closure@src/cmd/stats.rs:165:26: 165:33}) -> () {
    debug send => (_1.0: chan::Sender<csv::StringRecord>);
    debug stat => (_1.1: cmd::stats::Stats);
    let mut _0: ();
    let _2: ();
    let mut _3: &chan::Sender<csv::StringRecord>;
    let mut _4: csv::StringRecord;
    let mut _5: &mut cmd::stats::Stats;

    bb0: {
        _3 = &(_1.0: chan::Sender<csv::StringRecord>);
        _5 = &mut (_1.1: cmd::stats::Stats);
        _4 = Stats::to_record(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _2 = chan::Sender::<StringRecord>::send(move _3, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::compute(_1: &cmd::stats::Args, _2: &Selection, _3: I) -> Result<Vec<Stats>, CliError> {
    debug self => _1;
    debug sel => _2;
    debug it => _3;
    let mut _0: std::result::Result<std::vec::Vec<cmd::stats::Stats>, CliError>;
    let mut _4: std::vec::Vec<cmd::stats::Stats>;
    let mut _5: usize;
    let mut _6: I;
    let mut _7: I;
    let mut _9: std::option::Option<std::result::Result<csv::ByteRecord, csv::Error>>;
    let mut _10: &mut I;
    let mut _11: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::ByteRecord>;
    let mut _15: isize;
    let mut _18: std::iter::Enumerate<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>;
    let mut _19: std::iter::Enumerate<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>;
    let mut _20: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let _21: &csv::ByteRecord;
    let mut _23: std::option::Option<(usize, &[u8])>;
    let mut _24: &mut std::iter::Enumerate<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>;
    let mut _25: isize;
    let _28: ();
    let mut _29: &mut cmd::stats::Stats;
    let mut _30: &mut std::vec::Vec<cmd::stats::Stats>;
    let mut _31: std::vec::Vec<cmd::stats::Stats>;
    let mut _32: bool;
    scope 1 {
        debug stats => _4;
        let mut _8: I;
        scope 2 {
            debug iter => _8;
            let _12: std::result::Result<csv::ByteRecord, csv::Error>;
            scope 3 {
                debug row => _12;
                let _13: csv::ByteRecord;
                let _16: std::result::Result<std::convert::Infallible, csv::Error>;
                let _17: csv::ByteRecord;
                scope 4 {
                    debug row => _13;
                    let mut _22: std::iter::Enumerate<std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>;
                    scope 9 {
                        debug iter => _22;
                        let _26: usize;
                        let _27: &[u8];
                        scope 10 {
                            debug i => _26;
                            debug field => _27;
                        }
                    }
                }
                scope 5 {
                    debug residual => _16;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _17;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        _32 = const false;
        _32 = const true;
        _5 = Selection::len(_2) -> [return: bb1, unwind: bb29];
    }

    bb1: {
        _4 = cmd::stats::Args::new_stats(_1, move _5) -> [return: bb2, unwind: bb29];
    }

    bb2: {
        _32 = const false;
        _7 = move _3;
        _6 = <I as IntoIterator>::into_iter(move _7) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _8 = move _6;
        goto -> bb4;
    }

    bb4: {
        _10 = &mut _8;
        _9 = <I as Iterator>::next(_10) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _12 = move ((_9 as Some).0: std::result::Result<csv::ByteRecord, csv::Error>);
        _14 = <Result<ByteRecord, csv::Error> as Try>::branch(move _12) -> [return: bb9, unwind: bb25];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_8) -> [return: bb21, unwind: bb26];
    }

    bb9: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb7];
    }

    bb10: {
        _17 = move ((_14 as Continue).0: csv::ByteRecord);
        _13 = move _17;
        _21 = &_13;
        _20 = Selection::select(_2, _21) -> [return: bb13, unwind: bb24];
    }

    bb11: {
        _16 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Vec<Stats>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _16) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        drop(_8) -> [return: bb22, unwind: bb26];
    }

    bb13: {
        _19 = <Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> as Iterator>::enumerate(move _20) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = <Enumerate<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>> as IntoIterator>::into_iter(move _19) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _22 = move _18;
        goto -> bb16;
    }

    bb16: {
        _24 = &mut _22;
        _23 = <Enumerate<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>> as Iterator>::next(_24) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb19, 1: bb18, otherwise: bb7];
    }

    bb18: {
        _26 = (((_23 as Some).0: (usize, &[u8])).0: usize);
        _27 = (((_23 as Some).0: (usize, &[u8])).1: &[u8]);
        _30 = &mut _4;
        _29 = <Vec<Stats> as IndexMut<usize>>::index_mut(move _30, _26) -> [return: bb20, unwind: bb24];
    }

    bb19: {
        drop(_13) -> [return: bb4, unwind: bb25];
    }

    bb20: {
        _28 = Stats::add(_29, _27) -> [return: bb30, unwind: bb24];
    }

    bb21: {
        _31 = move _4;
        _0 = Result::<Vec<Stats>, CliError>::Ok(move _31);
        goto -> bb23;
    }

    bb22: {
        drop(_4) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_4) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_32) -> [0: bb27, otherwise: bb28];
    }

    bb30: {
        goto -> bb16;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::sel_headers(_1: &cmd::stats::Args, _2: &mut Reader<R>) -> Result<(ByteRecord, Selection), CliError> {
    debug self => _1;
    debug rdr => _2;
    let mut _0: std::result::Result<(csv::ByteRecord, select::Selection), CliError>;
    let _3: csv::ByteRecord;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _5: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, csv::Error>;
    let _8: &csv::ByteRecord;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::Selection>;
    let mut _11: std::result::Result<select::Selection, std::string::String>;
    let mut _12: &config::Config;
    let _13: config::Config;
    let _14: &csv::ByteRecord;
    let mut _15: isize;
    let mut _18: (csv::ByteRecord, select::Selection);
    let mut _19: csv::ByteRecord;
    let mut _20: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let mut _21: &select::Selection;
    let _22: &csv::ByteRecord;
    let mut _23: select::Selection;
    scope 1 {
        debug headers => _3;
        let _9: select::Selection;
        let _16: std::result::Result<std::convert::Infallible, std::string::String>;
        let _17: select::Selection;
        scope 6 {
            debug sel => _9;
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _17;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = Reader::<R>::byte_headers(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: &csv::ByteRecord);
        _3 = <ByteRecord as Clone>::clone(_8) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(ByteRecord, Selection), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _7) -> [return: bb17, unwind continue];
    }

    bb6: {
        _13 = cmd::stats::Args::rconfig(_1) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _12 = &_13;
        _14 = &_3;
        _11 = Config::selection(move _12, _14) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _10 = <Result<Selection, std::string::String> as Try>::branch(move _11) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _17 = move ((_10 as Continue).0: select::Selection);
        _9 = move _17;
        drop(_13) -> [return: bb13, unwind: bb18];
    }

    bb11: {
        _16 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<(ByteRecord, Selection), CliError> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _16) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        drop(_13) -> [return: bb16, unwind: bb20];
    }

    bb13: {
        _21 = &_9;
        _22 = &_3;
        _20 = Selection::select(move _21, _22) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _19 = <ByteRecord as FromIterator<&[u8]>>::from_iter::<Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>>(move _20) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _23 = move _9;
        _18 = (move _19, move _23);
        _0 = Result::<(ByteRecord, Selection), CliError>::Ok(move _18);
        drop(_3) -> [return: bb17, unwind continue];
    }

    bb16: {
        drop(_3) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_13) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::rconfig(_1: &cmd::stats::Args) -> Config {
    debug self => _1;
    let mut _0: config::Config;
    let mut _2: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: std::option::Option<config::Delimiter>;
    let mut _7: bool;
    let mut _8: select::SelectColumns;
    let mut _9: &select::SelectColumns;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _5 = &((*_1).0: std::option::Option<std::string::String>);
        _4 = Config::new(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ((*_1).10: std::option::Option<config::Delimiter>);
        _3 = Config::delimiter(move _4, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = ((*_1).9: bool);
        _2 = Config::no_headers(move _3, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = const true;
        _9 = &((*_1).1: select::SelectColumns);
        _8 = <SelectColumns as Clone>::clone(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = const false;
        _0 = Config::select(move _2, move _8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7];
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::njobs(_1: &cmd::stats::Args) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).7: usize);
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = num_cpus() -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = ((*_1).7: usize);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::new_stats(_1: &cmd::stats::Args, _2: usize) -> Vec<Stats> {
    debug self => _1;
    debug record_len => _2;
    let mut _0: std::vec::Vec<cmd::stats::Stats>;
    let mut _3: std::iter::Take<std::iter::Repeat<cmd::stats::Stats>>;
    let mut _4: std::iter::Repeat<cmd::stats::Stats>;
    let mut _5: cmd::stats::Stats;
    let mut _6: cmd::stats::WhichStats;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;

    bb0: {
        _7 = ((*_1).6: bool);
        _9 = ((*_1).4: bool);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const true;
        goto -> bb3;
    }

    bb2: {
        _8 = ((*_1).2: bool);
        goto -> bb3;
    }

    bb3: {
        _11 = ((*_1).5: bool);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = const true;
        goto -> bb6;
    }

    bb5: {
        _10 = ((*_1).2: bool);
        goto -> bb6;
    }

    bb6: {
        _13 = ((*_1).3: bool);
        switchInt(move _13) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _12 = const true;
        goto -> bb9;
    }

    bb8: {
        _12 = ((*_1).2: bool);
        goto -> bb9;
    }

    bb9: {
        _6 = WhichStats { include_nulls: move _7, sum: const true, range: const true, dist: const true, cardinality: move _8, median: move _10, mode: move _12 };
        _5 = Stats::new(move _6) -> [return: bb10, unwind continue];
    }

    bb10: {
        _4 = std::iter::repeat::<Stats>(move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        _3 = <std::iter::Repeat<Stats> as Iterator>::take(move _4, _2) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = <std::iter::Take<std::iter::Repeat<Stats>> as Iterator>::collect::<Vec<Stats>>(move _3) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:117:1: 117:10>::stat_headers(_1: &cmd::stats::Args) -> StringRecord {
    debug self => _1;
    let mut _0: csv::StringRecord;
    let mut _2: std::vec::Vec<&str>;
    let mut _3: std::boxed::Box<[&str]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[&str; 9]>;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let mut _17: bool;
    let _18: ();
    let mut _19: &mut std::vec::Vec<&str>;
    let _20: &str;
    let mut _21: bool;
    let _22: ();
    let mut _23: &mut std::vec::Vec<&str>;
    let _24: &str;
    let mut _25: bool;
    let _26: ();
    let mut _27: &mut std::vec::Vec<&str>;
    let _28: &str;
    let mut _29: std::vec::Vec<&str>;
    let mut _30: bool;
    let mut _31: *const [&str; 9];
    let mut _32: *const ();
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    scope 1 {
        debug fields => _2;
        let _16: bool;
        scope 3 {
            debug all => _16;
        }
    }
    scope 2 {
    }

    bb0: {
        _30 = const false;
        _4 = SizeOf([&str; 9]);
        _5 = AlignOf([&str; 9]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [&str; 9]);
        _8 = const "type";
        _9 = const "sum";
        _10 = const "min";
        _11 = const "max";
        _12 = const "min_length";
        _13 = const "max_length";
        _14 = const "mean";
        _15 = const "stddev";
        _31 = (((_7.0: std::ptr::Unique<[&str; 9]>).0: std::ptr::NonNull<[&str; 9]>).0: *const [&str; 9]);
        _32 = _31 as *const () (PtrToPtr);
        _33 = _32 as usize (Transmute);
        _34 = AlignOf([&str; 9]);
        _35 = Sub(_34, const 1_usize);
        _36 = BitAnd(_33, _35);
        _37 = Eq(_36, const 0_usize);
        assert(_37, "misaligned pointer dereference: address must be a multiple of {} but is {}", _34, _33) -> [success: bb16, unwind unreachable];
    }

    bb2: {
        _30 = const true;
        _16 = ((*_1).2: bool);
        _17 = ((*_1).5: bool);
        switchInt(move _17) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt(_16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = &mut _2;
        _20 = const "median";
        _18 = Vec::<&str>::push(move _19, _20) -> [return: bb17, unwind: bb15];
    }

    bb5: {
        _21 = ((*_1).3: bool);
        switchInt(move _21) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt(_16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _23 = &mut _2;
        _24 = const "mode";
        _22 = Vec::<&str>::push(move _23, _24) -> [return: bb18, unwind: bb15];
    }

    bb8: {
        _25 = ((*_1).4: bool);
        switchInt(move _25) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt(_16) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _27 = &mut _2;
        _28 = const "cardinality";
        _26 = Vec::<&str>::push(move _27, _28) -> [return: bb19, unwind: bb15];
    }

    bb11: {
        _30 = const false;
        _29 = move _2;
        _0 = <StringRecord as From<Vec<&str>>>::from(move _29) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _30 = const false;
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_30) -> [0: bb13, otherwise: bb14];
    }

    bb16: {
        (*_31) = [const "field", _8, _9, _10, _11, _12, _13, _14, _15];
        _3 = move _7 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _2 = std::slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }

    bb17: {
        goto -> bb5;
    }

    bb18: {
        goto -> bb8;
    }

    bb19: {
        goto -> bb11;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:230:10: 230:15>::clone(_1: &WhichStats) -> WhichStats {
    debug self => _1;
    let mut _0: cmd::stats::WhichStats;
    let mut _2: bool;
    let _3: &bool;
    let mut _4: bool;
    let _5: &bool;
    let mut _6: bool;
    let _7: &bool;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: bool;
    let _11: &bool;
    let mut _12: bool;
    let _13: &bool;
    let mut _14: bool;
    let _15: &bool;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _5 = &((*_1).1: bool);
        _4 = (*_5);
        _7 = &((*_1).2: bool);
        _6 = (*_7);
        _9 = &((*_1).3: bool);
        _8 = (*_9);
        _11 = &((*_1).4: bool);
        _10 = (*_11);
        _13 = &((*_1).5: bool);
        _12 = (*_13);
        _15 = &((*_1).6: bool);
        _14 = (*_15);
        _0 = WhichStats { include_nulls: move _2, sum: move _4, range: move _6, dist: move _8, cardinality: move _10, median: move _12, mode: move _14 };
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:230:17: 230:22>::fmt(_1: &WhichStats, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 7];
    let _5: [&dyn std::fmt::Debug; 7];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &bool;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bool;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &bool;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &bool;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &bool;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &bool;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&bool;
    let _20: &bool;
    let _21: &str;
    let mut _22: &[&str];
    let mut _23: &[&str; 7];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _23 = const _;
        _7 = &((*_1).0: bool);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: bool);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: bool);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: bool);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: bool);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: bool);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _20 = &((*_1).6: bool);
        _19 = &_20;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _21 = const "WhichStats";
        _22 = _23 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _21, move _22, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in cmd::stats::<impl at src/cmd/stats.rs:230:17: 230:22>::fmt: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;

    bb0: {
        _3 = const "sum";
        _2 = &(*_3);
        _5 = const "range";
        _4 = &(*_5);
        _7 = const "dist";
        _6 = &(*_7);
        _9 = const "cardinality";
        _8 = &(*_9);
        _11 = const "median";
        _10 = &(*_11);
        _13 = const "mode";
        _12 = &(*_13);
        _1 = [const "include_nulls", move _2, move _4, move _6, move _8, move _10, move _12];
        _0 = &_1;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:230:24: 230:26>::assert_receiver_is_total_eq(_1: &WhichStats) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:230:28: 230:37>::eq(_1: &WhichStats, _2: &WhichStats) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;

    bb0: {
        _4 = ((*_1).0: bool);
        _5 = ((*_2).0: bool);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        _7 = ((*_1).1: bool);
        _8 = ((*_2).1: bool);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        _10 = ((*_1).2: bool);
        _11 = ((*_2).2: bool);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb7, otherwise: bb3];
    }

    bb3: {
        _13 = ((*_1).3: bool);
        _14 = ((*_2).3: bool);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _16 = ((*_1).4: bool);
        _17 = ((*_2).4: bool);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _19 = ((*_1).5: bool);
        _20 = ((*_2).5: bool);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _21 = ((*_1).6: bool);
        _22 = ((*_2).6: bool);
        _0 = Eq(move _21, move _22);
        goto -> bb8;
    }

    bb7: {
        _0 = const false;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:241:1: 241:28>::merge(_1: &mut WhichStats, _2: WhichStats) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: (&cmd::stats::WhichStats, &cmd::stats::WhichStats);
    let mut _4: &cmd::stats::WhichStats;
    let mut _5: &cmd::stats::WhichStats;
    let _6: &cmd::stats::WhichStats;
    let _7: &cmd::stats::WhichStats;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }

    bb0: {
        _4 = &(*_1);
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &cmd::stats::WhichStats);
        _7 = (_3.1: &cmd::stats::WhichStats);
        _8 = <WhichStats as PartialEq>::eq(_6, _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        return;
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = std::option::Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<WhichStats, WhichStats>(move _9, _6, _7, move _11) -> unwind continue;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:247:10: 247:15>::clone(_1: &Stats) -> Stats {
    debug self => _1;
    let mut _0: cmd::stats::Stats;
    let mut _2: cmd::stats::FieldType;
    let _3: &cmd::stats::FieldType;
    let mut _4: std::option::Option<cmd::stats::TypedSum>;
    let _5: &std::option::Option<cmd::stats::TypedSum>;
    let mut _6: std::option::Option<cmd::stats::TypedMinMax>;
    let _7: &std::option::Option<cmd::stats::TypedMinMax>;
    let mut _8: std::option::Option<stats::OnlineStats>;
    let _9: &std::option::Option<stats::OnlineStats>;
    let mut _10: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let _11: &std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _12: std::option::Option<stats::Unsorted<f64>>;
    let _13: &std::option::Option<stats::Unsorted<f64>>;
    let mut _14: cmd::stats::WhichStats;
    let _15: &cmd::stats::WhichStats;

    bb0: {
        _3 = &((*_1).0: cmd::stats::FieldType);
        _2 = <FieldType as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::option::Option<cmd::stats::TypedSum>);
        _4 = <std::option::Option<TypedSum> as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &((*_1).2: std::option::Option<cmd::stats::TypedMinMax>);
        _6 = <std::option::Option<TypedMinMax> as Clone>::clone(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &((*_1).3: std::option::Option<stats::OnlineStats>);
        _8 = <std::option::Option<OnlineStats> as Clone>::clone(_9) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _11 = &((*_1).4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _10 = <std::option::Option<Unsorted<Vec<u8>>> as Clone>::clone(_11) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _13 = &((*_1).5: std::option::Option<stats::Unsorted<f64>>);
        _12 = <std::option::Option<Unsorted<f64>> as Clone>::clone(_13) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _15 = &((*_1).6: cmd::stats::WhichStats);
        _14 = <WhichStats as Clone>::clone(_15) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = Stats { typ: move _2, sum: move _4, minmax: move _6, online: move _8, mode: move _10, median: move _12, which: move _14 };
        return;
    }

    bb8 (cleanup): {
        drop(_12) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_10) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::new(_1: WhichStats) -> Stats {
    debug which => _1;
    let mut _0: cmd::stats::Stats;
    let mut _2: std::option::Option<cmd::stats::TypedSum>;
    let mut _3: std::option::Option<cmd::stats::TypedMinMax>;
    let mut _4: std::option::Option<stats::OnlineStats>;
    let mut _5: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _6: std::option::Option<stats::Unsorted<f64>>;
    let mut _7: (std::option::Option<cmd::stats::TypedSum>, std::option::Option<cmd::stats::TypedMinMax>, std::option::Option<stats::OnlineStats>, std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>, std::option::Option<stats::Unsorted<f64>>);
    let mut _8: std::option::Option<cmd::stats::TypedSum>;
    let mut _9: std::option::Option<cmd::stats::TypedMinMax>;
    let mut _10: std::option::Option<stats::OnlineStats>;
    let mut _11: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _12: std::option::Option<stats::Unsorted<f64>>;
    let mut _13: bool;
    let mut _14: std::option::Option<cmd::stats::TypedSum>;
    let mut _15: cmd::stats::TypedSum;
    let mut _16: bool;
    let mut _17: std::option::Option<cmd::stats::TypedMinMax>;
    let mut _18: cmd::stats::TypedMinMax;
    let mut _19: bool;
    let mut _20: std::option::Option<stats::OnlineStats>;
    let mut _21: stats::OnlineStats;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _25: stats::Unsorted<std::vec::Vec<u8>>;
    let mut _26: bool;
    let mut _27: std::option::Option<stats::Unsorted<f64>>;
    let mut _28: stats::Unsorted<f64>;
    let mut _29: cmd::stats::FieldType;
    let mut _30: std::option::Option<cmd::stats::TypedSum>;
    let mut _31: std::option::Option<cmd::stats::TypedMinMax>;
    let mut _32: std::option::Option<stats::OnlineStats>;
    let mut _33: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _34: std::option::Option<stats::Unsorted<f64>>;
    scope 1 {
        debug sum => _2;
        debug minmax => _3;
        debug online => _4;
        debug mode => _5;
        debug median => _6;
    }

    bb0: {
        _8 = std::option::Option::<TypedSum>::None;
        _9 = std::option::Option::<TypedMinMax>::None;
        _10 = std::option::Option::<OnlineStats>::None;
        _11 = std::option::Option::<Unsorted<Vec<u8>>>::None;
        _12 = std::option::Option::<Unsorted<f64>>::None;
        _7 = (move _8, move _9, move _10, move _11, move _12);
        _2 = move (_7.0: std::option::Option<cmd::stats::TypedSum>);
        _3 = move (_7.1: std::option::Option<cmd::stats::TypedMinMax>);
        _4 = (_7.2: std::option::Option<stats::OnlineStats>);
        _5 = move (_7.3: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _6 = move (_7.4: std::option::Option<stats::Unsorted<f64>>);
        _13 = (_1.1: bool);
        switchInt(move _13) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _15 = <TypedSum as Default>::default() -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _14 = std::option::Option::<TypedSum>::Some(move _15);
        _2 = move _14;
        goto -> bb3;
    }

    bb3: {
        _16 = (_1.2: bool);
        switchInt(move _16) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _18 = <TypedMinMax as Default>::default() -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _17 = std::option::Option::<TypedMinMax>::Some(move _18);
        drop(_3) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _3 = move _17;
        goto -> bb8;
    }

    bb7 (cleanup): {
        _3 = move _17;
        goto -> bb24;
    }

    bb8: {
        _19 = (_1.3: bool);
        switchInt(move _19) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        _21 = <OnlineStats as Default>::default() -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _20 = std::option::Option::<OnlineStats>::Some(move _21);
        _4 = move _20;
        goto -> bb11;
    }

    bb11: {
        _22 = (_1.6: bool);
        switchInt(move _22) -> [0: bb12, otherwise: bb13];
    }

    bb12: {
        _23 = (_1.4: bool);
        switchInt(move _23) -> [0: bb17, otherwise: bb13];
    }

    bb13: {
        _25 = <Unsorted<Vec<u8>> as Default>::default() -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _24 = std::option::Option::<Unsorted<Vec<u8>>>::Some(move _25);
        drop(_5) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _5 = move _24;
        goto -> bb17;
    }

    bb16 (cleanup): {
        _5 = move _24;
        goto -> bb24;
    }

    bb17: {
        _26 = (_1.5: bool);
        switchInt(move _26) -> [0: bb22, otherwise: bb18];
    }

    bb18: {
        _28 = <Unsorted<f64> as Default>::default() -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _27 = std::option::Option::<Unsorted<f64>>::Some(move _28);
        drop(_6) -> [return: bb20, unwind: bb21];
    }

    bb20: {
        _6 = move _27;
        goto -> bb22;
    }

    bb21 (cleanup): {
        _6 = move _27;
        goto -> bb24;
    }

    bb22: {
        _29 = <FieldType as Default>::default() -> [return: bb23, unwind: bb24];
    }

    bb23: {
        _30 = move _2;
        _31 = move _3;
        _32 = _4;
        _33 = move _5;
        _34 = move _6;
        _0 = Stats { typ: move _29, sum: move _30, minmax: move _31, online: move _32, mode: move _33, median: move _34, which: move _1 };
        return;
    }

    bb24 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add(_1: &mut Stats, _2: &[u8]) -> () {
    debug self => _1;
    debug sample => _2;
    let mut _0: ();
    let _3: cmd::stats::FieldType;
    let mut _4: &[u8];
    let _5: ();
    let mut _6: &mut cmd::stats::FieldType;
    let mut _7: cmd::stats::FieldType;
    let _9: std::option::Option<()>;
    let mut _10: std::option::Option<&mut cmd::stats::TypedSum>;
    let mut _11: &mut std::option::Option<cmd::stats::TypedSum>;
    let mut _12: {closure@src/cmd/stats.rs:283:31: 283:34};
    let mut _13: &cmd::stats::FieldType;
    let mut _14: &&[u8];
    let _15: std::option::Option<()>;
    let mut _16: std::option::Option<&mut cmd::stats::TypedMinMax>;
    let mut _17: &mut std::option::Option<cmd::stats::TypedMinMax>;
    let mut _18: {closure@src/cmd/stats.rs:284:34: 284:37};
    let mut _19: &cmd::stats::FieldType;
    let mut _20: &&[u8];
    let _21: std::option::Option<()>;
    let mut _22: std::option::Option<&mut stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _23: &mut std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _24: {closure@src/cmd/stats.rs:285:32: 285:35};
    let mut _25: &&[u8];
    let mut _26: isize;
    let mut _27: bool;
    let _28: std::option::Option<()>;
    let mut _29: std::option::Option<&mut stats::OnlineStats>;
    let mut _30: &mut std::option::Option<stats::OnlineStats>;
    let mut _31: bool;
    let mut _32: &cmd::stats::FieldType;
    let mut _33: bool;
    let _34: std::option::Option<()>;
    let mut _35: std::option::Option<&mut stats::OnlineStats>;
    let mut _36: &mut std::option::Option<stats::OnlineStats>;
    let mut _38: std::option::Option<f64>;
    let mut _39: &[u8];
    let _40: std::option::Option<()>;
    let mut _41: std::option::Option<&mut stats::Unsorted<f64>>;
    let mut _42: &mut std::option::Option<stats::Unsorted<f64>>;
    let mut _43: {closure@src/cmd/stats.rs:301:46: 301:49};
    let mut _44: &f64;
    let _45: std::option::Option<()>;
    let mut _46: std::option::Option<&mut stats::OnlineStats>;
    let mut _47: &mut std::option::Option<stats::OnlineStats>;
    let mut _48: {closure@src/cmd/stats.rs:302:46: 302:49};
    let mut _49: &f64;
    scope 1 {
        debug sample_type => _3;
        let _8: cmd::stats::FieldType;
        scope 2 {
            debug t => _8;
            let _37: f64;
            scope 3 {
                debug n => _37;
            }
        }
    }

    bb0: {
        _4 = _2;
        _3 = FieldType::from_sample(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut ((*_1).0: cmd::stats::FieldType);
        _7 = _3;
        _5 = <FieldType as Commute>::merge(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = ((*_1).0: cmd::stats::FieldType);
        _11 = &mut ((*_1).1: std::option::Option<cmd::stats::TypedSum>);
        _10 = std::option::Option::<TypedSum>::as_mut(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_8;
        _14 = &_2;
        _12 = {closure@src/cmd/stats.rs:283:31: 283:34} { t: move _13, sample: move _14 };
        _9 = std::option::Option::<&mut TypedSum>::map::<(), {closure@src/cmd/stats.rs:283:31: 283:34}>(move _10, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &mut ((*_1).2: std::option::Option<cmd::stats::TypedMinMax>);
        _16 = std::option::Option::<TypedMinMax>::as_mut(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = &_8;
        _20 = &_2;
        _18 = {closure@src/cmd/stats.rs:284:34: 284:37} { t: move _19, sample: move _20 };
        _15 = std::option::Option::<&mut TypedMinMax>::map::<(), {closure@src/cmd/stats.rs:284:34: 284:37}>(move _16, move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = &mut ((*_1).4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _22 = std::option::Option::<Unsorted<Vec<u8>>>::as_mut(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _25 = &_2;
        _24 = {closure@src/cmd/stats.rs:285:32: 285:35} { sample: move _25 };
        _21 = std::option::Option::<&mut Unsorted<Vec<u8>>>::map::<(), {closure@src/cmd/stats.rs:285:32: 285:35}>(move _22, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = discriminant(((*_1).0: cmd::stats::FieldType));
        switchInt(move _26) -> [0: bb24, 1: bb10, 2: bb24, 3: bb13, 4: bb13, otherwise: bb9];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _27 = (((*_1).6: cmd::stats::WhichStats).0: bool);
        switchInt(move _27) -> [0: bb24, otherwise: bb11];
    }

    bb11: {
        _30 = &mut ((*_1).3: std::option::Option<stats::OnlineStats>);
        _29 = std::option::Option::<OnlineStats>::as_mut(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = std::option::Option::<&mut OnlineStats>::map::<(), {closure@src/cmd/stats.rs:290:46: 290:49}>(move _29, const ZeroSized: {closure@src/cmd/stats.rs:290:46: 290:49}) -> [return: bb24, unwind continue];
    }

    bb13: {
        _32 = &_3;
        _31 = FieldType::is_null(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _31) -> [0: bb18, otherwise: bb15];
    }

    bb15: {
        _33 = (((*_1).6: cmd::stats::WhichStats).0: bool);
        switchInt(move _33) -> [0: bb24, otherwise: bb16];
    }

    bb16: {
        _36 = &mut ((*_1).3: std::option::Option<stats::OnlineStats>);
        _35 = std::option::Option::<OnlineStats>::as_mut(move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        _34 = std::option::Option::<&mut OnlineStats>::map::<(), {closure@src/cmd/stats.rs:297:50: 297:53}>(move _35, const ZeroSized: {closure@src/cmd/stats.rs:297:50: 297:53}) -> [return: bb24, unwind continue];
    }

    bb18: {
        _39 = _2;
        _38 = cmd::stats::from_bytes::<f64>(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        _37 = std::option::Option::<f64>::unwrap(move _38) -> [return: bb20, unwind continue];
    }

    bb20: {
        _42 = &mut ((*_1).5: std::option::Option<stats::Unsorted<f64>>);
        _41 = std::option::Option::<Unsorted<f64>>::as_mut(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        _44 = &_37;
        _43 = {closure@src/cmd/stats.rs:301:46: 301:49} { n: move _44 };
        _40 = std::option::Option::<&mut Unsorted<f64>>::map::<(), {closure@src/cmd/stats.rs:301:46: 301:49}>(move _41, move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        _47 = &mut ((*_1).3: std::option::Option<stats::OnlineStats>);
        _46 = std::option::Option::<OnlineStats>::as_mut(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        _49 = &_37;
        _48 = {closure@src/cmd/stats.rs:302:46: 302:49} { n: move _49 };
        _45 = std::option::Option::<&mut OnlineStats>::map::<(), {closure@src/cmd/stats.rs:302:46: 302:49}>(move _46, move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#0}(_1: {closure@src/cmd/stats.rs:283:31: 283:34}, _2: &mut TypedSum) -> () {
    debug v => _2;
    debug t => (*(_1.0: &cmd::stats::FieldType));
    debug sample => (*(_1.1: &&[u8]));
    let mut _0: ();
    let mut _3: cmd::stats::FieldType;
    let mut _4: &cmd::stats::FieldType;
    let mut _5: &&[u8];
    let mut _6: &[u8];

    bb0: {
        _4 = deref_copy (_1.0: &cmd::stats::FieldType);
        _3 = (*_4);
        _5 = deref_copy (_1.1: &&[u8]);
        _6 = deref_copy (*_5);
        _0 = TypedSum::add(_2, move _3, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#1}(_1: {closure@src/cmd/stats.rs:284:34: 284:37}, _2: &mut TypedMinMax) -> () {
    debug v => _2;
    debug t => (*(_1.0: &cmd::stats::FieldType));
    debug sample => (*(_1.1: &&[u8]));
    let mut _0: ();
    let mut _3: cmd::stats::FieldType;
    let mut _4: &cmd::stats::FieldType;
    let mut _5: &&[u8];
    let mut _6: &[u8];

    bb0: {
        _4 = deref_copy (_1.0: &cmd::stats::FieldType);
        _3 = (*_4);
        _5 = deref_copy (_1.1: &&[u8]);
        _6 = deref_copy (*_5);
        _0 = TypedMinMax::add(_2, move _3, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#2}(_1: {closure@src/cmd/stats.rs:285:32: 285:35}, _2: &mut Unsorted<Vec<u8>>) -> () {
    debug v => _2;
    debug sample => (*(_1.0: &&[u8]));
    let mut _0: ();
    let mut _3: std::vec::Vec<u8>;
    let mut _4: &&[u8];
    let mut _5: &[u8];

    bb0: {
        _4 = deref_copy (_1.0: &&[u8]);
        _5 = deref_copy (*_4);
        _3 = std::slice::<impl [u8]>::to_vec(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Unsorted::<Vec<u8>>::add(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#3}(_1: {closure@src/cmd/stats.rs:290:46: 290:49}, _2: &mut OnlineStats) -> () {
    debug v => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = OnlineStats::add_null(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#4}(_1: {closure@src/cmd/stats.rs:297:50: 297:53}, _2: &mut OnlineStats) -> () {
    debug v => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = OnlineStats::add_null(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#5}(_1: {closure@src/cmd/stats.rs:301:46: 301:49}, _2: &mut Unsorted<f64>) -> () {
    debug v => _2;
    debug n => (*(_1.0: &f64));
    let mut _0: ();
    let _3: ();
    let mut _4: f64;
    let mut _5: &f64;

    bb0: {
        _5 = deref_copy (_1.0: &f64);
        _4 = (*_5);
        _3 = Unsorted::<f64>::add(_2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::add::{closure#6}(_1: {closure@src/cmd/stats.rs:302:46: 302:49}, _2: &mut OnlineStats) -> () {
    debug v => _2;
    debug n => (*(_1.0: &f64));
    let mut _0: ();
    let _3: ();
    let mut _4: f64;
    let mut _5: &f64;

    bb0: {
        _5 = deref_copy (_1.0: &f64);
        _4 = (*_5);
        _3 = OnlineStats::add::<f64>(_2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record(_1: &mut Stats) -> StringRecord {
    debug self => _1;
    let mut _0: csv::StringRecord;
    let _2: cmd::stats::FieldType;
    let _5: ();
    let mut _6: &mut std::vec::Vec<std::string::String>;
    let mut _7: std::string::String;
    let mut _8: &cmd::stats::FieldType;
    let mut _9: std::option::Option<std::string::String>;
    let mut _10: std::option::Option<&cmd::stats::TypedSum>;
    let mut _11: &std::option::Option<cmd::stats::TypedSum>;
    let mut _12: {closure@src/cmd/stats.rs:314:42: 314:47};
    let mut _13: &cmd::stats::FieldType;
    let mut _14: isize;
    let _16: ();
    let mut _17: &mut std::vec::Vec<std::string::String>;
    let _18: ();
    let mut _19: &mut std::vec::Vec<std::string::String>;
    let mut _20: std::string::String;
    let mut _21: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _22: std::option::Option<(std::string::String, std::string::String)>;
    let mut _23: std::option::Option<&cmd::stats::TypedMinMax>;
    let mut _24: &std::option::Option<cmd::stats::TypedMinMax>;
    let mut _25: {closure@src/cmd/stats.rs:318:45: 318:49};
    let mut _26: &cmd::stats::FieldType;
    let mut _27: isize;
    let _29: ();
    let mut _30: &mut std::vec::Vec<std::string::String>;
    let mut _31: std::string::String;
    let _32: ();
    let mut _33: &mut std::vec::Vec<std::string::String>;
    let mut _34: std::string::String;
    let _35: ();
    let mut _36: &mut std::vec::Vec<std::string::String>;
    let mut _37: std::string::String;
    let mut _38: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let _39: ();
    let mut _40: &mut std::vec::Vec<std::string::String>;
    let mut _41: std::string::String;
    let mut _42: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _43: std::option::Option<(std::string::String, std::string::String)>;
    let mut _44: std::option::Option<&cmd::stats::TypedMinMax>;
    let mut _45: &std::option::Option<cmd::stats::TypedMinMax>;
    let mut _46: isize;
    let _48: ();
    let mut _49: &mut std::vec::Vec<std::string::String>;
    let mut _50: std::string::String;
    let _51: ();
    let mut _52: &mut std::vec::Vec<std::string::String>;
    let mut _53: std::string::String;
    let _54: ();
    let mut _55: &mut std::vec::Vec<std::string::String>;
    let mut _56: std::string::String;
    let mut _57: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let _58: ();
    let mut _59: &mut std::vec::Vec<std::string::String>;
    let mut _60: std::string::String;
    let mut _61: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _62: bool;
    let mut _63: &cmd::stats::FieldType;
    let _64: ();
    let mut _65: &mut std::vec::Vec<std::string::String>;
    let mut _66: std::string::String;
    let mut _67: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let _68: ();
    let mut _69: &mut std::vec::Vec<std::string::String>;
    let mut _70: std::string::String;
    let mut _71: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _72: isize;
    let _74: ();
    let mut _75: &mut std::vec::Vec<std::string::String>;
    let mut _76: std::string::String;
    let mut _77: &f64;
    let _78: f64;
    let _79: ();
    let mut _80: &mut std::vec::Vec<std::string::String>;
    let mut _81: std::string::String;
    let mut _82: &f64;
    let _83: f64;
    let _84: ();
    let mut _85: &mut std::vec::Vec<std::string::String>;
    let mut _86: std::string::String;
    let mut _87: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let _88: ();
    let mut _89: &mut std::vec::Vec<std::string::String>;
    let mut _90: std::string::String;
    let mut _91: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _92: std::option::Option<f64>;
    let mut _93: std::option::Option<&mut stats::Unsorted<f64>>;
    let mut _94: &mut std::option::Option<stats::Unsorted<f64>>;
    let mut _95: isize;
    let mut _96: bool;
    let _97: ();
    let mut _98: &mut std::vec::Vec<std::string::String>;
    let mut _99: std::string::String;
    let mut _100: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let _102: ();
    let mut _103: &mut std::vec::Vec<std::string::String>;
    let mut _104: std::string::String;
    let mut _105: &f64;
    let mut _106: std::option::Option<&mut stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _107: &mut std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _108: isize;
    let mut _109: bool;
    let _110: ();
    let mut _111: &mut std::vec::Vec<std::string::String>;
    let mut _112: std::string::String;
    let mut _113: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _114: bool;
    let _115: ();
    let mut _116: &mut std::vec::Vec<std::string::String>;
    let mut _117: std::string::String;
    let mut _118: &{closure@src/cmd/stats.rs:311:21: 311:23};
    let mut _120: bool;
    let _121: ();
    let mut _122: &mut std::vec::Vec<std::string::String>;
    let mut _123: std::string::String;
    let mut _124: std::option::Option<std::vec::Vec<u8>>;
    let mut _125: std::string::String;
    let _126: &str;
    let mut _127: bool;
    let _128: ();
    let mut _129: &mut std::vec::Vec<std::string::String>;
    let mut _130: std::string::String;
    let mut _131: &usize;
    let _132: usize;
    let mut _133: std::vec::Vec<std::string::String>;
    let mut _134: &mut stats::Unsorted<std::vec::Vec<u8>>;
    let mut _135: &mut stats::Unsorted<std::vec::Vec<u8>>;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: bool;
    scope 1 {
        debug typ => _2;
        let mut _3: std::vec::Vec<std::string::String>;
        scope 2 {
            debug pieces => _3;
            let _4: {closure@src/cmd/stats.rs:311:21: 311:23};
            scope 3 {
                debug empty => const ZeroSized: {closure@src/cmd/stats.rs:311:21: 311:23};
                let _15: std::string::String;
                let _28: (std::string::String, std::string::String);
                let _47: (std::string::String, std::string::String);
                let _73: &stats::OnlineStats;
                let _101: f64;
                let _119: &mut &mut stats::Unsorted<std::vec::Vec<u8>>;
                scope 4 {
                    debug sum => _15;
                }
                scope 5 {
                    debug mm => _28;
                }
                scope 6 {
                    debug mm => _47;
                }
                scope 7 {
                    debug v => _73;
                }
                scope 8 {
                    debug v => _101;
                }
                scope 9 {
                    debug v => _119;
                    scope 10 {
                        debug lossy => const ZeroSized: {closure@src/cmd/stats.rs:357:33: 357:55};
                    }
                }
            }
        }
    }

    bb0: {
        _139 = const false;
        _136 = const false;
        _138 = const false;
        _137 = const false;
        _2 = ((*_1).0: cmd::stats::FieldType);
        _139 = const true;
        _3 = Vec::<std::string::String>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _3;
        _8 = &((*_1).0: cmd::stats::FieldType);
        _7 = <FieldType as ToString>::to_string(move _8) -> [return: bb2, unwind: bb82];
    }

    bb2: {
        _5 = Vec::<std::string::String>::push(move _6, move _7) -> [return: bb3, unwind: bb82];
    }

    bb3: {
        _11 = &((*_1).1: std::option::Option<cmd::stats::TypedSum>);
        _10 = std::option::Option::<TypedSum>::as_ref(move _11) -> [return: bb4, unwind: bb82];
    }

    bb4: {
        _13 = &_2;
        _12 = {closure@src/cmd/stats.rs:314:42: 314:47} { typ: move _13 };
        _9 = std::option::Option::<&TypedSum>::and_then::<std::string::String, {closure@src/cmd/stats.rs:314:42: 314:47}>(move _10, move _12) -> [return: bb5, unwind: bb82];
    }

    bb5: {
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _19 = &mut _3;
        _21 = &_4;
        _20 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _21, const ()) -> [return: bb9, unwind: bb82];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _15 = move ((_9 as Some).0: std::string::String);
        _17 = &mut _3;
        _16 = Vec::<std::string::String>::push(move _17, move _15) -> [return: bb83, unwind: bb82];
    }

    bb9: {
        _18 = Vec::<std::string::String>::push(move _19, move _20) -> [return: bb84, unwind: bb82];
    }

    bb10: {
        _26 = &_2;
        _25 = {closure@src/cmd/stats.rs:318:45: 318:49} { typ: move _26 };
        _22 = std::option::Option::<&TypedMinMax>::and_then::<(std::string::String, std::string::String), {closure@src/cmd/stats.rs:318:45: 318:49}>(move _23, move _25) -> [return: bb11, unwind: bb82];
    }

    bb11: {
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        _36 = &mut _3;
        _38 = &_4;
        _37 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _38, const ()) -> [return: bb16, unwind: bb82];
    }

    bb13: {
        _138 = const true;
        _28 = move ((_22 as Some).0: (std::string::String, std::string::String));
        _30 = &mut _3;
        _31 = move (_28.0: std::string::String);
        _29 = Vec::<std::string::String>::push(move _30, move _31) -> [return: bb14, unwind: bb80];
    }

    bb14: {
        _33 = &mut _3;
        _138 = const false;
        _34 = move (_28.1: std::string::String);
        _32 = Vec::<std::string::String>::push(move _33, move _34) -> [return: bb15, unwind: bb80];
    }

    bb15: {
        _138 = const false;
        goto -> bb73;
    }

    bb16: {
        _35 = Vec::<std::string::String>::push(move _36, move _37) -> [return: bb17, unwind: bb82];
    }

    bb17: {
        _40 = &mut _3;
        _42 = &_4;
        _41 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _42, const ()) -> [return: bb18, unwind: bb82];
    }

    bb18: {
        _39 = Vec::<std::string::String>::push(move _40, move _41) -> [return: bb85, unwind: bb82];
    }

    bb19: {
        _43 = std::option::Option::<&TypedMinMax>::and_then::<(std::string::String, std::string::String), {closure@src/cmd/stats.rs:322:45: 322:49}>(move _44, const ZeroSized: {closure@src/cmd/stats.rs:322:45: 322:49}) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb21, 1: bb22, otherwise: bb7];
    }

    bb21: {
        _55 = &mut _3;
        _57 = &_4;
        _56 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _57, const ()) -> [return: bb25, unwind: bb82];
    }

    bb22: {
        _137 = const true;
        _47 = move ((_43 as Some).0: (std::string::String, std::string::String));
        _49 = &mut _3;
        _50 = move (_47.0: std::string::String);
        _48 = Vec::<std::string::String>::push(move _49, move _50) -> [return: bb23, unwind: bb78];
    }

    bb23: {
        _52 = &mut _3;
        _137 = const false;
        _53 = move (_47.1: std::string::String);
        _51 = Vec::<std::string::String>::push(move _52, move _53) -> [return: bb24, unwind: bb78];
    }

    bb24: {
        _137 = const false;
        goto -> bb74;
    }

    bb25: {
        _54 = Vec::<std::string::String>::push(move _55, move _56) -> [return: bb26, unwind: bb82];
    }

    bb26: {
        _59 = &mut _3;
        _61 = &_4;
        _60 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _61, const ()) -> [return: bb27, unwind: bb82];
    }

    bb27: {
        _58 = Vec::<std::string::String>::push(move _59, move _60) -> [return: bb86, unwind: bb82];
    }

    bb28: {
        switchInt(move _62) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _72 = discriminant(((*_1).3: std::option::Option<stats::OnlineStats>));
        switchInt(move _72) -> [0: bb34, 1: bb35, otherwise: bb7];
    }

    bb30: {
        _65 = &mut _3;
        _67 = &_4;
        _66 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _67, const ()) -> [return: bb31, unwind: bb82];
    }

    bb31: {
        _64 = Vec::<std::string::String>::push(move _65, move _66) -> [return: bb32, unwind: bb82];
    }

    bb32: {
        _69 = &mut _3;
        _71 = &_4;
        _70 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _71, const ()) -> [return: bb33, unwind: bb82];
    }

    bb33: {
        _68 = Vec::<std::string::String>::push(move _69, move _70) -> [return: bb87, unwind: bb82];
    }

    bb34: {
        _85 = &mut _3;
        _87 = &_4;
        _86 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _87, const ()) -> [return: bb41, unwind: bb82];
    }

    bb35: {
        _73 = &((((*_1).3: std::option::Option<stats::OnlineStats>) as Some).0: stats::OnlineStats);
        _75 = &mut _3;
        _78 = OnlineStats::mean(_73) -> [return: bb36, unwind: bb82];
    }

    bb36: {
        _77 = &_78;
        _76 = <f64 as ToString>::to_string(move _77) -> [return: bb37, unwind: bb82];
    }

    bb37: {
        _74 = Vec::<std::string::String>::push(move _75, move _76) -> [return: bb38, unwind: bb82];
    }

    bb38: {
        _80 = &mut _3;
        _83 = OnlineStats::stddev(_73) -> [return: bb39, unwind: bb82];
    }

    bb39: {
        _82 = &_83;
        _81 = <f64 as ToString>::to_string(move _82) -> [return: bb40, unwind: bb82];
    }

    bb40: {
        _79 = Vec::<std::string::String>::push(move _80, move _81) -> [return: bb88, unwind: bb82];
    }

    bb41: {
        _84 = Vec::<std::string::String>::push(move _85, move _86) -> [return: bb42, unwind: bb82];
    }

    bb42: {
        _89 = &mut _3;
        _91 = &_4;
        _90 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _91, const ()) -> [return: bb43, unwind: bb82];
    }

    bb43: {
        _88 = Vec::<std::string::String>::push(move _89, move _90) -> [return: bb89, unwind: bb82];
    }

    bb44: {
        _94 = &mut ((*_1).5: std::option::Option<stats::Unsorted<f64>>);
        _93 = std::option::Option::<Unsorted<f64>>::as_mut(move _94) -> [return: bb45, unwind: bb82];
    }

    bb45: {
        _92 = std::option::Option::<&mut Unsorted<f64>>::and_then::<f64, {closure@src/cmd/stats.rs:338:45: 338:48}>(move _93, const ZeroSized: {closure@src/cmd/stats.rs:338:45: 338:48}) -> [return: bb46, unwind: bb82];
    }

    bb46: {
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb48, 1: bb47, otherwise: bb7];
    }

    bb47: {
        _101 = ((_92 as Some).0: f64);
        _103 = &mut _3;
        _105 = &_101;
        _104 = <f64 as ToString>::to_string(move _105) -> [return: bb51, unwind: bb82];
    }

    bb48: {
        _96 = (((*_1).6: cmd::stats::WhichStats).5: bool);
        switchInt(move _96) -> [0: bb52, otherwise: bb49];
    }

    bb49: {
        _98 = &mut _3;
        _100 = &_4;
        _99 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _100, const ()) -> [return: bb50, unwind: bb82];
    }

    bb50: {
        _97 = Vec::<std::string::String>::push(move _98, move _99) -> [return: bb90, unwind: bb82];
    }

    bb51: {
        _102 = Vec::<std::string::String>::push(move _103, move _104) -> [return: bb91, unwind: bb82];
    }

    bb52: {
        _107 = &mut ((*_1).4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _106 = std::option::Option::<Unsorted<Vec<u8>>>::as_mut(move _107) -> [return: bb53, unwind: bb82];
    }

    bb53: {
        _108 = discriminant(_106);
        switchInt(move _108) -> [0: bb55, 1: bb54, otherwise: bb7];
    }

    bb54: {
        _119 = &mut ((_106 as Some).0: &mut stats::Unsorted<std::vec::Vec<u8>>);
        _120 = (((*_1).6: cmd::stats::WhichStats).6: bool);
        switchInt(move _120) -> [0: bb65, otherwise: bb61];
    }

    bb55: {
        _109 = (((*_1).6: cmd::stats::WhichStats).6: bool);
        switchInt(move _109) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        _111 = &mut _3;
        _113 = &_4;
        _112 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _113, const ()) -> [return: bb57, unwind: bb82];
    }

    bb57: {
        _110 = Vec::<std::string::String>::push(move _111, move _112) -> [return: bb92, unwind: bb82];
    }

    bb58: {
        _114 = (((*_1).6: cmd::stats::WhichStats).4: bool);
        switchInt(move _114) -> [0: bb69, otherwise: bb59];
    }

    bb59: {
        _116 = &mut _3;
        _118 = &_4;
        _117 = <{closure@src/cmd/stats.rs:311:21: 311:23} as Fn<()>>::call(move _118, const ()) -> [return: bb60, unwind: bb82];
    }

    bb60: {
        _115 = Vec::<std::string::String>::push(move _116, move _117) -> [return: bb93, unwind: bb82];
    }

    bb61: {
        _122 = &mut _3;
        _134 = deref_copy (*_119);
        _124 = Unsorted::<Vec<u8>>::mode(_134) -> [return: bb62, unwind: bb82];
    }

    bb62: {
        _136 = const true;
        _126 = const "N/A";
        _125 = <str as ToOwned>::to_owned(_126) -> [return: bb63, unwind: bb76];
    }

    bb63: {
        _136 = const false;
        _123 = std::option::Option::<Vec<u8>>::map_or::<std::string::String, {closure@src/cmd/stats.rs:357:33: 357:55}>(move _124, move _125, const ZeroSized: {closure@src/cmd/stats.rs:357:33: 357:55}) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        _136 = const false;
        _121 = Vec::<std::string::String>::push(move _122, move _123) -> [return: bb94, unwind: bb82];
    }

    bb65: {
        _127 = (((*_1).6: cmd::stats::WhichStats).4: bool);
        switchInt(move _127) -> [0: bb69, otherwise: bb66];
    }

    bb66: {
        _129 = &mut _3;
        _135 = deref_copy (*_119);
        _132 = Unsorted::<Vec<u8>>::cardinality(_135) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        _131 = &_132;
        _130 = <usize as ToString>::to_string(move _131) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        _128 = Vec::<std::string::String>::push(move _129, move _130) -> [return: bb95, unwind: bb82];
    }

    bb69: {
        _139 = const false;
        _133 = move _3;
        _0 = <StringRecord as From<Vec<std::string::String>>>::from(move _133) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        _139 = const false;
        return;
    }

    bb71 (cleanup): {
        resume;
    }

    bb72: {
        _24 = &((*_1).2: std::option::Option<cmd::stats::TypedMinMax>);
        _23 = std::option::Option::<TypedMinMax>::as_ref(move _24) -> [return: bb10, unwind: bb82];
    }

    bb73: {
        _45 = &((*_1).2: std::option::Option<cmd::stats::TypedMinMax>);
        _44 = std::option::Option::<TypedMinMax>::as_ref(move _45) -> [return: bb19, unwind: bb82];
    }

    bb74: {
        _63 = &((*_1).0: cmd::stats::FieldType);
        _62 = FieldType::is_number(move _63) -> [return: bb28, unwind: bb82];
    }

    bb75 (cleanup): {
        drop(_124) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_136) -> [0: bb82, otherwise: bb75];
    }

    bb77 (cleanup): {
        drop((_47.1: std::string::String)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_137) -> [0: bb82, otherwise: bb77];
    }

    bb79 (cleanup): {
        drop((_28.1: std::string::String)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_138) -> [0: bb82, otherwise: bb79];
    }

    bb81 (cleanup): {
        drop(_3) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_139) -> [0: bb71, otherwise: bb81];
    }

    bb83: {
        goto -> bb72;
    }

    bb84: {
        goto -> bb72;
    }

    bb85: {
        goto -> bb73;
    }

    bb86: {
        goto -> bb74;
    }

    bb87: {
        goto -> bb44;
    }

    bb88: {
        goto -> bb44;
    }

    bb89: {
        goto -> bb44;
    }

    bb90: {
        goto -> bb52;
    }

    bb91: {
        goto -> bb52;
    }

    bb92: {
        goto -> bb58;
    }

    bb93: {
        goto -> bb69;
    }

    bb94: {
        goto -> bb65;
    }

    bb95: {
        goto -> bb69;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#0}(_1: &{closure@src/cmd/stats.rs:311:21: 311:23}) -> std::string::String {
    let mut _0: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "";
        _0 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#1}(_1: {closure@src/cmd/stats.rs:314:42: 314:47}, _2: &TypedSum) -> std::option::Option<std::string::String> {
    debug sum => _2;
    debug typ => (*(_1.0: &cmd::stats::FieldType));
    let mut _0: std::option::Option<std::string::String>;
    let mut _3: cmd::stats::FieldType;
    let mut _4: &cmd::stats::FieldType;

    bb0: {
        _4 = deref_copy (_1.0: &cmd::stats::FieldType);
        _3 = (*_4);
        _0 = TypedSum::show(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#2}(_1: {closure@src/cmd/stats.rs:318:45: 318:49}, _2: &TypedMinMax) -> std::option::Option<(std::string::String, std::string::String)> {
    debug mm => _2;
    debug typ => (*(_1.0: &cmd::stats::FieldType));
    let mut _0: std::option::Option<(std::string::String, std::string::String)>;
    let mut _3: cmd::stats::FieldType;
    let mut _4: &cmd::stats::FieldType;

    bb0: {
        _4 = deref_copy (_1.0: &cmd::stats::FieldType);
        _3 = (*_4);
        _0 = TypedMinMax::show(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#3}(_1: {closure@src/cmd/stats.rs:322:45: 322:49}, _2: &TypedMinMax) -> std::option::Option<(std::string::String, std::string::String)> {
    debug mm => _2;
    let mut _0: std::option::Option<(std::string::String, std::string::String)>;

    bb0: {
        _0 = TypedMinMax::len_range(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#4}(_1: {closure@src/cmd/stats.rs:338:45: 338:48}, _2: &mut Unsorted<f64>) -> std::option::Option<f64> {
    debug v => _2;
    let mut _0: std::option::Option<f64>;

    bb0: {
        _0 = Unsorted::<f64>::median(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:258:1: 258:11>::to_record::{closure#5}(_1: &{closure@src/cmd/stats.rs:357:33: 357:55}, _2: Vec<u8>) -> std::string::String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: std::borrow::Cow<'_, str>;
    let _4: &[u8];
    let mut _5: &std::vec::Vec<u8>;

    bb0: {
        _5 = &_2;
        _4 = <Vec<u8> as Deref>::deref(move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = std::string::String::from_utf8_lossy(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Cow::<'_, str>::into_owned(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:372:1: 372:23>::merge(_1: &mut Stats, _2: Stats) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut cmd::stats::FieldType;
    let mut _5: cmd::stats::FieldType;
    let _6: ();
    let mut _7: &mut std::option::Option<cmd::stats::TypedSum>;
    let mut _8: std::option::Option<cmd::stats::TypedSum>;
    let _9: ();
    let mut _10: &mut std::option::Option<cmd::stats::TypedMinMax>;
    let mut _11: std::option::Option<cmd::stats::TypedMinMax>;
    let _12: ();
    let mut _13: &mut std::option::Option<stats::OnlineStats>;
    let mut _14: std::option::Option<stats::OnlineStats>;
    let _15: ();
    let mut _16: &mut std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let mut _17: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>;
    let _18: ();
    let mut _19: &mut std::option::Option<stats::Unsorted<f64>>;
    let mut _20: std::option::Option<stats::Unsorted<f64>>;
    let _21: ();
    let mut _22: &mut cmd::stats::WhichStats;
    let mut _23: cmd::stats::WhichStats;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;

    bb0: {
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _4 = &mut ((*_1).0: cmd::stats::FieldType);
        _5 = (_2.0: cmd::stats::FieldType);
        _3 = <FieldType as Commute>::merge(move _4, move _5) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _7 = &mut ((*_1).1: std::option::Option<cmd::stats::TypedSum>);
        _8 = move (_2.1: std::option::Option<cmd::stats::TypedSum>);
        _6 = <std::option::Option<TypedSum> as Commute>::merge(move _7, move _8) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _10 = &mut ((*_1).2: std::option::Option<cmd::stats::TypedMinMax>);
        _26 = const false;
        _11 = move (_2.2: std::option::Option<cmd::stats::TypedMinMax>);
        _9 = <std::option::Option<TypedMinMax> as Commute>::merge(move _10, move _11) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _13 = &mut ((*_1).3: std::option::Option<stats::OnlineStats>);
        _14 = (_2.3: std::option::Option<stats::OnlineStats>);
        _12 = <std::option::Option<OnlineStats> as Commute>::merge(move _13, move _14) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _16 = &mut ((*_1).4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _25 = const false;
        _17 = move (_2.4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>);
        _15 = <std::option::Option<Unsorted<Vec<u8>>> as Commute>::merge(move _16, move _17) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _19 = &mut ((*_1).5: std::option::Option<stats::Unsorted<f64>>);
        _24 = const false;
        _20 = move (_2.5: std::option::Option<stats::Unsorted<f64>>);
        _18 = <std::option::Option<Unsorted<f64>> as Commute>::merge(move _19, move _20) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _22 = &mut ((*_1).6: cmd::stats::WhichStats);
        _23 = move (_2.6: cmd::stats::WhichStats);
        _21 = <WhichStats as Commute>::merge(move _22, move _23) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        switchInt(_24) -> [0: bb8, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_2.5: std::option::Option<stats::Unsorted<f64>>)) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_25) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_2.4: std::option::Option<stats::Unsorted<std::vec::Vec<u8>>>)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop((_2.2: std::option::Option<cmd::stats::TypedMinMax>)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_26) -> [0: bb11, otherwise: bb13];
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:384:10: 384:15>::clone(_1: &FieldType) -> FieldType {
    debug self => _1;
    let mut _0: cmd::stats::FieldType;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:384:23: 384:32>::eq(_1: &FieldType, _2: &FieldType) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::from_sample(_1: &[u8]) -> FieldType {
    debug sample => _1;
    let mut _0: cmd::stats::FieldType;
    let mut _2: bool;
    let mut _3: std::result::Result<&str, std::str::Utf8Error>;
    let mut _4: isize;
    let _5: &str;
    let mut _6: std::result::Result<i64, std::num::ParseIntError>;
    let mut _7: isize;
    let mut _8: std::result::Result<f64, std::num::ParseFloatError>;
    let mut _9: isize;
    scope 1 {
        debug string => _5;
        scope 3 {
        }
        scope 4 {
        }
    }
    scope 2 {
        debug s => _5;
    }

    bb0: {
        _2 = core::slice::<impl [u8]>::is_empty(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = FieldType::TNull;
        goto -> bb14;
    }

    bb3: {
        _3 = from_utf8(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _5 = ((_3 as Ok).0: &str);
        _6 = core::str::<impl str>::parse::<i64>(_5) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = FieldType::TUnknown;
        goto -> bb14;
    }

    bb8: {
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        _0 = FieldType::TInteger;
        goto -> bb14;
    }

    bb10: {
        _8 = core::str::<impl str>::parse::<f64>(_5) -> [return: bb11, unwind continue];
    }

    bb11: {
        _9 = discriminant(_8);
        switchInt(move _9) -> [0: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = FieldType::TFloat;
        goto -> bb14;
    }

    bb13: {
        _0 = FieldType::TUnicode;
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::is_number(_1: &FieldType) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &cmd::stats::FieldType;
    let mut _4: &cmd::stats::FieldType;

    bb0: {
        _4 = const _;
        _2 = <FieldType as PartialEq>::eq(_1, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const true;
        goto -> bb4;
    }

    bb3: {
        _3 = const _;
        _0 = <FieldType as PartialEq>::eq(_1, _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::is_number: &FieldType = {
    let mut _0: &cmd::stats::FieldType;
    let mut _1: cmd::stats::FieldType;

    bb0: {
        _1 = FieldType::TInteger;
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::is_number: &FieldType = {
    let mut _0: &cmd::stats::FieldType;
    let mut _1: cmd::stats::FieldType;

    bb0: {
        _1 = FieldType::TFloat;
        _0 = &_1;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::is_null(_1: &FieldType) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &cmd::stats::FieldType;

    bb0: {
        _2 = const _;
        _0 = <FieldType as PartialEq>::eq(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in cmd::stats::<impl at src/cmd/stats.rs:393:1: 393:15>::is_null: &FieldType = {
    let mut _0: &cmd::stats::FieldType;
    let mut _1: cmd::stats::FieldType;

    bb0: {
        _1 = FieldType::TNull;
        _0 = &_1;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:416:1: 416:27>::merge(_1: &mut FieldType, _2: FieldType) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: cmd::stats::FieldType;
    let mut _4: (cmd::stats::FieldType, cmd::stats::FieldType);
    let mut _5: cmd::stats::FieldType;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: isize;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    let _16: cmd::stats::FieldType;
    scope 1 {
        debug any => _16;
    }

    bb0: {
        _5 = (*_1);
        _4 = (move _5, _2);
        _15 = discriminant((_4.0: cmd::stats::FieldType));
        switchInt(move _15) -> [1: bb15, 2: bb2, 3: bb3, 4: bb4, otherwise: bb1];
    }

    bb1: {
        _14 = discriminant((_4.1: cmd::stats::FieldType));
        switchInt(move _14) -> [1: bb16, otherwise: bb5];
    }

    bb2: {
        _6 = discriminant((_4.1: cmd::stats::FieldType));
        switchInt(move _6) -> [2: bb11, otherwise: bb1];
    }

    bb3: {
        _7 = discriminant((_4.1: cmd::stats::FieldType));
        switchInt(move _7) -> [3: bb12, otherwise: bb1];
    }

    bb4: {
        _8 = discriminant((_4.1: cmd::stats::FieldType));
        switchInt(move _8) -> [4: bb13, otherwise: bb1];
    }

    bb5: {
        _13 = discriminant((_4.0: cmd::stats::FieldType));
        switchInt(move _13) -> [0: bb17, otherwise: bb6];
    }

    bb6: {
        _12 = discriminant((_4.1: cmd::stats::FieldType));
        switchInt(move _12) -> [0: bb17, 2: bb8, 3: bb9, 4: bb10, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _9 = discriminant((_4.0: cmd::stats::FieldType));
        switchInt(move _9) -> [3: bb19, 4: bb20, otherwise: bb7];
    }

    bb9: {
        _10 = discriminant((_4.0: cmd::stats::FieldType));
        switchInt(move _10) -> [2: bb19, 4: bb18, otherwise: bb7];
    }

    bb10: {
        _11 = discriminant((_4.0: cmd::stats::FieldType));
        switchInt(move _11) -> [2: bb20, 3: bb18, otherwise: bb7];
    }

    bb11: {
        _3 = FieldType::TUnicode;
        goto -> bb21;
    }

    bb12: {
        _3 = FieldType::TFloat;
        goto -> bb21;
    }

    bb13: {
        _3 = FieldType::TInteger;
        goto -> bb21;
    }

    bb14: {
        _3 = _16;
        goto -> bb21;
    }

    bb15: {
        _16 = (_4.1: cmd::stats::FieldType);
        goto -> bb14;
    }

    bb16: {
        _16 = (_4.0: cmd::stats::FieldType);
        goto -> bb14;
    }

    bb17: {
        _3 = FieldType::TUnknown;
        goto -> bb21;
    }

    bb18: {
        _3 = FieldType::TFloat;
        goto -> bb21;
    }

    bb19: {
        _3 = FieldType::TUnicode;
        goto -> bb21;
    }

    bb20: {
        _3 = FieldType::TUnicode;
        goto -> bb21;
    }

    bb21: {
        (*_1) = move _3;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:435:1: 435:27>::default() -> FieldType {
    let mut _0: cmd::stats::FieldType;

    bb0: {
        _0 = FieldType::TNull;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt(_1: &FieldType, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[&str; 1];
    let mut _15: &[&str; 1];
    let mut _16: &[&str; 1];
    let mut _17: &[&str; 1];
    let mut _18: &[&str; 1];

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb5, 2: bb7, 3: bb9, 4: bb1, otherwise: bb2];
    }

    bb1: {
        _14 = const _;
        _13 = _14 as &[&str] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_const(move _13) -> [return: bb11, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _18 = const _;
        _5 = _18 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb12, unwind continue];
    }

    bb5: {
        _17 = const _;
        _7 = _17 as &[&str] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Formatter::<'_>::write_fmt(_2, move _6) -> [return: bb12, unwind continue];
    }

    bb7: {
        _16 = const _;
        _9 = _16 as &[&str] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(_2, move _8) -> [return: bb12, unwind continue];
    }

    bb9: {
        _15 = const _;
        _11 = _15 as &[&str] (PointerCoercion(Unsize));
        _10 = Arguments::<'_>::new_const(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = Formatter::<'_>::write_fmt(_2, move _10) -> [return: bb12, unwind continue];
    }

    bb11: {
        _0 = Formatter::<'_>::write_fmt(_2, move _12) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }
}

promoted[0] in cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Integer"];
        _0 = &_1;
        return;
    }
}

promoted[1] in cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Float"];
        _0 = &_1;
        return;
    }
}

promoted[2] in cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unicode"];
        _0 = &_1;
        return;
    }
}

promoted[3] in cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "NULL"];
        _0 = &_1;
        return;
    }
}

promoted[4] in cmd::stats::<impl at src/cmd/stats.rs:442:1: 442:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unknown"];
        _0 = &_1;
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:457:10: 457:15>::clone(_1: &TypedSum) -> TypedSum {
    debug self => _1;
    let mut _0: cmd::stats::TypedSum;
    let mut _2: i64;
    let _3: &i64;
    let mut _4: std::option::Option<f64>;
    let _5: &std::option::Option<f64>;

    bb0: {
        _3 = &((*_1).0: i64);
        _2 = (*_3);
        _5 = &((*_1).1: std::option::Option<f64>);
        _4 = <std::option::Option<f64> as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = TypedSum { integer: move _2, float: move _4 };
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:457:17: 457:24>::default() -> TypedSum {
    let mut _0: cmd::stats::TypedSum;
    let mut _1: i64;
    let mut _2: std::option::Option<f64>;

    bb0: {
        _1 = <i64 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::option::Option<f64> as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = TypedSum { integer: move _1, float: move _2 };
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:463:1: 463:14>::add(_1: &mut TypedSum, _2: FieldType, _3: &[u8]) -> () {
    debug self => _1;
    debug typ => _2;
    debug sample => _3;
    let mut _0: ();
    let mut _4: bool;
    let mut _5: isize;
    let _6: f64;
    let mut _7: std::option::Option<f64>;
    let mut _8: isize;
    let mut _9: std::option::Option<f64>;
    let mut _10: f64;
    let mut _11: f64;
    let mut _12: i64;
    let mut _14: isize;
    let mut _16: f64;
    let mut _17: std::option::Option<f64>;
    let mut _18: i64;
    let mut _19: std::option::Option<i64>;
    let mut _20: (i64, bool);
    scope 1 {
        debug float => _6;
        let _13: &mut f64;
        scope 2 {
            debug f => _13;
        }
    }
    scope 3 {
        debug float => _15;
        let _15: &mut f64;
    }

    bb0: {
        _4 = core::slice::<impl [u8]>::is_empty(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb2, otherwise: bb17];
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [3: bb3, 4: bb9, otherwise: bb17];
    }

    bb3: {
        _7 = cmd::stats::from_bytes::<f64>(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = std::option::Option::<f64>::unwrap(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = discriminant(((*_1).1: std::option::Option<f64>));
        switchInt(move _8) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _13 = &mut ((((*_1).1: std::option::Option<f64>) as Some).0: f64);
        (*_13) = Add((*_13), _6);
        goto -> bb17;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _12 = ((*_1).0: i64);
        _11 = move _12 as f64 (IntToFloat);
        _10 = Add(move _11, _6);
        _9 = std::option::Option::<f64>::Some(move _10);
        ((*_1).1: std::option::Option<f64>) = move _9;
        goto -> bb17;
    }

    bb9: {
        _14 = discriminant(((*_1).1: std::option::Option<f64>));
        switchInt(move _14) -> [1: bb10, otherwise: bb13];
    }

    bb10: {
        _15 = &mut ((((*_1).1: std::option::Option<f64>) as Some).0: f64);
        _17 = cmd::stats::from_bytes::<f64>(_3) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = std::option::Option::<f64>::unwrap(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        (*_15) = Add((*_15), move _16);
        goto -> bb17;
    }

    bb13: {
        _19 = cmd::stats::from_bytes::<i64>(_3) -> [return: bb14, unwind continue];
    }

    bb14: {
        _18 = std::option::Option::<i64>::unwrap(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = CheckedAdd(((*_1).0: i64), _18);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i64), move _18) -> [success: bb16, unwind continue];
    }

    bb16: {
        ((*_1).0: i64) = move (_20.0: i64);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:463:1: 463:14>::show(_1: &TypedSum, _2: FieldType) -> std::option::Option<std::string::String> {
    debug self => _1;
    debug typ => _2;
    let mut _0: std::option::Option<std::string::String>;
    let mut _3: isize;
    let mut _4: std::string::String;
    let mut _5: &i64;
    let mut _6: std::string::String;
    let mut _7: &f64;
    let _8: f64;
    let mut _9: std::option::Option<f64>;

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb3, 2: bb3, 3: bb1, 4: bb4, otherwise: bb2];
    }

    bb1: {
        _9 = ((*_1).1: std::option::Option<f64>);
        _8 = std::option::Option::<f64>::unwrap_or(move _9, const 0f64) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<std::string::String>::None;
        goto -> bb8;
    }

    bb4: {
        _5 = &((*_1).0: i64);
        _4 = <i64 as ToString>::to_string(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = std::option::Option::<std::string::String>::Some(move _4);
        goto -> bb8;
    }

    bb6: {
        _7 = &_8;
        _6 = <f64 as ToString>::to_string(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::option::Option::<std::string::String>::Some(move _6);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:500:1: 500:26>::merge(_1: &mut TypedSum, _2: TypedSum) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: (std::option::Option<f64>, std::option::Option<f64>);
    let mut _4: std::option::Option<f64>;
    let mut _5: std::option::Option<f64>;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let _9: f64;
    let _10: f64;
    let mut _11: std::option::Option<f64>;
    let mut _12: f64;
    let _13: f64;
    let mut _14: std::option::Option<f64>;
    let mut _15: f64;
    let mut _16: f64;
    let mut _17: i64;
    let _18: f64;
    let mut _19: std::option::Option<f64>;
    let mut _20: f64;
    let mut _21: f64;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: (i64, bool);
    scope 1 {
        debug f1 => _9;
        debug f2 => _10;
    }
    scope 2 {
        debug f1 => _13;
    }
    scope 3 {
        debug f2 => _18;
    }

    bb0: {
        _4 = ((*_1).1: std::option::Option<f64>);
        _5 = (_2.1: std::option::Option<f64>);
        _3 = (move _4, move _5);
        _8 = discriminant((_3.0: std::option::Option<f64>));
        switchInt(move _8) -> [0: bb1, 1: bb4, otherwise: bb3];
    }

    bb1: {
        _6 = discriminant((_3.1: std::option::Option<f64>));
        switchInt(move _6) -> [0: bb2, 1: bb7, otherwise: bb3];
    }

    bb2: {
        _23 = (_2.0: i64);
        _24 = CheckedAdd(((*_1).0: i64), _23);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i64), move _23) -> [success: bb8, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = discriminant((_3.1: std::option::Option<f64>));
        switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb3];
    }

    bb5: {
        _9 = (((_3.0: std::option::Option<f64>) as Some).0: f64);
        _10 = (((_3.1: std::option::Option<f64>) as Some).0: f64);
        _12 = Add(_9, _10);
        _11 = std::option::Option::<f64>::Some(move _12);
        ((*_1).1: std::option::Option<f64>) = move _11;
        goto -> bb9;
    }

    bb6: {
        _13 = (((_3.0: std::option::Option<f64>) as Some).0: f64);
        _17 = (_2.0: i64);
        _16 = move _17 as f64 (IntToFloat);
        _15 = Add(_13, move _16);
        _14 = std::option::Option::<f64>::Some(move _15);
        ((*_1).1: std::option::Option<f64>) = move _14;
        goto -> bb9;
    }

    bb7: {
        _18 = (((_3.1: std::option::Option<f64>) as Some).0: f64);
        _22 = ((*_1).0: i64);
        _21 = move _22 as f64 (IntToFloat);
        _20 = Add(move _21, _18);
        _19 = std::option::Option::<f64>::Some(move _20);
        ((*_1).1: std::option::Option<f64>) = move _19;
        goto -> bb9;
    }

    bb8: {
        ((*_1).0: i64) = move (_24.0: i64);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:513:10: 513:15>::clone(_1: &TypedMinMax) -> TypedMinMax {
    debug self => _1;
    let mut _0: cmd::stats::TypedMinMax;
    let mut _2: stats::MinMax<std::vec::Vec<u8>>;
    let _3: &stats::MinMax<std::vec::Vec<u8>>;
    let mut _4: stats::MinMax<usize>;
    let _5: &stats::MinMax<usize>;
    let mut _6: stats::MinMax<i64>;
    let _7: &stats::MinMax<i64>;
    let mut _8: stats::MinMax<f64>;
    let _9: &stats::MinMax<f64>;

    bb0: {
        _3 = &((*_1).0: stats::MinMax<std::vec::Vec<u8>>);
        _2 = <MinMax<Vec<u8>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: stats::MinMax<usize>);
        _4 = <MinMax<usize> as Clone>::clone(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _7 = &((*_1).2: stats::MinMax<i64>);
        _6 = <MinMax<i64> as Clone>::clone(_7) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _9 = &((*_1).3: stats::MinMax<f64>);
        _8 = <MinMax<f64> as Clone>::clone(_9) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = TypedMinMax { strings: move _2, str_len: move _4, integers: move _6, floats: move _8 };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:521:1: 521:17>::add(_1: &mut TypedMinMax, _2: FieldType, _3: &[u8]) -> () {
    debug self => _1;
    debug typ => _2;
    debug sample => _3;
    let mut _0: ();
    let _4: ();
    let mut _5: &mut stats::MinMax<usize>;
    let mut _6: usize;
    let mut _7: bool;
    let _8: ();
    let mut _9: &mut stats::MinMax<std::vec::Vec<u8>>;
    let mut _10: std::vec::Vec<u8>;
    let mut _11: isize;
    let _12: f64;
    let mut _13: std::option::Option<f64>;
    let mut _14: std::option::Option<&str>;
    let mut _15: std::result::Result<&str, std::str::Utf8Error>;
    let _16: ();
    let mut _17: &mut stats::MinMax<f64>;
    let _18: ();
    let mut _19: &mut stats::MinMax<i64>;
    let mut _20: i64;
    let _21: i64;
    let mut _22: std::option::Option<i64>;
    let mut _23: std::option::Option<&str>;
    let mut _24: std::result::Result<&str, std::str::Utf8Error>;
    let _25: ();
    let mut _26: &mut stats::MinMax<i64>;
    let _27: ();
    let mut _28: &mut stats::MinMax<f64>;
    let mut _29: f64;
    scope 1 {
        debug n => _12;
    }
    scope 2 {
        debug n => _21;
    }

    bb0: {
        _5 = &mut ((*_1).1: stats::MinMax<usize>);
        _6 = Len((*_3));
        _4 = MinMax::<usize>::add(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = core::slice::<impl [u8]>::is_empty(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _7) -> [0: bb3, otherwise: bb19];
    }

    bb3: {
        _9 = &mut ((*_1).0: stats::MinMax<std::vec::Vec<u8>>);
        _10 = std::slice::<impl [u8]>::to_vec(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = MinMax::<Vec<u8>>::add(move _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = discriminant(_2);
        switchInt(move _11) -> [0: bb19, 1: bb19, 2: bb19, 3: bb8, 4: bb6, otherwise: bb7];
    }

    bb6: {
        _24 = from_utf8(_3) -> [return: bb14, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _15 = from_utf8(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = Result::<&str, std::str::Utf8Error>::ok(move _15) -> [return: bb10, unwind continue];
    }

    bb10: {
        _13 = std::option::Option::<&str>::and_then::<f64, {closure@src/cmd/stats.rs:533:39: 533:42}>(move _14, const ZeroSized: {closure@src/cmd/stats.rs:533:39: 533:42}) -> [return: bb11, unwind continue];
    }

    bb11: {
        _12 = std::option::Option::<f64>::unwrap(move _13) -> [return: bb12, unwind continue];
    }

    bb12: {
        _17 = &mut ((*_1).3: stats::MinMax<f64>);
        _16 = MinMax::<f64>::add(move _17, _12) -> [return: bb13, unwind continue];
    }

    bb13: {
        _19 = &mut ((*_1).2: stats::MinMax<i64>);
        _20 = _12 as i64 (FloatToInt);
        _18 = MinMax::<i64>::add(move _19, move _20) -> [return: bb19, unwind continue];
    }

    bb14: {
        _23 = Result::<&str, std::str::Utf8Error>::ok(move _24) -> [return: bb15, unwind continue];
    }

    bb15: {
        _22 = std::option::Option::<&str>::and_then::<i64, {closure@src/cmd/stats.rs:541:39: 541:42}>(move _23, const ZeroSized: {closure@src/cmd/stats.rs:541:39: 541:42}) -> [return: bb16, unwind continue];
    }

    bb16: {
        _21 = std::option::Option::<i64>::unwrap(move _22) -> [return: bb17, unwind continue];
    }

    bb17: {
        _26 = &mut ((*_1).2: stats::MinMax<i64>);
        _25 = MinMax::<i64>::add(move _26, _21) -> [return: bb18, unwind continue];
    }

    bb18: {
        _28 = &mut ((*_1).3: stats::MinMax<f64>);
        _29 = _21 as f64 (IntToFloat);
        _27 = MinMax::<f64>::add(move _28, move _29) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:521:1: 521:17>::add::{closure#0}(_1: {closure@src/cmd/stats.rs:533:39: 533:42}, _2: &str) -> std::option::Option<f64> {
    debug s => _2;
    let mut _0: std::option::Option<f64>;
    let mut _3: std::result::Result<f64, std::num::ParseFloatError>;

    bb0: {
        _3 = core::str::<impl str>::parse::<f64>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<f64, ParseFloatError>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:521:1: 521:17>::add::{closure#1}(_1: {closure@src/cmd/stats.rs:541:39: 541:42}, _2: &str) -> std::option::Option<i64> {
    debug s => _2;
    let mut _0: std::option::Option<i64>;
    let mut _3: std::result::Result<i64, std::num::ParseIntError>;

    bb0: {
        _3 = core::str::<impl str>::parse::<i64>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<i64, ParseIntError>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:521:1: 521:17>::len_range(_1: &TypedMinMax) -> std::option::Option<(std::string::String, std::string::String)> {
    debug self => _1;
    let mut _0: std::option::Option<(std::string::String, std::string::String)>;
    let mut _2: (std::option::Option<&usize>, std::option::Option<&usize>);
    let mut _3: std::option::Option<&usize>;
    let mut _4: &stats::MinMax<usize>;
    let mut _5: std::option::Option<&usize>;
    let mut _6: &stats::MinMax<usize>;
    let mut _7: isize;
    let mut _8: isize;
    let _9: &usize;
    let _10: &usize;
    let mut _11: (std::string::String, std::string::String);
    let mut _12: std::string::String;
    let mut _13: std::string::String;
    scope 1 {
        debug min => _9;
        debug max => _10;
    }

    bb0: {
        _4 = &((*_1).1: stats::MinMax<usize>);
        _3 = MinMax::<usize>::min(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &((*_1).1: stats::MinMax<usize>);
        _5 = MinMax::<usize>::max(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = (move _3, move _5);
        _8 = discriminant((_2.0: std::option::Option<&usize>));
        switchInt(move _8) -> [1: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = std::option::Option::<(std::string::String, std::string::String)>::None;
        goto -> bb8;
    }

    bb4: {
        _7 = discriminant((_2.1: std::option::Option<&usize>));
        switchInt(move _7) -> [1: bb5, otherwise: bb3];
    }

    bb5: {
        _9 = (((_2.0: std::option::Option<&usize>) as Some).0: &usize);
        _10 = (((_2.1: std::option::Option<&usize>) as Some).0: &usize);
        _12 = <usize as ToString>::to_string(_9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _13 = <usize as ToString>::to_string(_10) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _11 = (move _12, move _13);
        _0 = std::option::Option::<(std::string::String, std::string::String)>::Some(move _11);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_12) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:521:1: 521:17>::show(_1: &TypedMinMax, _2: FieldType) -> std::option::Option<(std::string::String, std::string::String)> {
    debug self => _1;
    debug typ => _2;
    let mut _0: std::option::Option<(std::string::String, std::string::String)>;
    let mut _3: isize;
    let mut _4: (std::option::Option<&std::vec::Vec<u8>>, std::option::Option<&std::vec::Vec<u8>>);
    let mut _5: std::option::Option<&std::vec::Vec<u8>>;
    let mut _6: &stats::MinMax<std::vec::Vec<u8>>;
    let mut _7: std::option::Option<&std::vec::Vec<u8>>;
    let mut _8: &stats::MinMax<std::vec::Vec<u8>>;
    let mut _9: isize;
    let mut _10: isize;
    let _11: &std::vec::Vec<u8>;
    let _12: &std::vec::Vec<u8>;
    let mut _14: &std::borrow::Cow<'_, str>;
    let _15: std::borrow::Cow<'_, str>;
    let _16: &[u8];
    let mut _18: &std::borrow::Cow<'_, str>;
    let _19: std::borrow::Cow<'_, str>;
    let _20: &[u8];
    let mut _21: (std::string::String, std::string::String);
    let mut _22: std::string::String;
    let mut _23: std::string::String;
    let mut _24: (std::option::Option<&i64>, std::option::Option<&i64>);
    let mut _25: std::option::Option<&i64>;
    let mut _26: &stats::MinMax<i64>;
    let mut _27: std::option::Option<&i64>;
    let mut _28: &stats::MinMax<i64>;
    let mut _29: isize;
    let mut _30: isize;
    let _31: &i64;
    let _32: &i64;
    let mut _33: (std::string::String, std::string::String);
    let mut _34: std::string::String;
    let mut _35: std::string::String;
    let mut _36: (std::option::Option<&f64>, std::option::Option<&f64>);
    let mut _37: std::option::Option<&f64>;
    let mut _38: &stats::MinMax<f64>;
    let mut _39: std::option::Option<&f64>;
    let mut _40: &stats::MinMax<f64>;
    let mut _41: isize;
    let mut _42: isize;
    let _43: &f64;
    let _44: &f64;
    let mut _45: (std::string::String, std::string::String);
    let mut _46: std::string::String;
    let mut _47: std::string::String;
    scope 1 {
        debug min => _11;
        debug max => _12;
        let _13: std::string::String;
        scope 2 {
            debug min => _13;
            let _17: std::string::String;
            scope 3 {
                debug max => _17;
            }
        }
    }
    scope 4 {
        debug min => _31;
        debug max => _32;
    }
    scope 5 {
        debug min => _43;
        debug max => _44;
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb4, 1: bb3, 2: bb4, 3: bb1, 4: bb18, otherwise: bb2];
    }

    bb1: {
        _38 = &((*_1).3: stats::MinMax<f64>);
        _37 = MinMax::<f64>::min(move _38) -> [return: bb26, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<(std::string::String, std::string::String)>::None;
        goto -> bb33;
    }

    bb4: {
        _6 = &((*_1).0: stats::MinMax<std::vec::Vec<u8>>);
        _5 = MinMax::<Vec<u8>>::min(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &((*_1).0: stats::MinMax<std::vec::Vec<u8>>);
        _7 = MinMax::<Vec<u8>>::max(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = (move _5, move _7);
        _10 = discriminant((_4.0: std::option::Option<&std::vec::Vec<u8>>));
        switchInt(move _10) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = std::option::Option::<(std::string::String, std::string::String)>::None;
        goto -> bb33;
    }

    bb8: {
        _9 = discriminant((_4.1: std::option::Option<&std::vec::Vec<u8>>));
        switchInt(move _9) -> [1: bb9, otherwise: bb7];
    }

    bb9: {
        _11 = (((_4.0: std::option::Option<&std::vec::Vec<u8>>) as Some).0: &std::vec::Vec<u8>);
        _12 = (((_4.1: std::option::Option<&std::vec::Vec<u8>>) as Some).0: &std::vec::Vec<u8>);
        _16 = <Vec<u8> as Deref>::deref(_11) -> [return: bb10, unwind continue];
    }

    bb10: {
        _15 = std::string::String::from_utf8_lossy(_16) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = &_15;
        _13 = <Cow<'_, str> as ToString>::to_string(move _14) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        drop(_15) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _20 = <Vec<u8> as Deref>::deref(_12) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _19 = std::string::String::from_utf8_lossy(_20) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _18 = &_19;
        _17 = <Cow<'_, str> as ToString>::to_string(move _18) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        drop(_19) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _22 = move _13;
        _23 = move _17;
        _21 = (move _22, move _23);
        _0 = std::option::Option::<(std::string::String, std::string::String)>::Some(move _21);
        goto -> bb33;
    }

    bb18: {
        _26 = &((*_1).2: stats::MinMax<i64>);
        _25 = MinMax::<i64>::min(move _26) -> [return: bb19, unwind continue];
    }

    bb19: {
        _28 = &((*_1).2: stats::MinMax<i64>);
        _27 = MinMax::<i64>::max(move _28) -> [return: bb20, unwind continue];
    }

    bb20: {
        _24 = (move _25, move _27);
        _30 = discriminant((_24.0: std::option::Option<&i64>));
        switchInt(move _30) -> [1: bb22, otherwise: bb21];
    }

    bb21: {
        _0 = std::option::Option::<(std::string::String, std::string::String)>::None;
        goto -> bb33;
    }

    bb22: {
        _29 = discriminant((_24.1: std::option::Option<&i64>));
        switchInt(move _29) -> [1: bb23, otherwise: bb21];
    }

    bb23: {
        _31 = (((_24.0: std::option::Option<&i64>) as Some).0: &i64);
        _32 = (((_24.1: std::option::Option<&i64>) as Some).0: &i64);
        _34 = <i64 as ToString>::to_string(_31) -> [return: bb24, unwind continue];
    }

    bb24: {
        _35 = <i64 as ToString>::to_string(_32) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        _33 = (move _34, move _35);
        _0 = std::option::Option::<(std::string::String, std::string::String)>::Some(move _33);
        goto -> bb33;
    }

    bb26: {
        _40 = &((*_1).3: stats::MinMax<f64>);
        _39 = MinMax::<f64>::max(move _40) -> [return: bb27, unwind continue];
    }

    bb27: {
        _36 = (move _37, move _39);
        _42 = discriminant((_36.0: std::option::Option<&f64>));
        switchInt(move _42) -> [1: bb29, otherwise: bb28];
    }

    bb28: {
        _0 = std::option::Option::<(std::string::String, std::string::String)>::None;
        goto -> bb33;
    }

    bb29: {
        _41 = discriminant((_36.1: std::option::Option<&f64>));
        switchInt(move _41) -> [1: bb30, otherwise: bb28];
    }

    bb30: {
        _43 = (((_36.0: std::option::Option<&f64>) as Some).0: &f64);
        _44 = (((_36.1: std::option::Option<&f64>) as Some).0: &f64);
        _46 = <f64 as ToString>::to_string(_43) -> [return: bb31, unwind continue];
    }

    bb31: {
        _47 = <f64 as ToString>::to_string(_44) -> [return: bb32, unwind: bb34];
    }

    bb32: {
        _45 = (move _46, move _47);
        _0 = std::option::Option::<(std::string::String, std::string::String)>::Some(move _45);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_46) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_34) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_17) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_19) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_13) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_15) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:589:1: 589:29>::default() -> TypedMinMax {
    let mut _0: cmd::stats::TypedMinMax;
    let mut _1: stats::MinMax<std::vec::Vec<u8>>;
    let mut _2: stats::MinMax<usize>;
    let mut _3: stats::MinMax<i64>;
    let mut _4: stats::MinMax<f64>;

    bb0: {
        _1 = <MinMax<Vec<u8>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <MinMax<usize> as Default>::default() -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = <MinMax<i64> as Default>::default() -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _4 = <MinMax<f64> as Default>::default() -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = TypedMinMax { strings: move _1, str_len: move _2, integers: move _3, floats: move _4 };
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn cmd::stats::<impl at src/cmd/stats.rs:600:1: 600:29>::merge(_1: &mut TypedMinMax, _2: TypedMinMax) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut stats::MinMax<std::vec::Vec<u8>>;
    let mut _5: stats::MinMax<std::vec::Vec<u8>>;
    let _6: ();
    let mut _7: &mut stats::MinMax<usize>;
    let mut _8: stats::MinMax<usize>;
    let _9: ();
    let mut _10: &mut stats::MinMax<i64>;
    let mut _11: stats::MinMax<i64>;
    let _12: ();
    let mut _13: &mut stats::MinMax<f64>;
    let mut _14: stats::MinMax<f64>;

    bb0: {
        _4 = &mut ((*_1).0: stats::MinMax<std::vec::Vec<u8>>);
        _5 = move (_2.0: stats::MinMax<std::vec::Vec<u8>>);
        _3 = <MinMax<Vec<u8>> as Commute>::merge(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &mut ((*_1).1: stats::MinMax<usize>);
        _8 = move (_2.1: stats::MinMax<usize>);
        _6 = <MinMax<usize> as Commute>::merge(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &mut ((*_1).2: stats::MinMax<i64>);
        _11 = move (_2.2: stats::MinMax<i64>);
        _9 = <MinMax<i64> as Commute>::merge(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &mut ((*_1).3: stats::MinMax<f64>);
        _14 = move (_2.3: stats::MinMax<f64>);
        _12 = <MinMax<f64> as Commute>::merge(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn cmd::stats::from_bytes(_1: &[u8]) -> std::option::Option<T> {
    debug bytes => _1;
    let mut _0: std::option::Option<T>;
    let mut _2: std::option::Option<&str>;
    let mut _3: std::result::Result<&str, std::str::Utf8Error>;

    bb0: {
        _3 = from_utf8(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<&str, std::str::Utf8Error>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<&str>::and_then::<T, {closure@src/cmd/stats.rs:610:41: 610:44}>(move _2, const ZeroSized: {closure@src/cmd/stats.rs:610:41: 610:44}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn cmd::stats::from_bytes::{closure#0}(_1: {closure@src/cmd/stats.rs:610:41: 610:44}, _2: &str) -> std::option::Option<T> {
    debug s => _2;
    let mut _0: std::option::Option<T>;
    let mut _3: std::result::Result<T, <T as std::str::FromStr>::Err>;

    bb0: {
        _3 = core::str::<impl str>::parse::<T>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<T, <T as FromStr>::Err>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

static table::USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nOutputs CSV data as a table with columns in alignment.\n\nThis will not work well if the CSV data contains large fields.\n\nNote that formatting a table requires buffering all CSV data into memory.\nTherefore, you should use the 'sample' or 'slice' command to trim down large\nCSV data before formatting it with this command.\n\nUsage:\n    xsv table [options] [<input>]\n\ntable options:\n    -w, --width <arg>      The minimum width of each column.\n                           [default: 2]\n    -p, --pad <arg>        The minimum number of spaces between each column.\n                           [default: 2]\n    -c, --condense <arg>  Limits the length of each field to the value\n                           specified. If the field is UTF-8 encoded, then\n                           <arg> refers to the number of code points.\n                           Otherwise, it refers to the number of bytes.\n\nCommon options:\n    -h, --help             Display this message\n    -o, --output <file>    Write output to <file> instead of stdout.\n    -d, --delimiter <arg>  The field delimiter for reading CSV data.\n                           Must be a single character. (default: ,)\n";
        return;
    }
}

const table::_IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize(_1: __D) -> Result<table::Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::table::Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<table::Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::expecting(_1: &table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_u64(_1: table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor, _2: u64) -> Result<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E> {
    debug self => const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field, __E>;
    let mut _3: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _4: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _5: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _6: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _7: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _8: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _9: __E;
    let mut _10: serde::de::Unexpected<'_>;
    let mut _11: &dyn serde::de::Expected;
    let mut _12: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1];
    }

    bb1: {
        _10 = Unexpected::<'_>::Unsigned(_2);
        _12 = const _;
        _11 = _12 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _9 = <__E as serde::de::Error>::invalid_value(move _10, move _11) -> [return: bb8, unwind continue];
    }

    bb2: {
        _3 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field0;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb9;
    }

    bb3: {
        _4 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field1;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb9;
    }

    bb4: {
        _5 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field2;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb9;
    }

    bb5: {
        _6 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field3;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb9;
    }

    bb6: {
        _7 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field4;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb9;
    }

    bb7: {
        _8 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field5;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb9;
    }

    bb8: {
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

promoted[0] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 6";
        _0 = &_1;
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_str(_1: table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor, _2: &str) -> Result<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E> {
    debug self => const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _10: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _11: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _12: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _13: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _14: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _15: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;

    bb0: {
        _8 = <str as PartialEq>::eq(_2, const "arg_input") -> [return: bb18, unwind continue];
    }

    bb1: {
        _9 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field0;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb2: {
        _7 = <str as PartialEq>::eq(_2, const "flag_width") -> [return: bb17, unwind continue];
    }

    bb3: {
        _10 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field1;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb4: {
        _6 = <str as PartialEq>::eq(_2, const "flag_pad") -> [return: bb16, unwind continue];
    }

    bb5: {
        _11 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field2;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_2, const "flag_output") -> [return: bb15, unwind continue];
    }

    bb7: {
        _12 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field3;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb19;
    }

    bb8: {
        _4 = <str as PartialEq>::eq(_2, const "flag_delimiter") -> [return: bb14, unwind continue];
    }

    bb9: {
        _13 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field4;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb19;
    }

    bb10: {
        _3 = <str as PartialEq>::eq(_2, const "flag_condense") -> [return: bb13, unwind continue];
    }

    bb11: {
        _14 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field5;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb19;
    }

    bb12: {
        _15 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__ignore;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb19;
    }

    bb13: {
        switchInt(move _3) -> [0: bb12, otherwise: bb11];
    }

    bb14: {
        switchInt(move _4) -> [0: bb10, otherwise: bb9];
    }

    bb15: {
        switchInt(move _5) -> [0: bb8, otherwise: bb7];
    }

    bb16: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb17: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb18: {
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb19: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_bytes(_1: table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E> {
    debug self => const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _22: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _23: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _24: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _25: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _26: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
    let mut _27: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;

    bb0: {
        _18 = Len((*_2));
        _19 = const 9_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [97: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [103: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [110: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [112: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [117: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb72, otherwise: bb10];
    }

    bb10: {
        _27 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__ignore;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb78;
    }

    bb11: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb22, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 10]) -> [102: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 10]) -> [108: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 10]) -> [97: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 10]) -> [103: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 10]) -> [95: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_2)[5 of 10]) -> [119: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_2)[6 of 10]) -> [105: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_2)[7 of 10]) -> [100: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_2)[8 of 10]) -> [116: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_2)[9 of 10]) -> [104: bb73, otherwise: bb10];
    }

    bb22: {
        _12 = Len((*_2));
        _13 = const 8_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb31, otherwise: bb23];
    }

    bb23: {
        switchInt((*_2)[0 of 8]) -> [102: bb24, otherwise: bb10];
    }

    bb24: {
        switchInt((*_2)[1 of 8]) -> [108: bb25, otherwise: bb10];
    }

    bb25: {
        switchInt((*_2)[2 of 8]) -> [97: bb26, otherwise: bb10];
    }

    bb26: {
        switchInt((*_2)[3 of 8]) -> [103: bb27, otherwise: bb10];
    }

    bb27: {
        switchInt((*_2)[4 of 8]) -> [95: bb28, otherwise: bb10];
    }

    bb28: {
        switchInt((*_2)[5 of 8]) -> [112: bb29, otherwise: bb10];
    }

    bb29: {
        switchInt((*_2)[6 of 8]) -> [97: bb30, otherwise: bb10];
    }

    bb30: {
        switchInt((*_2)[7 of 8]) -> [100: bb74, otherwise: bb10];
    }

    bb31: {
        _9 = Len((*_2));
        _10 = const 11_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb43, otherwise: bb32];
    }

    bb32: {
        switchInt((*_2)[0 of 11]) -> [102: bb33, otherwise: bb10];
    }

    bb33: {
        switchInt((*_2)[1 of 11]) -> [108: bb34, otherwise: bb10];
    }

    bb34: {
        switchInt((*_2)[2 of 11]) -> [97: bb35, otherwise: bb10];
    }

    bb35: {
        switchInt((*_2)[3 of 11]) -> [103: bb36, otherwise: bb10];
    }

    bb36: {
        switchInt((*_2)[4 of 11]) -> [95: bb37, otherwise: bb10];
    }

    bb37: {
        switchInt((*_2)[5 of 11]) -> [111: bb38, otherwise: bb10];
    }

    bb38: {
        switchInt((*_2)[6 of 11]) -> [117: bb39, otherwise: bb10];
    }

    bb39: {
        switchInt((*_2)[7 of 11]) -> [116: bb40, otherwise: bb10];
    }

    bb40: {
        switchInt((*_2)[8 of 11]) -> [112: bb41, otherwise: bb10];
    }

    bb41: {
        switchInt((*_2)[9 of 11]) -> [117: bb42, otherwise: bb10];
    }

    bb42: {
        switchInt((*_2)[10 of 11]) -> [116: bb75, otherwise: bb10];
    }

    bb43: {
        _6 = Len((*_2));
        _7 = const 14_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb58, otherwise: bb44];
    }

    bb44: {
        switchInt((*_2)[0 of 14]) -> [102: bb45, otherwise: bb10];
    }

    bb45: {
        switchInt((*_2)[1 of 14]) -> [108: bb46, otherwise: bb10];
    }

    bb46: {
        switchInt((*_2)[2 of 14]) -> [97: bb47, otherwise: bb10];
    }

    bb47: {
        switchInt((*_2)[3 of 14]) -> [103: bb48, otherwise: bb10];
    }

    bb48: {
        switchInt((*_2)[4 of 14]) -> [95: bb49, otherwise: bb10];
    }

    bb49: {
        switchInt((*_2)[5 of 14]) -> [100: bb50, otherwise: bb10];
    }

    bb50: {
        switchInt((*_2)[6 of 14]) -> [101: bb51, otherwise: bb10];
    }

    bb51: {
        switchInt((*_2)[7 of 14]) -> [108: bb52, otherwise: bb10];
    }

    bb52: {
        switchInt((*_2)[8 of 14]) -> [105: bb53, otherwise: bb10];
    }

    bb53: {
        switchInt((*_2)[9 of 14]) -> [109: bb54, otherwise: bb10];
    }

    bb54: {
        switchInt((*_2)[10 of 14]) -> [105: bb55, otherwise: bb10];
    }

    bb55: {
        switchInt((*_2)[11 of 14]) -> [116: bb56, otherwise: bb10];
    }

    bb56: {
        switchInt((*_2)[12 of 14]) -> [101: bb57, otherwise: bb10];
    }

    bb57: {
        switchInt((*_2)[13 of 14]) -> [114: bb76, otherwise: bb10];
    }

    bb58: {
        _3 = Len((*_2));
        _4 = const 13_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb59];
    }

    bb59: {
        switchInt((*_2)[0 of 13]) -> [102: bb60, otherwise: bb10];
    }

    bb60: {
        switchInt((*_2)[1 of 13]) -> [108: bb61, otherwise: bb10];
    }

    bb61: {
        switchInt((*_2)[2 of 13]) -> [97: bb62, otherwise: bb10];
    }

    bb62: {
        switchInt((*_2)[3 of 13]) -> [103: bb63, otherwise: bb10];
    }

    bb63: {
        switchInt((*_2)[4 of 13]) -> [95: bb64, otherwise: bb10];
    }

    bb64: {
        switchInt((*_2)[5 of 13]) -> [99: bb65, otherwise: bb10];
    }

    bb65: {
        switchInt((*_2)[6 of 13]) -> [111: bb66, otherwise: bb10];
    }

    bb66: {
        switchInt((*_2)[7 of 13]) -> [110: bb67, otherwise: bb10];
    }

    bb67: {
        switchInt((*_2)[8 of 13]) -> [100: bb68, otherwise: bb10];
    }

    bb68: {
        switchInt((*_2)[9 of 13]) -> [101: bb69, otherwise: bb10];
    }

    bb69: {
        switchInt((*_2)[10 of 13]) -> [110: bb70, otherwise: bb10];
    }

    bb70: {
        switchInt((*_2)[11 of 13]) -> [115: bb71, otherwise: bb10];
    }

    bb71: {
        switchInt((*_2)[12 of 13]) -> [101: bb77, otherwise: bb10];
    }

    bb72: {
        _21 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field0;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb78;
    }

    bb73: {
        _22 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field1;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb78;
    }

    bb74: {
        _23 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field2;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb78;
    }

    bb75: {
        _24 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field3;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb78;
    }

    bb76: {
        _25 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field4;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb78;
    }

    bb77: {
        _26 = table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field::__field5;
        _0 = Result::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb78;
    }

    bb78: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize(_1: __D) -> Result<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor>(move _1, const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::expecting(_1: &table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq(_1: table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<table::Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<table::Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<cmd::table::Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::option::Option<std::string::String>>;
    let _8: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::option::Option<std::string::String>;
    let mut _11: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<usize>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::option::Option<config::Delimiter>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn serde::de::Expected;
    let mut _50: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _51: &mut __A;
    let mut _52: isize;
    let mut _55: isize;
    let mut _57: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _58: &dyn serde::de::Expected;
    let mut _59: cmd::table::Args;
    let mut _60: std::option::Option<std::string::String>;
    let mut _61: std::option::Option<std::string::String>;
    let mut _62: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<usize>;
        let _17: <__A as serde::de::SeqAccess<'_>>::Error;
        let _19: usize;
        let mut _63: &&str;
        scope 5 {
            debug __field1 => _19;
            let _25: std::option::Option<usize>;
            let _26: <__A as serde::de::SeqAccess<'_>>::Error;
            let _28: usize;
            let mut _64: &&str;
            scope 9 {
                debug __field2 => _28;
                let _31: std::option::Option<std::string::String>;
                let _35: std::option::Option<std::option::Option<std::string::String>>;
                let _36: <__A as serde::de::SeqAccess<'_>>::Error;
                let _38: std::option::Option<std::string::String>;
                let mut _65: &&str;
                scope 13 {
                    debug __field3 => _31;
                    let _44: std::option::Option<std::option::Option<config::Delimiter>>;
                    let _45: <__A as serde::de::SeqAccess<'_>>::Error;
                    let _47: std::option::Option<config::Delimiter>;
                    let mut _66: &&str;
                    scope 17 {
                        debug __field4 => _47;
                        let _53: std::option::Option<std::option::Option<usize>>;
                        let _54: <__A as serde::de::SeqAccess<'_>>::Error;
                        let _56: std::option::Option<usize>;
                        let mut _67: &&str;
                        scope 21 {
                            debug __field5 => _56;
                        }
                        scope 22 {
                            debug __val => _53;
                        }
                        scope 23 {
                            debug __err => _54;
                        }
                        scope 24 {
                            debug __value => _56;
                        }
                    }
                    scope 18 {
                        debug __val => _44;
                    }
                    scope 19 {
                        debug __err => _45;
                    }
                    scope 20 {
                        debug __value => _47;
                    }
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _25;
            }
            scope 11 {
                debug __err => _26;
            }
            scope 12 {
                debug __value => _28;
            }
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_5) -> [return: bb1, unwind: bb44];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb40;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _62 = const _;
        _12 = _62 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb44];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::option::Option<std::string::String>);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<usize>(_14) -> [return: bb8, unwind: bb43];
    }

    bb7: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb40;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb39;
    }

    bb10: {
        _16 = ((_13 as Ok).0: std::option::Option<usize>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _63 = const _;
        _21 = _63 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb43];
    }

    bb12: {
        _19 = ((_16 as Some).0: usize);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<usize>(_23) -> [return: bb14, unwind: bb43];
    }

    bb13: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb39;
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb39;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::option::Option<usize>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _64 = const _;
        _30 = _64 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb19, unwind: bb43];
    }

    bb18: {
        _28 = ((_25 as Some).0: usize);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_33) -> [return: bb20, unwind: bb43];
    }

    bb19: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb39;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb39;
    }

    bb22: {
        _35 = move ((_32 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _65 = const _;
        _40 = _65 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb43];
    }

    bb24: {
        _38 = move ((_35 as Some).0: std::option::Option<std::string::String>);
        _31 = move _38;
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Delimiter>>(_42) -> [return: bb26, unwind: bb42];
    }

    bb25: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb39;
    }

    bb26: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _45 = move ((_41 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb38;
    }

    bb28: {
        _44 = ((_41 as Ok).0: std::option::Option<std::option::Option<config::Delimiter>>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _66 = const _;
        _49 = _66 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb31, unwind: bb42];
    }

    bb30: {
        _47 = ((_44 as Some).0: std::option::Option<config::Delimiter>);
        _51 = &mut _2;
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_51) -> [return: bb32, unwind: bb42];
    }

    bb31: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb38;
    }

    bb32: {
        _52 = discriminant(_50);
        switchInt(move _52) -> [0: bb34, 1: bb33, otherwise: bb3];
    }

    bb33: {
        _54 = move ((_50 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _54);
        goto -> bb38;
    }

    bb34: {
        _53 = ((_50 as Ok).0: std::option::Option<std::option::Option<usize>>);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb36, otherwise: bb3];
    }

    bb35: {
        _67 = const _;
        _58 = _67 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _57 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb37, unwind: bb42];
    }

    bb36: {
        _56 = ((_53 as Some).0: std::option::Option<usize>);
        _60 = move _3;
        _61 = move _31;
        _59 = table::Args { arg_input: move _60, flag_width: _19, flag_pad: _28, flag_output: move _61, flag_delimiter: _47, flag_condense: _56 };
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Ok(move _59);
        drop(_2) -> [return: bb41, unwind continue];
    }

    bb37: {
        _0 = Result::<table::Args, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb38;
    }

    bb38: {
        drop(_31) -> [return: bb39, unwind: bb43];
    }

    bb39: {
        drop(_3) -> [return: bb40, unwind: bb44];
    }

    bb40: {
        drop(_2) -> [return: bb41, unwind continue];
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_31) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_3) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_2) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }
}

promoted[0] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 6 elements";
        _0 = &_1;
        return;
    }
}

fn table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::<impl at src/cmd/table.rs:39:10: 39:21>::visit_map(_1: table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<table::Args, <__A as MapAccess<'_>>::Error> {
    debug self => const table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<table::Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<cmd::table::Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<std::string::String>>;
    let mut _9: std::result::Result<std::option::Option<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _10: &mut __A;
    let mut _11: isize;
    let mut _14: isize;
    let mut _16: isize;
    let mut _17: bool;
    let _18: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _19: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _20: std::option::Option<std::option::Option<std::string::String>>;
    let mut _21: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: bool;
    let _27: &std::option::Option<usize>;
    let mut _28: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _29: std::option::Option<usize>;
    let mut _30: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: bool;
    let _36: &std::option::Option<usize>;
    let mut _37: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _38: std::option::Option<usize>;
    let mut _39: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _40: &mut __A;
    let mut _41: isize;
    let mut _44: bool;
    let _45: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _46: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _47: std::option::Option<std::option::Option<std::string::String>>;
    let mut _48: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _49: &mut __A;
    let mut _50: isize;
    let mut _53: bool;
    let _54: &std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _55: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _56: std::option::Option<std::option::Option<config::Delimiter>>;
    let mut _57: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _58: &mut __A;
    let mut _59: isize;
    let mut _62: bool;
    let _63: &std::option::Option<std::option::Option<usize>>;
    let mut _64: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _65: std::option::Option<std::option::Option<usize>>;
    let mut _66: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _67: &mut __A;
    let mut _68: isize;
    let mut _71: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _72: &mut __A;
    let mut _73: isize;
    let mut _76: isize;
    let mut _78: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _79: isize;
    let mut _83: isize;
    let mut _85: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _86: isize;
    let mut _90: isize;
    let mut _92: std::result::Result<usize, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _93: isize;
    let mut _97: isize;
    let mut _99: std::result::Result<std::option::Option<std::string::String>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _100: isize;
    let mut _104: isize;
    let mut _106: std::result::Result<std::option::Option<config::Delimiter>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _107: isize;
    let mut _111: isize;
    let mut _113: std::result::Result<std::option::Option<usize>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _114: isize;
    let mut _117: cmd::table::Args;
    let mut _118: std::option::Option<std::string::String>;
    let mut _119: usize;
    let mut _120: usize;
    let mut _121: std::option::Option<std::string::String>;
    let mut _122: std::option::Option<config::Delimiter>;
    let mut _123: std::option::Option<usize>;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<usize>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<usize>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<std::option::Option<std::string::String>>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::option::Option<config::Delimiter>>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::option::Option<usize>>;
                        scope 6 {
                            debug __field5 => _8;
                            let _75: std::option::Option<std::string::String>;
                            let _77: std::option::Option<std::string::String>;
                            let _80: std::option::Option<std::string::String>;
                            let _81: <__A as serde::de::MapAccess<'_>>::Error;
                            scope 7 {
                                debug __key => _15;
                                let _12: std::option::Option<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field>;
                                let _13: <__A as serde::de::MapAccess<'_>>::Error;
                                let _15: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field;
                                let _24: std::option::Option<std::string::String>;
                                let _25: <__A as serde::de::MapAccess<'_>>::Error;
                                let _33: usize;
                                let _34: <__A as serde::de::MapAccess<'_>>::Error;
                                let _42: usize;
                                let _43: <__A as serde::de::MapAccess<'_>>::Error;
                                let _51: std::option::Option<std::string::String>;
                                let _52: <__A as serde::de::MapAccess<'_>>::Error;
                                let _60: std::option::Option<config::Delimiter>;
                                let _61: <__A as serde::de::MapAccess<'_>>::Error;
                                let _69: std::option::Option<usize>;
                                let _70: <__A as serde::de::MapAccess<'_>>::Error;
                                let _74: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 8 {
                                    debug __val => _12;
                                }
                                scope 9 {
                                    debug __err => _13;
                                }
                                scope 10 {
                                    debug __val => _24;
                                }
                                scope 11 {
                                    debug __err => _25;
                                }
                                scope 12 {
                                    debug __val => _33;
                                }
                                scope 13 {
                                    debug __err => _34;
                                }
                                scope 14 {
                                    debug __val => _42;
                                }
                                scope 15 {
                                    debug __err => _43;
                                }
                                scope 16 {
                                    debug __val => _51;
                                }
                                scope 17 {
                                    debug __err => _52;
                                }
                                scope 18 {
                                    debug __val => _60;
                                }
                                scope 19 {
                                    debug __err => _61;
                                }
                                scope 20 {
                                    debug __val => _69;
                                }
                                scope 21 {
                                    debug __err => _70;
                                }
                                scope 22 {
                                }
                                scope 23 {
                                    debug __val => const IgnoredAny;
                                }
                                scope 24 {
                                    debug __err => _74;
                                }
                            }
                            scope 25 {
                                debug __field0 => _75;
                                let _82: usize;
                                let _84: usize;
                                let _87: usize;
                                let _88: <__A as serde::de::MapAccess<'_>>::Error;
                                scope 29 {
                                    debug __field1 => _82;
                                    let _89: usize;
                                    let _91: usize;
                                    let _94: usize;
                                    let _95: <__A as serde::de::MapAccess<'_>>::Error;
                                    scope 33 {
                                        debug __field2 => _89;
                                        let _96: std::option::Option<std::string::String>;
                                        let _98: std::option::Option<std::string::String>;
                                        let _101: std::option::Option<std::string::String>;
                                        let _102: <__A as serde::de::MapAccess<'_>>::Error;
                                        scope 37 {
                                            debug __field3 => _96;
                                            let _103: std::option::Option<config::Delimiter>;
                                            let _105: std::option::Option<config::Delimiter>;
                                            let _108: std::option::Option<config::Delimiter>;
                                            let _109: <__A as serde::de::MapAccess<'_>>::Error;
                                            scope 41 {
                                                debug __field4 => _103;
                                                let _110: std::option::Option<usize>;
                                                let _112: std::option::Option<usize>;
                                                let _115: std::option::Option<usize>;
                                                let _116: <__A as serde::de::MapAccess<'_>>::Error;
                                                scope 45 {
                                                    debug __field5 => _110;
                                                }
                                                scope 46 {
                                                    debug __field5 => _112;
                                                }
                                                scope 47 {
                                                    debug __val => _115;
                                                }
                                                scope 48 {
                                                    debug __err => _116;
                                                }
                                            }
                                            scope 42 {
                                                debug __field4 => _105;
                                            }
                                            scope 43 {
                                                debug __val => _108;
                                            }
                                            scope 44 {
                                                debug __err => _109;
                                            }
                                        }
                                        scope 38 {
                                            debug __field3 => _98;
                                        }
                                        scope 39 {
                                            debug __val => _101;
                                        }
                                        scope 40 {
                                            debug __err => _102;
                                        }
                                    }
                                    scope 34 {
                                        debug __field2 => _91;
                                    }
                                    scope 35 {
                                        debug __val => _94;
                                    }
                                    scope 36 {
                                        debug __err => _95;
                                    }
                                }
                                scope 30 {
                                    debug __field1 => _84;
                                }
                                scope 31 {
                                    debug __val => _87;
                                }
                                scope 32 {
                                    debug __err => _88;
                                }
                            }
                            scope 26 {
                                debug __field0 => _77;
                            }
                            scope 27 {
                                debug __val => _80;
                            }
                            scope 28 {
                                debug __err => _81;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _125 = const false;
        _124 = const false;
        _125 = const true;
        _3 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _4 = std::option::Option::<usize>::None;
        _5 = std::option::Option::<usize>::None;
        _124 = const true;
        _6 = std::option::Option::<std::option::Option<std::string::String>>::None;
        _7 = std::option::Option::<std::option::Option<Delimiter>>::None;
        _8 = std::option::Option::<std::option::Option<usize>>::None;
        goto -> bb1;
    }

    bb1: {
        _10 = &mut _2;
        _9 = <__A as MapAccess<'_>>::next_key::<table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for table::Args>::deserialize::__Field>(_10) -> [return: bb2, unwind: bb116];
    }

    bb2: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_9 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _13);
        goto -> bb101;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_9 as Ok).0: std::option::Option<cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field>);
        _14 = discriminant(_12);
        switchInt(move _14) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _76 = discriminant(_3);
        switchInt(move _76) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb7: {
        _15 = move ((_12 as Some).0: cmd::table::_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for cmd::table::Args>::deserialize::__Field);
        _16 = discriminant(_15);
        switchInt(move _16) -> [0: bb9, 1: bb19, 2: bb27, 3: bb35, 4: bb45, 5: bb53, otherwise: bb8];
    }

    bb8: {
        _72 = &mut _2;
        _71 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_72) -> [return: bb61, unwind: bb116];
    }

    bb9: {
        _18 = &_3;
        _17 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_18) -> [return: bb10, unwind: bb116];
    }

    bb10: {
        switchInt(move _17) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _19 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_input") -> [return: bb12, unwind: bb116];
    }

    bb12: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _19);
        goto -> bb101;
    }

    bb13: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_22) -> [return: bb14, unwind: bb116];
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb101;
    }

    bb16: {
        _24 = move ((_21 as Ok).0: std::option::Option<std::string::String>);
        _20 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _24);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _125 = const true;
        _3 = move _20;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _125 = const true;
        _3 = move _20;
        goto -> bb116;
    }

    bb19: {
        _27 = &_4;
        _26 = std::option::Option::<usize>::is_some(_27) -> [return: bb20, unwind: bb116];
    }

    bb20: {
        switchInt(move _26) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _28 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_width") -> [return: bb22, unwind: bb116];
    }

    bb22: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb101;
    }

    bb23: {
        _31 = &mut _2;
        _30 = <__A as MapAccess<'_>>::next_value::<usize>(_31) -> [return: bb24, unwind: bb116];
    }

    bb24: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _34 = move ((_30 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb101;
    }

    bb26: {
        _33 = ((_30 as Ok).0: usize);
        _29 = std::option::Option::<usize>::Some(_33);
        _4 = move _29;
        goto -> bb1;
    }

    bb27: {
        _36 = &_5;
        _35 = std::option::Option::<usize>::is_some(_36) -> [return: bb28, unwind: bb116];
    }

    bb28: {
        switchInt(move _35) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _37 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_pad") -> [return: bb30, unwind: bb116];
    }

    bb30: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb101;
    }

    bb31: {
        _40 = &mut _2;
        _39 = <__A as MapAccess<'_>>::next_value::<usize>(_40) -> [return: bb32, unwind: bb116];
    }

    bb32: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _43 = move ((_39 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _43);
        goto -> bb101;
    }

    bb34: {
        _42 = ((_39 as Ok).0: usize);
        _38 = std::option::Option::<usize>::Some(_42);
        _5 = move _38;
        goto -> bb1;
    }

    bb35: {
        _45 = &_6;
        _44 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_45) -> [return: bb36, unwind: bb116];
    }

    bb36: {
        switchInt(move _44) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _46 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_output") -> [return: bb38, unwind: bb116];
    }

    bb38: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb101;
    }

    bb39: {
        _49 = &mut _2;
        _48 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_49) -> [return: bb40, unwind: bb116];
    }

    bb40: {
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        _52 = move ((_48 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _52);
        goto -> bb101;
    }

    bb42: {
        _51 = move ((_48 as Ok).0: std::option::Option<std::string::String>);
        _47 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _51);
        drop(_6) -> [return: bb43, unwind: bb44];
    }

    bb43: {
        _124 = const true;
        _6 = move _47;
        goto -> bb1;
    }

    bb44 (cleanup): {
        _124 = const true;
        _6 = move _47;
        goto -> bb116;
    }

    bb45: {
        _54 = &_7;
        _53 = std::option::Option::<std::option::Option<Delimiter>>::is_some(_54) -> [return: bb46, unwind: bb116];
    }

    bb46: {
        switchInt(move _53) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _55 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_delimiter") -> [return: bb48, unwind: bb116];
    }

    bb48: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb101;
    }

    bb49: {
        _58 = &mut _2;
        _57 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Delimiter>>(_58) -> [return: bb50, unwind: bb116];
    }

    bb50: {
        _59 = discriminant(_57);
        switchInt(move _59) -> [0: bb52, 1: bb51, otherwise: bb4];
    }

    bb51: {
        _61 = move ((_57 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb101;
    }

    bb52: {
        _60 = ((_57 as Ok).0: std::option::Option<config::Delimiter>);
        _56 = std::option::Option::<std::option::Option<Delimiter>>::Some(_60);
        _7 = move _56;
        goto -> bb1;
    }

    bb53: {
        _63 = &_8;
        _62 = std::option::Option::<std::option::Option<usize>>::is_some(_63) -> [return: bb54, unwind: bb116];
    }

    bb54: {
        switchInt(move _62) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        _64 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_condense") -> [return: bb56, unwind: bb116];
    }

    bb56: {
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb101;
    }

    bb57: {
        _67 = &mut _2;
        _66 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_67) -> [return: bb58, unwind: bb116];
    }

    bb58: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        _70 = move ((_66 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _70);
        goto -> bb101;
    }

    bb60: {
        _69 = ((_66 as Ok).0: std::option::Option<usize>);
        _65 = std::option::Option::<std::option::Option<usize>>::Some(_69);
        _8 = move _65;
        goto -> bb1;
    }

    bb61: {
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb1, 1: bb62, otherwise: bb4];
    }

    bb62: {
        _74 = move ((_71 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb101;
    }

    bb63: {
        _78 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "arg_input") -> [return: bb65, unwind: bb116];
    }

    bb64: {
        _125 = const false;
        _77 = move ((_3 as Some).0: std::option::Option<std::string::String>);
        _75 = move _77;
        goto -> bb68;
    }

    bb65: {
        _79 = discriminant(_78);
        switchInt(move _79) -> [0: bb67, 1: bb66, otherwise: bb4];
    }

    bb66: {
        _81 = move ((_78 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _81);
        goto -> bb101;
    }

    bb67: {
        _80 = move ((_78 as Ok).0: std::option::Option<std::string::String>);
        _75 = move _80;
        goto -> bb68;
    }

    bb68: {
        _83 = discriminant(_4);
        switchInt(move _83) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        _85 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_width") -> [return: bb71, unwind: bb104];
    }

    bb70: {
        _84 = ((_4 as Some).0: usize);
        _82 = _84;
        goto -> bb74;
    }

    bb71: {
        _86 = discriminant(_85);
        switchInt(move _86) -> [0: bb73, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _88 = move ((_85 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _88);
        goto -> bb100;
    }

    bb73: {
        _87 = ((_85 as Ok).0: usize);
        _82 = _87;
        goto -> bb74;
    }

    bb74: {
        _90 = discriminant(_5);
        switchInt(move _90) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        _92 = serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "flag_pad") -> [return: bb77, unwind: bb104];
    }

    bb76: {
        _91 = ((_5 as Some).0: usize);
        _89 = _91;
        goto -> bb80;
    }

    bb77: {
        _93 = discriminant(_92);
        switchInt(move _93) -> [0: bb79, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _95 = move ((_92 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _95);
        goto -> bb100;
    }

    bb79: {
        _94 = ((_92 as Ok).0: usize);
        _89 = _94;
        goto -> bb80;
    }

    bb80: {
        _97 = discriminant(_6);
        switchInt(move _97) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        _99 = serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "flag_output") -> [return: bb83, unwind: bb104];
    }

    bb82: {
        _124 = const false;
        _98 = move ((_6 as Some).0: std::option::Option<std::string::String>);
        _96 = move _98;
        goto -> bb86;
    }

    bb83: {
        _100 = discriminant(_99);
        switchInt(move _100) -> [0: bb85, 1: bb84, otherwise: bb4];
    }

    bb84: {
        _102 = move ((_99 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _102);
        goto -> bb100;
    }

    bb85: {
        _101 = move ((_99 as Ok).0: std::option::Option<std::string::String>);
        _96 = move _101;
        goto -> bb86;
    }

    bb86: {
        _104 = discriminant(_7);
        switchInt(move _104) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        _106 = serde::private::de::missing_field::<'_, std::option::Option<Delimiter>, <__A as MapAccess<'_>>::Error>(const "flag_delimiter") -> [return: bb89, unwind: bb103];
    }

    bb88: {
        _105 = ((_7 as Some).0: std::option::Option<config::Delimiter>);
        _103 = _105;
        goto -> bb92;
    }

    bb89: {
        _107 = discriminant(_106);
        switchInt(move _107) -> [0: bb91, 1: bb90, otherwise: bb4];
    }

    bb90: {
        _109 = move ((_106 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _109);
        goto -> bb99;
    }

    bb91: {
        _108 = ((_106 as Ok).0: std::option::Option<config::Delimiter>);
        _103 = _108;
        goto -> bb92;
    }

    bb92: {
        _111 = discriminant(_8);
        switchInt(move _111) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        _113 = serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "flag_condense") -> [return: bb95, unwind: bb103];
    }

    bb94: {
        _112 = ((_8 as Some).0: std::option::Option<usize>);
        _110 = _112;
        goto -> bb98;
    }

    bb95: {
        _114 = discriminant(_113);
        switchInt(move _114) -> [0: bb97, 1: bb96, otherwise: bb4];
    }

    bb96: {
        _116 = move ((_113 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Err(move _116);
        goto -> bb99;
    }

    bb97: {
        _115 = ((_113 as Ok).0: std::option::Option<usize>);
        _110 = _115;
        goto -> bb98;
    }

    bb98: {
        _118 = move _75;
        _119 = _82;
        _120 = _89;
        _121 = move _96;
        _122 = _103;
        _123 = _110;
        _117 = table::Args { arg_input: move _118, flag_width: move _119, flag_pad: move _120, flag_output: move _121, flag_delimiter: move _122, flag_condense: move _123 };
        _0 = Result::<table::Args, <__A as MapAccess<'_>>::Error>::Ok(move _117);
        _124 = const false;
        _125 = const false;
        drop(_2) -> [return: bb102, unwind continue];
    }

    bb99: {
        drop(_96) -> [return: bb100, unwind: bb104];
    }

    bb100: {
        drop(_75) -> [return: bb101, unwind: bb116];
    }

    bb101: {
        _126 = discriminant(_6);
        switchInt(move _126) -> [1: bb109, otherwise: bb108];
    }

    bb102: {
        return;
    }

    bb103 (cleanup): {
        drop(_96) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_75) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        _129 = discriminant(_3);
        switchInt(move _129) -> [1: bb117, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop(_2) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }

    bb108: {
        _124 = const false;
        _127 = discriminant(_3);
        switchInt(move _127) -> [1: bb112, otherwise: bb111];
    }

    bb109: {
        switchInt(_124) -> [0: bb108, otherwise: bb110];
    }

    bb110: {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb108, unwind: bb105];
    }

    bb111: {
        _125 = const false;
        drop(_2) -> [return: bb102, unwind continue];
    }

    bb112: {
        switchInt(_125) -> [0: bb111, otherwise: bb113];
    }

    bb113: {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb111, unwind: bb106];
    }

    bb114 (cleanup): {
        switchInt(_124) -> [0: bb105, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop(((_6 as Some).0: std::option::Option<std::string::String>)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        _128 = discriminant(_6);
        switchInt(move _128) -> [1: bb114, otherwise: bb105];
    }

    bb117 (cleanup): {
        switchInt(_125) -> [0: bb106, otherwise: bb118];
    }

    bb118 (cleanup): {
        drop(((_3 as Some).0: std::option::Option<std::string::String>)) -> [return: bb106, unwind terminate(cleanup)];
    }
}

const table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 6];
    let _2: &[&str; 6];
    let _3: [&str; 6];
    let mut _4: &[&str; 6];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in table::_IMPL_DESERIALIZE_FOR_Args::<impl at src/cmd/table.rs:39:10: 39:21>::deserialize::FIELDS: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];

    bb0: {
        _1 = [const "arg_input", const "flag_width", const "flag_pad", const "flag_output", const "flag_delimiter", const "flag_condense"];
        _0 = &_1;
        return;
    }
}

fn table::run(_1: &[&str]) -> Result<(), CliError> {
    debug argv => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: cmd::table::Args;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, cmd::table::Args>;
    let mut _4: std::result::Result<cmd::table::Args, CliError>;
    let _5: &&str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, CliError>;
    let _8: cmd::table::Args;
    let mut _10: config::Config;
    let mut _11: config::Config;
    let _12: &std::option::Option<std::string::String>;
    let mut _13: std::option::Option<config::Delimiter>;
    let mut _15: config::Config;
    let _16: &std::option::Option<std::string::String>;
    let mut _17: std::option::Option<config::Delimiter>;
    let mut _18: config::Delimiter;
    let mut _20: tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>;
    let mut _21: tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::boxed::Box<dyn std::io::Write>>;
    let mut _23: std::result::Result<std::boxed::Box<dyn std::io::Write>, std::io::Error>;
    let mut _24: &config::Config;
    let mut _25: isize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _31: &config::Config;
    let mut _32: tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, csv::Reader<std::boxed::Box<dyn std::io::Read>>>;
    let mut _35: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _36: &config::Config;
    let mut _37: isize;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, bool>;
    let mut _42: std::result::Result<bool, csv::Error>;
    let mut _43: &mut csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _44: &mut csv::ByteRecord;
    let mut _45: isize;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _49: std::result::Result<(), csv::Error>;
    let mut _50: &mut csv::Writer<tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>>;
    let mut _51: std::iter::Map<csv::ByteRecordIter<'_>, {closure@src/cmd/table.rs:65:44: 65:47}>;
    let mut _52: csv::ByteRecordIter<'_>;
    let mut _53: &csv::ByteRecord;
    let mut _54: {closure@src/cmd/table.rs:65:44: 65:47};
    let mut _55: &cmd::table::Args;
    let mut _56: isize;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _59: std::result::Result<(), std::io::Error>;
    let mut _60: &mut csv::Writer<tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>>;
    let mut _61: isize;
    let mut _63: &str;
    let mut _64: bool;
    scope 1 {
        debug args => _2;
        let _9: config::Config;
        scope 6 {
            debug rconfig => _9;
            let _14: config::Config;
            scope 7 {
                debug wconfig => _14;
                let _19: tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>;
                let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _27: std::boxed::Box<dyn std::io::Write>;
                scope 8 {
                    debug tw => _19;
                    let mut _30: csv::Writer<tabwriter::TabWriter<std::boxed::Box<dyn std::io::Write>>>;
                    scope 13 {
                        debug wtr => _30;
                        let mut _33: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                        let _38: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _39: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
                        scope 14 {
                            debug rdr => _33;
                            let mut _40: csv::ByteRecord;
                            scope 19 {
                                debug record => _40;
                                let _46: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _47: bool;
                                let _57: std::result::Result<std::convert::Infallible, csv::Error>;
                                let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
                                scope 20 {
                                    debug residual => _46;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _47;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug residual => _57;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => const ();
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug residual => _62;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => const ();
                                    scope 31 {
                                    }
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _38;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _39;
                            scope 18 {
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _26;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _27;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _64 = const false;
        _5 = const {alloc32: &&str};
        _63 = deref_copy (*_5);
        _4 = get_args::<table::Args>(_63, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<table::Args, CliError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Continue).0: cmd::table::Args);
        _2 = move _8;
        _12 = &(_2.0: std::option::Option<std::string::String>);
        _11 = Config::new(_12) -> [return: bb6, unwind: bb54];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _7) -> [return: bb48, unwind continue];
    }

    bb6: {
        _13 = (_2.4: std::option::Option<config::Delimiter>);
        _10 = Config::delimiter(move _11, move _13) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        _9 = Config::no_headers(move _10, const true) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        _16 = &(_2.3: std::option::Option<std::string::String>);
        _15 = Config::new(_16) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        _18 = Delimiter(const 9_u8);
        _17 = std::option::Option::<Delimiter>::Some(move _18);
        _14 = Config::delimiter(move _15, move _17) -> [return: bb10, unwind: bb53];
    }

    bb10: {
        _24 = &_14;
        _23 = Config::io_writer(move _24) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _22 = <Result<Box<dyn std::io::Write>, std::io::Error> as Try>::branch(move _23) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _27 = move ((_22 as Continue).0: std::boxed::Box<dyn std::io::Write>);
        _21 = TabWriter::<Box<dyn std::io::Write>>::new(move _27) -> [return: bb15, unwind: bb52];
    }

    bb14: {
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _26) -> [return: bb60, unwind: bb52];
    }

    bb15: {
        _28 = (_2.1: usize);
        _20 = TabWriter::<Box<dyn std::io::Write>>::minwidth(move _21, move _28) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _29 = (_2.2: usize);
        _19 = TabWriter::<Box<dyn std::io::Write>>::padding(move _20, move _29) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _64 = const true;
        _31 = &_14;
        _64 = const false;
        _32 = move _19;
        _30 = Config::from_writer::<TabWriter<Box<dyn std::io::Write>>>(move _31, move _32) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        _36 = &_9;
        _35 = Config::reader(move _36) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        _34 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as Try>::branch(move _35) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _39 = move ((_34 as Continue).0: csv::Reader<std::boxed::Box<dyn std::io::Read>>);
        _33 = move _39;
        _40 = ByteRecord::new() -> [return: bb61, unwind: bb50];
    }

    bb22: {
        _38 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _38) -> [return: bb62, unwind: bb51];
    }

    bb23: {
        _43 = &mut _33;
        _44 = &mut _40;
        _42 = Reader::<Box<dyn std::io::Read>>::read_byte_record(move _43, _44) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        _41 = <Result<bool, csv::Error> as Try>::branch(move _42) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _45 = discriminant(_41);
        switchInt(move _45) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _47 = ((_41 as Continue).0: bool);
        switchInt(_47) -> [0: bb57, otherwise: bb56];
    }

    bb27: {
        _46 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _46) -> [return: bb63, unwind: bb49];
    }

    bb28: {
        _55 = &_2;
        _54 = {closure@src/cmd/table.rs:65:44: 65:47} { args: move _55 };
        _51 = <ByteRecordIter<'_> as Iterator>::map::<Cow<'_, [u8]>, {closure@src/cmd/table.rs:65:44: 65:47}>(move _52, move _54) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _49 = Writer::<TabWriter<Box<dyn std::io::Write>>>::write_record::<std::iter::Map<ByteRecordIter<'_>, {closure@src/cmd/table.rs:65:44: 65:47}>, Cow<'_, [u8]>>(move _50, move _51) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _48 = <Result<(), csv::Error> as Try>::branch(move _49) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _56 = discriminant(_48);
        switchInt(move _56) -> [0: bb23, 1: bb32, otherwise: bb4];
    }

    bb32: {
        _57 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _57) -> [return: bb64, unwind: bb49];
    }

    bb33: {
        _58 = <Result<(), std::io::Error> as Try>::branch(move _59) -> [return: bb34, unwind: bb49];
    }

    bb34: {
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        _0 = Result::<(), CliError>::Ok(const ());
        drop(_40) -> [return: bb37, unwind: bb50];
    }

    bb36: {
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _62) -> [return: bb65, unwind: bb49];
    }

    bb37: {
        drop(_33) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        drop(_30) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        _64 = const false;
        drop(_14) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        drop(_9) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb42: {
        drop(_40) -> [return: bb43, unwind: bb50];
    }

    bb43: {
        drop(_33) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        drop(_30) -> [return: bb45, unwind: bb59];
    }

    bb45: {
        _64 = const false;
        drop(_14) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        drop(_9) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        drop(_2) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_40) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_33) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_30) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_14) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_9) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_2) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56: {
        _50 = &mut _30;
        _53 = &_40;
        _52 = ByteRecord::iter(move _53) -> [return: bb28, unwind: bb49];
    }

    bb57: {
        _60 = &mut _30;
        _59 = Writer::<TabWriter<Box<dyn std::io::Write>>>::flush(move _60) -> [return: bb33, unwind: bb49];
    }

    bb58 (cleanup): {
        drop(_19) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_64) -> [0: bb52, otherwise: bb58];
    }

    bb60: {
        goto -> bb45;
    }

    bb61: {
        goto -> bb23;
    }

    bb62: {
        goto -> bb44;
    }

    bb63: {
        goto -> bb42;
    }

    bb64: {
        goto -> bb42;
    }

    bb65: {
        goto -> bb42;
    }
}

alloc32 (static: table::USAGE, size: 16, align: 8) {
    ╾───alloc2028<imm>────╼ 83 04 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2028 (size: 1155, align: 1) {
    0x000 │ 0a 4f 75 74 70 75 74 73 20 43 53 56 20 64 61 74 │ .Outputs CSV dat
    0x010 │ 61 20 61 73 20 61 20 74 61 62 6c 65 20 77 69 74 │ a as a table wit
    0x020 │ 68 20 63 6f 6c 75 6d 6e 73 20 69 6e 20 61 6c 69 │ h columns in ali
    0x030 │ 67 6e 6d 65 6e 74 2e 0a 0a 54 68 69 73 20 77 69 │ gnment...This wi
    0x040 │ 6c 6c 20 6e 6f 74 20 77 6f 72 6b 20 77 65 6c 6c │ ll not work well
    0x050 │ 20 69 66 20 74 68 65 20 43 53 56 20 64 61 74 61 │  if the CSV data
    0x060 │ 20 63 6f 6e 74 61 69 6e 73 20 6c 61 72 67 65 20 │  contains large 
    0x070 │ 66 69 65 6c 64 73 2e 0a 0a 4e 6f 74 65 20 74 68 │ fields...Note th
    0x080 │ 61 74 20 66 6f 72 6d 61 74 74 69 6e 67 20 61 20 │ at formatting a 
    0x090 │ 74 61 62 6c 65 20 72 65 71 75 69 72 65 73 20 62 │ table requires b
    0x0a0 │ 75 66 66 65 72 69 6e 67 20 61 6c 6c 20 43 53 56 │ uffering all CSV
    0x0b0 │ 20 64 61 74 61 20 69 6e 74 6f 20 6d 65 6d 6f 72 │  data into memor
    0x0c0 │ 79 2e 0a 54 68 65 72 65 66 6f 72 65 2c 20 79 6f │ y..Therefore, yo
    0x0d0 │ 75 20 73 68 6f 75 6c 64 20 75 73 65 20 74 68 65 │ u should use the
    0x0e0 │ 20 27 73 61 6d 70 6c 65 27 20 6f 72 20 27 73 6c │  'sample' or 'sl
    0x0f0 │ 69 63 65 27 20 63 6f 6d 6d 61 6e 64 20 74 6f 20 │ ice' command to 
    0x100 │ 74 72 69 6d 20 64 6f 77 6e 20 6c 61 72 67 65 0a │ trim down large.
    0x110 │ 43 53 56 20 64 61 74 61 20 62 65 66 6f 72 65 20 │ CSV data before 
    0x120 │ 66 6f 72 6d 61 74 74 69 6e 67 20 69 74 20 77 69 │ formatting it wi
    0x130 │ 74 68 20 74 68 69 73 20 63 6f 6d 6d 61 6e 64 2e │ th this command.
    0x140 │ 0a 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 │ ..Usage:.    xsv
    0x150 │ 20 74 61 62 6c 65 20 5b 6f 70 74 69 6f 6e 73 5d │  table [options]
    0x160 │ 20 5b 3c 69 6e 70 75 74 3e 5d 0a 0a 74 61 62 6c │  [<input>]..tabl
    0x170 │ 65 20 6f 70 74 69 6f 6e 73 3a 0a 20 20 20 20 2d │ e options:.    -
    0x180 │ 77 2c 20 2d 2d 77 69 64 74 68 20 3c 61 72 67 3e │ w, --width <arg>
    0x190 │ 20 20 20 20 20 20 54 68 65 20 6d 69 6e 69 6d 75 │       The minimu
    0x1a0 │ 6d 20 77 69 64 74 68 20 6f 66 20 65 61 63 68 20 │ m width of each 
    0x1b0 │ 63 6f 6c 75 6d 6e 2e 0a 20 20 20 20 20 20 20 20 │ column..        
    0x1c0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x1d0 │ 20 20 20 5b 64 65 66 61 75 6c 74 3a 20 32 5d 0a │    [default: 2].
    0x1e0 │ 20 20 20 20 2d 70 2c 20 2d 2d 70 61 64 20 3c 61 │     -p, --pad <a
    0x1f0 │ 72 67 3e 20 20 20 20 20 20 20 20 54 68 65 20 6d │ rg>        The m
    0x200 │ 69 6e 69 6d 75 6d 20 6e 75 6d 62 65 72 20 6f 66 │ inimum number of
    0x210 │ 20 73 70 61 63 65 73 20 62 65 74 77 65 65 6e 20 │  spaces between 
    0x220 │ 65 61 63 68 20 63 6f 6c 75 6d 6e 2e 0a 20 20 20 │ each column..   
    0x230 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x240 │ 20 20 20 20 20 20 20 20 5b 64 65 66 61 75 6c 74 │         [default
    0x250 │ 3a 20 32 5d 0a 20 20 20 20 2d 63 2c 20 2d 2d 63 │ : 2].    -c, --c
    0x260 │ 6f 6e 64 65 6e 73 65 20 3c 61 72 67 3e 20 20 4c │ ondense <arg>  L
    0x270 │ 69 6d 69 74 73 20 74 68 65 20 6c 65 6e 67 74 68 │ imits the length
    0x280 │ 20 6f 66 20 65 61 63 68 20 66 69 65 6c 64 20 74 │  of each field t
    0x290 │ 6f 20 74 68 65 20 76 61 6c 75 65 0a 20 20 20 20 │ o the value.    
    0x2a0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x2b0 │ 20 20 20 20 20 20 20 73 70 65 63 69 66 69 65 64 │        specified
    0x2c0 │ 2e 20 49 66 20 74 68 65 20 66 69 65 6c 64 20 69 │ . If the field i
    0x2d0 │ 73 20 55 54 46 2d 38 20 65 6e 63 6f 64 65 64 2c │ s UTF-8 encoded,
    0x2e0 │ 20 74 68 65 6e 0a 20 20 20 20 20 20 20 20 20 20 │  then.          
    0x2f0 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x300 │ 20 3c 61 72 67 3e 20 72 65 66 65 72 73 20 74 6f │  <arg> refers to
    0x310 │ 20 74 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 63 │  the number of c
    0x320 │ 6f 64 65 20 70 6f 69 6e 74 73 2e 0a 20 20 20 20 │ ode points..    
    0x330 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x340 │ 20 20 20 20 20 20 20 4f 74 68 65 72 77 69 73 65 │        Otherwise
    0x350 │ 2c 20 69 74 20 72 65 66 65 72 73 20 74 6f 20 74 │ , it refers to t
    0x360 │ 68 65 20 6e 75 6d 62 65 72 20 6f 66 20 62 79 74 │ he number of byt
    0x370 │ 65 73 2e 0a 0a 43 6f 6d 6d 6f 6e 20 6f 70 74 69 │ es...Common opti
    0x380 │ 6f 6e 73 3a 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 │ ons:.    -h, --h
    0x390 │ 65 6c 70 20 20 20 20 20 20 20 20 20 20 20 20 20 │ elp             
    0x3a0 │ 44 69 73 70 6c 61 79 20 74 68 69 73 20 6d 65 73 │ Display this mes
    0x3b0 │ 73 61 67 65 0a 20 20 20 20 2d 6f 2c 20 2d 2d 6f │ sage.    -o, --o
    0x3c0 │ 75 74 70 75 74 20 3c 66 69 6c 65 3e 20 20 20 20 │ utput <file>    
    0x3d0 │ 57 72 69 74 65 20 6f 75 74 70 75 74 20 74 6f 20 │ Write output to 
    0x3e0 │ 3c 66 69 6c 65 3e 20 69 6e 73 74 65 61 64 20 6f │ <file> instead o
    0x3f0 │ 66 20 73 74 64 6f 75 74 2e 0a 20 20 20 20 2d 64 │ f stdout..    -d
    0x400 │ 2c 20 2d 2d 64 65 6c 69 6d 69 74 65 72 20 3c 61 │ , --delimiter <a
    0x410 │ 72 67 3e 20 20 54 68 65 20 66 69 65 6c 64 20 64 │ rg>  The field d
    0x420 │ 65 6c 69 6d 69 74 65 72 20 66 6f 72 20 72 65 61 │ elimiter for rea
    0x430 │ 64 69 6e 67 20 43 53 56 20 64 61 74 61 2e 0a 20 │ ding CSV data.. 
    0x440 │ 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 │                 
    0x450 │ 20 20 20 20 20 20 20 20 20 20 4d 75 73 74 20 62 │           Must b
    0x460 │ 65 20 61 20 73 69 6e 67 6c 65 20 63 68 61 72 61 │ e a single chara
    0x470 │ 63 74 65 72 2e 20 28 64 65 66 61 75 6c 74 3a 20 │ cter. (default: 
    0x480 │ 2c 29 0a                                        │ ,).
}

fn table::run::{closure#0}(_1: &mut {closure@src/cmd/table.rs:65:44: 65:47}, _2: &[u8]) -> Cow<'_, [u8]> {
    debug f => _2;
    debug args => (*((*_1).0: &cmd::table::Args));
    let mut _0: std::borrow::Cow<'_, [u8]>;
    let mut _3: std::borrow::Cow<'_, [u8]>;
    let mut _4: std::option::Option<usize>;
    let mut _5: &cmd::table::Args;

    bb0: {
        _3 = Cow::<'_, [u8]>::Borrowed(_2);
        _5 = deref_copy ((*_1).0: &cmd::table::Args);
        _4 = ((*_5).5: std::option::Option<usize>);
        _0 = condense(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config::<impl at src/config.rs:19:10: 19:15>::clone(_1: &Delimiter) -> Delimiter {
    debug self => _1;
    let mut _0: config::Delimiter;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn config::<impl at src/config.rs:19:23: 19:28>::fmt(_1: &Delimiter, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "Delimiter";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config::<impl at src/config.rs:27:1: 27:15>::as_byte(_1: Delimiter) -> u8 {
    debug self => _1;
    let mut _0: u8;

    bb0: {
        _0 = (_1.0: u8);
        return;
    }
}

fn config::<impl at src/config.rs:33:1: 33:41>::deserialize(_1: D) -> Result<Delimiter, <D as serde::Deserializer<'_>>::Error> {
    debug d => _1;
    let mut _0: std::result::Result<config::Delimiter, <D as serde::Deserializer<'_>>::Error>;
    let _2: std::string::String;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>, std::string::String>;
    let mut _4: std::result::Result<std::string::String, <D as serde::Deserializer<'_>>::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>;
    let _7: std::string::String;
    let _8: &str;
    let mut _9: &std::string::String;
    let mut _10: bool;
    let mut _11: config::Delimiter;
    let mut _13: usize;
    let mut _14: &str;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&str;
    let mut _23: <D as serde::Deserializer<'_>>::Error;
    let mut _25: std::option::Option<char>;
    let mut _26: &mut std::str::Chars<'_>;
    let mut _27: std::str::Chars<'_>;
    let mut _28: &str;
    let mut _29: bool;
    let mut _30: &char;
    let mut _31: config::Delimiter;
    let mut _32: u8;
    let mut _33: char;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &char;
    let mut _42: <D as serde::Deserializer<'_>>::Error;
    scope 1 {
        debug c => _2;
        let _12: &str;
        scope 6 {
            debug s => _12;
            let _15: std::string::String;
            let _24: char;
            let mut _43: &[&str; 2];
            scope 7 {
                debug msg => _15;
            }
            scope 8 {
                debug res => _15;
            }
            scope 9 {
                debug c => _24;
                let _34: std::string::String;
                let mut _44: &[&str; 2];
                scope 10 {
                    debug msg => _34;
                }
                scope 11 {
                    debug res => _34;
                }
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <std::string::String as serde::Deserialize<'_>>::deserialize::<D>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<std::string::String, <D as serde::Deserializer<'_>>::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::string::String);
        _2 = move _7;
        _9 = &_2;
        _8 = <std::string::String as Deref>::deref(move _9) -> [return: bb6, unwind: bb29];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>);
        _0 = <Result<Delimiter, <D as serde::Deserializer<'_>>::Error> as FromResidual<Result<Infallible, <D as serde::Deserializer<'_>>::Error>>>::from_residual(move _6) -> [return: bb28, unwind continue];
    }

    bb6: {
        _10 = <str as PartialEq>::eq(_8, const "\\t") -> [return: bb9, unwind: bb29];
    }

    bb7: {
        _11 = Delimiter(const 9_u8);
        _0 = Result::<Delimiter, <D as serde::Deserializer<'_>>::Error>::Ok(move _11);
        goto -> bb27;
    }

    bb8: {
        _12 = _8;
        _14 = _12;
        _13 = core::str::<impl str>::len(move _14) -> [return: bb10, unwind: bb29];
    }

    bb9: {
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _13) -> [1: bb16, otherwise: bb11];
    }

    bb11: {
        _43 = const _;
        _17 = _43 as &[&str] (PointerCoercion(Unsize));
        _22 = &_12;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_22) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _15 = format(move _16) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        _23 = <<D as serde::Deserializer<'_>>::Error as serde::de::Error>::custom::<std::string::String>(move _15) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _0 = Result::<Delimiter, <D as serde::Deserializer<'_>>::Error>::Err(move _23);
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb16: {
        _28 = _12;
        _27 = core::str::<impl str>::chars(move _28) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        _26 = &mut _27;
        _25 = <Chars<'_> as Iterator>::next(move _26) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _24 = std::option::Option::<char>::unwrap(move _25) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _30 = &_24;
        _29 = char::methods::<impl char>::is_ascii(move _30) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        switchInt(move _29) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _33 = _24;
        _32 = move _33 as u8 (IntToInt);
        _31 = Delimiter(move _32);
        _0 = Result::<Delimiter, <D as serde::Deserializer<'_>>::Error>::Ok(move _31);
        goto -> bb27;
    }

    bb22: {
        _44 = const _;
        _36 = _44 as &[&str] (PointerCoercion(Unsize));
        _41 = &_24;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<char>(_41) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _34 = format(move _35) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        _42 = <<D as serde::Deserializer<'_>>::Error as serde::de::Error>::custom::<std::string::String>(move _34) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        _0 = Result::<Delimiter, <D as serde::Deserializer<'_>>::Error>::Err(move _42);
        goto -> bb27;
    }

    bb27: {
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_2) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}

promoted[0] in config::<impl at src/config.rs:33:1: 33:41>::deserialize: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Could not convert '", const "' to a single ASCII character."];
        _0 = &_1;
        return;
    }
}

promoted[1] in config::<impl at src/config.rs:33:1: 33:41>::deserialize: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Could not convert '", const "' to ASCII delimiter."];
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:57:10: 57:15>::fmt(_1: &Config, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 12];
    let _5: [&dyn std::fmt::Debug; 12];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::option::Option<std::path::PathBuf>;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<std::path::PathBuf>;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &std::option::Option<select::SelectColumns>;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &u8;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &bool;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &bool;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &csv::Terminator;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &u8;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &csv::QuoteStyle;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &bool;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &std::option::Option<u8>;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &&bool;
    let _30: &bool;
    let _31: &str;
    let mut _32: &[&str];
    let mut _33: &[&str; 12];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _33 = const _;
        _7 = &((*_1).0: std::option::Option<std::path::PathBuf>);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: std::option::Option<std::path::PathBuf>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: std::option::Option<select::SelectColumns>);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: u8);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: bool);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: bool);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: csv::Terminator);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: u8);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: csv::QuoteStyle);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: bool);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: std::option::Option<u8>);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _30 = &((*_1).11: bool);
        _29 = &_30;
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _31 = const "Config";
        _32 = _33 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _31, move _32, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in config::<impl at src/config.rs:57:10: 57:15>::fmt: &[&str; 12] = {
    let mut _0: &[&str; 12];
    let mut _1: [&str; 12];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;

    bb0: {
        _3 = const "idx_path";
        _2 = &(*_3);
        _5 = const "select_columns";
        _4 = &(*_5);
        _7 = const "delimiter";
        _6 = &(*_7);
        _9 = const "no_headers";
        _8 = &(*_9);
        _11 = const "flexible";
        _10 = &(*_11);
        _13 = const "terminator";
        _12 = &(*_13);
        _15 = const "quote";
        _14 = &(*_15);
        _17 = const "quote_style";
        _16 = &(*_17);
        _19 = const "double_quote";
        _18 = &(*_19);
        _21 = const "escape";
        _20 = &(*_21);
        _23 = const "quoting";
        _22 = &(*_23);
        _1 = [const "path", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22];
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::new(_1: &std::option::Option<std::string::String>) -> Config {
    debug path => _1;
    let mut _0: config::Config;
    let _2: std::option::Option<std::path::PathBuf>;
    let _3: u8;
    let mut _4: (std::option::Option<std::path::PathBuf>, u8);
    let mut _5: isize;
    let mut _6: std::option::Option<std::path::PathBuf>;
    let _7: &std::string::String;
    let _8: &&std::string::String;
    let mut _9: bool;
    let mut _10: &&str;
    let _11: &str;
    let mut _12: std::option::Option<std::path::PathBuf>;
    let _13: &std::string::String;
    let mut _16: bool;
    let mut _17: std::option::Option<&std::ffi::OsStr>;
    let _18: &std::path::Path;
    let mut _19: &std::path::PathBuf;
    let mut _20: std::option::Option<std::path::PathBuf>;
    let mut _21: std::path::PathBuf;
    let mut _22: u8;
    let mut _23: std::option::Option<std::path::PathBuf>;
    let mut _24: std::option::Option<select::SelectColumns>;
    let mut _25: csv::Terminator;
    let mut _26: csv::QuoteStyle;
    let mut _27: std::option::Option<u8>;
    let mut _28: &&str;
    let mut _29: &std::string::String;
    scope 1 {
        debug path => _2;
        debug delim => _3;
    }
    scope 2 {
        debug s => _7;
        debug s => _8;
    }
    scope 3 {
        debug s => _13;
        let _14: std::path::PathBuf;
        scope 4 {
            debug path => _14;
            let _15: u8;
            scope 5 {
                debug delim => _15;
            }
        }
    }

    bb0: {
        _5 = discriminant((*_1));
        switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _6 = std::option::Option::<PathBuf>::None;
        _4 = (move _6, const 44_u8);
        goto -> bb15;
    }

    bb3: {
        _7 = &(((*_1) as Some).0: std::string::String);
        _8 = &_7;
        _29 = deref_copy (*_8);
        _11 = <std::string::String as Deref>::deref(_29) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = &_11;
        _28 = const _;
        _9 = <&str as PartialEq>::eq(move _10, _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _12 = std::option::Option::<PathBuf>::None;
        _4 = (move _12, const 44_u8);
        goto -> bb15;
    }

    bb7: {
        _13 = &(((*_1) as Some).0: std::string::String);
        _14 = <PathBuf as From<&std::string::String>>::from(_13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = &_14;
        _18 = <PathBuf as Deref>::deref(move _19) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _17 = Path::extension(_18) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _16 = std::option::Option::<&OsStr>::map_or::<bool, {closure@src/config.rs:81:55: 81:58}>(move _17, const false, const ZeroSized: {closure@src/config.rs:81:55: 81:58}) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        switchInt(move _16) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _15 = const 9_u8;
        goto -> bb14;
    }

    bb13: {
        _15 = const 44_u8;
        goto -> bb14;
    }

    bb14: {
        _21 = move _14;
        _20 = std::option::Option::<PathBuf>::Some(move _21);
        _22 = _15;
        _4 = (move _20, move _22);
        goto -> bb15;
    }

    bb15: {
        _2 = move (_4.0: std::option::Option<std::path::PathBuf>);
        _3 = (_4.1: u8);
        _23 = std::option::Option::<PathBuf>::None;
        _24 = std::option::Option::<SelectColumns>::None;
        _25 = csv::Terminator::Any(const 10_u8);
        _26 = Necessary;
        _27 = std::option::Option::<u8>::None;
        _0 = Config { path: move _2, idx_path: move _23, select_columns: move _24, delimiter: _3, no_headers: const false, flexible: const false, terminator: move _25, quote: const 34_u8, quote_style: move _26, double_quote: const true, escape: move _27, quoting: const true };
        return;
    }

    bb16 (cleanup): {
        drop(_14) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in config::<impl at src/config.rs:73:1: 73:12>::new: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-";
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::new::{closure#0}(_1: {closure@src/config.rs:81:55: 81:58}, _2: &OsStr) -> bool {
    debug v => _2;
    let mut _0: bool;
    let mut _3: &&std::ffi::OsStr;
    let mut _4: &&str;

    bb0: {
        _3 = &_2;
        _4 = const _;
        _0 = <&OsStr as PartialEq<&str>>::eq(move _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in config::<impl at src/config.rs:73:1: 73:12>::new::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tsv";
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::delimiter(_1: Config, _2: std::option::Option<Delimiter>) -> Config {
    debug self => _1;
    debug d => _2;
    let mut _0: config::Config;
    let mut _3: isize;
    let mut _5: u8;
    scope 1 {
        debug d => _4;
        let _4: config::Delimiter;
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = ((_2 as Some).0: config::Delimiter);
        _5 = Delimiter::as_byte(_4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        (_1.3: u8) = move _5;
        goto -> bb3;
    }

    bb3: {
        _0 = move _1;
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::no_headers(_1: Config, _2: bool) -> Config {
    debug self => _1;
    debug yes => _2;
    let mut _0: config::Config;
    let mut _3: bool;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: std::result::Result<std::string::String, std::env::VarError>;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: &&str;
    let mut _12: bool;

    bb0: {
        _12 = const false;
        _6 = var::<&str>(const "XSV_TOGGLE_HEADERS") -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _12 = const true;
        _8 = const "0";
        _7 = <str as ToOwned>::to_owned(_8) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _12 = const false;
        _5 = Result::<std::string::String, VarError>::unwrap_or(move _6, move _7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = &_5;
        _12 = const false;
        _11 = const _;
        _3 = <std::string::String as PartialEq<&str>>::eq(move _4, _11) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        switchInt(move _3) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _9 = _2;
        _2 = Not(move _9);
        goto -> bb8;
    }

    bb7: {
        drop(_5) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _10 = _2;
        (_1.4: bool) = move _10;
        _0 = move _1;
        return;
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_12) -> [0: bb10, otherwise: bb12];
    }
}

promoted[0] in config::<impl at src/config.rs:73:1: 73:12>::no_headers: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "1";
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::flexible(_1: Config, _2: bool) -> Config {
    debug self => _1;
    debug yes => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.5: bool) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::crlf(_1: Config, _2: bool) -> Config {
    debug self => _1;
    debug yes => _2;
    let mut _0: config::Config;
    let mut _3: csv::Terminator;
    let mut _4: csv::Terminator;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = CRLF;
        (_1.6: csv::Terminator) = move _3;
        goto -> bb3;
    }

    bb2: {
        _4 = csv::Terminator::Any(const 10_u8);
        (_1.6: csv::Terminator) = move _4;
        goto -> bb3;
    }

    bb3: {
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::terminator(_1: Config, _2: Terminator) -> Config {
    debug self => _1;
    debug term => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.6: csv::Terminator) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::quote(_1: Config, _2: u8) -> Config {
    debug self => _1;
    debug quote => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.7: u8) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::quote_style(_1: Config, _2: QuoteStyle) -> Config {
    debug self => _1;
    debug style => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.8: csv::QuoteStyle) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::double_quote(_1: Config, _2: bool) -> Config {
    debug self => _1;
    debug yes => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.9: bool) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::escape(_1: Config, _2: std::option::Option<u8>) -> Config {
    debug self => _1;
    debug escape => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.10: std::option::Option<u8>) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::quoting(_1: Config, _2: bool) -> Config {
    debug self => _1;
    debug yes => _2;
    let mut _0: config::Config;

    bb0: {
        (_1.11: bool) = _2;
        _0 = move _1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::select(_1: Config, _2: SelectColumns) -> Config {
    debug self => _1;
    debug sel_cols => _2;
    let mut _0: config::Config;
    let mut _3: std::option::Option<select::SelectColumns>;

    bb0: {
        _3 = std::option::Option::<SelectColumns>::Some(move _2);
        drop((_1.2: std::option::Option<select::SelectColumns>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (_1.2: std::option::Option<select::SelectColumns>) = move _3;
        _0 = move _1;
        return;
    }

    bb2 (cleanup): {
        (_1.2: std::option::Option<select::SelectColumns>) = move _3;
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::is_std(_1: &Config) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &std::option::Option<std::path::PathBuf>;

    bb0: {
        _2 = &((*_1).0: std::option::Option<std::path::PathBuf>);
        _0 = std::option::Option::<PathBuf>::is_none(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::selection(_1: &Config, _2: &ByteRecord) -> Result<Selection, std::string::String> {
    debug self => _1;
    debug first_record => _2;
    let mut _0: std::result::Result<select::Selection, std::string::String>;
    let mut _3: isize;
    let mut _4: std::string::String;
    let _5: &str;
    let _6: &select::SelectColumns;
    let mut _7: bool;
    let mut _8: bool;
    scope 1 {
        debug sel => _6;
    }

    bb0: {
        _3 = discriminant(((*_1).2: std::option::Option<select::SelectColumns>));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = &((((*_1).2: std::option::Option<select::SelectColumns>) as Some).0: select::SelectColumns);
        _8 = ((*_1).4: bool);
        _7 = Not(move _8);
        _0 = SelectColumns::selection(_6, _2, move _7) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Config has no 'SelectColums'. Did you call Config::select?";
        _4 = <str as ToOwned>::to_owned(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<Selection, std::string::String>::Err(move _4);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::write_headers(_1: &Config, _2: &mut Reader<R>, _3: &mut Writer<W>) -> Result<(), csv::Error> {
    debug self => _1;
    debug r => _2;
    debug w => _3;
    let mut _0: std::result::Result<(), csv::Error>;
    let mut _4: bool;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, &csv::ByteRecord>;
    let mut _6: std::result::Result<&csv::ByteRecord, csv::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, csv::Error>;
    let _9: &csv::ByteRecord;
    let mut _10: bool;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _12: std::result::Result<(), csv::Error>;
    let mut _13: isize;
    scope 1 {
        debug r => _9;
        let _14: std::result::Result<std::convert::Infallible, csv::Error>;
        scope 6 {
            debug residual => _14;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _4 = ((*_1).4: bool);
        switchInt(move _4) -> [0: bb1, otherwise: bb12];
    }

    bb1: {
        _6 = Reader::<R>::byte_headers(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Result<&ByteRecord, csv::Error> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = ((_5 as Continue).0: &csv::ByteRecord);
        _10 = ByteRecord::is_empty(_9) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), csv::Error> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _8) -> [return: bb13, unwind continue];
    }

    bb7: {
        switchInt(move _10) -> [0: bb8, otherwise: bb12];
    }

    bb8: {
        _12 = Writer::<W>::write_record::<&ByteRecord, &[u8]>(_3, _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = <Result<(), csv::Error> as Try>::branch(move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), csv::Error> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _14) -> [return: bb13, unwind continue];
    }

    bb12: {
        _0 = Result::<(), csv::Error>::Ok(const ());
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::writer(_1: &Config) -> Result<Writer<Box<dyn std::io::Write>>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let mut _2: csv::Writer<std::boxed::Box<dyn std::io::Write>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::boxed::Box<dyn std::io::Write>>;
    let mut _4: std::result::Result<std::boxed::Box<dyn std::io::Write>, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: std::boxed::Box<dyn std::io::Write>;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = Config::io_writer(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Box<dyn std::io::Write>, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::boxed::Box<dyn std::io::Write>);
        _2 = Config::from_writer::<Box<dyn std::io::Write>>(_1, move _7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<Writer<Box<dyn std::io::Write>>, std::io::Error>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::reader(_1: &Config) -> Result<Reader<Box<dyn std::io::Read>>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<csv::Reader<std::boxed::Box<dyn std::io::Read>>, std::io::Error>;
    let mut _2: csv::Reader<std::boxed::Box<dyn std::io::Read>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::boxed::Box<dyn std::io::Read>>;
    let mut _4: std::result::Result<std::boxed::Box<dyn std::io::Read>, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: std::boxed::Box<dyn std::io::Read>;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = Config::io_reader(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Box<dyn std::io::Read>, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::boxed::Box<dyn std::io::Read>);
        _2 = Config::from_reader::<Box<dyn std::io::Read>>(_1, move _7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Reader<Box<dyn std::io::Read>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<Reader<Box<dyn std::io::Read>>, std::io::Error>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::reader_file(_1: &Config) -> Result<Reader<File>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<csv::Reader<std::fs::File>, std::io::Error>;
    let mut _2: isize;
    let mut _3: std::io::Error;
    let mut _4: std::io::ErrorKind;
    let _5: &std::path::PathBuf;
    let mut _6: std::result::Result<std::fs::File, std::io::Error>;
    let mut _7: {closure@src/config.rs:211:50: 211:53};
    let mut _8: &&config::Config;
    scope 1 {
        debug p => _5;
    }

    bb0: {
        _2 = discriminant(((*_1).0: std::option::Option<std::path::PathBuf>));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &((((*_1).0: std::option::Option<std::path::PathBuf>) as Some).0: std::path::PathBuf);
        _6 = File::open::<&PathBuf>(_5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = std::io::ErrorKind::Other;
        _3 = std::io::Error::new::<&str>(move _4, const "Cannot use <stdin> here") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<Reader<File>, std::io::Error>::Err(move _3);
        goto -> bb6;
    }

    bb5: {
        _8 = &_1;
        _7 = {closure@src/config.rs:211:50: 211:53} { self: move _8 };
        _0 = Result::<File, std::io::Error>::map::<Reader<File>, {closure@src/config.rs:211:50: 211:53}>(move _6, move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::reader_file::{closure#0}(_1: {closure@src/config.rs:211:50: 211:53}, _2: File) -> Reader<File> {
    debug f => _2;
    debug self => (*(_1.0: &&config::Config));
    let mut _0: csv::Reader<std::fs::File>;
    let mut _3: &&config::Config;
    let mut _4: &config::Config;

    bb0: {
        _3 = deref_copy (_1.0: &&config::Config);
        _4 = deref_copy (*_3);
        _0 = Config::from_reader::<File>(_4, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::index_files(_1: &Config) -> Result<std::option::Option<(Reader<File>, File)>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>, std::io::Error>;
    let _2: std::fs::File;
    let _3: std::fs::File;
    let mut _4: (std::fs::File, std::fs::File);
    let mut _5: (&std::option::Option<std::path::PathBuf>, &std::option::Option<std::path::PathBuf>);
    let mut _6: &std::option::Option<std::path::PathBuf>;
    let mut _7: &std::option::Option<std::path::PathBuf>;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>;
    let mut _12: std::io::Error;
    let mut _13: std::io::ErrorKind;
    let _14: &std::path::PathBuf;
    let mut _16: std::result::Result<std::fs::File, std::io::Error>;
    let mut _17: &std::path::PathBuf;
    let _18: std::path::PathBuf;
    let _19: &std::path::Path;
    let mut _20: isize;
    let mut _21: std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _24: std::result::Result<std::fs::File, std::io::Error>;
    let mut _25: isize;
    let mut _28: std::fs::File;
    let _29: &std::path::PathBuf;
    let _30: &std::path::PathBuf;
    let mut _31: std::fs::File;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _33: std::result::Result<std::fs::File, std::io::Error>;
    let mut _34: isize;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _38: std::result::Result<std::fs::File, std::io::Error>;
    let mut _39: isize;
    let _43: &std::fs::Metadata;
    let _44: std::fs::Metadata;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::Metadata>;
    let mut _46: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _47: &std::fs::File;
    let mut _48: isize;
    let _52: &std::fs::Metadata;
    let _53: std::fs::Metadata;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::Metadata>;
    let mut _55: std::result::Result<std::fs::Metadata, std::io::Error>;
    let mut _56: &std::fs::File;
    let mut _57: isize;
    let mut _60: bool;
    let mut _61: std::io::Error;
    let mut _62: std::io::ErrorKind;
    let mut _64: std::fs::File;
    let mut _65: std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>;
    let mut _66: (csv::Reader<std::fs::File>, std::fs::File);
    let mut _67: std::fs::File;
    let mut _68: &std::option::Option<std::path::PathBuf>;
    let mut _69: &std::option::Option<std::path::PathBuf>;
    let mut _70: &std::option::Option<std::path::PathBuf>;
    let mut _71: &std::option::Option<std::path::PathBuf>;
    let mut _72: &std::option::Option<std::path::PathBuf>;
    let mut _73: &std::option::Option<std::path::PathBuf>;
    let mut _74: bool;
    let mut _75: isize;
    let mut _76: isize;
    scope 1 {
        debug csv_file => _2;
        debug idx_file => _3;
        let _42: u64;
        let _49: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _50: std::fs::Metadata;
        scope 18 {
            debug data_modified => _42;
            let _51: u64;
            let _58: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _59: std::fs::Metadata;
            scope 23 {
                debug idx_modified => _51;
                let _63: csv::Reader<std::fs::File>;
                scope 28 {
                    debug csv_rdr => _63;
                }
            }
            scope 24 {
                debug residual => _58;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _59;
                scope 27 {
                }
            }
        }
        scope 19 {
            debug residual => _49;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _50;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug p => _14;
        let _15: std::fs::File;
        let _22: std::fs::File;
        scope 3 {
            debug idx_file => _15;
            let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _27: std::fs::File;
            scope 5 {
                debug residual => _26;
                scope 6 {
                }
            }
            scope 7 {
                debug val => _27;
                scope 8 {
                }
            }
        }
        scope 4 {
            debug f => _22;
        }
    }
    scope 9 {
        debug p => _29;
        debug ip => _30;
        let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _36: std::fs::File;
        let _40: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _41: std::fs::File;
        scope 10 {
            debug residual => _35;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _36;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _40;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _41;
            scope 17 {
            }
        }
    }

    bb0: {
        _74 = const false;
        _6 = &((*_1).0: std::option::Option<std::path::PathBuf>);
        _7 = &((*_1).1: std::option::Option<std::path::PathBuf>);
        _5 = (move _6, move _7);
        _68 = deref_copy (_5.0: &std::option::Option<std::path::PathBuf>);
        _10 = discriminant((*_68));
        switchInt(move _10) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _69 = deref_copy (_5.1: &std::option::Option<std::path::PathBuf>);
        _8 = discriminant((*_69));
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _70 = deref_copy (_5.1: &std::option::Option<std::path::PathBuf>);
        _9 = discriminant((*_70));
        switchInt(move _9) -> [0: bb8, 1: bb4, otherwise: bb2];
    }

    bb4: {
        _71 = deref_copy (_5.0: &std::option::Option<std::path::PathBuf>);
        _29 = &(((*_71) as Some).0: std::path::PathBuf);
        _72 = deref_copy (_5.1: &std::option::Option<std::path::PathBuf>);
        _30 = &(((*_72) as Some).0: std::path::PathBuf);
        _33 = File::open::<&PathBuf>(_29) -> [return: bb20, unwind continue];
    }

    bb5: {
        _11 = std::option::Option::<(Reader<File>, File)>::None;
        _0 = Result::<std::option::Option<(Reader<File>, File)>, std::io::Error>::Ok(move _11);
        goto -> bb47;
    }

    bb6: {
        _13 = std::io::ErrorKind::Other;
        _12 = std::io::Error::new::<&str>(move _13, const "Cannot use <stdin> with indexes") -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = Result::<std::option::Option<(Reader<File>, File)>, std::io::Error>::Err(move _12);
        goto -> bb47;
    }

    bb8: {
        _73 = deref_copy (_5.0: &std::option::Option<std::path::PathBuf>);
        _14 = &(((*_73) as Some).0: std::path::PathBuf);
        _19 = <PathBuf as Deref>::deref(_14) -> [return: bb9, unwind continue];
    }

    bb9: {
        _18 = idx_path(_19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = &_18;
        _16 = File::open::<&PathBuf>(move _17) -> [return: bb11, unwind: bb54];
    }

    bb11: {
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        _22 = move ((_16 as Ok).0: std::fs::File);
        _15 = move _22;
        _76 = discriminant(_16);
        switchInt(move _76) -> [0: bb58, otherwise: bb59];
    }

    bb13: {
        _21 = std::option::Option::<(Reader<File>, File)>::None;
        _0 = Result::<std::option::Option<(Reader<File>, File)>, std::io::Error>::Ok(move _21);
        _75 = discriminant(_16);
        switchInt(move _75) -> [0: bb56, otherwise: bb57];
    }

    bb14: {
        _24 = File::open::<&PathBuf>(_14) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _23 = <Result<File, std::io::Error> as Try>::branch(move _24) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        _27 = move ((_23 as Continue).0: std::fs::File);
        _28 = move _15;
        _4 = (move _27, move _28);
        goto -> bb29;
    }

    bb18: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _26) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        drop(_15) -> [return: bb47, unwind continue];
    }

    bb20: {
        _32 = <Result<File, std::io::Error> as Try>::branch(move _33) -> [return: bb21, unwind continue];
    }

    bb21: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        _36 = move ((_32 as Continue).0: std::fs::File);
        _31 = move _36;
        _38 = File::open::<&PathBuf>(_30) -> [return: bb24, unwind: bb50];
    }

    bb23: {
        _35 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _35) -> [return: bb47, unwind continue];
    }

    bb24: {
        _37 = <Result<File, std::io::Error> as Try>::branch(move _38) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        _41 = move ((_37 as Continue).0: std::fs::File);
        _4 = (move _31, move _41);
        goto -> bb29;
    }

    bb27: {
        _40 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _40) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        drop(_31) -> [return: bb47, unwind continue];
    }

    bb29: {
        _74 = const true;
        _2 = move (_4.0: std::fs::File);
        _3 = move (_4.1: std::fs::File);
        _47 = &_2;
        _46 = File::metadata(move _47) -> [return: bb30, unwind: bb48];
    }

    bb30: {
        _45 = <Result<Metadata, std::io::Error> as Try>::branch(move _46) -> [return: bb31, unwind: bb48];
    }

    bb31: {
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb32, 1: bb33, otherwise: bb2];
    }

    bb32: {
        _50 = move ((_45 as Continue).0: std::fs::Metadata);
        _44 = move _50;
        _43 = &_44;
        _42 = last_modified(_43) -> [return: bb34, unwind: bb48];
    }

    bb33: {
        _49 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _49) -> [return: bb62, unwind: bb48];
    }

    bb34: {
        _56 = &_3;
        _55 = File::metadata(move _56) -> [return: bb35, unwind: bb48];
    }

    bb35: {
        _54 = <Result<Metadata, std::io::Error> as Try>::branch(move _55) -> [return: bb36, unwind: bb48];
    }

    bb36: {
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        _59 = move ((_54 as Continue).0: std::fs::Metadata);
        _53 = move _59;
        _52 = &_53;
        _51 = last_modified(_52) -> [return: bb39, unwind: bb48];
    }

    bb38: {
        _58 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _58) -> [return: bb63, unwind: bb48];
    }

    bb39: {
        _60 = Gt(_42, _51);
        switchInt(move _60) -> [0: bb42, otherwise: bb40];
    }

    bb40: {
        _62 = std::io::ErrorKind::Other;
        _61 = std::io::Error::new::<&str>(move _62, const "The CSV file was modified after the index file. Please re-create the index.") -> [return: bb41, unwind: bb48];
    }

    bb41: {
        _0 = Result::<std::option::Option<(Reader<File>, File)>, std::io::Error>::Err(move _61);
        goto -> bb44;
    }

    bb42: {
        _74 = const false;
        _64 = move _2;
        _63 = Config::from_reader::<File>(_1, move _64) -> [return: bb43, unwind: bb48];
    }

    bb43: {
        _67 = move _3;
        _66 = (move _63, move _67);
        _65 = std::option::Option::<(Reader<File>, File)>::Some(move _66);
        _0 = Result::<std::option::Option<(Reader<File>, File)>, std::io::Error>::Ok(move _65);
        _74 = const false;
        goto -> bb47;
    }

    bb44: {
        drop(_3) -> [return: bb45, unwind: bb61];
    }

    bb45: {
        drop(_2) -> [return: bb46, unwind continue];
    }

    bb46: {
        _74 = const false;
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_3) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_18) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_18) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56: {
        drop(_18) -> [return: bb47, unwind continue];
    }

    bb57: {
        drop(_16) -> [return: bb56, unwind: bb54];
    }

    bb58: {
        drop(_18) -> [return: bb14, unwind: bb53];
    }

    bb59: {
        drop(_16) -> [return: bb58, unwind: bb52];
    }

    bb60 (cleanup): {
        drop(_2) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_74) -> [0: bb55, otherwise: bb60];
    }

    bb62: {
        goto -> bb44;
    }

    bb63: {
        goto -> bb44;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::indexed(_1: &Config) -> Result<std::option::Option<Indexed<File, File>>, CliError> {
    debug self => _1;
    let mut _0: std::result::Result<std::option::Option<index::Indexed<std::fs::File, std::fs::File>>, CliError>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>>;
    let mut _3: std::result::Result<std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>, std::io::Error>;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _6: std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>;
    let mut _7: isize;
    let mut _8: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let _9: csv::Reader<std::fs::File>;
    let _10: std::fs::File;
    let mut _11: std::option::Option<index::Indexed<std::fs::File, std::fs::File>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, CliError>, index::Indexed<std::fs::File, std::fs::File>>;
    let mut _13: std::result::Result<index::Indexed<std::fs::File, std::fs::File>, CliError>;
    let mut _14: isize;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }
    scope 5 {
        debug r => _9;
        debug i => _10;
        let _15: std::result::Result<std::convert::Infallible, CliError>;
        let _16: index::Indexed<std::fs::File, std::fs::File>;
        scope 6 {
            debug residual => _15;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _16;
            scope 9 {
            }
        }
    }

    bb0: {
        _3 = Config::index_files(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Result<std::option::Option<(Reader<File>, File)>, std::io::Error> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = move ((_2 as Continue).0: std::option::Option<(csv::Reader<std::fs::File>, std::fs::File)>);
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb7, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::option::Option<Indexed<File, File>>, CliError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _5) -> [return: bb14, unwind continue];
    }

    bb6: {
        _9 = move (((_6 as Some).0: (csv::Reader<std::fs::File>, std::fs::File)).0: csv::Reader<std::fs::File>);
        _10 = move (((_6 as Some).0: (csv::Reader<std::fs::File>, std::fs::File)).1: std::fs::File);
        _13 = Indexed::<File, File>::open(move _9, move _10) -> [return: bb8, unwind continue];
    }

    bb7: {
        _8 = std::option::Option::<Indexed<File, File>>::None;
        _0 = Result::<std::option::Option<Indexed<File, File>>, CliError>::Ok(move _8);
        goto -> bb13;
    }

    bb8: {
        _12 = <Result<Indexed<File, File>, CliError> as Try>::branch(move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _16 = move ((_12 as Continue).0: index::Indexed<std::fs::File, std::fs::File>);
        _11 = std::option::Option::<Indexed<File, File>>::Some(move _16);
        _0 = Result::<std::option::Option<Indexed<File, File>>, CliError>::Ok(move _11);
        goto -> bb13;
    }

    bb11: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, CliError>);
        _0 = <Result<std::option::Option<Indexed<File, File>>, CliError> as FromResidual<Result<Infallible, CliError>>>::from_residual(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        goto -> bb14;
    }

    bb13: {
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::io_reader(_1: &Config) -> Result<Box<dyn std::io::Read>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::boxed::Box<dyn std::io::Read>, std::io::Error>;
    let mut _2: std::boxed::Box<dyn std::io::Read>;
    let mut _3: std::boxed::Box<dyn std::io::Read>;
    let mut _4: isize;
    let mut _5: std::boxed::Box<std::io::Stdin>;
    let mut _6: std::io::Stdin;
    let _7: &std::path::PathBuf;
    let mut _8: std::boxed::Box<dyn std::io::Read>;
    let mut _9: std::result::Result<std::fs::File, std::io::Error>;
    let mut _10: isize;
    let mut _12: std::boxed::Box<std::fs::File>;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 2];
    let _19: [core::fmt::rt::Argument<'_>; 2];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::path::Display<'_>;
    let _22: std::path::Display<'_>;
    let _23: &std::path::Path;
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &std::io::Error;
    let mut _26: std::io::Error;
    let mut _27: std::io::ErrorKind;
    scope 1 {
        debug p => _7;
        let _11: std::fs::File;
        let _13: std::io::Error;
        scope 2 {
            debug x => _11;
        }
        scope 3 {
            debug err => _13;
            let _14: std::string::String;
            let mut _28: &[&str; 2];
            scope 4 {
                debug msg => _14;
            }
            scope 5 {
                debug res => _14;
            }
        }
    }

    bb0: {
        _4 = discriminant(((*_1).0: std::option::Option<std::path::PathBuf>));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &((((*_1).0: std::option::Option<std::path::PathBuf>) as Some).0: std::path::PathBuf);
        _9 = File::open::<&PathBuf>(_7) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = stdin() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = Box::<Stdin>::new(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = move _5 as std::boxed::Box<dyn std::io::Read> (PointerCoercion(Unsize));
        goto -> bb17;
    }

    bb6: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb2];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::io::Error);
        _28 = const _;
        _16 = _28 as &[&str] (PointerCoercion(Unsize));
        _23 = <PathBuf as Deref>::deref(_7) -> [return: bb10, unwind: bb19];
    }

    bb8: {
        _11 = move ((_9 as Ok).0: std::fs::File);
        _12 = Box::<File>::new(move _11) -> [return: bb9, unwind continue];
    }

    bb9: {
        _8 = move _12 as std::boxed::Box<dyn std::io::Read> (PointerCoercion(Unsize));
        _3 = move _8;
        goto -> bb17;
    }

    bb10: {
        _22 = Path::display(_23) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<std::path::Display<'_>>(_21) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _25 = &_13;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_25) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _19 = [move _20, move _24];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _14 = format(move _15) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _27 = NotFound;
        _26 = std::io::Error::new::<std::string::String>(move _27, move _14) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        _0 = Result::<Box<dyn std::io::Read>, std::io::Error>::Err(move _26);
        drop(_13) -> [return: bb18, unwind continue];
    }

    bb17: {
        _2 = move _3;
        _0 = Result::<Box<dyn std::io::Read>, std::io::Error>::Ok(move _2);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_13) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in config::<impl at src/config.rs:73:1: 73:12>::io_reader: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "failed to open ", const ": "];
        _0 = &_1;
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::from_reader(_1: &Config, _2: R) -> Reader<R> {
    debug self => _1;
    debug rdr => _2;
    let mut _0: csv::Reader<R>;
    let mut _3: &csv::ReaderBuilder;
    let _4: &mut csv::ReaderBuilder;
    let mut _5: &mut csv::ReaderBuilder;
    let mut _6: &mut csv::ReaderBuilder;
    let mut _7: &mut csv::ReaderBuilder;
    let mut _8: &mut csv::ReaderBuilder;
    let mut _9: &mut csv::ReaderBuilder;
    let mut _10: &mut csv::ReaderBuilder;
    let mut _11: csv::ReaderBuilder;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: bool;
    let mut _18: std::option::Option<u8>;
    let mut _19: R;
    let mut _20: bool;

    bb0: {
        _20 = const false;
        _20 = const true;
        _11 = ReaderBuilder::new() -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _10 = &mut _11;
        _12 = ((*_1).5: bool);
        _9 = ReaderBuilder::flexible(move _10, move _12) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _13 = ((*_1).3: u8);
        _8 = ReaderBuilder::delimiter(_9, move _13) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _15 = ((*_1).4: bool);
        _14 = Not(move _15);
        _7 = ReaderBuilder::has_headers(_8, move _14) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _16 = ((*_1).7: u8);
        _6 = ReaderBuilder::quote(_7, move _16) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _17 = ((*_1).11: bool);
        _5 = ReaderBuilder::quoting(_6, move _17) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _18 = ((*_1).10: std::option::Option<u8>);
        _4 = ReaderBuilder::escape(_5, move _18) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _3 = &(*_4);
        _20 = const false;
        _19 = move _2;
        _0 = ReaderBuilder::from_reader::<R>(move _3, move _19) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_11) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_11) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_20) -> [0: bb11, otherwise: bb12];
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::io_writer(_1: &Config) -> Result<Box<dyn std::io::Write>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::boxed::Box<dyn std::io::Write>, std::io::Error>;
    let mut _2: std::boxed::Box<dyn std::io::Write>;
    let mut _3: std::boxed::Box<dyn std::io::Write>;
    let mut _4: isize;
    let mut _5: std::boxed::Box<std::io::Stdout>;
    let mut _6: std::io::Stdout;
    let _7: &std::path::PathBuf;
    let mut _8: std::boxed::Box<std::fs::File>;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _10: std::result::Result<std::fs::File, std::io::Error>;
    let mut _11: isize;
    scope 1 {
        debug p => _7;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: std::fs::File;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _13;
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = discriminant(((*_1).0: std::option::Option<std::path::PathBuf>));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &((((*_1).0: std::option::Option<std::path::PathBuf>) as Some).0: std::path::PathBuf);
        _10 = File::create::<&PathBuf>(_7) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = stdout() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = Box::<Stdout>::new(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = move _5 as std::boxed::Box<dyn std::io::Write> (PointerCoercion(Unsize));
        goto -> bb11;
    }

    bb6: {
        _9 = <Result<File, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb2];
    }

    bb8: {
        _13 = move ((_9 as Continue).0: std::fs::File);
        _8 = Box::<File>::new(move _13) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Box<dyn std::io::Write>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb12, unwind continue];
    }

    bb10: {
        _3 = move _8 as std::boxed::Box<dyn std::io::Write> (PointerCoercion(Unsize));
        goto -> bb11;
    }

    bb11: {
        _2 = move _3;
        _0 = Result::<Box<dyn std::io::Write>, std::io::Error>::Ok(move _2);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn config::<impl at src/config.rs:73:1: 73:12>::from_writer(_1: &Config, _2: W) -> Writer<W> {
    debug self => _1;
    debug wtr => _2;
    let mut _0: csv::Writer<W>;
    let mut _3: &csv::WriterBuilder;
    let _4: &mut csv::WriterBuilder;
    let mut _5: &mut csv::WriterBuilder;
    let mut _6: &mut csv::WriterBuilder;
    let mut _7: &mut csv::WriterBuilder;
    let mut _8: &mut csv::WriterBuilder;
    let mut _9: &mut csv::WriterBuilder;
    let mut _10: &mut csv::WriterBuilder;
    let mut _11: &mut csv::WriterBuilder;
    let mut _12: &mut csv::WriterBuilder;
    let mut _13: csv::WriterBuilder;
    let mut _14: bool;
    let mut _15: u8;
    let mut _16: csv::Terminator;
    let mut _17: u8;
    let mut _18: csv::QuoteStyle;
    let mut _19: bool;
    let mut _20: u8;
    let mut _21: std::option::Option<u8>;
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: u32;
    let mut _25: bool;
    let mut _26: (usize, bool);
    let mut _27: W;
    let mut _28: bool;

    bb0: {
        _28 = const false;
        _28 = const true;
        _13 = WriterBuilder::new() -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _12 = &mut _13;
        _14 = ((*_1).5: bool);
        _11 = WriterBuilder::flexible(move _12, move _14) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _15 = ((*_1).3: u8);
        _10 = WriterBuilder::delimiter(_11, move _15) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _16 = ((*_1).6: csv::Terminator);
        _9 = WriterBuilder::terminator(_10, move _16) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _17 = ((*_1).7: u8);
        _8 = WriterBuilder::quote(_9, move _17) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _18 = ((*_1).8: csv::QuoteStyle);
        _7 = WriterBuilder::quote_style(_8, move _18) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _19 = ((*_1).9: bool);
        _6 = WriterBuilder::double_quote(_7, move _19) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _21 = ((*_1).10: std::option::Option<u8>);
        _20 = std::option::Option::<u8>::unwrap_or(move _21, const 92_u8) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _5 = WriterBuilder::escape(_6, move _20) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _24 = const 10_i32 as u32 (IntToInt);
        _25 = Lt(move _24, const 64_u32);
        assert(move _25, "attempt to shift left by `{}`, which would overflow", const 10_i32) -> [success: bb10, unwind: bb16];
    }

    bb10: {
        _23 = Shl(const 1_usize, const 10_i32);
        _26 = CheckedMul(const 32_usize, _23);
        assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", const 32_usize, move _23) -> [success: bb11, unwind: bb16];
    }

    bb11: {
        _22 = move (_26.0: usize);
        _4 = WriterBuilder::buffer_capacity(_5, move _22) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _3 = &(*_4);
        _28 = const false;
        _27 = move _2;
        _0 = WriterBuilder::from_writer::<W>(move _3, move _27) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_28) -> [0: bb14, otherwise: bb15];
    }
}

fn index::<impl at src/index.rs:15:1: 15:40>::deref(_1: &Indexed<R, I>) -> &Reader<R> {
    debug self => _1;
    let mut _0: &csv::Reader<R>;

    bb0: {
        _0 = &((*_1).0: csv::Reader<R>);
        return;
    }
}

fn index::<impl at src/index.rs:20:1: 20:43>::deref_mut(_1: &mut Indexed<R, I>) -> &mut Reader<R> {
    debug self => _1;
    let mut _0: &mut csv::Reader<R>;

    bb0: {
        _0 = &mut ((*_1).0: csv::Reader<R>);
        return;
    }
}

fn index::<impl at src/index.rs:24:1: 24:67>::open(_1: Reader<R>, _2: I) -> Result<Indexed<R, I>, CliError> {
    debug csv_rdr => _1;
    debug idx_rdr => _2;
    let mut _0: std::result::Result<index::Indexed<R, I>, CliError>;
    let mut _3: index::Indexed<R, I>;
    let mut _4: csv::Reader<R>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv_index::RandomAccessSimple<I>>;
    let mut _6: std::result::Result<csv_index::RandomAccessSimple<I>, csv::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, csv::Error>;
    let _9: csv_index::RandomAccessSimple<I>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _4 = move _1;
        _6 = RandomAccessSimple::<I>::open(move _2) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _5 = <Result<RandomAccessSimple<I>, csv::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Continue).0: csv_index::RandomAccessSimple<I>);
        _3 = Indexed::<R, I> { csv_rdr: move _4, idx: move _9 };
        _0 = Result::<Indexed<R, I>, CliError>::Ok(move _3);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<Indexed<R, I>, CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _8) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn index::<impl at src/index.rs:24:1: 24:67>::count(_1: &Indexed<R, I>) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let mut _2: bool;
    let mut _3: &csv::Reader<R>;
    let mut _4: bool;
    let mut _5: &csv_index::RandomAccessSimple<I>;
    let mut _6: u64;
    let mut _7: &csv_index::RandomAccessSimple<I>;
    let mut _8: (u64, bool);
    let mut _9: &csv_index::RandomAccessSimple<I>;

    bb0: {
        _3 = &((*_1).0: csv::Reader<R>);
        _2 = Reader::<R>::has_headers(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        _5 = &((*_1).1: csv_index::RandomAccessSimple<I>);
        _4 = RandomAccessSimple::<I>::is_empty(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb7];
    }

    bb4: {
        _7 = &((*_1).1: csv_index::RandomAccessSimple<I>);
        _6 = RandomAccessSimple::<I>::len(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = CheckedSub(_6, const 1_u64);
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_u64) -> [success: bb6, unwind continue];
    }

    bb6: {
        _0 = move (_8.0: u64);
        goto -> bb8;
    }

    bb7: {
        _9 = &((*_1).1: csv_index::RandomAccessSimple<I>);
        _0 = RandomAccessSimple::<I>::len(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn index::<impl at src/index.rs:24:1: 24:67>::seek(_1: &mut Indexed<R, I>, _2: u64) -> Result<(), CliError> {
    debug self => _1;
    debug i => _2;
    let mut _0: std::result::Result<(), CliError>;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: &index::Indexed<R, I>;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u64;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &u64;
    let _17: u64;
    let mut _18: &index::Indexed<R, I>;
    let mut _19: CliError;
    let mut _20: std::io::Error;
    let mut _21: std::io::ErrorKind;
    let mut _22: bool;
    let mut _23: &csv::Reader<R>;
    let mut _24: (u64, bool);
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>, csv::Position>;
    let mut _26: std::result::Result<csv::Position, csv::Error>;
    let mut _27: &mut csv_index::RandomAccessSimple<I>;
    let mut _28: u64;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, csv::Error>;
    let _31: csv::Position;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, csv::Error>>;
    let mut _33: std::result::Result<(), csv::Error>;
    let mut _34: &mut csv::Reader<R>;
    let mut _35: isize;
    let mut _37: &[&str; 3];
    scope 1 {
        debug msg => _7;
    }
    scope 2 {
        debug res => _7;
    }
    scope 3 {
        debug pos => _31;
        let _36: std::result::Result<std::convert::Infallible, csv::Error>;
        scope 8 {
            debug residual => _36;
            scope 9 {
            }
        }
        scope 10 {
            debug val => const ();
            scope 11 {
            }
        }
    }
    scope 4 {
        debug residual => _30;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _31;
        scope 7 {
        }
    }

    bb0: {
        _4 = _2;
        _6 = &(*_1);
        _5 = Indexed::<R, I>::count(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Ge(move _4, move _5);
        switchInt(move _3) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        _37 = const _;
        _9 = _37 as &[&str] (PointerCoercion(Unsize));
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = &(*_1);
        _17 = Indexed::<R, I>::count(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = [move _13, move _15];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = format(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = std::io::ErrorKind::Other;
        _20 = std::io::Error::new::<std::string::String>(move _21, move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = <CliError as From<std::io::Error>>::from(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = Result::<(), CliError>::Err(move _19);
        goto -> bb24;
    }

    bb10: {
        _23 = &((*_1).0: csv::Reader<R>);
        _22 = Reader::<R>::has_headers(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _22) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        _24 = CheckedAdd(_2, const 1_u64);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_u64) -> [success: bb13, unwind continue];
    }

    bb13: {
        _2 = move (_24.0: u64);
        goto -> bb14;
    }

    bb14: {
        _27 = &mut ((*_1).1: csv_index::RandomAccessSimple<I>);
        _28 = _2;
        _26 = RandomAccessSimple::<I>::get(move _27, move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        _25 = <Result<Position, csv::Error> as Try>::branch(move _26) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        _31 = move ((_25 as Continue).0: csv::Position);
        _34 = &mut ((*_1).0: csv::Reader<R>);
        _33 = Reader::<R>::seek(move _34, move _31) -> [return: bb20, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        _30 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _30) -> [return: bb24, unwind continue];
    }

    bb20: {
        _32 = <Result<(), csv::Error> as Try>::branch(move _33) -> [return: bb21, unwind continue];
    }

    bb21: {
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb22, 1: bb23, otherwise: bb18];
    }

    bb22: {
        _0 = Result::<(), CliError>::Ok(const ());
        goto -> bb24;
    }

    bb23: {
        _36 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, csv::Error>);
        _0 = <Result<(), CliError> as FromResidual<Result<Infallible, csv::Error>>>::from_residual(move _36) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }
}

promoted[0] in index::<impl at src/index.rs:24:1: 24:67>::seek: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "invalid record index ", const " (there are ", const " records)"];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:12:10: 12:15>::clone(_1: &SelectColumns) -> SelectColumns {
    debug self => _1;
    let mut _0: select::SelectColumns;
    let mut _2: std::vec::Vec<select::Selector>;
    let _3: &std::vec::Vec<select::Selector>;
    let mut _4: bool;
    let _5: &bool;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<select::Selector>);
        _2 = <Vec<Selector> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: bool);
        _4 = (*_5);
        _0 = SelectColumns { selectors: move _2, invert: move _4 };
        return;
    }
}

fn select::<impl at src/select.rs:18:1: 18:19>::parse(_1: &str) -> Result<SelectColumns, std::string::String> {
    debug s => _1;
    let mut _0: std::result::Result<select::SelectColumns, std::string::String>;
    let _2: bool;
    let mut _3: bool;
    let mut _4: &str;
    let mut _5: u8;
    let mut _6: &[u8];
    let mut _7: &str;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let _11: &str;
    let mut _12: &str;
    let mut _13: std::ops::RangeFrom<usize>;
    let mut _14: select::SelectColumns;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, std::vec::Vec<select::Selector>>;
    let mut _16: std::result::Result<std::vec::Vec<select::Selector>, std::string::String>;
    let mut _17: &mut select::SelectorParser;
    let mut _18: select::SelectorParser;
    let mut _19: &str;
    let mut _20: isize;
    let mut _23: bool;
    scope 1 {
        debug invert => _2;
        let _21: std::result::Result<std::convert::Infallible, std::string::String>;
        let _22: std::vec::Vec<select::Selector>;
        scope 2 {
            debug residual => _21;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _22;
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;
        _3 = core::str::<impl str>::is_empty(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb7];
    }

    bb2: {
        _7 = _1;
        _6 = core::str::<impl str>::as_bytes(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = const 0_usize;
        _9 = Len((*_6));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb4, unwind continue];
    }

    bb4: {
        _5 = (*_6)[_8];
        switchInt(move _5) -> [33: bb5, otherwise: bb7];
    }

    bb5: {
        _12 = _1;
        _13 = RangeFrom::<usize> { start: const 1_usize };
        _11 = <str as Index<RangeFrom<usize>>>::index(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _1 = _11;
        _2 = const true;
        goto -> bb8;
    }

    bb7: {
        _2 = const false;
        goto -> bb8;
    }

    bb8: {
        _19 = _1;
        _18 = SelectorParser::new(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        _17 = &mut _18;
        _16 = SelectorParser::parse(move _17) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _15 = <Result<Vec<Selector>, std::string::String> as Try>::branch(move _16) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _22 = move ((_15 as Continue).0: std::vec::Vec<select::Selector>);
        _23 = _2;
        _14 = SelectColumns { selectors: move _22, invert: move _23 };
        _0 = Result::<SelectColumns, std::string::String>::Ok(move _14);
        drop(_18) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<SelectColumns, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _21) -> [return: bb15, unwind: bb17];
    }

    bb15: {
        drop(_18) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_18) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}

fn select::<impl at src/select.rs:18:1: 18:19>::selection(_1: &SelectColumns, _2: &ByteRecord, _3: bool) -> Result<Selection, std::string::String> {
    debug self => _1;
    debug first_record => _2;
    debug use_names => _3;
    let mut _0: std::result::Result<select::Selection, std::string::String>;
    let mut _4: bool;
    let mut _5: &std::vec::Vec<select::Selector>;
    let mut _6: select::Selection;
    let mut _7: std::vec::Vec<usize>;
    let mut _8: bool;
    let mut _9: std::ops::Range<usize>;
    let mut _10: usize;
    let mut _11: std::vec::Vec<usize>;
    let mut _12: std::slice::Iter<'_, select::Selector>;
    let mut _13: &std::vec::Vec<select::Selector>;
    let mut _15: std::option::Option<&select::Selector>;
    let mut _16: &mut std::slice::Iter<'_, select::Selector>;
    let mut _17: isize;
    let _20: ();
    let mut _21: &mut std::vec::Vec<usize>;
    let mut _22: std::vec::IntoIter<usize>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, std::vec::Vec<usize>>;
    let mut _24: isize;
    let mut _27: bool;
    let mut _29: std::vec::IntoIter<usize>;
    let mut _30: std::vec::Vec<usize>;
    let mut _32: std::ops::Range<usize>;
    let mut _33: std::ops::Range<usize>;
    let mut _34: usize;
    let mut _36: std::option::Option<usize>;
    let mut _37: &mut std::ops::Range<usize>;
    let mut _38: isize;
    let mut _40: bool;
    let mut _41: &std::collections::HashSet<usize>;
    let _42: &usize;
    let _43: ();
    let mut _44: &mut std::vec::Vec<usize>;
    let mut _45: usize;
    let mut _46: select::Selection;
    let mut _47: std::vec::Vec<usize>;
    let mut _48: select::Selection;
    let mut _49: std::vec::Vec<usize>;
    let mut _50: bool;
    scope 1 {
        debug map => _11;
        let mut _14: std::slice::Iter<'_, select::Selector>;
        let _28: std::collections::HashSet<usize>;
        scope 2 {
            debug iter => _14;
            let _18: &select::Selector;
            scope 3 {
                debug sel => _18;
                let _19: std::result::Result<std::vec::Vec<usize>, std::string::String>;
                scope 4 {
                    debug idxs => _19;
                    let _25: std::result::Result<std::convert::Infallible, std::string::String>;
                    let _26: std::vec::Vec<usize>;
                    scope 5 {
                        debug residual => _25;
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => _26;
                        scope 8 {
                        }
                    }
                }
            }
        }
        scope 9 {
            debug set => _28;
            let mut _31: std::vec::Vec<usize>;
            scope 10 {
                debug map => _31;
                let mut _35: std::ops::Range<usize>;
                scope 11 {
                    debug iter => _35;
                    let _39: usize;
                    scope 12 {
                        debug i => _39;
                    }
                }
            }
        }
    }

    bb0: {
        _50 = const false;
        _5 = &((*_1).0: std::vec::Vec<select::Selector>);
        _4 = Vec::<Selector>::is_empty(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        _8 = ((*_1).1: bool);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _7 = Vec::<usize>::new() -> [return: bb6, unwind continue];
    }

    bb4: {
        _10 = ByteRecord::len(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = std::ops::Range::<usize> { start: const 0_usize, end: move _10 };
        _7 = <std::ops::Range<usize> as Iterator>::collect::<Vec<usize>>(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = Selection(move _7);
        _0 = Result::<Selection, std::string::String>::Ok(move _6);
        goto -> bb34;
    }

    bb7: {
        _50 = const true;
        _11 = Vec::<usize>::new() -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = &((*_1).0: std::vec::Vec<select::Selector>);
        _12 = <&Vec<Selector> as IntoIterator>::into_iter(move _13) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _14 = move _12;
        goto -> bb10;
    }

    bb10: {
        _16 = &mut _14;
        _15 = <std::slice::Iter<'_, Selector> as Iterator>::next(_16) -> [return: bb11, unwind: bb41];
    }

    bb11: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _18 = ((_15 as Some).0: &select::Selector);
        _19 = Selector::indices(_18, _2, _3) -> [return: bb15, unwind: bb41];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _27 = ((*_1).1: bool);
        switchInt(move _27) -> [0: bb21, otherwise: bb20];
    }

    bb15: {
        _21 = &mut _11;
        _23 = <Result<Vec<usize>, std::string::String> as Try>::branch(move _19) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _24 = discriminant(_23);
        switchInt(move _24) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        _26 = move ((_23 as Continue).0: std::vec::Vec<usize>);
        _22 = <Vec<usize> as IntoIterator>::into_iter(move _26) -> [return: bb19, unwind: bb41];
    }

    bb18: {
        _25 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Selection, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _25) -> [return: bb42, unwind: bb41];
    }

    bb19: {
        _20 = <Vec<usize> as Extend<usize>>::extend::<std::vec::IntoIter<usize>>(move _21, move _22) -> [return: bb43, unwind: bb41];
    }

    bb20: {
        _50 = const false;
        _30 = move _11;
        _29 = <Vec<usize> as IntoIterator>::into_iter(move _30) -> [return: bb22, unwind: bb41];
    }

    bb21: {
        _50 = const false;
        _49 = move _11;
        _48 = Selection(move _49);
        _0 = Result::<Selection, std::string::String>::Ok(move _48);
        _50 = const false;
        goto -> bb34;
    }

    bb22: {
        _28 = <std::vec::IntoIter<usize> as Iterator>::collect::<HashSet<usize>>(move _29) -> [return: bb23, unwind: bb41];
    }

    bb23: {
        _31 = Vec::<usize>::new() -> [return: bb24, unwind: bb36];
    }

    bb24: {
        _34 = ByteRecord::len(_2) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        _33 = std::ops::Range::<usize> { start: const 0_usize, end: move _34 };
        _32 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _33) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        _35 = move _32;
        goto -> bb27;
    }

    bb27: {
        _37 = &mut _35;
        _36 = <std::ops::Range<usize> as Iterator>::next(_37) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb30, 1: bb29, otherwise: bb13];
    }

    bb29: {
        _39 = ((_36 as Some).0: usize);
        _41 = &_28;
        _42 = &_39;
        _40 = HashSet::<usize>::contains::<usize>(move _41, _42) -> [return: bb31, unwind: bb35];
    }

    bb30: {
        _47 = move _31;
        _46 = Selection(move _47);
        _0 = Result::<Selection, std::string::String>::Ok(move _46);
        drop(_28) -> [return: bb39, unwind: bb41];
    }

    bb31: {
        switchInt(move _40) -> [0: bb32, otherwise: bb27];
    }

    bb32: {
        _44 = &mut _31;
        _45 = _39;
        _43 = Vec::<usize>::push(move _44, move _45) -> [return: bb44, unwind: bb35];
    }

    bb33: {
        _50 = const false;
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_31) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_28) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38: {
        drop(_11) -> [return: bb33, unwind continue];
    }

    bb39: {
        switchInt(_50) -> [0: bb33, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_11) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_50) -> [0: bb37, otherwise: bb40];
    }

    bb42: {
        goto -> bb39;
    }

    bb43: {
        goto -> bb10;
    }

    bb44: {
        goto -> bb27;
    }
}

fn select::<impl at src/select.rs:66:1: 66:34>::fmt(_1: &SelectColumns, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: bool;
    let mut _4: &std::vec::Vec<select::Selector>;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let _7: std::vec::Vec<std::string::String>;
    let mut _8: std::iter::Map<std::slice::Iter<'_, select::Selector>, {closure@src/select.rs:73:33: 73:38}>;
    let mut _9: std::slice::Iter<'_, select::Selector>;
    let _10: &[select::Selector];
    let mut _11: &std::vec::Vec<select::Selector>;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &std::string::String;
    let _19: std::string::String;
    let _20: &[std::string::String];
    let mut _21: &std::vec::Vec<std::string::String>;
    let _22: &str;
    let mut _23: &[&str; 1];
    scope 1 {
        debug strs => _7;
        let mut _24: &[&str; 1];
    }

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<select::Selector>);
        _3 = Vec::<Selector>::is_empty(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _23 = const _;
        _6 = _23 as &[&str] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Formatter::<'_>::write_fmt(_2, move _5) -> [return: bb15, unwind continue];
    }

    bb4: {
        _11 = &((*_1).0: std::vec::Vec<select::Selector>);
        _10 = <Vec<Selector> as Deref>::deref(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = core::slice::<impl [Selector]>::iter(_10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = <std::slice::Iter<'_, Selector> as Iterator>::map::<std::string::String, {closure@src/select.rs:73:33: 73:38}>(move _9, const ZeroSized: {closure@src/select.rs:73:33: 73:38}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _7 = <std::iter::Map<std::slice::Iter<'_, Selector>, {closure@src/select.rs:73:33: 73:38}> as Iterator>::collect::<Vec<std::string::String>>(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _24 = const _;
        _13 = _24 as &[&str] (PointerCoercion(Unsize));
        _21 = &_7;
        _20 = <Vec<std::string::String> as Deref>::deref(move _21) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _22 = const ", ";
        _19 = std::slice::<impl [std::string::String]>::join::<&str>(_20, _22) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_18) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _0 = Formatter::<'_>::write_fmt(_2, move _12) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_7) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_19) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_19) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in select::<impl at src/select.rs:66:1: 66:34>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "<All>"];
        _0 = &_1;
        return;
    }
}

promoted[1] in select::<impl at src/select.rs:66:1: 66:34>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:66:1: 66:34>::fmt::{closure#0}(_1: &mut {closure@src/select.rs:73:33: 73:38}, _2: &Selector) -> std::string::String {
    debug sel => _2;
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&select::Selector;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_2;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<&Selector>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in select::<impl at src/select.rs:66:1: 66:34>::fmt::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:79:1: 79:45>::deserialize(_1: D) -> Result<SelectColumns, <D as serde::Deserializer<'_>>::Error> {
    debug d => _1;
    let mut _0: std::result::Result<select::SelectColumns, <D as serde::Deserializer<'_>>::Error>;
    let _2: std::string::String;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>, std::string::String>;
    let mut _4: std::result::Result<std::string::String, <D as serde::Deserializer<'_>>::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>;
    let _7: std::string::String;
    let mut _8: std::result::Result<select::SelectColumns, std::string::String>;
    let _9: &str;
    let _10: &std::string::String;
    scope 1 {
        debug raw => _2;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <std::string::String as serde::Deserialize<'_>>::deserialize::<D>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<std::string::String, <D as serde::Deserializer<'_>>::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::string::String);
        _2 = move _7;
        _10 = &_2;
        _9 = <std::string::String as Deref>::deref(_10) -> [return: bb6, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>);
        _0 = <Result<SelectColumns, <D as serde::Deserializer<'_>>::Error> as FromResidual<Result<Infallible, <D as serde::Deserializer<'_>>::Error>>>::from_residual(move _6) -> [return: bb9, unwind continue];
    }

    bb6: {
        _8 = SelectColumns::parse(_9) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _0 = Result::<SelectColumns, std::string::String>::map_err::<<D as serde::Deserializer<'_>>::Error, {closure@src/select.rs:84:44: 84:47}>(move _8, const ZeroSized: {closure@src/select.rs:84:44: 84:47}) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn select::<impl at src/select.rs:79:1: 79:45>::deserialize::{closure#0}(_1: {closure@src/select.rs:84:44: 84:47}, _2: std::string::String) -> <D as serde::Deserializer<'_>>::Error {
    debug e => _2;
    let mut _0: <D as serde::Deserializer<'_>>::Error;
    let mut _3: &std::string::String;

    bb0: {
        _3 = &_2;
        _0 = <<D as serde::Deserializer<'_>>::Error as serde::de::Error>::custom::<&std::string::String>(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::new(_1: &str) -> SelectorParser {
    debug s => _1;
    let mut _0: select::SelectorParser;
    let mut _2: std::vec::Vec<char>;
    let mut _3: std::str::Chars<'_>;

    bb0: {
        _3 = core::str::<impl str>::chars(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Chars<'_> as Iterator>::collect::<Vec<char>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = SelectorParser { chars: move _2, pos: const 0_usize };
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse(_1: &mut SelectorParser) -> Result<Vec<Selector>, std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<select::Selector>, std::string::String>;
    let mut _2: std::vec::Vec<select::Selector>;
    let mut _3: bool;
    let mut _4: &std::option::Option<char>;
    let _5: std::option::Option<char>;
    let mut _6: &select::SelectorParser;
    let mut _8: bool;
    let mut _9: &std::option::Option<char>;
    let _10: std::option::Option<char>;
    let mut _11: &select::SelectorParser;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::OneSelector>;
    let mut _13: std::result::Result<select::OneSelector, std::string::String>;
    let mut _14: isize;
    let mut _18: bool;
    let mut _19: &std::option::Option<char>;
    let _20: std::option::Option<char>;
    let mut _21: &select::SelectorParser;
    let _22: ();
    let mut _23: select::OneSelector;
    let mut _24: bool;
    let mut _25: &select::SelectorParser;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, select::OneSelector>;
    let mut _27: std::result::Result<select::OneSelector, std::string::String>;
    let mut _28: isize;
    let mut _31: bool;
    let mut _32: &select::SelectorParser;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &char;
    let _41: char;
    let mut _42: std::option::Option<char>;
    let mut _43: &select::SelectorParser;
    let _44: ();
    let mut _45: &mut std::vec::Vec<select::Selector>;
    let mut _46: select::Selector;
    let mut _47: isize;
    let mut _49: select::OneSelector;
    let mut _50: select::OneSelector;
    let _51: ();
    let mut _52: std::vec::Vec<select::Selector>;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: isize;
    scope 1 {
        debug sels => _2;
        let _7: select::OneSelector;
        let _15: std::result::Result<std::convert::Infallible, std::string::String>;
        let _16: select::OneSelector;
        let mut _55: &std::option::Option<char>;
        scope 2 {
            debug f1 => _7;
            let _17: std::option::Option<select::OneSelector>;
            let _29: std::result::Result<std::convert::Infallible, std::string::String>;
            let _30: select::OneSelector;
            let mut _54: &std::option::Option<char>;
            scope 7 {
                debug f2 => _17;
                let _33: std::string::String;
                let _48: select::OneSelector;
                let mut _53: &[&str; 2];
                scope 12 {
                    debug res => _33;
                }
                scope 13 {
                    debug end => _48;
                }
            }
            scope 8 {
                debug residual => _29;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        _57 = const false;
        _56 = const false;
        _2 = Vec::<Selector>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &(*_1);
        _5 = SelectorParser::cur(move _6) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        _4 = &_5;
        _3 = std::option::Option::<char>::is_none(move _4) -> [return: bb3, unwind: bb46];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _52 = move _2;
        _0 = Result::<Vec<Selector>, std::string::String>::Ok(move _52);
        goto -> bb45;
    }

    bb5: {
        _11 = &(*_1);
        _10 = SelectorParser::cur(move _11) -> [return: bb6, unwind: bb46];
    }

    bb6: {
        _9 = &_10;
        _55 = const _;
        _8 = <std::option::Option<char> as PartialEq>::eq(move _9, _55) -> [return: bb7, unwind: bb46];
    }

    bb7: {
        switchInt(move _8) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _57 = const true;
        _7 = OneSelector::Start;
        goto -> bb15;
    }

    bb9: {
        _13 = SelectorParser::parse_one(_1) -> [return: bb10, unwind: bb46];
    }

    bb10: {
        _12 = <Result<OneSelector, std::string::String> as Try>::branch(move _13) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _16 = move ((_12 as Continue).0: select::OneSelector);
        _57 = const true;
        _7 = move _16;
        goto -> bb15;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<Selector>, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _15) -> [return: bb53, unwind: bb46];
    }

    bb15: {
        _21 = &(*_1);
        _20 = SelectorParser::cur(move _21) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _19 = &_20;
        _54 = const _;
        _18 = <std::option::Option<char> as PartialEq>::eq(move _19, _54) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        switchInt(move _18) -> [0: bb28, otherwise: bb18];
    }

    bb18: {
        _22 = SelectorParser::bump(_1) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _25 = &(*_1);
        _24 = SelectorParser::is_end_of_selector(move _25) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        switchInt(move _24) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _23 = OneSelector::End;
        goto -> bb27;
    }

    bb22: {
        _27 = SelectorParser::parse_one(_1) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        _26 = <Result<OneSelector, std::string::String> as Try>::branch(move _27) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb25, 1: bb26, otherwise: bb13];
    }

    bb25: {
        _30 = move ((_26 as Continue).0: select::OneSelector);
        _23 = move _30;
        goto -> bb27;
    }

    bb26: {
        _29 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<Selector>, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _29) -> [return: bb54, unwind: bb52];
    }

    bb27: {
        _56 = const true;
        _17 = std::option::Option::<OneSelector>::Some(move _23);
        goto -> bb29;
    }

    bb28: {
        _56 = const true;
        _17 = std::option::Option::<OneSelector>::None;
        goto -> bb29;
    }

    bb29: {
        _32 = &(*_1);
        _31 = SelectorParser::is_end_of_selector(move _32) -> [return: bb30, unwind: bb50];
    }

    bb30: {
        switchInt(move _31) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _45 = &mut _2;
        _47 = discriminant(_17);
        switchInt(move _47) -> [0: bb38, 1: bb39, otherwise: bb13];
    }

    bb32: {
        _53 = const _;
        _35 = _53 as &[&str] (PointerCoercion(Unsize));
        _43 = &(*_1);
        _42 = SelectorParser::cur(move _43) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _41 = std::option::Option::<char>::unwrap(move _42) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _40 = &_41;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<char>(_40) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb36, unwind: bb50];
    }

    bb36: {
        _33 = format(move _34) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _0 = Result::<Vec<Selector>, std::string::String>::Err(move _33);
        drop(_17) -> [return: bb43, unwind: bb52];
    }

    bb38: {
        _57 = const false;
        _50 = move _7;
        _46 = Selector::One(move _50);
        goto -> bb40;
    }

    bb39: {
        _56 = const false;
        _48 = move ((_17 as Some).0: select::OneSelector);
        _57 = const false;
        _49 = move _7;
        _46 = Selector::Range(move _49, move _48);
        goto -> bb40;
    }

    bb40: {
        _44 = Vec::<Selector>::push(move _45, move _46) -> [return: bb41, unwind: bb50];
    }

    bb41: {
        _51 = SelectorParser::bump(_1) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        _56 = const false;
        _57 = const false;
        goto -> bb1;
    }

    bb43: {
        _56 = const false;
        drop(_7) -> [return: bb44, unwind: bb46];
    }

    bb44: {
        _57 = const false;
        drop(_2) -> [return: bb45, unwind continue];
    }

    bb45: {
        return;
    }

    bb46 (cleanup): {
        drop(_2) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        switchInt(_56) -> [0: bb52, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop(((_17 as Some).0: select::OneSelector)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        _58 = discriminant(_17);
        switchInt(move _58) -> [1: bb48, otherwise: bb52];
    }

    bb51 (cleanup): {
        drop(_7) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_57) -> [0: bb46, otherwise: bb51];
    }

    bb53: {
        goto -> bb44;
    }

    bb54: {
        goto -> bb43;
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Expected end of field but got '", const "' instead."];
        _0 = &_1;
        return;
    }
}

promoted[1] in select::<impl at src/select.rs:93:1: 93:20>::parse: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '-');
        _0 = &_1;
        return;
    }
}

promoted[2] in select::<impl at src/select.rs:93:1: 93:20>::parse: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '-');
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse_one(_1: &mut SelectorParser) -> Result<OneSelector, std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<select::OneSelector, std::string::String>;
    let _2: std::string::String;
    let mut _3: bool;
    let mut _4: &std::option::Option<char>;
    let _5: std::option::Option<char>;
    let mut _6: &select::SelectorParser;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, std::string::String>;
    let mut _9: std::result::Result<std::string::String, std::string::String>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::string::String>;
    let _12: std::string::String;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, std::string::String>;
    let mut _14: std::result::Result<std::string::String, std::string::String>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, std::string::String>;
    let _17: std::string::String;
    let mut _18: select::OneSelector;
    let mut _19: bool;
    let mut _20: &std::option::Option<char>;
    let _21: std::option::Option<char>;
    let mut _22: &select::SelectorParser;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, usize>;
    let mut _24: std::result::Result<usize, std::string::String>;
    let mut _25: isize;
    let mut _28: std::string::String;
    let mut _29: std::result::Result<usize, std::num::ParseIntError>;
    let _30: &str;
    let _31: &std::string::String;
    let mut _32: isize;
    let mut _33: std::string::String;
    let mut _36: &std::option::Option<char>;
    let mut _37: bool;
    scope 1 {
        debug name => _2;
        let _26: std::result::Result<std::convert::Infallible, std::string::String>;
        let _27: usize;
        let _34: usize;
        let mut _35: &std::option::Option<char>;
        scope 10 {
            debug idx => _27;
        }
        scope 11 {
            debug residual => _26;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _27;
            scope 14 {
            }
        }
        scope 15 {
            debug idx => _34;
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _16;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _17;
        scope 9 {
        }
    }

    bb0: {
        _37 = const false;
        _6 = &(*_1);
        _5 = SelectorParser::cur(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _36 = const _;
        _3 = <std::option::Option<char> as PartialEq>::eq(move _4, _36) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb10, otherwise: bb3];
    }

    bb3: {
        _7 = SelectorParser::bump(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = SelectorParser::parse_quoted_name(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = <Result<std::string::String, std::string::String> as Try>::branch(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _12 = move ((_8 as Continue).0: std::string::String);
        _37 = const true;
        _2 = move _12;
        goto -> bb15;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<OneSelector, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _11) -> [return: bb31, unwind continue];
    }

    bb10: {
        _14 = SelectorParser::parse_name(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        _13 = <Result<std::string::String, std::string::String> as Try>::branch(move _14) -> [return: bb12, unwind continue];
    }

    bb12: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        _17 = move ((_13 as Continue).0: std::string::String);
        _37 = const true;
        _2 = move _17;
        goto -> bb15;
    }

    bb14: {
        _16 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<OneSelector, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _16) -> [return: bb31, unwind continue];
    }

    bb15: {
        _22 = &(*_1);
        _21 = SelectorParser::cur(move _22) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _20 = &_21;
        _35 = const _;
        _19 = <std::option::Option<char> as PartialEq>::eq(move _20, _35) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        switchInt(move _19) -> [0: bb24, otherwise: bb18];
    }

    bb18: {
        _24 = SelectorParser::parse_index(_1) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _23 = <Result<usize, std::string::String> as Try>::branch(move _24) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb21: {
        _27 = ((_23 as Continue).0: usize);
        _37 = const false;
        _28 = move _2;
        _18 = OneSelector::IndexedName(move _28, _27);
        goto -> bb29;
    }

    bb22: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<OneSelector, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _26) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        drop(_2) -> [return: bb31, unwind continue];
    }

    bb24: {
        _31 = &_2;
        _30 = <std::string::String as Deref>::deref(_31) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _29 = <usize as FromStr>::from_str(_30) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb27, 1: bb28, otherwise: bb8];
    }

    bb27: {
        _34 = ((_29 as Ok).0: usize);
        _18 = OneSelector::Index(_34);
        goto -> bb29;
    }

    bb28: {
        _37 = const false;
        _33 = move _2;
        _18 = OneSelector::IndexedName(move _33, const 0_usize);
        goto -> bb29;
    }

    bb29: {
        _0 = Result::<OneSelector, std::string::String>::Ok(move _18);
        switchInt(_37) -> [0: bb30, otherwise: bb35];
    }

    bb30: {
        _37 = const false;
        goto -> bb32;
    }

    bb31: {
        _37 = const false;
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        drop(_2) -> [return: bb30, unwind continue];
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse_one: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '[');
        _0 = &_1;
        return;
    }
}

promoted[1] in select::<impl at src/select.rs:93:1: 93:20>::parse_one: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '"');
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse_name(_1: &mut SelectorParser) -> Result<std::string::String, std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<std::string::String, std::string::String>;
    let mut _2: std::string::String;
    let mut _3: bool;
    let mut _4: &select::SelectorParser;
    let mut _5: bool;
    let mut _6: &std::option::Option<char>;
    let _7: std::option::Option<char>;
    let mut _8: &select::SelectorParser;
    let _9: ();
    let mut _10: &mut std::string::String;
    let mut _11: char;
    let mut _12: std::option::Option<char>;
    let mut _13: &select::SelectorParser;
    let _14: ();
    let mut _15: std::string::String;
    scope 1 {
        debug name => _2;
        let mut _16: &std::option::Option<char>;
    }

    bb0: {
        _2 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &(*_1);
        _3 = SelectorParser::is_end_of_field(move _4) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        switchInt(move _3) -> [0: bb3, otherwise: bb6];
    }

    bb3: {
        _8 = &(*_1);
        _7 = SelectorParser::cur(move _8) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _6 = &_7;
        _16 = const _;
        _5 = <std::option::Option<char> as PartialEq>::eq(move _6, _16) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        switchInt(move _5) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = move _2;
        _0 = Result::<std::string::String, std::string::String>::Ok(move _15);
        return;
    }

    bb7: {
        _10 = &mut _2;
        _13 = &(*_1);
        _12 = SelectorParser::cur(move _13) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _11 = std::option::Option::<char>::unwrap(move _12) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _9 = std::string::String::push(move _10, move _11) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _14 = SelectorParser::bump(_1) -> [return: bb13, unwind: bb11];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb1;
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse_name: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '[');
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse_quoted_name(_1: &mut SelectorParser) -> Result<std::string::String, std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<std::string::String, std::string::String>;
    let mut _2: std::string::String;
    let mut _3: std::option::Option<char>;
    let mut _4: &select::SelectorParser;
    let mut _5: isize;
    let mut _6: std::string::String;
    let _7: &str;
    let _8: ();
    let mut _9: bool;
    let mut _10: &std::option::Option<char>;
    let _11: std::option::Option<char>;
    let mut _12: &select::SelectorParser;
    let _13: ();
    let _14: ();
    let mut _15: &mut std::string::String;
    let _16: ();
    let mut _17: &mut std::string::String;
    let _19: ();
    let mut _20: &mut std::string::String;
    let _21: ();
    let mut _22: std::string::String;
    scope 1 {
        debug name => _2;
        let _18: char;
        let mut _23: &std::option::Option<char>;
        scope 2 {
            debug c => _18;
        }
    }

    bb0: {
        _2 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &(*_1);
        _3 = SelectorParser::cur(move _4) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb6, 1: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt(((_3 as Some).0: char)) -> [34: bb8, otherwise: bb4];
    }

    bb4: {
        _18 = ((_3 as Some).0: char);
        _20 = &mut _2;
        _19 = std::string::String::push(move _20, _18) -> [return: bb16, unwind: bb18];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _7 = const "Unclosed quote, missing closing \".";
        _6 = <str as ToOwned>::to_owned(_7) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _0 = Result::<std::string::String, std::string::String>::Err(move _6);
        drop(_2) -> [return: bb17, unwind continue];
    }

    bb8: {
        _8 = SelectorParser::bump(_1) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _12 = &(*_1);
        _11 = SelectorParser::cur(move _12) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _10 = &_11;
        _23 = const _;
        _9 = <std::option::Option<char> as PartialEq>::eq(move _10, _23) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        switchInt(move _9) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _13 = SelectorParser::bump(_1) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _15 = &mut _2;
        _14 = std::string::String::push(move _15, const '"') -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _17 = &mut _2;
        _16 = std::string::String::push(move _17, const '"') -> [return: bb20, unwind: bb18];
    }

    bb15: {
        _22 = move _2;
        _0 = Result::<std::string::String, std::string::String>::Ok(move _22);
        goto -> bb17;
    }

    bb16: {
        _21 = SelectorParser::bump(_1) -> [return: bb21, unwind: bb18];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        goto -> bb1;
    }

    bb21: {
        goto -> bb1;
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse_quoted_name: &std::option::Option<char> = {
    let mut _0: &std::option::Option<char>;
    let mut _1: std::option::Option<char>;

    bb0: {
        _1 = std::option::Option::<char>::Some(const '"');
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse_index(_1: &mut SelectorParser) -> Result<usize, std::string::String> {
    debug self => _1;
    let mut _0: std::result::Result<usize, std::string::String>;
    let mut _2: (&char, &char);
    let mut _3: &char;
    let _4: char;
    let mut _5: std::option::Option<char>;
    let mut _6: &select::SelectorParser;
    let _7: &char;
    let _8: &char;
    let mut _9: bool;
    let mut _10: char;
    let mut _11: char;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: ();
    let mut _16: std::string::String;
    let mut _17: std::option::Option<char>;
    let mut _18: &select::SelectorParser;
    let mut _19: isize;
    let mut _20: std::string::String;
    let _21: &str;
    let _22: ();
    let _24: ();
    let mut _25: &mut std::string::String;
    let _26: ();
    let mut _27: std::result::Result<usize, std::num::ParseIntError>;
    let _28: &str;
    let _29: &std::string::String;
    let mut _30: {closure@src/select.rs:204:41: 204:46};
    let mut _31: &std::string::String;
    let mut _32: &char;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug idx => _16;
        let _23: char;
        scope 4 {
            debug c => _23;
        }
    }

    bb0: {
        _6 = &(*_1);
        _5 = SelectorParser::cur(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::option::Option::<char>::unwrap(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _32 = const _;
        _2 = (move _3, _32);
        _7 = (_2.0: &char);
        _8 = (_2.1: &char);
        _10 = (*_7);
        _11 = (*_8);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = SelectorParser::bump(_1) -> [return: bb5, unwind continue];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = std::option::Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<char, char>(move _12, _7, _8, move _14) -> unwind continue;
    }

    bb5: {
        _16 = std::string::String::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = &(*_1);
        _17 = SelectorParser::cur(move _18) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt(((_17 as Some).0: char)) -> [93: bb13, otherwise: bb9];
    }

    bb9: {
        _23 = ((_17 as Some).0: char);
        _25 = &mut _16;
        _24 = std::string::String::push(move _25, _23) -> [return: bb15, unwind: bb20];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _21 = const "Unclosed index bracket, missing closing ].";
        _20 = <str as ToOwned>::to_owned(_21) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _0 = Result::<usize, std::string::String>::Err(move _20);
        drop(_16) -> [return: bb19, unwind continue];
    }

    bb13: {
        _22 = SelectorParser::bump(_1) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _29 = &_16;
        _28 = <std::string::String as Deref>::deref(_29) -> [return: bb16, unwind: bb20];
    }

    bb15: {
        _26 = SelectorParser::bump(_1) -> [return: bb22, unwind: bb20];
    }

    bb16: {
        _27 = <usize as FromStr>::from_str(_28) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _31 = &_16;
        _30 = {closure@src/select.rs:204:41: 204:46} { idx: move _31 };
        _0 = Result::<usize, ParseIntError>::map_err::<std::string::String, {closure@src/select.rs:204:41: 204:46}>(move _27, move _30) -> [return: bb18, unwind: bb20];
    }

    bb18: {
        drop(_16) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_16) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        goto -> bb6;
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse_index: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '[';
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::parse_index::{closure#0}(_1: {closure@src/select.rs:204:41: 204:46}, _2: ParseIntError) -> std::string::String {
    debug err => _2;
    debug idx => (*(_1.0: &std::string::String));
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 2];
    let _7: [core::fmt::rt::Argument<'_>; 2];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::num::ParseIntError;
    let mut _11: &[&str; 2];
    let mut _12: &std::string::String;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _11 = const _;
        _4 = _11 as &[&str] (PointerCoercion(Unsize));
        _12 = deref_copy (_1.0: &std::string::String);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<ParseIntError>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = [move _8, move _9];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = format(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in select::<impl at src/select.rs:93:1: 93:20>::parse_index::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Could not convert '", const "' to an integer: "];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::cur(_1: &SelectorParser) -> std::option::Option<char> {
    debug self => _1;
    let mut _0: std::option::Option<char>;
    let mut _2: std::option::Option<&char>;
    let _3: &[char];
    let mut _4: &std::vec::Vec<char>;
    let mut _5: usize;

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<char>);
        _3 = <Vec<char> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_1).1: usize);
        _2 = core::slice::<impl [char]>::get::<usize>(_3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<&char>::cloned(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::is_end_of_field(_1: &SelectorParser) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: std::option::Option<char>;

    bb0: {
        _2 = SelectorParser::cur(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::option::Option::<char>::map_or::<bool, {closure@src/select.rs:214:33: 214:36}>(move _2, const true, const ZeroSized: {closure@src/select.rs:214:33: 214:36}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::is_end_of_field::{closure#0}(_1: {closure@src/select.rs:214:33: 214:36}, _2: char) -> bool {
    debug c => _2;
    let mut _0: bool;

    bb0: {
        switchInt(move _2) -> [44: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const true;
        goto -> bb3;
    }

    bb2: {
        _0 = Eq(_2, const '-');
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::is_end_of_selector(_1: &SelectorParser) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: std::option::Option<char>;

    bb0: {
        _2 = SelectorParser::cur(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::option::Option::<char>::map_or::<bool, {closure@src/select.rs:218:33: 218:36}>(move _2, const true, const ZeroSized: {closure@src/select.rs:218:33: 218:36}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::is_end_of_selector::{closure#0}(_1: {closure@src/select.rs:218:33: 218:36}, _2: char) -> bool {
    debug c => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_2, const ',');
        return;
    }
}

fn select::<impl at src/select.rs:93:1: 93:20>::bump(_1: &mut SelectorParser) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<char>;
    let mut _6: (usize, bool);

    bb0: {
        _3 = ((*_1).1: usize);
        _5 = &((*_1).0: std::vec::Vec<char>);
        _4 = Vec::<char>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Lt(move _3, move _4);
        switchInt(move _2) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _6 = CheckedAdd(((*_1).1: usize), const 1_usize);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb3, unwind continue];
    }

    bb3: {
        ((*_1).1: usize) = move (_6.0: usize);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn select::<impl at src/select.rs:226:10: 226:15>::clone(_1: &Selector) -> Selector {
    debug self => _1;
    let mut _0: select::Selector;
    let mut _2: isize;
    let _3: &select::OneSelector;
    let mut _4: select::OneSelector;
    let _5: &select::OneSelector;
    let _6: &select::OneSelector;
    let mut _7: select::OneSelector;
    let mut _8: select::OneSelector;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
        debug __self_1 => _6;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Range).0: select::OneSelector);
        _6 = &(((*_1) as Range).1: select::OneSelector);
        _7 = <OneSelector as Clone>::clone(_5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as One).0: select::OneSelector);
        _4 = <OneSelector as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Selector::One(move _4);
        goto -> bb7;
    }

    bb5: {
        _8 = <OneSelector as Clone>::clone(_6) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _0 = Selector::Range(move _7, move _8);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn select::<impl at src/select.rs:232:10: 232:15>::clone(_1: &OneSelector) -> OneSelector {
    debug self => _1;
    let mut _0: select::OneSelector;
    let mut _2: isize;
    let _3: &usize;
    let mut _4: usize;
    let _5: &std::string::String;
    let _6: &usize;
    let mut _7: std::string::String;
    let mut _8: usize;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
        debug __self_1 => _6;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as IndexedName).0: std::string::String);
        _6 = &(((*_1) as IndexedName).1: usize);
        _7 = <std::string::String as Clone>::clone(_5) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = OneSelector::Start;
        goto -> bb7;
    }

    bb4: {
        _0 = OneSelector::End;
        goto -> bb7;
    }

    bb5: {
        _3 = &(((*_1) as Index).0: usize);
        _4 = (*_3);
        _0 = OneSelector::Index(move _4);
        goto -> bb7;
    }

    bb6: {
        _8 = (*_6);
        _0 = OneSelector::IndexedName(move _7, move _8);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn select::<impl at src/select.rs:240:1: 240:14>::indices(_1: &Selector, _2: &ByteRecord, _3: bool) -> Result<Vec<usize>, std::string::String> {
    debug self => _1;
    debug first_record => _2;
    debug use_names => _3;
    let mut _0: std::result::Result<std::vec::Vec<usize>, std::string::String>;
    let mut _4: isize;
    let _5: &select::OneSelector;
    let mut _6: std::result::Result<usize, std::string::String>;
    let _7: &select::OneSelector;
    let _8: &select::OneSelector;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, usize>;
    let mut _11: std::result::Result<usize, std::string::String>;
    let mut _12: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, usize>;
    let mut _17: std::result::Result<usize, std::string::String>;
    let mut _18: isize;
    let mut _21: std::vec::Vec<usize>;
    let mut _22: std::cmp::Ordering;
    let mut _23: &usize;
    let _24: &usize;
    let mut _25: i8;
    let mut _26: std::boxed::Box<[usize]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[usize; 1]>;
    let mut _31: usize;
    let mut _32: std::ops::Range<usize>;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: (usize, bool);
    let mut _39: usize;
    let mut _40: (usize, bool);
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: (usize, bool);
    let _45: ();
    let mut _46: &mut std::vec::Vec<usize>;
    let mut _47: usize;
    let mut _48: *const [usize; 1];
    scope 1 {
        debug sel => _5;
    }
    scope 2 {
        debug sel1 => _7;
        debug sel2 => _8;
        let _9: usize;
        let _13: std::result::Result<std::convert::Infallible, std::string::String>;
        let _14: usize;
        scope 3 {
            debug i1 => _9;
            let _15: usize;
            let _19: std::result::Result<std::convert::Infallible, std::string::String>;
            let _20: usize;
            scope 8 {
                debug i2 => _15;
                let mut _37: std::vec::Vec<usize>;
                let mut _49: *const ();
                let mut _50: usize;
                let mut _51: usize;
                let mut _52: usize;
                let mut _53: usize;
                let mut _54: bool;
                scope 13 {
                }
                scope 14 {
                    debug inds => _37;
                    let mut _38: usize;
                    scope 15 {
                        debug i => _38;
                    }
                }
            }
            scope 9 {
                debug residual => _19;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _20;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _13;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _14;
            scope 7 {
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &(((*_1) as Range).0: select::OneSelector);
        _8 = &(((*_1) as Range).1: select::OneSelector);
        _11 = OneSelector::index(_7, _2, _3) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = &(((*_1) as One).0: select::OneSelector);
        _6 = OneSelector::index(_5, _2, _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<usize, std::string::String>::map::<Vec<usize>, {closure@src/select.rs:248:56: 248:59}>(move _6, const ZeroSized: {closure@src/select.rs:248:56: 248:59}) -> [return: bb26, unwind continue];
    }

    bb5: {
        _10 = <Result<usize, std::string::String> as Try>::branch(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb2];
    }

    bb7: {
        _14 = ((_10 as Continue).0: usize);
        _9 = _14;
        _17 = OneSelector::index(_8, _2, _3) -> [return: bb9, unwind continue];
    }

    bb8: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<usize>, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _13) -> [return: bb26, unwind continue];
    }

    bb9: {
        _16 = <Result<usize, std::string::String> as Try>::branch(move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        _20 = ((_16 as Continue).0: usize);
        _15 = _20;
        _23 = &_9;
        _24 = &_15;
        _22 = <usize as Ord>::cmp(move _23, _24) -> [return: bb13, unwind continue];
    }

    bb12: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<usize>, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _19) -> [return: bb26, unwind continue];
    }

    bb13: {
        _25 = discriminant(_22);
        switchInt(move _25) -> [255: bb17, 0: bb15, 1: bb14, otherwise: bb2];
    }

    bb14: {
        _37 = Vec::<usize>::new() -> [return: bb19, unwind continue];
    }

    bb15: {
        _27 = SizeOf([usize; 1]);
        _28 = AlignOf([usize; 1]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        _30 = ShallowInitBox(move _29, [usize; 1]);
        _31 = _9;
        _48 = (((_30.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]);
        _49 = _48 as *const () (PtrToPtr);
        _50 = _49 as usize (Transmute);
        _51 = AlignOf([usize; 1]);
        _52 = Sub(_51, const 1_usize);
        _53 = BitAnd(_50, _52);
        _54 = Eq(_53, const 0_usize);
        assert(_54, "misaligned pointer dereference: address must be a multiple of {} but is {}", _51, _50) -> [success: bb29, unwind unreachable];
    }

    bb17: {
        _33 = _9;
        _35 = _15;
        _36 = CheckedAdd(_35, const 1_usize);
        assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", move _35, const 1_usize) -> [success: bb18, unwind continue];
    }

    bb18: {
        _34 = move (_36.0: usize);
        _32 = std::ops::Range::<usize> { start: move _33, end: move _34 };
        _21 = <std::ops::Range<usize> as Iterator>::collect::<Vec<usize>>(move _32) -> [return: bb25, unwind continue];
    }

    bb19: {
        _39 = _9;
        _40 = CheckedAdd(_39, const 1_usize);
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, const 1_usize) -> [success: bb20, unwind: bb27];
    }

    bb20: {
        _38 = move (_40.0: usize);
        goto -> bb21;
    }

    bb21: {
        _42 = _38;
        _43 = _15;
        _41 = Gt(move _42, move _43);
        switchInt(move _41) -> [0: bb24, otherwise: bb22];
    }

    bb22: {
        _44 = CheckedSub(_38, const 1_usize);
        assert(!move (_44.1: bool), "attempt to compute `{} - {}`, which would overflow", _38, const 1_usize) -> [success: bb23, unwind: bb27];
    }

    bb23: {
        _38 = move (_44.0: usize);
        _46 = &mut _37;
        _47 = _38;
        _45 = Vec::<usize>::push(move _46, move _47) -> [return: bb30, unwind: bb27];
    }

    bb24: {
        _21 = move _37;
        goto -> bb25;
    }

    bb25: {
        _0 = Result::<Vec<usize>, std::string::String>::Ok(move _21);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_37) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29: {
        (*_48) = [move _31];
        _26 = move _30 as std::boxed::Box<[usize]> (PointerCoercion(Unsize));
        _21 = std::slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _26) -> [return: bb25, unwind continue];
    }

    bb30: {
        goto -> bb21;
    }
}

fn select::<impl at src/select.rs:240:1: 240:14>::indices::{closure#0}(_1: {closure@src/select.rs:248:56: 248:59}, _2: usize) -> Vec<usize> {
    debug i => _2;
    let mut _0: std::vec::Vec<usize>;
    let mut _3: std::boxed::Box<[usize]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[usize; 1]>;
    let mut _8: *const [usize; 1];
    let mut _9: *const ();
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    scope 1 {
    }

    bb0: {
        _4 = SizeOf([usize; 1]);
        _5 = AlignOf([usize; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 1]);
        _8 = (((_7.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf([usize; 1]);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        (*_8) = [_2];
        _3 = move _7 as std::boxed::Box<[usize]> (PointerCoercion(Unsize));
        _0 = std::slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

fn select::<impl at src/select.rs:271:1: 271:17>::index(_1: &OneSelector, _2: &ByteRecord, _3: bool) -> Result<usize, std::string::String> {
    debug self => _1;
    debug first_record => _2;
    debug use_names => _3;
    let mut _0: std::result::Result<usize, std::string::String>;
    let mut _4: isize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let _9: usize;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 2];
    let _20: [core::fmt::rt::Argument<'_>; 2];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &usize;
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &usize;
    let _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: (usize, bool);
    let _29: &std::string::String;
    let _30: usize;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &&std::string::String;
    let mut _40: std::iter::Enumerate<csv::ByteRecordIter<'_>>;
    let mut _41: std::iter::Enumerate<csv::ByteRecordIter<'_>>;
    let mut _42: csv::ByteRecordIter<'_>;
    let mut _44: std::option::Option<(usize, &[u8])>;
    let mut _45: &mut std::iter::Enumerate<csv::ByteRecordIter<'_>>;
    let mut _46: isize;
    let mut _49: bool;
    let mut _50: &&[u8];
    let mut _51: &&[u8];
    let _52: &[u8];
    let mut _53: &std::string::String;
    let mut _54: bool;
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: (usize, bool);
    let mut _58: usize;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let _66: &&std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let _71: &[core::fmt::rt::Argument<'_>; 3];
    let _72: [core::fmt::rt::Argument<'_>; 3];
    let mut _73: core::fmt::rt::Argument<'_>;
    let _74: &usize;
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &&std::string::String;
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &usize;
    let _79: usize;
    let mut _80: usize;
    let mut _81: (usize, bool);
    scope 1 {
        debug i => _9;
        let _15: std::string::String;
        let mut _85: &[&str; 3];
        scope 2 {
            debug res => _15;
        }
    }
    scope 3 {
        debug s => _29;
        debug sidx => _30;
        let _31: std::string::String;
        let mut _39: usize;
        let mut _84: &[&str; 2];
        scope 4 {
            debug res => _31;
        }
        scope 5 {
            debug num_found => _39;
            let mut _43: std::iter::Enumerate<csv::ByteRecordIter<'_>>;
            let _59: std::string::String;
            let _67: std::string::String;
            let mut _82: &[&str; 2];
            let mut _83: &[&str; 4];
            scope 6 {
                debug iter => _43;
                let _47: usize;
                let _48: &[u8];
                scope 7 {
                    debug i => _47;
                    debug field => _48;
                }
            }
            scope 8 {
                debug res => _59;
            }
            scope 9 {
                debug res => _67;
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb11, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _29 = &(((*_1) as IndexedName).0: std::string::String);
        _30 = (((*_1) as IndexedName).1: usize);
        switchInt(_3) -> [0: bb22, otherwise: bb26];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = Result::<usize, std::string::String>::Ok(const 0_usize);
        goto -> bb51;
    }

    bb4: {
        _6 = ByteRecord::len(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _5 = const 0_usize;
        goto -> bb10;
    }

    bb7: {
        _7 = ByteRecord::len(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = CheckedSub(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, const 1_usize) -> [success: bb9, unwind continue];
    }

    bb9: {
        _5 = move (_8.0: usize);
        goto -> bb10;
    }

    bb10: {
        _0 = Result::<usize, std::string::String>::Ok(move _5);
        goto -> bb51;
    }

    bb11: {
        _9 = (((*_1) as Index).0: usize);
        _11 = _9;
        _10 = Lt(move _11, const 1_usize);
        switchInt(move _10) -> [0: bb12, otherwise: bb14];
    }

    bb12: {
        _13 = _9;
        _14 = ByteRecord::len(_2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _12 = Gt(move _13, move _14);
        switchInt(move _12) -> [0: bb20, otherwise: bb14];
    }

    bb14: {
        _85 = const _;
        _17 = _85 as &[&str] (PointerCoercion(Unsize));
        _22 = &_9;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_22) -> [return: bb15, unwind continue];
    }

    bb15: {
        _25 = ByteRecord::len(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_24) -> [return: bb17, unwind continue];
    }

    bb17: {
        _20 = [move _21, move _23];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb18, unwind continue];
    }

    bb18: {
        _15 = format(move _16) -> [return: bb19, unwind continue];
    }

    bb19: {
        _0 = Result::<usize, std::string::String>::Err(move _15);
        goto -> bb51;
    }

    bb20: {
        _27 = _9;
        _28 = CheckedSub(_27, const 1_usize);
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", move _27, const 1_usize) -> [success: bb21, unwind continue];
    }

    bb21: {
        _26 = move (_28.0: usize);
        _0 = Result::<usize, std::string::String>::Ok(move _26);
        goto -> bb51;
    }

    bb22: {
        _84 = const _;
        _33 = _84 as &[&str] (PointerCoercion(Unsize));
        _38 = &_29;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_38) -> [return: bb23, unwind continue];
    }

    bb23: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb24, unwind continue];
    }

    bb24: {
        _31 = format(move _32) -> [return: bb25, unwind continue];
    }

    bb25: {
        _0 = Result::<usize, std::string::String>::Err(move _31);
        goto -> bb51;
    }

    bb26: {
        _39 = const 0_usize;
        _42 = ByteRecord::iter(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        _41 = <ByteRecordIter<'_> as Iterator>::enumerate(move _42) -> [return: bb28, unwind continue];
    }

    bb28: {
        _40 = <Enumerate<ByteRecordIter<'_>> as IntoIterator>::into_iter(move _41) -> [return: bb29, unwind continue];
    }

    bb29: {
        _43 = move _40;
        goto -> bb30;
    }

    bb30: {
        _45 = &mut _43;
        _44 = <Enumerate<ByteRecordIter<'_>> as Iterator>::next(_45) -> [return: bb31, unwind continue];
    }

    bb31: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb33, 1: bb32, otherwise: bb2];
    }

    bb32: {
        _47 = (((_44 as Some).0: (usize, &[u8])).0: usize);
        _48 = (((_44 as Some).0: (usize, &[u8])).1: &[u8]);
        _50 = &_48;
        _53 = _29;
        _52 = std::string::String::as_bytes(move _53) -> [return: bb34, unwind continue];
    }

    bb33: {
        _58 = _39;
        switchInt(move _58) -> [0: bb40, otherwise: bb41];
    }

    bb34: {
        _51 = &_52;
        _49 = <&[u8] as PartialEq>::eq(move _50, move _51) -> [return: bb35, unwind continue];
    }

    bb35: {
        switchInt(move _49) -> [0: bb30, otherwise: bb36];
    }

    bb36: {
        _55 = _39;
        _56 = _30;
        _54 = Eq(move _55, move _56);
        switchInt(move _54) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _0 = Result::<usize, std::string::String>::Ok(_47);
        goto -> bb51;
    }

    bb38: {
        _57 = CheckedAdd(_39, const 1_usize);
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", _39, const 1_usize) -> [success: bb39, unwind continue];
    }

    bb39: {
        _39 = move (_57.0: usize);
        goto -> bb30;
    }

    bb40: {
        _82 = const _;
        _61 = _82 as &[&str] (PointerCoercion(Unsize));
        _66 = &_29;
        _65 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_66) -> [return: bb42, unwind continue];
    }

    bb41: {
        _83 = const _;
        _69 = _83 as &[&str] (PointerCoercion(Unsize));
        _74 = &_30;
        _73 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_74) -> [return: bb45, unwind continue];
    }

    bb42: {
        _64 = [move _65];
        _63 = &_64;
        _62 = _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _60 = Arguments::<'_>::new_v1(move _61, move _62) -> [return: bb43, unwind continue];
    }

    bb43: {
        _59 = format(move _60) -> [return: bb44, unwind continue];
    }

    bb44: {
        _0 = Result::<usize, std::string::String>::Err(move _59);
        goto -> bb51;
    }

    bb45: {
        _76 = &_29;
        _75 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_76) -> [return: bb46, unwind continue];
    }

    bb46: {
        _80 = _39;
        _81 = CheckedSub(_80, const 1_usize);
        assert(!move (_81.1: bool), "attempt to compute `{} - {}`, which would overflow", move _80, const 1_usize) -> [success: bb47, unwind continue];
    }

    bb47: {
        _79 = move (_81.0: usize);
        _78 = &_79;
        _77 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_78) -> [return: bb48, unwind continue];
    }

    bb48: {
        _72 = [move _73, move _75, move _77];
        _71 = &_72;
        _70 = _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _68 = Arguments::<'_>::new_v1(move _69, move _70) -> [return: bb49, unwind continue];
    }

    bb49: {
        _67 = format(move _68) -> [return: bb50, unwind continue];
    }

    bb50: {
        _0 = Result::<usize, std::string::String>::Err(move _67);
        goto -> bb51;
    }

    bb51: {
        return;
    }
}

promoted[0] in select::<impl at src/select.rs:271:1: 271:17>::index: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Selector name '", const "' does not exist as a named header in the given CSV data."];
        _0 = &_1;
        return;
    }
}

promoted[1] in select::<impl at src/select.rs:271:1: 271:17>::index: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "Selector index '", const "' for name '", const "' is out of bounds. Must be >= 0 and <= ", const "."];
        _0 = &_1;
        return;
    }
}

promoted[2] in select::<impl at src/select.rs:271:1: 271:17>::index: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Cannot use names ('", const "') in selection with --no-headers set."];
        _0 = &_1;
        return;
    }
}

promoted[3] in select::<impl at src/select.rs:271:1: 271:17>::index: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Selector index ", const " is out of bounds. Index must be >= 1 and <= ", const "."];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:324:1: 324:29>::fmt(_1: &Selector, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &select::OneSelector;
    let _5: &select::OneSelector;
    let _6: &select::OneSelector;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 2];
    let _11: [core::fmt::rt::Argument<'_>; 2];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&select::OneSelector;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&select::OneSelector;
    scope 1 {
        debug sel => _4;
    }
    scope 2 {
        debug s => _5;
        debug e => _6;
        let mut _16: &[&str; 3];
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Range).0: select::OneSelector);
        _6 = &(((*_1) as Range).1: select::OneSelector);
        _16 = const _;
        _8 = _16 as &[&str] (PointerCoercion(Unsize));
        _13 = &_5;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<&OneSelector>(_13) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as One).0: select::OneSelector);
        _0 = <OneSelector as Debug>::fmt(_4, _2) -> [return: bb7, unwind continue];
    }

    bb4: {
        _15 = &_6;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<&OneSelector>(_15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = [move _12, move _14];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Formatter::<'_>::write_fmt(_2, move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

promoted[0] in select::<impl at src/select.rs:324:1: 324:29>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Range(", const ", ", const ")"];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:334:1: 334:32>::fmt(_1: &OneSelector, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: usize;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &usize;
    let _16: &std::string::String;
    let _17: usize;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 2];
    let _22: [core::fmt::rt::Argument<'_>; 2];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &&std::string::String;
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &usize;
    let mut _29: &[&str; 1];
    let mut _30: &[&str; 1];
    scope 1 {
        debug idx => _8;
        let mut _28: &[&str; 2];
    }
    scope 2 {
        debug s => _16;
        debug idx => _17;
        let mut _27: &[&str; 3];
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb5, 2: bb7, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _16 = &(((*_1) as IndexedName).0: std::string::String);
        _17 = (((*_1) as IndexedName).1: usize);
        _27 = const _;
        _19 = _27 as &[&str] (PointerCoercion(Unsize));
        _24 = &_16;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_24) -> [return: bb10, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _30 = const _;
        _5 = _30 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb13, unwind continue];
    }

    bb5: {
        _29 = const _;
        _7 = _29 as &[&str] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Formatter::<'_>::write_fmt(_2, move _6) -> [return: bb13, unwind continue];
    }

    bb7: {
        _8 = (((*_1) as Index).0: usize);
        _28 = const _;
        _10 = _28 as &[&str] (PointerCoercion(Unsize));
        _15 = &_8;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(_2, move _9) -> [return: bb13, unwind continue];
    }

    bb10: {
        _26 = &_17;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_26) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = [move _23, move _25];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = Formatter::<'_>::write_fmt(_2, move _18) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

promoted[0] in select::<impl at src/select.rs:334:1: 334:32>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "IndexedName(", const "[", const "])"];
        _0 = &_1;
        return;
    }
}

promoted[1] in select::<impl at src/select.rs:334:1: 334:32>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Index(", const ")"];
        _0 = &_1;
        return;
    }
}

promoted[2] in select::<impl at src/select.rs:334:1: 334:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "End"];
        _0 = &_1;
        return;
    }
}

promoted[3] in select::<impl at src/select.rs:334:1: 334:32>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Start"];
        _0 = &_1;
        return;
    }
}

fn select::<impl at src/select.rs:346:10: 346:15>::clone(_1: &Selection) -> Selection {
    debug self => _1;
    let mut _0: select::Selection;
    let mut _2: std::vec::Vec<usize>;
    let _3: &std::vec::Vec<usize>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<usize>);
        _2 = <Vec<usize> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Selection(move _2);
        return;
    }
}

fn select::<impl at src/select.rs:346:17: 346:22>::fmt(_1: &Selection, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::vec::Vec<usize>;
    let _6: &std::vec::Vec<usize>;

    bb0: {
        _3 = const "Selection";
        _6 = &((*_1).0: std::vec::Vec<usize>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn select::<impl at src/select.rs:352:1: 352:15>::select(_1: &Selection, _2: &ByteRecord) -> Scan<std::slice::Iter<'_, usize>, &ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>> {
    debug self => _1;
    debug row => _2;
    let mut _0: std::iter::Scan<std::slice::Iter<'_, usize>, &csv::ByteRecord, for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>;
    let _3: for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>;
    let mut _4: std::slice::Iter<'_, usize>;
    let _5: &[usize];
    scope 1 {
        debug get_field => _3;
    }

    bb0: {
        _3 = select::Selection::select::get_field as for<'a, 'b, 'c> fn(&'a mut &'b csv::ByteRecord, &'c usize) -> std::option::Option<&'b [u8]> (PointerCoercion(ReifyFnPointer));
        _5 = <Selection as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = core::slice::<impl [usize]>::iter(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::slice::Iter<'_, usize> as Iterator>::scan::<&ByteRecord, &[u8], for<'a, 'b, 'c> fn(&'a mut &'b ByteRecord, &'c usize) -> std::option::Option<&'b [u8]>>(move _4, _2, _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn select::<impl at src/select.rs:352:1: 352:15>::select::get_field(_1: &mut &ByteRecord, _2: &usize) -> std::option::Option<&[u8]> {
    debug row => _1;
    debug idx => _2;
    let mut _0: std::option::Option<&[u8]>;
    let _3: &[u8];
    let mut _4: usize;
    let mut _5: &csv::ByteRecord;

    bb0: {
        _5 = deref_copy (*_1);
        _4 = (*_2);
        _3 = <ByteRecord as Index<usize>>::index(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::option::Option::<&[u8]>::Some(_3);
        return;
    }
}

fn select::<impl at src/select.rs:352:1: 352:15>::normal(_1: &Selection) -> NormalSelection {
    debug self => _1;
    let mut _0: select::NormalSelection;
    let _2: &std::vec::Vec<usize>;
    let mut _3: bool;
    let mut _4: std::vec::Vec<bool>;
    let _6: ();
    let mut _7: &mut [usize];
    let mut _8: &mut std::vec::Vec<usize>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<usize>;
    let mut _12: std::iter::Take<std::iter::Repeat<bool>>;
    let mut _13: std::iter::Repeat<bool>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: &usize;
    let mut _17: &std::vec::Vec<usize>;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: &std::vec::Vec<usize>;
    let mut _21: (usize, bool);
    let mut _22: (usize, bool);
    let mut _23: std::vec::IntoIter<usize>;
    let mut _24: std::vec::IntoIter<usize>;
    let mut _25: std::vec::Vec<usize>;
    let mut _27: std::option::Option<usize>;
    let mut _28: &mut std::vec::IntoIter<usize>;
    let mut _29: isize;
    let mut _31: &mut bool;
    let mut _32: &mut std::vec::Vec<bool>;
    let mut _33: std::vec::Vec<bool>;
    let mut _34: bool;
    scope 1 {
        debug inds => _2;
        let mut _5: std::vec::Vec<usize>;
        scope 2 {
            debug normal => _5;
            let mut _11: std::vec::Vec<bool>;
            scope 3 {
                debug set => _11;
                let mut _26: std::vec::IntoIter<usize>;
                scope 4 {
                    debug iter => _26;
                    let _30: usize;
                    scope 5 {
                        debug i => _30;
                    }
                }
            }
        }
    }

    bb0: {
        _34 = const false;
        _2 = &((*_1).0: std::vec::Vec<usize>);
        _3 = Vec::<usize>::is_empty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _4 = Vec::<bool>::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = NormalSelection(move _4);
        goto -> bb25;
    }

    bb4: {
        _34 = const true;
        _5 = <Vec<usize> as Clone>::clone(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &mut _5;
        _7 = <Vec<usize> as DerefMut>::deref_mut(move _8) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        _6 = std::slice::<impl [usize]>::sort(_7) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _10 = &mut _5;
        _9 = Vec::<usize>::dedup(move _10) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _13 = std::iter::repeat::<bool>(const false) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _17 = &_5;
        _20 = &_5;
        _19 = Vec::<usize>::len(move _20) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _21 = CheckedSub(_19, const 1_usize);
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const 1_usize) -> [success: bb11, unwind: bb30];
    }

    bb11: {
        _18 = move (_21.0: usize);
        _16 = <Vec<usize> as Index<usize>>::index(move _17, move _18) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _15 = (*_16);
        _22 = CheckedAdd(_15, const 1_usize);
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 1_usize) -> [success: bb13, unwind: bb30];
    }

    bb13: {
        _14 = move (_22.0: usize);
        _12 = <std::iter::Repeat<bool> as Iterator>::take(move _13, move _14) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _11 = <std::iter::Take<std::iter::Repeat<bool>> as Iterator>::collect::<Vec<bool>>(move _12) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _34 = const false;
        _25 = move _5;
        _24 = <Vec<usize> as IntoIterator>::into_iter(move _25) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _23 = <std::vec::IntoIter<usize> as IntoIterator>::into_iter(move _24) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        _26 = move _23;
        goto -> bb18;
    }

    bb18: {
        _28 = &mut _26;
        _27 = <std::vec::IntoIter<usize> as Iterator>::next(_28) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb22, 1: bb20, otherwise: bb21];
    }

    bb20: {
        _30 = ((_27 as Some).0: usize);
        _32 = &mut _11;
        _31 = <Vec<bool> as IndexMut<usize>>::index_mut(move _32, _30) -> [return: bb23, unwind: bb26];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        drop(_26) -> [return: bb24, unwind: bb27];
    }

    bb23: {
        (*_31) = const true;
        goto -> bb18;
    }

    bb24: {
        _33 = move _11;
        _0 = NormalSelection(move _33);
        _34 = const false;
        goto -> bb25;
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_26) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_11) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_5) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_34) -> [0: bb28, otherwise: bb29];
    }
}

fn select::<impl at src/select.rs:352:1: 352:15>::len(_1: &Selection) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: &std::vec::Vec<usize>;

    bb0: {
        _2 = &((*_1).0: std::vec::Vec<usize>);
        _0 = Vec::<usize>::len(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn select::<impl at src/select.rs:390:1: 390:30>::deref(_1: &Selection) -> &[usize] {
    debug self => _1;
    let mut _0: &[usize];
    let _2: &std::vec::Vec<usize>;

    bb0: {
        _2 = &((*_1).0: std::vec::Vec<usize>);
        _0 = <Vec<usize> as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn select::<impl at src/select.rs:398:10: 398:15>::clone(_1: &NormalSelection) -> NormalSelection {
    debug self => _1;
    let mut _0: select::NormalSelection;
    let mut _2: std::vec::Vec<bool>;
    let _3: &std::vec::Vec<bool>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<bool>);
        _2 = <Vec<bool> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = NormalSelection(move _2);
        return;
    }
}

fn select::<impl at src/select.rs:398:17: 398:22>::fmt(_1: &NormalSelection, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::vec::Vec<bool>;
    let _6: &std::vec::Vec<bool>;

    bb0: {
        _3 = const "NormalSelection";
        _6 = &((*_1).0: std::vec::Vec<bool>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn select::<impl at src/select.rs:415:1: 415:21>::select(_1: &NormalSelection, _2: I) -> FilterMap<Scan<Enumerate<I>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>>, fn(std::option::Option<T>) -> std::option::Option<T>> {
    debug self => _1;
    debug row => _2;
    let mut _0: std::iter::FilterMap<std::iter::Scan<std::iter::Enumerate<I>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>>, fn(std::option::Option<T>) -> std::option::Option<T>>;
    let _3: for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>;
    let mut _5: std::iter::Scan<std::iter::Enumerate<I>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>>;
    let mut _6: std::iter::Enumerate<I>;
    let _7: &[bool];
    let mut _8: bool;
    scope 1 {
        debug get_field => _3;
        let _4: fn(std::option::Option<T>) -> std::option::Option<T>;
        scope 2 {
            debug filmap => _4;
        }
    }

    bb0: {
        _8 = const false;
        _3 = select::NormalSelection::select::get_field::<T> as for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>> (PointerCoercion(ReifyFnPointer));
        _4 = select::NormalSelection::select::filmap::<T> as fn(std::option::Option<T>) -> std::option::Option<T> (PointerCoercion(ReifyFnPointer));
        _6 = <I as Iterator>::enumerate(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = const true;
        _7 = <NormalSelection as Deref>::deref(_1) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _8 = const false;
        _5 = <Enumerate<I> as Iterator>::scan::<&[bool], std::option::Option<T>, for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>>(move _6, _7, _3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _8 = const false;
        _0 = <Scan<Enumerate<I>, &[bool], for<'a, 'b> fn(&'a mut &'b [bool], (usize, T)) -> std::option::Option<std::option::Option<T>>> as Iterator>::filter_map::<T, fn(std::option::Option<T>) -> std::option::Option<T>>(move _5, _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_8) -> [0: bb5, otherwise: bb6];
    }
}

fn filmap(_1: std::option::Option<T>) -> std::option::Option<T> {
    debug v => _1;
    let mut _0: std::option::Option<T>;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn select::<impl at src/select.rs:415:1: 415:21>::select::get_field(_1: &mut &[bool], _2: (usize, T)) -> std::option::Option<std::option::Option<T>> {
    debug set => _1;
    debug t => _2;
    let mut _0: std::option::Option<std::option::Option<T>>;
    let _3: usize;
    let _4: T;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: std::option::Option<T>;
    let mut _11: T;
    let mut _12: std::option::Option<T>;
    let mut _13: &[bool];
    let mut _14: &[bool];
    let mut _15: &[bool];
    let mut _16: bool;
    scope 1 {
        debug i => _3;
        debug v => _4;
    }

    bb0: {
        _16 = const false;
        _3 = (_2.0: usize);
        _16 = const true;
        _4 = move (_2.1: T);
        _13 = deref_copy (*_1);
        _6 = Len((*_13));
        _5 = Lt(_3, move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _14 = deref_copy (*_1);
        _8 = Len((*_14));
        _9 = Lt(_3, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _3) -> [success: bb2, unwind: bb7];
    }

    bb2: {
        _15 = deref_copy (*_1);
        _7 = (*_15)[_3];
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = const false;
        _11 = move _4;
        _10 = std::option::Option::<T>::Some(move _11);
        _0 = std::option::Option::<std::option::Option<T>>::Some(move _10);
        goto -> bb5;
    }

    bb4: {
        _12 = std::option::Option::<T>::None;
        _0 = std::option::Option::<std::option::Option<T>>::Some(move _12);
        goto -> bb5;
    }

    bb5: {
        switchInt(_16) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _16 = const false;
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        drop(_4) -> [return: bb6, unwind continue];
    }
}

fn select::<impl at src/select.rs:415:1: 415:21>::len(_1: &NormalSelection) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: std::iter::Filter<std::slice::Iter<'_, bool>, {closure@src/select.rs:430:28: 430:31}>;
    let mut _3: std::slice::Iter<'_, bool>;
    let _4: &[bool];

    bb0: {
        _4 = <NormalSelection as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::slice::<impl [bool]>::iter(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <std::slice::Iter<'_, bool> as Iterator>::filter::<{closure@src/select.rs:430:28: 430:31}>(move _3, const ZeroSized: {closure@src/select.rs:430:28: 430:31}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = <Filter<std::slice::Iter<'_, bool>, {closure@src/select.rs:430:28: 430:31}> as Iterator>::count(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn select::<impl at src/select.rs:415:1: 415:21>::len::{closure#0}(_1: &mut {closure@src/select.rs:430:28: 430:31}, _2: &&bool) -> bool {
    debug b => _2;
    let mut _0: bool;
    let mut _3: &bool;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = (*_3);
        return;
    }
}

fn select::<impl at src/select.rs:434:1: 434:36>::deref(_1: &NormalSelection) -> &[bool] {
    debug self => _1;
    let mut _0: &[bool];
    let _2: &std::vec::Vec<bool>;

    bb0: {
        _2 = &((*_1).0: std::vec::Vec<bool>);
        _0 = <Vec<bool> as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn num_cpus() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = num_cpus::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn version() -> std::string::String {
    let mut _0: std::string::String;
    let _1: std::option::Option<&str>;
    let _2: std::option::Option<&str>;
    let _3: std::option::Option<&str>;
    let mut _4: (std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>);
    let mut _5: std::option::Option<&str>;
    let mut _6: std::option::Option<&str>;
    let mut _7: std::option::Option<&str>;
    let mut _8: (std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>);
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 3];
    let _20: [core::fmt::rt::Argument<'_>; 3];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&str;
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &&str;
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &&str;
    let _27: &str;
    scope 1 {
        debug maj => _1;
        debug min => _2;
        debug pat => _3;
        let _12: &str;
        let _13: &str;
        let _14: &str;
        scope 2 {
            debug maj => _12;
            debug min => _13;
            debug pat => _14;
            let _15: std::string::String;
            let mut _28: &[&str; 3];
            scope 3 {
                debug res => _15;
            }
        }
    }

    bb0: {
        _5 = std::option::Option::<&str>::Some(const "0");
        _6 = std::option::Option::<&str>::Some(const "13");
        _7 = std::option::Option::<&str>::Some(const "0");
        _4 = (move _5, move _6, move _7);
        _1 = (_4.0: std::option::Option<&str>);
        _2 = (_4.1: std::option::Option<&str>);
        _3 = (_4.2: std::option::Option<&str>);
        _8 = (_1, _2, _3);
        _11 = discriminant((_8.0: std::option::Option<&str>));
        switchInt(move _11) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _27 = const "";
        _0 = <str as ToOwned>::to_owned(_27) -> [return: bb10, unwind continue];
    }

    bb2: {
        _10 = discriminant((_8.1: std::option::Option<&str>));
        switchInt(move _10) -> [1: bb3, otherwise: bb1];
    }

    bb3: {
        _9 = discriminant((_8.2: std::option::Option<&str>));
        switchInt(move _9) -> [1: bb4, otherwise: bb1];
    }

    bb4: {
        _12 = (((_8.0: std::option::Option<&str>) as Some).0: &str);
        _13 = (((_8.1: std::option::Option<&str>) as Some).0: &str);
        _14 = (((_8.2: std::option::Option<&str>) as Some).0: &str);
        _28 = const _;
        _17 = _28 as &[&str] (PointerCoercion(Unsize));
        _22 = &_12;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_22) -> [return: bb5, unwind continue];
    }

    bb5: {
        _24 = &_13;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _26 = &_14;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_26) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = [move _21, move _23, move _25];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = format(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = move _15;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in version: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ".", const "."];
        _0 = &_1;
        return;
    }
}

fn get_args(_1: &str, _2: &[&str]) -> Result<T, CliError> {
    debug usage => _1;
    debug argv => _2;
    let mut _0: std::result::Result<T, CliError>;
    let mut _3: std::result::Result<T, docopt::Error>;
    let mut _4: std::result::Result<docopt::Docopt, docopt::Error>;
    let mut _5: {closure@src/util.rs:37:22: 37:25};
    let mut _6: &&[&str];

    bb0: {
        _4 = Docopt::new::<&str>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _5 = {closure@src/util.rs:37:22: 37:25} { argv: move _6 };
        _3 = Result::<Docopt, docopt::Error>::and_then::<T, {closure@src/util.rs:37:22: 37:25}>(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<T, docopt::Error>::map_err::<CliError, fn(docopt::Error) -> CliError {<CliError as From<docopt::Error>>::from}>(move _3, <CliError as From<docopt::Error>>::from) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn get_args::{closure#0}(_1: {closure@src/util.rs:37:22: 37:25}, _2: Docopt) -> Result<T, docopt::Error> {
    debug d => _2;
    debug argv => (*(_1.0: &&[&str]));
    let mut _0: std::result::Result<T, docopt::Error>;
    let mut _3: &docopt::Docopt;
    let _4: docopt::Docopt;
    let mut _5: docopt::Docopt;
    let mut _6: docopt::Docopt;
    let mut _7: std::iter::Map<std::slice::Iter<'_, &str>, {closure@src/util.rs:37:49: 37:53}>;
    let mut _8: std::slice::Iter<'_, &str>;
    let mut _9: std::option::Option<std::string::String>;
    let mut _10: std::string::String;
    let mut _11: &&[&str];
    let mut _12: &[&str];
    let mut _13: bool;
    let mut _14: bool;

    bb0: {
        _13 = const false;
        _14 = const false;
        _14 = const true;
        _6 = move _2;
        _11 = deref_copy (_1.0: &&[&str]);
        _12 = deref_copy (*_11);
        _8 = core::slice::<impl [&str]>::iter(_12) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _7 = <std::slice::Iter<'_, &str> as Iterator>::map::<&str, {closure@src/util.rs:37:49: 37:53}>(move _8, const ZeroSized: {closure@src/util.rs:37:49: 37:53}) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _14 = const false;
        _5 = Docopt::argv::<std::iter::Map<std::slice::Iter<'_, &str>, {closure@src/util.rs:37:49: 37:53}>, &str>(move _6, move _7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _13 = const true;
        _14 = const false;
        _10 = version() -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _9 = std::option::Option::<std::string::String>::Some(move _10);
        _13 = const false;
        _4 = Docopt::version(move _5, move _9) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _3 = &_4;
        _13 = const false;
        _0 = Docopt::deserialize::<'_, '_, T>(move _3) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_13) -> [0: bb9, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_6) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_14) -> [0: bb9, otherwise: bb12];
    }
}

fn get_args::{closure#0}::{closure#0}(_1: &mut {closure@src/util.rs:37:49: 37:53}, _2: &&str) -> &str {
    let mut _0: &str;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _0 = (*_2);
        return;
    }
}

fn many_configs(_1: &[std::string::String], _2: std::option::Option<Delimiter>, _3: bool) -> Result<Vec<Config>, std::string::String> {
    debug inps => _1;
    debug delim => _2;
    debug no_headers => _3;
    let mut _0: std::result::Result<std::vec::Vec<config::Config>, std::string::String>;
    let mut _4: std::vec::Vec<std::string::String>;
    let mut _5: bool;
    let mut _6: &std::vec::Vec<std::string::String>;
    let _7: ();
    let mut _8: &mut std::vec::Vec<std::string::String>;
    let mut _9: std::string::String;
    let _10: &str;
    let mut _12: std::iter::Map<std::vec::IntoIter<std::string::String>, {closure@src/util.rs:50:26: 50:29}>;
    let mut _13: std::vec::IntoIter<std::string::String>;
    let mut _14: std::vec::Vec<std::string::String>;
    let mut _15: {closure@src/util.rs:50:26: 50:29};
    let mut _16: &std::option::Option<config::Delimiter>;
    let mut _17: &bool;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _19: std::result::Result<(), std::string::String>;
    let _20: &[config::Config];
    let mut _21: &std::vec::Vec<config::Config>;
    let mut _22: isize;
    let mut _24: std::vec::Vec<config::Config>;
    let mut _25: bool;
    scope 1 {
        debug inps => _4;
        let _11: std::vec::Vec<config::Config>;
        scope 2 {
            debug confs => _11;
            let _23: std::result::Result<std::convert::Infallible, std::string::String>;
            scope 3 {
                debug residual => _23;
                scope 4 {
                }
            }
            scope 5 {
                debug val => const ();
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _25 = const false;
        _25 = const true;
        _4 = std::slice::<impl [std::string::String]>::to_vec(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_4;
        _5 = Vec::<std::string::String>::is_empty(move _6) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        switchInt(move _5) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _8 = &mut _4;
        _10 = const "-";
        _9 = <str as ToOwned>::to_owned(_10) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _7 = Vec::<std::string::String>::push(move _8, move _9) -> [return: bb22, unwind: bb21];
    }

    bb5: {
        _25 = const false;
        _14 = move _4;
        _13 = <Vec<std::string::String> as IntoIterator>::into_iter(move _14) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _16 = &_2;
        _17 = &_3;
        _15 = {closure@src/util.rs:50:26: 50:29} { delim: move _16, no_headers: move _17 };
        _12 = <std::vec::IntoIter<std::string::String> as Iterator>::map::<Config, {closure@src/util.rs:50:26: 50:29}>(move _13, move _15) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _11 = <std::iter::Map<std::vec::IntoIter<std::string::String>, {closure@src/util.rs:50:26: 50:29}> as Iterator>::collect::<Vec<Config>>(move _12) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _21 = &_11;
        _20 = <Vec<Config> as Deref>::deref(move _21) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _19 = errif_greater_one_stdin(_20) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _18 = <Result<(), std::string::String> as Try>::branch(move _19) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _24 = move _11;
        _0 = Result::<Vec<Config>, std::string::String>::Ok(move _24);
        _25 = const false;
        goto -> bb17;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _23 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Vec<Config>, std::string::String> as FromResidual<Result<Infallible, std::string::String>>>::from_residual(move _23) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_11) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _25 = const false;
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_11) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_25) -> [0: bb19, otherwise: bb20];
    }

    bb22: {
        goto -> bb5;
    }
}

fn many_configs::{closure#0}(_1: &mut {closure@src/util.rs:50:26: 50:29}, _2: std::string::String) -> Config {
    debug p => _2;
    debug delim => (*((*_1).0: &std::option::Option<config::Delimiter>));
    debug no_headers => (*((*_1).1: &bool));
    let mut _0: config::Config;
    let mut _3: config::Config;
    let mut _4: config::Config;
    let _5: &std::option::Option<std::string::String>;
    let _6: std::option::Option<std::string::String>;
    let mut _7: std::option::Option<config::Delimiter>;
    let mut _8: bool;
    let mut _9: &std::option::Option<config::Delimiter>;
    let mut _10: &bool;

    bb0: {
        _6 = std::option::Option::<std::string::String>::Some(move _2);
        _5 = &_6;
        _4 = Config::new(_5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _9 = deref_copy ((*_1).0: &std::option::Option<config::Delimiter>);
        _7 = (*_9);
        _3 = Config::delimiter(move _4, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _10 = deref_copy ((*_1).1: &bool);
        _8 = (*_10);
        _0 = Config::no_headers(move _3, move _8) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn errif_greater_one_stdin(_1: &[Config]) -> Result<(), std::string::String> {
    debug inps => _1;
    let mut _0: std::result::Result<(), std::string::String>;
    let _2: usize;
    let mut _3: std::iter::Filter<std::slice::Iter<'_, config::Config>, {closure@src/util.rs:59:35: 59:40}>;
    let mut _4: std::slice::Iter<'_, config::Config>;
    let mut _5: bool;
    let mut _6: std::string::String;
    let _7: &str;
    scope 1 {
        debug nstd => _2;
    }

    bb0: {
        _4 = core::slice::<impl [Config]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::slice::Iter<'_, Config> as Iterator>::filter::<{closure@src/util.rs:59:35: 59:40}>(move _4, const ZeroSized: {closure@src/util.rs:59:35: 59:40}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Filter<std::slice::Iter<'_, Config>, {closure@src/util.rs:59:35: 59:40}> as Iterator>::count(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = Gt(_2, const 1_usize);
        switchInt(move _5) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _7 = const "At most one <stdin> input is allowed.";
        _6 = <str as ToOwned>::to_owned(_7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Result::<(), std::string::String>::Err(move _6);
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<(), std::string::String>::Ok(const ());
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn errif_greater_one_stdin::{closure#0}(_1: &mut {closure@src/util.rs:59:35: 59:40}, _2: &&Config) -> bool {
    debug inp => _2;
    let mut _0: bool;
    let mut _3: &config::Config;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = Config::is_std(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn chunk_size(_1: usize, _2: usize) -> usize {
    debug nitems => _1;
    debug njobs => _2;
    let mut _0: usize;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _3 = Lt(_1, _2);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = _1;
        goto -> bb4;
    }

    bb2: {
        _4 = Eq(_2, const 0_usize);
        assert(!move _4, "attempt to divide `{}` by zero", _1) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = Div(_1, _2);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn num_of_chunks(_1: usize, _2: usize) -> usize {
    debug nitems => _1;
    debug chunk_size => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: (usize, bool);
    scope 1 {
        debug n => _3;
    }

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = _1;
        goto -> bb8;
    }

    bb2: {
        _4 = Eq(_2, const 0_usize);
        assert(!move _4, "attempt to divide `{}` by zero", _1) -> [success: bb3, unwind continue];
    }

    bb3: {
        _3 = Div(_1, _2);
        _6 = Eq(_2, const 0_usize);
        assert(!move _6, "attempt to calculate the remainder of `{}` with a divisor of zero", _1) -> [success: bb4, unwind continue];
    }

    bb4: {
        _5 = Rem(_1, _2);
        switchInt(move _5) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _7 = CheckedAdd(_3, const 1_usize);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb6, unwind continue];
    }

    bb6: {
        _3 = move (_7.0: usize);
        goto -> bb7;
    }

    bb7: {
        _0 = _3;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn last_modified(_1: &Metadata) -> u64 {
    debug md => _1;
    let mut _0: u64;
    let mut _2: &filetime::FileTime;
    let _3: filetime::FileTime;

    bb0: {
        _3 = FileTime::from_last_modification_time(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _0 = FileTime::seconds_relative_to_1970(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn condense(_1: Cow<'_, [u8]>, _2: std::option::Option<usize>) -> Cow<'_, [u8]> {
    debug val => _1;
    debug n => _2;
    let mut _0: std::borrow::Cow<'_, [u8]>;
    let mut _3: isize;
    let _4: usize;
    let mut _6: std::result::Result<&str, std::str::Utf8Error>;
    let _7: &[u8];
    let mut _8: &std::borrow::Cow<'_, [u8]>;
    let mut _9: isize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: std::str::Chars<'_>;
    let mut _15: std::iter::Take<std::str::Chars<'_>>;
    let mut _16: std::str::Chars<'_>;
    let _17: ();
    let mut _18: &mut std::string::String;
    let _19: &str;
    let mut _20: std::vec::Vec<u8>;
    let mut _21: std::string::String;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let _25: &[u8];
    let mut _26: &std::borrow::Cow<'_, [u8]>;
    let _28: &[u8];
    let _29: &[u8];
    let mut _30: &std::borrow::Cow<'_, [u8]>;
    let mut _31: std::ops::Range<usize>;
    let _32: ();
    let mut _33: &mut std::vec::Vec<u8>;
    let mut _34: std::iter::Cloned<std::slice::Iter<'_, u8>>;
    let mut _35: std::slice::Iter<'_, u8>;
    let mut _36: &[u8];
    let _37: &[u8; 3];
    let mut _38: std::vec::Vec<u8>;
    let mut _39: bool;
    let mut _40: bool;
    scope 1 {
        debug n => _4;
        let mut _5: bool;
        scope 2 {
            debug is_short_utf8 => _5;
            let mut _27: std::vec::Vec<u8>;
            scope 3 {
                debug s => _10;
                let _10: &str;
                let mut _14: std::string::String;
                scope 4 {
                    debug s => _14;
                }
            }
            scope 5 {
                debug s => _27;
            }
        }
    }

    bb0: {
        _39 = const false;
        _40 = const false;
        _39 = const true;
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = ((_2 as Some).0: usize);
        _5 = const false;
        _8 = &_1;
        _7 = <Cow<'_, [u8]> as Deref>::deref(move _8) -> [return: bb4, unwind: bb29];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _39 = const false;
        _0 = move _1;
        goto -> bb32;
    }

    bb4: {
        _6 = from_utf8(_7) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb6, otherwise: bb16];
    }

    bb6: {
        _10 = ((_6 as Ok).0: &str);
        _13 = core::str::<impl str>::chars(_10) -> [return: bb7, unwind: bb29];
    }

    bb7: {
        _12 = <Chars<'_> as Iterator>::count(move _13) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _11 = Ge(_4, move _12);
        switchInt(move _11) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _5 = const true;
        goto -> bb16;
    }

    bb10: {
        _16 = core::str::<impl str>::chars(_10) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        _15 = <Chars<'_> as Iterator>::take(move _16, _4) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _14 = <std::iter::Take<Chars<'_>> as Iterator>::collect::<std::string::String>(move _15) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _40 = const true;
        _18 = &mut _14;
        _19 = const "...";
        _17 = std::string::String::push_str(move _18, _19) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _40 = const false;
        _21 = move _14;
        _20 = std::string::String::into_bytes(move _21) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _0 = Cow::<'_, [u8]>::Owned(move _20);
        _40 = const false;
        drop(_1) -> [return: bb27, unwind continue];
    }

    bb16: {
        _22 = _5;
        switchInt(move _22) -> [0: bb17, otherwise: bb19];
    }

    bb17: {
        _26 = &_1;
        _25 = <Cow<'_, [u8]> as Deref>::deref(move _26) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _24 = Len((*_25));
        _23 = Ge(_4, move _24);
        switchInt(move _23) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _39 = const false;
        _0 = move _1;
        goto -> bb32;
    }

    bb20: {
        _30 = &_1;
        _29 = <Cow<'_, [u8]> as Deref>::deref(move _30) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _31 = std::ops::Range::<usize> { start: const 0_usize, end: _4 };
        _28 = <[u8] as Index<std::ops::Range<usize>>>::index(_29, move _31) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _27 = std::slice::<impl [u8]>::to_vec(_28) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _33 = &mut _27;
        _37 = const b"...";
        _36 = _37 as &[u8] (PointerCoercion(Unsize));
        _35 = core::slice::<impl [u8]>::iter(move _36) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _34 = <std::slice::Iter<'_, u8> as Iterator>::cloned::<'_, u8>(move _35) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _32 = <Vec<u8> as Extend<u8>>::extend::<Cloned<std::slice::Iter<'_, u8>>>(move _33, move _34) -> [return: bb26, unwind: bb28];
    }

    bb26: {
        _38 = move _27;
        _0 = Cow::<'_, [u8]>::Owned(move _38);
        goto -> bb32;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_27) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_1) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31: {
        drop(_1) -> [return: bb27, unwind continue];
    }

    bb32: {
        switchInt(_39) -> [0: bb27, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_40) -> [0: bb29, otherwise: bb33];
    }
}

alloc33 (size: 3, align: 1) {
    2e 2e 2e                                        │ ...
}

fn idx_path(_1: &Path) -> PathBuf {
    debug csv_path => _1;
    let mut _0: std::path::PathBuf;
    let mut _2: std::string::String;
    let mut _3: std::result::Result<std::string::String, std::ffi::OsString>;
    let mut _4: std::ffi::OsString;
    let mut _5: std::path::PathBuf;
    let _6: ();
    let mut _7: &mut std::string::String;
    let _8: &str;
    let mut _9: &std::string::String;
    scope 1 {
        debug p => _2;
    }

    bb0: {
        _5 = Path::to_path_buf(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = PathBuf::into_os_string(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = OsString::into_string(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = Result::<std::string::String, OsString>::unwrap(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &mut _2;
        _8 = const ".idx";
        _6 = std::string::String::push_str(move _7, _8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _9 = &_2;
        _0 = <PathBuf as From<&std::string::String>>::from(move _9) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn util::range(_1: std::option::Option<usize>, _2: std::option::Option<usize>, _3: std::option::Option<usize>, _4: std::option::Option<usize>) -> Result<(usize, usize), std::string::String> {
    debug start => _1;
    debug end => _2;
    debug len => _3;
    debug index => _4;
    let mut _0: std::result::Result<(usize, usize), std::string::String>;
    let mut _5: (std::option::Option<usize>, std::option::Option<usize>, std::option::Option<usize>, std::option::Option<usize>);
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: isize;
    let mut _13: isize;
    let _14: usize;
    let mut _15: (usize, usize);
    let mut _16: usize;
    let mut _17: (usize, bool);
    let mut _18: std::string::String;
    let _19: &str;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: (usize, usize);
    let mut _23: usize;
    let _24: usize;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 2];
    let _34: [core::fmt::rt::Argument<'_>; 2];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &usize;
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &usize;
    let mut _39: (usize, usize);
    let mut _40: usize;
    let mut _41: usize;
    let _42: usize;
    let mut _44: (usize, usize);
    let mut _45: usize;
    let mut _46: (usize, bool);
    scope 1 {
        debug i => _14;
    }
    scope 2 {
        debug e => _24;
        let _25: usize;
        scope 3 {
            debug s => _25;
            let _29: std::string::String;
            let mut _47: &[&str; 3];
            scope 4 {
                debug res => _29;
            }
        }
    }
    scope 5 {
        debug l => _42;
        let _43: usize;
        scope 6 {
            debug s => _43;
        }
    }

    bb0: {
        _5 = (_1, _2, _3, _4);
        _13 = discriminant((_5.0: std::option::Option<usize>));
        switchInt(move _13) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        _8 = discriminant((_5.1: std::option::Option<usize>));
        switchInt(move _8) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        _7 = discriminant((_5.2: std::option::Option<usize>));
        switchInt(move _7) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = discriminant((_5.3: std::option::Option<usize>));
        switchInt(move _6) -> [1: bb10, otherwise: bb4];
    }

    bb4: {
        _12 = discriminant((_5.3: std::option::Option<usize>));
        switchInt(move _12) -> [0: bb5, 1: bb12, otherwise: bb8];
    }

    bb5: {
        _11 = discriminant((_5.1: std::option::Option<usize>));
        switchInt(move _11) -> [0: bb6, 1: bb9, otherwise: bb8];
    }

    bb6: {
        _9 = discriminant((_5.2: std::option::Option<usize>));
        switchInt(move _9) -> [0: bb16, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _42 = (((_5.2: std::option::Option<usize>) as Some).0: usize);
        _43 = std::option::Option::<usize>::unwrap_or(_1, const 0_usize) -> [return: bb26, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _10 = discriminant((_5.2: std::option::Option<usize>));
        switchInt(move _10) -> [0: bb18, 1: bb14, otherwise: bb8];
    }

    bb10: {
        _14 = (((_5.3: std::option::Option<usize>) as Some).0: usize);
        _17 = CheckedAdd(_14, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _14, const 1_usize) -> [success: bb11, unwind continue];
    }

    bb11: {
        _16 = move (_17.0: usize);
        _15 = (_14, move _16);
        _0 = Result::<(usize, usize), std::string::String>::Ok(move _15);
        goto -> bb28;
    }

    bb12: {
        _19 = const "--index cannot be used with --start, --end or --len";
        _18 = <str as ToOwned>::to_owned(_19) -> [return: bb13, unwind continue];
    }

    bb13: {
        _0 = Result::<(usize, usize), std::string::String>::Err(move _18);
        goto -> bb28;
    }

    bb14: {
        _21 = const "--end and --len cannot be used at the same time.";
        _20 = <str as ToOwned>::to_owned(_21) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = Result::<(usize, usize), std::string::String>::Err(move _20);
        goto -> bb28;
    }

    bb16: {
        _23 = std::option::Option::<usize>::unwrap_or(_1, const 0_usize) -> [return: bb17, unwind continue];
    }

    bb17: {
        _22 = (move _23, const _);
        _0 = Result::<(usize, usize), std::string::String>::Ok(move _22);
        goto -> bb28;
    }

    bb18: {
        _24 = (((_5.1: std::option::Option<usize>) as Some).0: usize);
        _25 = std::option::Option::<usize>::unwrap_or(_1, const 0_usize) -> [return: bb19, unwind continue];
    }

    bb19: {
        _27 = _25;
        _28 = _24;
        _26 = Gt(move _27, move _28);
        switchInt(move _26) -> [0: bb25, otherwise: bb20];
    }

    bb20: {
        _47 = const _;
        _31 = _47 as &[&str] (PointerCoercion(Unsize));
        _36 = &_24;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_36) -> [return: bb21, unwind continue];
    }

    bb21: {
        _38 = &_25;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_38) -> [return: bb22, unwind continue];
    }

    bb22: {
        _34 = [move _35, move _37];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb23, unwind continue];
    }

    bb23: {
        _29 = format(move _30) -> [return: bb24, unwind continue];
    }

    bb24: {
        _0 = Result::<(usize, usize), std::string::String>::Err(move _29);
        goto -> bb28;
    }

    bb25: {
        _40 = _25;
        _41 = _24;
        _39 = (move _40, move _41);
        _0 = Result::<(usize, usize), std::string::String>::Ok(move _39);
        goto -> bb28;
    }

    bb26: {
        _46 = CheckedAdd(_43, _42);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", _43, _42) -> [success: bb27, unwind continue];
    }

    bb27: {
        _45 = move (_46.0: usize);
        _44 = (_43, move _45);
        _0 = Result::<(usize, usize), std::string::String>::Ok(move _44);
        goto -> bb28;
    }

    bb28: {
        return;
    }
}

promoted[0] in util::range: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "The end of the range (", const ") must be greater than or\nequal to the start of the range (", const ")."];
        _0 = &_1;
        return;
    }
}

fn create_dir_all_threadsafe(_1: &Path) -> Result<(), std::io::Error> {
    debug path => _1;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _8: std::result::Result<(), std::io::Error>;
    let mut _9: isize;
    let mut _12: bool;
    let mut _13: &std::io::ErrorKind;
    let _14: std::io::ErrorKind;
    let _16: ();
    let mut _17: std::time::Duration;
    let mut _19: &std::io::Error;
    scope 1 {
        debug iter => _4;
        let _10: &std::io::Error;
        let _11: &&std::io::Error;
        let _15: std::result::Result<(), std::io::Error>;
        let mut _18: &std::io::ErrorKind;
        scope 2 {
            debug err => _10;
            debug err => _11;
        }
        scope 3 {
            debug other => _15;
        }
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 20_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = create_dir_all::<&Path>(_1) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = create_dir_all::<&Path>(_1) -> [return: bb15, unwind continue];
    }

    bb7: {
        _9 = discriminant(_8);
        switchInt(move _9) -> [1: bb9, otherwise: bb8];
    }

    bb8: {
        _15 = move _8;
        _0 = move _15;
        goto -> bb15;
    }

    bb9: {
        _10 = &((_8 as Err).0: std::io::Error);
        _11 = &_10;
        _19 = deref_copy (*_11);
        _14 = std::io::Error::kind(_19) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _13 = &_14;
        _18 = const _;
        _12 = <std::io::ErrorKind as PartialEq>::eq(move _13, _18) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        switchInt(move _12) -> [0: bb8, otherwise: bb12];
    }

    bb12: {
        drop(_8) -> [return: bb13, unwind continue];
    }

    bb13: {
        _17 = Duration::from_millis(const 25_u64) -> [return: bb14, unwind continue];
    }

    bb14: {
        _16 = sleep(move _17) -> [return: bb2, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in create_dir_all_threadsafe: &std::io::ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = AlreadyExists;
        _0 = &_1;
        return;
    }
}

fn util::<impl at src/util.rs:172:10: 172:15>::clone(_1: &FilenameTemplate) -> FilenameTemplate {
    debug self => _1;
    let mut _0: util::FilenameTemplate;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    let _5: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = FilenameTemplate { prefix: move _2, suffix: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn util::<impl at src/util.rs:172:17: 172:22>::fmt(_1: &FilenameTemplate, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "FilenameTemplate";
        _4 = const "prefix";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "suffix";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn util::<impl at src/util.rs:178:1: 178:22>::filename(_1: &FilenameTemplate, _2: &str) -> std::string::String {
    debug self => _1;
    debug unique_value => _2;
    let mut _0: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 3];
    let _7: [core::fmt::rt::Argument<'_>; 3];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&std::string::String;
    let _10: &std::string::String;
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&str;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &&std::string::String;
    let _15: &std::string::String;
    let mut _16: &[&str; 3];
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _16 = const _;
        _4 = _16 as &[&str] (PointerCoercion(Unsize));
        _10 = &((*_1).0: std::string::String);
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = &((*_1).1: std::string::String);
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = [move _8, move _11, move _13];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = format(move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in util::<impl at src/util.rs:178:1: 178:22>::filename: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const "", const ""];
        _0 = &_1;
        return;
    }
}

fn util::<impl at src/util.rs:178:1: 178:22>::writer(_1: &FilenameTemplate, _2: P, _3: &str) -> Result<Writer<Box<dyn std::io::Write>>, std::io::Error> {
    debug self => _1;
    debug path => _2;
    debug unique_value => _3;
    let mut _0: std::result::Result<csv::Writer<std::boxed::Box<dyn std::io::Write>>, std::io::Error>;
    let _4: std::string::String;
    let _6: &std::path::Path;
    let mut _7: &P;
    let mut _8: std::string::String;
    let mut _9: std::option::Option<&std::path::Path>;
    let _10: &std::path::Path;
    let mut _11: &std::path::PathBuf;
    let mut _12: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _15: std::result::Result<(), std::io::Error>;
    let mut _16: isize;
    let mut _19: std::string::String;
    let mut _20: &std::path::Display<'_>;
    let _21: std::path::Display<'_>;
    let _22: &std::path::Path;
    let mut _23: &std::path::PathBuf;
    let mut _24: &config::Config;
    let _25: config::Config;
    let _26: &std::option::Option<std::string::String>;
    let mut _27: bool;
    scope 1 {
        debug filename => _4;
        let _5: std::path::PathBuf;
        scope 2 {
            debug full_path => _5;
            let _18: std::option::Option<std::string::String>;
            scope 3 {
                debug parent => _13;
                let _13: &std::path::Path;
                let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 4 {
                    debug residual => _17;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => const ();
                    scope 7 {
                    }
                }
            }
            scope 8 {
                debug spath => _18;
            }
        }
    }

    bb0: {
        _27 = const false;
        _4 = FilenameTemplate::filename(_1, _3) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _27 = const true;
        _7 = &_2;
        _6 = <P as AsRef<Path>>::as_ref(move _7) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _27 = const false;
        _8 = move _4;
        _5 = Path::join::<std::string::String>(_6, move _8) -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _11 = &_5;
        _10 = <PathBuf as Deref>::deref(move _11) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _9 = Path::parent(_10) -> [return: bb5, unwind: bb27];
    }

    bb5: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [1: bb6, otherwise: bb12];
    }

    bb6: {
        _13 = ((_9 as Some).0: &std::path::Path);
        _15 = create_dir_all_threadsafe(_13) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _14 = <Result<(), std::io::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb12, 1: bb10, otherwise: bb9];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Writer<Box<dyn std::io::Write>>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb11, unwind: bb27];
    }

    bb11: {
        drop(_5) -> [return: bb21, unwind: bb31];
    }

    bb12: {
        _23 = &_5;
        _22 = <PathBuf as Deref>::deref(move _23) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _21 = Path::display(_22) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _20 = &_21;
        _19 = <std::path::Display<'_> as ToString>::to_string(move _20) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _18 = std::option::Option::<std::string::String>::Some(move _19);
        _26 = &_18;
        _25 = Config::new(_26) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _24 = &_25;
        _0 = Config::writer(move _24) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        drop(_18) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        drop(_5) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        _27 = const false;
        drop(_25) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        drop(_2) -> [return: bb22, unwind continue];
    }

    bb21: {
        _27 = const false;
        drop(_2) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_18) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_25) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_18) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_5) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_4) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_27) -> [0: bb28, otherwise: bb30];
    }
}

fn util::<impl at src/util.rs:206:1: 206:48>::deserialize(_1: D) -> Result<FilenameTemplate, <D as serde::Deserializer<'_>>::Error> {
    debug d => _1;
    let mut _0: std::result::Result<util::FilenameTemplate, <D as serde::Deserializer<'_>>::Error>;
    let _2: std::string::String;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>, std::string::String>;
    let mut _4: std::result::Result<std::string::String, <D as serde::Deserializer<'_>>::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>;
    let _7: std::string::String;
    let mut _9: std::str::Split<'_, &str>;
    let _10: &str;
    let mut _11: &std::string::String;
    let mut _12: usize;
    let mut _13: &std::vec::Vec<&str>;
    let mut _14: util::FilenameTemplate;
    let mut _15: std::string::String;
    let _16: &&str;
    let mut _17: &std::vec::Vec<&str>;
    let mut _18: std::string::String;
    let _19: &&str;
    let mut _20: &std::vec::Vec<&str>;
    let mut _21: <D as serde::Deserializer<'_>>::Error;
    let mut _22: &str;
    let mut _23: &str;
    scope 1 {
        debug raw => _2;
        let _8: std::vec::Vec<&str>;
        scope 6 {
            debug chunks => _8;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <std::string::String as serde::Deserialize<'_>>::deserialize::<D>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<std::string::String, <D as serde::Deserializer<'_>>::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::string::String);
        _2 = move _7;
        _11 = &_2;
        _10 = <std::string::String as Deref>::deref(move _11) -> [return: bb6, unwind: bb22];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, <D as serde::Deserializer<'_>>::Error>);
        _0 = <Result<FilenameTemplate, <D as serde::Deserializer<'_>>::Error> as FromResidual<Result<Infallible, <D as serde::Deserializer<'_>>::Error>>>::from_residual(move _6) -> [return: bb19, unwind continue];
    }

    bb6: {
        _9 = core::str::<impl str>::split::<'_, &str>(_10, const "{}") -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _8 = <std::str::Split<'_, &str> as Iterator>::collect::<Vec<&str>>(move _9) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _13 = &_8;
        _12 = Vec::<&str>::len(move _13) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        switchInt(move _12) -> [2: bb10, otherwise: bb15];
    }

    bb10: {
        _17 = &_8;
        _16 = <Vec<&str> as Index<usize>>::index(move _17, const 0_usize) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _22 = deref_copy (*_16);
        _15 = <str as ToOwned>::to_owned(_22) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _20 = &_8;
        _19 = <Vec<&str> as Index<usize>>::index(move _20, const 1_usize) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _23 = deref_copy (*_19);
        _18 = <str as ToOwned>::to_owned(_23) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _14 = FilenameTemplate { prefix: move _15, suffix: move _18 };
        _0 = Result::<FilenameTemplate, <D as serde::Deserializer<'_>>::Error>::Ok(move _14);
        goto -> bb17;
    }

    bb15: {
        _21 = <<D as serde::Deserializer<'_>>::Error as serde::de::Error>::custom::<&str>(const "The --filename argument must contain one '{}'.") -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _0 = Result::<FilenameTemplate, <D as serde::Deserializer<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb17: {
        drop(_8) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_15) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_8) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

static USAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\nUsage:\n    xsv <command> [<args>...]\n    xsv [options]\n\nOptions:\n    --list        List all commands available.\n    -h, --help    Display this message\n    <command> -h  Display the command help message\n    --version     Print version info and exit\n\nCommands:\n    cat         Concatenate by row or column\n    count       Count records\n    fixlengths  Makes all records have same length\n    flatten     Show one field per line\n    fmt         Format CSV output (change field delimiter)\n    frequency   Show frequency tables\n    headers     Show header names\n    help        Show this usage message.\n    index       Create CSV index for faster access\n    input       Read CSV data with special quoting rules\n    join        Join CSV files\n    sample      Randomly sample CSV data\n    search      Search CSV data with regexes\n    select      Select columns from CSV\n    slice       Slice records from CSV\n    sort        Sort CSV data\n    split       Split CSV data into many files\n    stats       Compute basic statistics\n    table       Align CSV data into columns\n";
        return;
    }
}

const _IMPL_DESERIALIZE_FOR_Args: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize(_1: __D) -> Result<Args, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<Args, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor<'_>>(move _1, const "Args", const _, const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Args>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>;
    let mut _3: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _4: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: serde::de::Unexpected<'_>;
    let mut _7: &dyn serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _6: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _7: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "arg_command") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "flag_list") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _10: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
    let mut _11: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 11_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb13, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 11]) -> [97: bb2, otherwise: bb12];
    }

    bb2: {
        switchInt((*_2)[1 of 11]) -> [114: bb3, otherwise: bb12];
    }

    bb3: {
        switchInt((*_2)[2 of 11]) -> [103: bb4, otherwise: bb12];
    }

    bb4: {
        switchInt((*_2)[3 of 11]) -> [95: bb5, otherwise: bb12];
    }

    bb5: {
        switchInt((*_2)[4 of 11]) -> [99: bb6, otherwise: bb12];
    }

    bb6: {
        switchInt((*_2)[5 of 11]) -> [111: bb7, otherwise: bb12];
    }

    bb7: {
        switchInt((*_2)[6 of 11]) -> [109: bb8, otherwise: bb12];
    }

    bb8: {
        switchInt((*_2)[7 of 11]) -> [109: bb9, otherwise: bb12];
    }

    bb9: {
        switchInt((*_2)[8 of 11]) -> [97: bb10, otherwise: bb12];
    }

    bb10: {
        switchInt((*_2)[9 of 11]) -> [110: bb11, otherwise: bb12];
    }

    bb11: {
        switchInt((*_2)[10 of 11]) -> [100: bb23, otherwise: bb12];
    }

    bb12: {
        _11 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb25;
    }

    bb13: {
        _3 = Len((*_2));
        _4 = const 9_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb12, otherwise: bb14];
    }

    bb14: {
        switchInt((*_2)[0 of 9]) -> [102: bb15, otherwise: bb12];
    }

    bb15: {
        switchInt((*_2)[1 of 9]) -> [108: bb16, otherwise: bb12];
    }

    bb16: {
        switchInt((*_2)[2 of 9]) -> [97: bb17, otherwise: bb12];
    }

    bb17: {
        switchInt((*_2)[3 of 9]) -> [103: bb18, otherwise: bb12];
    }

    bb18: {
        switchInt((*_2)[4 of 9]) -> [95: bb19, otherwise: bb12];
    }

    bb19: {
        switchInt((*_2)[5 of 9]) -> [108: bb20, otherwise: bb12];
    }

    bb20: {
        switchInt((*_2)[6 of 9]) -> [105: bb21, otherwise: bb12];
    }

    bb21: {
        switchInt((*_2)[7 of 9]) -> [115: bb22, otherwise: bb12];
    }

    bb22: {
        switchInt((*_2)[8 of 9]) -> [116: bb24, otherwise: bb12];
    }

    bb23: {
        _9 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb25;
    }

    bb24: {
        _10 = _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Args";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<Args, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Args>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<Args, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<Command>>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<Command>>;
    let _7: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<Command>;
    let mut _10: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<bool>, <__A as serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn serde::de::Expected;
    let mut _21: Args;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<bool>;
        let _16: <__A as serde::de::SeqAccess<'_>>::Error;
        let _18: bool;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<Command>>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Args, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<std::option::Option<Command>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = move ((_6 as Some).0: std::option::Option<Command>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<bool>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = Result::<Args, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Args, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<bool>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: bool);
        _21 = Args { arg_command: move _9, flag_list: _18 };
        _0 = Result::<Args, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = Result::<Args, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Args with 2 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::<impl at src/main.rs:88:10: 88:21>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor<'_>, _2: __A) -> Result<Args, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Args>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<Args, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::option::Option<Command>>;
    let mut _5: std::result::Result<std::option::Option<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: isize;
    let mut _13: bool;
    let _14: &std::option::Option<std::option::Option<Command>>;
    let mut _15: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _16: std::option::Option<std::option::Option<Command>>;
    let mut _17: std::result::Result<std::option::Option<Command>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _18: &mut __A;
    let mut _19: isize;
    let mut _22: bool;
    let _23: &std::option::Option<bool>;
    let mut _24: <__A as serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<bool>;
    let mut _26: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: std::result::Result<serde::de::IgnoredAny, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: std::result::Result<std::option::Option<Command>, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _39: isize;
    let mut _43: isize;
    let mut _45: std::result::Result<bool, <__A as serde::de::MapAccess<'_>>::Error>;
    let mut _46: isize;
    let mut _49: Args;
    let mut _50: std::option::Option<Command>;
    let mut _51: bool;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<bool>;
        scope 2 {
            debug __field1 => _4;
            let _35: std::option::Option<Command>;
            let _37: std::option::Option<Command>;
            let _40: std::option::Option<Command>;
            let _41: <__A as serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __key => _11;
                let _8: std::option::Option<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field>;
                let _9: <__A as serde::de::MapAccess<'_>>::Error;
                let _11: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field;
                let _20: std::option::Option<Command>;
                let _21: <__A as serde::de::MapAccess<'_>>::Error;
                let _29: bool;
                let _30: <__A as serde::de::MapAccess<'_>>::Error;
                let _34: <__A as serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __val => _8;
                }
                scope 5 {
                    debug __err => _9;
                }
                scope 6 {
                    debug __val => _20;
                }
                scope 7 {
                    debug __err => _21;
                }
                scope 8 {
                    debug __val => _29;
                }
                scope 9 {
                    debug __err => _30;
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny;
                }
                scope 12 {
                    debug __err => _34;
                }
            }
            scope 13 {
                debug __field0 => _35;
                let _42: bool;
                let _44: bool;
                let _47: bool;
                let _48: <__A as serde::de::MapAccess<'_>>::Error;
                scope 17 {
                    debug __field1 => _42;
                }
                scope 18 {
                    debug __field1 => _44;
                }
                scope 19 {
                    debug __val => _47;
                }
                scope 20 {
                    debug __err => _48;
                }
            }
            scope 14 {
                debug __field0 => _37;
            }
            scope 15 {
                debug __val => _40;
            }
            scope 16 {
                debug __err => _41;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<std::option::Option<Command>>::None;
        _4 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _9);
        goto -> bb39;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<_IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = discriminant(_3);
        switchInt(move _36) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb7: {
        _11 = move ((_8 as Some).0: _IMPL_DESERIALIZE_FOR_Args::<impl serde::Deserialize<'de> for Args>::deserialize::__Field);
        _12 = discriminant(_11);
        switchInt(move _12) -> [0: bb9, 1: bb17, otherwise: bb8];
    }

    bb8: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb25, unwind: bb41];
    }

    bb9: {
        _14 = &_3;
        _13 = std::option::Option::<std::option::Option<Command>>::is_some(_14) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "arg_command") -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb39;
    }

    bb13: {
        _18 = &mut _2;
        _17 = <__A as MapAccess<'_>>::next_value::<std::option::Option<Command>>(_18) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb39;
    }

    bb16: {
        _20 = move ((_17 as Ok).0: std::option::Option<Command>);
        _16 = std::option::Option::<std::option::Option<Command>>::Some(move _20);
        _3 = move _16;
        goto -> bb1;
    }

    bb17: {
        _23 = &_4;
        _22 = std::option::Option::<bool>::is_some(_23) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        switchInt(move _22) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _24 = <<__A as MapAccess<'_>>::Error as serde::de::Error>::duplicate_field(const "flag_list") -> [return: bb20, unwind: bb41];
    }

    bb20: {
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb39;
    }

    bb21: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<bool>(_27) -> [return: bb22, unwind: bb41];
    }

    bb22: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _30 = move ((_26 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb39;
    }

    bb24: {
        _29 = ((_26 as Ok).0: bool);
        _25 = std::option::Option::<bool>::Some(_29);
        _4 = move _25;
        goto -> bb1;
    }

    bb25: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb1, 1: bb26, otherwise: bb4];
    }

    bb26: {
        _34 = move ((_31 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb39;
    }

    bb27: {
        _38 = serde::private::de::missing_field::<'_, std::option::Option<Command>, <__A as MapAccess<'_>>::Error>(const "arg_command") -> [return: bb29, unwind: bb41];
    }

    bb28: {
        _37 = move ((_3 as Some).0: std::option::Option<Command>);
        _35 = move _37;
        goto -> bb32;
    }

    bb29: {
        _39 = discriminant(_38);
        switchInt(move _39) -> [0: bb31, 1: bb30, otherwise: bb4];
    }

    bb30: {
        _41 = move ((_38 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb39;
    }

    bb31: {
        _40 = move ((_38 as Ok).0: std::option::Option<Command>);
        _35 = move _40;
        goto -> bb32;
    }

    bb32: {
        _43 = discriminant(_4);
        switchInt(move _43) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _45 = serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "flag_list") -> [return: bb35, unwind: bb41];
    }

    bb34: {
        _44 = ((_4 as Some).0: bool);
        _42 = _44;
        goto -> bb38;
    }

    bb35: {
        _46 = discriminant(_45);
        switchInt(move _46) -> [0: bb37, 1: bb36, otherwise: bb4];
    }

    bb36: {
        _48 = move ((_45 as Err).0: <__A as serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Err(move _48);
        goto -> bb39;
    }

    bb37: {
        _47 = ((_45 as Ok).0: bool);
        _42 = _47;
        goto -> bb38;
    }

    bb38: {
        _50 = move _35;
        _51 = _42;
        _49 = Args { arg_command: move _50, flag_list: move _51 };
        _0 = Result::<Args, <__A as MapAccess<'_>>::Error>::Ok(move _49);
        drop(_2) -> [return: bb40, unwind continue];
    }

    bb39: {
        drop(_2) -> [return: bb40, unwind continue];
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }
}

const _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Args::<impl at src/main.rs:88:10: 88:21>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "arg_command", const "flag_list"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Args;
    let mut _2: std::result::Result<Args, docopt::Error>;
    let mut _3: std::result::Result<docopt::Docopt, docopt::Error>;
    let mut _4: &str;
    let mut _5: &&str;
    let mut _6: bool;
    let _7: ();
    let mut _8: std::result::Result<(), std::io::Error>;
    let mut _9: &mut std::io::Stdout;
    let mut _10: std::io::Stdout;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: isize;
    let _14: ();
    let mut _15: std::result::Result<(), std::io::Error>;
    let mut _16: &mut std::io::Stderr;
    let mut _17: std::io::Stderr;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let _20: !;
    let mut _22: std::result::Result<(), CliError>;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: !;
    let mut _27: !;
    let mut _28: &docopt::Error;
    let _30: ();
    let mut _31: std::result::Result<(), std::io::Error>;
    let mut _32: &mut std::io::Stderr;
    let mut _33: std::io::Stderr;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &csv::Error;
    let _41: !;
    let mut _44: bool;
    let mut _45: &std::io::ErrorKind;
    let _46: std::io::ErrorKind;
    let _47: !;
    let _49: ();
    let mut _50: std::result::Result<(), std::io::Error>;
    let mut _51: &mut std::io::Stderr;
    let mut _52: std::io::Stderr;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let _59: &std::io::Error;
    let _60: !;
    let _62: ();
    let mut _63: std::result::Result<(), std::io::Error>;
    let mut _64: &mut std::io::Stderr;
    let mut _65: std::io::Stderr;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let _69: &[core::fmt::rt::Argument<'_>; 1];
    let _70: [core::fmt::rt::Argument<'_>; 1];
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &std::string::String;
    let _73: !;
    let mut _80: &std::io::Error;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: isize;
    let mut _84: isize;
    scope 1 {
        debug args => _1;
        let _21: Command;
        let mut _74: &[&str; 1];
        let mut _79: &[&str; 1];
        scope 2 {
            debug cmd => _21;
            let _26: docopt::Error;
            let _29: csv::Error;
            let _42: &std::io::Error;
            let _43: &&std::io::Error;
            let _48: std::io::Error;
            let _61: std::string::String;
            let mut _77: &std::io::ErrorKind;
            scope 3 {
                debug err => _26;
            }
            scope 4 {
                debug err => _29;
                let mut _78: &[&str; 2];
            }
            scope 5 {
                debug err => _42;
                debug err => _43;
            }
            scope 6 {
                debug err => _48;
                let mut _76: &[&str; 2];
            }
            scope 7 {
                debug msg => _61;
                let mut _75: &[&str; 2];
            }
        }
    }

    bb0: {
        _81 = const false;
        _82 = const false;
        _5 = const {alloc34: &&str};
        _4 = (*_5);
        _3 = Docopt::new::<&str>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<Docopt, docopt::Error>::and_then::<Args, {closure@src/main.rs:96:39: 96:42}>(move _3, const ZeroSized: {closure@src/main.rs:96:39: 96:42}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = Result::<Args, docopt::Error>::unwrap_or_else::<{closure@src/main.rs:99:45: 99:48}>(move _2, const ZeroSized: {closure@src/main.rs:99:45: 99:48}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = (_1.1: bool);
        switchInt(move _6) -> [0: bb9, otherwise: bb4];
    }

    bb4: {
        _10 = stdout() -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = &mut _10;
        _74 = const _;
        _12 = _74 as &[&str] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_const(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = <Stdout as std::io::Write>::write_fmt(_9, move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _7 = Result::<(), std::io::Error>::unwrap(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9: {
        _13 = discriminant((_1.0: std::option::Option<Command>));
        switchInt(move _13) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _21 = move (((_1.0: std::option::Option<Command>) as Some).0: Command);
        _81 = const true;
        _82 = const true;
        _22 = Command::run(move _21) -> [return: bb17, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _17 = stderr() -> [return: bb13, unwind continue];
    }

    bb13: {
        _16 = &mut _17;
        _79 = const _;
        _19 = _79 as &[&str] (PointerCoercion(Unsize));
        _18 = Arguments::<'_>::new_const(move _19) -> [return: bb14, unwind continue];
    }

    bb14: {
        _15 = <Stderr as std::io::Write>::write_fmt(_16, move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _14 = Result::<(), std::io::Error>::unwrap(move _15) -> [return: bb16, unwind continue];
    }

    bb16: {
        _20 = exit(const 0_i32) -> unwind continue;
    }

    bb17: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb20, 1: bb18, otherwise: bb11];
    }

    bb18: {
        _23 = discriminant(((_22 as Err).0: CliError));
        switchInt(move _23) -> [0: bb21, 1: bb22, 2: bb28, 3: bb19, otherwise: bb11];
    }

    bb19: {
        _61 = move ((((_22 as Err).0: CliError) as Other).0: std::string::String);
        _65 = stderr() -> [return: bb38, unwind: bb43];
    }

    bb20: {
        _25 = exit(const 0_i32) -> bb52;
    }

    bb21: {
        _26 = move ((((_22 as Err).0: CliError) as Flag).0: docopt::Error);
        _28 = &_26;
        _27 = docopt::Error::exit(move _28) -> bb46;
    }

    bb22: {
        _29 = move ((((_22 as Err).0: CliError) as Csv).0: csv::Error);
        _33 = stderr() -> [return: bb23, unwind: bb45];
    }

    bb23: {
        _32 = &mut _33;
        _78 = const _;
        _35 = _78 as &[&str] (PointerCoercion(Unsize));
        _40 = &_29;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<csv::Error>(_40) -> [return: bb24, unwind: bb45];
    }

    bb24: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _31 = <Stderr as std::io::Write>::write_fmt(_32, move _34) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        _30 = Result::<(), std::io::Error>::unwrap(move _31) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        _41 = exit(const 1_i32) -> bb45;
    }

    bb28: {
        _42 = &((((_22 as Err).0: CliError) as Io).0: std::io::Error);
        _43 = &_42;
        _80 = deref_copy (*_43);
        _46 = std::io::Error::kind(_80) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        _45 = &_46;
        _77 = const _;
        _44 = <std::io::ErrorKind as PartialEq>::eq(move _45, _77) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        switchInt(move _44) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _47 = exit(const 0_i32) -> bb52;
    }

    bb32: {
        _82 = const false;
        _48 = move ((((_22 as Err).0: CliError) as Io).0: std::io::Error);
        _52 = stderr() -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _51 = &mut _52;
        _76 = const _;
        _54 = _76 as &[&str] (PointerCoercion(Unsize));
        _59 = &_48;
        _58 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_59) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        _57 = [move _58];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _50 = <Stderr as std::io::Write>::write_fmt(_51, move _53) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _49 = Result::<(), std::io::Error>::unwrap(move _50) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        _60 = exit(const 1_i32) -> bb44;
    }

    bb38: {
        _64 = &mut _65;
        _75 = const _;
        _67 = _75 as &[&str] (PointerCoercion(Unsize));
        _72 = &_61;
        _71 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_72) -> [return: bb39, unwind: bb43];
    }

    bb39: {
        _70 = [move _71];
        _69 = &_70;
        _68 = _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _66 = Arguments::<'_>::new_v1(move _67, move _68) -> [return: bb40, unwind: bb43];
    }

    bb40: {
        _63 = <Stderr as std::io::Write>::write_fmt(_64, move _66) -> [return: bb41, unwind: bb43];
    }

    bb41: {
        _62 = Result::<(), std::io::Error>::unwrap(move _63) -> [return: bb42, unwind: bb43];
    }

    bb42: {
        _73 = exit(const 1_i32) -> bb43;
    }

    bb43 (cleanup): {
        drop(_61) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_48) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_29) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_26) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        switchInt(_81) -> [0: bb47, otherwise: bb51];
    }

    bb49 (cleanup): {
        switchInt(_82) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop(((((_22 as Err).0: CliError) as Io).0: std::io::Error)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _83 = discriminant(((_22 as Err).0: CliError));
        switchInt(move _83) -> [2: bb49, otherwise: bb47];
    }

    bb52 (cleanup): {
        _84 = discriminant(_22);
        switchInt(move _84) -> [1: bb48, otherwise: bb47];
    }
}

alloc34 (static: USAGE, size: 16, align: 8) {
    ╾───alloc2497<imm>────╼ 28 04 00 00 00 00 00 00 │ ╾──────╼(.......
}

alloc2497 (size: 1064, align: 1) {
    0x000 │ 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 │ .Usage:.    xsv 
    0x010 │ 3c 63 6f 6d 6d 61 6e 64 3e 20 5b 3c 61 72 67 73 │ <command> [<args
    0x020 │ 3e 2e 2e 2e 5d 0a 20 20 20 20 78 73 76 20 5b 6f │ >...].    xsv [o
    0x030 │ 70 74 69 6f 6e 73 5d 0a 0a 4f 70 74 69 6f 6e 73 │ ptions]..Options
    0x040 │ 3a 0a 20 20 20 20 2d 2d 6c 69 73 74 20 20 20 20 │ :.    --list    
    0x050 │ 20 20 20 20 4c 69 73 74 20 61 6c 6c 20 63 6f 6d │     List all com
    0x060 │ 6d 61 6e 64 73 20 61 76 61 69 6c 61 62 6c 65 2e │ mands available.
    0x070 │ 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 │ .    -h, --help 
    0x080 │ 20 20 20 44 69 73 70 6c 61 79 20 74 68 69 73 20 │    Display this 
    0x090 │ 6d 65 73 73 61 67 65 0a 20 20 20 20 3c 63 6f 6d │ message.    <com
    0x0a0 │ 6d 61 6e 64 3e 20 2d 68 20 20 44 69 73 70 6c 61 │ mand> -h  Displa
    0x0b0 │ 79 20 74 68 65 20 63 6f 6d 6d 61 6e 64 20 68 65 │ y the command he
    0x0c0 │ 6c 70 20 6d 65 73 73 61 67 65 0a 20 20 20 20 2d │ lp message.    -
    0x0d0 │ 2d 76 65 72 73 69 6f 6e 20 20 20 20 20 50 72 69 │ -version     Pri
    0x0e0 │ 6e 74 20 76 65 72 73 69 6f 6e 20 69 6e 66 6f 20 │ nt version info 
    0x0f0 │ 61 6e 64 20 65 78 69 74 0a 0a 43 6f 6d 6d 61 6e │ and exit..Comman
    0x100 │ 64 73 3a 0a 20 20 20 20 63 61 74 20 20 20 20 20 │ ds:.    cat     
    0x110 │ 20 20 20 20 43 6f 6e 63 61 74 65 6e 61 74 65 20 │     Concatenate 
    0x120 │ 62 79 20 72 6f 77 20 6f 72 20 63 6f 6c 75 6d 6e │ by row or column
    0x130 │ 0a 20 20 20 20 63 6f 75 6e 74 20 20 20 20 20 20 │ .    count      
    0x140 │ 20 43 6f 75 6e 74 20 72 65 63 6f 72 64 73 0a 20 │  Count records. 
    0x150 │ 20 20 20 66 69 78 6c 65 6e 67 74 68 73 20 20 4d │    fixlengths  M
    0x160 │ 61 6b 65 73 20 61 6c 6c 20 72 65 63 6f 72 64 73 │ akes all records
    0x170 │ 20 68 61 76 65 20 73 61 6d 65 20 6c 65 6e 67 74 │  have same lengt
    0x180 │ 68 0a 20 20 20 20 66 6c 61 74 74 65 6e 20 20 20 │ h.    flatten   
    0x190 │ 20 20 53 68 6f 77 20 6f 6e 65 20 66 69 65 6c 64 │   Show one field
    0x1a0 │ 20 70 65 72 20 6c 69 6e 65 0a 20 20 20 20 66 6d │  per line.    fm
    0x1b0 │ 74 20 20 20 20 20 20 20 20 20 46 6f 72 6d 61 74 │ t         Format
    0x1c0 │ 20 43 53 56 20 6f 75 74 70 75 74 20 28 63 68 61 │  CSV output (cha
    0x1d0 │ 6e 67 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 │ nge field delimi
    0x1e0 │ 74 65 72 29 0a 20 20 20 20 66 72 65 71 75 65 6e │ ter).    frequen
    0x1f0 │ 63 79 20 20 20 53 68 6f 77 20 66 72 65 71 75 65 │ cy   Show freque
    0x200 │ 6e 63 79 20 74 61 62 6c 65 73 0a 20 20 20 20 68 │ ncy tables.    h
    0x210 │ 65 61 64 65 72 73 20 20 20 20 20 53 68 6f 77 20 │ eaders     Show 
    0x220 │ 68 65 61 64 65 72 20 6e 61 6d 65 73 0a 20 20 20 │ header names.   
    0x230 │ 20 68 65 6c 70 20 20 20 20 20 20 20 20 53 68 6f │  help        Sho
    0x240 │ 77 20 74 68 69 73 20 75 73 61 67 65 20 6d 65 73 │ w this usage mes
    0x250 │ 73 61 67 65 2e 0a 20 20 20 20 69 6e 64 65 78 20 │ sage..    index 
    0x260 │ 20 20 20 20 20 20 43 72 65 61 74 65 20 43 53 56 │       Create CSV
    0x270 │ 20 69 6e 64 65 78 20 66 6f 72 20 66 61 73 74 65 │  index for faste
    0x280 │ 72 20 61 63 63 65 73 73 0a 20 20 20 20 69 6e 70 │ r access.    inp
    0x290 │ 75 74 20 20 20 20 20 20 20 52 65 61 64 20 43 53 │ ut       Read CS
    0x2a0 │ 56 20 64 61 74 61 20 77 69 74 68 20 73 70 65 63 │ V data with spec
    0x2b0 │ 69 61 6c 20 71 75 6f 74 69 6e 67 20 72 75 6c 65 │ ial quoting rule
    0x2c0 │ 73 0a 20 20 20 20 6a 6f 69 6e 20 20 20 20 20 20 │ s.    join      
    0x2d0 │ 20 20 4a 6f 69 6e 20 43 53 56 20 66 69 6c 65 73 │   Join CSV files
    0x2e0 │ 0a 20 20 20 20 73 61 6d 70 6c 65 20 20 20 20 20 │ .    sample     
    0x2f0 │ 20 52 61 6e 64 6f 6d 6c 79 20 73 61 6d 70 6c 65 │  Randomly sample
    0x300 │ 20 43 53 56 20 64 61 74 61 0a 20 20 20 20 73 65 │  CSV data.    se
    0x310 │ 61 72 63 68 20 20 20 20 20 20 53 65 61 72 63 68 │ arch      Search
    0x320 │ 20 43 53 56 20 64 61 74 61 20 77 69 74 68 20 72 │  CSV data with r
    0x330 │ 65 67 65 78 65 73 0a 20 20 20 20 73 65 6c 65 63 │ egexes.    selec
    0x340 │ 74 20 20 20 20 20 20 53 65 6c 65 63 74 20 63 6f │ t      Select co
    0x350 │ 6c 75 6d 6e 73 20 66 72 6f 6d 20 43 53 56 0a 20 │ lumns from CSV. 
    0x360 │ 20 20 20 73 6c 69 63 65 20 20 20 20 20 20 20 53 │    slice       S
    0x370 │ 6c 69 63 65 20 72 65 63 6f 72 64 73 20 66 72 6f │ lice records fro
    0x380 │ 6d 20 43 53 56 0a 20 20 20 20 73 6f 72 74 20 20 │ m CSV.    sort  
    0x390 │ 20 20 20 20 20 20 53 6f 72 74 20 43 53 56 20 64 │       Sort CSV d
    0x3a0 │ 61 74 61 0a 20 20 20 20 73 70 6c 69 74 20 20 20 │ ata.    split   
    0x3b0 │ 20 20 20 20 53 70 6c 69 74 20 43 53 56 20 64 61 │     Split CSV da
    0x3c0 │ 74 61 20 69 6e 74 6f 20 6d 61 6e 79 20 66 69 6c │ ta into many fil
    0x3d0 │ 65 73 0a 20 20 20 20 73 74 61 74 73 20 20 20 20 │ es.    stats    
    0x3e0 │ 20 20 20 43 6f 6d 70 75 74 65 20 62 61 73 69 63 │    Compute basic
    0x3f0 │ 20 73 74 61 74 69 73 74 69 63 73 0a 20 20 20 20 │  statistics.    
    0x400 │ 74 61 62 6c 65 20 20 20 20 20 20 20 41 6c 69 67 │ table       Alig
    0x410 │ 6e 20 43 53 56 20 64 61 74 61 20 69 6e 74 6f 20 │ n CSV data into 
    0x420 │ 63 6f 6c 75 6d 6e 73 0a                         │ columns.
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Installed commands:\n    cat         Concatenate by row or column\n    count       Count records\n    fixlengths  Makes all records have same length\n    flatten     Show one field per line\n    fmt         Format CSV output (change field delimiter)\n    frequency   Show frequency tables\n    headers     Show header names\n    help        Show this usage message.\n    index       Create CSV index for faster access\n    input       Read CSV data with special quoting rules\n    join        Join CSV files\n    sample      Randomly sample CSV data\n    search      Search CSV data with regexes\n    select      Select columns from CSV\n    slice       Slice records from CSV\n    sort        Sort CSV data\n    split       Split CSV data into many files\n    stats       Compute basic statistics\n    table       Align CSV data into columns\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &std::io::ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = BrokenPipe;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "xsv is a suite of CSV command line utilities.\n\nPlease choose one of the following commands:\n    cat         Concatenate by row or column\n    count       Count records\n    fixlengths  Makes all records have same length\n    flatten     Show one field per line\n    fmt         Format CSV output (change field delimiter)\n    frequency   Show frequency tables\n    headers     Show header names\n    help        Show this usage message.\n    index       Create CSV index for faster access\n    input       Read CSV data with special quoting rules\n    join        Join CSV files\n    sample      Randomly sample CSV data\n    search      Search CSV data with regexes\n    select      Select columns from CSV\n    slice       Slice records from CSV\n    sort        Sort CSV data\n    split       Split CSV data into many files\n    stats       Compute basic statistics\n    table       Align CSV data into columns\n\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: {closure@src/main.rs:96:39: 96:42}, _2: Docopt) -> Result<Args, docopt::Error> {
    debug d => _2;
    let mut _0: std::result::Result<Args, docopt::Error>;
    let mut _3: &docopt::Docopt;
    let _4: docopt::Docopt;
    let mut _5: docopt::Docopt;
    let mut _6: std::option::Option<std::string::String>;
    let mut _7: std::string::String;
    let mut _8: bool;

    bb0: {
        _8 = const false;
        _5 = Docopt::options_first(move _2, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = const true;
        _7 = version() -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _6 = std::option::Option::<std::string::String>::Some(move _7);
        _8 = const false;
        _4 = Docopt::version(move _5, move _6) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _3 = &_4;
        _8 = const false;
        _0 = Docopt::deserialize::<'_, '_, Args>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb8];
    }
}

fn main::{closure#1}(_1: {closure@src/main.rs:99:45: 99:48}, _2: docopt::Error) -> Args {
    debug e => _2;
    let mut _0: Args;
    let mut _3: !;
    let mut _4: &docopt::Error;

    bb0: {
        _4 = &_2;
        _3 = docopt::Error::exit(move _4) -> bb1;
    }

    bb1 (cleanup): {
        drop(_2) -> [return: bb2, unwind terminate(cleanup)];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:138:10: 138:15>::fmt(_1: &Command, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let _16: &str;
    let _17: &str;
    let _18: &str;
    let _19: &str;
    let _20: &str;
    let _21: &str;
    let _22: &str;
    let _23: &str;
    let _24: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, 16: bb19, 17: bb20, 18: bb21, 19: bb1, otherwise: bb2];
    }

    bb1: {
        _24 = const "Table";
        _3 = _24;
        goto -> bb22;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Cat";
        _3 = _5;
        goto -> bb22;
    }

    bb4: {
        _6 = const "Count";
        _3 = _6;
        goto -> bb22;
    }

    bb5: {
        _7 = const "FixLengths";
        _3 = _7;
        goto -> bb22;
    }

    bb6: {
        _8 = const "Flatten";
        _3 = _8;
        goto -> bb22;
    }

    bb7: {
        _9 = const "Fmt";
        _3 = _9;
        goto -> bb22;
    }

    bb8: {
        _10 = const "Frequency";
        _3 = _10;
        goto -> bb22;
    }

    bb9: {
        _11 = const "Headers";
        _3 = _11;
        goto -> bb22;
    }

    bb10: {
        _12 = const "Help";
        _3 = _12;
        goto -> bb22;
    }

    bb11: {
        _13 = const "Index";
        _3 = _13;
        goto -> bb22;
    }

    bb12: {
        _14 = const "Input";
        _3 = _14;
        goto -> bb22;
    }

    bb13: {
        _15 = const "Join";
        _3 = _15;
        goto -> bb22;
    }

    bb14: {
        _16 = const "Partition";
        _3 = _16;
        goto -> bb22;
    }

    bb15: {
        _17 = const "Sample";
        _3 = _17;
        goto -> bb22;
    }

    bb16: {
        _18 = const "Search";
        _3 = _18;
        goto -> bb22;
    }

    bb17: {
        _19 = const "Select";
        _3 = _19;
        goto -> bb22;
    }

    bb18: {
        _20 = const "Slice";
        _3 = _20;
        goto -> bb22;
    }

    bb19: {
        _21 = const "Sort";
        _3 = _21;
        goto -> bb22;
    }

    bb20: {
        _22 = const "Split";
        _3 = _22;
        goto -> bb22;
    }

    bb21: {
        _23 = const "Stats";
        _3 = _23;
        goto -> bb22;
    }

    bb22: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }
}

const _IMPL_DESERIALIZE_FOR_Command: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize(_1: __D) -> Result<Command, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<Command, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_enum::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Visitor<'_>>(move _1, const "Command", const _, const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Command>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>;
    let mut _3: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _4: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _5: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _6: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _7: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _8: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _9: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _10: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _11: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _12: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _13: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _14: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _15: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _16: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _17: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _18: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _19: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _20: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _21: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _22: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _23: __E;
    let mut _24: serde::de::Unexpected<'_>;
    let mut _25: &dyn serde::de::Expected;
    let mut _26: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, 16: bb18, 17: bb19, 18: bb20, 19: bb21, otherwise: bb1];
    }

    bb1: {
        _24 = Unexpected::<'_>::Unsigned(_2);
        _26 = const _;
        _25 = _26 as &dyn serde::de::Expected (PointerCoercion(Unsize));
        _23 = <__E as serde::de::Error>::invalid_value(move _24, move _25) -> [return: bb22, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb23;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb23;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb23;
    }

    bb5: {
        _6 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb23;
    }

    bb6: {
        _7 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb23;
    }

    bb7: {
        _8 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb23;
    }

    bb8: {
        _9 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb23;
    }

    bb9: {
        _10 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb23;
    }

    bb10: {
        _11 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb23;
    }

    bb11: {
        _12 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field9;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb23;
    }

    bb12: {
        _13 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field10;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb23;
    }

    bb13: {
        _14 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field11;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb23;
    }

    bb14: {
        _15 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field12;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb23;
    }

    bb15: {
        _16 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field13;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb23;
    }

    bb16: {
        _17 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field14;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb23;
    }

    bb17: {
        _18 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field15;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb23;
    }

    bb18: {
        _19 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field16;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb23;
    }

    bb19: {
        _20 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field17;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb23;
    }

    bb20: {
        _21 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field18;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb23;
    }

    bb21: {
        _22 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field19;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb23;
    }

    bb22: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Err(move _23);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 20";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _24: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _25: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _26: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _27: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _28: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _29: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _30: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _31: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _32: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _33: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _34: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _35: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _36: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _37: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _38: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _39: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _40: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _41: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _42: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _43: __E;

    bb0: {
        _22 = <str as PartialEq>::eq(_2, const "Cat") -> [return: bb60, unwind continue];
    }

    bb1: {
        _23 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb62;
    }

    bb2: {
        _21 = <str as PartialEq>::eq(_2, const "Count") -> [return: bb59, unwind continue];
    }

    bb3: {
        _24 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb62;
    }

    bb4: {
        _20 = <str as PartialEq>::eq(_2, const "FixLengths") -> [return: bb58, unwind continue];
    }

    bb5: {
        _25 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb62;
    }

    bb6: {
        _19 = <str as PartialEq>::eq(_2, const "Flatten") -> [return: bb57, unwind continue];
    }

    bb7: {
        _26 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb62;
    }

    bb8: {
        _18 = <str as PartialEq>::eq(_2, const "Fmt") -> [return: bb56, unwind continue];
    }

    bb9: {
        _27 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb62;
    }

    bb10: {
        _17 = <str as PartialEq>::eq(_2, const "Frequency") -> [return: bb55, unwind continue];
    }

    bb11: {
        _28 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb62;
    }

    bb12: {
        _16 = <str as PartialEq>::eq(_2, const "Headers") -> [return: bb54, unwind continue];
    }

    bb13: {
        _29 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb62;
    }

    bb14: {
        _15 = <str as PartialEq>::eq(_2, const "Help") -> [return: bb53, unwind continue];
    }

    bb15: {
        _30 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb62;
    }

    bb16: {
        _14 = <str as PartialEq>::eq(_2, const "Index") -> [return: bb52, unwind continue];
    }

    bb17: {
        _31 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb62;
    }

    bb18: {
        _13 = <str as PartialEq>::eq(_2, const "Input") -> [return: bb51, unwind continue];
    }

    bb19: {
        _32 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field9;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb62;
    }

    bb20: {
        _12 = <str as PartialEq>::eq(_2, const "Join") -> [return: bb50, unwind continue];
    }

    bb21: {
        _33 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field10;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb62;
    }

    bb22: {
        _11 = <str as PartialEq>::eq(_2, const "Partition") -> [return: bb49, unwind continue];
    }

    bb23: {
        _34 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field11;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb62;
    }

    bb24: {
        _10 = <str as PartialEq>::eq(_2, const "Sample") -> [return: bb48, unwind continue];
    }

    bb25: {
        _35 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field12;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _35);
        goto -> bb62;
    }

    bb26: {
        _9 = <str as PartialEq>::eq(_2, const "Search") -> [return: bb47, unwind continue];
    }

    bb27: {
        _36 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field13;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _36);
        goto -> bb62;
    }

    bb28: {
        _8 = <str as PartialEq>::eq(_2, const "Select") -> [return: bb46, unwind continue];
    }

    bb29: {
        _37 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field14;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _37);
        goto -> bb62;
    }

    bb30: {
        _7 = <str as PartialEq>::eq(_2, const "Slice") -> [return: bb45, unwind continue];
    }

    bb31: {
        _38 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field15;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _38);
        goto -> bb62;
    }

    bb32: {
        _6 = <str as PartialEq>::eq(_2, const "Sort") -> [return: bb44, unwind continue];
    }

    bb33: {
        _39 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field16;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _39);
        goto -> bb62;
    }

    bb34: {
        _5 = <str as PartialEq>::eq(_2, const "Split") -> [return: bb43, unwind continue];
    }

    bb35: {
        _40 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field17;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _40);
        goto -> bb62;
    }

    bb36: {
        _4 = <str as PartialEq>::eq(_2, const "Stats") -> [return: bb42, unwind continue];
    }

    bb37: {
        _41 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field18;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _41);
        goto -> bb62;
    }

    bb38: {
        _3 = <str as PartialEq>::eq(_2, const "Table") -> [return: bb41, unwind continue];
    }

    bb39: {
        _42 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field19;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _42);
        goto -> bb62;
    }

    bb40: {
        _43 = <__E as serde::de::Error>::unknown_variant(_2, const _) -> [return: bb61, unwind continue];
    }

    bb41: {
        switchInt(move _3) -> [0: bb40, otherwise: bb39];
    }

    bb42: {
        switchInt(move _4) -> [0: bb38, otherwise: bb37];
    }

    bb43: {
        switchInt(move _5) -> [0: bb36, otherwise: bb35];
    }

    bb44: {
        switchInt(move _6) -> [0: bb34, otherwise: bb33];
    }

    bb45: {
        switchInt(move _7) -> [0: bb32, otherwise: bb31];
    }

    bb46: {
        switchInt(move _8) -> [0: bb30, otherwise: bb29];
    }

    bb47: {
        switchInt(move _9) -> [0: bb28, otherwise: bb27];
    }

    bb48: {
        switchInt(move _10) -> [0: bb26, otherwise: bb25];
    }

    bb49: {
        switchInt(move _11) -> [0: bb24, otherwise: bb23];
    }

    bb50: {
        switchInt(move _12) -> [0: bb22, otherwise: bb21];
    }

    bb51: {
        switchInt(move _13) -> [0: bb20, otherwise: bb19];
    }

    bb52: {
        switchInt(move _14) -> [0: bb18, otherwise: bb17];
    }

    bb53: {
        switchInt(move _15) -> [0: bb16, otherwise: bb15];
    }

    bb54: {
        switchInt(move _16) -> [0: bb14, otherwise: bb13];
    }

    bb55: {
        switchInt(move _17) -> [0: bb12, otherwise: bb11];
    }

    bb56: {
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb57: {
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb58: {
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb59: {
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb60: {
        switchInt(move _22) -> [0: bb2, otherwise: bb1];
    }

    bb61: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Err(move _43);
        goto -> bb62;
    }

    bb62: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _25: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _26: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _27: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _28: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _29: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _30: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _31: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _32: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _33: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _34: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _35: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _36: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _37: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _38: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _39: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _40: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _41: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _42: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let mut _43: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field;
    let _44: &std::borrow::Cow<'_, str>;
    let _45: std::borrow::Cow<'_, str>;
    let mut _46: __E;
    let _47: &str;
    scope 1 {
        debug __value => _44;
    }

    bb0: {
        _21 = Len((*_2));
        _22 = const 3_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 3]) -> [67: bb2, 70: bb5, otherwise: bb4];
    }

    bb2: {
        switchInt((*_2)[1 of 3]) -> [97: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_2)[2 of 3]) -> [116: bb101, otherwise: bb4];
    }

    bb4: {
        _45 = from_utf8_lossy(_2) -> [return: bb121, unwind continue];
    }

    bb5: {
        switchInt((*_2)[1 of 3]) -> [109: bb6, otherwise: bb4];
    }

    bb6: {
        switchInt((*_2)[2 of 3]) -> [116: bb105, otherwise: bb4];
    }

    bb7: {
        _18 = Len((*_2));
        _19 = const 5_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb33, otherwise: bb8];
    }

    bb8: {
        switchInt((*_2)[0 of 5]) -> [67: bb9, 73: bb13, 83: bb19, 84: bb29, otherwise: bb4];
    }

    bb9: {
        switchInt((*_2)[1 of 5]) -> [111: bb10, otherwise: bb4];
    }

    bb10: {
        switchInt((*_2)[2 of 5]) -> [117: bb11, otherwise: bb4];
    }

    bb11: {
        switchInt((*_2)[3 of 5]) -> [110: bb12, otherwise: bb4];
    }

    bb12: {
        switchInt((*_2)[4 of 5]) -> [116: bb102, otherwise: bb4];
    }

    bb13: {
        switchInt((*_2)[1 of 5]) -> [110: bb14, otherwise: bb4];
    }

    bb14: {
        switchInt((*_2)[2 of 5]) -> [100: bb15, 112: bb17, otherwise: bb4];
    }

    bb15: {
        switchInt((*_2)[3 of 5]) -> [101: bb16, otherwise: bb4];
    }

    bb16: {
        switchInt((*_2)[4 of 5]) -> [120: bb109, otherwise: bb4];
    }

    bb17: {
        switchInt((*_2)[3 of 5]) -> [117: bb18, otherwise: bb4];
    }

    bb18: {
        switchInt((*_2)[4 of 5]) -> [116: bb110, otherwise: bb4];
    }

    bb19: {
        switchInt((*_2)[1 of 5]) -> [108: bb20, 112: bb23, 116: bb26, otherwise: bb4];
    }

    bb20: {
        switchInt((*_2)[2 of 5]) -> [105: bb21, otherwise: bb4];
    }

    bb21: {
        switchInt((*_2)[3 of 5]) -> [99: bb22, otherwise: bb4];
    }

    bb22: {
        switchInt((*_2)[4 of 5]) -> [101: bb116, otherwise: bb4];
    }

    bb23: {
        switchInt((*_2)[2 of 5]) -> [108: bb24, otherwise: bb4];
    }

    bb24: {
        switchInt((*_2)[3 of 5]) -> [105: bb25, otherwise: bb4];
    }

    bb25: {
        switchInt((*_2)[4 of 5]) -> [116: bb118, otherwise: bb4];
    }

    bb26: {
        switchInt((*_2)[2 of 5]) -> [97: bb27, otherwise: bb4];
    }

    bb27: {
        switchInt((*_2)[3 of 5]) -> [116: bb28, otherwise: bb4];
    }

    bb28: {
        switchInt((*_2)[4 of 5]) -> [115: bb119, otherwise: bb4];
    }

    bb29: {
        switchInt((*_2)[1 of 5]) -> [97: bb30, otherwise: bb4];
    }

    bb30: {
        switchInt((*_2)[2 of 5]) -> [98: bb31, otherwise: bb4];
    }

    bb31: {
        switchInt((*_2)[3 of 5]) -> [108: bb32, otherwise: bb4];
    }

    bb32: {
        switchInt((*_2)[4 of 5]) -> [101: bb120, otherwise: bb4];
    }

    bb33: {
        _15 = Len((*_2));
        _16 = const 10_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb44, otherwise: bb34];
    }

    bb34: {
        switchInt((*_2)[0 of 10]) -> [70: bb35, otherwise: bb4];
    }

    bb35: {
        switchInt((*_2)[1 of 10]) -> [105: bb36, otherwise: bb4];
    }

    bb36: {
        switchInt((*_2)[2 of 10]) -> [120: bb37, otherwise: bb4];
    }

    bb37: {
        switchInt((*_2)[3 of 10]) -> [76: bb38, otherwise: bb4];
    }

    bb38: {
        switchInt((*_2)[4 of 10]) -> [101: bb39, otherwise: bb4];
    }

    bb39: {
        switchInt((*_2)[5 of 10]) -> [110: bb40, otherwise: bb4];
    }

    bb40: {
        switchInt((*_2)[6 of 10]) -> [103: bb41, otherwise: bb4];
    }

    bb41: {
        switchInt((*_2)[7 of 10]) -> [116: bb42, otherwise: bb4];
    }

    bb42: {
        switchInt((*_2)[8 of 10]) -> [104: bb43, otherwise: bb4];
    }

    bb43: {
        switchInt((*_2)[9 of 10]) -> [115: bb103, otherwise: bb4];
    }

    bb44: {
        _12 = Len((*_2));
        _13 = const 7_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb58, otherwise: bb45];
    }

    bb45: {
        switchInt((*_2)[0 of 7]) -> [70: bb46, 72: bb52, otherwise: bb4];
    }

    bb46: {
        switchInt((*_2)[1 of 7]) -> [108: bb47, otherwise: bb4];
    }

    bb47: {
        switchInt((*_2)[2 of 7]) -> [97: bb48, otherwise: bb4];
    }

    bb48: {
        switchInt((*_2)[3 of 7]) -> [116: bb49, otherwise: bb4];
    }

    bb49: {
        switchInt((*_2)[4 of 7]) -> [116: bb50, otherwise: bb4];
    }

    bb50: {
        switchInt((*_2)[5 of 7]) -> [101: bb51, otherwise: bb4];
    }

    bb51: {
        switchInt((*_2)[6 of 7]) -> [110: bb104, otherwise: bb4];
    }

    bb52: {
        switchInt((*_2)[1 of 7]) -> [101: bb53, otherwise: bb4];
    }

    bb53: {
        switchInt((*_2)[2 of 7]) -> [97: bb54, otherwise: bb4];
    }

    bb54: {
        switchInt((*_2)[3 of 7]) -> [100: bb55, otherwise: bb4];
    }

    bb55: {
        switchInt((*_2)[4 of 7]) -> [101: bb56, otherwise: bb4];
    }

    bb56: {
        switchInt((*_2)[5 of 7]) -> [114: bb57, otherwise: bb4];
    }

    bb57: {
        switchInt((*_2)[6 of 7]) -> [115: bb107, otherwise: bb4];
    }

    bb58: {
        _9 = Len((*_2));
        _10 = const 9_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb76, otherwise: bb59];
    }

    bb59: {
        switchInt((*_2)[0 of 9]) -> [70: bb60, 80: bb68, otherwise: bb4];
    }

    bb60: {
        switchInt((*_2)[1 of 9]) -> [114: bb61, otherwise: bb4];
    }

    bb61: {
        switchInt((*_2)[2 of 9]) -> [101: bb62, otherwise: bb4];
    }

    bb62: {
        switchInt((*_2)[3 of 9]) -> [113: bb63, otherwise: bb4];
    }

    bb63: {
        switchInt((*_2)[4 of 9]) -> [117: bb64, otherwise: bb4];
    }

    bb64: {
        switchInt((*_2)[5 of 9]) -> [101: bb65, otherwise: bb4];
    }

    bb65: {
        switchInt((*_2)[6 of 9]) -> [110: bb66, otherwise: bb4];
    }

    bb66: {
        switchInt((*_2)[7 of 9]) -> [99: bb67, otherwise: bb4];
    }

    bb67: {
        switchInt((*_2)[8 of 9]) -> [121: bb106, otherwise: bb4];
    }

    bb68: {
        switchInt((*_2)[1 of 9]) -> [97: bb69, otherwise: bb4];
    }

    bb69: {
        switchInt((*_2)[2 of 9]) -> [114: bb70, otherwise: bb4];
    }

    bb70: {
        switchInt((*_2)[3 of 9]) -> [116: bb71, otherwise: bb4];
    }

    bb71: {
        switchInt((*_2)[4 of 9]) -> [105: bb72, otherwise: bb4];
    }

    bb72: {
        switchInt((*_2)[5 of 9]) -> [116: bb73, otherwise: bb4];
    }

    bb73: {
        switchInt((*_2)[6 of 9]) -> [105: bb74, otherwise: bb4];
    }

    bb74: {
        switchInt((*_2)[7 of 9]) -> [111: bb75, otherwise: bb4];
    }

    bb75: {
        switchInt((*_2)[8 of 9]) -> [110: bb112, otherwise: bb4];
    }

    bb76: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb87, otherwise: bb77];
    }

    bb77: {
        switchInt((*_2)[0 of 4]) -> [72: bb78, 74: bb81, 83: bb84, otherwise: bb4];
    }

    bb78: {
        switchInt((*_2)[1 of 4]) -> [101: bb79, otherwise: bb4];
    }

    bb79: {
        switchInt((*_2)[2 of 4]) -> [108: bb80, otherwise: bb4];
    }

    bb80: {
        switchInt((*_2)[3 of 4]) -> [112: bb108, otherwise: bb4];
    }

    bb81: {
        switchInt((*_2)[1 of 4]) -> [111: bb82, otherwise: bb4];
    }

    bb82: {
        switchInt((*_2)[2 of 4]) -> [105: bb83, otherwise: bb4];
    }

    bb83: {
        switchInt((*_2)[3 of 4]) -> [110: bb111, otherwise: bb4];
    }

    bb84: {
        switchInt((*_2)[1 of 4]) -> [111: bb85, otherwise: bb4];
    }

    bb85: {
        switchInt((*_2)[2 of 4]) -> [114: bb86, otherwise: bb4];
    }

    bb86: {
        switchInt((*_2)[3 of 4]) -> [116: bb117, otherwise: bb4];
    }

    bb87: {
        _3 = Len((*_2));
        _4 = const 6_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb4, otherwise: bb88];
    }

    bb88: {
        switchInt((*_2)[0 of 6]) -> [83: bb89, otherwise: bb4];
    }

    bb89: {
        switchInt((*_2)[1 of 6]) -> [97: bb90, 101: bb94, otherwise: bb4];
    }

    bb90: {
        switchInt((*_2)[2 of 6]) -> [109: bb91, otherwise: bb4];
    }

    bb91: {
        switchInt((*_2)[3 of 6]) -> [112: bb92, otherwise: bb4];
    }

    bb92: {
        switchInt((*_2)[4 of 6]) -> [108: bb93, otherwise: bb4];
    }

    bb93: {
        switchInt((*_2)[5 of 6]) -> [101: bb113, otherwise: bb4];
    }

    bb94: {
        switchInt((*_2)[2 of 6]) -> [97: bb95, 108: bb98, otherwise: bb4];
    }

    bb95: {
        switchInt((*_2)[3 of 6]) -> [114: bb96, otherwise: bb4];
    }

    bb96: {
        switchInt((*_2)[4 of 6]) -> [99: bb97, otherwise: bb4];
    }

    bb97: {
        switchInt((*_2)[5 of 6]) -> [104: bb114, otherwise: bb4];
    }

    bb98: {
        switchInt((*_2)[3 of 6]) -> [101: bb99, otherwise: bb4];
    }

    bb99: {
        switchInt((*_2)[4 of 6]) -> [99: bb100, otherwise: bb4];
    }

    bb100: {
        switchInt((*_2)[5 of 6]) -> [116: bb115, otherwise: bb4];
    }

    bb101: {
        _24 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb124;
    }

    bb102: {
        _25 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb124;
    }

    bb103: {
        _26 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb124;
    }

    bb104: {
        _27 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb124;
    }

    bb105: {
        _28 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb124;
    }

    bb106: {
        _29 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb124;
    }

    bb107: {
        _30 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb124;
    }

    bb108: {
        _31 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb124;
    }

    bb109: {
        _32 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb124;
    }

    bb110: {
        _33 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field9;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb124;
    }

    bb111: {
        _34 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field10;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb124;
    }

    bb112: {
        _35 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field11;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _35);
        goto -> bb124;
    }

    bb113: {
        _36 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field12;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _36);
        goto -> bb124;
    }

    bb114: {
        _37 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field13;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _37);
        goto -> bb124;
    }

    bb115: {
        _38 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field14;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _38);
        goto -> bb124;
    }

    bb116: {
        _39 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field15;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _39);
        goto -> bb124;
    }

    bb117: {
        _40 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field16;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _40);
        goto -> bb124;
    }

    bb118: {
        _41 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field17;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _41);
        goto -> bb124;
    }

    bb119: {
        _42 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field18;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _42);
        goto -> bb124;
    }

    bb120: {
        _43 = _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field::__field19;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Ok(move _43);
        goto -> bb124;
    }

    bb121: {
        _44 = &_45;
        _47 = <Cow<'_, str> as Deref>::deref(_44) -> [return: bb122, unwind: bb125];
    }

    bb122: {
        _46 = <__E as serde::de::Error>::unknown_variant(_47, const _) -> [return: bb123, unwind: bb125];
    }

    bb123: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, __E>::Err(move _46);
        drop(_45) -> [return: bb124, unwind continue];
    }

    bb124: {
        return;
    }

    bb125 (cleanup): {
        drop(_45) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        resume;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, <__D as serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum Command";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Command::<impl at src/main.rs:138:17: 138:28>::deserialize::<impl at src/main.rs:138:17: 138:28>::visit_enum(_1: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Visitor<'_>, _2: __A) -> Result<Command, <__A as EnumAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Command>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<Command, <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, <__A as serde::de::EnumAccess<'_>>::Variant), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, <__A as serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: Command;
    let _13: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: Command;
    let _18: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: Command;
    let _23: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _24: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _25: isize;
    let mut _27: Command;
    let _28: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _29: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _30: isize;
    let mut _32: Command;
    let _33: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _34: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _35: isize;
    let mut _37: Command;
    let _38: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _39: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _40: isize;
    let mut _42: Command;
    let _43: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _44: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _45: isize;
    let mut _47: Command;
    let _48: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _49: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _50: isize;
    let mut _52: Command;
    let _53: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _54: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _55: isize;
    let mut _57: Command;
    let _58: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _59: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _60: isize;
    let mut _62: Command;
    let _63: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _64: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _65: isize;
    let mut _67: Command;
    let _68: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _69: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _70: isize;
    let mut _72: Command;
    let _73: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _74: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _75: isize;
    let mut _77: Command;
    let _78: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _79: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _82: Command;
    let _83: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _84: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _85: isize;
    let mut _87: Command;
    let _88: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _89: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _90: isize;
    let mut _92: Command;
    let _93: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _94: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _95: isize;
    let mut _97: Command;
    let _98: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _99: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _100: isize;
    let mut _102: Command;
    let _103: <__A as serde::de::EnumAccess<'_>>::Variant;
    let mut _104: std::result::Result<(), <__A as serde::de::EnumAccess<'_>>::Error>;
    let mut _105: isize;
    let mut _107: Command;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }
    scope 12 {
        debug __variant => _23;
        let _26: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 13 {
            debug __val => const ();
        }
        scope 14 {
            debug __err => _26;
        }
    }
    scope 15 {
        debug __variant => _28;
        let _31: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 16 {
            debug __val => const ();
        }
        scope 17 {
            debug __err => _31;
        }
    }
    scope 18 {
        debug __variant => _33;
        let _36: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 19 {
            debug __val => const ();
        }
        scope 20 {
            debug __err => _36;
        }
    }
    scope 21 {
        debug __variant => _38;
        let _41: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 22 {
            debug __val => const ();
        }
        scope 23 {
            debug __err => _41;
        }
    }
    scope 24 {
        debug __variant => _43;
        let _46: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 25 {
            debug __val => const ();
        }
        scope 26 {
            debug __err => _46;
        }
    }
    scope 27 {
        debug __variant => _48;
        let _51: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 28 {
            debug __val => const ();
        }
        scope 29 {
            debug __err => _51;
        }
    }
    scope 30 {
        debug __variant => _53;
        let _56: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 31 {
            debug __val => const ();
        }
        scope 32 {
            debug __err => _56;
        }
    }
    scope 33 {
        debug __variant => _58;
        let _61: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 34 {
            debug __val => const ();
        }
        scope 35 {
            debug __err => _61;
        }
    }
    scope 36 {
        debug __variant => _63;
        let _66: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 37 {
            debug __val => const ();
        }
        scope 38 {
            debug __err => _66;
        }
    }
    scope 39 {
        debug __variant => _68;
        let _71: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 40 {
            debug __val => const ();
        }
        scope 41 {
            debug __err => _71;
        }
    }
    scope 42 {
        debug __variant => _73;
        let _76: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 43 {
            debug __val => const ();
        }
        scope 44 {
            debug __err => _76;
        }
    }
    scope 45 {
        debug __variant => _78;
        let _81: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 46 {
            debug __val => const ();
        }
        scope 47 {
            debug __err => _81;
        }
    }
    scope 48 {
        debug __variant => _83;
        let _86: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 49 {
            debug __val => const ();
        }
        scope 50 {
            debug __err => _86;
        }
    }
    scope 51 {
        debug __variant => _88;
        let _91: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 52 {
            debug __val => const ();
        }
        scope 53 {
            debug __err => _91;
        }
    }
    scope 54 {
        debug __variant => _93;
        let _96: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 55 {
            debug __val => const ();
        }
        scope 56 {
            debug __err => _96;
        }
    }
    scope 57 {
        debug __variant => _98;
        let _101: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 58 {
            debug __val => const ();
        }
        scope 59 {
            debug __err => _101;
        }
    }
    scope 60 {
        debug __variant => _103;
        let _106: <__A as serde::de::EnumAccess<'_>>::Error;
        scope 61 {
            debug __val => const ();
        }
        scope 62 {
            debug __err => _106;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb85;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (_IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field, <__A as serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: _IMPL_DESERIALIZE_FOR_Command::<impl serde::Deserialize<'de> for Command>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb14, 3: bb18, 4: bb22, 5: bb26, 6: bb30, 7: bb34, 8: bb38, 9: bb42, 10: bb46, 11: bb50, 12: bb54, 13: bb58, 14: bb62, 15: bb66, 16: bb70, 17: bb74, 18: bb78, 19: bb5, otherwise: bb3];
    }

    bb5: {
        _103 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _104 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _103) -> [return: bb82, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb85;
    }

    bb9: {
        _12 = Command::Cat;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb85;
    }

    bb10: {
        _13 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb85;
    }

    bb13: {
        _17 = Command::Count;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb85;
    }

    bb14: {
        _18 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb17, 1: bb16, otherwise: bb3];
    }

    bb16: {
        _21 = move ((_19 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb85;
    }

    bb17: {
        _22 = Command::FixLengths;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb85;
    }

    bb18: {
        _23 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb21, 1: bb20, otherwise: bb3];
    }

    bb20: {
        _26 = move ((_24 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _26);
        goto -> bb85;
    }

    bb21: {
        _27 = Command::Flatten;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _27);
        goto -> bb85;
    }

    bb22: {
        _28 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _29 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _28) -> [return: bb23, unwind continue];
    }

    bb23: {
        _30 = discriminant(_29);
        switchInt(move _30) -> [0: bb25, 1: bb24, otherwise: bb3];
    }

    bb24: {
        _31 = move ((_29 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _31);
        goto -> bb85;
    }

    bb25: {
        _32 = Command::Fmt;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _32);
        goto -> bb85;
    }

    bb26: {
        _33 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _34 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _33) -> [return: bb27, unwind continue];
    }

    bb27: {
        _35 = discriminant(_34);
        switchInt(move _35) -> [0: bb29, 1: bb28, otherwise: bb3];
    }

    bb28: {
        _36 = move ((_34 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _36);
        goto -> bb85;
    }

    bb29: {
        _37 = Command::Frequency;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _37);
        goto -> bb85;
    }

    bb30: {
        _38 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _39 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _38) -> [return: bb31, unwind continue];
    }

    bb31: {
        _40 = discriminant(_39);
        switchInt(move _40) -> [0: bb33, 1: bb32, otherwise: bb3];
    }

    bb32: {
        _41 = move ((_39 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _41);
        goto -> bb85;
    }

    bb33: {
        _42 = Command::Headers;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _42);
        goto -> bb85;
    }

    bb34: {
        _43 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _44 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _43) -> [return: bb35, unwind continue];
    }

    bb35: {
        _45 = discriminant(_44);
        switchInt(move _45) -> [0: bb37, 1: bb36, otherwise: bb3];
    }

    bb36: {
        _46 = move ((_44 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _46);
        goto -> bb85;
    }

    bb37: {
        _47 = Command::Help;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _47);
        goto -> bb85;
    }

    bb38: {
        _48 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _49 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _48) -> [return: bb39, unwind continue];
    }

    bb39: {
        _50 = discriminant(_49);
        switchInt(move _50) -> [0: bb41, 1: bb40, otherwise: bb3];
    }

    bb40: {
        _51 = move ((_49 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _51);
        goto -> bb85;
    }

    bb41: {
        _52 = Command::Index;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _52);
        goto -> bb85;
    }

    bb42: {
        _53 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _54 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _53) -> [return: bb43, unwind continue];
    }

    bb43: {
        _55 = discriminant(_54);
        switchInt(move _55) -> [0: bb45, 1: bb44, otherwise: bb3];
    }

    bb44: {
        _56 = move ((_54 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _56);
        goto -> bb85;
    }

    bb45: {
        _57 = Command::Input;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _57);
        goto -> bb85;
    }

    bb46: {
        _58 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _59 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _58) -> [return: bb47, unwind continue];
    }

    bb47: {
        _60 = discriminant(_59);
        switchInt(move _60) -> [0: bb49, 1: bb48, otherwise: bb3];
    }

    bb48: {
        _61 = move ((_59 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _61);
        goto -> bb85;
    }

    bb49: {
        _62 = Command::Join;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _62);
        goto -> bb85;
    }

    bb50: {
        _63 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _64 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _63) -> [return: bb51, unwind continue];
    }

    bb51: {
        _65 = discriminant(_64);
        switchInt(move _65) -> [0: bb53, 1: bb52, otherwise: bb3];
    }

    bb52: {
        _66 = move ((_64 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _66);
        goto -> bb85;
    }

    bb53: {
        _67 = Command::Partition;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _67);
        goto -> bb85;
    }

    bb54: {
        _68 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _69 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _68) -> [return: bb55, unwind continue];
    }

    bb55: {
        _70 = discriminant(_69);
        switchInt(move _70) -> [0: bb57, 1: bb56, otherwise: bb3];
    }

    bb56: {
        _71 = move ((_69 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _71);
        goto -> bb85;
    }

    bb57: {
        _72 = Command::Sample;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _72);
        goto -> bb85;
    }

    bb58: {
        _73 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _74 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _73) -> [return: bb59, unwind continue];
    }

    bb59: {
        _75 = discriminant(_74);
        switchInt(move _75) -> [0: bb61, 1: bb60, otherwise: bb3];
    }

    bb60: {
        _76 = move ((_74 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _76);
        goto -> bb85;
    }

    bb61: {
        _77 = Command::Search;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _77);
        goto -> bb85;
    }

    bb62: {
        _78 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _79 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _78) -> [return: bb63, unwind continue];
    }

    bb63: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb65, 1: bb64, otherwise: bb3];
    }

    bb64: {
        _81 = move ((_79 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _81);
        goto -> bb85;
    }

    bb65: {
        _82 = Command::Select;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _82);
        goto -> bb85;
    }

    bb66: {
        _83 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _84 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _83) -> [return: bb67, unwind continue];
    }

    bb67: {
        _85 = discriminant(_84);
        switchInt(move _85) -> [0: bb69, 1: bb68, otherwise: bb3];
    }

    bb68: {
        _86 = move ((_84 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _86);
        goto -> bb85;
    }

    bb69: {
        _87 = Command::Slice;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _87);
        goto -> bb85;
    }

    bb70: {
        _88 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _89 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _88) -> [return: bb71, unwind continue];
    }

    bb71: {
        _90 = discriminant(_89);
        switchInt(move _90) -> [0: bb73, 1: bb72, otherwise: bb3];
    }

    bb72: {
        _91 = move ((_89 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _91);
        goto -> bb85;
    }

    bb73: {
        _92 = Command::Sort;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _92);
        goto -> bb85;
    }

    bb74: {
        _93 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _94 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _93) -> [return: bb75, unwind continue];
    }

    bb75: {
        _95 = discriminant(_94);
        switchInt(move _95) -> [0: bb77, 1: bb76, otherwise: bb3];
    }

    bb76: {
        _96 = move ((_94 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _96);
        goto -> bb85;
    }

    bb77: {
        _97 = Command::Split;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _97);
        goto -> bb85;
    }

    bb78: {
        _98 = move (_5.1: <__A as serde::de::EnumAccess<'_>>::Variant);
        _99 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _98) -> [return: bb79, unwind continue];
    }

    bb79: {
        _100 = discriminant(_99);
        switchInt(move _100) -> [0: bb81, 1: bb80, otherwise: bb3];
    }

    bb80: {
        _101 = move ((_99 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _101);
        goto -> bb85;
    }

    bb81: {
        _102 = Command::Stats;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _102);
        goto -> bb85;
    }

    bb82: {
        _105 = discriminant(_104);
        switchInt(move _105) -> [0: bb84, 1: bb83, otherwise: bb3];
    }

    bb83: {
        _106 = move ((_104 as Err).0: <__A as serde::de::EnumAccess<'_>>::Error);
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Err(move _106);
        goto -> bb85;
    }

    bb84: {
        _107 = Command::Table;
        _0 = Result::<Command, <__A as EnumAccess<'_>>::Error>::Ok(move _107);
        goto -> bb85;
    }

    bb85: {
        return;
    }
}

const VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 20];
    let _2: &[&str; 20];
    let _3: [&str; 20];
    let mut _4: &[&str; 20];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in VARIANTS: &[&str; 20] = {
    let mut _0: &[&str; 20];
    let mut _1: [&str; 20];

    bb0: {
        _1 = [const "Cat", const "Count", const "FixLengths", const "Flatten", const "Fmt", const "Frequency", const "Headers", const "Help", const "Index", const "Input", const "Join", const "Partition", const "Sample", const "Search", const "Select", const "Slice", const "Sort", const "Split", const "Stats", const "Table"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:162:1: 162:13>::run(_1: Command) -> Result<(), CliError> {
    debug self => _1;
    let mut _0: std::result::Result<(), CliError>;
    let _2: std::vec::Vec<std::string::String>;
    let mut _3: std::iter::Map<std::env::Args, {closure@src/main.rs:164:44: 164:47}>;
    let mut _4: std::env::Args;
    let mut _6: std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/main.rs:165:44: 165:47}>;
    let mut _7: std::slice::Iter<'_, std::string::String>;
    let _8: &[std::string::String];
    let mut _9: &std::vec::Vec<std::string::String>;
    let _10: &[&str];
    let mut _11: &std::vec::Vec<&str>;
    let mut _12: isize;
    let _13: ();
    let mut _14: std::result::Result<(), std::io::Error>;
    let mut _15: &mut std::io::Stdout;
    let mut _16: std::io::Stdout;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &&str;
    scope 1 {
        debug argv => _2;
        let _5: std::vec::Vec<&str>;
        scope 2 {
            debug argv => _5;
            scope 3 {
                debug argv => _10;
                let mut _24: &[&str; 2];
            }
        }
    }

    bb0: {
        _4 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::env::Args as Iterator>::map::<std::string::String, {closure@src/main.rs:164:44: 164:47}>(move _4, const ZeroSized: {closure@src/main.rs:164:44: 164:47}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <std::iter::Map<std::env::Args, {closure@src/main.rs:164:44: 164:47}> as Iterator>::collect::<Vec<std::string::String>>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_2;
        _8 = <Vec<std::string::String> as Deref>::deref(move _9) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _7 = core::slice::<impl [std::string::String]>::iter(_8) -> [return: bb5, unwind: bb39];
    }

    bb5: {
        _6 = <std::slice::Iter<'_, std::string::String> as Iterator>::map::<&str, {closure@src/main.rs:165:44: 165:47}>(move _7, const ZeroSized: {closure@src/main.rs:165:44: 165:47}) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        _5 = <std::iter::Map<std::slice::Iter<'_, std::string::String>, {closure@src/main.rs:165:44: 165:47}> as Iterator>::collect::<Vec<&str>>(move _6) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        _11 = &_5;
        _10 = <Vec<&str> as Deref>::deref(move _11) -> [return: bb8, unwind: bb38];
    }

    bb8: {
        _12 = discriminant(_1);
        switchInt(move _12) -> [0: bb11, 1: bb12, 2: bb13, 3: bb14, 4: bb15, 5: bb16, 6: bb17, 7: bb18, 8: bb24, 9: bb25, 10: bb26, 11: bb27, 12: bb28, 13: bb29, 14: bb30, 15: bb31, 16: bb32, 17: bb33, 18: bb34, 19: bb9, otherwise: bb10];
    }

    bb9: {
        _0 = table::run(_10) -> [return: bb41, unwind: bb38];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _0 = cat::run(_10) -> [return: bb42, unwind: bb38];
    }

    bb12: {
        _0 = count::run(_10) -> [return: bb43, unwind: bb38];
    }

    bb13: {
        _0 = fixlengths::run(_10) -> [return: bb44, unwind: bb38];
    }

    bb14: {
        _0 = flatten::run(_10) -> [return: bb45, unwind: bb38];
    }

    bb15: {
        _0 = cmd::fmt::run(_10) -> [return: bb46, unwind: bb38];
    }

    bb16: {
        _0 = frequency::run(_10) -> [return: bb47, unwind: bb38];
    }

    bb17: {
        _0 = headers::run(_10) -> [return: bb48, unwind: bb38];
    }

    bb18: {
        _16 = stdout() -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _15 = &mut _16;
        _24 = const _;
        _18 = _24 as &[&str] (PointerCoercion(Unsize));
        _23 = const {alloc34: &&str};
        _22 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_23) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _14 = <Stdout as std::io::Write>::write_fmt(_15, move _17) -> [return: bb22, unwind: bb38];
    }

    bb22: {
        _13 = Result::<(), std::io::Error>::unwrap(move _14) -> [return: bb23, unwind: bb38];
    }

    bb23: {
        _0 = Result::<(), CliError>::Ok(const ());
        goto -> bb35;
    }

    bb24: {
        _0 = cmd::index::run(_10) -> [return: bb49, unwind: bb38];
    }

    bb25: {
        _0 = input::run(_10) -> [return: bb50, unwind: bb38];
    }

    bb26: {
        _0 = join::run(_10) -> [return: bb51, unwind: bb38];
    }

    bb27: {
        _0 = partition::run(_10) -> [return: bb52, unwind: bb38];
    }

    bb28: {
        _0 = sample::run(_10) -> [return: bb53, unwind: bb38];
    }

    bb29: {
        _0 = search::run(_10) -> [return: bb54, unwind: bb38];
    }

    bb30: {
        _0 = cmd::select::run(_10) -> [return: bb55, unwind: bb38];
    }

    bb31: {
        _0 = cmd::slice::run(_10) -> [return: bb56, unwind: bb38];
    }

    bb32: {
        _0 = sort::run(_10) -> [return: bb57, unwind: bb38];
    }

    bb33: {
        _0 = split::run(_10) -> [return: bb58, unwind: bb38];
    }

    bb34: {
        _0 = cmd::stats::run(_10) -> [return: bb59, unwind: bb38];
    }

    bb35: {
        drop(_5) -> [return: bb36, unwind: bb39];
    }

    bb36: {
        drop(_2) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_5) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41: {
        goto -> bb35;
    }

    bb42: {
        goto -> bb35;
    }

    bb43: {
        goto -> bb35;
    }

    bb44: {
        goto -> bb35;
    }

    bb45: {
        goto -> bb35;
    }

    bb46: {
        goto -> bb35;
    }

    bb47: {
        goto -> bb35;
    }

    bb48: {
        goto -> bb35;
    }

    bb49: {
        goto -> bb35;
    }

    bb50: {
        goto -> bb35;
    }

    bb51: {
        goto -> bb35;
    }

    bb52: {
        goto -> bb35;
    }

    bb53: {
        goto -> bb35;
    }

    bb54: {
        goto -> bb35;
    }

    bb55: {
        goto -> bb35;
    }

    bb56: {
        goto -> bb35;
    }

    bb57: {
        goto -> bb35;
    }

    bb58: {
        goto -> bb35;
    }

    bb59: {
        goto -> bb35;
    }
}

alloc34 (static: USAGE, size: 16, align: 8) {
    ╾───alloc2497<imm>────╼ 28 04 00 00 00 00 00 00 │ ╾──────╼(.......
}

alloc2497 (size: 1064, align: 1) {
    0x000 │ 0a 55 73 61 67 65 3a 0a 20 20 20 20 78 73 76 20 │ .Usage:.    xsv 
    0x010 │ 3c 63 6f 6d 6d 61 6e 64 3e 20 5b 3c 61 72 67 73 │ <command> [<args
    0x020 │ 3e 2e 2e 2e 5d 0a 20 20 20 20 78 73 76 20 5b 6f │ >...].    xsv [o
    0x030 │ 70 74 69 6f 6e 73 5d 0a 0a 4f 70 74 69 6f 6e 73 │ ptions]..Options
    0x040 │ 3a 0a 20 20 20 20 2d 2d 6c 69 73 74 20 20 20 20 │ :.    --list    
    0x050 │ 20 20 20 20 4c 69 73 74 20 61 6c 6c 20 63 6f 6d │     List all com
    0x060 │ 6d 61 6e 64 73 20 61 76 61 69 6c 61 62 6c 65 2e │ mands available.
    0x070 │ 0a 20 20 20 20 2d 68 2c 20 2d 2d 68 65 6c 70 20 │ .    -h, --help 
    0x080 │ 20 20 20 44 69 73 70 6c 61 79 20 74 68 69 73 20 │    Display this 
    0x090 │ 6d 65 73 73 61 67 65 0a 20 20 20 20 3c 63 6f 6d │ message.    <com
    0x0a0 │ 6d 61 6e 64 3e 20 2d 68 20 20 44 69 73 70 6c 61 │ mand> -h  Displa
    0x0b0 │ 79 20 74 68 65 20 63 6f 6d 6d 61 6e 64 20 68 65 │ y the command he
    0x0c0 │ 6c 70 20 6d 65 73 73 61 67 65 0a 20 20 20 20 2d │ lp message.    -
    0x0d0 │ 2d 76 65 72 73 69 6f 6e 20 20 20 20 20 50 72 69 │ -version     Pri
    0x0e0 │ 6e 74 20 76 65 72 73 69 6f 6e 20 69 6e 66 6f 20 │ nt version info 
    0x0f0 │ 61 6e 64 20 65 78 69 74 0a 0a 43 6f 6d 6d 61 6e │ and exit..Comman
    0x100 │ 64 73 3a 0a 20 20 20 20 63 61 74 20 20 20 20 20 │ ds:.    cat     
    0x110 │ 20 20 20 20 43 6f 6e 63 61 74 65 6e 61 74 65 20 │     Concatenate 
    0x120 │ 62 79 20 72 6f 77 20 6f 72 20 63 6f 6c 75 6d 6e │ by row or column
    0x130 │ 0a 20 20 20 20 63 6f 75 6e 74 20 20 20 20 20 20 │ .    count      
    0x140 │ 20 43 6f 75 6e 74 20 72 65 63 6f 72 64 73 0a 20 │  Count records. 
    0x150 │ 20 20 20 66 69 78 6c 65 6e 67 74 68 73 20 20 4d │    fixlengths  M
    0x160 │ 61 6b 65 73 20 61 6c 6c 20 72 65 63 6f 72 64 73 │ akes all records
    0x170 │ 20 68 61 76 65 20 73 61 6d 65 20 6c 65 6e 67 74 │  have same lengt
    0x180 │ 68 0a 20 20 20 20 66 6c 61 74 74 65 6e 20 20 20 │ h.    flatten   
    0x190 │ 20 20 53 68 6f 77 20 6f 6e 65 20 66 69 65 6c 64 │   Show one field
    0x1a0 │ 20 70 65 72 20 6c 69 6e 65 0a 20 20 20 20 66 6d │  per line.    fm
    0x1b0 │ 74 20 20 20 20 20 20 20 20 20 46 6f 72 6d 61 74 │ t         Format
    0x1c0 │ 20 43 53 56 20 6f 75 74 70 75 74 20 28 63 68 61 │  CSV output (cha
    0x1d0 │ 6e 67 65 20 66 69 65 6c 64 20 64 65 6c 69 6d 69 │ nge field delimi
    0x1e0 │ 74 65 72 29 0a 20 20 20 20 66 72 65 71 75 65 6e │ ter).    frequen
    0x1f0 │ 63 79 20 20 20 53 68 6f 77 20 66 72 65 71 75 65 │ cy   Show freque
    0x200 │ 6e 63 79 20 74 61 62 6c 65 73 0a 20 20 20 20 68 │ ncy tables.    h
    0x210 │ 65 61 64 65 72 73 20 20 20 20 20 53 68 6f 77 20 │ eaders     Show 
    0x220 │ 68 65 61 64 65 72 20 6e 61 6d 65 73 0a 20 20 20 │ header names.   
    0x230 │ 20 68 65 6c 70 20 20 20 20 20 20 20 20 53 68 6f │  help        Sho
    0x240 │ 77 20 74 68 69 73 20 75 73 61 67 65 20 6d 65 73 │ w this usage mes
    0x250 │ 73 61 67 65 2e 0a 20 20 20 20 69 6e 64 65 78 20 │ sage..    index 
    0x260 │ 20 20 20 20 20 20 43 72 65 61 74 65 20 43 53 56 │       Create CSV
    0x270 │ 20 69 6e 64 65 78 20 66 6f 72 20 66 61 73 74 65 │  index for faste
    0x280 │ 72 20 61 63 63 65 73 73 0a 20 20 20 20 69 6e 70 │ r access.    inp
    0x290 │ 75 74 20 20 20 20 20 20 20 52 65 61 64 20 43 53 │ ut       Read CS
    0x2a0 │ 56 20 64 61 74 61 20 77 69 74 68 20 73 70 65 63 │ V data with spec
    0x2b0 │ 69 61 6c 20 71 75 6f 74 69 6e 67 20 72 75 6c 65 │ ial quoting rule
    0x2c0 │ 73 0a 20 20 20 20 6a 6f 69 6e 20 20 20 20 20 20 │ s.    join      
    0x2d0 │ 20 20 4a 6f 69 6e 20 43 53 56 20 66 69 6c 65 73 │   Join CSV files
    0x2e0 │ 0a 20 20 20 20 73 61 6d 70 6c 65 20 20 20 20 20 │ .    sample     
    0x2f0 │ 20 52 61 6e 64 6f 6d 6c 79 20 73 61 6d 70 6c 65 │  Randomly sample
    0x300 │ 20 43 53 56 20 64 61 74 61 0a 20 20 20 20 73 65 │  CSV data.    se
    0x310 │ 61 72 63 68 20 20 20 20 20 20 53 65 61 72 63 68 │ arch      Search
    0x320 │ 20 43 53 56 20 64 61 74 61 20 77 69 74 68 20 72 │  CSV data with r
    0x330 │ 65 67 65 78 65 73 0a 20 20 20 20 73 65 6c 65 63 │ egexes.    selec
    0x340 │ 74 20 20 20 20 20 20 53 65 6c 65 63 74 20 63 6f │ t      Select co
    0x350 │ 6c 75 6d 6e 73 20 66 72 6f 6d 20 43 53 56 0a 20 │ lumns from CSV. 
    0x360 │ 20 20 20 73 6c 69 63 65 20 20 20 20 20 20 20 53 │    slice       S
    0x370 │ 6c 69 63 65 20 72 65 63 6f 72 64 73 20 66 72 6f │ lice records fro
    0x380 │ 6d 20 43 53 56 0a 20 20 20 20 73 6f 72 74 20 20 │ m CSV.    sort  
    0x390 │ 20 20 20 20 20 20 53 6f 72 74 20 43 53 56 20 64 │       Sort CSV d
    0x3a0 │ 61 74 61 0a 20 20 20 20 73 70 6c 69 74 20 20 20 │ ata.    split   
    0x3b0 │ 20 20 20 20 53 70 6c 69 74 20 43 53 56 20 64 61 │     Split CSV da
    0x3c0 │ 74 61 20 69 6e 74 6f 20 6d 61 6e 79 20 66 69 6c │ ta into many fil
    0x3d0 │ 65 73 0a 20 20 20 20 73 74 61 74 73 20 20 20 20 │ es.    stats    
    0x3e0 │ 20 20 20 43 6f 6d 70 75 74 65 20 62 61 73 69 63 │    Compute basic
    0x3f0 │ 20 73 74 61 74 69 73 74 69 63 73 0a 20 20 20 20 │  statistics.    
    0x400 │ 74 61 62 6c 65 20 20 20 20 20 20 20 41 6c 69 67 │ table       Alig
    0x410 │ 6e 20 43 53 56 20 64 61 74 61 20 69 6e 74 6f 20 │ n CSV data into 
    0x420 │ 63 6f 6c 75 6d 6e 73 0a                         │ columns.
}

promoted[0] in <impl at src/main.rs:162:1: 162:13>::run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:162:1: 162:13>::run::{closure#0}(_1: &mut {closure@src/main.rs:164:44: 164:47}, _2: std::string::String) -> std::string::String {
    debug v => _2;
    let mut _0: std::string::String;
    let mut _3: &std::string::String;

    bb0: {
        _3 = &_2;
        _0 = <std::string::String as ToOwned>::to_owned(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at src/main.rs:162:1: 162:13>::run::{closure#1}(_1: &mut {closure@src/main.rs:165:44: 165:47}, _2: &std::string::String) -> &str {
    debug s => _2;
    let mut _0: &str;

    bb0: {
        _0 = <std::string::String as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:194:10: 194:15>::fmt(_1: &CliError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &docopt::Error;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&docopt::Error;
    let _8: &csv::Error;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&csv::Error;
    let _12: &std::io::Error;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::io::Error;
    let _16: &std::string::String;
    let _17: &str;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&std::string::String;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }
    scope 4 {
        debug __self_0 => _16;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _16 = &(((*_1) as Other).0: std::string::String);
        _17 = const "Other";
        _19 = &_16;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _17, move _18) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Flag).0: docopt::Error);
        _5 = const "Flag";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb6, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as Csv).0: csv::Error);
        _9 = const "Csv";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _12 = &(((*_1) as Io).0: std::io::Error);
        _13 = const "Io";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn <impl at src/main.rs:202:1: 202:31>::fmt(_1: &CliError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &docopt::Error;
    let _5: &csv::Error;
    let _6: &std::io::Error;
    let _7: &std::string::String;
    let _8: &str;
    scope 1 {
        debug e => _4;
    }
    scope 2 {
        debug e => _5;
    }
    scope 3 {
        debug e => _6;
    }
    scope 4 {
        debug s => _7;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &(((*_1) as Other).0: std::string::String);
        _8 = <std::string::String as Deref>::deref(_7) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Flag).0: docopt::Error);
        _0 = <docopt::Error as std::fmt::Display>::fmt(_4, _2) -> [return: bb7, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as Csv).0: csv::Error);
        _0 = <csv::Error as std::fmt::Display>::fmt(_5, _2) -> [return: bb7, unwind continue];
    }

    bb5: {
        _6 = &(((*_1) as Io).0: std::io::Error);
        _0 = <std::io::Error as std::fmt::Display>::fmt(_6, _2) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn <impl at src/main.rs:213:1: 213:38>::from(_1: docopt::Error) -> CliError {
    debug err => _1;
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Flag(move _1);
        return;
    }
}

fn <impl at src/main.rs:219:1: 219:35>::from(_1: csv::Error) -> CliError {
    debug err => _1;
    let mut _0: CliError;
    let mut _2: bool;
    let mut _3: &csv::Error;
    let mut _4: csv::Error;
    let mut _5: csv::ErrorKind;
    let mut _6: csv::Error;
    let mut _7: isize;
    let _8: std::io::Error;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    scope 1 {
        debug v => _8;
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _11 = const true;
        _3 = &_1;
        _2 = csv::Error::is_io_error(move _3) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = const false;
        _6 = move _1;
        _5 = csv::Error::into_kind(move _6) -> [return: bb4, unwind: bb17];
    }

    bb3: {
        _11 = const false;
        _4 = move _1;
        _0 = CliError::Csv(move _4);
        goto -> bb8;
    }

    bb4: {
        _10 = const true;
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "internal error: entered unreachable code") -> bb15;
    }

    bb6: {
        _10 = const false;
        _8 = move ((_5 as Io).0: std::io::Error);
        _0 = <CliError as From<std::io::Error>>::from(move _8) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _12 = discriminant(_5);
        switchInt(move _12) -> [0: bb10, otherwise: bb11];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        _10 = const false;
        goto -> bb8;
    }

    bb11: {
        drop(_5) -> [return: bb10, unwind: bb17];
    }

    bb12 (cleanup): {
        switchInt(_10) -> [0: bb17, otherwise: bb13];
    }

    bb13 (cleanup): {
        drop(((_5 as Io).0: std::io::Error)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        _13 = discriminant(_5);
        switchInt(move _13) -> [0: bb12, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_11) -> [0: bb9, otherwise: bb16];
    }
}

fn <impl at src/main.rs:231:1: 231:34>::from(_1: std::io::Error) -> CliError {
    debug err => _1;
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Io(move _1);
        return;
    }
}

fn <impl at src/main.rs:237:1: 237:31>::from(_1: std::string::String) -> CliError {
    debug err => _1;
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Other(move _1);
        return;
    }
}

fn <impl at src/main.rs:243:1: 243:36>::from(_1: &str) -> CliError {
    debug err => _1;
    let mut _0: CliError;
    let mut _2: std::string::String;

    bb0: {
        _2 = <str as ToOwned>::to_owned(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = CliError::Other(move _2);
        return;
    }
}

fn <impl at src/main.rs:249:1: 249:37>::from(_1: regex::Error) -> CliError {
    debug err => _1;
    let mut _0: CliError;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &regex::Error;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<regex::Error>(_9) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = CliError::Other(move _2);
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at src/main.rs:249:1: 249:37>::from: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn Number::Int(_1: i64) -> Number {
    let mut _0: cmd::sort::Number;

    bb0: {
        _0 = Number::Int(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Number::Int(_1: i64) -> Number {
    let mut _0: cmd::sort::Number;

    bb0: {
        _0 = Number::Int(move _1);
        return;
    }
}

fn Number::Float(_1: f64) -> Number {
    let mut _0: cmd::sort::Number;

    bb0: {
        _0 = Number::Float(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Number::Float(_1: f64) -> Number {
    let mut _0: cmd::sort::Number;

    bb0: {
        _0 = Number::Float(move _1);
        return;
    }
}

fn Delimiter(_1: u8) -> Delimiter {
    let mut _0: config::Delimiter;

    bb0: {
        _0 = Delimiter(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Delimiter(_1: u8) -> Delimiter {
    let mut _0: config::Delimiter;

    bb0: {
        _0 = Delimiter(move _1);
        return;
    }
}

fn Selector::One(_1: OneSelector) -> Selector {
    let mut _0: select::Selector;

    bb0: {
        _0 = Selector::One(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Selector::One(_1: OneSelector) -> Selector {
    let mut _0: select::Selector;

    bb0: {
        _0 = Selector::One(move _1);
        return;
    }
}

fn Selector::Range(_1: OneSelector, _2: OneSelector) -> Selector {
    let mut _0: select::Selector;

    bb0: {
        _0 = Selector::Range(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Selector::Range(_1: OneSelector, _2: OneSelector) -> Selector {
    let mut _0: select::Selector;

    bb0: {
        _0 = Selector::Range(move _1, move _2);
        return;
    }
}

fn OneSelector::Index(_1: usize) -> OneSelector {
    let mut _0: select::OneSelector;

    bb0: {
        _0 = OneSelector::Index(move _1);
        return;
    }
}

// MIR FOR CTFE
fn OneSelector::Index(_1: usize) -> OneSelector {
    let mut _0: select::OneSelector;

    bb0: {
        _0 = OneSelector::Index(move _1);
        return;
    }
}

fn OneSelector::IndexedName(_1: std::string::String, _2: usize) -> OneSelector {
    let mut _0: select::OneSelector;

    bb0: {
        _0 = OneSelector::IndexedName(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn OneSelector::IndexedName(_1: std::string::String, _2: usize) -> OneSelector {
    let mut _0: select::OneSelector;

    bb0: {
        _0 = OneSelector::IndexedName(move _1, move _2);
        return;
    }
}

fn Selection(_1: Vec<usize>) -> Selection {
    let mut _0: select::Selection;

    bb0: {
        _0 = Selection(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Selection(_1: Vec<usize>) -> Selection {
    let mut _0: select::Selection;

    bb0: {
        _0 = Selection(move _1);
        return;
    }
}

fn NormalSelection(_1: Vec<bool>) -> NormalSelection {
    let mut _0: select::NormalSelection;

    bb0: {
        _0 = NormalSelection(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NormalSelection(_1: Vec<bool>) -> NormalSelection {
    let mut _0: select::NormalSelection;

    bb0: {
        _0 = NormalSelection(move _1);
        return;
    }
}

fn CliError::Flag(_1: docopt::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Flag(move _1);
        return;
    }
}

// MIR FOR CTFE
fn CliError::Flag(_1: docopt::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Flag(move _1);
        return;
    }
}

fn CliError::Csv(_1: csv::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Csv(move _1);
        return;
    }
}

// MIR FOR CTFE
fn CliError::Csv(_1: csv::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Csv(move _1);
        return;
    }
}

fn CliError::Io(_1: std::io::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Io(move _1);
        return;
    }
}

// MIR FOR CTFE
fn CliError::Io(_1: std::io::Error) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Io(move _1);
        return;
    }
}

fn CliError::Other(_1: std::string::String) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Other(move _1);
        return;
    }
}

// MIR FOR CTFE
fn CliError::Other(_1: std::string::String) -> CliError {
    let mut _0: CliError;

    bb0: {
        _0 = CliError::Other(move _1);
        return;
    }
}
