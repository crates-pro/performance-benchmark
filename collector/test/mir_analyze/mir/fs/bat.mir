// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_truecolor_terminal() -> bool {
    let mut _0: bool;
    let mut _1: std::result::Result<bool, std::env::VarError>;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _2 = var::<&str>(const "COLORTERM") -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = std::result::Result::<String, VarError>::map::<bool, {closure@src/bin/bat/app.rs:30:14: 30:25}>(move _2, const ZeroSized: {closure@src/bin/bat/app.rs:30:14: 30:25}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::result::Result::<bool, VarError>::unwrap_or(move _1, const false) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn is_truecolor_terminal::{closure#0}(_1: {closure@src/bin/bat/app.rs:30:14: 30:25}, _2: String) -> bool {
    debug colorterm => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::string::String;
    let mut _5: &std::string::String;
    let mut _6: &&str;
    let mut _7: &&str;

    bb0: {
        _4 = &_2;
        _7 = const _;
        _3 = <String as PartialEq<&str>>::eq(move _4, _7) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const true;
        goto -> bb4;
    }

    bb3: {
        _5 = &_2;
        _6 = const _;
        _0 = <String as PartialEq<&str>>::eq(move _5, _6) -> [return: bb8, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        goto -> bb4;
    }
}

promoted[0] in is_truecolor_terminal::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "24bit";
        _0 = &_1;
        return;
    }
}

promoted[1] in is_truecolor_terminal::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "truecolor";
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::new() -> std::result::Result<app::App, bat::error::Error> {
    let mut _0: std::result::Result<app::App, bat::error::Error>;
    let _1: bool;
    let mut _2: atty::Stream;
    let mut _3: app::App;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, clap::ArgMatches<'_>>;
    let mut _5: std::result::Result<clap::ArgMatches<'_>, bat::error::Error>;
    let mut _6: isize;
    scope 1 {
        debug interactive_output => _1;
        let _7: std::result::Result<std::convert::Infallible, bat::error::Error>;
        let _8: clap::ArgMatches<'_>;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = atty::Stream::Stdout;
        _1 = is(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = app::App::matches(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <std::result::Result<ArgMatches<'_>, bat::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _8 = move ((_4 as Continue).0: clap::ArgMatches<'_>);
        _3 = app::App { matches: move _8, interactive_output: _1 };
        _0 = std::result::Result::<app::App, bat::error::Error>::Ok(move _3);
        goto -> bb7;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<app::App, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::matches(_1: bool) -> std::result::Result<ArgMatches<'_>, bat::error::Error> {
    debug interactive_output => _1;
    let mut _0: std::result::Result<clap::ArgMatches<'_>, bat::error::Error>;
    let _2: std::vec::Vec<std::ffi::OsString>;
    let mut _3: bool;
    let mut _4: &std::option::Option<std::ffi::OsString>;
    let _5: std::option::Option<std::ffi::OsString>;
    let mut _6: &mut std::env::ArgsOs;
    let mut _7: std::env::ArgsOs;
    let mut _8: &std::option::Option<std::ffi::OsString>;
    let _9: std::option::Option<std::ffi::OsString>;
    let mut _10: std::ffi::OsString;
    let _11: &str;
    let mut _12: bool;
    let mut _13: &mut std::env::ArgsOs;
    let mut _14: std::env::ArgsOs;
    let mut _15: std::env::ArgsOs;
    let mut _16: std::env::ArgsOs;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::vec::Vec<std::ffi::OsString>>;
    let mut _19: std::result::Result<std::vec::Vec<std::ffi::OsString>, bat::error::Error>;
    let mut _20: std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>;
    let mut _21: std::option::Option<std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>>;
    let mut _22: isize;
    let _25: ();
    let mut _26: &mut std::vec::Vec<std::ffi::OsString>;
    let mut _27: std::ffi::OsString;
    let mut _28: std::option::Option<std::ffi::OsString>;
    let mut _29: &mut std::env::ArgsOs;
    let _30: ();
    let mut _31: std::env::ArgsOs;
    let mut _32: {closure@src/bin/bat/app.rs:71:31: 71:34};
    let mut _33: &mut std::vec::Vec<std::ffi::OsString>;
    let mut _34: clap::ArgMatches<'_>;
    let mut _35: clap::App<'_, '_>;
    let mut _36: std::vec::Vec<std::ffi::OsString>;
    let mut _37: bool;
    let mut _38: bool;
    scope 1 {
        debug args => _2;
    }
    scope 2 {
        debug cli_args => _16;
        let mut _17: std::vec::Vec<std::ffi::OsString>;
        let _23: std::result::Result<std::convert::Infallible, bat::error::Error>;
        let _24: std::vec::Vec<std::ffi::OsString>;
        scope 3 {
            debug args => _17;
        }
        scope 4 {
            debug residual => _23;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _24;
            scope 7 {
            }
        }
    }

    bb0: {
        _37 = const false;
        _38 = const false;
        _7 = wild::args_os() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _7;
        _5 = <ArgsOs as Iterator>::nth(move _6, const 1_usize) -> [return: bb2, unwind: bb42];
    }

    bb2: {
        _4 = &_5;
        _11 = const "cache";
        _10 = <&str as Into<OsString>>::into(_11) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _9 = Option::<OsString>::Some(move _10);
        _8 = &_9;
        _3 = <Option<OsString> as PartialEq>::eq(move _4, move _8) -> [return: bb4, unwind: bb40];
    }

    bb4: {
        switchInt(move _3) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        drop(_5) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        drop(_7) -> [return: bb15, unwind continue];
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        drop(_5) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        drop(_7) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = wild::args_os() -> [return: bb12, unwind continue];
    }

    bb12: {
        _13 = &mut _14;
        _12 = <ArgsOs as Iterator>::any::<{closure@src/bin/bat/app.rs:54:36: 54:41}>(move _13, const ZeroSized: {closure@src/bin/bat/app.rs:54:36: 54:41}) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        switchInt(move _12) -> [0: bb18, otherwise: bb14];
    }

    bb14: {
        drop(_14) -> [return: bb15, unwind continue];
    }

    bb15: {
        _15 = wild::args_os() -> [return: bb16, unwind continue];
    }

    bb16: {
        _2 = <ArgsOs as Iterator>::collect::<Vec<OsString>>(move _15) -> [return: bb17, unwind continue];
    }

    bb17: {
        _37 = const true;
        goto -> bb33;
    }

    bb18: {
        drop(_14) -> [return: bb19, unwind continue];
    }

    bb19: {
        _38 = const true;
        _16 = wild::args_os() -> [return: bb20, unwind continue];
    }

    bb20: {
        _21 = get_args_from_env_var() -> [return: bb21, unwind: bb47];
    }

    bb21: {
        _20 = Option::<std::result::Result<Vec<OsString>, ParseError>>::unwrap_or_else::<fn() -> std::result::Result<Vec<OsString>, ParseError> {get_args_from_config_file}>(move _21, get_args_from_config_file) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        _19 = <std::result::Result<Vec<OsString>, ParseError> as bat::error::ResultExt<Vec<OsString>>>::chain_err::<{closure@src/bin/bat/app.rs:65:28: 65:30}, &str>(move _20, const ZeroSized: {closure@src/bin/bat/app.rs:65:28: 65:30}) -> [return: bb23, unwind: bb47];
    }

    bb23: {
        _18 = <std::result::Result<Vec<OsString>, bat::error::Error> as Try>::branch(move _19) -> [return: bb24, unwind: bb47];
    }

    bb24: {
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb25, 1: bb27, otherwise: bb26];
    }

    bb25: {
        _24 = move ((_18 as Continue).0: std::vec::Vec<std::ffi::OsString>);
        _17 = move _24;
        _26 = &mut _17;
        _29 = &mut _16;
        _28 = <ArgsOs as Iterator>::next(move _29) -> [return: bb29, unwind: bb38];
    }

    bb26: {
        unreachable;
    }

    bb27: {
        _23 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<ArgMatches<'_>, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _23) -> [return: bb28, unwind: bb47];
    }

    bb28: {
        drop(_16) -> [return: bb36, unwind continue];
    }

    bb29: {
        _27 = Option::<OsString>::unwrap(move _28) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        _25 = Vec::<OsString>::insert(move _26, const 0_usize, move _27) -> [return: bb31, unwind: bb38];
    }

    bb31: {
        _38 = const false;
        _31 = move _16;
        _33 = &mut _17;
        _32 = {closure@src/bin/bat/app.rs:71:31: 71:34} { args: move _33 };
        _30 = <ArgsOs as Iterator>::for_each::<{closure@src/bin/bat/app.rs:71:31: 71:34}>(move _31, move _32) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        _37 = const true;
        _2 = move _17;
        _38 = const false;
        goto -> bb33;
    }

    bb33: {
        _35 = build_app(_1) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        _37 = const false;
        _36 = move _2;
        _34 = clap::App::<'_, '_>::get_matches_from::<Vec<OsString>, OsString>(move _35, move _36) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        _0 = std::result::Result::<ArgMatches<'_>, bat::error::Error>::Ok(move _34);
        _37 = const false;
        goto -> bb37;
    }

    bb36: {
        _38 = const false;
        _37 = const false;
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_17) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_14) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_9) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_5) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_7) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        drop(_2) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_37) -> [0: bb43, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_16) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_38) -> [0: bb43, otherwise: bb46];
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::matches::{closure#0}(_1: &mut {closure@src/bin/bat/app.rs:54:36: 54:41}, _2: OsString) -> bool {
    debug arg => _2;
    let mut _0: bool;
    let mut _3: &std::ffi::OsString;
    let mut _4: &&str;

    bb0: {
        _3 = &_2;
        _4 = const _;
        _0 = <OsString as PartialEq<&str>>::eq(move _3, _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::matches::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "--no-config";
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::matches::{closure#1}(_1: {closure@src/bin/bat/app.rs:65:28: 65:30}) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "Could not parse configuration file";
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::matches::{closure#2}(_1: &mut {closure@src/bin/bat/app.rs:71:31: 71:34}, _2: OsString) -> () {
    debug a => _2;
    debug args => (*((*_1).0: &mut std::vec::Vec<std::ffi::OsString>));
    let mut _0: ();
    let mut _3: &mut std::vec::Vec<std::ffi::OsString>;

    bb0: {
        _3 = deref_copy ((*_1).0: &mut std::vec::Vec<std::ffi::OsString>);
        _0 = Vec::<OsString>::push(_3, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config(_1: &app::App, _2: &[bat::input::Input<'_>]) -> std::result::Result<Config<'_>, bat::error::Error> {
    debug self => _1;
    debug inputs => _2;
    let mut _0: std::result::Result<bat::config::Config<'_>, bat::error::Error>;
    let _3: bat::style::StyleComponents;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::style::StyleComponents>;
    let mut _5: std::result::Result<bat::style::StyleComponents, bat::error::Error>;
    let mut _6: &app::App;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, bat::error::Error>;
    let _9: bat::style::StyleComponents;
    let mut _11: std::option::Option<&str>;
    let mut _12: &clap::ArgMatches<'_>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _18: u64;
    let mut _19: &clap::ArgMatches<'_>;
    let mut _20: bool;
    let mut _21: &clap::ArgMatches<'_>;
    let mut _22: bool;
    let mut _23: &mut std::slice::Iter<'_, bat::input::Input<'_>>;
    let mut _24: std::slice::Iter<'_, bat::input::Input<'_>>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: atty::Stream;
    let mut _28: bool;
    let _29: !;
    let mut _31: std::option::Option<clap::Values<'_>>;
    let mut _32: &clap::ArgMatches<'_>;
    let mut _33: isize;
    let mut _35: clap::Values<'_>;
    let mut _37: std::option::Option<&str>;
    let mut _38: &mut clap::Values<'_>;
    let mut _39: isize;
    let mut _42: std::str::Split<'_, char>;
    let mut _43: usize;
    let mut _44: &std::vec::Vec<&str>;
    let mut _45: bat::error::Error;
    let _46: &str;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>>;
    let mut _48: std::result::Result<(), bat::error::Error>;
    let mut _49: &mut bat::SyntaxMapping<'_>;
    let _50: &&str;
    let mut _51: &std::vec::Vec<&str>;
    let mut _52: bat::MappingTarget<'_>;
    let _53: &&str;
    let mut _54: &std::vec::Vec<&str>;
    let mut _55: isize;
    let mut _58: std::option::Option<&str>;
    let mut _59: &clap::ArgMatches<'_>;
    let mut _60: bat::config::Config<'_>;
    let mut _61: bool;
    let mut _62: std::option::Option<&str>;
    let mut _63: std::option::Option<&str>;
    let mut _64: &clap::ArgMatches<'_>;
    let mut _65: {closure@src/bin/bat/app.rs:142:65: 142:67};
    let mut _66: &&app::App;
    let mut _67: bool;
    let mut _68: &clap::ArgMatches<'_>;
    let mut _69: bat::WrappingMode;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: &std::option::Option<usize>;
    let mut _73: std::option::Option<&str>;
    let mut _74: &clap::ArgMatches<'_>;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: isize;
    let mut _79: bool;
    let mut _80: &bat::style::StyleComponents;
    let _81: !;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: &clap::ArgMatches<'_>;
    let mut _85: std::option::Option<&str>;
    let mut _86: &clap::ArgMatches<'_>;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: isize;
    let mut _91: bool;
    let mut _92: &std::option::Option<std::ffi::OsString>;
    let _93: std::option::Option<std::ffi::OsString>;
    let _94: !;
    let mut _95: bat::PagingMode;
    let mut _96: usize;
    let mut _97: std::option::Option<usize>;
    let mut _98: usize;
    let mut _99: u16;
    let mut _100: (u16, u16);
    let mut _101: &console::Term;
    let _102: console::Term;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: &std::option::Option<&str>;
    let _108: std::option::Option<&str>;
    let mut _109: &clap::ArgMatches<'_>;
    let mut _110: bool;
    let mut _111: &std::option::Option<&str>;
    let _112: std::option::Option<&str>;
    let mut _113: &clap::ArgMatches<'_>;
    let mut _114: &clap::ArgMatches<'_>;
    let mut _115: usize;
    let mut _116: std::option::Option<usize>;
    let mut _117: std::option::Option<std::string::String>;
    let mut _118: std::option::Option<std::string::String>;
    let mut _119: std::option::Option<&str>;
    let mut _120: &clap::ArgMatches<'_>;
    let mut _121: usize;
    let mut _122: bool;
    let mut _123: &bat::style::StyleComponents;
    let mut _124: bool;
    let mut _125: &bat::PagingMode;
    let mut _126: std::string::String;
    let mut _127: std::option::Option<std::string::String>;
    let mut _128: std::option::Option<std::string::String>;
    let mut _129: std::option::Option<std::string::String>;
    let mut _130: std::option::Option<&str>;
    let mut _131: &clap::ArgMatches<'_>;
    let mut _132: bat::config::VisibleLines;
    let mut _133: bool;
    let mut _134: &clap::ArgMatches<'_>;
    let mut _135: usize;
    let mut _136: std::option::Option<usize>;
    let mut _137: std::option::Option<&str>;
    let mut _138: &clap::ArgMatches<'_>;
    let mut _139: bat::line_range::LineRanges;
    let mut _140: std::option::Option<bat::line_range::LineRanges>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::option::Option<std::vec::Vec<bat::line_range::LineRange>>>;
    let mut _142: std::result::Result<std::option::Option<std::vec::Vec<bat::line_range::LineRange>>, bat::error::Error>;
    let mut _143: std::option::Option<std::result::Result<std::vec::Vec<bat::line_range::LineRange>, bat::error::Error>>;
    let mut _144: std::option::Option<clap::Values<'_>>;
    let mut _145: &clap::ArgMatches<'_>;
    let mut _146: isize;
    let mut _149: bat::style::StyleComponents;
    let mut _150: bat::SyntaxMapping<'_>;
    let mut _151: std::option::Option<&str>;
    let mut _152: &clap::ArgMatches<'_>;
    let mut _153: bool;
    let mut _154: &std::option::Option<&str>;
    let _155: std::option::Option<&str>;
    let mut _156: &clap::ArgMatches<'_>;
    let mut _157: bat::line_range::HighlightedLineRanges;
    let mut _158: std::option::Option<bat::line_range::HighlightedLineRanges>;
    let mut _159: std::option::Option<bat::line_range::LineRanges>;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::option::Option<std::vec::Vec<bat::line_range::LineRange>>>;
    let mut _161: std::result::Result<std::option::Option<std::vec::Vec<bat::line_range::LineRange>>, bat::error::Error>;
    let mut _162: std::option::Option<std::result::Result<std::vec::Vec<bat::line_range::LineRange>, bat::error::Error>>;
    let mut _163: std::option::Option<clap::Values<'_>>;
    let mut _164: &clap::ArgMatches<'_>;
    let mut _165: isize;
    let mut _175: &str;
    let mut _176: &str;
    let mut _177: bool;
    let mut _178: bool;
    scope 1 {
        debug style_components => _3;
        let _10: bat::PagingMode;
        let _17: bool;
        let mut _168: &&str;
        scope 6 {
            debug paging_mode => _10;
            let mut _30: bat::SyntaxMapping<'_>;
            scope 8 {
                debug syntax_mapping => _30;
                let _57: std::option::Option<usize>;
                scope 9 {
                    debug values => _34;
                    let _34: clap::Values<'_>;
                    let mut _36: clap::Values<'_>;
                    scope 10 {
                        debug iter => _36;
                        let _40: &str;
                        scope 11 {
                            debug from_to => _40;
                            let _41: std::vec::Vec<&str>;
                            scope 12 {
                                debug parts => _41;
                                let _56: std::result::Result<std::convert::Infallible, bat::error::Error>;
                                scope 13 {
                                    debug residual => _56;
                                    scope 14 {
                                    }
                                }
                                scope 15 {
                                    debug val => const ();
                                    scope 16 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 17 {
                    debug maybe_term_width => _57;
                    let _147: std::result::Result<std::convert::Infallible, bat::error::Error>;
                    let _148: std::option::Option<std::vec::Vec<bat::line_range::LineRange>>;
                    let _166: std::result::Result<std::convert::Infallible, bat::error::Error>;
                    let _167: std::option::Option<std::vec::Vec<bat::line_range::LineRange>>;
                    let mut _169: &&str;
                    let mut _170: &std::option::Option<&str>;
                    let mut _171: &bat::PagingMode;
                    let mut _172: &std::option::Option<&str>;
                    let mut _173: &std::option::Option<&str>;
                    let mut _174: &&str;
                    scope 18 {
                        debug residual => _147;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _148;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _166;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _167;
                        scope 25 {
                        }
                    }
                }
            }
        }
        scope 7 {
            debug extra_plain => _17;
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _178 = const false;
        _177 = const false;
        _6 = _1;
        _5 = app::App::style_components(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::result::Result<StyleComponents, bat::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_4 as Continue).0: bat::style::StyleComponents);
        _178 = const true;
        _3 = move _9;
        _12 = &((*_1).0: clap::ArgMatches<'_>);
        _11 = ArgMatches::<'_>::value_of::<&str>(move _12, const "paging") -> [return: bb6, unwind: bb181];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<Config<'_>, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _8) -> [return: bb167, unwind continue];
    }

    bb6: {
        _16 = discriminant(_11);
        switchInt(move _16) -> [0: bb16, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _15 = <str as PartialEq>::eq(((_11 as Some).0: &str), const "always") -> [return: bb15, unwind: bb181];
    }

    bb8: {
        _10 = Always;
        goto -> bb32;
    }

    bb9: {
        _14 = <str as PartialEq>::eq(((_11 as Some).0: &str), const "never") -> [return: bb14, unwind: bb181];
    }

    bb10: {
        _10 = Never;
        goto -> bb32;
    }

    bb11: {
        _13 = <str as PartialEq>::eq(((_11 as Some).0: &str), const "auto") -> [return: bb13, unwind: bb181];
    }

    bb12: {
        _168 = const _;
        _29 = core::panicking::unreachable_display::<&str>(_168) -> bb181;
    }

    bb13: {
        switchInt(move _13) -> [0: bb12, otherwise: bb16];
    }

    bb14: {
        switchInt(move _14) -> [0: bb11, otherwise: bb10];
    }

    bb15: {
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb16: {
        _19 = &((*_1).0: clap::ArgMatches<'_>);
        _18 = ArgMatches::<'_>::occurrences_of::<&str>(move _19, const "plain") -> [return: bb17, unwind: bb181];
    }

    bb17: {
        _17 = Gt(move _18, const 1_u64);
        switchInt(_17) -> [0: bb18, otherwise: bb20];
    }

    bb18: {
        _21 = &((*_1).0: clap::ArgMatches<'_>);
        _20 = ArgMatches::<'_>::is_present::<&str>(move _21, const "no-paging") -> [return: bb19, unwind: bb181];
    }

    bb19: {
        switchInt(move _20) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _10 = Never;
        goto -> bb32;
    }

    bb21: {
        _24 = core::slice::<impl [bat::input::Input<'_>]>::iter(_2) -> [return: bb22, unwind: bb181];
    }

    bb22: {
        _23 = &mut _24;
        _22 = <std::slice::Iter<'_, bat::input::Input<'_>> as Iterator>::any::<for<'a> fn(&'a bat::input::Input<'_>) -> bool {bat::input::Input::<'_>::is_stdin}>(move _23, bat::input::Input::<'_>::is_stdin) -> [return: bb23, unwind: bb181];
    }

    bb23: {
        switchInt(move _22) -> [0: bb29, otherwise: bb24];
    }

    bb24: {
        _25 = ((*_1).1: bool);
        switchInt(move _25) -> [0: bb28, otherwise: bb25];
    }

    bb25: {
        _27 = atty::Stream::Stdin;
        _26 = is(move _27) -> [return: bb26, unwind: bb181];
    }

    bb26: {
        switchInt(move _26) -> [0: bb27, otherwise: bb28];
    }

    bb27: {
        _10 = QuitIfOneScreen;
        goto -> bb32;
    }

    bb28: {
        _10 = Never;
        goto -> bb32;
    }

    bb29: {
        _28 = ((*_1).1: bool);
        switchInt(move _28) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _10 = QuitIfOneScreen;
        goto -> bb32;
    }

    bb31: {
        _10 = Never;
        goto -> bb32;
    }

    bb32: {
        _30 = SyntaxMapping::<'_>::builtin() -> [return: bb33, unwind: bb181];
    }

    bb33: {
        _177 = const true;
        _32 = &((*_1).0: clap::ArgMatches<'_>);
        _31 = ArgMatches::<'_>::values_of::<&str>(move _32, const "map-syntax") -> [return: bb34, unwind: bb180];
    }

    bb34: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [1: bb35, otherwise: bb52];
    }

    bb35: {
        _34 = move ((_31 as Some).0: clap::Values<'_>);
        _35 = <clap::Values<'_> as IntoIterator>::into_iter(move _34) -> [return: bb36, unwind: bb180];
    }

    bb36: {
        _36 = move _35;
        goto -> bb37;
    }

    bb37: {
        _38 = &mut _36;
        _37 = <clap::Values<'_> as Iterator>::next(_38) -> [return: bb38, unwind: bb180];
    }

    bb38: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb52, 1: bb39, otherwise: bb4];
    }

    bb39: {
        _40 = ((_37 as Some).0: &str);
        _42 = core::str::<impl str>::split::<'_, char>(_40, const ':') -> [return: bb40, unwind: bb180];
    }

    bb40: {
        _41 = <std::str::Split<'_, char> as Iterator>::collect::<Vec<&str>>(move _42) -> [return: bb41, unwind: bb180];
    }

    bb41: {
        _44 = &_41;
        _43 = Vec::<&str>::len(move _44) -> [return: bb42, unwind: bb179];
    }

    bb42: {
        switchInt(move _43) -> [2: bb45, otherwise: bb43];
    }

    bb43: {
        _46 = const "Invalid syntax mapping. The format of the -m/--map-syntax option is '<glob-pattern>:<syntax-name>'. For example: '*.cpp:C++'.";
        _45 = <&str as Into<bat::error::Error>>::into(_46) -> [return: bb44, unwind: bb179];
    }

    bb44: {
        _0 = std::result::Result::<Config<'_>, bat::error::Error>::Err(move _45);
        goto -> bb164;
    }

    bb45: {
        _49 = &mut _30;
        _51 = &_41;
        _50 = <Vec<&str> as Index<usize>>::index(move _51, const 0_usize) -> [return: bb46, unwind: bb179];
    }

    bb46: {
        _175 = deref_copy (*_50);
        _54 = &_41;
        _53 = <Vec<&str> as Index<usize>>::index(move _54, const 1_usize) -> [return: bb47, unwind: bb179];
    }

    bb47: {
        _176 = deref_copy (*_53);
        _52 = MappingTarget::<'_>::MapTo(_176);
        _48 = SyntaxMapping::<'_>::insert(move _49, _175, move _52) -> [return: bb48, unwind: bb179];
    }

    bb48: {
        _47 = <std::result::Result<(), bat::error::Error> as Try>::branch(move _48) -> [return: bb49, unwind: bb179];
    }

    bb49: {
        _55 = discriminant(_47);
        switchInt(move _55) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        drop(_41) -> [return: bb37, unwind: bb180];
    }

    bb51: {
        _56 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<Config<'_>, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _56) -> [return: bb187, unwind: bb179];
    }

    bb52: {
        _59 = &((*_1).0: clap::ArgMatches<'_>);
        _58 = ArgMatches::<'_>::value_of::<&str>(move _59, const "terminal-width") -> [return: bb53, unwind: bb180];
    }

    bb53: {
        _57 = Option::<&str>::and_then::<usize, {closure@src/bin/bat/app.rs:122:81: 122:84}>(move _58, const ZeroSized: {closure@src/bin/bat/app.rs:122:81: 122:84}) -> [return: bb54, unwind: bb180];
    }

    bb54: {
        _61 = is_truecolor_terminal() -> [return: bb55, unwind: bb180];
    }

    bb55: {
        _64 = &((*_1).0: clap::ArgMatches<'_>);
        _63 = ArgMatches::<'_>::value_of::<&str>(move _64, const "language") -> [return: bb56, unwind: bb180];
    }

    bb56: {
        _66 = &_1;
        _65 = {closure@src/bin/bat/app.rs:142:65: 142:67} { self: move _66 };
        _62 = Option::<&str>::or_else::<{closure@src/bin/bat/app.rs:142:65: 142:67}>(move _63, move _65) -> [return: bb57, unwind: bb180];
    }

    bb57: {
        _68 = &((*_1).0: clap::ArgMatches<'_>);
        _67 = ArgMatches::<'_>::is_present::<&str>(move _68, const "show-all") -> [return: bb58, unwind: bb180];
    }

    bb58: {
        _70 = ((*_1).1: bool);
        switchInt(move _70) -> [0: bb59, otherwise: bb61];
    }

    bb59: {
        _72 = &_57;
        _71 = Option::<usize>::is_some(move _72) -> [return: bb60, unwind: bb180];
    }

    bb60: {
        switchInt(move _71) -> [0: bb76, otherwise: bb61];
    }

    bb61: {
        _74 = &((*_1).0: clap::ArgMatches<'_>);
        _73 = ArgMatches::<'_>::value_of::<&str>(move _74, const "wrap") -> [return: bb62, unwind: bb180];
    }

    bb62: {
        _78 = discriminant(_73);
        switchInt(move _78) -> [0: bb72, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _77 = <str as PartialEq>::eq(((_73 as Some).0: &str), const "character") -> [return: bb71, unwind: bb180];
    }

    bb64: {
        _69 = Character;
        goto -> bb77;
    }

    bb65: {
        _76 = <str as PartialEq>::eq(((_73 as Some).0: &str), const "never") -> [return: bb70, unwind: bb180];
    }

    bb66: {
        _69 = NoWrapping(const true);
        goto -> bb77;
    }

    bb67: {
        _75 = <str as PartialEq>::eq(((_73 as Some).0: &str), const "auto") -> [return: bb69, unwind: bb180];
    }

    bb68: {
        _169 = const _;
        _81 = core::panicking::unreachable_display::<&str>(_169) -> bb180;
    }

    bb69: {
        switchInt(move _75) -> [0: bb68, otherwise: bb72];
    }

    bb70: {
        switchInt(move _76) -> [0: bb67, otherwise: bb66];
    }

    bb71: {
        switchInt(move _77) -> [0: bb65, otherwise: bb64];
    }

    bb72: {
        _80 = &_3;
        _79 = StyleComponents::plain(move _80) -> [return: bb73, unwind: bb180];
    }

    bb73: {
        switchInt(move _79) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _69 = NoWrapping(const false);
        goto -> bb77;
    }

    bb75: {
        _69 = Character;
        goto -> bb77;
    }

    bb76: {
        _69 = NoWrapping(const false);
        goto -> bb77;
    }

    bb77: {
        _84 = &((*_1).0: clap::ArgMatches<'_>);
        _83 = ArgMatches::<'_>::is_present::<&str>(move _84, const "force-colorization") -> [return: bb78, unwind: bb180];
    }

    bb78: {
        switchInt(move _83) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _82 = const true;
        goto -> bb98;
    }

    bb80: {
        _86 = &((*_1).0: clap::ArgMatches<'_>);
        _85 = ArgMatches::<'_>::value_of::<&str>(move _86, const "color") -> [return: bb81, unwind: bb180];
    }

    bb81: {
        _90 = discriminant(_85);
        switchInt(move _90) -> [1: bb83, otherwise: bb82];
    }

    bb82: {
        _174 = const _;
        _94 = core::panicking::unreachable_display::<&str>(_174) -> bb180;
    }

    bb83: {
        _89 = <str as PartialEq>::eq(((_85 as Some).0: &str), const "always") -> [return: bb91, unwind: bb180];
    }

    bb84: {
        _82 = const true;
        goto -> bb98;
    }

    bb85: {
        _88 = <str as PartialEq>::eq(((_85 as Some).0: &str), const "never") -> [return: bb90, unwind: bb180];
    }

    bb86: {
        _82 = const false;
        goto -> bb98;
    }

    bb87: {
        _87 = <str as PartialEq>::eq(((_85 as Some).0: &str), const "auto") -> [return: bb89, unwind: bb180];
    }

    bb88: {
        _93 = var_os::<&str>(const "NO_COLOR") -> [return: bb92, unwind: bb180];
    }

    bb89: {
        switchInt(move _87) -> [0: bb82, otherwise: bb88];
    }

    bb90: {
        switchInt(move _88) -> [0: bb87, otherwise: bb86];
    }

    bb91: {
        switchInt(move _89) -> [0: bb85, otherwise: bb84];
    }

    bb92: {
        _92 = &_93;
        _91 = Option::<OsString>::is_none(move _92) -> [return: bb93, unwind: bb178];
    }

    bb93: {
        switchInt(move _91) -> [0: bb96, otherwise: bb94];
    }

    bb94: {
        drop(_93) -> [return: bb95, unwind: bb180];
    }

    bb95: {
        _82 = ((*_1).1: bool);
        goto -> bb98;
    }

    bb96: {
        drop(_93) -> [return: bb97, unwind: bb180];
    }

    bb97: {
        _82 = const false;
        goto -> bb98;
    }

    bb98: {
        _95 = _10;
        _97 = _57;
        _102 = Term::stdout() -> [return: bb99, unwind: bb180];
    }

    bb99: {
        _101 = &_102;
        _100 = Term::size(move _101) -> [return: bb100, unwind: bb184];
    }

    bb100: {
        _99 = (_100.1: u16);
        _98 = move _99 as usize (IntToInt);
        _96 = Option::<usize>::unwrap_or(move _97, move _98) -> [return: bb101, unwind: bb184];
    }

    bb101: {
        _105 = ((*_1).1: bool);
        switchInt(move _105) -> [0: bb102, otherwise: bb108];
    }

    bb102: {
        _109 = &((*_1).0: clap::ArgMatches<'_>);
        _108 = ArgMatches::<'_>::value_of::<&str>(move _109, const "color") -> [return: bb103, unwind: bb184];
    }

    bb103: {
        _107 = &_108;
        _173 = const _;
        _106 = <Option<&str> as PartialEq>::eq(move _107, _173) -> [return: bb104, unwind: bb184];
    }

    bb104: {
        switchInt(move _106) -> [0: bb105, otherwise: bb108];
    }

    bb105: {
        _113 = &((*_1).0: clap::ArgMatches<'_>);
        _112 = ArgMatches::<'_>::value_of::<&str>(move _113, const "decorations") -> [return: bb106, unwind: bb184];
    }

    bb106: {
        _111 = &_112;
        _172 = const _;
        _110 = <Option<&str> as PartialEq>::eq(move _111, _172) -> [return: bb107, unwind: bb184];
    }

    bb107: {
        switchInt(move _110) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _104 = const true;
        goto -> bb110;
    }

    bb109: {
        _114 = &((*_1).0: clap::ArgMatches<'_>);
        _104 = ArgMatches::<'_>::is_present::<&str>(move _114, const "force-colorization") -> [return: bb188, unwind: bb184];
    }

    bb110: {
        _103 = Not(move _104);
        _120 = &((*_1).0: clap::ArgMatches<'_>);
        _119 = ArgMatches::<'_>::value_of::<&str>(move _120, const "tabs") -> [return: bb111, unwind: bb184];
    }

    bb111: {
        _118 = Option::<&str>::map::<String, fn(&str) -> String {<String as From<&str>>::from}>(move _119, <String as From<&str>>::from) -> [return: bb112, unwind: bb184];
    }

    bb112: {
        _117 = Option::<String>::or_else::<{closure@src/bin/bat/app.rs:185:26: 185:28}>(move _118, const ZeroSized: {closure@src/bin/bat/app.rs:185:26: 185:28}) -> [return: bb113, unwind: bb184];
    }

    bb113: {
        _116 = Option::<String>::and_then::<usize, {closure@src/bin/bat/app.rs:186:27: 186:30}>(move _117, const ZeroSized: {closure@src/bin/bat/app.rs:186:27: 186:30}) -> [return: bb114, unwind: bb184];
    }

    bb114: {
        _123 = &_3;
        _122 = StyleComponents::plain(move _123) -> [return: bb115, unwind: bb184];
    }

    bb115: {
        switchInt(move _122) -> [0: bb119, otherwise: bb116];
    }

    bb116: {
        _125 = &_10;
        _171 = const _;
        _124 = <PagingMode as PartialEq>::eq(move _125, _171) -> [return: bb117, unwind: bb184];
    }

    bb117: {
        switchInt(move _124) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _121 = const 0_usize;
        goto -> bb120;
    }

    bb119: {
        _121 = const 4_usize;
        goto -> bb120;
    }

    bb120: {
        _115 = Option::<usize>::unwrap_or(move _116, move _121) -> [return: bb121, unwind: bb184];
    }

    bb121: {
        _131 = &((*_1).0: clap::ArgMatches<'_>);
        _130 = ArgMatches::<'_>::value_of::<&str>(move _131, const "theme") -> [return: bb122, unwind: bb184];
    }

    bb122: {
        _129 = Option::<&str>::map::<String, fn(&str) -> String {<String as From<&str>>::from}>(move _130, <String as From<&str>>::from) -> [return: bb123, unwind: bb184];
    }

    bb123: {
        _128 = Option::<String>::or_else::<{closure@src/bin/bat/app.rs:198:26: 198:28}>(move _129, const ZeroSized: {closure@src/bin/bat/app.rs:198:26: 198:28}) -> [return: bb124, unwind: bb184];
    }

    bb124: {
        _127 = Option::<String>::map::<String, {closure@src/bin/bat/app.rs:199:22: 199:25}>(move _128, const ZeroSized: {closure@src/bin/bat/app.rs:199:22: 199:25}) -> [return: bb125, unwind: bb184];
    }

    bb125: {
        _126 = Option::<String>::unwrap_or_else::<{closure@src/bin/bat/app.rs:206:33: 206:35}>(move _127, const ZeroSized: {closure@src/bin/bat/app.rs:206:33: 206:35}) -> [return: bb126, unwind: bb184];
    }

    bb126: {
        _134 = &((*_1).0: clap::ArgMatches<'_>);
        _133 = ArgMatches::<'_>::is_present::<&str>(move _134, const "diff") -> [return: bb127, unwind: bb176];
    }

    bb127: {
        switchInt(_133) -> [0: bb128, otherwise: bb129];
    }

    bb128: {
        _145 = &((*_1).0: clap::ArgMatches<'_>);
        _144 = ArgMatches::<'_>::values_of::<&str>(move _145, const "line-range") -> [return: bb133, unwind: bb176];
    }

    bb129: {
        _138 = &((*_1).0: clap::ArgMatches<'_>);
        _137 = ArgMatches::<'_>::value_of::<&str>(move _138, const "diff-context") -> [return: bb130, unwind: bb176];
    }

    bb130: {
        _136 = Option::<&str>::and_then::<usize, {closure@src/bin/bat/app.rs:212:35: 212:38}>(move _137, const ZeroSized: {closure@src/bin/bat/app.rs:212:35: 212:38}) -> [return: bb131, unwind: bb176];
    }

    bb131: {
        _135 = Option::<usize>::unwrap_or(move _136, const 2_usize) -> [return: bb132, unwind: bb176];
    }

    bb132: {
        _132 = DiffContext(move _135);
        goto -> bb142;
    }

    bb133: {
        _143 = Option::<clap::Values<'_>>::map::<std::result::Result<Vec<LineRange>, bat::error::Error>, {closure@src/bin/bat/app.rs:219:30: 219:34}>(move _144, const ZeroSized: {closure@src/bin/bat/app.rs:219:30: 219:34}) -> [return: bb134, unwind: bb176];
    }

    bb134: {
        _142 = Option::<std::result::Result<Vec<LineRange>, bat::error::Error>>::transpose(move _143) -> [return: bb135, unwind: bb176];
    }

    bb135: {
        _141 = <std::result::Result<Option<Vec<LineRange>>, bat::error::Error> as Try>::branch(move _142) -> [return: bb136, unwind: bb176];
    }

    bb136: {
        _146 = discriminant(_141);
        switchInt(move _146) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        _148 = move ((_141 as Continue).0: std::option::Option<std::vec::Vec<bat::line_range::LineRange>>);
        _140 = Option::<Vec<LineRange>>::map::<LineRanges, fn(Vec<LineRange>) -> LineRanges {LineRanges::from}>(move _148, LineRanges::from) -> [return: bb140, unwind: bb176];
    }

    bb138: {
        _147 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<Config<'_>, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _147) -> [return: bb139, unwind: bb176];
    }

    bb139: {
        drop(_126) -> [return: bb160, unwind: bb184];
    }

    bb140: {
        _139 = Option::<LineRanges>::unwrap_or_default(move _140) -> [return: bb141, unwind: bb176];
    }

    bb141: {
        _132 = Ranges(move _139);
        goto -> bb142;
    }

    bb142: {
        _178 = const false;
        _149 = move _3;
        _177 = const false;
        _150 = move _30;
        _152 = &((*_1).0: clap::ArgMatches<'_>);
        _151 = ArgMatches::<'_>::value_of::<&str>(move _152, const "pager") -> [return: bb143, unwind: bb173];
    }

    bb143: {
        _156 = &((*_1).0: clap::ArgMatches<'_>);
        _155 = ArgMatches::<'_>::value_of::<&str>(move _156, const "italic-text") -> [return: bb144, unwind: bb173];
    }

    bb144: {
        _154 = &_155;
        _170 = const _;
        _153 = <Option<&str> as PartialEq>::eq(move _154, _170) -> [return: bb145, unwind: bb173];
    }

    bb145: {
        _164 = &((*_1).0: clap::ArgMatches<'_>);
        _163 = ArgMatches::<'_>::values_of::<&str>(move _164, const "highlight-line") -> [return: bb146, unwind: bb173];
    }

    bb146: {
        _162 = Option::<clap::Values<'_>>::map::<std::result::Result<Vec<LineRange>, bat::error::Error>, {closure@src/bin/bat/app.rs:232:22: 232:26}>(move _163, const ZeroSized: {closure@src/bin/bat/app.rs:232:22: 232:26}) -> [return: bb147, unwind: bb173];
    }

    bb147: {
        _161 = Option::<std::result::Result<Vec<LineRange>, bat::error::Error>>::transpose(move _162) -> [return: bb148, unwind: bb173];
    }

    bb148: {
        _160 = <std::result::Result<Option<Vec<LineRange>>, bat::error::Error> as Try>::branch(move _161) -> [return: bb149, unwind: bb173];
    }

    bb149: {
        _165 = discriminant(_160);
        switchInt(move _165) -> [0: bb150, 1: bb151, otherwise: bb4];
    }

    bb150: {
        _167 = move ((_160 as Continue).0: std::option::Option<std::vec::Vec<bat::line_range::LineRange>>);
        _159 = Option::<Vec<LineRange>>::map::<LineRanges, fn(Vec<LineRange>) -> LineRanges {LineRanges::from}>(move _167, LineRanges::from) -> [return: bb153, unwind: bb169];
    }

    bb151: {
        _166 = move ((_160 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<Config<'_>, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _166) -> [return: bb152, unwind: bb169];
    }

    bb152: {
        drop(_150) -> [return: bb156, unwind: bb170];
    }

    bb153: {
        _158 = Option::<LineRanges>::map::<HighlightedLineRanges, fn(LineRanges) -> HighlightedLineRanges {HighlightedLineRanges}>(move _159, HighlightedLineRanges) -> [return: bb154, unwind: bb169];
    }

    bb154: {
        _157 = Option::<HighlightedLineRanges>::unwrap_or_default(move _158) -> [return: bb155, unwind: bb169];
    }

    bb155: {
        _60 = Config::<'_> { language: move _62, show_nonprintable: move _67, term_width: move _96, tab_width: move _115, loop_through: move _103, colored_output: move _82, true_color: move _61, style_components: move _149, wrapping_mode: move _69, paging_mode: move _95, visible_lines: move _132, theme: move _126, syntax_mapping: move _150, pager: move _151, use_italic_text: move _153, highlighted_lines: move _157 };
        _0 = std::result::Result::<Config<'_>, bat::error::Error>::Ok(move _60);
        _177 = const false;
        _178 = const false;
        drop(_102) -> [return: bb168, unwind continue];
    }

    bb156: {
        drop(_149) -> [return: bb157, unwind: bb171];
    }

    bb157: {
        drop(_132) -> [return: bb158, unwind: bb172];
    }

    bb158: {
        drop(_126) -> [return: bb159, unwind: bb177];
    }

    bb159: {
        _177 = const false;
        _178 = const false;
        goto -> bb163;
    }

    bb160: {
        drop(_30) -> [return: bb161, unwind: bb186];
    }

    bb161: {
        _177 = const false;
        drop(_3) -> [return: bb162, unwind: bb177];
    }

    bb162: {
        _178 = const false;
        goto -> bb163;
    }

    bb163: {
        drop(_102) -> [return: bb168, unwind continue];
    }

    bb164: {
        drop(_41) -> [return: bb165, unwind: bb180];
    }

    bb165: {
        drop(_30) -> [return: bb166, unwind: bb181];
    }

    bb166: {
        _177 = const false;
        drop(_3) -> [return: bb167, unwind continue];
    }

    bb167: {
        _178 = const false;
        goto -> bb168;
    }

    bb168: {
        return;
    }

    bb169 (cleanup): {
        drop(_150) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_149) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_132) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_126) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_150) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_149) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_132) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_126) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_102) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_93) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_41) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_30) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_3) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        resume;
    }

    bb183 (cleanup): {
        drop(_30) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        switchInt(_177) -> [0: bb186, otherwise: bb183];
    }

    bb185 (cleanup): {
        drop(_3) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        switchInt(_178) -> [0: bb177, otherwise: bb185];
    }

    bb187: {
        goto -> bb164;
    }

    bb188: {
        goto -> bb110;
    }
}

promoted[0] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "other values for --paging are not allowed";
        _0 = &_1;
        return;
    }
}

promoted[1] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "other values for --paging are not allowed";
        _0 = &_1;
        return;
    }
}

promoted[2] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "always";
        _2 = &(*_3);
        _1 = Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &PagingMode = {
    let mut _0: &bat::PagingMode;
    let mut _1: bat::PagingMode;

    bb0: {
        _1 = Never;
        _0 = &_1;
        return;
    }
}

promoted[4] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "always";
        _2 = &(*_3);
        _1 = Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[5] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "always";
        _2 = &(*_3);
        _1 = Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[6] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "other values for --color are not allowed";
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#0}(_1: {closure@src/bin/bat/app.rs:122:81: 122:84}, _2: &str) -> Option<usize> {
    debug w => _2;
    let mut _0: std::option::Option<usize>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: std::option::Option<i16>;
    let mut _6: std::result::Result<i16, std::num::ParseIntError>;
    let mut _7: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _3 = core::str::<impl str>::starts_with::<'_, char>(_2, const '+') -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        _4 = core::str::<impl str>::starts_with::<'_, char>(_2, const '-') -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _4) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _6 = core::str::<impl str>::parse::<i16>(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = std::result::Result::<i16, std::num::ParseIntError>::ok(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Option::<i16>::map::<usize, {closure@src/bin/bat/app.rs:125:36: 125:48}>(move _5, const ZeroSized: {closure@src/bin/bat/app.rs:125:36: 125:48}) -> [return: bb9, unwind continue];
    }

    bb7: {
        _7 = core::str::<impl str>::parse::<usize>(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = std::result::Result::<usize, std::num::ParseIntError>::ok(move _7) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#0}::{closure#0}(_1: {closure@src/bin/bat/app.rs:125:36: 125:48}, _2: i16) -> usize {
    debug delta => _2;
    let mut _0: usize;
    let _3: u16;
    let mut _4: (u16, u16);
    let mut _5: &console::Term;
    let _6: console::Term;
    let mut _8: i32;
    let mut _9: i32;
    let mut _10: (i32, bool);
    let mut _11: bool;
    scope 1 {
        debug old_width => _3;
        let _7: i32;
        scope 2 {
            debug new_width => _7;
        }
    }

    bb0: {
        _6 = Term::stdout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = Term::size(move _5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _3 = (_4.1: u16);
        drop(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = <i32 as From<u16>>::from(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = <i32 as From<i16>>::from(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = CheckedAdd(_8, _9);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> [success: bb6, unwind continue];
    }

    bb6: {
        _7 = move (_10.0: i32);
        _11 = Le(_7, const 0_i32);
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = _3 as usize (IntToInt);
        goto -> bb9;
    }

    bb8: {
        _0 = _7 as usize (IntToInt);
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#1}(_1: {closure@src/bin/bat/app.rs:142:65: 142:67}) -> Option<&str> {
    debug self => (*(_1.0: &&app::App));
    let mut _0: std::option::Option<&str>;
    let mut _2: bool;
    let mut _3: &clap::ArgMatches<'_>;
    let _4: &str;
    let mut _5: &&app::App;
    let mut _6: &app::App;

    bb0: {
        _5 = deref_copy (_1.0: &&app::App);
        _6 = deref_copy (*_5);
        _3 = &((*_6).0: clap::ArgMatches<'_>);
        _2 = ArgMatches::<'_>::is_present::<&str>(move _3, const "show-all") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = const "show-nonprintable";
        _0 = Option::<&str>::Some(_4);
        goto -> bb4;
    }

    bb3: {
        _0 = Option::<&str>::None;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#2}(_1: {closure@src/bin/bat/app.rs:185:26: 185:28}) -> Option<String> {
    let mut _0: std::option::Option<std::string::String>;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _2 = var::<&str>(const "BAT_TABS") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<String, VarError>::ok(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#3}(_1: {closure@src/bin/bat/app.rs:186:27: 186:30}, _2: String) -> Option<usize> {
    debug t => _2;
    let mut _0: std::option::Option<usize>;
    let mut _3: std::result::Result<usize, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: &std::string::String;

    bb0: {
        _5 = &_2;
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = core::str::<impl str>::parse::<usize>(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = std::result::Result::<usize, std::num::ParseIntError>::ok(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#4}(_1: {closure@src/bin/bat/app.rs:198:26: 198:28}) -> Option<String> {
    let mut _0: std::option::Option<std::string::String>;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _2 = var::<&str>(const "BAT_THEME") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<String, VarError>::ok(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#5}(_1: {closure@src/bin/bat/app.rs:199:22: 199:25}, _2: String) -> String {
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: bool;
    let mut _4: &std::string::String;
    let mut _5: &str;
    let mut _6: &&str;
    let mut _7: bool;

    bb0: {
        _7 = const false;
        _7 = const true;
        _4 = &_2;
        _6 = const _;
        _3 = <String as PartialEq<&str>>::eq(move _4, _6) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _5 = HighlightingAssets::default_theme() -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = <String as From<&str>>::from(move _5) -> [return: bb10, unwind: bb7];
    }

    bb4: {
        _7 = const false;
        _0 = move _2;
        goto -> bb5;
    }

    bb5: {
        switchInt(_7) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb10: {
        goto -> bb5;
    }
}

promoted[0] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#5}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "default";
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#6}(_1: {closure@src/bin/bat/app.rs:206:33: 206:35}) -> String {
    let mut _0: std::string::String;
    let mut _2: &str;

    bb0: {
        _2 = HighlightingAssets::default_theme() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <String as From<&str>>::from(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#7}(_1: {closure@src/bin/bat/app.rs:212:35: 212:38}, _2: &str) -> Option<usize> {
    debug t => _2;
    let mut _0: std::option::Option<usize>;
    let mut _3: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _3 = core::str::<impl str>::parse::<usize>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<usize, std::num::ParseIntError>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#8}(_1: {closure@src/bin/bat/app.rs:219:30: 219:34}, _2: clap::Values<'_>) -> std::result::Result<Vec<LineRange>, bat::error::Error> {
    debug vs => _2;
    let mut _0: std::result::Result<std::vec::Vec<bat::line_range::LineRange>, bat::error::Error>;
    let mut _3: std::iter::Map<clap::Values<'_>, for<'a> fn(&'a str) -> std::result::Result<bat::line_range::LineRange, bat::error::Error> {bat::line_range::LineRange::from}>;

    bb0: {
        _3 = <clap::Values<'_> as Iterator>::map::<std::result::Result<LineRange, bat::error::Error>, for<'a> fn(&'a str) -> std::result::Result<LineRange, bat::error::Error> {LineRange::from}>(move _2, LineRange::from) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<clap::Values<'_>, for<'a> fn(&'a str) -> std::result::Result<LineRange, bat::error::Error> {LineRange::from}> as Iterator>::collect::<std::result::Result<Vec<LineRange>, bat::error::Error>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::config::{closure#9}(_1: {closure@src/bin/bat/app.rs:232:22: 232:26}, _2: clap::Values<'_>) -> std::result::Result<Vec<LineRange>, bat::error::Error> {
    debug ws => _2;
    let mut _0: std::result::Result<std::vec::Vec<bat::line_range::LineRange>, bat::error::Error>;
    let mut _3: std::iter::Map<clap::Values<'_>, for<'a> fn(&'a str) -> std::result::Result<bat::line_range::LineRange, bat::error::Error> {bat::line_range::LineRange::from}>;

    bb0: {
        _3 = <clap::Values<'_> as Iterator>::map::<std::result::Result<LineRange, bat::error::Error>, for<'a> fn(&'a str) -> std::result::Result<LineRange, bat::error::Error> {LineRange::from}>(move _2, LineRange::from) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<clap::Values<'_>, for<'a> fn(&'a str) -> std::result::Result<LineRange, bat::error::Error> {LineRange::from}> as Iterator>::collect::<std::result::Result<Vec<LineRange>, bat::error::Error>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::inputs(_1: &app::App) -> std::result::Result<Vec<bat::input::Input<'_>>, bat::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<bat::input::Input<'_>>, bat::error::Error>;
    let mut _2: std::option::Option<clap::Values<'_>>;
    let mut _3: &clap::ArgMatches<'_>;
    let mut _4: isize;
    let _5: &clap::Values<'_>;
    let _6: &&clap::Values<'_>;
    let mut _7: bool;
    let mut _8: &std::option::Option<clap::OsValues<'_>>;
    let _9: std::option::Option<clap::OsValues<'_>>;
    let mut _10: &clap::ArgMatches<'_>;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &clap::OsValues<'_>;
    let _15: clap::OsValues<'_>;
    let mut _16: std::option::Option<clap::OsValues<'_>>;
    let mut _17: &clap::ArgMatches<'_>;
    let mut _18: bat::error::Error;
    let _19: &str;
    let _20: std::option::Option<std::vec::Vec<&std::path::Path>>;
    let mut _21: std::option::Option<clap::OsValues<'_>>;
    let mut _22: &clap::ArgMatches<'_>;
    let mut _24: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
    let mut _25: isize;
    let mut _27: std::boxed::Box<std::iter::Map<std::vec::IntoIter<&std::path::Path>, fn(&std::path::Path) -> std::option::Option<&std::path::Path> {std::option::Option::<&std::path::Path>::Some}>>;
    let mut _28: std::iter::Map<std::vec::IntoIter<&std::path::Path>, fn(&std::path::Path) -> std::option::Option<&std::path::Path> {std::option::Option::<&std::path::Path>::Some}>;
    let mut _29: std::vec::IntoIter<&std::path::Path>;
    let mut _30: std::boxed::Box<std::iter::Repeat<std::option::Option<&std::path::Path>>>;
    let mut _31: std::iter::Repeat<std::option::Option<&std::path::Path>>;
    let mut _32: std::option::Option<&std::path::Path>;
    let mut _34: std::option::Option<clap::OsValues<'_>>;
    let mut _35: &clap::ArgMatches<'_>;
    let mut _36: bool;
    let mut _37: &std::option::Option<std::vec::Vec<&std::path::Path>>;
    let mut _38: std::vec::Vec<bat::input::Input<'_>>;
    let mut _39: std::boxed::Box<[bat::input::Input<'_>]>;
    let mut _40: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: *mut u8;
    let mut _44: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _45: bat::input::Input<'_>;
    let mut _46: std::option::Option<&std::path::Path>;
    let mut _47: std::option::Option<std::option::Option<&std::path::Path>>;
    let mut _48: &mut std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
    let mut _49: std::option::Option<&std::path::Path>;
    let mut _51: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
    let mut _52: isize;
    let mut _54: std::boxed::Box<std::iter::Map<std::slice::Iter<'_, &std::path::Path>, {closure@src/bin/bat/app.rs:271:58: 271:64}>>;
    let mut _55: std::iter::Map<std::slice::Iter<'_, &std::path::Path>, {closure@src/bin/bat/app.rs:271:58: 271:64}>;
    let mut _56: std::slice::Iter<'_, &std::path::Path>;
    let _57: &[&std::path::Path];
    let mut _58: std::boxed::Box<std::iter::Repeat<std::option::Option<&std::path::Path>>>;
    let mut _59: std::iter::Repeat<std::option::Option<&std::path::Path>>;
    let mut _60: std::option::Option<&std::path::Path>;
    let mut _62: std::iter::Zip<std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>, std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>>;
    let mut _63: std::iter::Zip<std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>, std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>>;
    let mut _64: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
    let mut _65: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
    let mut _67: std::option::Option<(std::option::Option<&std::path::Path>, std::option::Option<&std::path::Path>)>;
    let mut _68: &mut std::iter::Zip<std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>, std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>>;
    let mut _69: isize;
    let mut _72: isize;
    let mut _74: bool;
    let mut _75: &&str;
    let _76: &str;
    let mut _77: std::option::Option<&str>;
    let _78: ();
    let mut _79: &mut std::vec::Vec<bat::input::Input<'_>>;
    let mut _80: bat::input::Input<'_>;
    let _81: ();
    let mut _82: &mut std::vec::Vec<bat::input::Input<'_>>;
    let mut _83: bat::input::Input<'_>;
    let mut _84: std::vec::Vec<bat::input::Input<'_>>;
    let mut _86: &clap::Values<'_>;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: &mut std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _90: ();
    let mut _91: *const [bat::input::Input<'_>; 1];
    scope 1 {
        debug filenames => _5;
        debug filenames => _6;
    }
    scope 2 {
        debug filenames => _20;
        let mut _23: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
        let _26: std::vec::Vec<&std::path::Path>;
        scope 3 {
            debug filenames_or_none => _23;
            let _33: std::option::Option<std::vec::Vec<&std::path::Path>>;
            scope 5 {
                debug files => _33;
                let _50: std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>;
                let _53: &std::vec::Vec<&std::path::Path>;
                let mut _92: *const ();
                let mut _93: usize;
                let mut _94: usize;
                let mut _95: usize;
                let mut _96: usize;
                let mut _97: bool;
                scope 6 {
                }
                scope 7 {
                    debug files_or_none => _50;
                    let mut _61: std::vec::Vec<bat::input::Input<'_>>;
                    scope 9 {
                        debug file_input => _61;
                        let mut _66: std::iter::Zip<std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>, std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>>>;
                        scope 10 {
                            debug iter => _66;
                            let _70: std::option::Option<&std::path::Path>;
                            let _71: std::option::Option<&std::path::Path>;
                            scope 11 {
                                debug filepath => _70;
                                debug provided_name => _71;
                                scope 12 {
                                    debug filepath => _73;
                                    let _73: &std::path::Path;
                                    let mut _85: &&str;
                                }
                            }
                        }
                    }
                }
                scope 8 {
                    debug files => _53;
                }
            }
        }
        scope 4 {
            debug filenames => _26;
        }
    }

    bb0: {
        _88 = const false;
        _87 = const false;
        _3 = &((*_1).0: clap::ArgMatches<'_>);
        _2 = ArgMatches::<'_>::values_of::<&str>(move _3, const "file-name") -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _22 = &((*_1).0: clap::ArgMatches<'_>);
        _21 = ArgMatches::<'_>::values_of_os::<&str>(move _22, const "file-name") -> [return: bb13, unwind continue];
    }

    bb3: {
        _5 = &((_2 as Some).0: clap::Values<'_>);
        _6 = &_5;
        _10 = &((*_1).0: clap::ArgMatches<'_>);
        _9 = ArgMatches::<'_>::values_of_os::<&str>(move _10, const "FILE") -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &_9;
        _7 = Option::<OsValues<'_>>::is_some(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _7) -> [0: bb2, otherwise: bb6];
    }

    bb6: {
        _86 = deref_copy (*_6);
        _12 = <clap::Values<'_> as ExactSizeIterator>::len(_86) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = &((*_1).0: clap::ArgMatches<'_>);
        _16 = ArgMatches::<'_>::values_of_os::<&str>(move _17, const "FILE") -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = Option::<OsValues<'_>>::unwrap(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = &_15;
        _13 = <OsValues<'_> as ExactSizeIterator>::len(move _14) -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = Ne(move _12, move _13);
        switchInt(move _11) -> [0: bb2, otherwise: bb11];
    }

    bb11: {
        _19 = const "Must be one file name per input type.";
        _18 = <&str as Into<bat::error::Error>>::into(_19) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = std::result::Result::<Vec<bat::input::Input<'_>>, bat::error::Error>::Err(move _18);
        goto -> bb62;
    }

    bb13: {
        _20 = Option::<OsValues<'_>>::map::<Vec<&Path>, {closure@src/bin/bat/app.rs:254:18: 254:26}>(move _21, const ZeroSized: {closure@src/bin/bat/app.rs:254:18: 254:26}) -> [return: bb14, unwind continue];
    }

    bb14: {
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        _32 = Option::<&Path>::None;
        _31 = std::iter::repeat::<Option<&Path>>(move _32) -> [return: bb21, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _26 = move ((_20 as Some).0: std::vec::Vec<&std::path::Path>);
        _29 = <Vec<&Path> as IntoIterator>::into_iter(move _26) -> [return: bb18, unwind continue];
    }

    bb18: {
        _28 = <std::vec::IntoIter<&Path> as Iterator>::map::<Option<&Path>, fn(&Path) -> Option<&Path> {Option::<&Path>::Some}>(move _29, Option::<&Path>::Some) -> [return: bb19, unwind continue];
    }

    bb19: {
        _27 = Box::<Map<std::vec::IntoIter<&Path>, fn(&Path) -> Option<&Path> {Option::<&Path>::Some}>>::new(move _28) -> [return: bb20, unwind continue];
    }

    bb20: {
        _24 = move _27 as std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>> (PointerCoercion(Unsize));
        goto -> bb23;
    }

    bb21: {
        _30 = Box::<std::iter::Repeat<Option<&Path>>>::new(move _31) -> [return: bb22, unwind continue];
    }

    bb22: {
        _24 = move _30 as std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>> (PointerCoercion(Unsize));
        goto -> bb23;
    }

    bb23: {
        _88 = const true;
        _23 = move _24;
        _35 = &((*_1).0: clap::ArgMatches<'_>);
        _34 = ArgMatches::<'_>::values_of_os::<&str>(move _35, const "FILE") -> [return: bb24, unwind: bb70];
    }

    bb24: {
        _33 = Option::<OsValues<'_>>::map::<Vec<&Path>, {closure@src/bin/bat/app.rs:263:18: 263:22}>(move _34, const ZeroSized: {closure@src/bin/bat/app.rs:263:18: 263:22}) -> [return: bb25, unwind: bb70];
    }

    bb25: {
        _37 = &_33;
        _36 = Option::<Vec<&Path>>::is_none(move _37) -> [return: bb26, unwind: bb65];
    }

    bb26: {
        switchInt(move _36) -> [0: bb33, otherwise: bb27];
    }

    bb27: {
        _41 = SizeOf([bat::input::Input<'_>; 1]);
        _42 = AlignOf([bat::input::Input<'_>; 1]);
        _43 = alloc::alloc::exchange_malloc(move _41, move _42) -> [return: bb28, unwind: bb65];
    }

    bb28: {
         _44 = ShallowInitBox(move _43, [bat::input::Input<'_>; 1]);
        _48 = &mut _23;
        _47 = <Box<dyn Iterator<Item = Option<&Path>>> as Iterator>::next(move _48) -> [return: bb29, unwind: bb68];
    }

    bb29: {
        _49 = Option::<&Path>::None;
        _46 = Option::<Option<&Path>>::unwrap_or(move _47, move _49) -> [return: bb30, unwind: bb68];
    }

    bb30: {
        _45 = new_stdin_input(move _46) -> [return: bb31, unwind: bb68];
    }

    bb31: {
        _91 = (((_44.0: std::ptr::Unique<[bat::input::Input<'_>; 1]>).0: std::ptr::NonNull<[bat::input::Input<'_>; 1]>).0: *const [bat::input::Input<'_>; 1]);
        _92 = _91 as *const () (PtrToPtr);
        _93 = _92 as usize (Transmute);
        _94 = AlignOf([bat::input::Input<'_>; 1]);
        _95 = Sub(_94, const 1_usize);
        _96 = BitAnd(_93, _95);
        _97 = Eq(_96, const 0_usize);
        assert(_97, "misaligned pointer dereference: address must be a multiple of {} but is {}", _94, _93) -> [success: bb72, unwind unreachable];
    }

    bb32: {
        _0 = std::result::Result::<Vec<bat::input::Input<'_>>, bat::error::Error>::Ok(move _38);
        drop(_33) -> [return: bb60, unwind: bb70];
    }

    bb33: {
        _52 = discriminant(_33);
        switchInt(move _52) -> [0: bb34, 1: bb35, otherwise: bb16];
    }

    bb34: {
        _60 = Option::<&Path>::None;
        _59 = std::iter::repeat::<Option<&Path>>(move _60) -> [return: bb40, unwind: bb65];
    }

    bb35: {
        _53 = &((_33 as Some).0: std::vec::Vec<&std::path::Path>);
        _57 = <Vec<&Path> as Deref>::deref(_53) -> [return: bb36, unwind: bb65];
    }

    bb36: {
        _56 = core::slice::<impl [&Path]>::iter(_57) -> [return: bb37, unwind: bb65];
    }

    bb37: {
        _55 = <std::slice::Iter<'_, &Path> as Iterator>::map::<Option<&Path>, {closure@src/bin/bat/app.rs:271:58: 271:64}>(move _56, const ZeroSized: {closure@src/bin/bat/app.rs:271:58: 271:64}) -> [return: bb38, unwind: bb65];
    }

    bb38: {
        _54 = Box::<Map<std::slice::Iter<'_, &Path>, {closure@src/bin/bat/app.rs:271:58: 271:64}>>::new(move _55) -> [return: bb39, unwind: bb65];
    }

    bb39: {
        _51 = move _54 as std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>> (PointerCoercion(Unsize));
        goto -> bb42;
    }

    bb40: {
        _58 = Box::<std::iter::Repeat<Option<&Path>>>::new(move _59) -> [return: bb41, unwind: bb65];
    }

    bb41: {
        _51 = move _58 as std::boxed::Box<dyn std::iter::Iterator<Item = std::option::Option<&std::path::Path>>> (PointerCoercion(Unsize));
        goto -> bb42;
    }

    bb42: {
        _87 = const true;
        _50 = move _51;
        _61 = Vec::<bat::input::Input<'_>>::new() -> [return: bb43, unwind: bb67];
    }

    bb43: {
        _87 = const false;
        _64 = move _50;
        _88 = const false;
        _65 = move _23;
        _63 = <Box<dyn Iterator<Item = Option<&Path>>> as Iterator>::zip::<Box<dyn Iterator<Item = Option<&Path>>>>(move _64, move _65) -> [return: bb44, unwind: bb64];
    }

    bb44: {
        _62 = <Zip<Box<dyn Iterator<Item = Option<&Path>>>, Box<dyn Iterator<Item = Option<&Path>>>> as IntoIterator>::into_iter(move _63) -> [return: bb45, unwind: bb64];
    }

    bb45: {
        _66 = move _62;
        goto -> bb46;
    }

    bb46: {
        _68 = &mut _66;
        _67 = <Zip<Box<dyn Iterator<Item = Option<&Path>>>, Box<dyn Iterator<Item = Option<&Path>>>> as Iterator>::next(_68) -> [return: bb47, unwind: bb63];
    }

    bb47: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb49, 1: bb48, otherwise: bb16];
    }

    bb48: {
        _70 = (((_67 as Some).0: (std::option::Option<&std::path::Path>, std::option::Option<&std::path::Path>)).0: std::option::Option<&std::path::Path>);
        _71 = (((_67 as Some).0: (std::option::Option<&std::path::Path>, std::option::Option<&std::path::Path>)).1: std::option::Option<&std::path::Path>);
        _72 = discriminant(_70);
        switchInt(move _72) -> [1: bb50, otherwise: bb46];
    }

    bb49: {
        drop(_66) -> [return: bb58, unwind: bb64];
    }

    bb50: {
        _73 = ((_70 as Some).0: &std::path::Path);
        _77 = Path::to_str(_73) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        _76 = Option::<&str>::unwrap_or_default(move _77) -> [return: bb52, unwind: bb63];
    }

    bb52: {
        _75 = &_76;
        _85 = const _;
        _74 = <&str as PartialEq>::eq(move _75, _85) -> [return: bb53, unwind: bb63];
    }

    bb53: {
        switchInt(move _74) -> [0: bb56, otherwise: bb54];
    }

    bb54: {
        _79 = &mut _61;
        _80 = new_stdin_input(_71) -> [return: bb55, unwind: bb63];
    }

    bb55: {
        _78 = Vec::<bat::input::Input<'_>>::push(move _79, move _80) -> [return: bb73, unwind: bb63];
    }

    bb56: {
        _82 = &mut _61;
        _83 = new_file_input(_73, _71) -> [return: bb57, unwind: bb63];
    }

    bb57: {
        _81 = Vec::<bat::input::Input<'_>>::push(move _82, move _83) -> [return: bb74, unwind: bb63];
    }

    bb58: {
        _84 = move _61;
        _0 = std::result::Result::<Vec<bat::input::Input<'_>>, bat::error::Error>::Ok(move _84);
        _87 = const false;
        drop(_33) -> [return: bb59, unwind: bb70];
    }

    bb59: {
        _88 = const false;
        goto -> bb62;
    }

    bb60: {
        drop(_23) -> [return: bb61, unwind continue];
    }

    bb61: {
        _88 = const false;
        goto -> bb62;
    }

    bb62: {
        return;
    }

    bb63 (cleanup): {
        drop(_66) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_61) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_33) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_50) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_87) -> [0: bb65, otherwise: bb66];
    }

    bb68 (cleanup): {
        _89 = &mut _44;
        _90 = <Box<[bat::input::Input<'_>; 1]> as Drop>::drop(move _89) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_23) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_88) -> [0: bb71, otherwise: bb69];
    }

    bb71 (cleanup): {
        resume;
    }

    bb72: {
        (*_91) = [move _45];
        _40 = move _44;
        _39 = move _40 as std::boxed::Box<[bat::input::Input<'_>]> (PointerCoercion(Unsize));
        _38 = slice::<impl [bat::input::Input<'_>]>::into_vec::<std::alloc::Global>(move _39) -> [return: bb32, unwind: bb65];
    }

    bb73: {
        goto -> bb46;
    }

    bb74: {
        goto -> bb46;
    }

    bb75 (cleanup): {
        goto -> bb65;
    }
}

promoted[0] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::inputs: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-";
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::inputs::{closure#0}(_1: {closure@src/bin/bat/app.rs:254:18: 254:26}, _2: OsValues<'_>) -> Vec<&Path> {
    debug values => _2;
    let mut _0: std::vec::Vec<&std::path::Path>;
    let mut _3: std::iter::Map<clap::OsValues<'_>, for<'a> fn(&'a std::ffi::OsStr) -> &'a std::path::Path {std::path::Path::new::<std::ffi::OsStr>}>;

    bb0: {
        _3 = <OsValues<'_> as Iterator>::map::<&Path, for<'a> fn(&'a OsStr) -> &'a Path {Path::new::<OsStr>}>(move _2, Path::new::<OsStr>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<OsValues<'_>, for<'a> fn(&'a OsStr) -> &'a Path {Path::new::<OsStr>}> as Iterator>::collect::<Vec<&Path>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::inputs::{closure#1}(_1: {closure@src/bin/bat/app.rs:263:18: 263:22}, _2: OsValues<'_>) -> Vec<&Path> {
    debug vs => _2;
    let mut _0: std::vec::Vec<&std::path::Path>;
    let mut _3: std::iter::Map<clap::OsValues<'_>, for<'a> fn(&'a std::ffi::OsStr) -> &'a std::path::Path {std::path::Path::new::<std::ffi::OsStr>}>;

    bb0: {
        _3 = <OsValues<'_> as Iterator>::map::<&Path, for<'a> fn(&'a OsStr) -> &'a Path {Path::new::<OsStr>}>(move _2, Path::new::<OsStr>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Map<OsValues<'_>, for<'a> fn(&'a OsStr) -> &'a Path {Path::new::<OsStr>}> as Iterator>::collect::<Vec<&Path>>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::inputs::{closure#2}(_1: &mut {closure@src/bin/bat/app.rs:271:58: 271:64}, _2: &&Path) -> Option<&Path> {
    debug name => _2;
    let mut _0: std::option::Option<&std::path::Path>;
    let mut _3: &std::path::Path;

    bb0: {
        _3 = (*_2);
        _0 = Option::<&Path>::Some(move _3);
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components(_1: &app::App) -> std::result::Result<StyleComponents, bat::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<bat::style::StyleComponents, bat::error::Error>;
    let _2: &clap::ArgMatches<'_>;
    let mut _4: std::collections::HashSet<bat::style::StyleComponent>;
    let mut _5: bool;
    let mut _6: &std::option::Option<&str>;
    let _7: std::option::Option<&str>;
    let mut _8: bool;
    let mut _9: std::iter::Cloned<std::slice::Iter<'_, bat::style::StyleComponent>>;
    let mut _10: std::slice::Iter<'_, bat::style::StyleComponent>;
    let mut _11: &[bat::style::StyleComponent];
    let mut _12: bool;
    let mut _13: std::iter::Cloned<std::slice::Iter<'_, bat::style::StyleComponent>>;
    let mut _14: std::slice::Iter<'_, bat::style::StyleComponent>;
    let mut _15: &[bat::style::StyleComponent];
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::option::Option<std::vec::Vec<bat::style::StyleComponent>>>;
    let mut _18: std::result::Result<std::option::Option<std::vec::Vec<bat::style::StyleComponent>>, bat::error::Error>;
    let mut _19: std::option::Option<std::result::Result<std::vec::Vec<bat::style::StyleComponent>, bat::error::Error>>;
    let mut _20: std::option::Option<std::string::String>;
    let mut _21: std::result::Result<std::string::String, std::env::VarError>;
    let mut _22: isize;
    let mut _25: std::iter::Map<std::vec::IntoIter<bat::style::StyleComponent>, {closure@src/bin/bat/app.rs:320:26: 320:33}>;
    let mut _26: std::vec::IntoIter<bat::style::StyleComponent>;
    let mut _27: std::vec::Vec<bat::style::StyleComponent>;
    let mut _28: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>;
    let mut _29: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>;
    let mut _30: std::option::Option<&str>;
    let mut _31: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>;
    let mut _32: {closure@src/bin/bat/app.rs:320:26: 320:33};
    let mut _33: &&app::App;
    let mut _34: std::collections::HashSet<bat::style::StyleComponent>;
    let mut _35: bool;
    let mut _36: &bat::style::StyleComponents;
    let mut _37: bool;
    let mut _38: &mut std::collections::HashSet<bat::style::StyleComponent>;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &ansi_term::ANSIGenericString<'_, str>;
    let _47: ansi_term::ANSIGenericString<'_, str>;
    let mut _48: ansi_term::Colour;
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: bat::style::StyleComponents;
    let mut _62: bool;
    let mut _63: bool;
    scope 1 {
        debug matches => _2;
        let mut _3: bat::style::StyleComponents;
        let _16: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>;
        let _23: std::result::Result<std::convert::Infallible, bat::error::Error>;
        let _24: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>;
        let mut _59: &[bat::style::StyleComponent; 1];
        let mut _60: &[bat::style::StyleComponent; 1];
        let mut _61: &std::option::Option<&str>;
        scope 2 {
            debug styled_components => _3;
            let _52: std::string::String;
            let mut _56: &[&str; 1];
            let mut _57: &[&str; 3];
            let mut _58: &bat::style::StyleComponent;
            scope 8 {
                debug res => _52;
            }
        }
        scope 3 {
            debug env_style_components => _16;
        }
        scope 4 {
            debug residual => _23;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _24;
            scope 7 {
            }
        }
    }

    bb0: {
        _63 = const false;
        _62 = const false;
        _2 = &((*_1).0: clap::ArgMatches<'_>);
        _7 = ArgMatches::<'_>::value_of::<&str>(_2, const "decorations") -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _61 = const _;
        _5 = <Option<&str> as PartialEq>::eq(move _6, _61) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = HashSet::<StyleComponent>::new() -> [return: bb32, unwind continue];
    }

    bb4: {
        _8 = ArgMatches::<'_>::is_present::<&str>(_2, const "number") -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _8) -> [0: bb9, otherwise: bb6];
    }

    bb6: {
        _59 = const _;
        _11 = _59 as &[bat::style::StyleComponent] (PointerCoercion(Unsize));
        _10 = core::slice::<impl [StyleComponent]>::iter(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = <std::slice::Iter<'_, StyleComponent> as Iterator>::cloned::<'_, StyleComponent>(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _4 = <Cloned<std::slice::Iter<'_, StyleComponent>> as Iterator>::collect::<HashSet<StyleComponent>>(move _9) -> [return: bb32, unwind continue];
    }

    bb9: {
        _12 = ArgMatches::<'_>::is_present::<&str>(_2, const "plain") -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _12) -> [0: bb14, otherwise: bb11];
    }

    bb11: {
        _60 = const _;
        _15 = _60 as &[bat::style::StyleComponent] (PointerCoercion(Unsize));
        _14 = core::slice::<impl [StyleComponent]>::iter(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        _13 = <std::slice::Iter<'_, StyleComponent> as Iterator>::cloned::<'_, StyleComponent>(move _14) -> [return: bb13, unwind continue];
    }

    bb13: {
        _4 = <Cloned<std::slice::Iter<'_, StyleComponent>> as Iterator>::collect::<HashSet<StyleComponent>>(move _13) -> [return: bb32, unwind continue];
    }

    bb14: {
        _21 = var::<&str>(const "BAT_STYLE") -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = std::result::Result::<String, VarError>::ok(move _21) -> [return: bb16, unwind continue];
    }

    bb16: {
        _19 = Option::<String>::map::<std::result::Result<Vec<StyleComponent>, bat::error::Error>, {closure@src/bin/bat/app.rs:300:26: 300:37}>(move _20, const ZeroSized: {closure@src/bin/bat/app.rs:300:26: 300:37}) -> [return: bb17, unwind continue];
    }

    bb17: {
        _18 = Option::<std::result::Result<Vec<StyleComponent>, bat::error::Error>>::transpose(move _19) -> [return: bb18, unwind continue];
    }

    bb18: {
        _17 = <std::result::Result<Option<Vec<StyleComponent>>, bat::error::Error> as Try>::branch(move _18) -> [return: bb19, unwind continue];
    }

    bb19: {
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb20, 1: bb22, otherwise: bb21];
    }

    bb20: {
        _24 = move ((_17 as Continue).0: std::option::Option<std::vec::Vec<bat::style::StyleComponent>>);
        _63 = const true;
        _16 = move _24;
        _30 = ArgMatches::<'_>::value_of::<&str>(_2, const "style") -> [return: bb24, unwind: bb54];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        _23 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<StyleComponents, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _23) -> [return: bb23, unwind continue];
    }

    bb23: {
        _63 = const false;
        goto -> bb46;
    }

    bb24: {
        _29 = Option::<&str>::map::<Vec<StyleComponent>, {closure@src/bin/bat/app.rs:310:26: 310:34}>(move _30, const ZeroSized: {closure@src/bin/bat/app.rs:310:26: 310:34}) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _63 = const false;
        _31 = move _16;
        _28 = Option::<Vec<StyleComponent>>::or(move _29, move _31) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        _27 = Option::<Vec<StyleComponent>>::unwrap_or_else::<{closure@src/bin/bat/app.rs:318:37: 318:39}>(move _28, const ZeroSized: {closure@src/bin/bat/app.rs:318:37: 318:39}) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        _26 = <Vec<StyleComponent> as IntoIterator>::into_iter(move _27) -> [return: bb28, unwind: bb54];
    }

    bb28: {
        _33 = &_1;
        _32 = {closure@src/bin/bat/app.rs:320:26: 320:33} { self: move _33 };
        _25 = <std::vec::IntoIter<StyleComponent> as Iterator>::map::<&[StyleComponent], {closure@src/bin/bat/app.rs:320:26: 320:33}>(move _26, move _32) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        _62 = const true;
        _34 = HashSet::<StyleComponent>::new() -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _62 = const false;
        _4 = <Map<std::vec::IntoIter<StyleComponent>, {closure@src/bin/bat/app.rs:320:26: 320:33}> as Iterator>::fold::<HashSet<StyleComponent>, {closure@src/bin/bat/app.rs:321:43: 321:64}>(move _25, move _34, const ZeroSized: {closure@src/bin/bat/app.rs:321:43: 321:64}) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _62 = const false;
        _63 = const false;
        goto -> bb32;
    }

    bb32: {
        _3 = StyleComponents(move _4);
        _36 = &_3;
        _35 = StyleComponents::grid(move _36) -> [return: bb33, unwind: bb49];
    }

    bb33: {
        switchInt(move _35) -> [0: bb45, otherwise: bb34];
    }

    bb34: {
        _38 = &mut (_3.0: std::collections::HashSet<bat::style::StyleComponent>);
        _58 = const _;
        _37 = HashSet::<StyleComponent>::remove::<StyleComponent>(move _38, _58) -> [return: bb35, unwind: bb49];
    }

    bb35: {
        switchInt(move _37) -> [0: bb45, otherwise: bb36];
    }

    bb36: {
        _57 = const _;
        _41 = _57 as &[&str] (PointerCoercion(Unsize));
        _48 = ansi_term::Colour::Yellow;
        _47 = ansi_term::display::<impl Colour>::paint::<'_, &str, str>(move _48, const "[bat warning]") -> [return: bb37, unwind: bb49];
    }

    bb37: {
        _46 = &_47;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<ANSIGenericString<'_, str>>(_46) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _56 = const _;
        _54 = _56 as &[&str] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_const(move _54) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        _52 = format(move _53) -> [return: bb40, unwind: bb48];
    }

    bb40: {
        _51 = move _52;
        _50 = &_51;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<String>(_50) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        _44 = [move _45, move _49];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        _39 = _eprint(move _40) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        drop(_51) -> [return: bb44, unwind: bb48];
    }

    bb44: {
        drop(_47) -> [return: bb45, unwind: bb49];
    }

    bb45: {
        _55 = move _3;
        _0 = std::result::Result::<StyleComponents, bat::error::Error>::Ok(move _55);
        goto -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_51) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_47) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_3) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        drop(_25) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_62) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_16) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_63) -> [0: bb50, otherwise: bb53];
    }
}

promoted[0] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Style 'rule' is a subset of style 'grid', 'rule' will not be visible."];
        _0 = &_1;
        return;
    }
}

promoted[1] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &StyleComponent = {
    let mut _0: &bat::style::StyleComponent;
    let mut _1: bat::style::StyleComponent;

    bb0: {
        _1 = Rule;
        _0 = &_1;
        return;
    }
}

promoted[3] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &[StyleComponent; 1] = {
    let mut _0: &[bat::style::StyleComponent; 1];
    let mut _1: [bat::style::StyleComponent; 1];
    let mut _2: bat::style::StyleComponent;

    bb0: {
        _2 = LineNumbers;
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[4] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &[StyleComponent; 1] = {
    let mut _0: &[bat::style::StyleComponent; 1];
    let mut _1: [bat::style::StyleComponent; 1];
    let mut _2: bat::style::StyleComponent;

    bb0: {
        _2 = Plain;
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[5] in app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components: &Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "never";
        _2 = &(*_3);
        _1 = Option::<&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#0}(_1: {closure@src/bin/bat/app.rs:300:26: 300:37}, _2: String) -> std::result::Result<Vec<StyleComponent>, bat::error::Error> {
    debug style_str => _2;
    let mut _0: std::result::Result<std::vec::Vec<bat::style::StyleComponent>, bat::error::Error>;
    let mut _3: std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:303:34: 303:37}>;
    let mut _4: std::str::Split<'_, char>;
    let _5: &str;
    let mut _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = core::str::<impl str>::split::<'_, char>(_5, const ',') -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = <std::str::Split<'_, char> as Iterator>::map::<std::result::Result<StyleComponent, bat::error::Error>, {closure@src/bin/bat/app.rs:303:34: 303:37}>(move _4, const ZeroSized: {closure@src/bin/bat/app.rs:303:34: 303:37}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = <Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:303:34: 303:37}> as Iterator>::collect::<std::result::Result<Vec<StyleComponent>, bat::error::Error>>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#0}::{closure#0}(_1: &mut {closure@src/bin/bat/app.rs:303:34: 303:37}, _2: &str) -> std::result::Result<StyleComponent, bat::error::Error> {
    debug x => _2;
    let mut _0: std::result::Result<bat::style::StyleComponent, bat::error::Error>;
    let _3: &&str;
    let mut _4: &str;

    bb0: {
        _3 = &_2;
        _4 = deref_copy (*_3);
        _0 = <StyleComponent as FromStr>::from_str(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#1}(_1: {closure@src/bin/bat/app.rs:310:26: 310:34}, _2: &str) -> Vec<StyleComponent> {
    debug styles => _2;
    let mut _0: std::vec::Vec<bat::style::StyleComponent>;
    let mut _3: std::iter::FilterMap<std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:313:34: 313:41}>, {closure@src/bin/bat/app.rs:314:41: 314:48}>;
    let mut _4: std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:313:34: 313:41}>;
    let mut _5: std::str::Split<'_, char>;

    bb0: {
        _5 = core::str::<impl str>::split::<'_, char>(_2, const ',') -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::str::Split<'_, char> as Iterator>::map::<std::result::Result<StyleComponent, bat::error::Error>, {closure@src/bin/bat/app.rs:313:34: 313:41}>(move _5, const ZeroSized: {closure@src/bin/bat/app.rs:313:34: 313:41}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:313:34: 313:41}> as Iterator>::filter_map::<StyleComponent, {closure@src/bin/bat/app.rs:314:41: 314:48}>(move _4, const ZeroSized: {closure@src/bin/bat/app.rs:314:41: 314:48}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = <FilterMap<Map<std::str::Split<'_, char>, {closure@src/bin/bat/app.rs:313:34: 313:41}>, {closure@src/bin/bat/app.rs:314:41: 314:48}> as Iterator>::collect::<Vec<StyleComponent>>(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#1}::{closure#0}(_1: &mut {closure@src/bin/bat/app.rs:313:34: 313:41}, _2: &str) -> std::result::Result<StyleComponent, bat::error::Error> {
    debug style => _2;
    let mut _0: std::result::Result<bat::style::StyleComponent, bat::error::Error>;

    bb0: {
        _0 = core::str::<impl str>::parse::<StyleComponent>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#1}::{closure#1}(_1: &mut {closure@src/bin/bat/app.rs:314:41: 314:48}, _2: std::result::Result<StyleComponent, bat::error::Error>) -> Option<StyleComponent> {
    debug style => _2;
    let mut _0: std::option::Option<bat::style::StyleComponent>;

    bb0: {
        _0 = std::result::Result::<StyleComponent, bat::error::Error>::ok(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#2}(_1: {closure@src/bin/bat/app.rs:318:37: 318:39}) -> Vec<StyleComponent> {
    let mut _0: std::vec::Vec<bat::style::StyleComponent>;
    let mut _2: std::boxed::Box<[bat::style::StyleComponent]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[bat::style::StyleComponent; 1]>;
    let mut _7: bat::style::StyleComponent;
    let mut _8: *const [bat::style::StyleComponent; 1];
    let mut _9: *const ();
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([bat::style::StyleComponent; 1]);
        _4 = AlignOf([bat::style::StyleComponent; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [bat::style::StyleComponent; 1]);
        _7 = bat::style::StyleComponent::Full;
        _8 = (((_6.0: std::ptr::Unique<[bat::style::StyleComponent; 1]>).0: std::ptr::NonNull<[bat::style::StyleComponent; 1]>).0: *const [bat::style::StyleComponent; 1]);
        _9 = _8 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf([bat::style::StyleComponent; 1]);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        return;
    }

    bb3: {
        (*_8) = [move _7];
        _2 = move _6 as std::boxed::Box<[bat::style::StyleComponent]> (PointerCoercion(Unsize));
        _0 = slice::<impl [StyleComponent]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#3}(_1: &mut {closure@src/bin/bat/app.rs:320:26: 320:33}, _2: StyleComponent) -> &[StyleComponent] {
    debug style => _2;
    debug self => (*((*_1).0: &&app::App));
    let mut _0: &[bat::style::StyleComponent];
    let mut _3: bool;
    let mut _4: &&app::App;
    let mut _5: &app::App;

    bb0: {
        _4 = deref_copy ((*_1).0: &&app::App);
        _5 = deref_copy (*_4);
        _3 = ((*_5).1: bool);
        _0 = StyleComponent::components(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn app::<impl at src/bin/bat/app.rs:39:1: 39:9>::style_components::{closure#4}(_1: &mut {closure@src/bin/bat/app.rs:321:43: 321:64}, _2: HashSet<StyleComponent>, _3: &[StyleComponent]) -> HashSet<StyleComponent> {
    debug acc => _2;
    debug components => _3;
    let mut _0: std::collections::HashSet<bat::style::StyleComponent>;
    let _4: ();
    let mut _5: &mut std::collections::HashSet<bat::style::StyleComponent>;
    let mut _6: std::iter::Cloned<std::slice::Iter<'_, bat::style::StyleComponent>>;
    let mut _7: std::slice::Iter<'_, bat::style::StyleComponent>;

    bb0: {
        _5 = &mut _2;
        _7 = core::slice::<impl [StyleComponent]>::iter(_3) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = <std::slice::Iter<'_, StyleComponent> as Iterator>::cloned::<'_, StyleComponent>(move _7) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _4 = <HashSet<StyleComponent> as Extend<StyleComponent>>::extend::<Cloned<std::slice::Iter<'_, StyleComponent>>>(move _5, move _6) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = move _2;
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn assets::config_dir() -> Cow<'_, str> {
    let mut _0: std::borrow::Cow<'_, str>;
    let _1: &std::path::Path;
    let _2: &directories::BatProjectDirs;
    let _3: &directories::PROJECT_DIRS;

    bb0: {
        _3 = const {alloc4: &PROJECT_DIRS};
        _2 = <PROJECT_DIRS as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = BatProjectDirs::config_dir(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Path::to_string_lossy(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

fn assets::cache_dir() -> Cow<'_, str> {
    let mut _0: std::borrow::Cow<'_, str>;
    let _1: &std::path::Path;
    let _2: &directories::BatProjectDirs;
    let _3: &directories::PROJECT_DIRS;

    bb0: {
        _3 = const {alloc4: &PROJECT_DIRS};
        _2 = <PROJECT_DIRS as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = BatProjectDirs::cache_dir(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Path::to_string_lossy(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

fn clear_assets() -> () {
    let mut _0: ();
    let _1: std::path::PathBuf;
    let _2: &std::path::Path;
    let _3: &directories::BatProjectDirs;
    let _4: &directories::PROJECT_DIRS;
    let _6: &std::path::Path;
    let _7: &directories::BatProjectDirs;
    let _8: &directories::PROJECT_DIRS;
    let _10: &std::path::Path;
    let _11: &directories::BatProjectDirs;
    let _12: &directories::PROJECT_DIRS;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: std::option::Option<()>;
    let mut _17: std::result::Result<(), std::io::Error>;
    let mut _18: std::path::PathBuf;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let _25: std::option::Option<()>;
    let mut _26: std::result::Result<(), std::io::Error>;
    let mut _27: std::path::PathBuf;
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: std::option::Option<()>;
    let mut _35: std::result::Result<(), std::io::Error>;
    let mut _36: std::path::PathBuf;
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    scope 1 {
        debug theme_set_path => _1;
        let _5: std::path::PathBuf;
        scope 2 {
            debug syntax_set_path => _5;
            let _9: std::path::PathBuf;
            scope 3 {
                debug metadata_file => _9;
                let mut _40: &[&str; 1];
                let mut _41: &[&str; 1];
                let mut _42: &[&str; 1];
                let mut _43: &[&str; 1];
                let mut _44: &[&str; 1];
                let mut _45: &[&str; 1];
            }
        }
    }

    bb0: {
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _4 = const {alloc4: &PROJECT_DIRS};
        _3 = <PROJECT_DIRS as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = BatProjectDirs::cache_dir(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _48 = const true;
        _1 = Path::join::<&str>(_2, const "themes.bin") -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = const {alloc4: &PROJECT_DIRS};
        _7 = <PROJECT_DIRS as Deref>::deref(_8) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _6 = BatProjectDirs::cache_dir(_7) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _5 = Path::join::<&str>(_6, const "syntaxes.bin") -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _47 = const true;
        _12 = const {alloc4: &PROJECT_DIRS};
        _11 = <PROJECT_DIRS as Deref>::deref(_12) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _10 = BatProjectDirs::cache_dir(_11) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _9 = Path::join::<&str>(_10, const "metadata.yaml") -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _46 = const true;
        _45 = const _;
        _15 = _45 as &[&str] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _13 = _print(move _14) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _48 = const false;
        _18 = move _1;
        _17 = remove_file::<PathBuf>(move _18) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _16 = std::result::Result::<(), std::io::Error>::ok(move _17) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _44 = const _;
        _21 = _44 as &[&str] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _19 = _print(move _20) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _43 = const _;
        _24 = _43 as &[&str] (PointerCoercion(Unsize));
        _23 = Arguments::<'_>::new_const(move _24) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _22 = _print(move _23) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _47 = const false;
        _27 = move _5;
        _26 = remove_file::<PathBuf>(move _27) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _25 = std::result::Result::<(), std::io::Error>::ok(move _26) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _42 = const _;
        _30 = _42 as &[&str] (PointerCoercion(Unsize));
        _29 = Arguments::<'_>::new_const(move _30) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _28 = _print(move _29) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        _41 = const _;
        _33 = _41 as &[&str] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_const(move _33) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _31 = _print(move _32) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _46 = const false;
        _36 = move _9;
        _35 = remove_file::<PathBuf>(move _36) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        _34 = std::result::Result::<(), std::io::Error>::ok(move _35) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _40 = const _;
        _39 = _40 as &[&str] (PointerCoercion(Unsize));
        _38 = Arguments::<'_>::new_const(move _39) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        _37 = _print(move _38) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        _46 = const false;
        _47 = const false;
        _48 = const false;
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_9) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_46) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_5) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_47) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_48) -> [0: bb28, otherwise: bb33];
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

promoted[0] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "okay\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Clearing metadata file ... "];
        _0 = &_1;
        return;
    }
}

promoted[2] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "okay\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Clearing syntax set cache ... "];
        _0 = &_1;
        return;
    }
}

promoted[4] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "okay\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in clear_assets: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Clearing theme set cache ... "];
        _0 = &_1;
        return;
    }
}

fn assets_from_cache_or_binary() -> std::result::Result<HighlightingAssets, bat::error::Error> {
    let mut _0: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let _1: &std::path::Path;
    let _2: &directories::BatProjectDirs;
    let _3: &directories::PROJECT_DIRS;
    let mut _4: std::option::Option<bat::assets_metadata::AssetsMetadata>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::option::Option<bat::assets_metadata::AssetsMetadata>>;
    let mut _6: std::result::Result<std::option::Option<bat::assets_metadata::AssetsMetadata>, bat::error::Error>;
    let _7: &&std::path::Path;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: bool;
    let mut _14: &bat::assets_metadata::AssetsMetadata;
    let _15: &str;
    let mut _16: bat::error::Error;
    let mut _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &std::borrow::Cow<'_, str>;
    let _26: std::borrow::Cow<'_, str>;
    let mut _27: &std::path::Path;
    let mut _28: bat::assets::HighlightingAssets;
    let mut _29: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let _30: &&std::path::Path;
    let mut _32: &std::path::Path;
    let mut _33: &std::path::Path;
    let mut _34: bool;
    let mut _35: isize;
    scope 1 {
        debug cache_dir => _1;
        scope 2 {
            debug metadata => _12;
            let _9: std::result::Result<std::convert::Infallible, bat::error::Error>;
            let _10: std::option::Option<bat::assets_metadata::AssetsMetadata>;
            let _12: bat::assets_metadata::AssetsMetadata;
            let _18: std::string::String;
            let mut _31: &[&str; 2];
            scope 3 {
                debug residual => _9;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _10;
                scope 6 {
                }
            }
            scope 7 {
                debug res => _18;
            }
        }
    }

    bb0: {
        _34 = const false;
        _3 = const {alloc4: &PROJECT_DIRS};
        _2 = <PROJECT_DIRS as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = BatProjectDirs::cache_dir(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_1;
        _32 = deref_copy (*_7);
        _6 = AssetsMetadata::load_from_folder(_32) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <std::result::Result<Option<AssetsMetadata>, bat::error::Error> as Try>::branch(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _10 = move ((_5 as Continue).0: std::option::Option<bat::assets_metadata::AssetsMetadata>);
        _34 = const true;
        _4 = move _10;
        _11 = discriminant(_4);
        switchInt(move _11) -> [1: bb8, otherwise: bb29];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<HighlightingAssets, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _9) -> [return: bb20, unwind continue];
    }

    bb8: {
        _34 = const false;
        _12 = move ((_4 as Some).0: bat::assets_metadata::AssetsMetadata);
        _14 = &_12;
        _15 = const "0.18.3";
        _13 = AssetsMetadata::is_compatible_with(move _14, _15) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        switchInt(move _13) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        drop(_12) -> [return: bb29, unwind continue];
    }

    bb11: {
        _31 = const _;
        _20 = _31 as &[&str] (PointerCoercion(Unsize));
        _27 = _1;
        _26 = Path::to_string_lossy(move _27) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _25 = &_26;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_25) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _18 = format(move _19) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        drop(_26) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _17 = move _18;
        _16 = <String as Into<bat::error::Error>>::into(move _17) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _0 = std::result::Result::<HighlightingAssets, bat::error::Error>::Err(move _16);
        drop(_12) -> [return: bb20, unwind continue];
    }

    bb18: {
        _28 = std::result::Result::<HighlightingAssets, bat::error::Error>::unwrap_or_else::<{closure@src/bin/bat/assets.rs:57:25: 57:28}>(move _29, const ZeroSized: {closure@src/bin/bat/assets.rs:57:25: 57:28}) -> [return: bb19, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<HighlightingAssets, bat::error::Error>::Ok(move _28);
        goto -> bb21;
    }

    bb20: {
        _34 = const false;
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_18) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_26) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        _34 = const false;
        _30 = &_1;
        _33 = deref_copy (*_30);
        _29 = HighlightingAssets::from_cache(_33) -> [return: bb18, unwind continue];
    }

    bb27: {
        switchInt(_34) -> [0: bb26, otherwise: bb28];
    }

    bb28: {
        drop(((_4 as Some).0: bat::assets_metadata::AssetsMetadata)) -> [return: bb26, unwind continue];
    }

    bb29: {
        _35 = discriminant(_4);
        switchInt(move _35) -> [1: bb27, otherwise: bb26];
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

promoted[0] in assets_from_cache_or_binary: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The binary caches for the user-customized syntaxes and themes in '", const "' are not compatible with this version of bat (0.18.3). To solve this, either rebuild the cache (bat cache --build) or remove the custom syntaxes/themes (bat cache --clear).\nFor more information, see:\n\n  https://github.com/sharkdp/bat#adding-new-syntaxes--language-definitions"];
        _0 = &_1;
        return;
    }
}

fn assets_from_cache_or_binary::{closure#0}(_1: {closure@src/bin/bat/assets.rs:57:25: 57:28}, _2: bat::error::Error) -> HighlightingAssets {
    let mut _0: bat::assets::HighlightingAssets;

    bb0: {
        _0 = HighlightingAssets::from_binary() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn build_app(_1: bool) -> clap::App<'_, '_> {
    debug interactive_output => _1;
    let mut _0: clap::App<'_, '_>;
    let _2: clap::AppSettings;
    let mut _3: bool;
    let mut _4: &std::option::Option<std::ffi::OsString>;
    let _5: std::option::Option<std::ffi::OsString>;
    let mut _7: clap::App<'_, '_>;
    let mut _8: clap::App<'_, '_>;
    let mut _9: clap::App<'_, '_>;
    let mut _10: clap::App<'_, '_>;
    let mut _11: clap::App<'_, '_>;
    let mut _12: clap::App<'_, '_>;
    let mut _13: clap::App<'_, '_>;
    let mut _14: clap::App<'_, '_>;
    let mut _15: clap::App<'_, '_>;
    let mut _16: clap::App<'_, '_>;
    let mut _17: clap::App<'_, '_>;
    let mut _18: clap::App<'_, '_>;
    let mut _19: clap::App<'_, '_>;
    let mut _20: clap::App<'_, '_>;
    let mut _21: clap::App<'_, '_>;
    let mut _22: clap::App<'_, '_>;
    let mut _23: clap::App<'_, '_>;
    let mut _24: clap::App<'_, '_>;
    let mut _25: clap::App<'_, '_>;
    let mut _26: clap::AppSettings;
    let mut _27: clap::AppSettings;
    let mut _28: clap::AppSettings;
    let mut _29: clap::AppSettings;
    let mut _30: clap::AppSettings;
    let mut _31: clap::AppSettings;
    let mut _32: clap::AppSettings;
    let mut _33: clap::AppSettings;
    let mut _34: clap::Arg<'_, '_>;
    let mut _35: clap::Arg<'_, '_>;
    let mut _36: clap::Arg<'_, '_>;
    let mut _37: clap::Arg<'_, '_>;
    let mut _38: clap::Arg<'_, '_>;
    let _39: &str;
    let _40: &str;
    let _41: &str;
    let mut _42: clap::Arg<'_, '_>;
    let mut _43: clap::Arg<'_, '_>;
    let mut _44: clap::Arg<'_, '_>;
    let mut _45: clap::Arg<'_, '_>;
    let mut _46: clap::Arg<'_, '_>;
    let mut _47: clap::Arg<'_, '_>;
    let mut _48: clap::Arg<'_, '_>;
    let _49: &str;
    let _50: &str;
    let _51: &str;
    let _52: &str;
    let _53: &str;
    let mut _54: clap::Arg<'_, '_>;
    let mut _55: clap::Arg<'_, '_>;
    let mut _56: clap::Arg<'_, '_>;
    let mut _57: clap::Arg<'_, '_>;
    let mut _58: clap::Arg<'_, '_>;
    let mut _59: clap::Arg<'_, '_>;
    let mut _60: clap::Arg<'_, '_>;
    let mut _61: clap::Arg<'_, '_>;
    let _62: &str;
    let _63: &str;
    let _64: &str;
    let _65: &str;
    let _66: &str;
    let _67: &str;
    let mut _68: clap::Arg<'_, '_>;
    let mut _69: clap::Arg<'_, '_>;
    let mut _70: clap::Arg<'_, '_>;
    let mut _71: clap::Arg<'_, '_>;
    let mut _72: clap::Arg<'_, '_>;
    let mut _73: clap::Arg<'_, '_>;
    let mut _74: clap::Arg<'_, '_>;
    let _75: &str;
    let _76: &str;
    let _77: &str;
    let _78: &str;
    let _79: &str;
    let mut _80: clap::Arg<'_, '_>;
    let mut _81: clap::Arg<'_, '_>;
    let mut _82: clap::Arg<'_, '_>;
    let mut _83: clap::Arg<'_, '_>;
    let mut _84: clap::Arg<'_, '_>;
    let mut _85: clap::Arg<'_, '_>;
    let mut _86: clap::Arg<'_, '_>;
    let mut _87: clap::Arg<'_, '_>;
    let mut _88: clap::Arg<'_, '_>;
    let _89: &str;
    let _90: &str;
    let _91: &str;
    let _92: &str;
    let _93: &str;
    let mut _94: clap::Arg<'_, '_>;
    let mut _95: clap::Arg<'_, '_>;
    let mut _96: clap::Arg<'_, '_>;
    let mut _97: clap::Arg<'_, '_>;
    let mut _98: clap::Arg<'_, '_>;
    let mut _99: clap::Arg<'_, '_>;
    let mut _100: clap::Arg<'_, '_>;
    let mut _101: clap::Arg<'_, '_>;
    let _102: &str;
    let _103: &str;
    let _104: &str;
    let _105: &str;
    let _106: &str;
    let mut _107: clap::App<'_, '_>;
    let mut _108: clap::App<'_, '_>;
    let mut _109: clap::App<'_, '_>;
    let mut _110: clap::Arg<'_, '_>;
    let mut _111: clap::Arg<'_, '_>;
    let mut _112: clap::Arg<'_, '_>;
    let mut _113: clap::Arg<'_, '_>;
    let mut _114: clap::Arg<'_, '_>;
    let _115: &str;
    let _116: &str;
    let _117: &str;
    let _118: &str;
    let mut _119: clap::Arg<'_, '_>;
    let mut _120: clap::Arg<'_, '_>;
    let mut _121: clap::Arg<'_, '_>;
    let mut _122: clap::Arg<'_, '_>;
    let mut _123: clap::Arg<'_, '_>;
    let mut _124: clap::Arg<'_, '_>;
    let mut _125: clap::Arg<'_, '_>;
    let mut _126: clap::Arg<'_, '_>;
    let _127: &str;
    let _128: &str;
    let _129: &str;
    let _130: &str;
    let _131: &str;
    let mut _132: clap::App<'_, '_>;
    let mut _133: clap::App<'_, '_>;
    let mut _134: clap::App<'_, '_>;
    let mut _135: clap::App<'_, '_>;
    let mut _136: clap::App<'_, '_>;
    let mut _137: clap::App<'_, '_>;
    let mut _138: clap::App<'_, '_>;
    let mut _139: clap::App<'_, '_>;
    let mut _140: clap::App<'_, '_>;
    let mut _141: clap::App<'_, '_>;
    let mut _142: clap::App<'_, '_>;
    let mut _143: clap::App<'_, '_>;
    let mut _144: clap::App<'_, '_>;
    let mut _145: clap::App<'_, '_>;
    let mut _146: clap::App<'_, '_>;
    let mut _147: clap::App<'_, '_>;
    let mut _148: clap::App<'_, '_>;
    let mut _149: clap::App<'_, '_>;
    let mut _150: clap::App<'_, '_>;
    let mut _151: clap::App<'_, '_>;
    let mut _152: clap::App<'_, '_>;
    let mut _153: clap::App<'_, '_>;
    let mut _154: clap::App<'_, '_>;
    let mut _155: clap::App<'_, '_>;
    let mut _156: clap::App<'_, '_>;
    let mut _157: clap::App<'_, '_>;
    let mut _158: clap::App<'_, '_>;
    let mut _159: clap::Arg<'_, '_>;
    let mut _160: clap::Arg<'_, '_>;
    let mut _161: clap::Arg<'_, '_>;
    let mut _162: clap::Arg<'_, '_>;
    let mut _163: clap::Arg<'_, '_>;
    let mut _164: clap::Arg<'_, '_>;
    let mut _165: clap::Arg<'_, '_>;
    let mut _166: clap::Arg<'_, '_>;
    let _167: &str;
    let _168: &str;
    let _169: &str;
    let _170: &str;
    let _171: &str;
    let _172: &str;
    let mut _173: clap::Arg<'_, '_>;
    let mut _174: clap::Arg<'_, '_>;
    let mut _175: clap::Arg<'_, '_>;
    let mut _176: clap::Arg<'_, '_>;
    let mut _177: clap::Arg<'_, '_>;
    let mut _178: clap::Arg<'_, '_>;
    let mut _179: clap::Arg<'_, '_>;
    let mut _180: clap::Arg<'_, '_>;
    let mut _181: clap::Arg<'_, '_>;
    let mut _182: clap::Arg<'_, '_>;
    let _183: &str;
    let _184: &str;
    let _185: &str;
    let _186: &str;
    let mut _187: &[&str];
    let _188: &str;
    let _189: &str;
    let _190: &str;
    let mut _191: clap::Arg<'_, '_>;
    let mut _192: clap::Arg<'_, '_>;
    let mut _193: clap::Arg<'_, '_>;
    let mut _194: clap::Arg<'_, '_>;
    let mut _195: clap::Arg<'_, '_>;
    let mut _196: clap::Arg<'_, '_>;
    let mut _197: clap::Arg<'_, '_>;
    let mut _198: clap::Arg<'_, '_>;
    let _199: &str;
    let _200: &str;
    let _201: &str;
    let _202: &str;
    let mut _203: clap::Arg<'_, '_>;
    let mut _204: clap::Arg<'_, '_>;
    let mut _205: clap::Arg<'_, '_>;
    let mut _206: clap::Arg<'_, '_>;
    let mut _207: clap::Arg<'_, '_>;
    let mut _208: clap::Arg<'_, '_>;
    let _209: &str;
    let _210: &str;
    let _211: &str;
    let _212: &str;
    let _213: &str;
    let mut _214: clap::Arg<'_, '_>;
    let mut _215: clap::Arg<'_, '_>;
    let mut _216: clap::Arg<'_, '_>;
    let mut _217: clap::Arg<'_, '_>;
    let mut _218: clap::Arg<'_, '_>;
    let mut _219: clap::Arg<'_, '_>;
    let mut _220: clap::Arg<'_, '_>;
    let mut _221: clap::Arg<'_, '_>;
    let mut _222: clap::Arg<'_, '_>;
    let mut _223: clap::Arg<'_, '_>;
    let _224: &str;
    let _225: &str;
    let _226: &str;
    let _227: &str;
    let mut _228: &[&str];
    let _229: &str;
    let _230: &str;
    let _231: &str;
    let mut _232: clap::Arg<'_, '_>;
    let mut _233: clap::Arg<'_, '_>;
    let mut _234: clap::Arg<'_, '_>;
    let mut _235: clap::Arg<'_, '_>;
    let mut _236: clap::Arg<'_, '_>;
    let mut _237: clap::Arg<'_, '_>;
    let mut _238: clap::Arg<'_, '_>;
    let mut _239: clap::Arg<'_, '_>;
    let mut _240: clap::Arg<'_, '_>;
    let _241: &str;
    let _242: &str;
    let _243: &str;
    let mut _244: &[&str];
    let _245: &str;
    let _246: &str;
    let _247: &str;
    let mut _248: clap::Arg<'_, '_>;
    let mut _249: clap::Arg<'_, '_>;
    let mut _250: clap::Arg<'_, '_>;
    let mut _251: clap::Arg<'_, '_>;
    let mut _252: clap::Arg<'_, '_>;
    let mut _253: clap::Arg<'_, '_>;
    let mut _254: clap::Arg<'_, '_>;
    let mut _255: clap::Arg<'_, '_>;
    let mut _256: clap::Arg<'_, '_>;
    let mut _257: clap::Arg<'_, '_>;
    let _258: &str;
    let _259: &str;
    let _260: &str;
    let _261: &str;
    let mut _262: &[&str];
    let _263: &str;
    let _264: &str;
    let _265: &str;
    let mut _266: clap::Arg<'_, '_>;
    let mut _267: clap::Arg<'_, '_>;
    let mut _268: clap::Arg<'_, '_>;
    let mut _269: clap::Arg<'_, '_>;
    let mut _270: clap::Arg<'_, '_>;
    let mut _271: clap::Arg<'_, '_>;
    let mut _272: clap::Arg<'_, '_>;
    let mut _273: clap::Arg<'_, '_>;
    let _274: &str;
    let _275: &str;
    let _276: &str;
    let _277: &str;
    let _278: &str;
    let _279: &str;
    let mut _280: clap::Arg<'_, '_>;
    let mut _281: clap::Arg<'_, '_>;
    let mut _282: clap::Arg<'_, '_>;
    let mut _283: clap::Arg<'_, '_>;
    let mut _284: clap::Arg<'_, '_>;
    let mut _285: clap::Arg<'_, '_>;
    let mut _286: clap::Arg<'_, '_>;
    let mut _287: clap::Arg<'_, '_>;
    let mut _288: clap::Arg<'_, '_>;
    let mut _289: clap::Arg<'_, '_>;
    let _290: &str;
    let _291: &str;
    let _292: &str;
    let _293: &str;
    let mut _294: &[&str];
    let _295: &str;
    let _296: &str;
    let _297: &str;
    let mut _298: clap::Arg<'_, '_>;
    let mut _299: clap::Arg<'_, '_>;
    let mut _300: clap::Arg<'_, '_>;
    let mut _301: clap::Arg<'_, '_>;
    let mut _302: clap::Arg<'_, '_>;
    let mut _303: clap::Arg<'_, '_>;
    let mut _304: clap::Arg<'_, '_>;
    let _305: &str;
    let _306: &str;
    let _307: &str;
    let mut _308: clap::Arg<'_, '_>;
    let mut _309: clap::Arg<'_, '_>;
    let mut _310: clap::Arg<'_, '_>;
    let mut _311: clap::Arg<'_, '_>;
    let mut _312: clap::Arg<'_, '_>;
    let mut _313: clap::Arg<'_, '_>;
    let mut _314: clap::Arg<'_, '_>;
    let mut _315: clap::Arg<'_, '_>;
    let _316: &str;
    let _317: &str;
    let _318: &str;
    let _319: &str;
    let _320: &str;
    let _321: &str;
    let mut _322: clap::Arg<'_, '_>;
    let mut _323: clap::Arg<'_, '_>;
    let mut _324: clap::Arg<'_, '_>;
    let mut _325: clap::Arg<'_, '_>;
    let mut _326: clap::Arg<'_, '_>;
    let mut _327: clap::Arg<'_, '_>;
    let mut _328: clap::Arg<'_, '_>;
    let mut _329: clap::Arg<'_, '_>;
    let mut _330: clap::Arg<'_, '_>;
    let mut _331: clap::Arg<'_, '_>;
    let _332: &str;
    let _333: &str;
    let _334: &str;
    let _335: &str;
    let _336: &str;
    let mut _337: clap::Arg<'_, '_>;
    let mut _338: clap::Arg<'_, '_>;
    let mut _339: clap::Arg<'_, '_>;
    let mut _340: clap::Arg<'_, '_>;
    let mut _341: clap::Arg<'_, '_>;
    let mut _342: clap::Arg<'_, '_>;
    let _343: &str;
    let _344: &str;
    let _345: &str;
    let _346: &str;
    let _347: &str;
    let mut _348: clap::Arg<'_, '_>;
    let mut _349: clap::Arg<'_, '_>;
    let mut _350: clap::Arg<'_, '_>;
    let mut _351: clap::Arg<'_, '_>;
    let _352: &str;
    let _353: &str;
    let _354: &str;
    let _355: &str;
    let mut _356: clap::Arg<'_, '_>;
    let mut _357: clap::Arg<'_, '_>;
    let mut _358: clap::Arg<'_, '_>;
    let mut _359: clap::Arg<'_, '_>;
    let mut _360: clap::Arg<'_, '_>;
    let mut _361: clap::Arg<'_, '_>;
    let mut _362: clap::Arg<'_, '_>;
    let mut _363: clap::Arg<'_, '_>;
    let mut _364: clap::Arg<'_, '_>;
    let mut _365: clap::Arg<'_, '_>;
    let mut _366: clap::Arg<'_, '_>;
    let _367: &str;
    let _368: &str;
    let _369: &str;
    let _370: &str;
    let _371: &str;
    let _372: &str;
    let _373: &str;
    let _374: &str;
    let mut _375: clap::Arg<'_, '_>;
    let mut _376: clap::Arg<'_, '_>;
    let mut _377: clap::Arg<'_, '_>;
    let mut _378: clap::Arg<'_, '_>;
    let mut _379: clap::Arg<'_, '_>;
    let mut _380: clap::Arg<'_, '_>;
    let mut _381: clap::Arg<'_, '_>;
    let mut _382: clap::Arg<'_, '_>;
    let mut _383: clap::Arg<'_, '_>;
    let mut _384: clap::Arg<'_, '_>;
    let _385: &str;
    let _386: &str;
    let _387: &str;
    let _388: &str;
    let _389: &str;
    let _390: &str;
    let mut _391: clap::Arg<'_, '_>;
    let mut _392: clap::Arg<'_, '_>;
    let mut _393: clap::Arg<'_, '_>;
    let mut _394: clap::Arg<'_, '_>;
    let mut _395: clap::Arg<'_, '_>;
    let mut _396: clap::Arg<'_, '_>;
    let _397: &str;
    let _398: &str;
    let _399: &str;
    let _400: &str;
    let _401: &str;
    let mut _402: clap::Arg<'_, '_>;
    let mut _403: clap::Arg<'_, '_>;
    let mut _404: clap::Arg<'_, '_>;
    let mut _405: clap::Arg<'_, '_>;
    let mut _406: clap::Arg<'_, '_>;
    let _407: &str;
    let _408: &str;
    let _409: &str;
    let mut _410: clap::Arg<'_, '_>;
    let mut _411: clap::Arg<'_, '_>;
    let mut _412: clap::Arg<'_, '_>;
    let mut _413: clap::Arg<'_, '_>;
    let _414: &str;
    let _415: &str;
    let _416: &str;
    let mut _417: clap::Arg<'_, '_>;
    let mut _418: clap::Arg<'_, '_>;
    let mut _419: clap::Arg<'_, '_>;
    let mut _420: clap::Arg<'_, '_>;
    let mut _421: clap::Arg<'_, '_>;
    let mut _422: clap::Arg<'_, '_>;
    let _423: &str;
    let _424: &str;
    let _425: &str;
    let _426: &str;
    let _427: &str;
    let mut _428: clap::Arg<'_, '_>;
    let mut _429: clap::Arg<'_, '_>;
    let mut _430: clap::Arg<'_, '_>;
    let mut _431: clap::Arg<'_, '_>;
    let mut _432: clap::Arg<'_, '_>;
    let mut _433: clap::Arg<'_, '_>;
    let _434: &str;
    let _435: &str;
    let _436: &str;
    let _437: &str;
    let _438: &str;
    let mut _439: clap::Arg<'_, '_>;
    let mut _440: clap::Arg<'_, '_>;
    let mut _441: clap::Arg<'_, '_>;
    let mut _442: clap::Arg<'_, '_>;
    let _443: &str;
    let _444: &str;
    let _445: &str;
    let mut _446: clap::Arg<'_, '_>;
    let mut _447: clap::Arg<'_, '_>;
    let mut _448: clap::Arg<'_, '_>;
    let mut _449: clap::Arg<'_, '_>;
    let _450: &str;
    let _451: &str;
    let _452: &str;
    let mut _453: clap::Arg<'_, '_>;
    let mut _454: clap::Arg<'_, '_>;
    let mut _455: clap::Arg<'_, '_>;
    let mut _456: clap::Arg<'_, '_>;
    let mut _457: clap::Arg<'_, '_>;
    let _458: &str;
    let _459: &str;
    let _460: &str;
    let mut _461: bool;
    let _462: &std::path::Path;
    let _463: &str;
    let mut _464: clap::App<'_, '_>;
    let mut _465: clap::App<'_, '_>;
    let mut _466: clap::App<'_, '_>;
    let mut _467: clap::App<'_, '_>;
    let mut _468: clap::App<'_, '_>;
    let mut _469: clap::App<'_, '_>;
    let mut _470: clap::App<'_, '_>;
    let mut _471: clap::App<'_, '_>;
    let mut _472: clap::App<'_, '_>;
    let _473: &str;
    let mut _474: clap::Arg<'_, '_>;
    let mut _475: clap::Arg<'_, '_>;
    let mut _476: clap::Arg<'_, '_>;
    let mut _477: clap::Arg<'_, '_>;
    let mut _478: clap::Arg<'_, '_>;
    let _479: &str;
    let _480: &str;
    let _481: &str;
    let _482: &str;
    let mut _483: clap::Arg<'_, '_>;
    let mut _484: clap::Arg<'_, '_>;
    let mut _485: clap::Arg<'_, '_>;
    let mut _486: clap::Arg<'_, '_>;
    let _487: &str;
    let _488: &str;
    let _489: &str;
    let mut _490: clap::ArgGroup<'_>;
    let mut _491: clap::ArgGroup<'_>;
    let mut _492: clap::ArgGroup<'_>;
    let _493: &str;
    let mut _494: &[&str];
    let mut _495: clap::Arg<'_, '_>;
    let mut _496: clap::Arg<'_, '_>;
    let mut _497: clap::Arg<'_, '_>;
    let mut _498: clap::Arg<'_, '_>;
    let mut _499: clap::Arg<'_, '_>;
    let mut _500: clap::Arg<'_, '_>;
    let _501: &str;
    let _502: &str;
    let _503: &str;
    let _504: &str;
    let _505: &str;
    let mut _506: clap::Arg<'_, '_>;
    let mut _507: clap::Arg<'_, '_>;
    let mut _508: clap::Arg<'_, '_>;
    let mut _509: clap::Arg<'_, '_>;
    let mut _510: clap::Arg<'_, '_>;
    let mut _511: clap::Arg<'_, '_>;
    let _512: &str;
    let _513: &str;
    let _514: &str;
    let _515: &str;
    let _516: &str;
    let mut _517: clap::Arg<'_, '_>;
    let mut _518: clap::Arg<'_, '_>;
    let mut _519: clap::Arg<'_, '_>;
    let mut _520: clap::Arg<'_, '_>;
    let _521: &str;
    let _522: &str;
    let _523: &str;
    let _524: &str;
    let mut _531: bool;
    let mut _532: bool;
    let mut _533: bool;
    let mut _534: bool;
    let mut _535: bool;
    let mut _536: bool;
    let mut _537: bool;
    let mut _538: bool;
    let mut _539: bool;
    let mut _540: bool;
    let mut _541: bool;
    let mut _542: bool;
    let mut _543: bool;
    let mut _544: bool;
    let mut _545: bool;
    let mut _546: bool;
    let mut _547: bool;
    let mut _548: bool;
    let mut _549: bool;
    let mut _550: bool;
    let mut _551: bool;
    let mut _552: bool;
    let mut _553: bool;
    let mut _554: bool;
    let mut _555: bool;
    let mut _556: bool;
    let mut _557: bool;
    let mut _558: bool;
    let mut _559: bool;
    let mut _560: bool;
    let mut _561: bool;
    let mut _562: bool;
    let mut _563: bool;
    let mut _564: bool;
    let mut _565: bool;
    let mut _566: bool;
    let mut _567: bool;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: bool;
    scope 1 {
        debug clap_color_setting => _2;
        let mut _6: clap::App<'_, '_>;
        scope 2 {
            debug app => _6;
            let mut _525: &[&str; 2];
            let mut _526: &[&str; 3];
            let mut _527: &[&str; 3];
            let mut _528: &[&str; 2];
            let mut _529: &[&str; 3];
            let mut _530: &[&str; 3];
        }
    }

    bb0: {
        _564 = const false;
        _565 = const false;
        _566 = const false;
        _567 = const false;
        _568 = const false;
        _569 = const false;
        _570 = const false;
        _562 = const false;
        _563 = const false;
        _538 = const false;
        _539 = const false;
        _540 = const false;
        _541 = const false;
        _542 = const false;
        _543 = const false;
        _544 = const false;
        _545 = const false;
        _546 = const false;
        _547 = const false;
        _548 = const false;
        _549 = const false;
        _550 = const false;
        _551 = const false;
        _552 = const false;
        _553 = const false;
        _554 = const false;
        _555 = const false;
        _556 = const false;
        _557 = const false;
        _558 = const false;
        _559 = const false;
        _560 = const false;
        _561 = const false;
        _537 = const false;
        _531 = const false;
        _532 = const false;
        _533 = const false;
        _534 = const false;
        _535 = const false;
        _536 = const false;
        switchInt(_1) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        _5 = var_os::<&str>(const "NO_COLOR") -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = Option::<OsString>::is_none(move _4) -> [return: bb3, unwind: bb331];
    }

    bb3: {
        switchInt(move _3) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = ColoredHelp;
        goto -> bb8;
    }

    bb6: {
        drop(_5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _2 = ColorNever;
        goto -> bb8;
    }

    bb8: {
        _25 = clap::App::<'_, '_>::new::<&str>(const "bat") -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = clap::App::<'_, '_>::version::<&str>(move _25, const "0.18.3") -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = _2;
        _23 = clap::App::<'_, '_>::global_setting(move _24, move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        _27 = DeriveDisplayOrder;
        _22 = clap::App::<'_, '_>::global_setting(move _23, move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = UnifiedHelpMessage;
        _21 = clap::App::<'_, '_>::global_setting(move _22, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        _29 = HidePossibleValuesInHelp;
        _20 = clap::App::<'_, '_>::global_setting(move _21, move _29) -> [return: bb14, unwind continue];
    }

    bb14: {
        _30 = ArgsNegateSubcommands;
        _19 = clap::App::<'_, '_>::setting(move _20, move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        _31 = AllowExternalSubcommands;
        _18 = clap::App::<'_, '_>::setting(move _19, move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        _32 = DisableHelpSubcommand;
        _17 = clap::App::<'_, '_>::setting(move _18, move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        _33 = VersionlessSubcommands;
        _16 = clap::App::<'_, '_>::setting(move _17, move _33) -> [return: bb18, unwind continue];
    }

    bb18: {
        _15 = clap::App::<'_, '_>::max_term_width(move _16, const 100_usize) -> [return: bb19, unwind continue];
    }

    bb19: {
        _14 = clap::App::<'_, '_>::about::<&str>(move _15, const "A cat(1) clone with wings.\n\nUse '--help' instead of '-h' to see a more detailed version of the help text.") -> [return: bb20, unwind continue];
    }

    bb20: {
        _13 = clap::App::<'_, '_>::after_help::<&str>(move _14, const "Note: `bat -h` prints a short and concise overview while `bat --help` gives all details.") -> [return: bb21, unwind continue];
    }

    bb21: {
        _12 = clap::App::<'_, '_>::long_about::<&str>(move _13, const "A cat(1) clone with syntax highlighting and Git integration.") -> [return: bb22, unwind continue];
    }

    bb22: {
        _570 = const true;
        _39 = const "FILE";
        _38 = Arg::<'_, '_>::with_name(_39) -> [return: bb23, unwind: bb412];
    }

    bb23: {
        _40 = const "File(s) to print / concatenate. Use '-' for standard input.";
        _37 = Arg::<'_, '_>::help(move _38, _40) -> [return: bb24, unwind: bb412];
    }

    bb24: {
        _41 = const "File(s) to print / concatenate. Use a dash ('-') or no argument at all to read from standard input.";
        _36 = Arg::<'_, '_>::long_help(move _37, _41) -> [return: bb25, unwind: bb412];
    }

    bb25: {
        _35 = Arg::<'_, '_>::multiple(move _36, const true) -> [return: bb26, unwind: bb412];
    }

    bb26: {
        _34 = Arg::<'_, '_>::empty_values(move _35, const false) -> [return: bb27, unwind: bb412];
    }

    bb27: {
        _570 = const false;
        _11 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _12, move _34) -> [return: bb28, unwind: bb412];
    }

    bb28: {
        _569 = const true;
        _570 = const false;
        _49 = const "show-all";
        _48 = Arg::<'_, '_>::with_name(_49) -> [return: bb29, unwind: bb410];
    }

    bb29: {
        _50 = const "show-all";
        _47 = Arg::<'_, '_>::long(move _48, _50) -> [return: bb30, unwind: bb410];
    }

    bb30: {
        _46 = Arg::<'_, '_>::alias::<&str>(move _47, const "show-nonprintable") -> [return: bb31, unwind: bb410];
    }

    bb31: {
        _45 = Arg::<'_, '_>::short::<&str>(move _46, const "A") -> [return: bb32, unwind: bb410];
    }

    bb32: {
        _51 = const "language";
        _44 = Arg::<'_, '_>::conflicts_with(move _45, _51) -> [return: bb33, unwind: bb410];
    }

    bb33: {
        _52 = const "Show non-printable characters (space, tab, newline, ..).";
        _43 = Arg::<'_, '_>::help(move _44, _52) -> [return: bb34, unwind: bb410];
    }

    bb34: {
        _53 = const "Show non-printable characters like space, tab or newline. This option can also be used to print binary files. Use '--tabs' to control the width of the tab-placeholders.";
        _42 = Arg::<'_, '_>::long_help(move _43, _53) -> [return: bb35, unwind: bb410];
    }

    bb35: {
        _569 = const false;
        _10 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _11, move _42) -> [return: bb36, unwind: bb410];
    }

    bb36: {
        _568 = const true;
        _569 = const false;
        _62 = const "plain";
        _61 = Arg::<'_, '_>::with_name(_62) -> [return: bb37, unwind: bb408];
    }

    bb37: {
        _63 = const "plain";
        _60 = Arg::<'_, '_>::overrides_with(move _61, _63) -> [return: bb38, unwind: bb408];
    }

    bb38: {
        _64 = const "number";
        _59 = Arg::<'_, '_>::overrides_with(move _60, _64) -> [return: bb39, unwind: bb408];
    }

    bb39: {
        _58 = Arg::<'_, '_>::short::<&str>(move _59, const "p") -> [return: bb40, unwind: bb408];
    }

    bb40: {
        _65 = const "plain";
        _57 = Arg::<'_, '_>::long(move _58, _65) -> [return: bb41, unwind: bb408];
    }

    bb41: {
        _56 = Arg::<'_, '_>::multiple(move _57, const true) -> [return: bb42, unwind: bb408];
    }

    bb42: {
        _66 = const "Show plain style (alias for '--style=plain').";
        _55 = Arg::<'_, '_>::help(move _56, _66) -> [return: bb43, unwind: bb408];
    }

    bb43: {
        _67 = const "Only show plain style, no decorations. This is an alias for '--style=plain'. When '-p' is used twice ('-pp'), it also disables automatic paging (alias for '--style=plain --pager=never').";
        _54 = Arg::<'_, '_>::long_help(move _55, _67) -> [return: bb44, unwind: bb408];
    }

    bb44: {
        _568 = const false;
        _9 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _10, move _54) -> [return: bb45, unwind: bb408];
    }

    bb45: {
        _567 = const true;
        _568 = const false;
        _75 = const "language";
        _74 = Arg::<'_, '_>::with_name(_75) -> [return: bb46, unwind: bb406];
    }

    bb46: {
        _73 = Arg::<'_, '_>::short::<&str>(move _74, const "l") -> [return: bb47, unwind: bb406];
    }

    bb47: {
        _76 = const "language";
        _72 = Arg::<'_, '_>::long(move _73, _76) -> [return: bb48, unwind: bb406];
    }

    bb48: {
        _77 = const "language";
        _71 = Arg::<'_, '_>::overrides_with(move _72, _77) -> [return: bb49, unwind: bb406];
    }

    bb49: {
        _78 = const "Set the language for syntax highlighting.";
        _70 = Arg::<'_, '_>::help(move _71, _78) -> [return: bb50, unwind: bb406];
    }

    bb50: {
        _79 = const "Explicitly set the language for syntax highlighting. The language can be specified as a name (like 'C++' or 'LaTeX') or possible file extension (like 'cpp', 'hpp' or 'md'). Use '--list-languages' to show all supported language names and file extensions.";
        _69 = Arg::<'_, '_>::long_help(move _70, _79) -> [return: bb51, unwind: bb406];
    }

    bb51: {
        _68 = Arg::<'_, '_>::takes_value(move _69, const true) -> [return: bb52, unwind: bb406];
    }

    bb52: {
        _567 = const false;
        _8 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _9, move _68) -> [return: bb53, unwind: bb406];
    }

    bb53: {
        _566 = const true;
        _567 = const false;
        _89 = const "highlight-line";
        _88 = Arg::<'_, '_>::with_name(_89) -> [return: bb54, unwind: bb404];
    }

    bb54: {
        _90 = const "highlight-line";
        _87 = Arg::<'_, '_>::long(move _88, _90) -> [return: bb55, unwind: bb404];
    }

    bb55: {
        _86 = Arg::<'_, '_>::short::<&str>(move _87, const "H") -> [return: bb56, unwind: bb404];
    }

    bb56: {
        _85 = Arg::<'_, '_>::takes_value(move _86, const true) -> [return: bb57, unwind: bb404];
    }

    bb57: {
        _84 = Arg::<'_, '_>::number_of_values(move _85, const 1_u64) -> [return: bb58, unwind: bb404];
    }

    bb58: {
        _83 = Arg::<'_, '_>::multiple(move _84, const true) -> [return: bb59, unwind: bb404];
    }

    bb59: {
        _91 = const "N:M";
        _82 = Arg::<'_, '_>::value_name(move _83, _91) -> [return: bb60, unwind: bb404];
    }

    bb60: {
        _92 = const "Highlight lines N through M.";
        _81 = Arg::<'_, '_>::help(move _82, _92) -> [return: bb61, unwind: bb404];
    }

    bb61: {
        _93 = const "Highlight the specified line ranges with a different background color For example:\n  '--highlight-line 40' highlights line 40\n  '--highlight-line 30:40' highlights lines 30 to 40\n  '--highlight-line :40' highlights lines 1 to 40\n  '--highlight-line 40:' highlights lines 40 to the end of the file";
        _80 = Arg::<'_, '_>::long_help(move _81, _93) -> [return: bb62, unwind: bb404];
    }

    bb62: {
        _566 = const false;
        _7 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _8, move _80) -> [return: bb63, unwind: bb404];
    }

    bb63: {
        _565 = const true;
        _566 = const false;
        _102 = const "file-name";
        _101 = Arg::<'_, '_>::with_name(_102) -> [return: bb64, unwind: bb402];
    }

    bb64: {
        _103 = const "file-name";
        _100 = Arg::<'_, '_>::long(move _101, _103) -> [return: bb65, unwind: bb402];
    }

    bb65: {
        _99 = Arg::<'_, '_>::takes_value(move _100, const true) -> [return: bb66, unwind: bb402];
    }

    bb66: {
        _98 = Arg::<'_, '_>::number_of_values(move _99, const 1_u64) -> [return: bb67, unwind: bb402];
    }

    bb67: {
        _97 = Arg::<'_, '_>::multiple(move _98, const true) -> [return: bb68, unwind: bb402];
    }

    bb68: {
        _104 = const "name";
        _96 = Arg::<'_, '_>::value_name(move _97, _104) -> [return: bb69, unwind: bb402];
    }

    bb69: {
        _105 = const "Specify the name to display for a file.";
        _95 = Arg::<'_, '_>::help(move _96, _105) -> [return: bb70, unwind: bb402];
    }

    bb70: {
        _106 = const "Specify the name to display for a file. Useful when piping data to bat from STDIN when bat does not otherwise know the filename. Note that the provided file name is also used for syntax detection.";
        _94 = Arg::<'_, '_>::long_help(move _95, _106) -> [return: bb71, unwind: bb402];
    }

    bb71: {
        _565 = const false;
        _6 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _7, move _94) -> [return: bb72, unwind: bb402];
    }

    bb72: {
        _564 = const true;
        _565 = const false;
        _564 = const false;
        _563 = const true;
        _109 = move _6;
        _115 = const "diff";
        _114 = Arg::<'_, '_>::with_name(_115) -> [return: bb73, unwind: bb398];
    }

    bb73: {
        _116 = const "diff";
        _113 = Arg::<'_, '_>::long(move _114, _116) -> [return: bb74, unwind: bb398];
    }

    bb74: {
        _112 = Arg::<'_, '_>::short::<&str>(move _113, const "d") -> [return: bb75, unwind: bb398];
    }

    bb75: {
        _117 = const "Only show lines that have been added/removed/modified.";
        _111 = Arg::<'_, '_>::help(move _112, _117) -> [return: bb76, unwind: bb398];
    }

    bb76: {
        _118 = const "Only show lines that have been added/removed/modified with respect to the Git index. Use --diff-context=N to control how much context you want to see.";
        _110 = Arg::<'_, '_>::long_help(move _111, _118) -> [return: bb77, unwind: bb398];
    }

    bb77: {
        _563 = const false;
        _108 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _109, move _110) -> [return: bb78, unwind: bb398];
    }

    bb78: {
        _562 = const true;
        _563 = const false;
        _127 = const "diff-context";
        _126 = Arg::<'_, '_>::with_name(_127) -> [return: bb79, unwind: bb396];
    }

    bb79: {
        _128 = const "diff-context";
        _125 = Arg::<'_, '_>::long(move _126, _128) -> [return: bb80, unwind: bb396];
    }

    bb80: {
        _129 = const "diff-context";
        _124 = Arg::<'_, '_>::overrides_with(move _125, _129) -> [return: bb81, unwind: bb396];
    }

    bb81: {
        _123 = Arg::<'_, '_>::takes_value(move _124, const true) -> [return: bb82, unwind: bb396];
    }

    bb82: {
        _130 = const "N";
        _122 = Arg::<'_, '_>::value_name(move _123, _130) -> [return: bb83, unwind: bb396];
    }

    bb83: {
        _121 = Arg::<'_, '_>::validator::<{closure@src/bin/bat/clap_app.rs:137:29: 137:32}>(move _122, const ZeroSized: {closure@src/bin/bat/clap_app.rs:137:29: 137:32}) -> [return: bb84, unwind: bb396];
    }

    bb84: {
        _120 = Arg::<'_, '_>::hidden_short_help(move _121, const true) -> [return: bb85, unwind: bb396];
    }

    bb85: {
        _131 = const "Include N lines of context around added/removed/modified lines when using '--diff'.";
        _119 = Arg::<'_, '_>::long_help(move _120, _131) -> [return: bb86, unwind: bb396];
    }

    bb86: {
        _562 = const false;
        _107 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _108, move _119) -> [return: bb87, unwind: bb396];
    }

    bb87: {
        _562 = const false;
        _564 = const true;
        _6 = move _107;
        _564 = const false;
        _561 = const true;
        _158 = move _6;
        _167 = const "tabs";
        _166 = Arg::<'_, '_>::with_name(_167) -> [return: bb88, unwind: bb394];
    }

    bb88: {
        _168 = const "tabs";
        _165 = Arg::<'_, '_>::long(move _166, _168) -> [return: bb89, unwind: bb394];
    }

    bb89: {
        _169 = const "tabs";
        _164 = Arg::<'_, '_>::overrides_with(move _165, _169) -> [return: bb90, unwind: bb394];
    }

    bb90: {
        _163 = Arg::<'_, '_>::takes_value(move _164, const true) -> [return: bb91, unwind: bb394];
    }

    bb91: {
        _170 = const "T";
        _162 = Arg::<'_, '_>::value_name(move _163, _170) -> [return: bb92, unwind: bb394];
    }

    bb92: {
        _161 = Arg::<'_, '_>::validator::<{closure@src/bin/bat/clap_app.rs:158:17: 158:20}>(move _162, const ZeroSized: {closure@src/bin/bat/clap_app.rs:158:17: 158:20}) -> [return: bb93, unwind: bb394];
    }

    bb93: {
        _171 = const "Set the tab width to T spaces.";
        _160 = Arg::<'_, '_>::help(move _161, _171) -> [return: bb94, unwind: bb394];
    }

    bb94: {
        _172 = const "Set the tab width to T spaces. Use a width of 0 to pass tabs through directly";
        _159 = Arg::<'_, '_>::long_help(move _160, _172) -> [return: bb95, unwind: bb394];
    }

    bb95: {
        _561 = const false;
        _157 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _158, move _159) -> [return: bb96, unwind: bb394];
    }

    bb96: {
        _560 = const true;
        _561 = const false;
        _183 = const "wrap";
        _182 = Arg::<'_, '_>::with_name(_183) -> [return: bb97, unwind: bb392];
    }

    bb97: {
        _184 = const "wrap";
        _181 = Arg::<'_, '_>::long(move _182, _184) -> [return: bb98, unwind: bb392];
    }

    bb98: {
        _185 = const "wrap";
        _180 = Arg::<'_, '_>::overrides_with(move _181, _185) -> [return: bb99, unwind: bb392];
    }

    bb99: {
        _179 = Arg::<'_, '_>::takes_value(move _180, const true) -> [return: bb100, unwind: bb392];
    }

    bb100: {
        _186 = const "mode";
        _178 = Arg::<'_, '_>::value_name(move _179, _186) -> [return: bb101, unwind: bb392];
    }

    bb101: {
        _530 = const _;
        _187 = _530 as &[&str] (PointerCoercion(Unsize));
        _177 = Arg::<'_, '_>::possible_values(move _178, move _187) -> [return: bb102, unwind: bb392];
    }

    bb102: {
        _188 = const "auto";
        _176 = Arg::<'_, '_>::default_value(move _177, _188) -> [return: bb103, unwind: bb392];
    }

    bb103: {
        _175 = Arg::<'_, '_>::hide_default_value(move _176, const true) -> [return: bb104, unwind: bb392];
    }

    bb104: {
        _189 = const "Specify the text-wrapping mode (*auto*, never, character).";
        _174 = Arg::<'_, '_>::help(move _175, _189) -> [return: bb105, unwind: bb392];
    }

    bb105: {
        _190 = const "Specify the text-wrapping mode (*auto*, never, character). The '--terminal-width' option can be used in addition to control the output width.";
        _173 = Arg::<'_, '_>::long_help(move _174, _190) -> [return: bb106, unwind: bb392];
    }

    bb106: {
        _560 = const false;
        _156 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _157, move _173) -> [return: bb107, unwind: bb392];
    }

    bb107: {
        _559 = const true;
        _560 = const false;
        _199 = const "terminal-width";
        _198 = Arg::<'_, '_>::with_name(_199) -> [return: bb108, unwind: bb390];
    }

    bb108: {
        _200 = const "terminal-width";
        _197 = Arg::<'_, '_>::long(move _198, _200) -> [return: bb109, unwind: bb390];
    }

    bb109: {
        _196 = Arg::<'_, '_>::takes_value(move _197, const true) -> [return: bb110, unwind: bb390];
    }

    bb110: {
        _201 = const "width";
        _195 = Arg::<'_, '_>::value_name(move _196, _201) -> [return: bb111, unwind: bb390];
    }

    bb111: {
        _194 = Arg::<'_, '_>::hidden_short_help(move _195, const true) -> [return: bb112, unwind: bb390];
    }

    bb112: {
        _193 = Arg::<'_, '_>::allow_hyphen_values(move _194, const true) -> [return: bb113, unwind: bb390];
    }

    bb113: {
        _192 = Arg::<'_, '_>::validator::<{closure@src/bin/bat/clap_app.rs:193:21: 193:24}>(move _193, const ZeroSized: {closure@src/bin/bat/clap_app.rs:193:21: 193:24}) -> [return: bb114, unwind: bb390];
    }

    bb114: {
        _202 = const "Explicitly set the width of the terminal instead of determining it automatically. If prefixed with '+' or '-', the value will be treated as an offset to the actual terminal width. See also: '--wrap'.";
        _191 = Arg::<'_, '_>::help(move _192, _202) -> [return: bb115, unwind: bb390];
    }

    bb115: {
        _559 = const false;
        _155 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _156, move _191) -> [return: bb116, unwind: bb390];
    }

    bb116: {
        _558 = const true;
        _559 = const false;
        _209 = const "number";
        _208 = Arg::<'_, '_>::with_name(_209) -> [return: bb117, unwind: bb388];
    }

    bb117: {
        _210 = const "number";
        _207 = Arg::<'_, '_>::long(move _208, _210) -> [return: bb118, unwind: bb388];
    }

    bb118: {
        _211 = const "number";
        _206 = Arg::<'_, '_>::overrides_with(move _207, _211) -> [return: bb119, unwind: bb388];
    }

    bb119: {
        _205 = Arg::<'_, '_>::short::<&str>(move _206, const "n") -> [return: bb120, unwind: bb388];
    }

    bb120: {
        _212 = const "Show line numbers (alias for '--style=numbers').";
        _204 = Arg::<'_, '_>::help(move _205, _212) -> [return: bb121, unwind: bb388];
    }

    bb121: {
        _213 = const "Only show line numbers, no other decorations. This is an alias for '--style=numbers'";
        _203 = Arg::<'_, '_>::long_help(move _204, _213) -> [return: bb122, unwind: bb388];
    }

    bb122: {
        _558 = const false;
        _154 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _155, move _203) -> [return: bb123, unwind: bb388];
    }

    bb123: {
        _557 = const true;
        _558 = const false;
        _224 = const "color";
        _223 = Arg::<'_, '_>::with_name(_224) -> [return: bb124, unwind: bb386];
    }

    bb124: {
        _225 = const "color";
        _222 = Arg::<'_, '_>::long(move _223, _225) -> [return: bb125, unwind: bb386];
    }

    bb125: {
        _226 = const "color";
        _221 = Arg::<'_, '_>::overrides_with(move _222, _226) -> [return: bb126, unwind: bb386];
    }

    bb126: {
        _220 = Arg::<'_, '_>::takes_value(move _221, const true) -> [return: bb127, unwind: bb386];
    }

    bb127: {
        _227 = const "when";
        _219 = Arg::<'_, '_>::value_name(move _220, _227) -> [return: bb128, unwind: bb386];
    }

    bb128: {
        _529 = const _;
        _228 = _529 as &[&str] (PointerCoercion(Unsize));
        _218 = Arg::<'_, '_>::possible_values(move _219, move _228) -> [return: bb129, unwind: bb386];
    }

    bb129: {
        _217 = Arg::<'_, '_>::hide_default_value(move _218, const true) -> [return: bb130, unwind: bb386];
    }

    bb130: {
        _229 = const "auto";
        _216 = Arg::<'_, '_>::default_value(move _217, _229) -> [return: bb131, unwind: bb386];
    }

    bb131: {
        _230 = const "When to use colors (*auto*, never, always).";
        _215 = Arg::<'_, '_>::help(move _216, _230) -> [return: bb132, unwind: bb386];
    }

    bb132: {
        _231 = const "Specify when to use colored output. The automatic mode only enables colors if an interactive terminal is detected - colors are automatically disabled if the output goes to a pipe.\nPossible values: *auto*, never, always.";
        _214 = Arg::<'_, '_>::long_help(move _215, _231) -> [return: bb133, unwind: bb386];
    }

    bb133: {
        _557 = const false;
        _153 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _154, move _214) -> [return: bb134, unwind: bb386];
    }

    bb134: {
        _556 = const true;
        _557 = const false;
        _241 = const "italic-text";
        _240 = Arg::<'_, '_>::with_name(_241) -> [return: bb135, unwind: bb384];
    }

    bb135: {
        _242 = const "italic-text";
        _239 = Arg::<'_, '_>::long(move _240, _242) -> [return: bb136, unwind: bb384];
    }

    bb136: {
        _238 = Arg::<'_, '_>::takes_value(move _239, const true) -> [return: bb137, unwind: bb384];
    }

    bb137: {
        _243 = const "when";
        _237 = Arg::<'_, '_>::value_name(move _238, _243) -> [return: bb138, unwind: bb384];
    }

    bb138: {
        _528 = const _;
        _244 = _528 as &[&str] (PointerCoercion(Unsize));
        _236 = Arg::<'_, '_>::possible_values(move _237, move _244) -> [return: bb139, unwind: bb384];
    }

    bb139: {
        _245 = const "never";
        _235 = Arg::<'_, '_>::default_value(move _236, _245) -> [return: bb140, unwind: bb384];
    }

    bb140: {
        _234 = Arg::<'_, '_>::hide_default_value(move _235, const true) -> [return: bb141, unwind: bb384];
    }

    bb141: {
        _246 = const "Use italics in output (always, *never*)";
        _233 = Arg::<'_, '_>::help(move _234, _246) -> [return: bb142, unwind: bb384];
    }

    bb142: {
        _247 = const "Specify when to use ANSI sequences for italic text in the output. Possible values: always, *never*.";
        _232 = Arg::<'_, '_>::long_help(move _233, _247) -> [return: bb143, unwind: bb384];
    }

    bb143: {
        _556 = const false;
        _152 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _153, move _232) -> [return: bb144, unwind: bb384];
    }

    bb144: {
        _555 = const true;
        _556 = const false;
        _258 = const "decorations";
        _257 = Arg::<'_, '_>::with_name(_258) -> [return: bb145, unwind: bb382];
    }

    bb145: {
        _259 = const "decorations";
        _256 = Arg::<'_, '_>::long(move _257, _259) -> [return: bb146, unwind: bb382];
    }

    bb146: {
        _260 = const "decorations";
        _255 = Arg::<'_, '_>::overrides_with(move _256, _260) -> [return: bb147, unwind: bb382];
    }

    bb147: {
        _254 = Arg::<'_, '_>::takes_value(move _255, const true) -> [return: bb148, unwind: bb382];
    }

    bb148: {
        _261 = const "when";
        _253 = Arg::<'_, '_>::value_name(move _254, _261) -> [return: bb149, unwind: bb382];
    }

    bb149: {
        _527 = const _;
        _262 = _527 as &[&str] (PointerCoercion(Unsize));
        _252 = Arg::<'_, '_>::possible_values(move _253, move _262) -> [return: bb150, unwind: bb382];
    }

    bb150: {
        _263 = const "auto";
        _251 = Arg::<'_, '_>::default_value(move _252, _263) -> [return: bb151, unwind: bb382];
    }

    bb151: {
        _250 = Arg::<'_, '_>::hide_default_value(move _251, const true) -> [return: bb152, unwind: bb382];
    }

    bb152: {
        _264 = const "When to show the decorations (*auto*, never, always).";
        _249 = Arg::<'_, '_>::help(move _250, _264) -> [return: bb153, unwind: bb382];
    }

    bb153: {
        _265 = const "Specify when to use the decorations that have been specified via '--style'. The automatic mode only enables decorations if an interactive terminal is detected. Possible values: *auto*, never, always.";
        _248 = Arg::<'_, '_>::long_help(move _249, _265) -> [return: bb154, unwind: bb382];
    }

    bb154: {
        _555 = const false;
        _151 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _152, move _248) -> [return: bb155, unwind: bb382];
    }

    bb155: {
        _554 = const true;
        _555 = const false;
        _274 = const "force-colorization";
        _273 = Arg::<'_, '_>::with_name(_274) -> [return: bb156, unwind: bb380];
    }

    bb156: {
        _275 = const "force-colorization";
        _272 = Arg::<'_, '_>::long(move _273, _275) -> [return: bb157, unwind: bb380];
    }

    bb157: {
        _271 = Arg::<'_, '_>::short::<&str>(move _272, const "f") -> [return: bb158, unwind: bb380];
    }

    bb158: {
        _276 = const "color";
        _270 = Arg::<'_, '_>::conflicts_with(move _271, _276) -> [return: bb159, unwind: bb380];
    }

    bb159: {
        _277 = const "decorations";
        _269 = Arg::<'_, '_>::conflicts_with(move _270, _277) -> [return: bb160, unwind: bb380];
    }

    bb160: {
        _278 = const "force-colorization";
        _268 = Arg::<'_, '_>::overrides_with(move _269, _278) -> [return: bb161, unwind: bb380];
    }

    bb161: {
        _267 = Arg::<'_, '_>::hidden_short_help(move _268, const true) -> [return: bb162, unwind: bb380];
    }

    bb162: {
        _279 = const "Alias for '--decorations=always --color=always'. This is useful if the output of bat is piped to another program, but you want to keep the colorization/decorations.";
        _266 = Arg::<'_, '_>::long_help(move _267, _279) -> [return: bb163, unwind: bb380];
    }

    bb163: {
        _554 = const false;
        _150 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _151, move _266) -> [return: bb164, unwind: bb380];
    }

    bb164: {
        _553 = const true;
        _554 = const false;
        _290 = const "paging";
        _289 = Arg::<'_, '_>::with_name(_290) -> [return: bb165, unwind: bb378];
    }

    bb165: {
        _291 = const "paging";
        _288 = Arg::<'_, '_>::long(move _289, _291) -> [return: bb166, unwind: bb378];
    }

    bb166: {
        _292 = const "paging";
        _287 = Arg::<'_, '_>::overrides_with(move _288, _292) -> [return: bb167, unwind: bb378];
    }

    bb167: {
        _286 = Arg::<'_, '_>::takes_value(move _287, const true) -> [return: bb168, unwind: bb378];
    }

    bb168: {
        _293 = const "when";
        _285 = Arg::<'_, '_>::value_name(move _286, _293) -> [return: bb169, unwind: bb378];
    }

    bb169: {
        _526 = const _;
        _294 = _526 as &[&str] (PointerCoercion(Unsize));
        _284 = Arg::<'_, '_>::possible_values(move _285, move _294) -> [return: bb170, unwind: bb378];
    }

    bb170: {
        _295 = const "auto";
        _283 = Arg::<'_, '_>::default_value(move _284, _295) -> [return: bb171, unwind: bb378];
    }

    bb171: {
        _282 = Arg::<'_, '_>::hide_default_value(move _283, const true) -> [return: bb172, unwind: bb378];
    }

    bb172: {
        _296 = const "Specify when to use the pager, or use `-P` to disable (*auto*, never, always).";
        _281 = Arg::<'_, '_>::help(move _282, _296) -> [return: bb173, unwind: bb378];
    }

    bb173: {
        _297 = const "Specify when to use the pager. To disable the pager, use --paging=never' or its alias,'-P'. To disable the pager permanently, set BAT_PAGER to an empty string. To control which pager is used, see the '--pager' option. Possible values: *auto*, never, always.";
        _280 = Arg::<'_, '_>::long_help(move _281, _297) -> [return: bb174, unwind: bb378];
    }

    bb174: {
        _553 = const false;
        _149 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _150, move _280) -> [return: bb175, unwind: bb378];
    }

    bb175: {
        _552 = const true;
        _553 = const false;
        _305 = const "no-paging";
        _304 = Arg::<'_, '_>::with_name(_305) -> [return: bb176, unwind: bb376];
    }

    bb176: {
        _303 = Arg::<'_, '_>::short::<&str>(move _304, const "P") -> [return: bb177, unwind: bb376];
    }

    bb177: {
        _302 = Arg::<'_, '_>::alias::<&str>(move _303, const "no-pager") -> [return: bb178, unwind: bb376];
    }

    bb178: {
        _306 = const "no-paging";
        _301 = Arg::<'_, '_>::overrides_with(move _302, _306) -> [return: bb179, unwind: bb376];
    }

    bb179: {
        _300 = Arg::<'_, '_>::hidden(move _301, const true) -> [return: bb180, unwind: bb376];
    }

    bb180: {
        _299 = Arg::<'_, '_>::hidden_short_help(move _300, const true) -> [return: bb181, unwind: bb376];
    }

    bb181: {
        _307 = const "Alias for '--paging=never'";
        _298 = Arg::<'_, '_>::help(move _299, _307) -> [return: bb182, unwind: bb376];
    }

    bb182: {
        _552 = const false;
        _148 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _149, move _298) -> [return: bb183, unwind: bb376];
    }

    bb183: {
        _551 = const true;
        _552 = const false;
        _316 = const "pager";
        _315 = Arg::<'_, '_>::with_name(_316) -> [return: bb184, unwind: bb374];
    }

    bb184: {
        _317 = const "pager";
        _314 = Arg::<'_, '_>::long(move _315, _317) -> [return: bb185, unwind: bb374];
    }

    bb185: {
        _318 = const "pager";
        _313 = Arg::<'_, '_>::overrides_with(move _314, _318) -> [return: bb186, unwind: bb374];
    }

    bb186: {
        _312 = Arg::<'_, '_>::takes_value(move _313, const true) -> [return: bb187, unwind: bb374];
    }

    bb187: {
        _319 = const "command";
        _311 = Arg::<'_, '_>::value_name(move _312, _319) -> [return: bb188, unwind: bb374];
    }

    bb188: {
        _310 = Arg::<'_, '_>::hidden_short_help(move _311, const true) -> [return: bb189, unwind: bb374];
    }

    bb189: {
        _320 = const "Determine which pager to use.";
        _309 = Arg::<'_, '_>::help(move _310, _320) -> [return: bb190, unwind: bb374];
    }

    bb190: {
        _321 = const "Determine which pager is used. This option will override the PAGER and BAT_PAGER environment variables. The default pager is 'less'. To control when the pager is used, see the '--paging' option. Example: '--pager \"less -RF\"'.";
        _308 = Arg::<'_, '_>::long_help(move _309, _321) -> [return: bb191, unwind: bb374];
    }

    bb191: {
        _551 = const false;
        _147 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _148, move _308) -> [return: bb192, unwind: bb374];
    }

    bb192: {
        _550 = const true;
        _551 = const false;
        _332 = const "map-syntax";
        _331 = Arg::<'_, '_>::with_name(_332) -> [return: bb193, unwind: bb372];
    }

    bb193: {
        _330 = Arg::<'_, '_>::short::<&str>(move _331, const "m") -> [return: bb194, unwind: bb372];
    }

    bb194: {
        _333 = const "map-syntax";
        _329 = Arg::<'_, '_>::long(move _330, _333) -> [return: bb195, unwind: bb372];
    }

    bb195: {
        _328 = Arg::<'_, '_>::multiple(move _329, const true) -> [return: bb196, unwind: bb372];
    }

    bb196: {
        _327 = Arg::<'_, '_>::takes_value(move _328, const true) -> [return: bb197, unwind: bb372];
    }

    bb197: {
        _326 = Arg::<'_, '_>::number_of_values(move _327, const 1_u64) -> [return: bb198, unwind: bb372];
    }

    bb198: {
        _334 = const "glob:syntax";
        _325 = Arg::<'_, '_>::value_name(move _326, _334) -> [return: bb199, unwind: bb372];
    }

    bb199: {
        _335 = const "Use the specified syntax for files matching the glob pattern ('*.cpp:C++').";
        _324 = Arg::<'_, '_>::help(move _325, _335) -> [return: bb200, unwind: bb372];
    }

    bb200: {
        _336 = const "Map a glob pattern to an existing syntax name. The glob pattern is matched on the full path and the filename. For example, to highlight *.build files with the Python syntax, use -m '*.build:Python'. To highlight files named '.myignore' with the Git Ignore syntax, use -m '.myignore:Git Ignore'. Note that the right-hand side is the *name* of the syntax, not a file extension.";
        _323 = Arg::<'_, '_>::long_help(move _324, _336) -> [return: bb201, unwind: bb372];
    }

    bb201: {
        _322 = Arg::<'_, '_>::takes_value(move _323, const true) -> [return: bb202, unwind: bb372];
    }

    bb202: {
        _550 = const false;
        _146 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _147, move _322) -> [return: bb203, unwind: bb372];
    }

    bb203: {
        _549 = const true;
        _550 = const false;
        _343 = const "theme";
        _342 = Arg::<'_, '_>::with_name(_343) -> [return: bb204, unwind: bb370];
    }

    bb204: {
        _344 = const "theme";
        _341 = Arg::<'_, '_>::long(move _342, _344) -> [return: bb205, unwind: bb370];
    }

    bb205: {
        _345 = const "theme";
        _340 = Arg::<'_, '_>::overrides_with(move _341, _345) -> [return: bb206, unwind: bb370];
    }

    bb206: {
        _339 = Arg::<'_, '_>::takes_value(move _340, const true) -> [return: bb207, unwind: bb370];
    }

    bb207: {
        _346 = const "Set the color theme for syntax highlighting.";
        _338 = Arg::<'_, '_>::help(move _339, _346) -> [return: bb208, unwind: bb370];
    }

    bb208: {
        _347 = const "Set the theme for syntax highlighting. Use '--list-themes' to see all available themes. To set a default theme, add the '--theme=\"...\"' option to the configuration file or export the BAT_THEME environment variable (e.g.: export BAT_THEME=\"...\").";
        _337 = Arg::<'_, '_>::long_help(move _338, _347) -> [return: bb209, unwind: bb370];
    }

    bb209: {
        _549 = const false;
        _145 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _146, move _337) -> [return: bb210, unwind: bb370];
    }

    bb210: {
        _548 = const true;
        _549 = const false;
        _352 = const "list-themes";
        _351 = Arg::<'_, '_>::with_name(_352) -> [return: bb211, unwind: bb368];
    }

    bb211: {
        _353 = const "list-themes";
        _350 = Arg::<'_, '_>::long(move _351, _353) -> [return: bb212, unwind: bb368];
    }

    bb212: {
        _354 = const "Display all supported highlighting themes.";
        _349 = Arg::<'_, '_>::help(move _350, _354) -> [return: bb213, unwind: bb368];
    }

    bb213: {
        _355 = const "Display a list of supported themes for syntax highlighting.";
        _348 = Arg::<'_, '_>::long_help(move _349, _355) -> [return: bb214, unwind: bb368];
    }

    bb214: {
        _548 = const false;
        _144 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _145, move _348) -> [return: bb215, unwind: bb368];
    }

    bb215: {
        _547 = const true;
        _548 = const false;
        _367 = const "style";
        _366 = Arg::<'_, '_>::with_name(_367) -> [return: bb216, unwind: bb366];
    }

    bb216: {
        _368 = const "style";
        _365 = Arg::<'_, '_>::long(move _366, _368) -> [return: bb217, unwind: bb366];
    }

    bb217: {
        _369 = const "components";
        _364 = Arg::<'_, '_>::value_name(move _365, _369) -> [return: bb218, unwind: bb366];
    }

    bb218: {
        _363 = Arg::<'_, '_>::use_delimiter(move _364, const false) -> [return: bb219, unwind: bb366];
    }

    bb219: {
        _362 = Arg::<'_, '_>::takes_value(move _363, const true) -> [return: bb220, unwind: bb366];
    }

    bb220: {
        _370 = const "style";
        _361 = Arg::<'_, '_>::overrides_with(move _362, _370) -> [return: bb221, unwind: bb366];
    }

    bb221: {
        _371 = const "plain";
        _360 = Arg::<'_, '_>::overrides_with(move _361, _371) -> [return: bb222, unwind: bb366];
    }

    bb222: {
        _372 = const "number";
        _359 = Arg::<'_, '_>::overrides_with(move _360, _372) -> [return: bb223, unwind: bb366];
    }

    bb223: {
        _358 = Arg::<'_, '_>::validator::<{closure@src/bin/bat/clap_app.rs:368:28: 368:33}>(move _359, const ZeroSized: {closure@src/bin/bat/clap_app.rs:368:28: 368:33}) -> [return: bb224, unwind: bb366];
    }

    bb224: {
        _373 = const "Comma-separated list of style elements to display (*auto*, full, plain, changes, header, grid, rule, numbers, snip).";
        _357 = Arg::<'_, '_>::help(move _358, _373) -> [return: bb225, unwind: bb366];
    }

    bb225: {
        _374 = const "Configure which elements (line numbers, file headers, grid borders, Git modifications, ..) to display in addition to the file contents. The argument is a comma-separated list of components to display (e.g. 'numbers,changes,grid') or a pre-defined style ('full'). To set a default style, add the '--style=\"..\"' option to the configuration file or export the BAT_STYLE environment variable (e.g.: export BAT_STYLE=\"..\").\n\nPossible values:\n\n  * full: enables all available components.\n  * auto: same as 'full', unless the output is piped (default).\n  * plain: disables all available components.\n  * changes: show Git modification markers.\n  * header: show filenames before the content.\n  * grid: vertical/horizontal lines to separate side bar\n          and the header from the content.\n  * rule: horizontal lines to delimit files.\n  * numbers: show line numbers in the side bar.\n  * snip: draw separation lines between distinct line ranges.";
        _356 = Arg::<'_, '_>::long_help(move _357, _374) -> [return: bb226, unwind: bb366];
    }

    bb226: {
        _547 = const false;
        _143 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _144, move _356) -> [return: bb227, unwind: bb366];
    }

    bb227: {
        _546 = const true;
        _547 = const false;
        _385 = const "line-range";
        _384 = Arg::<'_, '_>::with_name(_385) -> [return: bb228, unwind: bb364];
    }

    bb228: {
        _386 = const "line-range";
        _383 = Arg::<'_, '_>::long(move _384, _386) -> [return: bb229, unwind: bb364];
    }

    bb229: {
        _382 = Arg::<'_, '_>::short::<&str>(move _383, const "r") -> [return: bb230, unwind: bb364];
    }

    bb230: {
        _381 = Arg::<'_, '_>::multiple(move _382, const true) -> [return: bb231, unwind: bb364];
    }

    bb231: {
        _380 = Arg::<'_, '_>::takes_value(move _381, const true) -> [return: bb232, unwind: bb364];
    }

    bb232: {
        _379 = Arg::<'_, '_>::number_of_values(move _380, const 1_u64) -> [return: bb233, unwind: bb364];
    }

    bb233: {
        _387 = const "N:M";
        _378 = Arg::<'_, '_>::value_name(move _379, _387) -> [return: bb234, unwind: bb364];
    }

    bb234: {
        _388 = const "diff";
        _377 = Arg::<'_, '_>::conflicts_with(move _378, _388) -> [return: bb235, unwind: bb364];
    }

    bb235: {
        _389 = const "Only print the lines from N to M.";
        _376 = Arg::<'_, '_>::help(move _377, _389) -> [return: bb236, unwind: bb364];
    }

    bb236: {
        _390 = const "Only print the specified range of lines for each file. For example:\n  '--line-range 30:40' prints lines 30 to 40\n  '--line-range :40' prints lines 1 to 40\n  '--line-range 40:' prints lines 40 to the end of the file\n  '--line-range 40' only prints line 40";
        _375 = Arg::<'_, '_>::long_help(move _376, _390) -> [return: bb237, unwind: bb364];
    }

    bb237: {
        _546 = const false;
        _142 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _143, move _375) -> [return: bb238, unwind: bb364];
    }

    bb238: {
        _545 = const true;
        _546 = const false;
        _397 = const "list-languages";
        _396 = Arg::<'_, '_>::with_name(_397) -> [return: bb239, unwind: bb362];
    }

    bb239: {
        _398 = const "list-languages";
        _395 = Arg::<'_, '_>::long(move _396, _398) -> [return: bb240, unwind: bb362];
    }

    bb240: {
        _394 = Arg::<'_, '_>::short::<&str>(move _395, const "L") -> [return: bb241, unwind: bb362];
    }

    bb241: {
        _399 = const "list-themes";
        _393 = Arg::<'_, '_>::conflicts_with(move _394, _399) -> [return: bb242, unwind: bb362];
    }

    bb242: {
        _400 = const "Display all supported languages.";
        _392 = Arg::<'_, '_>::help(move _393, _400) -> [return: bb243, unwind: bb362];
    }

    bb243: {
        _401 = const "Display a list of supported languages for syntax highlighting.";
        _391 = Arg::<'_, '_>::long_help(move _392, _401) -> [return: bb244, unwind: bb362];
    }

    bb244: {
        _545 = const false;
        _141 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _142, move _391) -> [return: bb245, unwind: bb362];
    }

    bb245: {
        _544 = const true;
        _545 = const false;
        _407 = const "unbuffered";
        _406 = Arg::<'_, '_>::with_name(_407) -> [return: bb246, unwind: bb360];
    }

    bb246: {
        _405 = Arg::<'_, '_>::short::<&str>(move _406, const "u") -> [return: bb247, unwind: bb360];
    }

    bb247: {
        _408 = const "unbuffered";
        _404 = Arg::<'_, '_>::long(move _405, _408) -> [return: bb248, unwind: bb360];
    }

    bb248: {
        _403 = Arg::<'_, '_>::hidden_short_help(move _404, const true) -> [return: bb249, unwind: bb360];
    }

    bb249: {
        _409 = const "This option exists for POSIX-compliance reasons ('u' is for 'unbuffered'). The output is always unbuffered - this option is simply ignored.";
        _402 = Arg::<'_, '_>::long_help(move _403, _409) -> [return: bb250, unwind: bb360];
    }

    bb250: {
        _544 = const false;
        _140 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _141, move _402) -> [return: bb251, unwind: bb360];
    }

    bb251: {
        _543 = const true;
        _544 = const false;
        _414 = const "no-config";
        _413 = Arg::<'_, '_>::with_name(_414) -> [return: bb252, unwind: bb358];
    }

    bb252: {
        _415 = const "no-config";
        _412 = Arg::<'_, '_>::long(move _413, _415) -> [return: bb253, unwind: bb358];
    }

    bb253: {
        _411 = Arg::<'_, '_>::hidden(move _412, const true) -> [return: bb254, unwind: bb358];
    }

    bb254: {
        _416 = const "Do not use the configuration file";
        _410 = Arg::<'_, '_>::help(move _411, _416) -> [return: bb255, unwind: bb358];
    }

    bb255: {
        _543 = const false;
        _139 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _140, move _410) -> [return: bb256, unwind: bb358];
    }

    bb256: {
        _542 = const true;
        _543 = const false;
        _423 = const "config-file";
        _422 = Arg::<'_, '_>::with_name(_423) -> [return: bb257, unwind: bb356];
    }

    bb257: {
        _424 = const "config-file";
        _421 = Arg::<'_, '_>::long(move _422, _424) -> [return: bb258, unwind: bb356];
    }

    bb258: {
        _425 = const "list-languages";
        _420 = Arg::<'_, '_>::conflicts_with(move _421, _425) -> [return: bb259, unwind: bb356];
    }

    bb259: {
        _426 = const "list-themes";
        _419 = Arg::<'_, '_>::conflicts_with(move _420, _426) -> [return: bb260, unwind: bb356];
    }

    bb260: {
        _418 = Arg::<'_, '_>::hidden(move _419, const true) -> [return: bb261, unwind: bb356];
    }

    bb261: {
        _427 = const "Show path to the configuration file.";
        _417 = Arg::<'_, '_>::help(move _418, _427) -> [return: bb262, unwind: bb356];
    }

    bb262: {
        _542 = const false;
        _138 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _139, move _417) -> [return: bb263, unwind: bb356];
    }

    bb263: {
        _541 = const true;
        _542 = const false;
        _434 = const "generate-config-file";
        _433 = Arg::<'_, '_>::with_name(_434) -> [return: bb264, unwind: bb354];
    }

    bb264: {
        _435 = const "generate-config-file";
        _432 = Arg::<'_, '_>::long(move _433, _435) -> [return: bb265, unwind: bb354];
    }

    bb265: {
        _436 = const "list-languages";
        _431 = Arg::<'_, '_>::conflicts_with(move _432, _436) -> [return: bb266, unwind: bb354];
    }

    bb266: {
        _437 = const "list-themes";
        _430 = Arg::<'_, '_>::conflicts_with(move _431, _437) -> [return: bb267, unwind: bb354];
    }

    bb267: {
        _429 = Arg::<'_, '_>::hidden(move _430, const true) -> [return: bb268, unwind: bb354];
    }

    bb268: {
        _438 = const "Generates a default configuration file.";
        _428 = Arg::<'_, '_>::help(move _429, _438) -> [return: bb269, unwind: bb354];
    }

    bb269: {
        _541 = const false;
        _137 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _138, move _428) -> [return: bb270, unwind: bb354];
    }

    bb270: {
        _540 = const true;
        _541 = const false;
        _443 = const "config-dir";
        _442 = Arg::<'_, '_>::with_name(_443) -> [return: bb271, unwind: bb352];
    }

    bb271: {
        _444 = const "config-dir";
        _441 = Arg::<'_, '_>::long(move _442, _444) -> [return: bb272, unwind: bb352];
    }

    bb272: {
        _440 = Arg::<'_, '_>::hidden(move _441, const true) -> [return: bb273, unwind: bb352];
    }

    bb273: {
        _445 = const "Show bat's configuration directory.";
        _439 = Arg::<'_, '_>::help(move _440, _445) -> [return: bb274, unwind: bb352];
    }

    bb274: {
        _540 = const false;
        _136 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _137, move _439) -> [return: bb275, unwind: bb352];
    }

    bb275: {
        _539 = const true;
        _540 = const false;
        _450 = const "cache-dir";
        _449 = Arg::<'_, '_>::with_name(_450) -> [return: bb276, unwind: bb350];
    }

    bb276: {
        _451 = const "cache-dir";
        _448 = Arg::<'_, '_>::long(move _449, _451) -> [return: bb277, unwind: bb350];
    }

    bb277: {
        _447 = Arg::<'_, '_>::hidden(move _448, const true) -> [return: bb278, unwind: bb350];
    }

    bb278: {
        _452 = const "Show bat's cache directory.";
        _446 = Arg::<'_, '_>::help(move _447, _452) -> [return: bb279, unwind: bb350];
    }

    bb279: {
        _539 = const false;
        _135 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _136, move _446) -> [return: bb280, unwind: bb350];
    }

    bb280: {
        _538 = const true;
        _539 = const false;
        _458 = const "diagnostic";
        _457 = Arg::<'_, '_>::with_name(_458) -> [return: bb281, unwind: bb348];
    }

    bb281: {
        _459 = const "diagnostic";
        _456 = Arg::<'_, '_>::long(move _457, _459) -> [return: bb282, unwind: bb348];
    }

    bb282: {
        _455 = Arg::<'_, '_>::alias::<&str>(move _456, const "diagnostics") -> [return: bb283, unwind: bb348];
    }

    bb283: {
        _454 = Arg::<'_, '_>::hidden_short_help(move _455, const true) -> [return: bb284, unwind: bb348];
    }

    bb284: {
        _460 = const "Show diagnostic information for bug reports.";
        _453 = Arg::<'_, '_>::help(move _454, _460) -> [return: bb285, unwind: bb348];
    }

    bb285: {
        _538 = const false;
        _134 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _135, move _453) -> [return: bb286, unwind: bb348];
    }

    bb286: {
        _538 = const false;
        _133 = clap::App::<'_, '_>::help_message::<&str>(move _134, const "Print this help message.") -> [return: bb287, unwind: bb400];
    }

    bb287: {
        _132 = clap::App::<'_, '_>::version_message::<&str>(move _133, const "Show version information.") -> [return: bb288, unwind: bb400];
    }

    bb288: {
        _564 = const true;
        _6 = move _132;
        _463 = const "cache";
        _462 = Path::new::<str>(_463) -> [return: bb289, unwind: bb400];
    }

    bb289: {
        _461 = Path::exists(_462) -> [return: bb290, unwind: bb400];
    }

    bb290: {
        switchInt(move _461) -> [0: bb292, otherwise: bb291];
    }

    bb291: {
        _564 = const false;
        _0 = move _6;
        goto -> bb330;
    }

    bb292: {
        _564 = const false;
        _537 = const true;
        _464 = move _6;
        _473 = const "cache";
        _472 = SubCommand::<'_>::with_name::<'_>(_473) -> [return: bb293, unwind: bb346];
    }

    bb293: {
        _471 = clap::App::<'_, '_>::about::<&str>(move _472, const "Modify the syntax-definition and theme cache") -> [return: bb294, unwind: bb346];
    }

    bb294: {
        _536 = const true;
        _479 = const "build";
        _478 = Arg::<'_, '_>::with_name(_479) -> [return: bb295, unwind: bb344];
    }

    bb295: {
        _480 = const "build";
        _477 = Arg::<'_, '_>::long(move _478, _480) -> [return: bb296, unwind: bb344];
    }

    bb296: {
        _476 = Arg::<'_, '_>::short::<&str>(move _477, const "b") -> [return: bb297, unwind: bb344];
    }

    bb297: {
        _481 = const "Initialize (or update) the syntax/theme cache.";
        _475 = Arg::<'_, '_>::help(move _476, _481) -> [return: bb298, unwind: bb344];
    }

    bb298: {
        _482 = const "Initialize (or update) the syntax/theme cache by loading from the source directory (default: the configuration directory).";
        _474 = Arg::<'_, '_>::long_help(move _475, _482) -> [return: bb299, unwind: bb344];
    }

    bb299: {
        _536 = const false;
        _470 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _471, move _474) -> [return: bb300, unwind: bb344];
    }

    bb300: {
        _535 = const true;
        _536 = const false;
        _487 = const "clear";
        _486 = Arg::<'_, '_>::with_name(_487) -> [return: bb301, unwind: bb342];
    }

    bb301: {
        _488 = const "clear";
        _485 = Arg::<'_, '_>::long(move _486, _488) -> [return: bb302, unwind: bb342];
    }

    bb302: {
        _484 = Arg::<'_, '_>::short::<&str>(move _485, const "c") -> [return: bb303, unwind: bb342];
    }

    bb303: {
        _489 = const "Remove the cached syntax definitions and themes.";
        _483 = Arg::<'_, '_>::help(move _484, _489) -> [return: bb304, unwind: bb342];
    }

    bb304: {
        _535 = const false;
        _469 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _470, move _483) -> [return: bb305, unwind: bb342];
    }

    bb305: {
        _534 = const true;
        _535 = const false;
        _493 = const "cache-actions";
        _492 = ArgGroup::<'_>::with_name(_493) -> [return: bb306, unwind: bb340];
    }

    bb306: {
        _525 = const _;
        _494 = _525 as &[&str] (PointerCoercion(Unsize));
        _491 = ArgGroup::<'_>::args(move _492, move _494) -> [return: bb307, unwind: bb340];
    }

    bb307: {
        _490 = ArgGroup::<'_>::required(move _491, const true) -> [return: bb308, unwind: bb340];
    }

    bb308: {
        _534 = const false;
        _468 = clap::App::<'_, '_>::group(move _469, move _490) -> [return: bb309, unwind: bb340];
    }

    bb309: {
        _533 = const true;
        _534 = const false;
        _501 = const "source";
        _500 = Arg::<'_, '_>::with_name(_501) -> [return: bb310, unwind: bb338];
    }

    bb310: {
        _502 = const "source";
        _499 = Arg::<'_, '_>::long(move _500, _502) -> [return: bb311, unwind: bb338];
    }

    bb311: {
        _503 = const "build";
        _498 = Arg::<'_, '_>::requires(move _499, _503) -> [return: bb312, unwind: bb338];
    }

    bb312: {
        _497 = Arg::<'_, '_>::takes_value(move _498, const true) -> [return: bb313, unwind: bb338];
    }

    bb313: {
        _504 = const "dir";
        _496 = Arg::<'_, '_>::value_name(move _497, _504) -> [return: bb314, unwind: bb338];
    }

    bb314: {
        _505 = const "Use a different directory to load syntaxes and themes from.";
        _495 = Arg::<'_, '_>::help(move _496, _505) -> [return: bb315, unwind: bb338];
    }

    bb315: {
        _533 = const false;
        _467 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _468, move _495) -> [return: bb316, unwind: bb338];
    }

    bb316: {
        _532 = const true;
        _533 = const false;
        _512 = const "target";
        _511 = Arg::<'_, '_>::with_name(_512) -> [return: bb317, unwind: bb336];
    }

    bb317: {
        _513 = const "target";
        _510 = Arg::<'_, '_>::long(move _511, _513) -> [return: bb318, unwind: bb336];
    }

    bb318: {
        _514 = const "build";
        _509 = Arg::<'_, '_>::requires(move _510, _514) -> [return: bb319, unwind: bb336];
    }

    bb319: {
        _508 = Arg::<'_, '_>::takes_value(move _509, const true) -> [return: bb320, unwind: bb336];
    }

    bb320: {
        _515 = const "dir";
        _507 = Arg::<'_, '_>::value_name(move _508, _515) -> [return: bb321, unwind: bb336];
    }

    bb321: {
        _516 = const "Use a different directory to store the cached syntax and theme set.";
        _506 = Arg::<'_, '_>::help(move _507, _516) -> [return: bb322, unwind: bb336];
    }

    bb322: {
        _532 = const false;
        _466 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _467, move _506) -> [return: bb323, unwind: bb336];
    }

    bb323: {
        _531 = const true;
        _532 = const false;
        _521 = const "blank";
        _520 = Arg::<'_, '_>::with_name(_521) -> [return: bb324, unwind: bb334];
    }

    bb324: {
        _522 = const "blank";
        _519 = Arg::<'_, '_>::long(move _520, _522) -> [return: bb325, unwind: bb334];
    }

    bb325: {
        _523 = const "build";
        _518 = Arg::<'_, '_>::requires(move _519, _523) -> [return: bb326, unwind: bb334];
    }

    bb326: {
        _524 = const "Create completely new syntax and theme sets (instead of appending to the default sets).";
        _517 = Arg::<'_, '_>::help(move _518, _524) -> [return: bb327, unwind: bb334];
    }

    bb327: {
        _531 = const false;
        _465 = clap::App::<'_, '_>::arg::<Arg<'_, '_>>(move _466, move _517) -> [return: bb328, unwind: bb334];
    }

    bb328: {
        _531 = const false;
        _537 = const false;
        _0 = clap::App::<'_, '_>::subcommand(move _464, move _465) -> [return: bb329, unwind: bb346];
    }

    bb329: {
        _537 = const false;
        goto -> bb330;
    }

    bb330: {
        _564 = const false;
        return;
    }

    bb331 (cleanup): {
        drop(_5) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        resume;
    }

    bb333 (cleanup): {
        drop(_466) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb334 (cleanup): {
        switchInt(_531) -> [0: bb346, otherwise: bb333];
    }

    bb335 (cleanup): {
        drop(_467) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        switchInt(_532) -> [0: bb346, otherwise: bb335];
    }

    bb337 (cleanup): {
        drop(_468) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        switchInt(_533) -> [0: bb346, otherwise: bb337];
    }

    bb339 (cleanup): {
        drop(_469) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        switchInt(_534) -> [0: bb346, otherwise: bb339];
    }

    bb341 (cleanup): {
        drop(_470) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        switchInt(_535) -> [0: bb346, otherwise: bb341];
    }

    bb343 (cleanup): {
        drop(_471) -> [return: bb346, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        switchInt(_536) -> [0: bb346, otherwise: bb343];
    }

    bb345 (cleanup): {
        drop(_464) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        switchInt(_537) -> [0: bb400, otherwise: bb345];
    }

    bb347 (cleanup): {
        drop(_135) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb348 (cleanup): {
        switchInt(_538) -> [0: bb400, otherwise: bb347];
    }

    bb349 (cleanup): {
        drop(_136) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        switchInt(_539) -> [0: bb400, otherwise: bb349];
    }

    bb351 (cleanup): {
        drop(_137) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb352 (cleanup): {
        switchInt(_540) -> [0: bb400, otherwise: bb351];
    }

    bb353 (cleanup): {
        drop(_138) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb354 (cleanup): {
        switchInt(_541) -> [0: bb400, otherwise: bb353];
    }

    bb355 (cleanup): {
        drop(_139) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb356 (cleanup): {
        switchInt(_542) -> [0: bb400, otherwise: bb355];
    }

    bb357 (cleanup): {
        drop(_140) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb358 (cleanup): {
        switchInt(_543) -> [0: bb400, otherwise: bb357];
    }

    bb359 (cleanup): {
        drop(_141) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb360 (cleanup): {
        switchInt(_544) -> [0: bb400, otherwise: bb359];
    }

    bb361 (cleanup): {
        drop(_142) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb362 (cleanup): {
        switchInt(_545) -> [0: bb400, otherwise: bb361];
    }

    bb363 (cleanup): {
        drop(_143) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb364 (cleanup): {
        switchInt(_546) -> [0: bb400, otherwise: bb363];
    }

    bb365 (cleanup): {
        drop(_144) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb366 (cleanup): {
        switchInt(_547) -> [0: bb400, otherwise: bb365];
    }

    bb367 (cleanup): {
        drop(_145) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb368 (cleanup): {
        switchInt(_548) -> [0: bb400, otherwise: bb367];
    }

    bb369 (cleanup): {
        drop(_146) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb370 (cleanup): {
        switchInt(_549) -> [0: bb400, otherwise: bb369];
    }

    bb371 (cleanup): {
        drop(_147) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb372 (cleanup): {
        switchInt(_550) -> [0: bb400, otherwise: bb371];
    }

    bb373 (cleanup): {
        drop(_148) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb374 (cleanup): {
        switchInt(_551) -> [0: bb400, otherwise: bb373];
    }

    bb375 (cleanup): {
        drop(_149) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb376 (cleanup): {
        switchInt(_552) -> [0: bb400, otherwise: bb375];
    }

    bb377 (cleanup): {
        drop(_150) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb378 (cleanup): {
        switchInt(_553) -> [0: bb400, otherwise: bb377];
    }

    bb379 (cleanup): {
        drop(_151) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb380 (cleanup): {
        switchInt(_554) -> [0: bb400, otherwise: bb379];
    }

    bb381 (cleanup): {
        drop(_152) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb382 (cleanup): {
        switchInt(_555) -> [0: bb400, otherwise: bb381];
    }

    bb383 (cleanup): {
        drop(_153) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        switchInt(_556) -> [0: bb400, otherwise: bb383];
    }

    bb385 (cleanup): {
        drop(_154) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb386 (cleanup): {
        switchInt(_557) -> [0: bb400, otherwise: bb385];
    }

    bb387 (cleanup): {
        drop(_155) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb388 (cleanup): {
        switchInt(_558) -> [0: bb400, otherwise: bb387];
    }

    bb389 (cleanup): {
        drop(_156) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb390 (cleanup): {
        switchInt(_559) -> [0: bb400, otherwise: bb389];
    }

    bb391 (cleanup): {
        drop(_157) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb392 (cleanup): {
        switchInt(_560) -> [0: bb400, otherwise: bb391];
    }

    bb393 (cleanup): {
        drop(_158) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb394 (cleanup): {
        switchInt(_561) -> [0: bb400, otherwise: bb393];
    }

    bb395 (cleanup): {
        drop(_108) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb396 (cleanup): {
        switchInt(_562) -> [0: bb400, otherwise: bb395];
    }

    bb397 (cleanup): {
        drop(_109) -> [return: bb400, unwind terminate(cleanup)];
    }

    bb398 (cleanup): {
        switchInt(_563) -> [0: bb400, otherwise: bb397];
    }

    bb399 (cleanup): {
        drop(_6) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb400 (cleanup): {
        switchInt(_564) -> [0: bb332, otherwise: bb399];
    }

    bb401 (cleanup): {
        drop(_7) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb402 (cleanup): {
        switchInt(_565) -> [0: bb332, otherwise: bb401];
    }

    bb403 (cleanup): {
        drop(_8) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb404 (cleanup): {
        switchInt(_566) -> [0: bb332, otherwise: bb403];
    }

    bb405 (cleanup): {
        drop(_9) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb406 (cleanup): {
        switchInt(_567) -> [0: bb332, otherwise: bb405];
    }

    bb407 (cleanup): {
        drop(_10) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb408 (cleanup): {
        switchInt(_568) -> [0: bb332, otherwise: bb407];
    }

    bb409 (cleanup): {
        drop(_11) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb410 (cleanup): {
        switchInt(_569) -> [0: bb332, otherwise: bb409];
    }

    bb411 (cleanup): {
        drop(_12) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb412 (cleanup): {
        switchInt(_570) -> [0: bb332, otherwise: bb411];
    }
}

promoted[0] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "build";
        _2 = &(*_3);
        _5 = const "clear";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[1] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "auto";
        _2 = &(*_3);
        _5 = const "never";
        _4 = &(*_5);
        _7 = const "always";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[2] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "auto";
        _2 = &(*_3);
        _5 = const "never";
        _4 = &(*_5);
        _7 = const "always";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[3] in build_app: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;

    bb0: {
        _3 = const "always";
        _2 = &(*_3);
        _5 = const "never";
        _4 = &(*_5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[4] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "auto";
        _2 = &(*_3);
        _5 = const "never";
        _4 = &(*_5);
        _7 = const "always";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[5] in build_app: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;

    bb0: {
        _3 = const "auto";
        _2 = &(*_3);
        _5 = const "never";
        _4 = &(*_5);
        _7 = const "character";
        _6 = &(*_7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

fn build_app::{closure#0}(_1: &{closure@src/bin/bat/clap_app.rs:137:29: 137:32}, _2: String) -> std::result::Result<(), String> {
    debug n => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<(), &str>;
    let mut _4: std::result::Result<usize, &str>;
    let mut _5: std::result::Result<usize, std::num::ParseIntError>;
    let _6: &str;
    let mut _7: &std::string::String;

    bb0: {
        _7 = &_2;
        _6 = <String as Deref>::deref(move _7) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _5 = core::str::<impl str>::parse::<usize>(_6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = std::result::Result::<usize, std::num::ParseIntError>::map_err::<&str, {closure@src/bin/bat/clap_app.rs:139:46: 139:49}>(move _5, const ZeroSized: {closure@src/bin/bat/clap_app.rs:139:46: 139:49}) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = std::result::Result::<usize, &str>::map::<(), {closure@src/bin/bat/clap_app.rs:140:42: 140:45}>(move _4, const ZeroSized: {closure@src/bin/bat/clap_app.rs:140:42: 140:45}) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = std::result::Result::<(), &str>::map_err::<String, {closure@src/bin/bat/clap_app.rs:141:46: 141:49}>(move _3, const ZeroSized: {closure@src/bin/bat/clap_app.rs:141:46: 141:49}) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn build_app::{closure#0}::{closure#0}(_1: {closure@src/bin/bat/clap_app.rs:139:46: 139:49}, _2: std::num::ParseIntError) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "must be a number";
        return;
    }
}

fn build_app::{closure#0}::{closure#1}(_1: {closure@src/bin/bat/clap_app.rs:140:42: 140:45}, _2: usize) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn build_app::{closure#0}::{closure#2}(_1: {closure@src/bin/bat/clap_app.rs:141:46: 141:49}, _2: &str) -> String {
    debug e => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn build_app::{closure#1}(_1: &{closure@src/bin/bat/clap_app.rs:158:17: 158:20}, _2: String) -> std::result::Result<(), String> {
    debug t => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::result::Result<(), &str>;
    let mut _4: std::result::Result<u32, &str>;
    let mut _5: std::result::Result<u32, std::num::ParseIntError>;
    let _6: &str;
    let mut _7: &std::string::String;

    bb0: {
        _7 = &_2;
        _6 = <String as Deref>::deref(move _7) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _5 = core::str::<impl str>::parse::<u32>(_6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = std::result::Result::<u32, std::num::ParseIntError>::map_err::<&str, {closure@src/bin/bat/clap_app.rs:160:34: 160:38}>(move _5, const ZeroSized: {closure@src/bin/bat/clap_app.rs:160:34: 160:38}) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = std::result::Result::<u32, &str>::map::<(), {closure@src/bin/bat/clap_app.rs:161:30: 161:34}>(move _4, const ZeroSized: {closure@src/bin/bat/clap_app.rs:161:30: 161:34}) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = std::result::Result::<(), &str>::map_err::<String, {closure@src/bin/bat/clap_app.rs:162:34: 162:37}>(move _3, const ZeroSized: {closure@src/bin/bat/clap_app.rs:162:34: 162:37}) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn build_app::{closure#1}::{closure#0}(_1: {closure@src/bin/bat/clap_app.rs:160:34: 160:38}, _2: std::num::ParseIntError) -> &str {
    debug _t => _2;
    let mut _0: &str;

    bb0: {
        _0 = const "must be a number";
        return;
    }
}

fn build_app::{closure#1}::{closure#1}(_1: {closure@src/bin/bat/clap_app.rs:161:30: 161:34}, _2: u32) -> () {
    debug _t => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn build_app::{closure#1}::{closure#2}(_1: {closure@src/bin/bat/clap_app.rs:162:34: 162:37}, _2: &str) -> String {
    debug e => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn build_app::{closure#2}(_1: &{closure@src/bin/bat/clap_app.rs:193:21: 193:24}, _2: String) -> std::result::Result<(), String> {
    debug t => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let _3: bool;
    let mut _4: bool;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &str;
    let mut _8: &std::string::String;
    let mut _9: std::result::Result<(), &str>;
    let mut _10: std::result::Result<i32, &str>;
    let mut _11: std::result::Result<i32, std::num::ParseIntError>;
    let _12: &str;
    let mut _13: &std::string::String;
    let mut _14: {closure@src/bin/bat/clap_app.rs:197:39: 197:42};
    let mut _15: &bool;
    scope 1 {
        debug is_offset => _3;
    }

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _4 = core::str::<impl str>::starts_with::<'_, char>(_5, const '+') -> [return: bb2, unwind: bb13];
    }

    bb2: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = const true;
        goto -> bb6;
    }

    bb4: {
        _8 = &_2;
        _7 = <String as Deref>::deref(move _8) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _3 = core::str::<impl str>::starts_with::<'_, char>(_7, const '-') -> [return: bb15, unwind: bb13];
    }

    bb6: {
        _13 = &_2;
        _12 = <String as Deref>::deref(move _13) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _11 = core::str::<impl str>::parse::<i32>(_12) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _10 = std::result::Result::<i32, std::num::ParseIntError>::map_err::<&str, {closure@src/bin/bat/clap_app.rs:196:38: 196:42}>(move _11, const ZeroSized: {closure@src/bin/bat/clap_app.rs:196:38: 196:42}) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _15 = &_3;
        _14 = {closure@src/bin/bat/clap_app.rs:197:39: 197:42} { is_offset: move _15 };
        _9 = std::result::Result::<i32, &str>::and_then::<(), {closure@src/bin/bat/clap_app.rs:197:39: 197:42}>(move _10, move _14) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _0 = std::result::Result::<(), &str>::map_err::<String, {closure@src/bin/bat/clap_app.rs:202:38: 202:41}>(move _9, const ZeroSized: {closure@src/bin/bat/clap_app.rs:202:38: 202:41}) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        goto -> bb6;
    }
}

fn build_app::{closure#2}::{closure#0}(_1: {closure@src/bin/bat/clap_app.rs:196:38: 196:42}, _2: std::num::ParseIntError) -> &str {
    debug _e => _2;
    let mut _0: &str;

    bb0: {
        _0 = const "must be an offset or number";
        return;
    }
}

fn build_app::{closure#2}::{closure#1}(_1: {closure@src/bin/bat/clap_app.rs:197:39: 197:42}, _2: i32) -> std::result::Result<(), &str> {
    debug v => _2;
    debug is_offset => (*(_1.0: &bool));
    let mut _0: std::result::Result<(), &str>;
    let mut _3: bool;
    let _4: &str;
    let mut _5: &bool;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _5 = deref_copy (_1.0: &bool);
        _3 = (*_5);
        switchInt(move _3) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _4 = const "terminal width cannot be zero";
        _0 = std::result::Result::<(), &str>::Err(_4);
        goto -> bb4;
    }

    bb3: {
        _0 = std::result::Result::<(), &str>::Ok(const ());
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn build_app::{closure#2}::{closure#2}(_1: {closure@src/bin/bat/clap_app.rs:202:38: 202:41}, _2: &str) -> String {
    debug e => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn build_app::{closure#3}(_1: &{closure@src/bin/bat/clap_app.rs:368:28: 368:33}, _2: String) -> std::result::Result<(), String> {
    debug val => _2;
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _3: std::iter::Filter<std::str::Split<'_, char>, {closure@src/bin/bat/clap_app.rs:369:66: 369:73}>;
    let mut _4: std::str::Split<'_, char>;
    let _5: &str;
    let mut _6: &std::string::String;
    let mut _7: std::option::Option<&str>;
    let mut _8: &mut std::iter::Filter<std::str::Split<'_, char>, {closure@src/bin/bat/clap_app.rs:369:66: 369:73}>;
    let mut _9: isize;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&str;
    scope 1 {
        debug invalid_vals => _3;
        scope 2 {
            debug invalid => _10;
            let _10: &str;
            let _11: std::string::String;
            let mut _19: &[&str; 2];
            scope 3 {
                debug res => _11;
            }
        }
    }

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _4 = core::str::<impl str>::split::<'_, char>(_5, const ',') -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _3 = <std::str::Split<'_, char> as Iterator>::filter::<{closure@src/bin/bat/clap_app.rs:369:66: 369:73}>(move _4, const ZeroSized: {closure@src/bin/bat/clap_app.rs:369:66: 369:73}) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _8 = &mut _3;
        _7 = <Filter<std::str::Split<'_, char>, {closure@src/bin/bat/clap_app.rs:369:66: 369:73}> as Iterator>::next(move _8) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb5, otherwise: bb9];
    }

    bb5: {
        _10 = ((_7 as Some).0: &str);
        _19 = const _;
        _13 = _19 as &[&str] (PointerCoercion(Unsize));
        _18 = &_10;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_18) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _11 = format(move _12) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _0 = std::result::Result::<(), String>::Err(move _11);
        goto -> bb10;
    }

    bb9: {
        _0 = std::result::Result::<(), String>::Ok(const ());
        goto -> bb10;
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in build_app::{closure#3}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Unknown style, '", const "'"];
        _0 = &_1;
        return;
    }
}

fn build_app::{closure#3}::{closure#0}(_1: &mut {closure@src/bin/bat/clap_app.rs:369:66: 369:73}, _2: &&str) -> bool {
    debug style => _2;
    let mut _0: bool;
    let mut _3: &bool;
    let _4: bool;
    let mut _5: &[&str];
    let mut _6: &[&str; 9];

    bb0: {
        _6 = const _;
        _5 = _6 as &[&str] (PointerCoercion(Unsize));
        _4 = core::slice::<impl [&str]>::contains(move _5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = <&bool as Not>::not(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in build_app::{closure#3}::{closure#0}: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;

    bb0: {
        _3 = const "full";
        _2 = &(*_3);
        _5 = const "plain";
        _4 = &(*_5);
        _7 = const "header";
        _6 = &(*_7);
        _9 = const "grid";
        _8 = &(*_9);
        _11 = const "rule";
        _10 = &(*_11);
        _13 = const "numbers";
        _12 = &(*_13);
        _15 = const "snip";
        _14 = &(*_15);
        _17 = const "changes";
        _16 = &(*_17);
        _1 = [const "auto", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16];
        _0 = &_1;
        return;
    }
}

fn config_file() -> PathBuf {
    let mut _0: std::path::PathBuf;
    let mut _1: std::option::Option<std::path::PathBuf>;
    let mut _2: std::option::Option<std::string::String>;
    let mut _3: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _3 = var::<&str>(const "BAT_CONFIG_PATH") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::result::Result::<String, VarError>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = Option::<String>::map::<PathBuf, fn(String) -> PathBuf {<PathBuf as From<String>>::from}>(move _2, <PathBuf as From<String>>::from) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Option::<PathBuf>::unwrap_or_else::<{closure@src/bin/bat/config.rs:13:25: 13:27}>(move _1, const ZeroSized: {closure@src/bin/bat/config.rs:13:25: 13:27}) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn config_file::{closure#0}(_1: {closure@src/bin/bat/config.rs:13:25: 13:27}) -> PathBuf {
    let mut _0: std::path::PathBuf;
    let _2: &std::path::Path;
    let _3: &directories::BatProjectDirs;
    let _4: &directories::PROJECT_DIRS;

    bb0: {
        _4 = const {alloc4: &PROJECT_DIRS};
        _3 = <PROJECT_DIRS as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = BatProjectDirs::config_dir(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Path::join::<&str>(_2, const "config") -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

fn generate_config_file() -> std::result::Result<(), bat::error::Error> {
    let mut _0: std::result::Result<(), bat::error::Error>;
    let _1: std::path::PathBuf;
    let mut _2: bool;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: std::borrow::Cow<'_, str>;
    let _14: &std::path::Path;
    let mut _15: &std::path::PathBuf;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _20: std::result::Result<(), std::io::Error>;
    let mut _21: &mut std::io::Stdout;
    let mut _22: std::io::Stdout;
    let mut _23: isize;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, usize>;
    let mut _27: std::result::Result<usize, std::io::Error>;
    let mut _28: &std::io::Stdin;
    let _29: std::io::Stdin;
    let mut _30: &mut std::string::String;
    let mut _31: isize;
    let mut _34: bool;
    let _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &str;
    let _40: &std::path::Path;
    let mut _41: &std::path::PathBuf;
    let mut _42: isize;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _45: std::result::Result<(), std::io::Error>;
    let mut _46: isize;
    let mut _48: bat::error::Error;
    let mut _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: [core::fmt::rt::Argument<'_>; 1];
    let mut _56: core::fmt::rt::Argument<'_>;
    let _57: &std::borrow::Cow<'_, str>;
    let _58: std::borrow::Cow<'_, str>;
    let _59: &std::path::Path;
    let mut _60: &std::path::PathBuf;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>;
    let mut _63: std::result::Result<(), std::string::String>;
    let mut _64: std::result::Result<(), std::io::Error>;
    let mut _65: &std::path::PathBuf;
    let mut _66: {closure@src/bin/bat/config.rs:73:53: 73:56};
    let mut _67: &std::path::PathBuf;
    let mut _68: isize;
    let _70: ();
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &std::borrow::Cow<'_, str>;
    let _78: std::borrow::Cow<'_, str>;
    let _79: &std::path::Path;
    let mut _80: &std::path::PathBuf;
    scope 1 {
        debug config_file => _1;
        let _24: std::result::Result<std::convert::Infallible, std::io::Error>;
        let mut _25: std::string::String;
        let _39: std::option::Option<&std::path::Path>;
        let _61: &str;
        let mut _82: &[&str; 1];
        let mut _83: &[&str; 2];
        scope 2 {
            debug residual => _24;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug decision => _25;
            let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _33: usize;
            scope 7 {
                debug residual => _32;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _33;
                scope 10 {
                }
            }
        }
        scope 11 {
            debug config_dir => _39;
            let _43: &std::path::Path;
            let _50: std::string::String;
            let mut _84: &[&str; 1];
            scope 12 {
                debug path => _43;
                let _47: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => const ();
                    scope 16 {
                    }
                }
            }
            scope 17 {
                debug res => _50;
            }
        }
        scope 18 {
            debug default_config => const "# This is `bat`s configuration file. Each line either contains a comment or\n# a command-line option that you want to pass to `bat` by default. You can\n# run `bat --help` to get a list of all possible configuration options.\n\n# Specify desired highlighting theme (e.g. \"TwoDark\"). Run `bat --list-themes`\n# for a list of all available themes\n#--theme=\"TwoDark\"\n\n# Enable this to use italic text on the terminal. This is not supported on all\n# terminal emulators (like tmux, by default):\n#--italic-text=always\n\n# Uncomment the following line to disable automatic paging:\n#--paging=never\n\n# Uncomment the following line if you are using less version >= 551 and want to\n# enable mouse scrolling support in `bat` when running inside tmux. This might\n# disable text selection, unless you press shift.\n#--pager=\"less --RAW-CONTROL-CHARS --quit-if-one-screen --mouse\"\n\n# Syntax mappings: map a certain filename pattern to a language.\n#   Example 1: use the C++ syntax for .ino files\n#   Example 2: Use \".gitignore\"-style highlighting for \".ignore\" files\n#--map-syntax \"*.ino:C++\"\n#--map-syntax \".ignore:Git Ignore\"\n";
            let _69: std::result::Result<std::convert::Infallible, std::string::String>;
            let mut _81: &[&str; 2];
            scope 19 {
                debug residual => _69;
                scope 20 {
                }
            }
            scope 21 {
                debug val => const ();
                scope 22 {
                }
            }
        }
    }

    bb0: {
        _1 = config_file() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _3 = <PathBuf as Deref>::deref(move _4) -> [return: bb2, unwind: bb65];
    }

    bb2: {
        _2 = Path::is_file(_3) -> [return: bb3, unwind: bb65];
    }

    bb3: {
        switchInt(move _2) -> [0: bb30, otherwise: bb4];
    }

    bb4: {
        _83 = const _;
        _7 = _83 as &[&str] (PointerCoercion(Unsize));
        _15 = &_1;
        _14 = <PathBuf as Deref>::deref(move _15) -> [return: bb5, unwind: bb65];
    }

    bb5: {
        _13 = Path::to_string_lossy(_14) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_12) -> [return: bb7, unwind: bb64];
    }

    bb7: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        _5 = _print(move _6) -> [return: bb9, unwind: bb64];
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb65];
    }

    bb10: {
        _82 = const _;
        _18 = _82 as &[&str] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb11, unwind: bb65];
    }

    bb11: {
        _16 = _print(move _17) -> [return: bb12, unwind: bb65];
    }

    bb12: {
        _22 = std::io::stdout() -> [return: bb13, unwind: bb65];
    }

    bb13: {
        _21 = &mut _22;
        _20 = <std::io::Stdout as std::io::Write>::flush(move _21) -> [return: bb14, unwind: bb65];
    }

    bb14: {
        _19 = <std::result::Result<(), std::io::Error> as Try>::branch(move _20) -> [return: bb15, unwind: bb65];
    }

    bb15: {
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        _25 = String::new() -> [return: bb19, unwind: bb65];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb67, unwind: bb65];
    }

    bb19: {
        _29 = stdin() -> [return: bb20, unwind: bb63];
    }

    bb20: {
        _28 = &_29;
        _30 = &mut _25;
        _27 = std::io::Stdin::read_line(move _28, _30) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        _26 = <std::result::Result<usize, std::io::Error> as Try>::branch(move _27) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb23, 1: bb24, otherwise: bb17];
    }

    bb23: {
        _33 = ((_26 as Continue).0: usize);
        _37 = &_25;
        _36 = <String as Deref>::deref(move _37) -> [return: bb25, unwind: bb63];
    }

    bb24: {
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _32) -> [return: bb68, unwind: bb63];
    }

    bb25: {
        _35 = core::str::<impl str>::trim(_36) -> [return: bb26, unwind: bb63];
    }

    bb26: {
        _38 = const "Y";
        _34 = core::str::<impl str>::eq_ignore_ascii_case(_35, _38) -> [return: bb27, unwind: bb63];
    }

    bb27: {
        switchInt(move _34) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        drop(_25) -> [return: bb45, unwind: bb65];
    }

    bb29: {
        _0 = std::result::Result::<(), bat::error::Error>::Ok(const ());
        goto -> bb57;
    }

    bb30: {
        _41 = &_1;
        _40 = <PathBuf as Deref>::deref(move _41) -> [return: bb31, unwind: bb65];
    }

    bb31: {
        _39 = Path::parent(_40) -> [return: bb32, unwind: bb65];
    }

    bb32: {
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb33, 1: bb34, otherwise: bb17];
    }

    bb33: {
        _84 = const _;
        _52 = _84 as &[&str] (PointerCoercion(Unsize));
        _60 = &_1;
        _59 = <PathBuf as Deref>::deref(move _60) -> [return: bb38, unwind: bb65];
    }

    bb34: {
        _43 = ((_39 as Some).0: &std::path::Path);
        _45 = create_dir_all::<&Path>(_43) -> [return: bb35, unwind: bb65];
    }

    bb35: {
        _44 = <std::result::Result<(), std::io::Error> as Try>::branch(move _45) -> [return: bb36, unwind: bb65];
    }

    bb36: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb45, 1: bb37, otherwise: bb17];
    }

    bb37: {
        _47 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _47) -> [return: bb69, unwind: bb65];
    }

    bb38: {
        _58 = Path::to_string_lossy(_59) -> [return: bb39, unwind: bb65];
    }

    bb39: {
        _57 = &_58;
        _56 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_57) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        _55 = [move _56];
        _54 = &_55;
        _53 = _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _51 = Arguments::<'_>::new_v1(move _52, move _53) -> [return: bb41, unwind: bb62];
    }

    bb41: {
        _50 = format(move _51) -> [return: bb42, unwind: bb62];
    }

    bb42: {
        drop(_58) -> [return: bb43, unwind: bb61];
    }

    bb43: {
        _49 = move _50;
        _48 = <String as Into<bat::error::Error>>::into(move _49) -> [return: bb44, unwind: bb65];
    }

    bb44: {
        _0 = std::result::Result::<(), bat::error::Error>::Err(move _48);
        goto -> bb58;
    }

    bb45: {
        _61 = const "# This is `bat`s configuration file. Each line either contains a comment or\n# a command-line option that you want to pass to `bat` by default. You can\n# run `bat --help` to get a list of all possible configuration options.\n\n# Specify desired highlighting theme (e.g. \"TwoDark\"). Run `bat --list-themes`\n# for a list of all available themes\n#--theme=\"TwoDark\"\n\n# Enable this to use italic text on the terminal. This is not supported on all\n# terminal emulators (like tmux, by default):\n#--italic-text=always\n\n# Uncomment the following line to disable automatic paging:\n#--paging=never\n\n# Uncomment the following line if you are using less version >= 551 and want to\n# enable mouse scrolling support in `bat` when running inside tmux. This might\n# disable text selection, unless you press shift.\n#--pager=\"less --RAW-CONTROL-CHARS --quit-if-one-screen --mouse\"\n\n# Syntax mappings: map a certain filename pattern to a language.\n#   Example 1: use the C++ syntax for .ino files\n#   Example 2: Use \".gitignore\"-style highlighting for \".ignore\" files\n#--map-syntax \"*.ino:C++\"\n#--map-syntax \".ignore:Git Ignore\"\n";
        _65 = &_1;
        _64 = std::fs::write::<&PathBuf, &str>(move _65, _61) -> [return: bb46, unwind: bb65];
    }

    bb46: {
        _67 = &_1;
        _66 = {closure@src/bin/bat/config.rs:73:53: 73:56} { config_file: move _67 };
        _63 = std::result::Result::<(), std::io::Error>::map_err::<String, {closure@src/bin/bat/config.rs:73:53: 73:56}>(move _64, move _66) -> [return: bb47, unwind: bb65];
    }

    bb47: {
        _62 = <std::result::Result<(), String> as Try>::branch(move _63) -> [return: bb48, unwind: bb65];
    }

    bb48: {
        _68 = discriminant(_62);
        switchInt(move _68) -> [0: bb49, 1: bb50, otherwise: bb17];
    }

    bb49: {
        _81 = const _;
        _72 = _81 as &[&str] (PointerCoercion(Unsize));
        _80 = &_1;
        _79 = <PathBuf as Deref>::deref(move _80) -> [return: bb51, unwind: bb65];
    }

    bb50: {
        _69 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, String>>>::from_residual(move _69) -> [return: bb70, unwind: bb65];
    }

    bb51: {
        _78 = Path::to_string_lossy(_79) -> [return: bb52, unwind: bb65];
    }

    bb52: {
        _77 = &_78;
        _76 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_77) -> [return: bb53, unwind: bb60];
    }

    bb53: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _71 = Arguments::<'_>::new_v1(move _72, move _73) -> [return: bb54, unwind: bb60];
    }

    bb54: {
        _70 = _print(move _71) -> [return: bb55, unwind: bb60];
    }

    bb55: {
        drop(_78) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        _0 = std::result::Result::<(), bat::error::Error>::Ok(const ());
        drop(_1) -> [return: bb59, unwind continue];
    }

    bb57: {
        drop(_25) -> [return: bb58, unwind: bb65];
    }

    bb58: {
        drop(_1) -> [return: bb59, unwind continue];
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_78) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_50) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_58) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_25) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_13) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_1) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67: {
        goto -> bb58;
    }

    bb68: {
        goto -> bb57;
    }

    bb69: {
        goto -> bb58;
    }

    bb70: {
        goto -> bb58;
    }
}

promoted[0] in generate_config_file: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Success! Config file written to ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in generate_config_file: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Overwrite? (y/N): "];
        _0 = &_1;
        return;
    }
}

promoted[2] in generate_config_file: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "A config file already exists at: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in generate_config_file: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to write config file to: "];
        _0 = &_1;
        return;
    }
}

fn generate_config_file::{closure#0}(_1: {closure@src/bin/bat/config.rs:73:53: 73:56}, _2: std::io::Error) -> String {
    debug e => _2;
    debug config_file => (*(_1.0: &std::path::PathBuf));
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::borrow::Cow<'_, str>;
    let _11: std::borrow::Cow<'_, str>;
    let _12: &std::path::Path;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::io::Error;
    let mut _15: &[&str; 2];
    let mut _16: &std::path::PathBuf;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _15 = const _;
        _5 = _15 as &[&str] (PointerCoercion(Unsize));
        _16 = deref_copy (_1.0: &std::path::PathBuf);
        _12 = <PathBuf as Deref>::deref(_16) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _11 = Path::to_string_lossy(_12) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_10) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_14) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = [move _9, move _13];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _3 = format(move _4) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_11) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = move _3;
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_11) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in generate_config_file::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Failed to create config file at '", const "': "];
        _0 = &_1;
        return;
    }
}

fn get_args_from_config_file() -> std::result::Result<Vec<OsString>, ParseError> {
    let mut _0: std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>;
    let mut _1: std::vec::Vec<std::ffi::OsString>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, shell_words::ParseError>, std::option::Option<std::vec::Vec<std::ffi::OsString>>>;
    let mut _3: std::result::Result<std::option::Option<std::vec::Vec<std::ffi::OsString>>, shell_words::ParseError>;
    let mut _4: std::option::Option<std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>>;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: std::result::Result<std::string::String, std::io::Error>;
    let mut _7: std::path::PathBuf;
    let mut _8: isize;
    let _9: std::option::Option<std::vec::Vec<std::ffi::OsString>>;
    scope 1 {
        debug residual => const std::result::Result::<Infallible, ParseError>::Err(ParseError);
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _7 = config_file() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = std::fs::read_to_string::<PathBuf>(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = std::result::Result::<String, std::io::Error>::ok(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = Option::<String>::map::<std::result::Result<Vec<OsString>, ParseError>, {closure@src/bin/bat/config.rs:92:14: 92:23}>(move _5, const ZeroSized: {closure@src/bin/bat/config.rs:92:14: 92:23}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = Option::<std::result::Result<Vec<OsString>, ParseError>>::transpose(move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = <std::result::Result<Option<Vec<OsString>>, ParseError> as Try>::branch(move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = discriminant(_2);
        switchInt(move _8) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _9 = move ((_2 as Continue).0: std::option::Option<std::vec::Vec<std::ffi::OsString>>);
        _1 = Option::<Vec<OsString>>::unwrap_or_else::<fn() -> Vec<OsString> {Vec::<OsString>::new}>(move _9, Vec::<OsString>::new) -> [return: bb10, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _0 = <std::result::Result<Vec<OsString>, ParseError> as FromResidual<std::result::Result<Infallible, ParseError>>>::from_residual(const std::result::Result::<Infallible, ParseError>::Err(ParseError)) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = std::result::Result::<Vec<OsString>, ParseError>::Ok(move _1);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn get_args_from_config_file::{closure#0}(_1: {closure@src/bin/bat/config.rs:92:14: 92:23}, _2: String) -> std::result::Result<Vec<OsString>, ParseError> {
    debug content => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>;
    let _3: &str;
    let _4: &std::string::String;

    bb0: {
        _4 = &_2;
        _3 = <String as Deref>::deref(_4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = get_args_from_str(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn get_args_from_env_var() -> Option<std::result::Result<Vec<OsString>, ParseError>> {
    let mut _0: std::option::Option<std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>>;
    let mut _1: std::option::Option<std::string::String>;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _2 = var::<&str>(const "BAT_OPTS") -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = std::result::Result::<String, VarError>::ok(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Option::<String>::map::<std::result::Result<Vec<OsString>, ParseError>, {closure@src/bin/bat/config.rs:98:35: 98:38}>(move _1, const ZeroSized: {closure@src/bin/bat/config.rs:98:35: 98:38}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn get_args_from_env_var::{closure#0}(_1: {closure@src/bin/bat/config.rs:98:35: 98:38}, _2: String) -> std::result::Result<Vec<OsString>, ParseError> {
    debug s => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>;
    let _3: &str;
    let _4: &std::string::String;

    bb0: {
        _4 = &_2;
        _3 = <String as Deref>::deref(_4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = get_args_from_str(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn get_args_from_str(_1: &str) -> std::result::Result<Vec<OsString>, ParseError> {
    debug content => _1;
    let mut _0: std::result::Result<std::vec::Vec<std::ffi::OsString>, shell_words::ParseError>;
    let _2: std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, shell_words::ParseError>, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _4: std::result::Result<std::vec::Vec<std::vec::Vec<std::string::String>>, shell_words::ParseError>;
    let mut _5: std::iter::Map<std::iter::Filter<std::iter::Filter<std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}>, {closure@src/bin/bat/config.rs:106:17: 106:23}>, {closure@src/bin/bat/config.rs:107:14: 107:20}>;
    let mut _6: std::iter::Filter<std::iter::Filter<std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}>, {closure@src/bin/bat/config.rs:106:17: 106:23}>;
    let mut _7: std::iter::Filter<std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}>;
    let mut _8: std::iter::Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>;
    let mut _9: std::str::Split<'_, char>;
    let mut _10: isize;
    let _11: std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _12: std::vec::Vec<std::ffi::OsString>;
    let mut _13: std::iter::Map<std::iter::Flatten<std::slice::Iter<'_, std::vec::Vec<std::string::String>>>, {closure@src/bin/bat/config.rs:113:14: 113:20}>;
    let mut _14: std::iter::Flatten<std::slice::Iter<'_, std::vec::Vec<std::string::String>>>;
    let mut _15: std::slice::Iter<'_, std::vec::Vec<std::string::String>>;
    let _16: &[std::vec::Vec<std::string::String>];
    let mut _17: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    scope 1 {
        debug args_per_line => _2;
    }
    scope 2 {
        debug residual => const std::result::Result::<Infallible, ParseError>::Err(ParseError);
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _9 = core::str::<impl str>::split::<'_, char>(_1, const '\n') -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <std::str::Split<'_, char> as Iterator>::map::<&str, {closure@src/bin/bat/config.rs:104:14: 104:20}>(move _9, const ZeroSized: {closure@src/bin/bat/config.rs:104:14: 104:20}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = <Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}> as Iterator>::filter::<{closure@src/bin/bat/config.rs:105:17: 105:23}>(move _8, const ZeroSized: {closure@src/bin/bat/config.rs:105:17: 105:23}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = <Filter<Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}> as Iterator>::filter::<{closure@src/bin/bat/config.rs:106:17: 106:23}>(move _7, const ZeroSized: {closure@src/bin/bat/config.rs:106:17: 106:23}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = <Filter<Filter<Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}>, {closure@src/bin/bat/config.rs:106:17: 106:23}> as Iterator>::map::<std::result::Result<Vec<String>, ParseError>, {closure@src/bin/bat/config.rs:107:14: 107:20}>(move _6, const ZeroSized: {closure@src/bin/bat/config.rs:107:14: 107:20}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = <Map<Filter<Filter<Map<std::str::Split<'_, char>, {closure@src/bin/bat/config.rs:104:14: 104:20}>, {closure@src/bin/bat/config.rs:105:17: 105:23}>, {closure@src/bin/bat/config.rs:106:17: 106:23}>, {closure@src/bin/bat/config.rs:107:14: 107:20}> as Iterator>::collect::<std::result::Result<Vec<Vec<String>>, ParseError>>(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _3 = <std::result::Result<Vec<Vec<String>>, ParseError> as Try>::branch(move _4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_3);
        switchInt(move _10) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _11 = move ((_3 as Continue).0: std::vec::Vec<std::vec::Vec<std::string::String>>);
        _2 = move _11;
        _17 = &_2;
        _16 = <Vec<Vec<String>> as Deref>::deref(move _17) -> [return: bb11, unwind: bb17];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _0 = <std::result::Result<Vec<OsString>, ParseError> as FromResidual<std::result::Result<Infallible, ParseError>>>::from_residual(const std::result::Result::<Infallible, ParseError>::Err(ParseError)) -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = core::slice::<impl [Vec<String>]>::iter(_16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _14 = <std::slice::Iter<'_, Vec<String>> as Iterator>::flatten(move _15) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _13 = <Flatten<std::slice::Iter<'_, Vec<String>>> as Iterator>::map::<OsString, {closure@src/bin/bat/config.rs:113:14: 113:20}>(move _14, const ZeroSized: {closure@src/bin/bat/config.rs:113:14: 113:20}) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _12 = <Map<Flatten<std::slice::Iter<'_, Vec<String>>>, {closure@src/bin/bat/config.rs:113:14: 113:20}> as Iterator>::collect::<Vec<OsString>>(move _13) -> [return: bb15, unwind: bb17];
    }

    bb15: {
        _0 = std::result::Result::<Vec<OsString>, ParseError>::Ok(move _12);
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}

fn get_args_from_str::{closure#0}(_1: &mut {closure@src/bin/bat/config.rs:104:14: 104:20}, _2: &str) -> &str {
    debug line => _2;
    let mut _0: &str;

    bb0: {
        _0 = core::str::<impl str>::trim(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_args_from_str::{closure#1}(_1: &mut {closure@src/bin/bat/config.rs:105:17: 105:23}, _2: &&str) -> bool {
    debug line => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &str;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = core::str::<impl str>::is_empty(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn get_args_from_str::{closure#2}(_1: &mut {closure@src/bin/bat/config.rs:106:17: 106:23}, _2: &&str) -> bool {
    debug line => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &str;

    bb0: {
        _4 = deref_copy (*_2);
        _3 = core::str::<impl str>::starts_with::<'_, char>(_4, const '#') -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn get_args_from_str::{closure#3}(_1: &mut {closure@src/bin/bat/config.rs:107:14: 107:20}, _2: &str) -> std::result::Result<Vec<String>, ParseError> {
    debug line => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::string::String>, shell_words::ParseError>;

    bb0: {
        _0 = shell_words::split(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_args_from_str::{closure#4}(_1: &mut {closure@src/bin/bat/config.rs:113:14: 113:20}, _2: &String) -> OsString {
    debug line => _2;
    let mut _0: std::ffi::OsString;

    bb0: {
        _0 = <&String as Into<OsString>>::into(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::new() -> Option<BatProjectDirs> {
    let mut _0: std::option::Option<directories::BatProjectDirs>;
    let _1: std::path::PathBuf;
    let mut _2: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, std::path::PathBuf>;
    let mut _3: std::option::Option<std::path::PathBuf>;
    let mut _4: isize;
    let _5: std::path::PathBuf;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, std::path::PathBuf>;
    let mut _8: std::option::Option<std::path::PathBuf>;
    let mut _9: isize;
    let mut _11: directories::BatProjectDirs;
    let mut _12: std::path::PathBuf;
    scope 1 {
        debug cache_dir => _1;
        let _6: std::option::Option<std::path::PathBuf>;
        scope 6 {
            debug config_dir_op => _6;
            let _10: std::path::PathBuf;
            scope 7 {
                debug config_dir => _10;
            }
            scope 8 {
                debug residual => const Option::<Infallible>::None;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _10;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => const Option::<Infallible>::None;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _5;
        scope 5 {
        }
    }

    bb0: {
        _3 = BatProjectDirs::get_cache_dir() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Option<PathBuf> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _5 = move ((_2 as Continue).0: std::path::PathBuf);
        _1 = move _5;
        _6 = dirs_next::config_dir() -> [return: bb6, unwind: bb13];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Option<BatProjectDirs> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> [return: bb12, unwind continue];
    }

    bb6: {
        _8 = Option::<PathBuf>::map::<PathBuf, {closure@src/bin/bat/directories.rs:27:44: 27:47}>(move _6, const ZeroSized: {closure@src/bin/bat/directories.rs:27:44: 27:47}) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _7 = <Option<PathBuf> as Try>::branch(move _8) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _10 = move ((_7 as Continue).0: std::path::PathBuf);
        _12 = move _1;
        _11 = BatProjectDirs { cache_dir: move _12, config_dir: move _10 };
        _0 = Option::<BatProjectDirs>::Some(move _11);
        goto -> bb12;
    }

    bb10: {
        _0 = <Option<BatProjectDirs> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::new::{closure#0}(_1: {closure@src/bin/bat/directories.rs:27:44: 27:47}, _2: PathBuf) -> PathBuf {
    debug d => _2;
    let mut _0: std::path::PathBuf;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;

    bb0: {
        _4 = &_2;
        _3 = <PathBuf as Deref>::deref(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = Path::join::<&str>(_3, const "bat") -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::get_cache_dir() -> Option<PathBuf> {
    let mut _0: std::option::Option<std::path::PathBuf>;
    let _1: std::option::Option<std::path::PathBuf>;
    let mut _2: std::option::Option<std::ffi::OsString>;
    let mut _3: bool;
    let mut _4: &std::option::Option<std::path::PathBuf>;
    scope 1 {
        debug cache_dir_op => _1;
        let _5: std::option::Option<std::path::PathBuf>;
        scope 2 {
            debug cache_dir_op => _5;
        }
    }

    bb0: {
        _2 = var_os::<&str>(const "BAT_CACHE_PATH") -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Option::<OsString>::map::<PathBuf, fn(OsString) -> PathBuf {<PathBuf as From<OsString>>::from}>(move _2, <PathBuf as From<OsString>>::from) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _3 = Option::<PathBuf>::is_some(move _4) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _0 = move _1;
        goto -> bb8;
    }

    bb5: {
        _5 = dirs_next::cache_dir() -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _0 = Option::<PathBuf>::map::<PathBuf, {closure@src/bin/bat/directories.rs:51:26: 51:29}>(move _5, const ZeroSized: {closure@src/bin/bat/directories.rs:51:26: 51:29}) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::get_cache_dir::{closure#0}(_1: {closure@src/bin/bat/directories.rs:51:26: 51:29}, _2: PathBuf) -> PathBuf {
    debug d => _2;
    let mut _0: std::path::PathBuf;
    let _3: &std::path::Path;
    let mut _4: &std::path::PathBuf;

    bb0: {
        _4 = &_2;
        _3 = <PathBuf as Deref>::deref(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = Path::join::<&str>(_3, const "bat") -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::cache_dir(_1: &BatProjectDirs) -> &Path {
    debug self => _1;
    let mut _0: &std::path::Path;
    let _2: &std::path::PathBuf;

    bb0: {
        _2 = &((*_1).0: std::path::PathBuf);
        _0 = <PathBuf as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn directories::<impl at src/bin/bat/directories.rs:14:1: 14:20>::config_dir(_1: &BatProjectDirs) -> &Path {
    debug self => _1;
    let mut _0: &std::path::Path;
    let _2: &std::path::PathBuf;

    bb0: {
        _2 = &((*_1).1: std::path::PathBuf);
        _0 = <PathBuf as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static PROJECT_DIRS: PROJECT_DIRS = {
    let mut _0: directories::PROJECT_DIRS;
    let mut _1: ();

    bb0: {
        StorageLive(_1);
        _1 = ();
        _0 = PROJECT_DIRS { __private_field: move _1 };
        StorageDead(_1);
        return;
    }
}

fn directories::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:133:9: 133:36>::deref(_1: &PROJECT_DIRS) -> &BatProjectDirs {
    debug self => _1;
    let mut _0: &directories::BatProjectDirs;

    bb0: {
        _0 = __stability() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn __static_ref_initialize() -> BatProjectDirs {
    let mut _0: directories::BatProjectDirs;
    let mut _1: std::option::Option<directories::BatProjectDirs>;
    let _2: &str;

    bb0: {
        _1 = BatProjectDirs::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = const "Could not get home directory";
        _0 = Option::<BatProjectDirs>::expect(move _1, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn __stability() -> &BatProjectDirs {
    let mut _0: &directories::BatProjectDirs;
    let _1: &lazy_static::lazy::Lazy<directories::BatProjectDirs>;

    bb0: {
        _1 = const {alloc5: &Lazy<BatProjectDirs>};
        _0 = Lazy::<BatProjectDirs>::get::<fn() -> BatProjectDirs {__static_ref_initialize}>(_1, __static_ref_initialize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc5 (static: LAZY, size: 56, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 80 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x20 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x30 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

static LAZY: Lazy<BatProjectDirs> = {
    let mut _0: lazy_static::lazy::Lazy<directories::BatProjectDirs>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn directories::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs:147:9: 147:39>::initialize(_1: &PROJECT_DIRS) -> () {
    debug lazy => _1;
    let mut _0: ();
    let _2: &directories::BatProjectDirs;
    scope 1 {
    }

    bb0: {
        _2 = <PROJECT_DIRS as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn new_file_input(_1: &Path, _2: Option<&Path>) -> bat::input::Input<'_> {
    debug file => _1;
    debug name => _2;
    let mut _0: bat::input::Input<'_>;
    let mut _3: bat::input::Input<'_>;
    let mut _4: std::option::Option<&std::path::Path>;
    let mut _5: std::option::Option<&std::path::Path>;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = bat::input::Input::<'_>::ordinary_file::<&Path>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Option::<&Path>::Some(_1);
        _4 = Option::<&Path>::or(_2, move _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = const false;
        _0 = named(move _3, move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _6 = const false;
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5];
    }
}

fn new_stdin_input(_1: Option<&Path>) -> bat::input::Input<'_> {
    debug name => _1;
    let mut _0: bat::input::Input<'_>;
    let mut _2: bat::input::Input<'_>;

    bb0: {
        _2 = bat::input::Input::<'_>::stdin() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = named(move _2, _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn named(_1: bat::input::Input<'_>, _2: Option<&Path>) -> bat::input::Input<'_> {
    debug input => _1;
    debug name => _2;
    let mut _0: bat::input::Input<'_>;
    let mut _3: isize;
    let mut _6: std::option::Option<&std::path::Path>;
    let _7: ();
    let mut _8: &mut bat::input::InputDescription;
    let mut _9: &mut bat::input::Input<'_>;
    let mut _10: std::option::Option<std::string::String>;
    let mut _11: std::string::String;
    let _12: &str;
    scope 1 {
        debug provided_name => _4;
        let _4: &std::path::Path;
        let mut _5: bat::input::Input<'_>;
        scope 2 {
            debug input => _5;
        }
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb6];
    }

    bb1: {
        _4 = ((_2 as Some).0: &std::path::Path);
        _6 = Option::<&Path>::Some(_4);
        _5 = bat::input::Input::<'_>::with_name::<&Path>(move _1, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &mut _5;
        _8 = bat::input::Input::<'_>::description_mut(move _9) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _12 = const "File";
        _11 = <str as ToOwned>::to_owned(_12) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = Option::<String>::Some(move _11);
        _7 = InputDescription::set_kind(_8, move _10) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = move _5;
        goto -> bb7;
    }

    bb6: {
        _0 = move _1;
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

const THEME_PREVIEW_DATA: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 172];
    let _2: &[u8; 172];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"  // Output the square of a number.\n  fn print_square(num: f64) {\n      let result = f64::powf(num, 2.0);\n      println!(\"The square of {:.2} is {:.2}.\", num, result);\n  }\n";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc6 (size: 172, align: 1) {
    0x00 │ 20 20 2f 2f 20 4f 75 74 70 75 74 20 74 68 65 20 │   // Output the 
    0x10 │ 73 71 75 61 72 65 20 6f 66 20 61 20 6e 75 6d 62 │ square of a numb
    0x20 │ 65 72 2e 0a 20 20 66 6e 20 70 72 69 6e 74 5f 73 │ er..  fn print_s
    0x30 │ 71 75 61 72 65 28 6e 75 6d 3a 20 66 36 34 29 20 │ quare(num: f64) 
    0x40 │ 7b 0a 20 20 20 20 20 20 6c 65 74 20 72 65 73 75 │ {.      let resu
    0x50 │ 6c 74 20 3d 20 66 36 34 3a 3a 70 6f 77 66 28 6e │ lt = f64::powf(n
    0x60 │ 75 6d 2c 20 32 2e 30 29 3b 0a 20 20 20 20 20 20 │ um, 2.0);.      
    0x70 │ 70 72 69 6e 74 6c 6e 21 28 22 54 68 65 20 73 71 │ println!("The sq
    0x80 │ 75 61 72 65 20 6f 66 20 7b 3a 2e 32 7d 20 69 73 │ uare of {:.2} is
    0x90 │ 20 7b 3a 2e 32 7d 2e 22 2c 20 6e 75 6d 2c 20 72 │  {:.2}.", num, r
    0xa0 │ 65 73 75 6c 74 29 3b 0a 20 20 7d 0a             │ esult);.  }.
}

fn run_cache_subcommand(_1: &ArgMatches<'_>) -> std::result::Result<(), bat::error::Error> {
    debug matches => _1;
    let mut _0: std::result::Result<(), bat::error::Error>;
    let mut _2: bool;
    let _3: &std::path::Path;
    let mut _4: std::option::Option<&std::path::Path>;
    let mut _5: std::option::Option<&str>;
    let mut _7: std::option::Option<&std::path::Path>;
    let mut _8: std::option::Option<&str>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::assets::HighlightingAssets>;
    let mut _12: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let mut _13: bool;
    let mut _14: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>>;
    let mut _18: std::result::Result<(), bat::error::Error>;
    let mut _19: &bat::assets::HighlightingAssets;
    let _20: &str;
    let mut _21: isize;
    let mut _23: bool;
    let _24: ();
    scope 1 {
        debug source_dir => _3;
        let _6: &std::path::Path;
        scope 2 {
            debug target_dir => _6;
            let _9: bool;
            scope 3 {
                debug blank => _9;
                let _10: bat::assets::HighlightingAssets;
                let _15: std::result::Result<std::convert::Infallible, bat::error::Error>;
                let _16: bat::assets::HighlightingAssets;
                scope 4 {
                    debug assets => _10;
                    let _22: std::result::Result<std::convert::Infallible, bat::error::Error>;
                    scope 9 {
                        debug residual => _22;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => const ();
                        scope 12 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _15;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _16;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        _2 = ArgMatches::<'_>::is_present::<&str>(_1, const "build") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb20, otherwise: bb2];
    }

    bb2: {
        _5 = ArgMatches::<'_>::value_of::<&str>(_1, const "source") -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = Option::<&str>::map::<&Path, for<'a> fn(&'a str) -> &'a Path {Path::new::<str>}>(move _5, Path::new::<str>) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = Option::<&Path>::unwrap_or_else::<{closure@src/bin/bat/main.rs:47:29: 47:31}>(move _4, const ZeroSized: {closure@src/bin/bat/main.rs:47:29: 47:31}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = ArgMatches::<'_>::value_of::<&str>(_1, const "target") -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = Option::<&str>::map::<&Path, for<'a> fn(&'a str) -> &'a Path {Path::new::<str>}>(move _8, Path::new::<str>) -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = Option::<&Path>::unwrap_or_else::<{closure@src/bin/bat/main.rs:51:29: 51:31}>(move _7, const ZeroSized: {closure@src/bin/bat/main.rs:51:29: 51:31}) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = ArgMatches::<'_>::is_present::<&str>(_1, const "blank") -> [return: bb9, unwind continue];
    }

    bb9: {
        _13 = Not(_9);
        _12 = HighlightingAssets::from_files(_3, move _13) -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = <std::result::Result<HighlightingAssets, bat::error::Error> as Try>::branch(move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _16 = move ((_11 as Continue).0: bat::assets::HighlightingAssets);
        _10 = move _16;
        _19 = &_10;
        _20 = const "0.18.3";
        _18 = HighlightingAssets::save_to_cache(move _19, _6, _20) -> [return: bb15, unwind: bb25];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _15) -> [return: bb24, unwind continue];
    }

    bb15: {
        _17 = <std::result::Result<(), bat::error::Error> as Try>::branch(move _18) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        drop(_10) -> [return: bb23, unwind continue];
    }

    bb18: {
        _22 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _22) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        drop(_10) -> [return: bb24, unwind continue];
    }

    bb20: {
        _23 = ArgMatches::<'_>::is_present::<&str>(_1, const "clear") -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _23) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _24 = clear_assets() -> [return: bb23, unwind continue];
    }

    bb23: {
        _0 = std::result::Result::<(), bat::error::Error>::Ok(const ());
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_10) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }
}

fn run_cache_subcommand::{closure#0}(_1: {closure@src/bin/bat/main.rs:47:29: 47:31}) -> &Path {
    let mut _0: &std::path::Path;
    let _2: &directories::BatProjectDirs;
    let _3: &directories::PROJECT_DIRS;

    bb0: {
        _3 = const {alloc4: &PROJECT_DIRS};
        _2 = <PROJECT_DIRS as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BatProjectDirs::config_dir(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

fn run_cache_subcommand::{closure#1}(_1: {closure@src/bin/bat/main.rs:51:29: 51:31}) -> &Path {
    let mut _0: &std::path::Path;
    let _2: &directories::BatProjectDirs;
    let _3: &directories::PROJECT_DIRS;

    bb0: {
        _3 = const {alloc4: &PROJECT_DIRS};
        _2 = <PROJECT_DIRS as Deref>::deref(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BatProjectDirs::cache_dir(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

fn get_syntax_mapping_to_paths(_1: &[(GlobMatcher, MappingTarget<'_>)]) -> HashMap<&str, Vec<String>> {
    debug mappings => _1;
    let mut _0: std::collections::HashMap<&str, std::vec::Vec<std::string::String>>;
    let mut _2: std::collections::HashMap<&str, std::vec::Vec<std::string::String>>;
    let mut _3: std::slice::Iter<'_, (globset::GlobMatcher, bat::MappingTarget<'_>)>;
    let mut _5: std::option::Option<&(globset::GlobMatcher, bat::MappingTarget<'_>)>;
    let mut _6: &mut std::slice::Iter<'_, (globset::GlobMatcher, bat::MappingTarget<'_>)>;
    let mut _7: isize;
    let mut _9: isize;
    let mut _13: std::collections::hash_map::Entry<'_, &str, std::vec::Vec<std::string::String>>;
    let mut _14: &mut std::collections::HashMap<&str, std::vec::Vec<std::string::String>>;
    let mut _15: &str;
    let _16: ();
    let mut _17: std::string::String;
    let _18: &str;
    let _19: &globset::Glob;
    scope 1 {
        debug map => _2;
        let mut _4: std::slice::Iter<'_, (globset::GlobMatcher, bat::MappingTarget<'_>)>;
        scope 2 {
            debug iter => _4;
            let _8: &(globset::GlobMatcher, bat::MappingTarget<'_>);
            scope 3 {
                debug mapping => _8;
                let _10: &globset::GlobMatcher;
                let _11: &&str;
                scope 4 {
                    debug matcher => _10;
                    debug s => _11;
                    let _12: &mut std::vec::Vec<std::string::String>;
                    scope 5 {
                        debug globs => _12;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = HashMap::<&str, Vec<String>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <&[(GlobMatcher, MappingTarget<'_>)] as IntoIterator>::into_iter(_1) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _4 = move _3;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, (GlobMatcher, MappingTarget<'_>)> as Iterator>::next(_6) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ((_5 as Some).0: &(globset::GlobMatcher, bat::MappingTarget<'_>));
        _9 = discriminant(((*_8).1: bat::MappingTarget<'_>));
        switchInt(move _9) -> [0: bb8, 1: bb3, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = move _2;
        return;
    }

    bb8: {
        _10 = &((*_8).0: globset::GlobMatcher);
        _11 = &((((*_8).1: bat::MappingTarget<'_>) as MapTo).0: &str);
        _14 = &mut _2;
        _15 = (*_11);
        _13 = HashMap::<&str, Vec<String>>::entry(move _14, move _15) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _12 = std::collections::hash_map::Entry::<'_, &str, Vec<String>>::or_insert_with::<fn() -> Vec<String> {Vec::<String>::new}>(move _13, Vec::<String>::new) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _19 = GlobMatcher::glob(_10) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _18 = Glob::glob(_19) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        _17 = <&str as Into<String>>::into(_18) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _16 = Vec::<String>::push(_12, move _17) -> [return: bb16, unwind: bb14];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        goto -> bb3;
    }
}

fn get_languages(_1: &Config<'_>) -> std::result::Result<String, bat::error::Error> {
    debug config => _1;
    let mut _0: std::result::Result<std::string::String, bat::error::Error>;
    let mut _2: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::assets::HighlightingAssets>;
    let mut _5: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let mut _6: isize;
    let mut _10: std::iter::Cloned<std::iter::Filter<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:87:17: 87:25}>>;
    let mut _11: std::iter::Filter<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:87:17: 87:25}>;
    let mut _12: std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let _13: &[syntect::parsing::syntax_set::SyntaxReference];
    let mut _14: &bat::assets::HighlightingAssets;
    let mut _15: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _16: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _17: &mut [syntect::parsing::syntax_set::SyntaxReference];
    let mut _18: &mut std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _20: std::option::Option<&mut syntect::parsing::syntax_set::SyntaxReference>;
    let mut _21: &mut std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _22: isize;
    let mut _25: &std::string::String;
    let _26: ();
    let mut _27: &mut std::vec::Vec<std::string::String>;
    let mut _28: {closure@src/bin/bat/main.rs:94:37: 94:48};
    let mut _29: &bat::assets::HighlightingAssets;
    let mut _30: &&bat::config::Config<'_>;
    let mut _31: &std::string::String;
    let _32: ();
    let mut _33: &mut [syntect::parsing::syntax_set::SyntaxReference];
    let mut _34: &mut std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let _36: &[(globset::GlobMatcher, bat::MappingTarget<'_>)];
    let mut _37: &bat::SyntaxMapping<'_>;
    let mut _38: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _39: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _40: &mut [syntect::parsing::syntax_set::SyntaxReference];
    let mut _41: &mut std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _43: std::option::Option<&mut syntect::parsing::syntax_set::SyntaxReference>;
    let mut _44: &mut std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let mut _45: isize;
    let mut _47: std::option::Option<&std::vec::Vec<std::string::String>>;
    let mut _48: &std::collections::HashMap<&str, std::vec::Vec<std::string::String>>;
    let _49: &str;
    let mut _50: &std::string::String;
    let mut _51: isize;
    let _53: ();
    let mut _54: &mut std::vec::Vec<std::string::String>;
    let mut _55: std::iter::Cloned<std::slice::Iter<'_, std::string::String>>;
    let mut _56: std::slice::Iter<'_, std::string::String>;
    let _57: &[std::string::String];
    let mut _58: bool;
    let mut _59: std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _60: std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _62: std::option::Option<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _63: &mut std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _64: isize;
    let _66: ();
    let mut _67: &mut std::string::String;
    let _68: &str;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let _75: &[core::fmt::rt::Argument<'_>; 2];
    let _76: [core::fmt::rt::Argument<'_>; 2];
    let mut _77: core::fmt::rt::Argument<'_>;
    let _78: &std::string::String;
    let mut _79: core::fmt::rt::Argument<'_>;
    let _80: &std::string::String;
    let _81: std::string::String;
    let _82: &[std::string::String];
    let mut _83: &std::vec::Vec<std::string::String>;
    let _84: &str;
    let mut _86: std::option::Option<usize>;
    let mut _87: std::iter::Map<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:130:18: 130:26}>;
    let mut _88: std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>;
    let _89: &[syntect::parsing::syntax_set::SyntaxReference];
    let mut _90: &std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _94: usize;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: (usize, bool);
    let mut _98: usize;
    let mut _99: &str;
    let mut _100: (usize, bool);
    let mut _102: bool;
    let mut _103: ansi_term::Colour;
    let mut _104: std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _105: std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _107: std::option::Option<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _108: &mut std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
    let mut _109: isize;
    let _111: ();
    let mut _112: &mut std::string::String;
    let _113: &str;
    let _114: &std::string::String;
    let _115: std::string::String;
    let mut _117: std::fmt::Arguments<'_>;
    let mut _118: &[&str];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let _120: &[core::fmt::rt::Argument<'_>; 3];
    let _121: [core::fmt::rt::Argument<'_>; 3];
    let mut _122: core::fmt::rt::Argument<'_>;
    let _123: &std::string::String;
    let mut _124: core::fmt::rt::Argument<'_>;
    let _125: &&str;
    let mut _126: core::fmt::rt::Argument<'_>;
    let _127: &usize;
    let mut _128: &[core::fmt::rt::Placeholder];
    let _129: &[core::fmt::rt::Placeholder; 2];
    let _130: [core::fmt::rt::Placeholder; 2];
    let mut _131: core::fmt::rt::Placeholder;
    let mut _132: core::fmt::rt::Alignment;
    let mut _133: core::fmt::rt::Count;
    let mut _134: core::fmt::rt::Count;
    let mut _135: core::fmt::rt::Placeholder;
    let mut _136: core::fmt::rt::Alignment;
    let mut _137: core::fmt::rt::Count;
    let mut _138: core::fmt::rt::Count;
    let mut _139: core::fmt::rt::UnsafeArg;
    let mut _142: std::slice::Iter<'_, std::string::String>;
    let _143: &[std::string::String];
    let mut _144: &std::vec::Vec<std::string::String>;
    let mut _145: std::option::Option<&std::string::String>;
    let mut _146: &mut std::iter::Peekable<std::slice::Iter<'_, std::string::String>>;
    let mut _147: isize;
    let mut _150: usize;
    let mut _151: usize;
    let mut _152: (usize, bool);
    let mut _153: bool;
    let mut _154: usize;
    let mut _155: usize;
    let mut _156: (usize, bool);
    let _157: ();
    let mut _158: &mut std::string::String;
    let _159: &str;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[core::fmt::rt::Argument<'_>];
    let _166: &[core::fmt::rt::Argument<'_>; 3];
    let _167: [core::fmt::rt::Argument<'_>; 3];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: core::fmt::rt::Argument<'_>;
    let _170: &&str;
    let mut _171: core::fmt::rt::Argument<'_>;
    let _172: &usize;
    let mut _173: &[core::fmt::rt::Placeholder];
    let _174: &[core::fmt::rt::Placeholder; 2];
    let _175: [core::fmt::rt::Placeholder; 2];
    let mut _176: core::fmt::rt::Placeholder;
    let mut _177: core::fmt::rt::Alignment;
    let mut _178: core::fmt::rt::Count;
    let mut _179: core::fmt::rt::Count;
    let mut _180: core::fmt::rt::Placeholder;
    let mut _181: core::fmt::rt::Alignment;
    let mut _182: core::fmt::rt::Count;
    let mut _183: core::fmt::rt::Count;
    let mut _184: core::fmt::rt::UnsafeArg;
    let mut _185: (usize, bool);
    let _186: ();
    let mut _187: &mut std::string::String;
    let _188: &str;
    let _189: &std::string::String;
    let _190: std::string::String;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[core::fmt::rt::Argument<'_>];
    let _195: &[core::fmt::rt::Argument<'_>; 1];
    let _196: [core::fmt::rt::Argument<'_>; 1];
    let mut _197: core::fmt::rt::Argument<'_>;
    let _198: &ansi_term::ANSIGenericString<'_, str>;
    let _199: ansi_term::ANSIGenericString<'_, str>;
    let mut _200: ansi_term::Style;
    let _201: &str;
    let mut _202: bool;
    let mut _203: &std::option::Option<&&std::string::String>;
    let _204: std::option::Option<&&std::string::String>;
    let mut _205: &mut std::iter::Peekable<std::slice::Iter<'_, std::string::String>>;
    let _206: ();
    let mut _207: &mut std::string::String;
    let _208: ();
    let mut _209: &mut std::string::String;
    let _210: &str;
    let mut _211: std::string::String;
    let mut _217: bool;
    let mut _218: bool;
    scope 1 {
        debug result => _2;
        let _3: bat::assets::HighlightingAssets;
        let _7: std::result::Result<std::convert::Infallible, bat::error::Error>;
        let _8: bat::assets::HighlightingAssets;
        scope 2 {
            debug assets => _3;
            let mut _9: std::vec::Vec<syntect::parsing::syntax_set::SyntaxReference>;
            scope 7 {
                debug languages => _9;
                let mut _19: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
                let _35: std::collections::HashMap<&str, std::vec::Vec<std::string::String>>;
                scope 8 {
                    debug iter => _19;
                    let _23: &mut syntect::parsing::syntax_set::SyntaxReference;
                    scope 9 {
                        debug lang => _23;
                        let _24: std::string::String;
                        scope 10 {
                            debug lang_name => _24;
                        }
                    }
                }
                scope 11 {
                    debug configured_languages => _35;
                    let mut _42: std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference>;
                    let mut _61: std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
                    let _85: usize;
                    scope 12 {
                        debug iter => _42;
                        let _46: &mut syntect::parsing::syntax_set::SyntaxReference;
                        scope 13 {
                            debug lang => _46;
                            scope 14 {
                                debug additional_paths => _52;
                                let _52: &std::vec::Vec<std::string::String>;
                            }
                        }
                    }
                    scope 15 {
                        debug iter => _61;
                        let _65: syntect::parsing::syntax_set::SyntaxReference;
                        scope 16 {
                            debug lang => _65;
                            let _71: std::string::String;
                            let mut _212: &[&str; 3];
                            scope 17 {
                                debug res => _71;
                            }
                        }
                    }
                    scope 18 {
                        debug longest => _85;
                        let _91: &str;
                        scope 19 {
                            debug comma_separator => const ", ";
                            let _92: &str;
                            scope 20 {
                                debug separator => const " ";
                                let _93: usize;
                                scope 21 {
                                    debug desired_width => _93;
                                    let _101: ansi_term::Style;
                                    scope 22 {
                                        debug style => _101;
                                        let mut _106: std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference>;
                                        scope 23 {
                                            debug iter => _106;
                                            let _110: syntect::parsing::syntax_set::SyntaxReference;
                                            scope 24 {
                                                debug lang => _110;
                                                let _116: std::string::String;
                                                let mut _140: usize;
                                                let mut _216: &[&str; 2];
                                                scope 25 {
                                                    debug res => _116;
                                                }
                                                scope 26 {
                                                }
                                                scope 27 {
                                                    debug num_chars => _140;
                                                    let mut _141: std::iter::Peekable<std::slice::Iter<'_, std::string::String>>;
                                                    scope 28 {
                                                        debug extension => _141;
                                                        scope 29 {
                                                            debug word => _148;
                                                            let _148: &std::string::String;
                                                            let _149: usize;
                                                            scope 30 {
                                                                debug new_chars => _149;
                                                                let _162: std::string::String;
                                                                let _191: std::string::String;
                                                                let mut _213: &[&str; 1];
                                                                let mut _214: &&str;
                                                                let mut _215: &[&str; 2];
                                                                scope 31 {
                                                                    debug res => _162;
                                                                }
                                                                scope 32 {
                                                                }
                                                                scope 33 {
                                                                    debug res => _191;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _7;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _8;
            scope 6 {
            }
        }
    }

    bb0: {
        _218 = const false;
        _217 = const false;
        _218 = const true;
        _2 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = assets_from_cache_or_binary() -> [return: bb2, unwind: bb143];
    }

    bb2: {
        _4 = <std::result::Result<HighlightingAssets, bat::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb143];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _8 = move ((_4 as Continue).0: bat::assets::HighlightingAssets);
        _3 = move _8;
        _14 = &_3;
        _13 = HighlightingAssets::syntaxes(move _14) -> [return: bb8, unwind: bb138];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<String, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _7) -> [return: bb7, unwind: bb143];
    }

    bb7: {
        drop(_2) -> [return: bb122, unwind continue];
    }

    bb8: {
        _12 = core::slice::<impl [syntect::parsing::syntax_set::SyntaxReference]>::iter(_13) -> [return: bb9, unwind: bb138];
    }

    bb9: {
        _11 = <std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference> as Iterator>::filter::<{closure@src/bin/bat/main.rs:87:17: 87:25}>(move _12, const ZeroSized: {closure@src/bin/bat/main.rs:87:17: 87:25}) -> [return: bb10, unwind: bb138];
    }

    bb10: {
        _10 = <Filter<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:87:17: 87:25}> as Iterator>::cloned::<'_, syntect::parsing::syntax_set::SyntaxReference>(move _11) -> [return: bb11, unwind: bb138];
    }

    bb11: {
        _9 = <Cloned<Filter<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:87:17: 87:25}>> as Iterator>::collect::<Vec<syntect::parsing::syntax_set::SyntaxReference>>(move _10) -> [return: bb12, unwind: bb138];
    }

    bb12: {
        _217 = const true;
        _18 = &mut _9;
        _17 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as DerefMut>::deref_mut(move _18) -> [return: bb13, unwind: bb141];
    }

    bb13: {
        _16 = core::slice::<impl [syntect::parsing::syntax_set::SyntaxReference]>::iter_mut(_17) -> [return: bb14, unwind: bb141];
    }

    bb14: {
        _15 = <std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference> as IntoIterator>::into_iter(move _16) -> [return: bb15, unwind: bb141];
    }

    bb15: {
        _19 = move _15;
        goto -> bb16;
    }

    bb16: {
        _21 = &mut _19;
        _20 = <std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference> as Iterator>::next(_21) -> [return: bb17, unwind: bb141];
    }

    bb17: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb19, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _23 = move ((_20 as Some).0: &mut syntect::parsing::syntax_set::SyntaxReference);
        _25 = &((*_23).0: std::string::String);
        _24 = <String as Clone>::clone(move _25) -> [return: bb20, unwind: bb141];
    }

    bb19: {
        _34 = &mut _9;
        _33 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as DerefMut>::deref_mut(move _34) -> [return: bb22, unwind: bb141];
    }

    bb20: {
        _27 = &mut ((*_23).1: std::vec::Vec<std::string::String>);
        _29 = &_3;
        _30 = &_1;
        _31 = &_24;
        _28 = {closure@src/bin/bat/main.rs:94:37: 94:48} { assets: move _29, config: move _30, lang_name: move _31 };
        _26 = Vec::<String>::retain::<{closure@src/bin/bat/main.rs:94:37: 94:48}>(move _27, move _28) -> [return: bb21, unwind: bb137];
    }

    bb21: {
        drop(_24) -> [return: bb16, unwind: bb141];
    }

    bb22: {
        _32 = slice::<impl [syntect::parsing::syntax_set::SyntaxReference]>::sort_by_key::<String, {closure@src/bin/bat/main.rs:112:27: 112:33}>(_33, const ZeroSized: {closure@src/bin/bat/main.rs:112:27: 112:33}) -> [return: bb23, unwind: bb141];
    }

    bb23: {
        _37 = &((*_1).12: bat::SyntaxMapping<'_>);
        _36 = SyntaxMapping::<'_>::mappings(move _37) -> [return: bb24, unwind: bb141];
    }

    bb24: {
        _35 = get_syntax_mapping_to_paths(_36) -> [return: bb25, unwind: bb141];
    }

    bb25: {
        _41 = &mut _9;
        _40 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as DerefMut>::deref_mut(move _41) -> [return: bb26, unwind: bb136];
    }

    bb26: {
        _39 = core::slice::<impl [syntect::parsing::syntax_set::SyntaxReference]>::iter_mut(_40) -> [return: bb27, unwind: bb136];
    }

    bb27: {
        _38 = <std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference> as IntoIterator>::into_iter(move _39) -> [return: bb28, unwind: bb136];
    }

    bb28: {
        _42 = move _38;
        goto -> bb29;
    }

    bb29: {
        _44 = &mut _42;
        _43 = <std::slice::IterMut<'_, syntect::parsing::syntax_set::SyntaxReference> as Iterator>::next(_44) -> [return: bb30, unwind: bb136];
    }

    bb30: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb32, 1: bb31, otherwise: bb5];
    }

    bb31: {
        _46 = move ((_43 as Some).0: &mut syntect::parsing::syntax_set::SyntaxReference);
        _48 = &_35;
        _50 = &((*_46).0: std::string::String);
        _49 = String::as_str(move _50) -> [return: bb33, unwind: bb136];
    }

    bb32: {
        _58 = ((*_1).4: bool);
        switchInt(move _58) -> [0: bb40, otherwise: bb39];
    }

    bb33: {
        _47 = HashMap::<&str, Vec<String>>::get::<str>(move _48, _49) -> [return: bb34, unwind: bb136];
    }

    bb34: {
        _51 = discriminant(_47);
        switchInt(move _51) -> [1: bb35, otherwise: bb29];
    }

    bb35: {
        _52 = ((_47 as Some).0: &std::vec::Vec<std::string::String>);
        _54 = &mut ((*_46).1: std::vec::Vec<std::string::String>);
        _57 = <Vec<String> as Deref>::deref(_52) -> [return: bb36, unwind: bb136];
    }

    bb36: {
        _56 = core::slice::<impl [String]>::iter(_57) -> [return: bb37, unwind: bb136];
    }

    bb37: {
        _55 = <std::slice::Iter<'_, String> as Iterator>::cloned::<'_, String>(move _56) -> [return: bb38, unwind: bb136];
    }

    bb38: {
        _53 = <Vec<String> as Extend<String>>::extend::<Cloned<std::slice::Iter<'_, String>>>(move _54, move _55) -> [return: bb144, unwind: bb136];
    }

    bb39: {
        _217 = const false;
        _60 = move _9;
        _59 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as IntoIterator>::into_iter(move _60) -> [return: bb41, unwind: bb136];
    }

    bb40: {
        _90 = &_9;
        _89 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as Deref>::deref(move _90) -> [return: bb56, unwind: bb136];
    }

    bb41: {
        _61 = move _59;
        goto -> bb42;
    }

    bb42: {
        _63 = &mut _61;
        _62 = <std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference> as Iterator>::next(_63) -> [return: bb43, unwind: bb135];
    }

    bb43: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb45, 1: bb44, otherwise: bb5];
    }

    bb44: {
        _65 = move ((_62 as Some).0: syntect::parsing::syntax_set::SyntaxReference);
        _67 = &mut _2;
        _212 = const _;
        _73 = _212 as &[&str] (PointerCoercion(Unsize));
        _78 = &(_65.0: std::string::String);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<String>(_78) -> [return: bb46, unwind: bb134];
    }

    bb45: {
        drop(_61) -> [return: bb119, unwind: bb136];
    }

    bb46: {
        _83 = &(_65.1: std::vec::Vec<std::string::String>);
        _82 = <Vec<String> as Deref>::deref(move _83) -> [return: bb47, unwind: bb134];
    }

    bb47: {
        _84 = const ",";
        _81 = slice::<impl [String]>::join::<&str>(_82, _84) -> [return: bb48, unwind: bb134];
    }

    bb48: {
        _80 = &_81;
        _79 = core::fmt::rt::Argument::<'_>::new_display::<String>(_80) -> [return: bb49, unwind: bb133];
    }

    bb49: {
        _76 = [move _77, move _79];
        _75 = &_76;
        _74 = _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _72 = Arguments::<'_>::new_v1(move _73, move _74) -> [return: bb50, unwind: bb133];
    }

    bb50: {
        _71 = format(move _72) -> [return: bb51, unwind: bb133];
    }

    bb51: {
        drop(_81) -> [return: bb52, unwind: bb132];
    }

    bb52: {
        _70 = move _71;
        _69 = &_70;
        _68 = <String as Deref>::deref(_69) -> [return: bb53, unwind: bb131];
    }

    bb53: {
        _66 = <String as AddAssign<&str>>::add_assign(move _67, _68) -> [return: bb54, unwind: bb131];
    }

    bb54: {
        drop(_70) -> [return: bb55, unwind: bb134];
    }

    bb55: {
        drop(_65) -> [return: bb42, unwind: bb135];
    }

    bb56: {
        _88 = core::slice::<impl [syntect::parsing::syntax_set::SyntaxReference]>::iter(_89) -> [return: bb57, unwind: bb136];
    }

    bb57: {
        _87 = <std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference> as Iterator>::map::<usize, {closure@src/bin/bat/main.rs:130:18: 130:26}>(move _88, const ZeroSized: {closure@src/bin/bat/main.rs:130:18: 130:26}) -> [return: bb58, unwind: bb136];
    }

    bb58: {
        _86 = <Map<std::slice::Iter<'_, syntect::parsing::syntax_set::SyntaxReference>, {closure@src/bin/bat/main.rs:130:18: 130:26}> as Iterator>::max(move _87) -> [return: bb59, unwind: bb136];
    }

    bb59: {
        _85 = Option::<usize>::unwrap_or(move _86, const 32_usize) -> [return: bb60, unwind: bb136];
    }

    bb60: {
        _91 = const ", ";
        _92 = const " ";
        _95 = ((*_1).2: usize);
        _96 = _85;
        _97 = CheckedSub(_95, _96);
        assert(!move (_97.1: bool), "attempt to compute `{} - {}`, which would overflow", move _95, move _96) -> [success: bb61, unwind: bb136];
    }

    bb61: {
        _94 = move (_97.0: usize);
        _99 = _92;
        _98 = core::str::<impl str>::len(move _99) -> [return: bb62, unwind: bb136];
    }

    bb62: {
        _100 = CheckedSub(_94, _98);
        assert(!move (_100.1: bool), "attempt to compute `{} - {}`, which would overflow", move _94, move _98) -> [success: bb63, unwind: bb136];
    }

    bb63: {
        _93 = move (_100.0: usize);
        _102 = ((*_1).5: bool);
        switchInt(move _102) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _103 = ansi_term::Colour::Green;
        _101 = Colour::normal(move _103) -> [return: bb145, unwind: bb136];
    }

    bb65: {
        _101 = <ansi_term::Style as Default>::default() -> [return: bb146, unwind: bb136];
    }

    bb66: {
        _217 = const false;
        _105 = move _9;
        _104 = <Vec<syntect::parsing::syntax_set::SyntaxReference> as IntoIterator>::into_iter(move _105) -> [return: bb67, unwind: bb136];
    }

    bb67: {
        _106 = move _104;
        goto -> bb68;
    }

    bb68: {
        _108 = &mut _106;
        _107 = <std::vec::IntoIter<syntect::parsing::syntax_set::SyntaxReference> as Iterator>::next(_108) -> [return: bb69, unwind: bb130];
    }

    bb69: {
        _109 = discriminant(_107);
        switchInt(move _109) -> [0: bb71, 1: bb70, otherwise: bb5];
    }

    bb70: {
        _110 = move ((_107 as Some).0: syntect::parsing::syntax_set::SyntaxReference);
        _112 = &mut _2;
        _216 = const _;
        _118 = _216 as &[&str] (PointerCoercion(Unsize));
        _123 = &(_110.0: std::string::String);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<String>(_123) -> [return: bb72, unwind: bb129];
    }

    bb71: {
        drop(_106) -> [return: bb119, unwind: bb136];
    }

    bb72: {
        _125 = &_92;
        _124 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_125) -> [return: bb73, unwind: bb129];
    }

    bb73: {
        _127 = &_85;
        _126 = core::fmt::rt::Argument::<'_>::from_usize(_127) -> [return: bb74, unwind: bb129];
    }

    bb74: {
        _121 = [move _122, move _124, move _126];
        _120 = &_121;
        _119 = _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _132 = core::fmt::rt::Alignment::Unknown;
        _133 = core::fmt::rt::Count::Implied;
        _134 = core::fmt::rt::Count::Param(const 2_usize);
        _131 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _132, const 0_u32, move _133, move _134) -> [return: bb75, unwind: bb129];
    }

    bb75: {
        _136 = core::fmt::rt::Alignment::Unknown;
        _137 = core::fmt::rt::Count::Implied;
        _138 = core::fmt::rt::Count::Implied;
        _135 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _136, const 0_u32, move _137, move _138) -> [return: bb76, unwind: bb129];
    }

    bb76: {
        _130 = [move _131, move _135];
        _129 = &_130;
        _128 = _129 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _139 = core::fmt::rt::UnsafeArg::new() -> [return: bb77, unwind: bb129];
    }

    bb77: {
        _117 = Arguments::<'_>::new_v1_formatted(move _118, move _119, move _128, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb78, unwind: bb129];
    }

    bb78: {
        _116 = format(move _117) -> [return: bb79, unwind: bb129];
    }

    bb79: {
        _115 = move _116;
        _114 = &_115;
        _113 = <String as Deref>::deref(_114) -> [return: bb80, unwind: bb128];
    }

    bb80: {
        _111 = <String as AddAssign<&str>>::add_assign(move _112, _113) -> [return: bb81, unwind: bb128];
    }

    bb81: {
        drop(_115) -> [return: bb82, unwind: bb129];
    }

    bb82: {
        _140 = const 0_usize;
        _144 = &(_110.1: std::vec::Vec<std::string::String>);
        _143 = <Vec<String> as Deref>::deref(move _144) -> [return: bb83, unwind: bb129];
    }

    bb83: {
        _142 = core::slice::<impl [String]>::iter(_143) -> [return: bb84, unwind: bb129];
    }

    bb84: {
        _141 = <std::slice::Iter<'_, String> as Iterator>::peekable(move _142) -> [return: bb147, unwind: bb129];
    }

    bb85: {
        _146 = &mut _141;
        _145 = <Peekable<std::slice::Iter<'_, String>> as Iterator>::next(move _146) -> [return: bb86, unwind: bb129];
    }

    bb86: {
        _147 = discriminant(_145);
        switchInt(move _147) -> [1: bb87, otherwise: bb117];
    }

    bb87: {
        _148 = ((_145 as Some).0: &std::string::String);
        _150 = String::len(_148) -> [return: bb88, unwind: bb129];
    }

    bb88: {
        _151 = core::str::<impl str>::len(_91) -> [return: bb89, unwind: bb129];
    }

    bb89: {
        _152 = CheckedAdd(_150, _151);
        assert(!move (_152.1: bool), "attempt to compute `{} + {}`, which would overflow", move _150, move _151) -> [success: bb90, unwind: bb129];
    }

    bb90: {
        _149 = move (_152.0: usize);
        _155 = _140;
        _156 = CheckedAdd(_155, _149);
        assert(!move (_156.1: bool), "attempt to compute `{} + {}`, which would overflow", move _155, _149) -> [success: bb91, unwind: bb129];
    }

    bb91: {
        _154 = move (_156.0: usize);
        _153 = Ge(move _154, _93);
        switchInt(move _153) -> [0: bb103, otherwise: bb92];
    }

    bb92: {
        _140 = const 0_usize;
        _158 = &mut _2;
        _215 = const _;
        _164 = _215 as &[&str] (PointerCoercion(Unsize));
        _214 = const _;
        _168 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_214) -> [return: bb93, unwind: bb129];
    }

    bb93: {
        _170 = &_92;
        _169 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_170) -> [return: bb94, unwind: bb129];
    }

    bb94: {
        _172 = &_85;
        _171 = core::fmt::rt::Argument::<'_>::from_usize(_172) -> [return: bb95, unwind: bb129];
    }

    bb95: {
        _167 = [move _168, move _169, move _171];
        _166 = &_167;
        _165 = _166 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _177 = core::fmt::rt::Alignment::Unknown;
        _178 = core::fmt::rt::Count::Implied;
        _179 = core::fmt::rt::Count::Param(const 2_usize);
        _176 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _177, const 0_u32, move _178, move _179) -> [return: bb96, unwind: bb129];
    }

    bb96: {
        _181 = core::fmt::rt::Alignment::Unknown;
        _182 = core::fmt::rt::Count::Implied;
        _183 = core::fmt::rt::Count::Implied;
        _180 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _181, const 0_u32, move _182, move _183) -> [return: bb97, unwind: bb129];
    }

    bb97: {
        _175 = [move _176, move _180];
        _174 = &_175;
        _173 = _174 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _184 = core::fmt::rt::UnsafeArg::new() -> [return: bb98, unwind: bb129];
    }

    bb98: {
        _163 = Arguments::<'_>::new_v1_formatted(move _164, move _165, move _173, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb99, unwind: bb129];
    }

    bb99: {
        _162 = format(move _163) -> [return: bb100, unwind: bb129];
    }

    bb100: {
        _161 = move _162;
        _160 = &_161;
        _159 = <String as Deref>::deref(_160) -> [return: bb101, unwind: bb127];
    }

    bb101: {
        _157 = <String as AddAssign<&str>>::add_assign(move _158, _159) -> [return: bb102, unwind: bb127];
    }

    bb102: {
        drop(_161) -> [return: bb103, unwind: bb129];
    }

    bb103: {
        _185 = CheckedAdd(_140, _149);
        assert(!move (_185.1: bool), "attempt to compute `{} + {}`, which would overflow", _140, _149) -> [success: bb104, unwind: bb129];
    }

    bb104: {
        _140 = move (_185.0: usize);
        _187 = &mut _2;
        _213 = const _;
        _193 = _213 as &[&str] (PointerCoercion(Unsize));
        _200 = _101;
        _201 = <String as Index<RangeFull>>::index(_148, const RangeFull) -> [return: bb105, unwind: bb129];
    }

    bb105: {
        _199 = ansi_term::display::<impl ansi_term::Style>::paint::<'_, &str, str>(move _200, _201) -> [return: bb106, unwind: bb129];
    }

    bb106: {
        _198 = &_199;
        _197 = core::fmt::rt::Argument::<'_>::new_display::<ANSIGenericString<'_, str>>(_198) -> [return: bb107, unwind: bb126];
    }

    bb107: {
        _196 = [move _197];
        _195 = &_196;
        _194 = _195 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _192 = Arguments::<'_>::new_v1(move _193, move _194) -> [return: bb108, unwind: bb126];
    }

    bb108: {
        _191 = format(move _192) -> [return: bb109, unwind: bb126];
    }

    bb109: {
        drop(_199) -> [return: bb110, unwind: bb125];
    }

    bb110: {
        _190 = move _191;
        _189 = &_190;
        _188 = <String as Deref>::deref(_189) -> [return: bb111, unwind: bb124];
    }

    bb111: {
        _186 = <String as AddAssign<&str>>::add_assign(move _187, _188) -> [return: bb112, unwind: bb124];
    }

    bb112: {
        drop(_190) -> [return: bb113, unwind: bb129];
    }

    bb113: {
        _205 = &mut _141;
        _204 = Peekable::<std::slice::Iter<'_, String>>::peek(move _205) -> [return: bb114, unwind: bb129];
    }

    bb114: {
        _203 = &_204;
        _202 = Option::<&&String>::is_some(move _203) -> [return: bb115, unwind: bb129];
    }

    bb115: {
        switchInt(move _202) -> [0: bb85, otherwise: bb116];
    }

    bb116: {
        _207 = &mut _2;
        _206 = <String as AddAssign<&str>>::add_assign(move _207, _91) -> [return: bb148, unwind: bb129];
    }

    bb117: {
        _209 = &mut _2;
        _210 = const "\n";
        _208 = <String as AddAssign<&str>>::add_assign(move _209, _210) -> [return: bb118, unwind: bb129];
    }

    bb118: {
        drop(_110) -> [return: bb68, unwind: bb130];
    }

    bb119: {
        _218 = const false;
        _211 = move _2;
        _0 = std::result::Result::<String, bat::error::Error>::Ok(move _211);
        drop(_35) -> [return: bb120, unwind: bb141];
    }

    bb120: {
        _217 = const false;
        drop(_3) -> [return: bb121, unwind: bb143];
    }

    bb121: {
        _218 = const false;
        goto -> bb123;
    }

    bb122: {
        _218 = const false;
        goto -> bb123;
    }

    bb123: {
        return;
    }

    bb124 (cleanup): {
        drop(_190) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_191) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_199) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_161) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_115) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_110) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_106) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_70) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_71) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_81) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_65) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_61) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_35) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_24) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_3) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        resume;
    }

    bb140 (cleanup): {
        drop(_9) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_217) -> [0: bb138, otherwise: bb140];
    }

    bb142 (cleanup): {
        drop(_2) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        switchInt(_218) -> [0: bb139, otherwise: bb142];
    }

    bb144: {
        goto -> bb29;
    }

    bb145: {
        goto -> bb66;
    }

    bb146: {
        goto -> bb66;
    }

    bb147: {
        goto -> bb85;
    }

    bb148: {
        goto -> bb85;
    }
}

promoted[0] in get_languages: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ":", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in get_languages: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in get_languages: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}

promoted[3] in get_languages: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "\n", const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in get_languages: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

fn get_languages::{closure#0}(_1: &mut {closure@src/bin/bat/main.rs:87:17: 87:25}, _2: &&syntect::parsing::syntax_set::SyntaxReference) -> bool {
    debug syntax => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::vec::Vec<std::string::String>;
    let mut _6: &syntect::parsing::syntax_set::SyntaxReference;
    let mut _7: &syntect::parsing::syntax_set::SyntaxReference;

    bb0: {
        _6 = deref_copy (*_2);
        _3 = ((*_6).4: bool);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = deref_copy (*_2);
        _5 = &((*_7).1: std::vec::Vec<std::string::String>);
        _4 = Vec::<String>::is_empty(move _5) -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = const false;
        goto -> bb4;
    }

    bb3: {
        _0 = Not(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn get_languages::{closure#1}(_1: &mut {closure@src/bin/bat/main.rs:94:37: 94:48}, _2: &String) -> bool {
    debug extension => _2;
    debug assets => (*((*_1).0: &bat::assets::HighlightingAssets));
    debug config => (*((*_1).1: &&bat::config::Config<'_>));
    debug lang_name => (*((*_1).2: &std::string::String));
    let mut _0: bool;
    let mut _3: bool;
    let _4: &str;
    let mut _5: bool;
    let mut _6: &std::option::Option<&std::ffi::OsStr>;
    let _7: std::option::Option<&std::ffi::OsStr>;
    let _8: &std::path::Path;
    let _9: std::path::PathBuf;
    let _10: &std::path::Path;
    let _11: &str;
    let mut _12: std::option::Option<&syntect::parsing::syntax_set::SyntaxReference>;
    let _13: &bat::SyntaxMapping<'_>;
    let mut _14: isize;
    let mut _16: &std::string::String;
    let mut _17: &bat::assets::HighlightingAssets;
    let mut _18: &&bat::config::Config<'_>;
    let mut _19: &bat::config::Config<'_>;
    let mut _20: &std::string::String;
    scope 1 {
        debug test_file => _9;
        let _15: &syntect::parsing::syntax_set::SyntaxReference;
        scope 2 {
            debug syntax => _15;
        }
    }

    bb0: {
        _4 = <String as Deref>::deref(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::str::<impl str>::starts_with::<'_, char>(_4, const '.') -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb3, otherwise: bb7];
    }

    bb3: {
        _8 = Path::new::<String>(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = Path::extension(_8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = &_7;
        _5 = Option::<&OsStr>::is_some(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _5) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = const true;
        goto -> bb15;
    }

    bb8: {
        _11 = const "test";
        _10 = Path::new::<str>(_11) -> [return: bb9, unwind continue];
    }

    bb9: {
        _9 = Path::with_extension::<&String>(_10, _2) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = deref_copy ((*_1).0: &bat::assets::HighlightingAssets);
        _18 = deref_copy ((*_1).1: &&bat::config::Config<'_>);
        _19 = deref_copy (*_18);
        _13 = &((*_19).12: bat::SyntaxMapping<'_>);
        _12 = HighlightingAssets::syntax_for_file_name::<PathBuf>(_17, move _9, _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _0 = const false;
        goto -> bb15;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _15 = ((_12 as Some).0: &syntect::parsing::syntax_set::SyntaxReference);
        _16 = &((*_15).0: std::string::String);
        _20 = deref_copy ((*_1).2: &std::string::String);
        _0 = <String as PartialEq>::eq(move _16, _20) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

fn get_languages::{closure#2}(_1: &mut {closure@src/bin/bat/main.rs:112:27: 112:33}, _2: &syntect::parsing::syntax_set::SyntaxReference) -> String {
    debug lang => _2;
    let mut _0: std::string::String;
    let _3: &str;
    let mut _4: &std::string::String;

    bb0: {
        _4 = &((*_2).0: std::string::String);
        _3 = <String as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = str::<impl str>::to_uppercase(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn get_languages::{closure#3}(_1: &mut {closure@src/bin/bat/main.rs:130:18: 130:26}, _2: &syntect::parsing::syntax_set::SyntaxReference) -> usize {
    debug syntax => _2;
    let mut _0: usize;
    let mut _3: &std::string::String;

    bb0: {
        _3 = &((*_2).0: std::string::String);
        _0 = String::len(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn theme_preview_file() -> bat::input::Input<'_> {
    let mut _0: bat::input::Input<'_>;
    let mut _1: std::boxed::Box<dyn std::io::Read>;
    let mut _2: std::boxed::Box<std::io::BufReader<&[u8]>>;
    let mut _3: std::io::BufReader<&[u8]>;

    bb0: {
        _3 = BufReader::<&[u8]>::new(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Box::<BufReader<&[u8]>>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = move _2 as std::boxed::Box<dyn std::io::Read> (PointerCoercion(Unsize));
        _0 = bat::input::Input::<'_>::from_reader(move _1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn list_themes(_1: &Config<'_>) -> std::result::Result<(), bat::error::Error> {
    debug cfg => _1;
    let mut _0: std::result::Result<(), bat::error::Error>;
    let _2: bat::assets::HighlightingAssets;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::assets::HighlightingAssets>;
    let mut _4: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, bat::error::Error>;
    let _7: bat::assets::HighlightingAssets;
    let _10: bool;
    let mut _11: &mut std::collections::HashSet<bat::style::StyleComponent>;
    let mut _12: bat::style::StyleComponent;
    let mut _13: std::option::Option<&str>;
    let _14: &str;
    let mut _15: bat::style::StyleComponents;
    let mut _16: std::collections::HashSet<bat::style::StyleComponent>;
    let mut _19: &std::io::Stdout;
    let mut _20: bool;
    let mut _21: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _22: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _23: &bat::assets::HighlightingAssets;
    let mut _25: std::option::Option<&str>;
    let mut _26: &mut std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _27: isize;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _30: std::result::Result<(), std::io::Error>;
    let mut _31: &mut std::io::StdoutLock<'_>;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &ansi_term::ANSIGenericString<'_, str>;
    let _39: ansi_term::ANSIGenericString<'_, str>;
    let mut _40: ansi_term::Style;
    let mut _41: &ansi_term::Style;
    let _42: ansi_term::Style;
    let mut _43: std::string::String;
    let mut _44: isize;
    let mut _46: std::string::String;
    let _47: std::option::Option<bool>;
    let mut _48: std::result::Result<bool, bat::error::Error>;
    let mut _49: &bat::controller::Controller<'_>;
    let _50: bat::controller::Controller<'_>;
    let _51: &bat::config::Config<'_>;
    let _52: &bat::assets::HighlightingAssets;
    let mut _53: std::vec::Vec<bat::input::Input<'_>>;
    let mut _54: std::boxed::Box<[bat::input::Input<'_>]>;
    let mut _55: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: *mut u8;
    let mut _59: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _60: bat::input::Input<'_>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _62: std::result::Result<(), std::io::Error>;
    let mut _63: &mut std::io::StdoutLock<'_>;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: isize;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _69: std::result::Result<(), std::io::Error>;
    let mut _70: &mut std::io::StdoutLock<'_>;
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &std::borrow::Cow<'_, str>;
    let _78: std::borrow::Cow<'_, str>;
    let _79: &std::path::Path;
    let mut _80: &std::path::PathBuf;
    let _81: std::path::PathBuf;
    let _82: &std::path::Path;
    let _83: &directories::BatProjectDirs;
    let _84: &directories::PROJECT_DIRS;
    let mut _85: isize;
    let mut _87: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _88: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _89: &bat::assets::HighlightingAssets;
    let mut _91: std::option::Option<&str>;
    let mut _92: &mut std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
    let mut _93: isize;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _96: std::result::Result<(), std::io::Error>;
    let mut _97: &mut std::io::StdoutLock<'_>;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[core::fmt::rt::Argument<'_>];
    let _101: &[core::fmt::rt::Argument<'_>; 1];
    let _102: [core::fmt::rt::Argument<'_>; 1];
    let mut _103: core::fmt::rt::Argument<'_>;
    let _104: &&str;
    let mut _105: isize;
    let mut _111: bool;
    let mut _112: &mut std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _113: ();
    let mut _114: *const [bat::input::Input<'_>; 1];
    scope 1 {
        debug assets => _2;
        let mut _8: bat::config::Config<'_>;
        scope 6 {
            debug config => _8;
            let mut _9: std::collections::HashSet<bat::style::StyleComponent>;
            scope 7 {
                debug style => _9;
                let _17: std::io::Stdout;
                scope 8 {
                    debug stdout => _17;
                    let mut _18: std::io::StdoutLock<'_>;
                    scope 9 {
                        debug stdout => _18;
                        let mut _24: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
                        let _86: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let mut _90: std::iter::Map<std::collections::btree_map::Keys<'_, std::string::String, syntect::highlighting::theme::Theme>, {closure@bat::assets::HighlightingAssets::themes::{closure#0}}>;
                        let mut _109: &[&str; 2];
                        scope 10 {
                            debug iter => _24;
                            let _28: &str;
                            scope 11 {
                                debug theme => _28;
                                let _45: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let _67: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let mut _107: &[&str; 1];
                                let mut _108: &[&str; 2];
                                let mut _115: *const ();
                                let mut _116: usize;
                                let mut _117: usize;
                                let mut _118: usize;
                                let mut _119: usize;
                                let mut _120: bool;
                                scope 12 {
                                    debug residual => _45;
                                    scope 13 {
                                    }
                                }
                                scope 14 {
                                    debug val => const ();
                                    scope 15 {
                                    }
                                }
                                scope 16 {
                                }
                                scope 17 {
                                    debug residual => _67;
                                    scope 18 {
                                    }
                                }
                                scope 19 {
                                    debug val => const ();
                                    scope 20 {
                                    }
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _86;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => const ();
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug iter => _90;
                            let _94: &str;
                            scope 26 {
                                debug theme => _94;
                                let _106: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let mut _110: &[&str; 2];
                                scope 27 {
                                    debug residual => _106;
                                    scope 28 {
                                    }
                                }
                                scope 29 {
                                    debug val => const ();
                                    scope 30 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _111 = const false;
        _4 = assets_from_cache_or_binary() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::result::Result<HighlightingAssets, bat::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: bat::assets::HighlightingAssets);
        _2 = move _7;
        _8 = <Config<'_> as Clone>::clone(_1) -> [return: bb6, unwind: bb82];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _6) -> [return: bb76, unwind continue];
    }

    bb6: {
        _9 = HashSet::<StyleComponent>::new() -> [return: bb7, unwind: bb81];
    }

    bb7: {
        _111 = const true;
        _11 = &mut _9;
        _12 = Plain;
        _10 = HashSet::<StyleComponent>::insert(move _11, move _12) -> [return: bb8, unwind: bb86];
    }

    bb8: {
        _14 = const "Rust";
        _13 = Option::<&str>::Some(_14);
        (_8.0: std::option::Option<&str>) = move _13;
        _111 = const false;
        _16 = move _9;
        _15 = StyleComponents(move _16);
        drop((_8.7: bat::style::StyleComponents)) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        (_8.7: bat::style::StyleComponents) = move _15;
        _17 = std::io::stdout() -> [return: bb11, unwind: bb86];
    }

    bb10 (cleanup): {
        (_8.7: bat::style::StyleComponents) = move _15;
        goto -> bb86;
    }

    bb11: {
        _19 = &_17;
        _18 = std::io::Stdout::lock(move _19) -> [return: bb12, unwind: bb86];
    }

    bb12: {
        _20 = (_8.5: bool);
        switchInt(move _20) -> [0: bb58, otherwise: bb13];
    }

    bb13: {
        _23 = &_2;
        _22 = HighlightingAssets::themes(move _23) -> [return: bb14, unwind: bb80];
    }

    bb14: {
        _21 = <Map<std::collections::btree_map::Keys<'_, String, syntect::highlighting::theme::Theme>, {closure@HighlightingAssets::themes::{closure#0}}> as IntoIterator>::into_iter(move _22) -> [return: bb15, unwind: bb80];
    }

    bb15: {
        _24 = move _21;
        goto -> bb16;
    }

    bb16: {
        _26 = &mut _24;
        _25 = <Map<std::collections::btree_map::Keys<'_, String, syntect::highlighting::theme::Theme>, {closure@HighlightingAssets::themes::{closure#0}}> as Iterator>::next(_26) -> [return: bb17, unwind: bb80];
    }

    bb17: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb19, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _28 = ((_25 as Some).0: &str);
        _31 = &mut _18;
        _108 = const _;
        _33 = _108 as &[&str] (PointerCoercion(Unsize));
        _42 = ansi_term::Style::new() -> [return: bb20, unwind: bb80];
    }

    bb19: {
        _70 = &mut _18;
        _109 = const _;
        _72 = _109 as &[&str] (PointerCoercion(Unsize));
        _84 = const {alloc4: &PROJECT_DIRS};
        _83 = <PROJECT_DIRS as Deref>::deref(_84) -> [return: bb45, unwind: bb80];
    }

    bb20: {
        _41 = &_42;
        _40 = ansi_term::Style::bold(move _41) -> [return: bb21, unwind: bb80];
    }

    bb21: {
        _43 = <str as ToString>::to_string(_28) -> [return: bb22, unwind: bb80];
    }

    bb22: {
        _39 = ansi_term::display::<impl ansi_term::Style>::paint::<'_, String, str>(move _40, move _43) -> [return: bb23, unwind: bb80];
    }

    bb23: {
        _38 = &_39;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<ANSIGenericString<'_, str>>(_38) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb25, unwind: bb79];
    }

    bb25: {
        _30 = <StdoutLock<'_> as std::io::Write>::write_fmt(move _31, move _32) -> [return: bb26, unwind: bb79];
    }

    bb26: {
        _29 = <std::result::Result<(), std::io::Error> as Try>::branch(move _30) -> [return: bb27, unwind: bb79];
    }

    bb27: {
        _44 = discriminant(_29);
        switchInt(move _44) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        drop(_39) -> [return: bb31, unwind: bb80];
    }

    bb29: {
        _45 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _45) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        drop(_39) -> [return: bb73, unwind: bb80];
    }

    bb31: {
        _46 = <str as ToString>::to_string(_28) -> [return: bb32, unwind: bb80];
    }

    bb32: {
        drop((_8.11: std::string::String)) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        (_8.11: std::string::String) = move _46;
        _51 = &_8;
        _52 = &_2;
        _50 = Controller::<'_>::new(_51, _52) -> [return: bb35, unwind: bb80];
    }

    bb34 (cleanup): {
        (_8.11: std::string::String) = move _46;
        goto -> bb80;
    }

    bb35: {
        _49 = &_50;
        _56 = SizeOf([bat::input::Input<'_>; 1]);
        _57 = AlignOf([bat::input::Input<'_>; 1]);
        _58 = alloc::alloc::exchange_malloc(move _56, move _57) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        _59 = ShallowInitBox(move _58, [bat::input::Input<'_>; 1]);
        _60 = theme_preview_file::<'_>() -> [return: bb37, unwind: bb84];
    }

    bb37: {
        _114 = (((_59.0: std::ptr::Unique<[bat::input::Input<'_>; 1]>).0: std::ptr::NonNull<[bat::input::Input<'_>; 1]>).0: *const [bat::input::Input<'_>; 1]);
        _115 = _114 as *const () (PtrToPtr);
        _116 = _115 as usize (Transmute);
        _117 = AlignOf([bat::input::Input<'_>; 1]);
        _118 = Sub(_117, const 1_usize);
        _119 = BitAnd(_116, _118);
        _120 = Eq(_119, const 0_usize);
        assert(_120, "misaligned pointer dereference: address must be a multiple of {} but is {}", _117, _116) -> [success: bb87, unwind unreachable];
    }

    bb38: {
        _48 = Controller::<'_>::run(move _49, move _53) -> [return: bb39, unwind: bb80];
    }

    bb39: {
        _47 = std::result::Result::<bool, bat::error::Error>::ok(move _48) -> [return: bb40, unwind: bb80];
    }

    bb40: {
        _63 = &mut _18;
        _107 = const _;
        _65 = _107 as &[&str] (PointerCoercion(Unsize));
        _64 = Arguments::<'_>::new_const(move _65) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        _62 = <StdoutLock<'_> as std::io::Write>::write_fmt(move _63, move _64) -> [return: bb42, unwind: bb80];
    }

    bb42: {
        _61 = <std::result::Result<(), std::io::Error> as Try>::branch(move _62) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        _66 = discriminant(_61);
        switchInt(move _66) -> [0: bb16, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _67 = move ((_61 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _67) -> [return: bb88, unwind: bb80];
    }

    bb45: {
        _82 = BatProjectDirs::config_dir(_83) -> [return: bb46, unwind: bb80];
    }

    bb46: {
        _81 = Path::join::<&str>(_82, const "themes") -> [return: bb47, unwind: bb80];
    }

    bb47: {
        _80 = &_81;
        _79 = <PathBuf as Deref>::deref(move _80) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        _78 = Path::to_string_lossy(_79) -> [return: bb49, unwind: bb78];
    }

    bb49: {
        _77 = &_78;
        _76 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_77) -> [return: bb50, unwind: bb77];
    }

    bb50: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _71 = Arguments::<'_>::new_v1(move _72, move _73) -> [return: bb51, unwind: bb77];
    }

    bb51: {
        _69 = <StdoutLock<'_> as std::io::Write>::write_fmt(move _70, move _71) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        _68 = <std::result::Result<(), std::io::Error> as Try>::branch(move _69) -> [return: bb53, unwind: bb77];
    }

    bb53: {
        _85 = discriminant(_68);
        switchInt(move _85) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        drop(_78) -> [return: bb57, unwind: bb78];
    }

    bb55: {
        _86 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _86) -> [return: bb56, unwind: bb77];
    }

    bb56: {
        drop(_78) -> [return: bb72, unwind: bb78];
    }

    bb57: {
        drop(_81) -> [return: bb69, unwind: bb80];
    }

    bb58: {
        _89 = &_2;
        _88 = HighlightingAssets::themes(move _89) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        _87 = <Map<std::collections::btree_map::Keys<'_, String, syntect::highlighting::theme::Theme>, {closure@HighlightingAssets::themes::{closure#0}}> as IntoIterator>::into_iter(move _88) -> [return: bb60, unwind: bb80];
    }

    bb60: {
        _90 = move _87;
        goto -> bb61;
    }

    bb61: {
        _92 = &mut _90;
        _91 = <Map<std::collections::btree_map::Keys<'_, String, syntect::highlighting::theme::Theme>, {closure@HighlightingAssets::themes::{closure#0}}> as Iterator>::next(_92) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb69, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _94 = ((_91 as Some).0: &str);
        _97 = &mut _18;
        _110 = const _;
        _99 = _110 as &[&str] (PointerCoercion(Unsize));
        _104 = &_94;
        _103 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_104) -> [return: bb64, unwind: bb80];
    }

    bb64: {
        _102 = [move _103];
        _101 = &_102;
        _100 = _101 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _98 = Arguments::<'_>::new_v1(move _99, move _100) -> [return: bb65, unwind: bb80];
    }

    bb65: {
        _96 = <StdoutLock<'_> as std::io::Write>::write_fmt(move _97, move _98) -> [return: bb66, unwind: bb80];
    }

    bb66: {
        _95 = <std::result::Result<(), std::io::Error> as Try>::branch(move _96) -> [return: bb67, unwind: bb80];
    }

    bb67: {
        _105 = discriminant(_95);
        switchInt(move _105) -> [0: bb61, 1: bb68, otherwise: bb4];
    }

    bb68: {
        _106 = move ((_95 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<(), bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _106) -> [return: bb89, unwind: bb80];
    }

    bb69: {
        _0 = std::result::Result::<(), bat::error::Error>::Ok(const ());
        drop(_18) -> [return: bb70, unwind: bb86];
    }

    bb70: {
        _111 = const false;
        drop(_8) -> [return: bb71, unwind: bb82];
    }

    bb71: {
        drop(_2) -> [return: bb76, unwind continue];
    }

    bb72: {
        drop(_81) -> [return: bb73, unwind: bb80];
    }

    bb73: {
        drop(_18) -> [return: bb74, unwind: bb86];
    }

    bb74: {
        _111 = const false;
        drop(_8) -> [return: bb75, unwind: bb82];
    }

    bb75: {
        drop(_2) -> [return: bb76, unwind continue];
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_78) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_81) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_39) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_18) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_8) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_2) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84 (cleanup): {
        _112 = &mut _59;
        _113 = <Box<[bat::input::Input<'_>; 1]> as Drop>::drop(move _112) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_9) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_111) -> [0: bb81, otherwise: bb85];
    }

    bb87: {
        (*_114) = [move _60];
        _55 = move _59;
        _54 = move _55 as std::boxed::Box<[bat::input::Input<'_>]> (PointerCoercion(Unsize));
        _53 = slice::<impl [bat::input::Input<'_>]>::into_vec::<std::alloc::Global>(move _54) -> [return: bb38, unwind: bb80];
    }

    bb88: {
        goto -> bb73;
    }

    bb89: {
        goto -> bb73;
    }

    bb90 (cleanup): {
        goto -> bb80;
    }
}

alloc4 (static: PROJECT_DIRS, size: 0, align: 1) {}

promoted[0] in list_themes: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in list_themes: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Theme: ", const "\n\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in list_themes: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Further themes can be installed to '", const "', and are added to the cache with `bat cache --build`. For more information, see:\n\n  https://github.com/sharkdp/bat#adding-new-themes\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in list_themes: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn run_controller(_1: Vec<bat::input::Input<'_>>, _2: &Config<'_>) -> std::result::Result<bool, bat::error::Error> {
    debug inputs => _1;
    debug config => _2;
    let mut _0: std::result::Result<bool, bat::error::Error>;
    let _3: bat::assets::HighlightingAssets;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::assets::HighlightingAssets>;
    let mut _5: std::result::Result<bat::assets::HighlightingAssets, bat::error::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, bat::error::Error>;
    let _8: bat::assets::HighlightingAssets;
    let _10: &&bat::config::Config<'_>;
    let _11: &bat::assets::HighlightingAssets;
    let mut _12: &bat::controller::Controller<'_>;
    let mut _13: std::vec::Vec<bat::input::Input<'_>>;
    let mut _14: &bat::config::Config<'_>;
    let mut _15: bool;
    scope 1 {
        debug assets => _3;
        let _9: bat::controller::Controller<'_>;
        scope 6 {
            debug controller => _9;
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _15 = const false;
        _15 = const true;
        _5 = assets_from_cache_or_binary() -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _4 = <std::result::Result<HighlightingAssets, bat::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Continue).0: bat::assets::HighlightingAssets);
        _3 = move _8;
        _10 = &_2;
        _14 = deref_copy (*_10);
        _11 = &_3;
        _9 = Controller::<'_>::new(_14, _11) -> [return: bb7, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _7) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb7: {
        _12 = &_9;
        _15 = const false;
        _13 = move _1;
        _0 = Controller::<'_>::run(move _12, move _13) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_15) -> [0: bb11, otherwise: bb12];
    }
}

fn run() -> std::result::Result<bool, bat::error::Error> {
    let mut _0: std::result::Result<bool, bat::error::Error>;
    let _1: app::App;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, app::App>;
    let mut _3: std::result::Result<app::App, bat::error::Error>;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, bat::error::Error>;
    let _6: app::App;
    let mut _7: bool;
    let mut _8: &clap::ArgMatches<'_>;
    let mut _10: std::option::Option<std::string::String>;
    let mut _11: std::option::Option<&str>;
    let mut _12: &clap::ArgMatches<'_>;
    let mut _14: bugreport::BugReport<'_>;
    let mut _15: bugreport::BugReport<'_>;
    let mut _16: bugreport::BugReport<'_>;
    let mut _17: bugreport::BugReport<'_>;
    let mut _18: bugreport::BugReport<'_>;
    let mut _19: bugreport::BugReport<'_>;
    let _21: &str;
    let _22: &str;
    let mut _24: bool;
    let _25: ();
    let mut _26: &mut bugreport::BugReport<'_>;
    let mut _27: std::option::Option<&str>;
    let mut _28: bugreport::collector::SoftwareVersion;
    let mut _29: bugreport::collector::OperatingSystem;
    let mut _30: bugreport::collector::CommandLine;
    let mut _31: bugreport::collector::EnvironmentVariables;
    let mut _32: &[&str];
    let mut _33: bugreport::collector::FileContent<'_>;
    let _34: &str;
    let mut _35: std::path::PathBuf;
    let mut _36: bugreport::collector::CompileTimeInformation;
    let mut _38: std::result::Result<std::path::PathBuf, grep_cli::CommandError>;
    let mut _39: std::string::String;
    let mut _40: isize;
    let mut _42: bugreport::BugReport<'_>;
    let mut _43: bugreport::collector::CommandOutput<'_>;
    let _44: &str;
    let mut _45: &[&str];
    let _46: ();
    let mut _47: &mut bugreport::BugReport<'_>;
    let mut _48: (&str, std::option::Option<&clap::ArgMatches<'_>>);
    let mut _49: &clap::ArgMatches<'_>;
    let mut _50: isize;
    let mut _51: bool;
    let mut _53: bool;
    let mut _54: &std::collections::HashMap<&str, clap::args::matched_arg::MatchedArg>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>>;
    let mut _56: std::result::Result<(), bat::error::Error>;
    let mut _57: isize;
    let mut _60: std::boxed::Box<[bat::input::Input<'_>]>;
    let mut _61: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: *mut u8;
    let mut _65: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _66: bat::input::Input<'_>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::config::Config<'_>>;
    let mut _69: std::result::Result<bat::config::Config<'_>, bat::error::Error>;
    let mut _70: &app::App;
    let _71: &[bat::input::Input<'_>];
    let _72: &std::vec::Vec<bat::input::Input<'_>>;
    let mut _73: isize;
    let mut _76: std::vec::Vec<bat::input::Input<'_>>;
    let _77: &bat::config::Config<'_>;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::vec::Vec<bat::input::Input<'_>>>;
    let mut _80: std::result::Result<std::vec::Vec<bat::input::Input<'_>>, bat::error::Error>;
    let mut _81: &app::App;
    let mut _82: isize;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, bat::config::Config<'_>>;
    let mut _87: std::result::Result<bat::config::Config<'_>, bat::error::Error>;
    let mut _88: &app::App;
    let _89: &[bat::input::Input<'_>];
    let _90: &std::vec::Vec<bat::input::Input<'_>>;
    let mut _91: isize;
    let mut _94: bool;
    let mut _95: &clap::ArgMatches<'_>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>, std::string::String>;
    let mut _98: std::result::Result<std::string::String, bat::error::Error>;
    let _99: &bat::config::Config<'_>;
    let mut _100: isize;
    let mut _104: std::boxed::Box<[bat::input::Input<'_>]>;
    let mut _105: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _106: usize;
    let mut _107: usize;
    let mut _108: *mut u8;
    let mut _109: std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _110: bat::input::Input<'_>;
    let mut _111: std::boxed::Box<dyn std::io::Read>;
    let mut _112: std::boxed::Box<&[u8]>;
    let mut _113: &[u8];
    let mut _114: &std::string::String;
    let mut _116: bat::style::StyleComponents;
    let _117: &[bat::style::StyleComponent];
    let mut _118: bat::style::StyleComponent;
    let mut _119: bat::PagingMode;
    let mut _120: bat::config::Config<'_>;
    let mut _121: std::vec::Vec<bat::input::Input<'_>>;
    let _122: &bat::config::Config<'_>;
    let mut _123: bool;
    let mut _124: &clap::ArgMatches<'_>;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>>;
    let mut _126: std::result::Result<(), bat::error::Error>;
    let _127: &bat::config::Config<'_>;
    let mut _128: isize;
    let mut _130: bool;
    let mut _131: &clap::ArgMatches<'_>;
    let _132: ();
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[core::fmt::rt::Argument<'_>];
    let _136: &[core::fmt::rt::Argument<'_>; 1];
    let _137: [core::fmt::rt::Argument<'_>; 1];
    let mut _138: core::fmt::rt::Argument<'_>;
    let _139: &std::borrow::Cow<'_, str>;
    let _140: std::borrow::Cow<'_, str>;
    let _141: &std::path::Path;
    let mut _142: &std::path::PathBuf;
    let _143: std::path::PathBuf;
    let mut _144: bool;
    let mut _145: &clap::ArgMatches<'_>;
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bat::error::Error>>;
    let mut _147: std::result::Result<(), bat::error::Error>;
    let mut _148: isize;
    let mut _150: bool;
    let mut _151: &clap::ArgMatches<'_>;
    let mut _152: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _153: std::result::Result<(), std::io::Error>;
    let mut _154: &mut std::io::Stdout;
    let mut _155: std::io::Stdout;
    let mut _156: std::fmt::Arguments<'_>;
    let mut _157: &[&str];
    let mut _158: &[core::fmt::rt::Argument<'_>];
    let _159: &[core::fmt::rt::Argument<'_>; 1];
    let _160: [core::fmt::rt::Argument<'_>; 1];
    let mut _161: core::fmt::rt::Argument<'_>;
    let _162: &std::borrow::Cow<'_, str>;
    let _163: std::borrow::Cow<'_, str>;
    let mut _164: isize;
    let mut _166: bool;
    let mut _167: &clap::ArgMatches<'_>;
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _169: std::result::Result<(), std::io::Error>;
    let mut _170: &mut std::io::Stdout;
    let mut _171: std::io::Stdout;
    let mut _172: std::fmt::Arguments<'_>;
    let mut _173: &[&str];
    let mut _174: &[core::fmt::rt::Argument<'_>];
    let _175: &[core::fmt::rt::Argument<'_>; 1];
    let _176: [core::fmt::rt::Argument<'_>; 1];
    let mut _177: core::fmt::rt::Argument<'_>;
    let _178: &std::borrow::Cow<'_, str>;
    let _179: std::borrow::Cow<'_, str>;
    let mut _180: isize;
    let mut _182: std::vec::Vec<bat::input::Input<'_>>;
    let _183: &bat::config::Config<'_>;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: isize;
    let mut _203: &mut std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _204: ();
    let mut _205: &mut std::boxed::Box<[bat::input::Input<'_>; 1]>;
    let mut _206: ();
    let mut _207: isize;
    let mut _208: *const [bat::input::Input<'_>; 1];
    let mut _209: *const [bat::input::Input<'_>; 1];
    scope 1 {
        debug app => _1;
        let _9: std::string::String;
        let _52: &clap::ArgMatches<'_>;
        let _78: std::vec::Vec<bat::input::Input<'_>>;
        let _83: std::result::Result<std::convert::Infallible, bat::error::Error>;
        let _84: std::vec::Vec<bat::input::Input<'_>>;
        scope 6 {
            debug pager => _9;
            let _13: bugreport::BugReport<'_>;
            let mut _20: bugreport::BugReport<'_>;
            let mut _185: &[&str; 15];
            scope 7 {
                debug report => _13;
                let mut _37: bugreport::BugReport<'_>;
                scope 10 {
                    debug report => _37;
                }
                scope 11 {
                    debug resolved_path => _41;
                    let _41: std::path::PathBuf;
                    let mut _184: &[&str; 1];
                }
            }
            scope 8 {
                debug br => _20;
                let _23: &str;
                scope 9 {
                    debug hash => const "";
                }
            }
        }
        scope 12 {
            debug cache_matches => _52;
            let _58: std::result::Result<std::convert::Infallible, bat::error::Error>;
            let _59: std::vec::Vec<bat::input::Input<'_>>;
            let mut _216: *const ();
            let mut _217: usize;
            let mut _218: usize;
            let mut _219: usize;
            let mut _220: usize;
            let mut _221: bool;
            scope 13 {
                debug residual => _58;
                scope 14 {
                }
            }
            scope 15 {
                debug val => const ();
                scope 16 {
                }
            }
            scope 17 {
                debug inputs => _59;
                let _67: bat::config::Config<'_>;
                let _74: std::result::Result<std::convert::Infallible, bat::error::Error>;
                let _75: bat::config::Config<'_>;
                scope 19 {
                    debug config => _67;
                }
                scope 20 {
                    debug residual => _74;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _75;
                    scope 23 {
                    }
                }
            }
            scope 18 {
            }
        }
        scope 24 {
            debug inputs => _78;
            let _85: bat::config::Config<'_>;
            let _92: std::result::Result<std::convert::Infallible, bat::error::Error>;
            let _93: bat::config::Config<'_>;
            scope 29 {
                debug config => _85;
                let _96: std::string::String;
                let _101: std::result::Result<std::convert::Infallible, bat::error::Error>;
                let _102: std::string::String;
                let _129: std::result::Result<std::convert::Infallible, bat::error::Error>;
                let _149: std::result::Result<std::convert::Infallible, bat::error::Error>;
                let _165: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _181: std::result::Result<std::convert::Infallible, std::io::Error>;
                let mut _186: &[&str; 2];
                let mut _187: &[&str; 2];
                let mut _188: &[&str; 2];
                scope 34 {
                    debug languages => _96;
                    let _103: std::vec::Vec<bat::input::Input<'_>>;
                    let mut _210: *const ();
                    let mut _211: usize;
                    let mut _212: usize;
                    let mut _213: usize;
                    let mut _214: usize;
                    let mut _215: bool;
                    scope 39 {
                        debug inputs => _103;
                        let _115: bat::config::Config<'_>;
                        scope 41 {
                            debug plain_config => _115;
                        }
                    }
                    scope 40 {
                    }
                }
                scope 35 {
                    debug residual => _101;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _102;
                    scope 38 {
                    }
                }
                scope 42 {
                    debug residual => _129;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug val => const ();
                    scope 45 {
                    }
                }
                scope 46 {
                    debug residual => _149;
                    scope 47 {
                    }
                }
                scope 48 {
                    debug val => const ();
                    scope 49 {
                    }
                }
                scope 50 {
                    debug residual => _165;
                    scope 51 {
                    }
                }
                scope 52 {
                    debug val => const ();
                    scope 53 {
                    }
                }
                scope 54 {
                    debug residual => _181;
                    scope 55 {
                    }
                }
                scope 56 {
                    debug val => const ();
                    scope 57 {
                    }
                }
            }
            scope 30 {
                debug residual => _92;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _93;
                scope 33 {
                }
            }
        }
        scope 25 {
            debug residual => _83;
            scope 26 {
            }
        }
        scope 27 {
            debug val => _84;
            scope 28 {
            }
        }
    }
    scope 2 {
        debug residual => _5;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;
        scope 5 {
        }
    }

    bb0: {
        _201 = const false;
        _194 = const false;
        _195 = const false;
        _196 = const false;
        _197 = const false;
        _198 = const false;
        _199 = const false;
        _200 = const false;
        _193 = const false;
        _192 = const false;
        _190 = const false;
        _191 = const false;
        _189 = const false;
        _3 = app::App::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::result::Result<app::App, bat::error::Error> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = move ((_2 as Continue).0: app::App);
        _1 = move _6;
        _8 = &(_1.0: clap::ArgMatches<'_>);
        _7 = ArgMatches::<'_>::is_present::<&str>(move _8, const "diagnostic") -> [return: bb6, unwind: bb158];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _5) -> [return: bb145, unwind continue];
    }

    bb6: {
        switchInt(move _7) -> [0: bb34, otherwise: bb7];
    }

    bb7: {
        _12 = &(_1.0: clap::ArgMatches<'_>);
        _11 = ArgMatches::<'_>::value_of::<&str>(move _12, const "pager") -> [return: bb8, unwind: bb158];
    }

    bb8: {
        _10 = get_pager_executable(move _11) -> [return: bb9, unwind: bb158];
    }

    bb9: {
        _9 = Option::<String>::unwrap_or_else::<{closure@src/bin/bat/main.rs:232:29: 232:31}>(move _10, const ZeroSized: {closure@src/bin/bat/main.rs:232:29: 232:31}) -> [return: bb10, unwind: bb158];
    }

    bb10: {
        _201 = const true;
        _21 = const "bat";
        _22 = const "0.18.3";
        _20 = BugReport::<'_>::from_name_and_version(_21, _22) -> [return: bb11, unwind: bb193];
    }

    bb11: {
        _23 = const "";
        _24 = core::str::<impl str>::is_empty(_23) -> [return: bb12, unwind: bb157];
    }

    bb12: {
        switchInt(move _24) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        _26 = &mut _20;
        _27 = Option::<&str>::Some(_23);
        _25 = BugReport::<'_>::set_git_hash(move _26, move _27) -> [return: bb196, unwind: bb157];
    }

    bb14: {
        _200 = const true;
        _19 = move _20;
        _28 = <bugreport::collector::SoftwareVersion as Default>::default() -> [return: bb15, unwind: bb191];
    }

    bb15: {
        _200 = const false;
        _18 = BugReport::<'_>::info::<bugreport::collector::SoftwareVersion>(move _19, move _28) -> [return: bb16, unwind: bb191];
    }

    bb16: {
        _199 = const true;
        _200 = const false;
        _29 = <bugreport::collector::OperatingSystem as Default>::default() -> [return: bb17, unwind: bb189];
    }

    bb17: {
        _199 = const false;
        _17 = BugReport::<'_>::info::<bugreport::collector::OperatingSystem>(move _18, const bugreport::collector::OperatingSystem {{  }}) -> [return: bb18, unwind: bb189];
    }

    bb18: {
        _198 = const true;
        _199 = const false;
        _30 = <bugreport::collector::CommandLine as Default>::default() -> [return: bb19, unwind: bb187];
    }

    bb19: {
        _198 = const false;
        _16 = BugReport::<'_>::info::<bugreport::collector::CommandLine>(move _17, const bugreport::collector::CommandLine {{  }}) -> [return: bb20, unwind: bb187];
    }

    bb20: {
        _197 = const true;
        _198 = const false;
        _185 = const _;
        _32 = _185 as &[&str] (PointerCoercion(Unsize));
        _31 = bugreport::collector::EnvironmentVariables::list::<&str>(move _32) -> [return: bb21, unwind: bb185];
    }

    bb21: {
        _197 = const false;
        _15 = BugReport::<'_>::info::<bugreport::collector::EnvironmentVariables>(move _16, move _31) -> [return: bb22, unwind: bb185];
    }

    bb22: {
        _196 = const true;
        _197 = const false;
        _34 = const "Config file";
        _35 = config_file() -> [return: bb23, unwind: bb183];
    }

    bb23: {
        _33 = bugreport::collector::FileContent::<'_>::new::<PathBuf>(_34, move _35) -> [return: bb24, unwind: bb183];
    }

    bb24: {
        _196 = const false;
        _14 = BugReport::<'_>::info::<bugreport::collector::FileContent<'_>>(move _15, move _33) -> [return: bb25, unwind: bb183];
    }

    bb25: {
        _195 = const true;
        _196 = const false;
        _36 = <bugreport::collector::CompileTimeInformation as Default>::default() -> [return: bb26, unwind: bb181];
    }

    bb26: {
        _195 = const false;
        _13 = BugReport::<'_>::info::<bugreport::collector::CompileTimeInformation>(move _14, const bugreport::collector::CompileTimeInformation {{  }}) -> [return: bb27, unwind: bb181];
    }

    bb27: {
        _194 = const true;
        _195 = const false;
        _201 = const false;
        _39 = move _9;
        _38 = resolve_binary::<String>(move _39) -> [return: bb28, unwind: bb179];
    }

    bb28: {
        _189 = const true;
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb29, otherwise: bb32];
    }

    bb29: {
        _189 = const false;
        _41 = move ((_38 as Ok).0: std::path::PathBuf);
        _194 = const false;
        _193 = const true;
        _42 = move _13;
        _44 = const "Less version";
        _184 = const _;
        _45 = _184 as &[&str] (PointerCoercion(Unsize));
        _43 = bugreport::collector::CommandOutput::<'_>::new::<&str, PathBuf>(_44, move _41, move _45) -> [return: bb30, unwind: bb176];
    }

    bb30: {
        _193 = const false;
        _37 = BugReport::<'_>::info::<bugreport::collector::CommandOutput<'_>>(move _42, move _43) -> [return: bb31, unwind: bb176];
    }

    bb31: {
        _193 = const false;
        goto -> bb164;
    }

    bb32: {
        _194 = const false;
        _37 = move _13;
        goto -> bb164;
    }

    bb33: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        drop(_37) -> [return: bb144, unwind: bb179];
    }

    bb34: {
        _49 = &(_1.0: clap::ArgMatches<'_>);
        _48 = ArgMatches::<'_>::subcommand(move _49) -> [return: bb35, unwind: bb158];
    }

    bb35: {
        _51 = <str as PartialEq>::eq((_48.0: &str), const "cache") -> [return: bb38, unwind: bb158];
    }

    bb36: {
        _50 = discriminant((_48.1: std::option::Option<&clap::ArgMatches<'_>>));
        switchInt(move _50) -> [1: bb39, otherwise: bb37];
    }

    bb37: {
        _81 = &_1;
        _80 = app::App::inputs(move _81) -> [return: bb58, unwind: bb158];
    }

    bb38: {
        switchInt(move _51) -> [0: bb37, otherwise: bb36];
    }

    bb39: {
        _52 = (((_48.1: std::option::Option<&clap::ArgMatches<'_>>) as Some).0: &clap::ArgMatches<'_>);
        _54 = &((*_52).0: std::collections::HashMap<&str, clap::args::matched_arg::MatchedArg>);
        _53 = HashMap::<&str, clap::args::matched_arg::MatchedArg>::is_empty(move _54) -> [return: bb40, unwind: bb158];
    }

    bb40: {
        switchInt(move _53) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _62 = SizeOf([bat::input::Input<'_>; 1]);
        _63 = AlignOf([bat::input::Input<'_>; 1]);
        _64 = alloc::alloc::exchange_malloc(move _62, move _63) -> [return: bb47, unwind: bb158];
    }

    bb42: {
        _56 = run_cache_subcommand(_52) -> [return: bb43, unwind: bb158];
    }

    bb43: {
        _55 = <std::result::Result<(), bat::error::Error> as Try>::branch(move _56) -> [return: bb44, unwind: bb158];
    }

    bb44: {
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb138;
    }

    bb46: {
        _58 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _58) -> [return: bb197, unwind: bb158];
    }

    bb47: {
        _65 = ShallowInitBox(move _64, [bat::input::Input<'_>; 1]);
        _66 = bat::input::Input::<'_>::ordinary_file::<&str>(const "cache") -> [return: bb48, unwind: bb174];
    }

    bb48: {
        _208 = (((_65.0: std::ptr::Unique<[bat::input::Input<'_>; 1]>).0: std::ptr::NonNull<[bat::input::Input<'_>; 1]>).0: *const [bat::input::Input<'_>; 1]);
        _216 = _208 as *const () (PtrToPtr);
        _217 = _216 as usize (Transmute);
        _218 = AlignOf([bat::input::Input<'_>; 1]);
        _219 = Sub(_218, const 1_usize);
        _220 = BitAnd(_217, _219);
        _221 = Eq(_220, const 0_usize);
        assert(_221, "misaligned pointer dereference: address must be a multiple of {} but is {}", _218, _217) -> [success: bb195, unwind unreachable];
    }

    bb49: {
        _192 = const true;
        _70 = &_1;
        _72 = &_59;
        _71 = <Vec<bat::input::Input<'_>> as Deref>::deref(_72) -> [return: bb50, unwind: bb173];
    }

    bb50: {
        _69 = app::App::config(move _70, _71) -> [return: bb51, unwind: bb173];
    }

    bb51: {
        _68 = <std::result::Result<Config<'_>, bat::error::Error> as Try>::branch(move _69) -> [return: bb52, unwind: bb173];
    }

    bb52: {
        _73 = discriminant(_68);
        switchInt(move _73) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        _75 = move ((_68 as Continue).0: bat::config::Config<'_>);
        _67 = move _75;
        _192 = const false;
        _76 = move _59;
        _77 = &_67;
        _0 = run_controller(move _76, _77) -> [return: bb56, unwind: bb154];
    }

    bb54: {
        _74 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _74) -> [return: bb55, unwind: bb173];
    }

    bb55: {
        drop(_59) -> [return: bb142, unwind: bb158];
    }

    bb56: {
        drop(_67) -> [return: bb57, unwind: bb173];
    }

    bb57: {
        _192 = const false;
        goto -> bb138;
    }

    bb58: {
        _79 = <std::result::Result<Vec<bat::input::Input<'_>>, bat::error::Error> as Try>::branch(move _80) -> [return: bb59, unwind: bb158];
    }

    bb59: {
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        _84 = move ((_79 as Continue).0: std::vec::Vec<bat::input::Input<'_>>);
        _190 = const true;
        _78 = move _84;
        _88 = &_1;
        _90 = &_78;
        _89 = <Vec<bat::input::Input<'_>> as Deref>::deref(_90) -> [return: bb62, unwind: bb171];
    }

    bb61: {
        _83 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _83) -> [return: bb198, unwind: bb158];
    }

    bb62: {
        _87 = app::App::config(move _88, _89) -> [return: bb63, unwind: bb171];
    }

    bb63: {
        _86 = <std::result::Result<Config<'_>, bat::error::Error> as Try>::branch(move _87) -> [return: bb64, unwind: bb171];
    }

    bb64: {
        _91 = discriminant(_86);
        switchInt(move _91) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        _93 = move ((_86 as Continue).0: bat::config::Config<'_>);
        _85 = move _93;
        _95 = &(_1.0: clap::ArgMatches<'_>);
        _94 = ArgMatches::<'_>::is_present::<&str>(move _95, const "list-languages") -> [return: bb67, unwind: bb153];
    }

    bb66: {
        _92 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _92) -> [return: bb199, unwind: bb171];
    }

    bb67: {
        switchInt(move _94) -> [0: bb83, otherwise: bb68];
    }

    bb68: {
        _99 = &_85;
        _98 = get_languages(_99) -> [return: bb69, unwind: bb153];
    }

    bb69: {
        _97 = <std::result::Result<String, bat::error::Error> as Try>::branch(move _98) -> [return: bb70, unwind: bb153];
    }

    bb70: {
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        _102 = move ((_97 as Continue).0: std::string::String);
        _96 = move _102;
        _106 = SizeOf([bat::input::Input<'_>; 1]);
        _107 = AlignOf([bat::input::Input<'_>; 1]);
        _108 = alloc::alloc::exchange_malloc(move _106, move _107) -> [return: bb73, unwind: bb152];
    }

    bb72: {
        _101 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _101) -> [return: bb200, unwind: bb153];
    }

    bb73: {
        _109 = ShallowInitBox(move _108, [bat::input::Input<'_>; 1]);
        _114 = &_96;
        _113 = String::as_bytes(move _114) -> [return: bb74, unwind: bb169];
    }

    bb74: {
        _112 = Box::<&[u8]>::new(move _113) -> [return: bb75, unwind: bb169];
    }

    bb75: {
        _111 = move _112 as std::boxed::Box<dyn std::io::Read> (PointerCoercion(Unsize));
        _110 = bat::input::Input::<'_>::from_reader(move _111) -> [return: bb76, unwind: bb169];
    }

    bb76: {
        _209 = (((_109.0: std::ptr::Unique<[bat::input::Input<'_>; 1]>).0: std::ptr::NonNull<[bat::input::Input<'_>; 1]>).0: *const [bat::input::Input<'_>; 1]);
        _210 = _209 as *const () (PtrToPtr);
        _211 = _210 as usize (Transmute);
        _212 = AlignOf([bat::input::Input<'_>; 1]);
        _213 = Sub(_212, const 1_usize);
        _214 = BitAnd(_211, _213);
        _215 = Eq(_214, const 0_usize);
        assert(_215, "misaligned pointer dereference: address must be a multiple of {} but is {}", _212, _211) -> [success: bb194, unwind unreachable];
    }

    bb77: {
        _191 = const true;
        _118 = Plain;
        _117 = StyleComponent::components(move _118, const false) -> [return: bb78, unwind: bb168];
    }

    bb78: {
        _116 = StyleComponents::new(_117) -> [return: bb79, unwind: bb168];
    }

    bb79: {
        _119 = QuitIfOneScreen;
        _120 = <Config<'_> as Default>::default() -> [return: bb80, unwind: bb151];
    }

    bb80: {
        _115 = Config::<'_> { language: (_120.0: std::option::Option<&str>), show_nonprintable: (_120.1: bool), term_width: (_120.2: usize), tab_width: (_120.3: usize), loop_through: (_120.4: bool), colored_output: (_120.5: bool), true_color: (_120.6: bool), style_components: move _116, wrapping_mode: (_120.8: bat::WrappingMode), paging_mode: move _119, visible_lines: move (_120.10: bat::config::VisibleLines), theme: move (_120.11: std::string::String), syntax_mapping: move (_120.12: bat::SyntaxMapping<'_>), pager: (_120.13: std::option::Option<&str>), use_italic_text: (_120.14: bool), highlighted_lines: move (_120.15: bat::line_range::HighlightedLineRanges) };
        drop((_120.7: bat::style::StyleComponents)) -> [return: bb165, unwind: bb150];
    }

    bb81: {
        drop(_115) -> [return: bb82, unwind: bb168];
    }

    bb82: {
        _191 = const false;
        drop(_96) -> [return: bb135, unwind: bb153];
    }

    bb83: {
        _124 = &(_1.0: clap::ArgMatches<'_>);
        _123 = ArgMatches::<'_>::is_present::<&str>(move _124, const "list-themes") -> [return: bb84, unwind: bb153];
    }

    bb84: {
        switchInt(move _123) -> [0: bb90, otherwise: bb85];
    }

    bb85: {
        _127 = &_85;
        _126 = list_themes(_127) -> [return: bb86, unwind: bb153];
    }

    bb86: {
        _125 = <std::result::Result<(), bat::error::Error> as Try>::branch(move _126) -> [return: bb87, unwind: bb153];
    }

    bb87: {
        _128 = discriminant(_125);
        switchInt(move _128) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb135;
    }

    bb89: {
        _129 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _129) -> [return: bb201, unwind: bb153];
    }

    bb90: {
        _131 = &(_1.0: clap::ArgMatches<'_>);
        _130 = ArgMatches::<'_>::is_present::<&str>(move _131, const "config-file") -> [return: bb91, unwind: bb153];
    }

    bb91: {
        switchInt(move _130) -> [0: bb101, otherwise: bb92];
    }

    bb92: {
        _186 = const _;
        _134 = _186 as &[&str] (PointerCoercion(Unsize));
        _143 = config_file() -> [return: bb93, unwind: bb153];
    }

    bb93: {
        _142 = &_143;
        _141 = <PathBuf as Deref>::deref(move _142) -> [return: bb94, unwind: bb149];
    }

    bb94: {
        _140 = Path::to_string_lossy(_141) -> [return: bb95, unwind: bb149];
    }

    bb95: {
        _139 = &_140;
        _138 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_139) -> [return: bb96, unwind: bb148];
    }

    bb96: {
        _137 = [move _138];
        _136 = &_137;
        _135 = _136 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _133 = Arguments::<'_>::new_v1(move _134, move _135) -> [return: bb97, unwind: bb148];
    }

    bb97: {
        _132 = _print(move _133) -> [return: bb98, unwind: bb148];
    }

    bb98: {
        drop(_140) -> [return: bb99, unwind: bb149];
    }

    bb99: {
        drop(_143) -> [return: bb100, unwind: bb153];
    }

    bb100: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb135;
    }

    bb101: {
        _145 = &(_1.0: clap::ArgMatches<'_>);
        _144 = ArgMatches::<'_>::is_present::<&str>(move _145, const "generate-config-file") -> [return: bb102, unwind: bb153];
    }

    bb102: {
        switchInt(move _144) -> [0: bb108, otherwise: bb103];
    }

    bb103: {
        _147 = generate_config_file() -> [return: bb104, unwind: bb153];
    }

    bb104: {
        _146 = <std::result::Result<(), bat::error::Error> as Try>::branch(move _147) -> [return: bb105, unwind: bb153];
    }

    bb105: {
        _148 = discriminant(_146);
        switchInt(move _148) -> [0: bb106, 1: bb107, otherwise: bb4];
    }

    bb106: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb135;
    }

    bb107: {
        _149 = move ((_146 as Break).0: std::result::Result<std::convert::Infallible, bat::error::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, bat::error::Error>>>::from_residual(move _149) -> [return: bb202, unwind: bb153];
    }

    bb108: {
        _151 = &(_1.0: clap::ArgMatches<'_>);
        _150 = ArgMatches::<'_>::is_present::<&str>(move _151, const "config-dir") -> [return: bb109, unwind: bb153];
    }

    bb109: {
        switchInt(move _150) -> [0: bb121, otherwise: bb110];
    }

    bb110: {
        _155 = std::io::stdout() -> [return: bb111, unwind: bb153];
    }

    bb111: {
        _154 = &mut _155;
        _187 = const _;
        _157 = _187 as &[&str] (PointerCoercion(Unsize));
        _163 = assets::config_dir() -> [return: bb112, unwind: bb153];
    }

    bb112: {
        _162 = &_163;
        _161 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_162) -> [return: bb113, unwind: bb147];
    }

    bb113: {
        _160 = [move _161];
        _159 = &_160;
        _158 = _159 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _156 = Arguments::<'_>::new_v1(move _157, move _158) -> [return: bb114, unwind: bb147];
    }

    bb114: {
        _153 = <std::io::Stdout as std::io::Write>::write_fmt(move _154, move _156) -> [return: bb115, unwind: bb147];
    }

    bb115: {
        _152 = <std::result::Result<(), std::io::Error> as Try>::branch(move _153) -> [return: bb116, unwind: bb147];
    }

    bb116: {
        _164 = discriminant(_152);
        switchInt(move _164) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        drop(_163) -> [return: bb120, unwind: bb153];
    }

    bb118: {
        _165 = move ((_152 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _165) -> [return: bb119, unwind: bb147];
    }

    bb119: {
        drop(_163) -> [return: bb139, unwind: bb153];
    }

    bb120: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb135;
    }

    bb121: {
        _167 = &(_1.0: clap::ArgMatches<'_>);
        _166 = ArgMatches::<'_>::is_present::<&str>(move _167, const "cache-dir") -> [return: bb122, unwind: bb153];
    }

    bb122: {
        switchInt(move _166) -> [0: bb134, otherwise: bb123];
    }

    bb123: {
        _171 = std::io::stdout() -> [return: bb124, unwind: bb153];
    }

    bb124: {
        _170 = &mut _171;
        _188 = const _;
        _173 = _188 as &[&str] (PointerCoercion(Unsize));
        _179 = assets::cache_dir() -> [return: bb125, unwind: bb153];
    }

    bb125: {
        _178 = &_179;
        _177 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_178) -> [return: bb126, unwind: bb146];
    }

    bb126: {
        _176 = [move _177];
        _175 = &_176;
        _174 = _175 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _172 = Arguments::<'_>::new_v1(move _173, move _174) -> [return: bb127, unwind: bb146];
    }

    bb127: {
        _169 = <std::io::Stdout as std::io::Write>::write_fmt(move _170, move _172) -> [return: bb128, unwind: bb146];
    }

    bb128: {
        _168 = <std::result::Result<(), std::io::Error> as Try>::branch(move _169) -> [return: bb129, unwind: bb146];
    }

    bb129: {
        _180 = discriminant(_168);
        switchInt(move _180) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        drop(_179) -> [return: bb133, unwind: bb153];
    }

    bb131: {
        _181 = move ((_168 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <std::result::Result<bool, bat::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _181) -> [return: bb132, unwind: bb146];
    }

    bb132: {
        drop(_179) -> [return: bb139, unwind: bb153];
    }

    bb133: {
        _0 = std::result::Result::<bool, bat::error::Error>::Ok(const true);
        goto -> bb135;
    }

    bb134: {
        _190 = const false;
        _182 = move _78;
        _183 = &_85;
        _0 = run_controller(move _182, _183) -> [return: bb203, unwind: bb153];
    }

    bb135: {
        drop(_85) -> [return: bb136, unwind: bb171];
    }

    bb136: {
        switchInt(_190) -> [0: bb137, otherwise: bb166];
    }

    bb137: {
        _190 = const false;
        goto -> bb138;
    }

    bb138: {
        drop(_1) -> [return: bb145, unwind continue];
    }

    bb139: {
        drop(_85) -> [return: bb140, unwind: bb171];
    }

    bb140: {
        drop(_78) -> [return: bb141, unwind: bb158];
    }

    bb141: {
        _190 = const false;
        goto -> bb143;
    }

    bb142: {
        _192 = const false;
        goto -> bb143;
    }

    bb143: {
        drop(_1) -> [return: bb145, unwind continue];
    }

    bb144: {
        _194 = const false;
        _201 = const false;
        drop(_1) -> [return: bb145, unwind continue];
    }

    bb145: {
        return;
    }

    bb146 (cleanup): {
        drop(_179) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_163) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_140) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_143) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_115) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_116) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_96) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_85) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_67) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_37) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        _207 = discriminant(_38);
        switchInt(move _207) -> [0: bb179, otherwise: bb177];
    }

    bb157 (cleanup): {
        drop(_20) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_1) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        resume;
    }

    bb160: {
        _189 = const false;
        _47 = &mut _37;
        _46 = BugReport::<'_>::print::<Markdown>(move _47) -> [return: bb33, unwind: bb155];
    }

    bb161: {
        switchInt(_189) -> [0: bb160, otherwise: bb162];
    }

    bb162: {
        drop(((_38 as Ok).0: std::path::PathBuf)) -> [return: bb160, unwind: bb155];
    }

    bb163: {
        drop(_38) -> [return: bb160, unwind: bb155];
    }

    bb164: {
        _202 = discriminant(_38);
        switchInt(move _202) -> [0: bb161, otherwise: bb163];
    }

    bb165: {
        _191 = const false;
        _121 = move _103;
        _122 = &_115;
        _0 = run_controller(move _121, _122) -> [return: bb81, unwind: bb150];
    }

    bb166: {
        drop(_78) -> [return: bb137, unwind: bb158];
    }

    bb167 (cleanup): {
        drop(_103) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        switchInt(_191) -> [0: bb152, otherwise: bb167];
    }

    bb169 (cleanup): {
        _203 = &mut _109;
        _204 = <Box<[bat::input::Input<'_>; 1]> as Drop>::drop(move _203) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_78) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        switchInt(_190) -> [0: bb158, otherwise: bb170];
    }

    bb172 (cleanup): {
        drop(_59) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        switchInt(_192) -> [0: bb158, otherwise: bb172];
    }

    bb174 (cleanup): {
        _205 = &mut _65;
        _206 = <Box<[bat::input::Input<'_>; 1]> as Drop>::drop(move _205) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_42) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        switchInt(_193) -> [0: bb156, otherwise: bb175];
    }

    bb177 (cleanup): {
        drop(_38) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_13) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        switchInt(_194) -> [0: bb193, otherwise: bb178];
    }

    bb180 (cleanup): {
        drop(_14) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        switchInt(_195) -> [0: bb193, otherwise: bb180];
    }

    bb182 (cleanup): {
        drop(_15) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_196) -> [0: bb193, otherwise: bb182];
    }

    bb184 (cleanup): {
        drop(_16) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        switchInt(_197) -> [0: bb193, otherwise: bb184];
    }

    bb186 (cleanup): {
        drop(_17) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        switchInt(_198) -> [0: bb193, otherwise: bb186];
    }

    bb188 (cleanup): {
        drop(_18) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        switchInt(_199) -> [0: bb193, otherwise: bb188];
    }

    bb190 (cleanup): {
        drop(_19) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        switchInt(_200) -> [0: bb193, otherwise: bb190];
    }

    bb192 (cleanup): {
        drop(_9) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        switchInt(_201) -> [0: bb158, otherwise: bb192];
    }

    bb194: {
        (*_209) = [move _110];
        _105 = move _109;
        _104 = move _105 as std::boxed::Box<[bat::input::Input<'_>]> (PointerCoercion(Unsize));
        _103 = slice::<impl [bat::input::Input<'_>]>::into_vec::<std::alloc::Global>(move _104) -> [return: bb77, unwind: bb152];
    }

    bb195: {
        (*_208) = [move _66];
        _61 = move _65;
        _60 = move _61 as std::boxed::Box<[bat::input::Input<'_>]> (PointerCoercion(Unsize));
        _59 = slice::<impl [bat::input::Input<'_>]>::into_vec::<std::alloc::Global>(move _60) -> [return: bb49, unwind: bb158];
    }

    bb196: {
        goto -> bb14;
    }

    bb197: {
        goto -> bb143;
    }

    bb198: {
        goto -> bb141;
    }

    bb199: {
        goto -> bb140;
    }

    bb200: {
        goto -> bb139;
    }

    bb201: {
        goto -> bb139;
    }

    bb202: {
        goto -> bb139;
    }

    bb203: {
        goto -> bb135;
    }

    bb204 (cleanup): {
        goto -> bb152;
    }

    bb205 (cleanup): {
        goto -> bb158;
    }
}

promoted[0] in run: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "--version"];
        _0 = &_1;
        return;
    }
}

promoted[1] in run: &[&str; 15] = {
    let mut _0: &[&str; 15];
    let mut _1: [&str; 15];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    let mut _25: &str;
    let mut _26: &str;
    let mut _27: &str;
    let mut _28: &str;
    let mut _29: &str;

    bb0: {
        _3 = const "PAGER";
        _2 = &(*_3);
        _5 = const "LESS";
        _4 = &(*_5);
        _7 = const "BAT_PAGER";
        _6 = &(*_7);
        _9 = const "BAT_CACHE_PATH";
        _8 = &(*_9);
        _11 = const "BAT_CONFIG_PATH";
        _10 = &(*_11);
        _13 = const "BAT_OPTS";
        _12 = &(*_13);
        _15 = const "BAT_STYLE";
        _14 = &(*_15);
        _17 = const "BAT_TABS";
        _16 = &(*_17);
        _19 = const "BAT_THEME";
        _18 = &(*_19);
        _21 = const "XDG_CONFIG_HOME";
        _20 = &(*_21);
        _23 = const "XDG_CACHE_HOME";
        _22 = &(*_23);
        _25 = const "COLORTERM";
        _24 = &(*_25);
        _27 = const "NO_COLOR";
        _26 = &(*_27);
        _29 = const "MANPAGER";
        _28 = &(*_29);
        _1 = [const "SHELL", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _0 = &_1;
        return;
    }
}

promoted[2] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in run: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn run::{closure#0}(_1: {closure@src/bin/bat/main.rs:232:29: 232:31}) -> String {
    let mut _0: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "less";
        _0 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

ProcMacroHack::Value::{constant#0}: isize = {
    let mut _0: isize;
    let mut _1: (&str, isize);

    bb0: {
        StorageLive(_1);
        _1 = (const "fallback = \"\"", const 0_isize);
        _0 = (_1.1: isize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<bool, bat::error::Error>;
    let mut _2: isize;
    let _5: ();
    let _6: &bat::error::Error;
    let mut _7: &mut dyn std::io::Write;
    let mut _8: &mut std::io::StderrLock<'_>;
    let mut _9: std::io::StderrLock<'_>;
    let mut _10: &std::io::Stderr;
    let _11: !;
    let _12: !;
    let _13: !;
    scope 1 {
        debug result => _1;
        let _3: bat::error::Error;
        scope 2 {
            debug error => _3;
            let _4: std::io::Stderr;
            scope 3 {
                debug stderr => _4;
            }
        }
    }

    bb0: {
        _1 = run() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb5, otherwise: bb4];
    }

    bb2: {
        switchInt(((_1 as Ok).0: bool)) -> [0: bb10, otherwise: bb3];
    }

    bb3: {
        _13 = exit(const 0_i32) -> unwind continue;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _3 = move ((_1 as Err).0: bat::error::Error);
        _4 = stderr() -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _6 = &_3;
        _10 = &_4;
        _9 = std::io::Stderr::lock(move _10) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _8 = &mut _9;
        _7 = _8 as &mut dyn std::io::Write (PointerCoercion(Unsize));
        _5 = bat::error::default_error_handler(_6, move _7) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _11 = exit(const 1_i32) -> bb12;
    }

    bb10: {
        _12 = exit(const 1_i32) -> unwind continue;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
