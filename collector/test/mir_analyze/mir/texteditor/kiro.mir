// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ALLOC: Jemalloc = {
    let mut _0: jemallocator::Jemalloc;

    bb0: {
        _0 = Jemalloc;
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn __rust_alloc(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc1: &Jem};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as Global>::alloc(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {} 

fn __rust_dealloc(_1: *mut u8, _2: usize, _3: usize) -> () {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    let mut _0: ();
    let _4: &jemallocator::Jemalloc;
    let mut _5: std::alloc::Layout;

    bb0: {
        _4 = const {alloc1: &Jemalloc};
        _5 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::dealloc(_4, _1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn __rust_realloc(_1: *mut u8, _2: usize, _3: usize, _4: usize) -> *mut u8 {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    debug new_size => _4;
    let mut _0: *mut u8;
    let _5: &jemallocator::Jemalloc;
    let mut _6: std::alloc::Layout;

    bb0: {
        _5 = const {alloc1: &Jemalloc};
        _6 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::realloc(_5, _1, move _6, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn __rust_alloc_zeroed(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc1: &Jemalloc};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::alloc_zeroed(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn print_help(_1: &str, _2: Options) -> () {
    debug program => _1;
    debug opts => _2;
    let mut _0: ();
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let mut _12: core::fmt::rt::Argument<'_>;
    let mut _13: &[core::fmt::rt::Placeholder];
    let _14: &[core::fmt::rt::Placeholder; 3];
    let _15: [core::fmt::rt::Placeholder; 3];
    let mut _16: core::fmt::rt::Placeholder;
    let mut _17: core::fmt::rt::Alignment;
    let mut _18: core::fmt::rt::Count;
    let mut _19: core::fmt::rt::Count;
    let mut _20: core::fmt::rt::Placeholder;
    let mut _21: core::fmt::rt::Alignment;
    let mut _22: core::fmt::rt::Count;
    let mut _23: core::fmt::rt::Count;
    let mut _24: core::fmt::rt::Placeholder;
    let mut _25: core::fmt::rt::Alignment;
    let mut _26: core::fmt::rt::Count;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::UnsafeArg;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _38: &getopts::Options;
    let _39: &str;
    let _40: &std::string::String;
    let mut _42: &&str;
    let mut _43: &[&str; 3];
    scope 1 {
        debug description => _3;
        let mut _41: &[&str; 2];
    }
    scope 2 {
        debug res => _4;
    }
    scope 3 {
    }

    bb0: {
        _43 = const _;
        _6 = _43 as &[&str] (PointerCoercion(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _42 = const _;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_42) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _9 = [move _10, move _12];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = core::fmt::rt::Alignment::Unknown;
        _18 = core::fmt::rt::Count::Implied;
        _19 = core::fmt::rt::Count::Implied;
         _16 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _17, const 0_u32, move _18, move _19) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _21 = core::fmt::rt::Alignment::Unknown;
        _22 = core::fmt::rt::Count::Implied;
        _23 = core::fmt::rt::Count::Implied;
        _20 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _21, const 0_u32, move _22, move _23) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _25 = core::fmt::rt::Alignment::Unknown;
        _26 = core::fmt::rt::Count::Implied;
        _27 = core::fmt::rt::Count::Implied;
        _24 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _25, const 0_u32, move _26, move _27) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _15 = [move _16, move _20, move _24];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _28 = core::fmt::rt::UnsafeArg::new() -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _5 = Arguments::<'_>::new_v1_formatted(move _6, move _7, move _13, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _4 = format(move _5) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _3 = move _4;
        _41 = const _;
        _31 = _41 as &[&str] (PointerCoercion(Unsize));
        _38 = &_2;
        _40 = &_3;
        _39 = <String as Deref>::deref(_40) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _37 = Options::usage(move _38, _39) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<String>(_36) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _29 = _print(move _30) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        drop(_37) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        drop(_3) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_37) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in print_help: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in print_help: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in print_help: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": A tiny UTF-8 terminal text editor\n\nKiro is a tiny UTF-8 text editor on terminals for Unix-like systems.\nSpecify file paths to edit as a command argument or run without argument to\nstart to write a new text.\nHelp can show up with key mapping Ctrl-?.\n\nUsage:\n    ", const " [options] [FILES...]\n\nMappings:\n    "];
        _0 = &_1;
        return;
    }
}

fn edit(_1: Vec<String>) -> Result<(), kiro_editor::Error> {
    debug files => _1;
    let mut _0: std::result::Result<(), kiro_editor::Error>;
    let _2: kiro_editor::input::InputSequences;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, kiro_editor::Error>, kiro_editor::StdinRawMode>;
    let mut _4: std::result::Result<kiro_editor::StdinRawMode, kiro_editor::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, kiro_editor::Error>;
    let _7: kiro_editor::StdinRawMode;
    let mut _8: &mut kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>;
    let mut _9: kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, kiro_editor::Error>, kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>>;
    let mut _11: std::result::Result<kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>, kiro_editor::Error>;
    let mut _12: kiro_editor::input::InputSequences;
    let mut _13: std::io::Stdout;
    let mut _14: std::option::Option<(usize, usize)>;
    let _15: &[std::string::String];
    let _16: &std::vec::Vec<std::string::String>;
    let mut _17: isize;
    let mut _20: bool;
    let mut _21: bool;
    scope 1 {
        debug input => _2;
        let _18: std::result::Result<std::convert::Infallible, kiro_editor::Error>;
        let _19: kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>;
        scope 6 {
            debug residual => _18;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _19;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _21 = const false;
        _20 = const false;
        _4 = StdinRawMode::new() -> [return: bb1, unwind: bb20];
    }

    bb1: {
        _3 = <Result<StdinRawMode, kiro_editor::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: kiro_editor::StdinRawMode);
        _2 = StdinRawMode::input_keys(move _7) -> [return: bb7, unwind: bb20];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, kiro_editor::Error>);
        _0 = <Result<(), kiro_editor::Error> as FromResidual<Result<Infallible, kiro_editor::Error>>>::from_residual(move _6) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _21 = const false;
        goto -> bb17;
    }

    bb7: {
        _21 = const true;
        _21 = const false;
        _20 = const true;
        _12 = move _2;
        _13 = stdout() -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _14 = Option::<(usize, usize)>::None;
        _16 = &_1;
        _15 = <Vec<String> as Deref>::deref(_16) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        _20 = const false;
        _11 = Editor::<kiro_editor::input::InputSequences, Stdout>::open::<String>(move _12, move _13, move _14, _15) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        _20 = const false;
        _10 = <Result<Editor<kiro_editor::input::InputSequences, Stdout>, kiro_editor::Error> as Try>::branch(move _11) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _19 = move ((_10 as Continue).0: kiro_editor::Editor<kiro_editor::input::InputSequences, std::io::Stdout>);
        _9 = move _19;
        _8 = &mut _9;
        _0 = Editor::<kiro_editor::input::InputSequences, Stdout>::edit(move _8) -> [return: bb15, unwind: bb19];
    }

    bb13: {
        _18 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, kiro_editor::Error>);
        _0 = <Result<(), kiro_editor::Error> as FromResidual<Result<Infallible, kiro_editor::Error>>>::from_residual(move _18) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _21 = const false;
        goto -> bb17;
    }

    bb15: {
        _21 = const false;
        drop(_9) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_1) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_20) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_21) -> [0: bb20, otherwise: bb24];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::Args;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let _6: &mut getopts::Options;
    let mut _7: &mut getopts::Options;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &mut getopts::Options;
    let mut _12: &mut getopts::Options;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let mut _17: std::result::Result<getopts::Matches, getopts::Fail>;
    let mut _18: &getopts::Options;
    let mut _19: std::env::Args;
    let mut _20: isize;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &getopts::Fail;
    let _31: !;
    let mut _32: bool;
    let mut _33: &getopts::Matches;
    let _34: &str;
    let _35: ();
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: bool;
    let mut _43: &getopts::Matches;
    let _44: &str;
    let _45: ();
    let _46: &str;
    let _47: &std::string::String;
    let mut _48: getopts::Options;
    let mut _49: std::result::Result<(), kiro_editor::Error>;
    let mut _50: std::vec::Vec<std::string::String>;
    let mut _51: isize;
    let _53: ();
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &kiro_editor::Error;
    let _61: !;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: isize;
    scope 1 {
        debug argv => _1;
        let _2: std::string::String;
        scope 2 {
            debug program => _2;
            let mut _5: getopts::Options;
            scope 3 {
                debug opts => _5;
                let _16: getopts::Matches;
                let _21: getopts::Matches;
                let _22: getopts::Fail;
                scope 4 {
                    debug matches => _16;
                    let mut _63: &&str;
                    let mut _64: &[&str; 2];
                    scope 7 {
                        debug err => _52;
                        let _52: kiro_editor::Error;
                        let mut _65: &[&str; 2];
                    }
                }
                scope 5 {
                    debug m => _21;
                }
                scope 6 {
                    debug e => _22;
                    let mut _62: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _69 = const false;
        _66 = const false;
        _68 = const false;
        _67 = const false;
        _69 = const true;
        _1 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb59];
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb59];
    }

    bb3: {
        _5 = Options::new() -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _66 = const true;
        _7 = &mut _5;
        _8 = const "v";
        _9 = const "version";
        _10 = const "Print version";
        _6 = Options::optflag(move _7, _8, _9, _10) -> [return: bb5, unwind: bb57];
    }

    bb5: {
        _12 = &mut _5;
        _13 = const "h";
        _14 = const "help";
        _15 = const "Print this help";
        _11 = Options::optflag(move _12, _13, _14, _15) -> [return: bb6, unwind: bb57];
    }

    bb6: {
        _18 = &_5;
        _69 = const false;
        _19 = move _1;
        _17 = Options::parse::<Args>(move _18, move _19) -> [return: bb7, unwind: bb57];
    }

    bb7: {
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _22 = move ((_17 as Err).0: getopts::Fail);
        _62 = const _;
        _25 = _62 as &[&str] (PointerCoercion(Unsize));
        _30 = &_22;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<Fail>(_30) -> [return: bb11, unwind: bb40];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _21 = move ((_17 as Ok).0: getopts::Matches);
        _68 = const true;
        _16 = move _21;
        _33 = &_16;
        _34 = const "v";
        _32 = getopts::Matches::opt_present(move _33, _34) -> [return: bb14, unwind: bb55];
    }

    bb11: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _23 = _eprint(move _24) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        _31 = exit(const 1_i32) -> bb40;
    }

    bb14: {
        switchInt(move _32) -> [0: bb18, otherwise: bb15];
    }

    bb15: {
        _64 = const _;
        _37 = _64 as &[&str] (PointerCoercion(Unsize));
        _63 = const _;
        _41 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_63) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _40 = [move _41];
        _39 = &_40;
        _38 = _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _36 = Arguments::<'_>::new_v1(move _37, move _38) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        _35 = _print(move _36) -> [return: bb60, unwind: bb55];
    }

    bb18: {
        _43 = &_16;
        _44 = const "h";
        _42 = getopts::Matches::opt_present(move _43, _44) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        switchInt(move _42) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        _47 = &_2;
        _46 = <String as Deref>::deref(_47) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _66 = const false;
        _48 = move _5;
        _45 = print_help(_46, move _48) -> [return: bb61, unwind: bb55];
    }

    bb22: {
        _68 = const false;
        _50 = move (_16.2: std::vec::Vec<std::string::String>);
        _49 = edit(move _50) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        _67 = const true;
        _51 = discriminant(_49);
        switchInt(move _51) -> [1: bb24, otherwise: bb28];
    }

    bb24: {
        _67 = const false;
        _52 = move ((_49 as Err).0: kiro_editor::Error);
        _65 = const _;
        _55 = _65 as &[&str] (PointerCoercion(Unsize));
        _60 = &_52;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<kiro_editor::Error>(_60) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _54 = Arguments::<'_>::new_v1(move _55, move _56) -> [return: bb26, unwind: bb37];
    }

    bb26: {
        _53 = _eprint(move _54) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        _61 = exit(const 1_i32) -> bb37;
    }

    bb28: {
        drop((_16.0: std::vec::Vec<getopts::Opt>)) -> [return: bb45, unwind: bb43];
    }

    bb29: {
        _66 = const false;
        drop(_2) -> [return: bb30, unwind: bb51];
    }

    bb30: {
        _69 = const false;
        drop(_49) -> [return: bb31, unwind continue];
    }

    bb31: {
        _67 = const false;
        goto -> bb36;
    }

    bb32: {
        drop(_16) -> [return: bb33, unwind: bb57];
    }

    bb33: {
        _68 = const false;
        switchInt(_66) -> [0: bb34, otherwise: bb46];
    }

    bb34: {
        _66 = const false;
        drop(_2) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        _69 = const false;
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_52) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_5) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43 (cleanup): {
        drop((_16.1: std::vec::Vec<std::vec::Vec<(usize, getopts::Optval)>>)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb44: {
        _68 = const false;
        drop(_5) -> [return: bb29, unwind: bb39];
    }

    bb45: {
        drop((_16.1: std::vec::Vec<std::vec::Vec<(usize, getopts::Optval)>>)) -> [return: bb44, unwind: bb38];
    }

    bb46: {
        drop(_5) -> [return: bb34, unwind: bb41];
    }

    bb47 (cleanup): {
        drop((_16.1: std::vec::Vec<std::vec::Vec<(usize, getopts::Optval)>>)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop((_16.0: std::vec::Vec<getopts::Opt>)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_67) -> [0: bb42, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop(((_49 as Err).0: kiro_editor::Error)) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _70 = discriminant(_49);
        switchInt(move _70) -> [1: bb49, otherwise: bb42];
    }

    bb52 (cleanup): {
        switchInt(_68) -> [0: bb57, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_16.2: std::vec::Vec<std::string::String>)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop((_16.1: std::vec::Vec<std::vec::Vec<(usize, getopts::Optval)>>)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop((_16.0: std::vec::Vec<getopts::Opt>)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_5) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_66) -> [0: bb41, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_1) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_69) -> [0: bb42, otherwise: bb58];
    }

    bb60: {
        goto -> bb32;
    }

    bb61: {
        goto -> bb32;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Error: ", const ". Please see --help for more details\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Error: ", const "\n"];
        _0 = &_1;
        return;
    }
}
