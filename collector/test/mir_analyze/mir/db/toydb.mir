// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize(_1: __D) -> Result<__Field, <__D as Deserializer>::Error> {
    debug __deserializer => _1;          // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field, <__D as _::_serde::Deserializer>::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _2: __D;                     // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__FieldVisitor; // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _2 = move _1;                    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _0 = <__D as Deserializer>::deserialize_identifier::<__FieldVisitor>(move _2, move _3) -> bb1; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: fn(__D, _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__FieldVisitor) -> std::result::Result<<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__FieldVisitor as _::_serde::de::Visitor>::Value, <__D as _::_serde::Deserializer>::Error> {<__D as _::_serde::Deserializer>::deserialize_identifier::<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__FieldVisitor>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_str(_1: __FieldVisitor, _2: &str) -> Result<__Field, __E> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __value => _2;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field, __E>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _5: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _6: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _7: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _8: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _9: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _10: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _11: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _12: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _13: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _14: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _15: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _16: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _17: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _18: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _19: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _20: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _21: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "id") -> bb1; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb2, otherwise: bb19]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "peers") -> bb3; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb3: {
        switchInt(move _4) -> [false: bb4, otherwise: bb20]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "listen_sql") -> bb5; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
    }

    bb5: {
        switchInt(move _5) -> [false: bb6, otherwise: bb21]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "listen_raft") -> bb7; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb7: {
        switchInt(move _6) -> [false: bb8, otherwise: bb22]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "log_level") -> bb9; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
    }

    bb9: {
        switchInt(move _7) -> [false: bb10, otherwise: bb23]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "data_dir") -> bb11; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
    }

    bb11: {
        switchInt(move _8) -> [false: bb12, otherwise: bb24]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb12: {
        _9 = <str as PartialEq>::eq(_2, const "sync") -> bb13; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
    }

    bb13: {
        switchInt(move _9) -> [false: bb14, otherwise: bb25]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb14: {
        _10 = <str as PartialEq>::eq(_2, const "storage_raft") -> bb15; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
    }

    bb15: {
        switchInt(move _10) -> [false: bb16, otherwise: bb26]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb16: {
        _11 = <str as PartialEq>::eq(_2, const "storage_sql") -> bb17; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb17: {
        switchInt(move _11) -> [false: bb18, otherwise: bb27]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb18: {
        discriminant(_21) = 9;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _21; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb19: {
        discriminant(_12) = 0;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _12; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb20: {
        discriminant(_13) = 1;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _13; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb21: {
        discriminant(_14) = 2;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _14; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb22: {
        discriminant(_15) = 3;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _15; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb23: {
        discriminant(_16) = 4;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _16; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb24: {
        discriminant(_17) = 5;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _17; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb25: {
        discriminant(_18) = 6;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _18; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb26: {
        discriminant(_19) = 7;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _19; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb27: {
        discriminant(_20) = 8;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _20; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb28;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb28: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::expecting(_1: &__FieldVisitor, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __formatter => _2;             // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: &mut std::fmt::Formatter; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _5: &str;                        // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _5 = const "field identifier";   // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [102, 105, 101, 108, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 16 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [102, 105, 101, 108, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 16 }) }
        _4 = _5;                         // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _0 = Formatter::write_str(move _3, move _4) -> bb1; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::Formatter, &'s str) -> std::result::Result<(), std::fmt::Error> {std::fmt::Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

const FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &[&str; 9];              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _2: &[&str; 9];                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _3: [&str; 9];                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: &[&str; 9];              // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        StorageLive(_1);                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        StorageLive(_2);                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _4 = const FIELDS::promoted[0];  // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &[&str; 9]
                                         // + val: Unevaluated(FIELDS, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &[&str; 9], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:110 ~ toydb[e000]::_::{impl#0}::deserialize::FIELDS), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _2 = &(*_4);                     // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _1 = &(*_2);                     // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at src/bin/toydb.rs:57:17: 57:28
        StorageDead(_2);                 // scope 0 at src/bin/toydb.rs:57:27: 57:28
        StorageDead(_1);                 // scope 0 at src/bin/toydb.rs:57:27: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[0] in FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];              // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: [&str; 9];               // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = [const "id", const "peers", const "listen_sql", const "listen_raft", const "log_level", const "data_dir", const "sync", const "storage_raft", const "storage_sql"]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

fn main() -> Result<(), toydb::error::Error> {
    let mut _0: std::result::Result<(), toydb::error::Error>; // return place in scope 0 at src/bin/toydb.rs:17:20: 17:30
    let mut _1: &tokio::runtime::Runtime; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let _2: tokio::runtime::Runtime;     // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _3: std::result::Result<tokio::runtime::Runtime, std::io::Error>; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _4: &mut tokio::runtime::Builder; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _5: &mut tokio::runtime::Builder; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _6: &mut tokio::runtime::Builder; // in scope 0 at src/bin/toydb.rs:49:5: 49:11
    let mut _7: tokio::runtime::Builder; // in scope 0 at src/bin/toydb.rs:49:5: 49:11
    let mut _8: impl std::future::Future; // in scope 0 at src/bin/toydb.rs:17:31: 55:2
    let mut _9: [static generator@src/bin/toydb.rs:17:31: 55:2]; // in scope 0 at src/bin/toydb.rs:17:31: 55:2

    bb0: {
        _7 = tokio::runtime::Builder::new_multi_thread() -> bb1; // scope 0 at src/bin/toydb.rs:49:5: 49:11
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 49:11
                                         // + literal: Const { ty: fn() -> tokio::runtime::Builder {tokio::runtime::Builder::new_multi_thread}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = &mut _7;                    // scope 0 at src/bin/toydb.rs:49:5: 49:11
        _5 = tokio::runtime::Builder::enable_all(move _6) -> [return: bb2, unwind: bb10]; // scope 0 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:54:10: 54:15
                                         // + literal: Const { ty: for<'r> fn(&'r mut tokio::runtime::Builder) -> &'r mut tokio::runtime::Builder {tokio::runtime::Builder::enable_all}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _4 = &mut (*_5);                 // scope 0 at src/bin/toydb.rs:49:5: 54:15
        _3 = tokio::runtime::Builder::build(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:54:10: 54:15
                                         // + literal: Const { ty: for<'r> fn(&'r mut tokio::runtime::Builder) -> std::result::Result<tokio::runtime::Runtime, std::io::Error> {tokio::runtime::Builder::build}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _2 = Result::<Runtime, std::io::Error>::unwrap(move _3) -> [return: bb4, unwind: bb10]; // scope 0 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:54:10: 54:15
                                         // + literal: Const { ty: fn(std::result::Result<tokio::runtime::Runtime, std::io::Error>) -> tokio::runtime::Runtime {std::result::Result::<tokio::runtime::Runtime, std::io::Error>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _1 = &_2;                        // scope 0 at src/bin/toydb.rs:49:5: 54:15
        discriminant(_9) = 0;            // scope 0 at src/bin/toydb.rs:17:31: 55:2
        _8 = from_generator::<[static generator@src/bin/toydb.rs:17:31: 55:2]>(move _9) -> [return: bb5, unwind: bb9]; // scope 0 at src/bin/toydb.rs:17:31: 55:2
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:17:31: 55:2
                                         // + literal: Const { ty: fn([static generator@src/bin/toydb.rs:17:31: 55:2]) -> impl std::future::Future {std::future::from_generator::<[static generator@src/bin/toydb.rs:17:31: 55:2]>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = Runtime::block_on::<impl Future>(move _1, move _8) -> [return: bb6, unwind: bb9]; // scope 0 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:54:10: 54:15
                                         // + literal: Const { ty: for<'r> fn(&'r tokio::runtime::Runtime, impl std::future::Future) -> <impl std::future::Future as std::future::Future>::Output {tokio::runtime::Runtime::block_on::<impl std::future::Future>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb10]; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb7: {
        drop(_7) -> bb8;                 // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb8: {
        return;                          // scope 0 at src/bin/toydb.rs:55:2: 55:2
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at src/bin/toydb.rs:17:7: 55:2
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_bytes(_1: __FieldVisitor, _2: &[u8]) -> Result<__Field, __E> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __value => _2;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field, __E>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: usize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: usize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _5: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _6: usize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _7: usize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _8: bool;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _9: usize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _10: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _11: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _12: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _13: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _14: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _15: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _16: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _17: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _18: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _19: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _20: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _21: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _22: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _23: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _24: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _25: usize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _26: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _27: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _28: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _29: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _30: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _31: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _32: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _33: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _34: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _35: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _36: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _24 = Len((*_2));                // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _25 = const 2_usize;             // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _26 = Eq(move _24, move _25);    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _26) -> [false: bb4, otherwise: bb1]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb1: {
        switchInt((*_2)[0 of 2]) -> [105_u8: bb2, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb2: {
        switchInt((*_2)[1 of 2]) -> [100_u8: bb80, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb3: {
        discriminant(_36) = 9;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _36; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb4: {
        _21 = Len((*_2));                // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _22 = const 5_usize;             // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _23 = Eq(move _21, move _22);    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _23) -> [false: bb10, otherwise: bb5]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb5: {
        switchInt((*_2)[0 of 5]) -> [112_u8: bb6, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb6: {
        switchInt((*_2)[1 of 5]) -> [101_u8: bb7, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb7: {
        switchInt((*_2)[2 of 5]) -> [101_u8: bb8, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb8: {
        switchInt((*_2)[3 of 5]) -> [114_u8: bb9, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb9: {
        switchInt((*_2)[4 of 5]) -> [115_u8: bb81, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb10: {
        _18 = Len((*_2));                // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _19 = const 10_usize;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _20 = Eq(move _18, move _19);    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _20) -> [false: bb21, otherwise: bb11]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb11: {
        switchInt((*_2)[0 of 10]) -> [108_u8: bb12, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb12: {
        switchInt((*_2)[1 of 10]) -> [105_u8: bb13, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb13: {
        switchInt((*_2)[2 of 10]) -> [115_u8: bb14, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb14: {
        switchInt((*_2)[3 of 10]) -> [116_u8: bb15, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb15: {
        switchInt((*_2)[4 of 10]) -> [101_u8: bb16, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb16: {
        switchInt((*_2)[5 of 10]) -> [110_u8: bb17, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb17: {
        switchInt((*_2)[6 of 10]) -> [95_u8: bb18, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb18: {
        switchInt((*_2)[7 of 10]) -> [115_u8: bb19, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb19: {
        switchInt((*_2)[8 of 10]) -> [113_u8: bb20, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb20: {
        switchInt((*_2)[9 of 10]) -> [108_u8: bb82, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb21: {
        _15 = Len((*_2));                // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _16 = const 11_usize;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _17 = Eq(move _15, move _16);    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _17) -> [false: bb43, otherwise: bb22]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb22: {
        switchInt((*_2)[0 of 11]) -> [108_u8: bb23, 115_u8: bb33, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb23: {
        switchInt((*_2)[1 of 11]) -> [105_u8: bb24, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb24: {
        switchInt((*_2)[2 of 11]) -> [115_u8: bb25, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb25: {
        switchInt((*_2)[3 of 11]) -> [116_u8: bb26, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb26: {
        switchInt((*_2)[4 of 11]) -> [101_u8: bb27, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb27: {
        switchInt((*_2)[5 of 11]) -> [110_u8: bb28, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb28: {
        switchInt((*_2)[6 of 11]) -> [95_u8: bb29, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb29: {
        switchInt((*_2)[7 of 11]) -> [114_u8: bb30, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb30: {
        switchInt((*_2)[8 of 11]) -> [97_u8: bb31, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb31: {
        switchInt((*_2)[9 of 11]) -> [102_u8: bb32, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb32: {
        switchInt((*_2)[10 of 11]) -> [116_u8: bb83, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb33: {
        switchInt((*_2)[1 of 11]) -> [116_u8: bb34, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb34: {
        switchInt((*_2)[2 of 11]) -> [111_u8: bb35, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb35: {
        switchInt((*_2)[3 of 11]) -> [114_u8: bb36, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb36: {
        switchInt((*_2)[4 of 11]) -> [97_u8: bb37, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb37: {
        switchInt((*_2)[5 of 11]) -> [103_u8: bb38, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb38: {
        switchInt((*_2)[6 of 11]) -> [101_u8: bb39, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb39: {
        switchInt((*_2)[7 of 11]) -> [95_u8: bb40, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb40: {
        switchInt((*_2)[8 of 11]) -> [115_u8: bb41, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb41: {
        switchInt((*_2)[9 of 11]) -> [113_u8: bb42, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb42: {
        switchInt((*_2)[10 of 11]) -> [108_u8: bb88, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb43: {
        _12 = Len((*_2));                // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _13 = const 9_usize;             // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _14 = Eq(move _12, move _13);    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _14) -> [false: bb53, otherwise: bb44]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb44: {
        switchInt((*_2)[0 of 9]) -> [108_u8: bb45, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb45: {
        switchInt((*_2)[1 of 9]) -> [111_u8: bb46, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb46: {
        switchInt((*_2)[2 of 9]) -> [103_u8: bb47, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb47: {
        switchInt((*_2)[3 of 9]) -> [95_u8: bb48, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb48: {
        switchInt((*_2)[4 of 9]) -> [108_u8: bb49, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb49: {
        switchInt((*_2)[5 of 9]) -> [101_u8: bb50, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb50: {
        switchInt((*_2)[6 of 9]) -> [118_u8: bb51, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb51: {
        switchInt((*_2)[7 of 9]) -> [101_u8: bb52, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb52: {
        switchInt((*_2)[8 of 9]) -> [108_u8: bb84, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb53: {
        _9 = Len((*_2));                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _10 = const 8_usize;             // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _11 = Eq(move _9, move _10);     // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _11) -> [false: bb62, otherwise: bb54]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb54: {
        switchInt((*_2)[0 of 8]) -> [100_u8: bb55, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb55: {
        switchInt((*_2)[1 of 8]) -> [97_u8: bb56, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb56: {
        switchInt((*_2)[2 of 8]) -> [116_u8: bb57, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb57: {
        switchInt((*_2)[3 of 8]) -> [97_u8: bb58, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb58: {
        switchInt((*_2)[4 of 8]) -> [95_u8: bb59, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb59: {
        switchInt((*_2)[5 of 8]) -> [100_u8: bb60, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb60: {
        switchInt((*_2)[6 of 8]) -> [105_u8: bb61, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb61: {
        switchInt((*_2)[7 of 8]) -> [114_u8: bb85, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb62: {
        _6 = Len((*_2));                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _7 = const 4_usize;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _8 = Eq(move _6, move _7);       // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _8) -> [false: bb67, otherwise: bb63]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb63: {
        switchInt((*_2)[0 of 4]) -> [115_u8: bb64, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb64: {
        switchInt((*_2)[1 of 4]) -> [121_u8: bb65, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb65: {
        switchInt((*_2)[2 of 4]) -> [110_u8: bb66, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb66: {
        switchInt((*_2)[3 of 4]) -> [99_u8: bb86, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb67: {
        _3 = Len((*_2));                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _4 = const 12_usize;             // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _5 = Eq(move _3, move _4);       // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _5) -> [false: bb3, otherwise: bb68]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb68: {
        switchInt((*_2)[0 of 12]) -> [115_u8: bb69, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb69: {
        switchInt((*_2)[1 of 12]) -> [116_u8: bb70, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb70: {
        switchInt((*_2)[2 of 12]) -> [111_u8: bb71, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb71: {
        switchInt((*_2)[3 of 12]) -> [114_u8: bb72, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb72: {
        switchInt((*_2)[4 of 12]) -> [97_u8: bb73, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb73: {
        switchInt((*_2)[5 of 12]) -> [103_u8: bb74, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb74: {
        switchInt((*_2)[6 of 12]) -> [101_u8: bb75, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb75: {
        switchInt((*_2)[7 of 12]) -> [95_u8: bb76, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb76: {
        switchInt((*_2)[8 of 12]) -> [114_u8: bb77, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb77: {
        switchInt((*_2)[9 of 12]) -> [97_u8: bb78, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb78: {
        switchInt((*_2)[10 of 12]) -> [102_u8: bb79, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb79: {
        switchInt((*_2)[11 of 12]) -> [116_u8: bb87, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb80: {
        discriminant(_27) = 0;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _27; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb81: {
        discriminant(_28) = 1;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _28; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb82: {
        discriminant(_29) = 2;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _29; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb83: {
        discriminant(_30) = 3;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _30; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb84: {
        discriminant(_31) = 4;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _31; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb85: {
        discriminant(_32) = 5;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _32; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb86: {
        discriminant(_33) = 6;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _33; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb87: {
        discriminant(_34) = 7;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _34; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb88: {
        discriminant(_35) = 8;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _35; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb89;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb89: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _0 = const ();                   // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq(_1: __Visitor, _2: __A) -> Result<Config, <__A as SeqAccess>::Error> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __seq => _2;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<Config, <__A as _::_serde::de::SeqAccess>::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _3: std::string::String;         // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _5: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _6: &mut __A;                // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _7: &mut __A;                // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _8: isize;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _9: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _10: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _11: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _12: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _13: std::string::String;        // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _14: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _15: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _16: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _17: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _19: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _20: std::result::Result<std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _21: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _22: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _23: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _26: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _27: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _29: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _30: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _31: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _32: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _34: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _35: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _36: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _37: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _38: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _41: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _42: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _44: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _45: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _46: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _47: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _49: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _50: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _51: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _52: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _53: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _56: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _57: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _59: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _60: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _61: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _62: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _64: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _65: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _66: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _67: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _68: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _71: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _72: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _74: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _75: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _76: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _77: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _79: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _80: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _81: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _82: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _83: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _86: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _87: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _89: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _90: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _91: &&str;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _92: &&str;                      // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _94: std::option::Option<bool>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _95: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _96: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _97: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _98: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _101: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _102: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _104: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _105: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _106: &&str;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _107: &&str;                     // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _109: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _110: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _111: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _112: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _113: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _116: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _117: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _119: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _120: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _121: &&str;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _122: &&str;                     // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _124: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _125: std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _126: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _127: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _128: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _131: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _132: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _134: <__A as _::_serde::de::SeqAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _135: &dyn _::_serde::de::Expected; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _136: &&str;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _137: &&str;                     // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _138: Config;                // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _139: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _140: std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _141: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _142: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _143: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _144: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _145: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _146: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _147: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _148: &&str;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    scope 1 {
        debug __field0 => _3;            // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let _18: std::collections::HashMap<std::string::String, std::string::String>; // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let _24: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let _25: <__A as _::_serde::de::SeqAccess>::Error; // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let _28: std::collections::HashMap<std::string::String, std::string::String>; // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let mut _149: &&str;             // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        scope 5 {
            debug __field1 => _18;       // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            let _33: std::string::String; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            let _39: std::option::Option<std::string::String>; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            let _40: <__A as _::_serde::de::SeqAccess>::Error; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            let _43: std::string::String; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            let mut _150: &&str;         // in scope 5 at src/bin/toydb.rs:57:17: 57:28
            scope 9 {
                debug __field2 => _33;   // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                let _48: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                let _54: std::option::Option<std::string::String>; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                let _55: <__A as _::_serde::de::SeqAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                let _58: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                let mut _151: &&str;     // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                scope 13 {
                    debug __field3 => _48; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    let _63: std::string::String; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    let _69: std::option::Option<std::string::String>; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    let _70: <__A as _::_serde::de::SeqAccess>::Error; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    let _73: std::string::String; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    let mut _152: &&str; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                    scope 17 {
                        debug __field4 => _63; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        let _78: std::string::String; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        let _84: std::option::Option<std::string::String>; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        let _85: <__A as _::_serde::de::SeqAccess>::Error; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        let _88: std::string::String; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        let mut _153: &&str; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                        scope 21 {
                            debug __field5 => _78; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            let _93: bool; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            let _99: std::option::Option<bool>; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            let _100: <__A as _::_serde::de::SeqAccess>::Error; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            let _103: bool; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            let mut _154: &&str; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                            scope 25 {
                                debug __field6 => _93; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                let _108: std::string::String; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                let _114: std::option::Option<std::string::String>; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                let _115: <__A as _::_serde::de::SeqAccess>::Error; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                let _118: std::string::String; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                let mut _155: &&str; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                scope 29 {
                                    debug __field7 => _108; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    let _123: std::string::String; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    let _129: std::option::Option<std::string::String>; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    let _130: <__A as _::_serde::de::SeqAccess>::Error; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    let _133: std::string::String; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    let mut _156: &&str; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                    scope 33 {
                                        debug __field8 => _123; // in scope 33 at src/bin/toydb.rs:57:17: 57:28
                                    }
                                    scope 34 {
                                        debug __val => _129; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                    }
                                    scope 35 {
                                        debug __err => _130; // in scope 35 at src/bin/toydb.rs:57:17: 57:28
                                    }
                                    scope 36 {
                                        debug __value => _133; // in scope 36 at src/bin/toydb.rs:57:17: 57:28
                                    }
                                }
                                scope 30 {
                                    debug __val => _114; // in scope 30 at src/bin/toydb.rs:57:17: 57:28
                                }
                                scope 31 {
                                    debug __err => _115; // in scope 31 at src/bin/toydb.rs:57:17: 57:28
                                }
                                scope 32 {
                                    debug __value => _118; // in scope 32 at src/bin/toydb.rs:57:17: 57:28
                                }
                            }
                            scope 26 {
                                debug __val => _99; // in scope 26 at src/bin/toydb.rs:57:17: 57:28
                            }
                            scope 27 {
                                debug __err => _100; // in scope 27 at src/bin/toydb.rs:57:17: 57:28
                            }
                            scope 28 {
                                debug __value => _103; // in scope 28 at src/bin/toydb.rs:57:17: 57:28
                            }
                        }
                        scope 22 {
                            debug __val => _84; // in scope 22 at src/bin/toydb.rs:57:17: 57:28
                        }
                        scope 23 {
                            debug __err => _85; // in scope 23 at src/bin/toydb.rs:57:17: 57:28
                        }
                        scope 24 {
                            debug __value => _88; // in scope 24 at src/bin/toydb.rs:57:17: 57:28
                        }
                    }
                    scope 18 {
                        debug __val => _69; // in scope 18 at src/bin/toydb.rs:57:17: 57:28
                    }
                    scope 19 {
                        debug __err => _70; // in scope 19 at src/bin/toydb.rs:57:17: 57:28
                    }
                    scope 20 {
                        debug __value => _73; // in scope 20 at src/bin/toydb.rs:57:17: 57:28
                    }
                }
                scope 14 {
                    debug __val => _54;  // in scope 14 at src/bin/toydb.rs:57:17: 57:28
                }
                scope 15 {
                    debug __err => _55;  // in scope 15 at src/bin/toydb.rs:57:17: 57:28
                }
                scope 16 {
                    debug __value => _58; // in scope 16 at src/bin/toydb.rs:57:17: 57:28
                }
            }
            scope 10 {
                debug __val => _39;      // in scope 10 at src/bin/toydb.rs:57:17: 57:28
            }
            scope 11 {
                debug __err => _40;      // in scope 11 at src/bin/toydb.rs:57:17: 57:28
            }
            scope 12 {
                debug __value => _43;    // in scope 12 at src/bin/toydb.rs:57:17: 57:28
            }
        }
        scope 6 {
            debug __val => _24;          // in scope 6 at src/bin/toydb.rs:57:17: 57:28
        }
        scope 7 {
            debug __err => _25;          // in scope 7 at src/bin/toydb.rs:57:17: 57:28
        }
        scope 8 {
            debug __value => _28;        // in scope 8 at src/bin/toydb.rs:57:17: 57:28
        }
    }
    scope 2 {
        debug __val => _9;               // in scope 2 at src/bin/toydb.rs:57:17: 57:28
    }
    scope 3 {
        debug __err => _10;              // in scope 3 at src/bin/toydb.rs:57:17: 57:28
    }
    scope 4 {
        debug __value => _13;            // in scope 4 at src/bin/toydb.rs:57:17: 57:28
    }

    bb0: {
        _7 = &mut _2;                    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _6 = &mut (*_7);                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _5 = <__A as SeqAccess>::next_element::<std::string::String>(move _6) -> [return: bb1, unwind: bb97]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:59:5: 59:7
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = discriminant(_5);           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _8) -> [0_isize: bb4, 1_isize: bb2, otherwise: bb3]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb2: {
        _10 = move ((_5 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _11 = move _10;                  // scope 3 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _11; // scope 3 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 3 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb87;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb4: {
        _9 = move ((_5 as Ok).0: std::option::Option<std::string::String>); // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _4 = move _9;                    // scope 2 at src/bin/toydb.rs:57:17: 57:28
        _12 = discriminant(_4);          // scope 0 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _12) -> [0_isize: bb5, 1_isize: bb7, otherwise: bb6]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb5: {
        _148 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[0]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[0]) }) }
        _17 = _148;                      // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _16 = _17;                       // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _15 = move _16 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _14 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 0_usize, move _15) -> [return: bb8, unwind: bb107]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        unreachable;                     // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb7: {
        _13 = move ((_4 as Some).0: std::string::String); // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _3 = move _13;                   // scope 4 at src/bin/toydb.rs:57:17: 57:28
        _22 = &mut _2;                   // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _21 = &mut (*_22);               // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _20 = <__A as SeqAccess>::next_element::<HashMap<std::string::String, std::string::String>>(move _21) -> [return: bb9, unwind: bb96]; // scope 1 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:60:5: 60:10
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::collections::HashMap<std::string::String, std::string::String>>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _14; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb87;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb9: {
        _23 = discriminant(_20);         // scope 1 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _23) -> [0_isize: bb12, 1_isize: bb10, otherwise: bb11]; // scope 1 at src/bin/toydb.rs:57:17: 57:28
    }

    bb10: {
        _25 = move ((_20 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _26 = move _25;                  // scope 7 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _26; // scope 7 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 7 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb85;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:57:17: 57:28
    }

    bb12: {
        _24 = move ((_20 as Ok).0: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>); // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _19 = move _24;                  // scope 6 at src/bin/toydb.rs:57:17: 57:28
        _27 = discriminant(_19);         // scope 1 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _27) -> [0_isize: bb13, 1_isize: bb15, otherwise: bb14]; // scope 1 at src/bin/toydb.rs:57:17: 57:28
    }

    bb13: {
        _149 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[1]; // scope 1 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[1]) }) }
        _32 = _149;                      // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _31 = _32;                       // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _30 = move _31 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _29 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 1_usize, move _30) -> [return: bb16, unwind: bb106]; // scope 1 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:57:17: 57:28
    }

    bb15: {
        _28 = move ((_19 as Some).0: std::collections::HashMap<std::string::String, std::string::String>); // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _18 = move _28;                  // scope 8 at src/bin/toydb.rs:57:17: 57:28
        _37 = &mut _2;                   // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _36 = &mut (*_37);               // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _35 = <__A as SeqAccess>::next_element::<std::string::String>(move _36) -> [return: bb17, unwind: bb95]; // scope 5 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:61:5: 61:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _29; // scope 1 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 1 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb85;                    // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb17: {
        _38 = discriminant(_35);         // scope 5 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _38) -> [0_isize: bb20, 1_isize: bb18, otherwise: bb19]; // scope 5 at src/bin/toydb.rs:57:17: 57:28
    }

    bb18: {
        _40 = move ((_35 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _41 = move _40;                  // scope 11 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _41; // scope 11 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 11 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb83;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at src/bin/toydb.rs:57:17: 57:28
    }

    bb20: {
        _39 = move ((_35 as Ok).0: std::option::Option<std::string::String>); // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _34 = move _39;                  // scope 10 at src/bin/toydb.rs:57:17: 57:28
        _42 = discriminant(_34);         // scope 5 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _42) -> [0_isize: bb21, 1_isize: bb23, otherwise: bb22]; // scope 5 at src/bin/toydb.rs:57:17: 57:28
    }

    bb21: {
        _150 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[2]; // scope 5 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[2]) }) }
        _47 = _150;                      // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _46 = _47;                       // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _45 = move _46 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _44 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 2_usize, move _45) -> [return: bb24, unwind: bb105]; // scope 5 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        unreachable;                     // scope 5 at src/bin/toydb.rs:57:17: 57:28
    }

    bb23: {
        _43 = move ((_34 as Some).0: std::string::String); // scope 5 at src/bin/toydb.rs:57:17: 57:28
        _33 = move _43;                  // scope 12 at src/bin/toydb.rs:57:17: 57:28
        _52 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _51 = &mut (*_52);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _50 = <__A as SeqAccess>::next_element::<std::string::String>(move _51) -> [return: bb25, unwind: bb94]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:62:5: 62:16
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _44; // scope 5 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 5 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb83;                    // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb25: {
        _53 = discriminant(_50);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _53) -> [0_isize: bb28, 1_isize: bb26, otherwise: bb27]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb26: {
        _55 = move ((_50 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _56 = move _55;                  // scope 15 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _56; // scope 15 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 15 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb81;                    // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb28: {
        _54 = move ((_50 as Ok).0: std::option::Option<std::string::String>); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _49 = move _54;                  // scope 14 at src/bin/toydb.rs:57:17: 57:28
        _57 = discriminant(_49);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _57) -> [0_isize: bb29, 1_isize: bb31, otherwise: bb30]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb29: {
        _151 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[3]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[3]) }) }
        _62 = _151;                      // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _61 = _62;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _60 = move _61 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _59 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 3_usize, move _60) -> [return: bb32, unwind: bb104]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb31: {
        _58 = move ((_49 as Some).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _48 = move _58;                  // scope 16 at src/bin/toydb.rs:57:17: 57:28
        _67 = &mut _2;                   // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _66 = &mut (*_67);               // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _65 = <__A as SeqAccess>::next_element::<std::string::String>(move _66) -> [return: bb33, unwind: bb93]; // scope 13 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:63:5: 63:14
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _59; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb81;                    // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb33: {
        _68 = discriminant(_65);         // scope 13 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _68) -> [0_isize: bb36, 1_isize: bb34, otherwise: bb35]; // scope 13 at src/bin/toydb.rs:57:17: 57:28
    }

    bb34: {
        _70 = move ((_65 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _71 = move _70;                  // scope 19 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _71; // scope 19 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 19 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb79;                    // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at src/bin/toydb.rs:57:17: 57:28
    }

    bb36: {
        _69 = move ((_65 as Ok).0: std::option::Option<std::string::String>); // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _64 = move _69;                  // scope 18 at src/bin/toydb.rs:57:17: 57:28
        _72 = discriminant(_64);         // scope 13 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _72) -> [0_isize: bb37, 1_isize: bb39, otherwise: bb38]; // scope 13 at src/bin/toydb.rs:57:17: 57:28
    }

    bb37: {
        _152 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[4]; // scope 13 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[4]) }) }
        _77 = _152;                      // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _76 = _77;                       // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _75 = move _76 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _74 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 4_usize, move _75) -> [return: bb40, unwind: bb103]; // scope 13 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        unreachable;                     // scope 13 at src/bin/toydb.rs:57:17: 57:28
    }

    bb39: {
        _73 = move ((_64 as Some).0: std::string::String); // scope 13 at src/bin/toydb.rs:57:17: 57:28
        _63 = move _73;                  // scope 20 at src/bin/toydb.rs:57:17: 57:28
        _82 = &mut _2;                   // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _81 = &mut (*_82);               // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _80 = <__A as SeqAccess>::next_element::<std::string::String>(move _81) -> [return: bb41, unwind: bb92]; // scope 17 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:64:5: 64:13
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _74; // scope 13 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 13 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb79;                    // scope 13 at src/bin/toydb.rs:57:27: 57:28
    }

    bb41: {
        _83 = discriminant(_80);         // scope 17 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _83) -> [0_isize: bb44, 1_isize: bb42, otherwise: bb43]; // scope 17 at src/bin/toydb.rs:57:17: 57:28
    }

    bb42: {
        _85 = move ((_80 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _86 = move _85;                  // scope 23 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _86; // scope 23 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 23 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb77;                    // scope 17 at no-location
    }

    bb43: {
        unreachable;                     // scope 17 at src/bin/toydb.rs:57:17: 57:28
    }

    bb44: {
        _84 = move ((_80 as Ok).0: std::option::Option<std::string::String>); // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _79 = move _84;                  // scope 22 at src/bin/toydb.rs:57:17: 57:28
        _87 = discriminant(_79);         // scope 17 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _87) -> [0_isize: bb45, 1_isize: bb47, otherwise: bb46]; // scope 17 at src/bin/toydb.rs:57:17: 57:28
    }

    bb45: {
        _153 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[5]; // scope 17 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[5]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[5]) }) }
        _92 = _153;                      // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _91 = _92;                       // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _90 = move _91 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _89 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 5_usize, move _90) -> [return: bb48, unwind: bb102]; // scope 17 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        unreachable;                     // scope 17 at src/bin/toydb.rs:57:17: 57:28
    }

    bb47: {
        _88 = move ((_79 as Some).0: std::string::String); // scope 17 at src/bin/toydb.rs:57:17: 57:28
        _78 = move _88;                  // scope 24 at src/bin/toydb.rs:57:17: 57:28
        _97 = &mut _2;                   // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _96 = &mut (*_97);               // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _95 = <__A as SeqAccess>::next_element::<bool>(move _96) -> [return: bb49, unwind: bb91]; // scope 21 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:65:5: 65:9
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<bool>}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _89; // scope 17 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 17 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb77;                    // scope 17 at src/bin/toydb.rs:57:27: 57:28
    }

    bb49: {
        _98 = discriminant(_95);         // scope 21 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _98) -> [0_isize: bb52, 1_isize: bb50, otherwise: bb51]; // scope 21 at src/bin/toydb.rs:57:17: 57:28
    }

    bb50: {
        _100 = move ((_95 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _101 = move _100;                // scope 27 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _101; // scope 27 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 27 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb75;                    // scope 21 at no-location
    }

    bb51: {
        unreachable;                     // scope 21 at src/bin/toydb.rs:57:17: 57:28
    }

    bb52: {
        _99 = ((_95 as Ok).0: std::option::Option<bool>); // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _94 = _99;                       // scope 26 at src/bin/toydb.rs:57:17: 57:28
        _102 = discriminant(_94);        // scope 21 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _102) -> [0_isize: bb53, 1_isize: bb55, otherwise: bb54]; // scope 21 at src/bin/toydb.rs:57:17: 57:28
    }

    bb53: {
        _154 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[6]; // scope 21 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[6]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[6]) }) }
        _107 = _154;                     // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _106 = _107;                     // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _105 = move _106 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _104 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 6_usize, move _105) -> [return: bb56, unwind: bb101]; // scope 21 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb54: {
        unreachable;                     // scope 21 at src/bin/toydb.rs:57:17: 57:28
    }

    bb55: {
        _103 = ((_94 as Some).0: bool);  // scope 21 at src/bin/toydb.rs:57:17: 57:28
        _93 = _103;                      // scope 28 at src/bin/toydb.rs:57:17: 57:28
        _112 = &mut _2;                  // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _111 = &mut (*_112);             // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _110 = <__A as SeqAccess>::next_element::<std::string::String>(move _111) -> [return: bb57, unwind: bb91]; // scope 25 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:66:5: 66:17
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb56: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _104; // scope 21 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 21 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb75;                    // scope 21 at no-location
    }

    bb57: {
        _113 = discriminant(_110);       // scope 25 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _113) -> [0_isize: bb60, 1_isize: bb58, otherwise: bb59]; // scope 25 at src/bin/toydb.rs:57:17: 57:28
    }

    bb58: {
        _115 = move ((_110 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _116 = move _115;                // scope 31 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _116; // scope 31 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 31 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb74;                    // scope 25 at no-location
    }

    bb59: {
        unreachable;                     // scope 25 at src/bin/toydb.rs:57:17: 57:28
    }

    bb60: {
        _114 = move ((_110 as Ok).0: std::option::Option<std::string::String>); // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _109 = move _114;                // scope 30 at src/bin/toydb.rs:57:17: 57:28
        _117 = discriminant(_109);       // scope 25 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _117) -> [0_isize: bb61, 1_isize: bb63, otherwise: bb62]; // scope 25 at src/bin/toydb.rs:57:17: 57:28
    }

    bb61: {
        _155 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[7]; // scope 25 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[7]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[7]) }) }
        _122 = _155;                     // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _121 = _122;                     // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _120 = move _121 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _119 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 7_usize, move _120) -> [return: bb64, unwind: bb100]; // scope 25 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb62: {
        unreachable;                     // scope 25 at src/bin/toydb.rs:57:17: 57:28
    }

    bb63: {
        _118 = move ((_109 as Some).0: std::string::String); // scope 25 at src/bin/toydb.rs:57:17: 57:28
        _108 = move _118;                // scope 32 at src/bin/toydb.rs:57:17: 57:28
        _127 = &mut _2;                  // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _126 = &mut (*_127);             // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _125 = <__A as SeqAccess>::next_element::<std::string::String>(move _126) -> [return: bb65, unwind: bb90]; // scope 29 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:67:5: 67:16
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<std::string::String>, <__A as _::_serde::de::SeqAccess>::Error> {<__A as _::_serde::de::SeqAccess>::next_element::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb64: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _119; // scope 25 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 25 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb74;                    // scope 25 at src/bin/toydb.rs:57:27: 57:28
    }

    bb65: {
        _128 = discriminant(_125);       // scope 29 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _128) -> [0_isize: bb68, 1_isize: bb66, otherwise: bb67]; // scope 29 at src/bin/toydb.rs:57:17: 57:28
    }

    bb66: {
        _130 = move ((_125 as Err).0: <__A as _::_serde::de::SeqAccess>::Error); // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _131 = move _130;                // scope 35 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _131; // scope 35 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 35 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb73;                    // scope 29 at no-location
    }

    bb67: {
        unreachable;                     // scope 29 at src/bin/toydb.rs:57:17: 57:28
    }

    bb68: {
        _129 = move ((_125 as Ok).0: std::option::Option<std::string::String>); // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _124 = move _129;                // scope 34 at src/bin/toydb.rs:57:17: 57:28
        _132 = discriminant(_124);       // scope 29 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _132) -> [0_isize: bb69, 1_isize: bb71, otherwise: bb70]; // scope 29 at src/bin/toydb.rs:57:17: 57:28
    }

    bb69: {
        _156 = const <__Visitor as Visitor>::visit_seq::<__A>::promoted[8]; // scope 29 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &&str
                                         // + val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[8]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &&str, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:106 ~ toydb[e000]::_::{impl#0}::deserialize::{impl#2}::visit_seq), const_param_did: None }, substs_: Some([ReErased, __A]), promoted: Some(promoted[8]) }) }
        _137 = _156;                     // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _136 = _137;                     // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _135 = move _136 as &dyn _::_serde::de::Expected (Pointer(Unsize)); // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _134 = <<__A as SeqAccess>::Error as _serde::de::Error>::invalid_length(const 8_usize, move _135) -> [return: bb72, unwind: bb99]; // scope 29 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: for<'r> fn(usize, &'r (dyn _::_serde::de::Expected + 'r)) -> <__A as _::_serde::de::SeqAccess>::Error {<<__A as _::_serde::de::SeqAccess>::Error as _::_serde::de::Error>::invalid_length}, val: Value(Scalar(<ZST>)) }
    }

    bb70: {
        unreachable;                     // scope 29 at src/bin/toydb.rs:57:17: 57:28
    }

    bb71: {
        _133 = move ((_124 as Some).0: std::string::String); // scope 29 at src/bin/toydb.rs:57:17: 57:28
        _123 = move _133;                // scope 36 at src/bin/toydb.rs:57:17: 57:28
        _139 = move _3;                  // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _140 = move _18;                 // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _141 = move _33;                 // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _142 = move _48;                 // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _143 = move _63;                 // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _144 = move _78;                 // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _145 = _93;                      // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _146 = move _108;                // scope 33 at src/bin/toydb.rs:57:17: 57:28
        _147 = move _123;                // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.0: std::string::String) = move _139; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.1: std::collections::HashMap<std::string::String, std::string::String>) = move _140; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.2: std::string::String) = move _141; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.3: std::string::String) = move _142; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.4: std::string::String) = move _143; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.5: std::string::String) = move _144; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.6: bool) = move _145;      // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.7: std::string::String) = move _146; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        (_138.8: std::string::String) = move _147; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: Config) = move _138; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 33 at src/bin/toydb.rs:57:17: 57:28
        drop(_2) -> bb89;                // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb72: {
        ((_0 as Err).0: <__A as _::_serde::de::SeqAccess>::Error) = move _134; // scope 29 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 29 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb73;                    // scope 29 at src/bin/toydb.rs:57:27: 57:28
    }

    bb73: {
        drop(_108) -> [return: bb76, unwind: bb91]; // scope 25 at src/bin/toydb.rs:57:27: 57:28
    }

    bb74: {
        goto -> bb76;                    // scope 25 at no-location
    }

    bb75: {
        goto -> bb76;                    // scope 21 at no-location
    }

    bb76: {
        drop(_78) -> [return: bb78, unwind: bb92]; // scope 17 at src/bin/toydb.rs:57:27: 57:28
    }

    bb77: {
        goto -> bb78;                    // scope 17 at no-location
    }

    bb78: {
        drop(_63) -> [return: bb80, unwind: bb93]; // scope 13 at src/bin/toydb.rs:57:27: 57:28
    }

    bb79: {
        goto -> bb80;                    // scope 13 at no-location
    }

    bb80: {
        drop(_48) -> [return: bb82, unwind: bb94]; // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb81: {
        goto -> bb82;                    // scope 9 at no-location
    }

    bb82: {
        drop(_33) -> [return: bb84, unwind: bb95]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb83: {
        goto -> bb84;                    // scope 5 at no-location
    }

    bb84: {
        drop(_18) -> [return: bb86, unwind: bb96]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb85: {
        goto -> bb86;                    // scope 1 at no-location
    }

    bb86: {
        drop(_3) -> [return: bb88, unwind: bb97]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb87: {
        goto -> bb88;                    // scope 0 at no-location
    }

    bb88: {
        drop(_2) -> bb89;                // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb89: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }

    bb90 (cleanup): {
        drop(_108) -> bb91;              // scope 25 at src/bin/toydb.rs:57:27: 57:28
    }

    bb91 (cleanup): {
        drop(_78) -> bb92;               // scope 17 at src/bin/toydb.rs:57:27: 57:28
    }

    bb92 (cleanup): {
        drop(_63) -> bb93;               // scope 13 at src/bin/toydb.rs:57:27: 57:28
    }

    bb93 (cleanup): {
        drop(_48) -> bb94;               // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb94 (cleanup): {
        drop(_33) -> bb95;               // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb95 (cleanup): {
        drop(_18) -> bb96;               // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb96 (cleanup): {
        drop(_3) -> bb97;                // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb97 (cleanup): {
        drop(_2) -> bb98;                // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb98 (cleanup): {
        resume;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb99 (cleanup): {
        goto -> bb90;                    // scope 29 at src/bin/toydb.rs:57:27: 57:28
    }

    bb100 (cleanup): {
        goto -> bb91;                    // scope 25 at src/bin/toydb.rs:57:27: 57:28
    }

    bb101 (cleanup): {
        goto -> bb91;                    // scope 21 at src/bin/toydb.rs:57:27: 57:28
    }

    bb102 (cleanup): {
        goto -> bb92;                    // scope 17 at src/bin/toydb.rs:57:27: 57:28
    }

    bb103 (cleanup): {
        goto -> bb93;                    // scope 13 at src/bin/toydb.rs:57:27: 57:28
    }

    bb104 (cleanup): {
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb105 (cleanup): {
        goto -> bb95;                    // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb106 (cleanup): {
        goto -> bb96;                    // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb107 (cleanup): {
        goto -> bb97;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }
}

promoted[0] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[1] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[2] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[3] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[4] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[5] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[6] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[7] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

promoted[8] in _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _1: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _1 = const "struct Config with 9 elements"; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103, 32, 119, 105, 116, 104, 32, 57, 32, 101, 108, 101, 109, 101, 110, 116, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:57:17: 57:28
        return;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }
}

fn <impl at src/bin/toydb.rs:70:1: 87:2>::new(_1: &str) -> Result<Config, toydb::error::Error> {
    debug file => _1;                    // in scope 0 at src/bin/toydb.rs:71:12: 71:16
    let mut _0: std::result::Result<Config, toydb::error::Error>; // return place in scope 0 at src/bin/toydb.rs:71:27: 71:39
    let mut _2: config::Config;          // in scope 0 at src/bin/toydb.rs:72:13: 72:18
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:73:9: 73:38
    let mut _4: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:73:9: 73:37
    let mut _5: &mut config::Config;     // in scope 0 at src/bin/toydb.rs:73:9: 73:10
    let mut _6: &str;                    // in scope 0 at src/bin/toydb.rs:73:23: 73:27
    let _7: &str;                        // in scope 0 at src/bin/toydb.rs:73:23: 73:27
    let mut _8: isize;                   // in scope 0 at src/bin/toydb.rs:73:37: 73:38
    let mut _10: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:73:37: 73:38
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:74:9: 74:66
    let mut _13: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:74:9: 74:65
    let mut _14: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:74:9: 74:10
    let mut _15: &str;                   // in scope 0 at src/bin/toydb.rs:74:23: 74:30
    let _16: &str;                       // in scope 0 at src/bin/toydb.rs:74:23: 74:30
    let mut _17: std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:74:32: 74:64
    let mut _18: isize;                  // in scope 0 at src/bin/toydb.rs:74:65: 74:66
    let mut _20: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:74:65: 74:66
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:75:9: 75:53
    let mut _23: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:75:9: 75:52
    let mut _24: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:75:9: 75:10
    let mut _25: &str;                   // in scope 0 at src/bin/toydb.rs:75:23: 75:35
    let _26: &str;                       // in scope 0 at src/bin/toydb.rs:75:23: 75:35
    let mut _27: isize;                  // in scope 0 at src/bin/toydb.rs:75:52: 75:53
    let mut _29: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:75:52: 75:53
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:76:9: 76:54
    let mut _32: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:76:9: 76:53
    let mut _33: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:76:9: 76:10
    let mut _34: &str;                   // in scope 0 at src/bin/toydb.rs:76:23: 76:36
    let _35: &str;                       // in scope 0 at src/bin/toydb.rs:76:23: 76:36
    let mut _36: isize;                  // in scope 0 at src/bin/toydb.rs:76:53: 76:54
    let mut _38: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:76:53: 76:54
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:77:9: 77:44
    let mut _41: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:77:9: 77:43
    let mut _42: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:77:9: 77:10
    let mut _43: &str;                   // in scope 0 at src/bin/toydb.rs:77:23: 77:34
    let _44: &str;                       // in scope 0 at src/bin/toydb.rs:77:23: 77:34
    let mut _45: isize;                  // in scope 0 at src/bin/toydb.rs:77:43: 77:44
    let mut _47: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:77:43: 77:44
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:78:9: 78:53
    let mut _50: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:78:9: 78:52
    let mut _51: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:78:9: 78:10
    let mut _52: &str;                   // in scope 0 at src/bin/toydb.rs:78:23: 78:33
    let _53: &str;                       // in scope 0 at src/bin/toydb.rs:78:23: 78:33
    let mut _54: isize;                  // in scope 0 at src/bin/toydb.rs:78:52: 78:53
    let mut _56: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:78:52: 78:53
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:79:9: 79:37
    let mut _59: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:79:9: 79:36
    let mut _60: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:79:9: 79:10
    let mut _61: &str;                   // in scope 0 at src/bin/toydb.rs:79:23: 79:29
    let _62: &str;                       // in scope 0 at src/bin/toydb.rs:79:23: 79:29
    let mut _63: isize;                  // in scope 0 at src/bin/toydb.rs:79:36: 79:37
    let mut _65: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:79:36: 79:37
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:80:9: 80:49
    let mut _68: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:80:9: 80:48
    let mut _69: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:80:9: 80:10
    let mut _70: &str;                   // in scope 0 at src/bin/toydb.rs:80:23: 80:37
    let _71: &str;                       // in scope 0 at src/bin/toydb.rs:80:23: 80:37
    let mut _72: isize;                  // in scope 0 at src/bin/toydb.rs:80:48: 80:49
    let mut _74: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:80:48: 80:49
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:81:9: 81:48
    let mut _77: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:81:9: 81:47
    let mut _78: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:81:9: 81:10
    let mut _79: &str;                   // in scope 0 at src/bin/toydb.rs:81:23: 81:36
    let _80: &str;                       // in scope 0 at src/bin/toydb.rs:81:23: 81:36
    let mut _81: isize;                  // in scope 0 at src/bin/toydb.rs:81:47: 81:48
    let mut _83: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:81:47: 81:48
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:83:9: 83:48
    let mut _86: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:83:9: 83:47
    let mut _87: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:83:9: 83:10
    let mut _88: config::File<config::FileSourceFile>; // in scope 0 at src/bin/toydb.rs:83:17: 83:46
    let mut _89: &str;                   // in scope 0 at src/bin/toydb.rs:83:41: 83:45
    let mut _90: isize;                  // in scope 0 at src/bin/toydb.rs:83:47: 83:48
    let mut _92: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:83:47: 83:48
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, &mut config::Config>; // in scope 0 at src/bin/toydb.rs:84:9: 84:60
    let mut _95: std::result::Result<&mut config::Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:84:9: 84:59
    let mut _96: &mut config::Config;    // in scope 0 at src/bin/toydb.rs:84:9: 84:10
    let mut _97: config::Environment;    // in scope 0 at src/bin/toydb.rs:84:17: 84:58
    let mut _98: &str;                   // in scope 0 at src/bin/toydb.rs:84:50: 84:57
    let _99: &str;                       // in scope 0 at src/bin/toydb.rs:84:50: 84:57
    let mut _100: isize;                 // in scope 0 at src/bin/toydb.rs:84:59: 84:60
    let mut _102: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:84:59: 84:60
    let mut _104: Config;                // in scope 0 at src/bin/toydb.rs:85:12: 85:25
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, config::ConfigError>, Config>; // in scope 0 at src/bin/toydb.rs:85:12: 85:25
    let mut _106: std::result::Result<Config, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:85:12: 85:24
    let mut _107: config::Config;        // in scope 0 at src/bin/toydb.rs:85:12: 85:13
    let mut _108: isize;                 // in scope 0 at src/bin/toydb.rs:85:24: 85:25
    let mut _110: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 0 at src/bin/toydb.rs:85:24: 85:25
    let mut _112: bool;                  // in scope 0 at src/bin/toydb.rs:86:5: 86:6
    scope 1 {
        debug c => _2;                   // in scope 1 at src/bin/toydb.rs:72:13: 72:18
        let _9: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:73:37: 73:38
        let _11: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:73:9: 73:38
        let _19: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:74:65: 74:66
        let _21: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:74:9: 74:66
        let _28: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:75:52: 75:53
        let _30: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:75:9: 75:53
        let _37: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:76:53: 76:54
        let _39: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:76:9: 76:54
        let _46: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:77:43: 77:44
        let _48: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:77:9: 77:44
        let _55: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:78:52: 78:53
        let _57: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:78:9: 78:53
        let _64: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:79:36: 79:37
        let _66: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:79:9: 79:37
        let _73: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:80:48: 80:49
        let _75: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:80:9: 80:49
        let _82: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:81:47: 81:48
        let _84: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:81:9: 81:48
        let _91: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:83:47: 83:48
        let _93: &mut config::Config;    // in scope 1 at src/bin/toydb.rs:83:9: 83:48
        let _101: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:84:59: 84:60
        let _103: &mut config::Config;   // in scope 1 at src/bin/toydb.rs:84:9: 84:60
        let _109: std::result::Result<std::convert::Infallible, config::ConfigError>; // in scope 1 at src/bin/toydb.rs:85:24: 85:25
        let _111: Config;                // in scope 1 at src/bin/toydb.rs:85:12: 85:25
        scope 2 {
            debug residual => _9;        // in scope 2 at src/bin/toydb.rs:73:37: 73:38
            scope 3 {
            }
        }
        scope 4 {
            debug val => _11;            // in scope 4 at src/bin/toydb.rs:73:9: 73:38
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _19;       // in scope 6 at src/bin/toydb.rs:74:65: 74:66
            scope 7 {
            }
        }
        scope 8 {
            debug val => _21;            // in scope 8 at src/bin/toydb.rs:74:9: 74:66
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _28;       // in scope 10 at src/bin/toydb.rs:75:52: 75:53
            scope 11 {
            }
        }
        scope 12 {
            debug val => _30;            // in scope 12 at src/bin/toydb.rs:75:9: 75:53
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _37;       // in scope 14 at src/bin/toydb.rs:76:53: 76:54
            scope 15 {
            }
        }
        scope 16 {
            debug val => _39;            // in scope 16 at src/bin/toydb.rs:76:9: 76:54
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _46;       // in scope 18 at src/bin/toydb.rs:77:43: 77:44
            scope 19 {
            }
        }
        scope 20 {
            debug val => _48;            // in scope 20 at src/bin/toydb.rs:77:9: 77:44
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _55;       // in scope 22 at src/bin/toydb.rs:78:52: 78:53
            scope 23 {
            }
        }
        scope 24 {
            debug val => _57;            // in scope 24 at src/bin/toydb.rs:78:9: 78:53
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _64;       // in scope 26 at src/bin/toydb.rs:79:36: 79:37
            scope 27 {
            }
        }
        scope 28 {
            debug val => _66;            // in scope 28 at src/bin/toydb.rs:79:9: 79:37
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _73;       // in scope 30 at src/bin/toydb.rs:80:48: 80:49
            scope 31 {
            }
        }
        scope 32 {
            debug val => _75;            // in scope 32 at src/bin/toydb.rs:80:9: 80:49
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _82;       // in scope 34 at src/bin/toydb.rs:81:47: 81:48
            scope 35 {
            }
        }
        scope 36 {
            debug val => _84;            // in scope 36 at src/bin/toydb.rs:81:9: 81:48
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _91;       // in scope 38 at src/bin/toydb.rs:83:47: 83:48
            scope 39 {
            }
        }
        scope 40 {
            debug val => _93;            // in scope 40 at src/bin/toydb.rs:83:9: 83:48
            scope 41 {
            }
        }
        scope 42 {
            debug residual => _101;      // in scope 42 at src/bin/toydb.rs:84:59: 84:60
            scope 43 {
            }
        }
        scope 44 {
            debug val => _103;           // in scope 44 at src/bin/toydb.rs:84:9: 84:60
            scope 45 {
            }
        }
        scope 46 {
            debug residual => _109;      // in scope 46 at src/bin/toydb.rs:85:24: 85:25
            scope 47 {
            }
        }
        scope 48 {
            debug val => _111;           // in scope 48 at src/bin/toydb.rs:85:12: 85:25
            scope 49 {
            }
        }
    }

    bb0: {
        _112 = const false;              // scope 0 at src/bin/toydb.rs:72:13: 72:18
        _112 = const true;               // scope 0 at src/bin/toydb.rs:72:21: 72:42
        _2 = config::Config::new() -> bb1; // scope 0 at src/bin/toydb.rs:72:21: 72:42
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:72:21: 72:40
                                         // + literal: Const { ty: fn() -> config::Config {config::Config::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = &mut _2;                    // scope 1 at src/bin/toydb.rs:73:9: 73:10
        _7 = const "id";                 // scope 1 at src/bin/toydb.rs:73:23: 73:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:73:23: 73:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _6 = _7;                         // scope 1 at src/bin/toydb.rs:73:23: 73:27
        _4 = config::Config::set_default::<&str>(move _5, move _6, const "toydb") -> [return: bb2, unwind: bb93]; // scope 1 at src/bin/toydb.rs:73:9: 73:37
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:73:11: 73:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:73:29: 73:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb2: {
        _3 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _4) -> [return: bb3, unwind: bb93]; // scope 1 at src/bin/toydb.rs:73:9: 73:38
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:73:9: 73:38
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = discriminant(_3);           // scope 1 at src/bin/toydb.rs:73:9: 73:38
        switchInt(move _8) -> [0_isize: bb4, 1_isize: bb6, otherwise: bb5]; // scope 1 at src/bin/toydb.rs:73:9: 73:38
    }

    bb4: {
        _11 = move ((_3 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:73:9: 73:38
        _14 = &mut _2;                   // scope 1 at src/bin/toydb.rs:74:9: 74:10
        _16 = const "peers";             // scope 1 at src/bin/toydb.rs:74:23: 74:30
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:74:23: 74:30
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _15 = _16;                       // scope 1 at src/bin/toydb.rs:74:23: 74:30
        _17 = HashMap::<std::string::String, std::string::String>::new() -> [return: bb8, unwind: bb93]; // scope 1 at src/bin/toydb.rs:74:32: 74:64
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:74:32: 74:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> std::collections::HashMap<std::string::String, std::string::String> {std::collections::HashMap::<std::string::String, std::string::String>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:73:9: 73:38
    }

    bb6: {
        _9 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:73:37: 73:38
        _10 = move _9;                   // scope 3 at src/bin/toydb.rs:73:37: 73:38
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _10) -> [return: bb7, unwind: bb91]; // scope 3 at src/bin/toydb.rs:73:9: 73:38
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:73:37: 73:38
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb8: {
        _13 = config::Config::set_default::<HashMap<std::string::String, std::string::String>>(move _14, move _15, move _17) -> [return: bb9, unwind: bb93]; // scope 1 at src/bin/toydb.rs:74:9: 74:65
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:74:11: 74:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, std::collections::HashMap<std::string::String, std::string::String>) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<std::collections::HashMap<std::string::String, std::string::String>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _12 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _13) -> [return: bb10, unwind: bb93]; // scope 1 at src/bin/toydb.rs:74:9: 74:66
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:74:9: 74:66
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _18 = discriminant(_12);         // scope 1 at src/bin/toydb.rs:74:9: 74:66
        switchInt(move _18) -> [0_isize: bb11, 1_isize: bb13, otherwise: bb12]; // scope 1 at src/bin/toydb.rs:74:9: 74:66
    }

    bb11: {
        _21 = move ((_12 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:74:9: 74:66
        _24 = &mut _2;                   // scope 1 at src/bin/toydb.rs:75:9: 75:10
        _26 = const "listen_sql";        // scope 1 at src/bin/toydb.rs:75:23: 75:35
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:75:23: 75:35
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _25 = _26;                       // scope 1 at src/bin/toydb.rs:75:23: 75:35
        _23 = config::Config::set_default::<&str>(move _24, move _25, const "0.0.0.0:9605") -> [return: bb15, unwind: bb93]; // scope 1 at src/bin/toydb.rs:75:9: 75:52
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:75:11: 75:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [48, 46, 48, 46, 48, 46, 48, 58, 57, 54, 48, 53], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:75:37: 75:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [48, 46, 48, 46, 48, 46, 48, 58, 57, 54, 48, 53], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
    }

    bb12: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:74:9: 74:66
    }

    bb13: {
        _19 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:74:65: 74:66
        _20 = move _19;                  // scope 7 at src/bin/toydb.rs:74:65: 74:66
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _20) -> [return: bb14, unwind: bb90]; // scope 7 at src/bin/toydb.rs:74:9: 74:66
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:74:65: 74:66
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb15: {
        _22 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _23) -> [return: bb16, unwind: bb93]; // scope 1 at src/bin/toydb.rs:75:9: 75:53
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:75:9: 75:53
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _27 = discriminant(_22);         // scope 1 at src/bin/toydb.rs:75:9: 75:53
        switchInt(move _27) -> [0_isize: bb17, 1_isize: bb19, otherwise: bb18]; // scope 1 at src/bin/toydb.rs:75:9: 75:53
    }

    bb17: {
        _30 = move ((_22 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:75:9: 75:53
        _33 = &mut _2;                   // scope 1 at src/bin/toydb.rs:76:9: 76:10
        _35 = const "listen_raft";       // scope 1 at src/bin/toydb.rs:76:23: 76:36
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:76:23: 76:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _34 = _35;                       // scope 1 at src/bin/toydb.rs:76:23: 76:36
        _32 = config::Config::set_default::<&str>(move _33, move _34, const "0.0.0.0:9705") -> [return: bb21, unwind: bb93]; // scope 1 at src/bin/toydb.rs:76:9: 76:53
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:76:11: 76:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [48, 46, 48, 46, 48, 46, 48, 58, 57, 55, 48, 53], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:76:38: 76:52
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [48, 46, 48, 46, 48, 46, 48, 58, 57, 55, 48, 53], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
    }

    bb18: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:75:9: 75:53
    }

    bb19: {
        _28 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:75:52: 75:53
        _29 = move _28;                  // scope 11 at src/bin/toydb.rs:75:52: 75:53
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _29) -> [return: bb20, unwind: bb89]; // scope 11 at src/bin/toydb.rs:75:9: 75:53
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:75:52: 75:53
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb21: {
        _31 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _32) -> [return: bb22, unwind: bb93]; // scope 1 at src/bin/toydb.rs:76:9: 76:54
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:76:9: 76:54
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        _36 = discriminant(_31);         // scope 1 at src/bin/toydb.rs:76:9: 76:54
        switchInt(move _36) -> [0_isize: bb23, 1_isize: bb25, otherwise: bb24]; // scope 1 at src/bin/toydb.rs:76:9: 76:54
    }

    bb23: {
        _39 = move ((_31 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:76:9: 76:54
        _42 = &mut _2;                   // scope 1 at src/bin/toydb.rs:77:9: 77:10
        _44 = const "log_level";         // scope 1 at src/bin/toydb.rs:77:23: 77:34
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:77:23: 77:34
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _43 = _44;                       // scope 1 at src/bin/toydb.rs:77:23: 77:34
        _41 = config::Config::set_default::<&str>(move _42, move _43, const "info") -> [return: bb27, unwind: bb93]; // scope 1 at src/bin/toydb.rs:77:9: 77:43
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:77:11: 77:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 110, 102, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:77:36: 77:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 102, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
    }

    bb24: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:76:9: 76:54
    }

    bb25: {
        _37 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:76:53: 76:54
        _38 = move _37;                  // scope 15 at src/bin/toydb.rs:76:53: 76:54
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _38) -> [return: bb26, unwind: bb88]; // scope 15 at src/bin/toydb.rs:76:9: 76:54
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:76:53: 76:54
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb27: {
        _40 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _41) -> [return: bb28, unwind: bb93]; // scope 1 at src/bin/toydb.rs:77:9: 77:44
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:77:9: 77:44
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _45 = discriminant(_40);         // scope 1 at src/bin/toydb.rs:77:9: 77:44
        switchInt(move _45) -> [0_isize: bb29, 1_isize: bb31, otherwise: bb30]; // scope 1 at src/bin/toydb.rs:77:9: 77:44
    }

    bb29: {
        _48 = move ((_40 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:77:9: 77:44
        _51 = &mut _2;                   // scope 1 at src/bin/toydb.rs:78:9: 78:10
        _53 = const "data_dir";          // scope 1 at src/bin/toydb.rs:78:23: 78:33
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:78:23: 78:33
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _52 = _53;                       // scope 1 at src/bin/toydb.rs:78:23: 78:33
        _50 = config::Config::set_default::<&str>(move _51, move _52, const "/var/lib/toydb") -> [return: bb33, unwind: bb93]; // scope 1 at src/bin/toydb.rs:78:9: 78:52
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:78:11: 78:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [47, 118, 97, 114, 47, 108, 105, 98, 47, 116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:78:35: 78:51
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [47, 118, 97, 114, 47, 108, 105, 98, 47, 116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }
    }

    bb30: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:77:9: 77:44
    }

    bb31: {
        _46 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:77:43: 77:44
        _47 = move _46;                  // scope 19 at src/bin/toydb.rs:77:43: 77:44
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _47) -> [return: bb32, unwind: bb87]; // scope 19 at src/bin/toydb.rs:77:9: 77:44
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:77:43: 77:44
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb33: {
        _49 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _50) -> [return: bb34, unwind: bb93]; // scope 1 at src/bin/toydb.rs:78:9: 78:53
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:78:9: 78:53
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _54 = discriminant(_49);         // scope 1 at src/bin/toydb.rs:78:9: 78:53
        switchInt(move _54) -> [0_isize: bb35, 1_isize: bb37, otherwise: bb36]; // scope 1 at src/bin/toydb.rs:78:9: 78:53
    }

    bb35: {
        _57 = move ((_49 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:78:9: 78:53
        _60 = &mut _2;                   // scope 1 at src/bin/toydb.rs:79:9: 79:10
        _62 = const "sync";              // scope 1 at src/bin/toydb.rs:79:23: 79:29
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:79:23: 79:29
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _61 = _62;                       // scope 1 at src/bin/toydb.rs:79:23: 79:29
        _59 = config::Config::set_default::<bool>(move _60, move _61, const true) -> [return: bb39, unwind: bb93]; // scope 1 at src/bin/toydb.rs:79:9: 79:36
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:79:11: 79:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, bool) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<bool>}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:78:9: 78:53
    }

    bb37: {
        _55 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:78:52: 78:53
        _56 = move _55;                  // scope 23 at src/bin/toydb.rs:78:52: 78:53
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _56) -> [return: bb38, unwind: bb86]; // scope 23 at src/bin/toydb.rs:78:9: 78:53
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:78:52: 78:53
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb39: {
        _58 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _59) -> [return: bb40, unwind: bb93]; // scope 1 at src/bin/toydb.rs:79:9: 79:37
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:79:9: 79:37
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        _63 = discriminant(_58);         // scope 1 at src/bin/toydb.rs:79:9: 79:37
        switchInt(move _63) -> [0_isize: bb41, 1_isize: bb43, otherwise: bb42]; // scope 1 at src/bin/toydb.rs:79:9: 79:37
    }

    bb41: {
        _66 = move ((_58 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:79:9: 79:37
        _69 = &mut _2;                   // scope 1 at src/bin/toydb.rs:80:9: 80:10
        _71 = const "storage_raft";      // scope 1 at src/bin/toydb.rs:80:23: 80:37
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:80:23: 80:37
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        _70 = _71;                       // scope 1 at src/bin/toydb.rs:80:23: 80:37
        _68 = config::Config::set_default::<&str>(move _69, move _70, const "hybrid") -> [return: bb45, unwind: bb93]; // scope 1 at src/bin/toydb.rs:80:9: 80:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:80:11: 80:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:80:39: 80:47
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb42: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:79:9: 79:37
    }

    bb43: {
        _64 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:79:36: 79:37
        _65 = move _64;                  // scope 27 at src/bin/toydb.rs:79:36: 79:37
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _65) -> [return: bb44, unwind: bb85]; // scope 27 at src/bin/toydb.rs:79:9: 79:37
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:79:36: 79:37
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb44: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb45: {
        _67 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _68) -> [return: bb46, unwind: bb93]; // scope 1 at src/bin/toydb.rs:80:9: 80:49
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:80:9: 80:49
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        _72 = discriminant(_67);         // scope 1 at src/bin/toydb.rs:80:9: 80:49
        switchInt(move _72) -> [0_isize: bb47, 1_isize: bb49, otherwise: bb48]; // scope 1 at src/bin/toydb.rs:80:9: 80:49
    }

    bb47: {
        _75 = move ((_67 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:80:9: 80:49
        _78 = &mut _2;                   // scope 1 at src/bin/toydb.rs:81:9: 81:10
        _80 = const "storage_sql";       // scope 1 at src/bin/toydb.rs:81:23: 81:36
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:81:23: 81:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _79 = _80;                       // scope 1 at src/bin/toydb.rs:81:23: 81:36
        _77 = config::Config::set_default::<&str>(move _78, move _79, const "memory") -> [return: bb51, unwind: bb93]; // scope 1 at src/bin/toydb.rs:81:9: 81:47
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:81:11: 81:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut config::Config, &'s str, &str) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::set_default::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:81:38: 81:46
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb48: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:80:9: 80:49
    }

    bb49: {
        _73 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:80:48: 80:49
        _74 = move _73;                  // scope 31 at src/bin/toydb.rs:80:48: 80:49
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _74) -> [return: bb50, unwind: bb84]; // scope 31 at src/bin/toydb.rs:80:9: 80:49
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:80:48: 80:49
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb51: {
        _76 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _77) -> [return: bb52, unwind: bb93]; // scope 1 at src/bin/toydb.rs:81:9: 81:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:81:9: 81:48
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        _81 = discriminant(_76);         // scope 1 at src/bin/toydb.rs:81:9: 81:48
        switchInt(move _81) -> [0_isize: bb53, 1_isize: bb55, otherwise: bb54]; // scope 1 at src/bin/toydb.rs:81:9: 81:48
    }

    bb53: {
        _84 = move ((_76 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:81:9: 81:48
        _87 = &mut _2;                   // scope 1 at src/bin/toydb.rs:83:9: 83:10
        _89 = _1;                        // scope 1 at src/bin/toydb.rs:83:41: 83:45
        _88 = config::File::<FileSourceFile>::with_name(move _89) -> [return: bb57, unwind: bb93]; // scope 1 at src/bin/toydb.rs:83:17: 83:46
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:83:17: 83:40
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> config::File<config::FileSourceFile> {config::File::<config::FileSourceFile>::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb54: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:81:9: 81:48
    }

    bb55: {
        _82 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:81:47: 81:48
        _83 = move _82;                  // scope 35 at src/bin/toydb.rs:81:47: 81:48
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _83) -> [return: bb56, unwind: bb83]; // scope 35 at src/bin/toydb.rs:81:9: 81:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:81:47: 81:48
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb56: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb57: {
        _86 = config::Config::merge::<config::File<FileSourceFile>>(move _87, move _88) -> [return: bb58, unwind: bb93]; // scope 1 at src/bin/toydb.rs:83:9: 83:47
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:83:11: 83:16
                                         // + literal: Const { ty: for<'r> fn(&'r mut config::Config, config::File<config::FileSourceFile>) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::merge::<config::File<config::FileSourceFile>>}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        _85 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _86) -> [return: bb59, unwind: bb93]; // scope 1 at src/bin/toydb.rs:83:9: 83:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:83:9: 83:48
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb59: {
        _90 = discriminant(_85);         // scope 1 at src/bin/toydb.rs:83:9: 83:48
        switchInt(move _90) -> [0_isize: bb60, 1_isize: bb62, otherwise: bb61]; // scope 1 at src/bin/toydb.rs:83:9: 83:48
    }

    bb60: {
        _93 = move ((_85 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:83:9: 83:48
        _96 = &mut _2;                   // scope 1 at src/bin/toydb.rs:84:9: 84:10
        _99 = const "TOYDB";             // scope 1 at src/bin/toydb.rs:84:50: 84:57
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [84, 79, 89, 68, 66], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:84:50: 84:57
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [84, 79, 89, 68, 66], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _98 = _99;                       // scope 1 at src/bin/toydb.rs:84:50: 84:57
        _97 = Environment::with_prefix(move _98) -> [return: bb64, unwind: bb93]; // scope 1 at src/bin/toydb.rs:84:17: 84:58
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:84:17: 84:49
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> config::Environment {config::Environment::with_prefix}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:83:9: 83:48
    }

    bb62: {
        _91 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:83:47: 83:48
        _92 = move _91;                  // scope 39 at src/bin/toydb.rs:83:47: 83:48
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _92) -> [return: bb63, unwind: bb82]; // scope 39 at src/bin/toydb.rs:83:9: 83:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:83:47: 83:48
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb63: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb64: {
        _95 = config::Config::merge::<Environment>(move _96, move _97) -> [return: bb65, unwind: bb93]; // scope 1 at src/bin/toydb.rs:84:9: 84:59
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:84:11: 84:16
                                         // + literal: Const { ty: for<'r> fn(&'r mut config::Config, config::Environment) -> std::result::Result<&'r mut config::Config, config::ConfigError> {config::Config::merge::<config::Environment>}, val: Value(Scalar(<ZST>)) }
    }

    bb65: {
        _94 = <Result<&mut config::Config, ConfigError> as Try>::branch(move _95) -> [return: bb66, unwind: bb93]; // scope 1 at src/bin/toydb.rs:84:9: 84:60
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:84:9: 84:60
                                         // + literal: Const { ty: fn(std::result::Result<&mut config::Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<&mut config::Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb66: {
        _100 = discriminant(_94);        // scope 1 at src/bin/toydb.rs:84:9: 84:60
        switchInt(move _100) -> [0_isize: bb67, 1_isize: bb69, otherwise: bb68]; // scope 1 at src/bin/toydb.rs:84:9: 84:60
    }

    bb67: {
        _103 = move ((_94 as Continue).0: &mut config::Config); // scope 1 at src/bin/toydb.rs:84:9: 84:60
        _112 = const false;              // scope 1 at src/bin/toydb.rs:85:12: 85:13
        _107 = move _2;                  // scope 1 at src/bin/toydb.rs:85:12: 85:13
        _106 = config::Config::try_into::<Config>(move _107) -> [return: bb71, unwind: bb93]; // scope 1 at src/bin/toydb.rs:85:12: 85:24
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:85:14: 85:22
                                         // + literal: Const { ty: fn(config::Config) -> std::result::Result<Config, config::ConfigError> {config::Config::try_into::<Config>}, val: Value(Scalar(<ZST>)) }
    }

    bb68: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:84:9: 84:60
    }

    bb69: {
        _101 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:84:59: 84:60
        _102 = move _101;                // scope 43 at src/bin/toydb.rs:84:59: 84:60
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _102) -> [return: bb70, unwind: bb81]; // scope 43 at src/bin/toydb.rs:84:9: 84:60
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:84:59: 84:60
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb70: {
        goto -> bb77;                    // scope 1 at no-location
    }

    bb71: {
        _105 = <Result<Config, ConfigError> as Try>::branch(move _106) -> [return: bb72, unwind: bb93]; // scope 1 at src/bin/toydb.rs:85:12: 85:25
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:85:12: 85:25
                                         // + literal: Const { ty: fn(std::result::Result<Config, config::ConfigError>) -> std::ops::ControlFlow<<std::result::Result<Config, config::ConfigError> as std::ops::Try>::Residual, <std::result::Result<Config, config::ConfigError> as std::ops::Try>::Output> {<std::result::Result<Config, config::ConfigError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb72: {
        _108 = discriminant(_105);       // scope 1 at src/bin/toydb.rs:85:12: 85:25
        switchInt(move _108) -> [0_isize: bb73, 1_isize: bb75, otherwise: bb74]; // scope 1 at src/bin/toydb.rs:85:12: 85:25
    }

    bb73: {
        _111 = move ((_105 as Continue).0: Config); // scope 1 at src/bin/toydb.rs:85:12: 85:25
        _104 = move _111;                // scope 49 at src/bin/toydb.rs:85:12: 85:25
        ((_0 as Ok).0: Config) = move _104; // scope 1 at src/bin/toydb.rs:85:9: 85:26
        discriminant(_0) = 0;            // scope 1 at src/bin/toydb.rs:85:9: 85:26
        _112 = const false;              // scope 0 at src/bin/toydb.rs:86:5: 86:6
        goto -> bb79;                    // scope 0 at src/bin/toydb.rs:86:6: 86:6
    }

    bb74: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:85:12: 85:25
    }

    bb75: {
        _109 = move ((_105 as Break).0: std::result::Result<std::convert::Infallible, config::ConfigError>); // scope 1 at src/bin/toydb.rs:85:24: 85:25
        _110 = move _109;                // scope 47 at src/bin/toydb.rs:85:24: 85:25
        _0 = <Result<Config, toydb::error::Error> as FromResidual<Result<Infallible, ConfigError>>>::from_residual(move _110) -> bb76; // scope 47 at src/bin/toydb.rs:85:12: 85:25
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:85:24: 85:25
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, config::ConfigError>) -> std::result::Result<Config, toydb::error::Error> {<std::result::Result<Config, toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, config::ConfigError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb76: {
        _112 = const false;              // scope 0 at src/bin/toydb.rs:86:5: 86:6
        goto -> bb79;                    // scope 0 at no-location
    }

    bb77: {
        drop(_2) -> bb78;                // scope 0 at src/bin/toydb.rs:86:5: 86:6
    }

    bb78: {
        _112 = const false;              // scope 0 at src/bin/toydb.rs:86:5: 86:6
        goto -> bb79;                    // scope 0 at no-location
    }

    bb79: {
        return;                          // scope 0 at src/bin/toydb.rs:86:6: 86:6
    }

    bb80 (cleanup): {
        resume;                          // scope 0 at src/bin/toydb.rs:71:5: 86:6
    }

    bb81 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:84:60: 84:61
    }

    bb82 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:83:48: 83:49
    }

    bb83 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:81:48: 81:49
    }

    bb84 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:80:49: 80:50
    }

    bb85 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:79:37: 79:38
    }

    bb86 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:78:53: 78:54
    }

    bb87 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:77:44: 77:45
    }

    bb88 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:76:54: 76:55
    }

    bb89 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:75:53: 75:54
    }

    bb90 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:74:66: 74:67
    }

    bb91 (cleanup): {
        goto -> bb93;                    // scope 1 at src/bin/toydb.rs:73:38: 73:39
    }

    bb92 (cleanup): {
        drop(_2) -> bb80;                // scope 0 at src/bin/toydb.rs:86:5: 86:6
    }

    bb93 (cleanup): {
        switchInt(_112) -> [false: bb80, otherwise: bb92]; // scope 0 at src/bin/toydb.rs:86:5: 86:6
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize(_1: __D) -> Result<Config, <__D as Deserializer>::Error> {
    debug __deserializer => _1;          // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<Config, <__D as _::_serde::Deserializer>::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _2: __D;                     // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Visitor; // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _2 = move _1;                    // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _0 = <__D as Deserializer>::deserialize_struct::<__Visitor>(move _2, const "Config", const FIELDS, move _3) -> bb1; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Visitor) -> std::result::Result<<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Visitor as _::_serde::de::Visitor>::Value, <__D as _::_serde::Deserializer>::Error> {<__D as _::_serde::Deserializer>::deserialize_struct::<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Visitor>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
                                         // ty::Const
                                         // + ty: &[&str]
                                         // + val: Unevaluated(FIELDS, [], None)
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &[&str], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:110 ~ toydb[e000]::_::{impl#0}::deserialize::FIELDS), const_param_did: None }, substs_: Some([]), promoted: None }) }
    }

    bb1: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_u64(_1: __FieldVisitor, _2: u64) -> Result<__Field, __E> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __value => _2;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field, __E>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _5: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _6: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _7: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _8: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _9: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _10: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _11: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _12: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        switchInt(_2) -> [0_u64: bb2, 1_u64: bb3, 2_u64: bb4, 3_u64: bb5, 4_u64: bb6, 5_u64: bb7, 6_u64: bb8, 7_u64: bb9, 8_u64: bb10, otherwise: bb1]; // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb1: {
        discriminant(_12) = 9;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _12; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb2: {
        discriminant(_3) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _3; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb3: {
        discriminant(_4) = 1;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _4; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb4: {
        discriminant(_5) = 2;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _5; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb5: {
        discriminant(_6) = 3;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _6; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb6: {
        discriminant(_7) = 4;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _7; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb7: {
        discriminant(_8) = 5;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _8; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb8: {
        discriminant(_9) = 6;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _9; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb9: {
        discriminant(_10) = 7;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _10; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb10: {
        discriminant(_11) = 8;           // scope 0 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field) = move _11; // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb11;                    // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb11: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}

fn <impl at src/bin/toydb.rs:57:10: 57:15>::fmt(_1: &Config, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    debug f => _2;                       // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let _3: &std::string::String;        // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let _4: &std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let _5: &std::string::String;        // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let _6: &std::string::String;        // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let _7: &std::string::String;        // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let _8: &std::string::String;        // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let _9: &bool;                       // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let _10: &std::string::String;       // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let _11: &std::string::String;       // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let mut _13: std::fmt::DebugStruct;  // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _14: &mut std::fmt::Formatter; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _15: &str;                   // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let _16: &str;                       // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _17: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _18: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _19: &str;                   // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let _20: &str;                       // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let mut _22: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let _23: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let _24: &std::string::String;       // in scope 0 at src/bin/toydb.rs:59:5: 59:15
    let mut _25: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _26: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _27: &str;                   // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let _28: &str;                       // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let mut _29: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let mut _30: &&std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let _31: &&std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let _32: &std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:60:5: 60:35
    let mut _33: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _34: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _35: &str;                   // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let _36: &str;                       // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let mut _37: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let mut _38: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let _39: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let _40: &std::string::String;       // in scope 0 at src/bin/toydb.rs:61:5: 61:23
    let mut _41: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _42: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _43: &str;                   // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let _44: &str;                       // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let mut _45: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let mut _46: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let _47: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let _48: &std::string::String;       // in scope 0 at src/bin/toydb.rs:62:5: 62:24
    let mut _49: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _50: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _51: &str;                   // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let _52: &str;                       // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let mut _53: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let mut _54: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let _55: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let _56: &std::string::String;       // in scope 0 at src/bin/toydb.rs:63:5: 63:22
    let mut _57: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _58: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _59: &str;                   // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let _60: &str;                       // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let mut _61: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let mut _62: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let _63: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let _64: &std::string::String;       // in scope 0 at src/bin/toydb.rs:64:5: 64:21
    let mut _65: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _66: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _67: &str;                   // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let _68: &str;                       // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let mut _69: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let mut _70: &&bool;                 // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let _71: &&bool;                     // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let _72: &bool;                      // in scope 0 at src/bin/toydb.rs:65:5: 65:15
    let mut _73: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _74: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _75: &str;                   // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let _76: &str;                       // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let mut _77: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let mut _78: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let _79: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let _80: &std::string::String;       // in scope 0 at src/bin/toydb.rs:66:5: 66:25
    let mut _81: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _82: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    let mut _83: &str;                   // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let _84: &str;                       // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let mut _85: &dyn std::fmt::Debug;   // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let mut _86: &&std::string::String;  // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let _87: &&std::string::String;      // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let _88: &std::string::String;       // in scope 0 at src/bin/toydb.rs:67:5: 67:24
    let mut _89: &mut std::fmt::DebugStruct; // in scope 0 at src/bin/toydb.rs:57:10: 57:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at src/bin/toydb.rs:59:5: 59:15
        debug __self_0_1 => _4;          // in scope 1 at src/bin/toydb.rs:60:5: 60:35
        debug __self_0_2 => _5;          // in scope 1 at src/bin/toydb.rs:61:5: 61:23
        debug __self_0_3 => _6;          // in scope 1 at src/bin/toydb.rs:62:5: 62:24
        debug __self_0_4 => _7;          // in scope 1 at src/bin/toydb.rs:63:5: 63:22
        debug __self_0_5 => _8;          // in scope 1 at src/bin/toydb.rs:64:5: 64:21
        debug __self_0_6 => _9;          // in scope 1 at src/bin/toydb.rs:65:5: 65:15
        debug __self_0_7 => _10;         // in scope 1 at src/bin/toydb.rs:66:5: 66:25
        debug __self_0_8 => _11;         // in scope 1 at src/bin/toydb.rs:67:5: 67:24
        let _12: &mut std::fmt::DebugStruct; // in scope 1 at no-location
        scope 2 {
            debug debug_trait_builder => _12; // in scope 2 at no-location
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: std::string::String); // scope 0 at src/bin/toydb.rs:59:5: 59:15
        _4 = &((*_1).1: std::collections::HashMap<std::string::String, std::string::String>); // scope 0 at src/bin/toydb.rs:60:5: 60:35
        _5 = &((*_1).2: std::string::String); // scope 0 at src/bin/toydb.rs:61:5: 61:23
        _6 = &((*_1).3: std::string::String); // scope 0 at src/bin/toydb.rs:62:5: 62:24
        _7 = &((*_1).4: std::string::String); // scope 0 at src/bin/toydb.rs:63:5: 63:22
        _8 = &((*_1).5: std::string::String); // scope 0 at src/bin/toydb.rs:64:5: 64:21
        _9 = &((*_1).6: bool);           // scope 0 at src/bin/toydb.rs:65:5: 65:15
        _10 = &((*_1).7: std::string::String); // scope 0 at src/bin/toydb.rs:66:5: 66:25
        _11 = &((*_1).8: std::string::String); // scope 0 at src/bin/toydb.rs:67:5: 67:24
        _14 = &mut (*_2);                // scope 1 at src/bin/toydb.rs:57:10: 57:15
        _16 = const "Config";            // scope 1 at src/bin/toydb.rs:57:10: 57:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _15 = _16;                       // scope 1 at src/bin/toydb.rs:57:10: 57:15
        _13 = Formatter::debug_struct(move _14, move _15) -> bb1; // scope 1 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut std::fmt::Formatter, &'r str) -> std::fmt::DebugStruct<'b, '_> {std::fmt::Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _12 = &mut _13;                  // scope 1 at src/bin/toydb.rs:57:10: 57:15
        _18 = &mut (*_12);               // scope 2 at src/bin/toydb.rs:57:10: 57:15
        _20 = const "id";                // scope 2 at src/bin/toydb.rs:59:5: 59:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:59:5: 59:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _19 = _20;                       // scope 2 at src/bin/toydb.rs:59:5: 59:15
        _24 = _3;                        // scope 2 at src/bin/toydb.rs:59:5: 59:15
        _23 = &_24;                      // scope 2 at src/bin/toydb.rs:59:5: 59:15
        _22 = _23;                       // scope 2 at src/bin/toydb.rs:59:5: 59:15
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at src/bin/toydb.rs:59:5: 59:15
        _17 = DebugStruct::field(move _18, move _19, move _21) -> bb2; // scope 2 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _26 = &mut (*_12);               // scope 3 at src/bin/toydb.rs:57:10: 57:15
        _28 = const "peers";             // scope 3 at src/bin/toydb.rs:60:5: 60:35
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:60:5: 60:35
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
        _27 = _28;                       // scope 3 at src/bin/toydb.rs:60:5: 60:35
        _32 = _4;                        // scope 3 at src/bin/toydb.rs:60:5: 60:35
        _31 = &_32;                      // scope 3 at src/bin/toydb.rs:60:5: 60:35
        _30 = _31;                       // scope 3 at src/bin/toydb.rs:60:5: 60:35
        _29 = move _30 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at src/bin/toydb.rs:60:5: 60:35
        _25 = DebugStruct::field(move _26, move _27, move _29) -> bb3; // scope 3 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _34 = &mut (*_12);               // scope 4 at src/bin/toydb.rs:57:10: 57:15
        _36 = const "listen_sql";        // scope 4 at src/bin/toydb.rs:61:5: 61:23
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:61:5: 61:23
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
        _35 = _36;                       // scope 4 at src/bin/toydb.rs:61:5: 61:23
        _40 = _5;                        // scope 4 at src/bin/toydb.rs:61:5: 61:23
        _39 = &_40;                      // scope 4 at src/bin/toydb.rs:61:5: 61:23
        _38 = _39;                       // scope 4 at src/bin/toydb.rs:61:5: 61:23
        _37 = move _38 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at src/bin/toydb.rs:61:5: 61:23
        _33 = DebugStruct::field(move _34, move _35, move _37) -> bb4; // scope 4 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _42 = &mut (*_12);               // scope 5 at src/bin/toydb.rs:57:10: 57:15
        _44 = const "listen_raft";       // scope 5 at src/bin/toydb.rs:62:5: 62:24
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:62:5: 62:24
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _43 = _44;                       // scope 5 at src/bin/toydb.rs:62:5: 62:24
        _48 = _6;                        // scope 5 at src/bin/toydb.rs:62:5: 62:24
        _47 = &_48;                      // scope 5 at src/bin/toydb.rs:62:5: 62:24
        _46 = _47;                       // scope 5 at src/bin/toydb.rs:62:5: 62:24
        _45 = move _46 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 5 at src/bin/toydb.rs:62:5: 62:24
        _41 = DebugStruct::field(move _42, move _43, move _45) -> bb5; // scope 5 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _50 = &mut (*_12);               // scope 6 at src/bin/toydb.rs:57:10: 57:15
        _52 = const "log_level";         // scope 6 at src/bin/toydb.rs:63:5: 63:22
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:63:5: 63:22
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _51 = _52;                       // scope 6 at src/bin/toydb.rs:63:5: 63:22
        _56 = _7;                        // scope 6 at src/bin/toydb.rs:63:5: 63:22
        _55 = &_56;                      // scope 6 at src/bin/toydb.rs:63:5: 63:22
        _54 = _55;                       // scope 6 at src/bin/toydb.rs:63:5: 63:22
        _53 = move _54 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 6 at src/bin/toydb.rs:63:5: 63:22
        _49 = DebugStruct::field(move _50, move _51, move _53) -> bb6; // scope 6 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _58 = &mut (*_12);               // scope 7 at src/bin/toydb.rs:57:10: 57:15
        _60 = const "data_dir";          // scope 7 at src/bin/toydb.rs:64:5: 64:21
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:64:5: 64:21
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
        _59 = _60;                       // scope 7 at src/bin/toydb.rs:64:5: 64:21
        _64 = _8;                        // scope 7 at src/bin/toydb.rs:64:5: 64:21
        _63 = &_64;                      // scope 7 at src/bin/toydb.rs:64:5: 64:21
        _62 = _63;                       // scope 7 at src/bin/toydb.rs:64:5: 64:21
        _61 = move _62 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 7 at src/bin/toydb.rs:64:5: 64:21
        _57 = DebugStruct::field(move _58, move _59, move _61) -> bb7; // scope 7 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _66 = &mut (*_12);               // scope 8 at src/bin/toydb.rs:57:10: 57:15
        _68 = const "sync";              // scope 8 at src/bin/toydb.rs:65:5: 65:15
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:65:5: 65:15
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _67 = _68;                       // scope 8 at src/bin/toydb.rs:65:5: 65:15
        _72 = _9;                        // scope 8 at src/bin/toydb.rs:65:5: 65:15
        _71 = &_72;                      // scope 8 at src/bin/toydb.rs:65:5: 65:15
        _70 = _71;                       // scope 8 at src/bin/toydb.rs:65:5: 65:15
        _69 = move _70 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 8 at src/bin/toydb.rs:65:5: 65:15
        _65 = DebugStruct::field(move _66, move _67, move _69) -> bb8; // scope 8 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _74 = &mut (*_12);               // scope 9 at src/bin/toydb.rs:57:10: 57:15
        _76 = const "storage_raft";      // scope 9 at src/bin/toydb.rs:66:5: 66:25
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:66:5: 66:25
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        _75 = _76;                       // scope 9 at src/bin/toydb.rs:66:5: 66:25
        _80 = _10;                       // scope 9 at src/bin/toydb.rs:66:5: 66:25
        _79 = &_80;                      // scope 9 at src/bin/toydb.rs:66:5: 66:25
        _78 = _79;                       // scope 9 at src/bin/toydb.rs:66:5: 66:25
        _77 = move _78 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 9 at src/bin/toydb.rs:66:5: 66:25
        _73 = DebugStruct::field(move _74, move _75, move _77) -> bb9; // scope 9 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _82 = &mut (*_12);               // scope 10 at src/bin/toydb.rs:57:10: 57:15
        _84 = const "storage_sql";       // scope 10 at src/bin/toydb.rs:67:5: 67:24
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:67:5: 67:24
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
        _83 = _84;                       // scope 10 at src/bin/toydb.rs:67:5: 67:24
        _88 = _11;                       // scope 10 at src/bin/toydb.rs:67:5: 67:24
        _87 = &_88;                      // scope 10 at src/bin/toydb.rs:67:5: 67:24
        _86 = _87;                       // scope 10 at src/bin/toydb.rs:67:5: 67:24
        _85 = move _86 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 10 at src/bin/toydb.rs:67:5: 67:24
        _81 = DebugStruct::field(move _82, move _83, move _85) -> bb10; // scope 10 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::DebugStruct, &'s str, &'t0 (dyn std::fmt::Debug + 't0)) -> &'r mut std::fmt::DebugStruct {std::fmt::DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _89 = &mut (*_12);               // scope 11 at src/bin/toydb.rs:57:10: 57:15
        _0 = DebugStruct::finish(move _89) -> bb11; // scope 11 at src/bin/toydb.rs:57:10: 57:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:10: 57:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::fmt::DebugStruct) -> std::result::Result<(), std::fmt::Error> {std::fmt::DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        return;                          // scope 0 at src/bin/toydb.rs:57:15: 57:15
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::visit_map(_1: __Visitor, _2: __A) -> Result<Config, <__A as MapAccess>::Error> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __map => _2;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<Config, <__A as _::_serde::de::MapAccess>::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _12: std::option::Option<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _13: std::result::Result<std::option::Option<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _14: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _15: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _16: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _19: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _20: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _22: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _23: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _24: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _25: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _26: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _27: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _28: std::string::String;    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _29: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _30: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _31: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _32: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _35: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _36: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _37: &std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _38: &std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _39: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _40: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _41: std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _42: std::result::Result<std::collections::HashMap<std::string::String, std::string::String>, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _43: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _44: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _45: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _48: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _49: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _50: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _51: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _52: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _53: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _54: std::string::String;    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _55: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _56: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _57: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _58: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _61: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _62: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _63: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _64: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _65: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _66: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _67: std::string::String;    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _68: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _69: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _70: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _71: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _74: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _75: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _76: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _77: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _78: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _79: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _80: std::string::String;    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _81: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _82: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _83: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _84: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _87: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _88: bool;                   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _89: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _90: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _91: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _92: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _93: std::string::String;    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _94: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _95: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _96: &mut __A;               // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _97: isize;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _100: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _101: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _102: &std::option::Option<bool>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _103: &std::option::Option<bool>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _104: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _105: std::option::Option<bool>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _106: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _107: std::result::Result<bool, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _108: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _109: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _110: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _113: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _114: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _115: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _116: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _117: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _118: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _119: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _120: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _121: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _122: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _123: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _126: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _127: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _128: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _129: &std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _130: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _131: std::option::Option<std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _132: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _133: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _134: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _135: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _136: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _139: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _140: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _141: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _142: &mut __A;              // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _143: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _146: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _148: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _150: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _151: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _154: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _156: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _158: std::result::Result<std::collections::HashMap<std::string::String, std::string::String>, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _159: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _162: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _164: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _166: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _167: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _170: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _172: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _174: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _175: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _178: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _180: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _182: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _183: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _186: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _188: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _190: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _191: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _194: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _196: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _198: std::result::Result<bool, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _199: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _202: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _204: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _206: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _207: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _210: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _212: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _214: std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _215: isize;                 // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _218: <__A as _::_serde::de::MapAccess>::Error; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _219: Config;                // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _220: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _221: std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _222: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _223: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _224: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _225: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _226: bool;                  // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _227: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _228: std::string::String;   // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _229: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _230: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _231: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _232: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _233: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _234: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _235: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _236: bool;                  // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _237: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _238: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _239: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _240: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _241: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _242: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _243: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _244: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _245: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _246: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _247: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _248: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _249: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _250: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _251: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    let mut _252: isize;                 // in scope 0 at src/bin/toydb.rs:57:27: 57:28
    scope 1 {
        debug __field0 => _3;            // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        let mut _4: std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>; // in scope 1 at src/bin/toydb.rs:57:17: 57:28
        scope 2 {
            debug __field1 => _4;        // in scope 2 at src/bin/toydb.rs:57:17: 57:28
            let mut _5: std::option::Option<std::string::String>; // in scope 2 at src/bin/toydb.rs:57:17: 57:28
            scope 3 {
                debug __field2 => _5;    // in scope 3 at src/bin/toydb.rs:57:17: 57:28
                let mut _6: std::option::Option<std::string::String>; // in scope 3 at src/bin/toydb.rs:57:17: 57:28
                scope 4 {
                    debug __field3 => _6; // in scope 4 at src/bin/toydb.rs:57:17: 57:28
                    let mut _7: std::option::Option<std::string::String>; // in scope 4 at src/bin/toydb.rs:57:17: 57:28
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
                        let mut _8: std::option::Option<std::string::String>; // in scope 5 at src/bin/toydb.rs:57:17: 57:28
                        scope 6 {
                            debug __field5 => _8; // in scope 6 at src/bin/toydb.rs:57:17: 57:28
                            let mut _9: std::option::Option<bool>; // in scope 6 at src/bin/toydb.rs:57:17: 57:28
                            scope 7 {
                                debug __field6 => _9; // in scope 7 at src/bin/toydb.rs:57:17: 57:28
                                let mut _10: std::option::Option<std::string::String>; // in scope 7 at src/bin/toydb.rs:57:17: 57:28
                                scope 8 {
                                    debug __field7 => _10; // in scope 8 at src/bin/toydb.rs:57:17: 57:28
                                    let mut _11: std::option::Option<std::string::String>; // in scope 8 at src/bin/toydb.rs:57:17: 57:28
                                    scope 9 {
                                        debug __field8 => _11; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _17: std::option::Option<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _18: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _21: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _33: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _34: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _46: std::collections::HashMap<std::string::String, std::string::String>; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _47: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _59: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _60: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _72: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _73: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _85: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _86: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _98: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _99: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _111: bool; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _112: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _124: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _125: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _137: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _138: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _144: _::_serde::de::IgnoredAny; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _145: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _147: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _149: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _152: std::string::String; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        let _153: <__A as _::_serde::de::MapAccess>::Error; // in scope 9 at src/bin/toydb.rs:57:17: 57:28
                                        scope 10 {
                                            debug __val => _17; // in scope 10 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 11 {
                                            debug __err => _18; // in scope 11 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 12 {
                                            debug __key => _21; // in scope 12 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 13 {
                                            debug __val => _33; // in scope 13 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 14 {
                                            debug __err => _34; // in scope 14 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 15 {
                                            debug __val => _46; // in scope 15 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 16 {
                                            debug __err => _47; // in scope 16 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 17 {
                                            debug __val => _59; // in scope 17 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 18 {
                                            debug __err => _60; // in scope 18 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 19 {
                                            debug __val => _72; // in scope 19 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 20 {
                                            debug __err => _73; // in scope 20 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 21 {
                                            debug __val => _85; // in scope 21 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 22 {
                                            debug __err => _86; // in scope 22 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 23 {
                                            debug __val => _98; // in scope 23 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 24 {
                                            debug __err => _99; // in scope 24 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 25 {
                                            debug __val => _111; // in scope 25 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 26 {
                                            debug __err => _112; // in scope 26 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 27 {
                                            debug __val => _124; // in scope 27 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 28 {
                                            debug __err => _125; // in scope 28 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 29 {
                                            debug __val => _137; // in scope 29 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 30 {
                                            debug __err => _138; // in scope 30 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 31 {
                                        }
                                        scope 32 {
                                            debug __val => _144; // in scope 32 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 33 {
                                            debug __err => _145; // in scope 33 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 34 {
                                            debug __field0 => _147; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                            let _155: std::collections::HashMap<std::string::String, std::string::String>; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                            let _157: std::collections::HashMap<std::string::String, std::string::String>; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                            let _160: std::collections::HashMap<std::string::String, std::string::String>; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                            let _161: <__A as _::_serde::de::MapAccess>::Error; // in scope 34 at src/bin/toydb.rs:57:17: 57:28
                                            scope 38 {
                                                debug __field1 => _155; // in scope 38 at src/bin/toydb.rs:57:17: 57:28
                                                let _163: std::string::String; // in scope 38 at src/bin/toydb.rs:57:17: 57:28
                                                let _165: std::string::String; // in scope 38 at src/bin/toydb.rs:57:17: 57:28
                                                let _168: std::string::String; // in scope 38 at src/bin/toydb.rs:57:17: 57:28
                                                let _169: <__A as _::_serde::de::MapAccess>::Error; // in scope 38 at src/bin/toydb.rs:57:17: 57:28
                                                scope 42 {
                                                    debug __field2 => _163; // in scope 42 at src/bin/toydb.rs:57:17: 57:28
                                                    let _171: std::string::String; // in scope 42 at src/bin/toydb.rs:57:17: 57:28
                                                    let _173: std::string::String; // in scope 42 at src/bin/toydb.rs:57:17: 57:28
                                                    let _176: std::string::String; // in scope 42 at src/bin/toydb.rs:57:17: 57:28
                                                    let _177: <__A as _::_serde::de::MapAccess>::Error; // in scope 42 at src/bin/toydb.rs:57:17: 57:28
                                                    scope 46 {
                                                        debug __field3 => _171; // in scope 46 at src/bin/toydb.rs:57:17: 57:28
                                                        let _179: std::string::String; // in scope 46 at src/bin/toydb.rs:57:17: 57:28
                                                        let _181: std::string::String; // in scope 46 at src/bin/toydb.rs:57:17: 57:28
                                                        let _184: std::string::String; // in scope 46 at src/bin/toydb.rs:57:17: 57:28
                                                        let _185: <__A as _::_serde::de::MapAccess>::Error; // in scope 46 at src/bin/toydb.rs:57:17: 57:28
                                                        scope 50 {
                                                            debug __field4 => _179; // in scope 50 at src/bin/toydb.rs:57:17: 57:28
                                                            let _187: std::string::String; // in scope 50 at src/bin/toydb.rs:57:17: 57:28
                                                            let _189: std::string::String; // in scope 50 at src/bin/toydb.rs:57:17: 57:28
                                                            let _192: std::string::String; // in scope 50 at src/bin/toydb.rs:57:17: 57:28
                                                            let _193: <__A as _::_serde::de::MapAccess>::Error; // in scope 50 at src/bin/toydb.rs:57:17: 57:28
                                                            scope 54 {
                                                                debug __field5 => _187; // in scope 54 at src/bin/toydb.rs:57:17: 57:28
                                                                let _195: bool; // in scope 54 at src/bin/toydb.rs:57:17: 57:28
                                                                let _197: bool; // in scope 54 at src/bin/toydb.rs:57:17: 57:28
                                                                let _200: bool; // in scope 54 at src/bin/toydb.rs:57:17: 57:28
                                                                let _201: <__A as _::_serde::de::MapAccess>::Error; // in scope 54 at src/bin/toydb.rs:57:17: 57:28
                                                                scope 58 {
                                                                    debug __field6 => _195; // in scope 58 at src/bin/toydb.rs:57:17: 57:28
                                                                    let _203: std::string::String; // in scope 58 at src/bin/toydb.rs:57:17: 57:28
                                                                    let _205: std::string::String; // in scope 58 at src/bin/toydb.rs:57:17: 57:28
                                                                    let _208: std::string::String; // in scope 58 at src/bin/toydb.rs:57:17: 57:28
                                                                    let _209: <__A as _::_serde::de::MapAccess>::Error; // in scope 58 at src/bin/toydb.rs:57:17: 57:28
                                                                    scope 62 {
                                                                        debug __field7 => _203; // in scope 62 at src/bin/toydb.rs:57:17: 57:28
                                                                        let _211: std::string::String; // in scope 62 at src/bin/toydb.rs:57:17: 57:28
                                                                        let _213: std::string::String; // in scope 62 at src/bin/toydb.rs:57:17: 57:28
                                                                        let _216: std::string::String; // in scope 62 at src/bin/toydb.rs:57:17: 57:28
                                                                        let _217: <__A as _::_serde::de::MapAccess>::Error; // in scope 62 at src/bin/toydb.rs:57:17: 57:28
                                                                        scope 66 {
                                                                            debug __field8 => _211; // in scope 66 at src/bin/toydb.rs:57:17: 57:28
                                                                        }
                                                                        scope 67 {
                                                                            debug __field8 => _213; // in scope 67 at src/bin/toydb.rs:57:17: 57:28
                                                                        }
                                                                        scope 68 {
                                                                            debug __val => _216; // in scope 68 at src/bin/toydb.rs:57:17: 57:28
                                                                        }
                                                                        scope 69 {
                                                                            debug __err => _217; // in scope 69 at src/bin/toydb.rs:57:17: 57:28
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug __field7 => _205; // in scope 63 at src/bin/toydb.rs:57:17: 57:28
                                                                    }
                                                                    scope 64 {
                                                                        debug __val => _208; // in scope 64 at src/bin/toydb.rs:57:17: 57:28
                                                                    }
                                                                    scope 65 {
                                                                        debug __err => _209; // in scope 65 at src/bin/toydb.rs:57:17: 57:28
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug __field6 => _197; // in scope 59 at src/bin/toydb.rs:57:17: 57:28
                                                                }
                                                                scope 60 {
                                                                    debug __val => _200; // in scope 60 at src/bin/toydb.rs:57:17: 57:28
                                                                }
                                                                scope 61 {
                                                                    debug __err => _201; // in scope 61 at src/bin/toydb.rs:57:17: 57:28
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug __field5 => _189; // in scope 55 at src/bin/toydb.rs:57:17: 57:28
                                                            }
                                                            scope 56 {
                                                                debug __val => _192; // in scope 56 at src/bin/toydb.rs:57:17: 57:28
                                                            }
                                                            scope 57 {
                                                                debug __err => _193; // in scope 57 at src/bin/toydb.rs:57:17: 57:28
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug __field4 => _181; // in scope 51 at src/bin/toydb.rs:57:17: 57:28
                                                        }
                                                        scope 52 {
                                                            debug __val => _184; // in scope 52 at src/bin/toydb.rs:57:17: 57:28
                                                        }
                                                        scope 53 {
                                                            debug __err => _185; // in scope 53 at src/bin/toydb.rs:57:17: 57:28
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug __field3 => _173; // in scope 47 at src/bin/toydb.rs:57:17: 57:28
                                                    }
                                                    scope 48 {
                                                        debug __val => _176; // in scope 48 at src/bin/toydb.rs:57:17: 57:28
                                                    }
                                                    scope 49 {
                                                        debug __err => _177; // in scope 49 at src/bin/toydb.rs:57:17: 57:28
                                                    }
                                                }
                                                scope 43 {
                                                    debug __field2 => _165; // in scope 43 at src/bin/toydb.rs:57:17: 57:28
                                                }
                                                scope 44 {
                                                    debug __val => _168; // in scope 44 at src/bin/toydb.rs:57:17: 57:28
                                                }
                                                scope 45 {
                                                    debug __err => _169; // in scope 45 at src/bin/toydb.rs:57:17: 57:28
                                                }
                                            }
                                            scope 39 {
                                                debug __field1 => _157; // in scope 39 at src/bin/toydb.rs:57:17: 57:28
                                            }
                                            scope 40 {
                                                debug __val => _160; // in scope 40 at src/bin/toydb.rs:57:17: 57:28
                                            }
                                            scope 41 {
                                                debug __err => _161; // in scope 41 at src/bin/toydb.rs:57:17: 57:28
                                            }
                                        }
                                        scope 35 {
                                            debug __field0 => _149; // in scope 35 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 36 {
                                            debug __val => _152; // in scope 36 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                        scope 37 {
                                            debug __err => _153; // in scope 37 at src/bin/toydb.rs:57:17: 57:28
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _231 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _232 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _233 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _229 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _234 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _230 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _235 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _236 = const false;              // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _236 = const true;               // scope 0 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_3) = 0;            // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _235 = const true;               // scope 1 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_4) = 0;            // scope 1 at src/bin/toydb.rs:57:17: 57:28
        _234 = const true;               // scope 2 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_5) = 0;            // scope 2 at src/bin/toydb.rs:57:17: 57:28
        _233 = const true;               // scope 3 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_6) = 0;            // scope 3 at src/bin/toydb.rs:57:17: 57:28
        _232 = const true;               // scope 4 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_7) = 0;            // scope 4 at src/bin/toydb.rs:57:17: 57:28
        _231 = const true;               // scope 5 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_8) = 0;            // scope 5 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_9) = 0;            // scope 6 at src/bin/toydb.rs:57:17: 57:28
        _230 = const true;               // scope 7 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_10) = 0;           // scope 7 at src/bin/toydb.rs:57:17: 57:28
        _229 = const true;               // scope 8 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_11) = 0;           // scope 8 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb1;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb1: {
        _15 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _14 = &mut (*_15);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _13 = <__A as MapAccess>::next_key::<__Field>(move _14) -> [return: bb2, unwind: bb235]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::option::Option<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_key::<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = discriminant(_13);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _16) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb3: {
        _18 = move ((_13 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _19 = move _18;                  // scope 11 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _19; // scope 11 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 11 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb4: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb5: {
        _17 = move ((_13 as Ok).0: std::option::Option<_::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field>); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _12 = move _17;                  // scope 10 at src/bin/toydb.rs:57:17: 57:28
        _20 = discriminant(_12);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _20) -> [1_isize: bb7, otherwise: bb6]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb6: {
        _148 = discriminant(_3);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _148) -> [0_isize: bb95, 1_isize: bb97, otherwise: bb96]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb7: {
        _21 = move ((_12 as Some).0: _::<impl _::_serde::Deserialize<'de> for Config>::deserialize::__Field); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _22 = discriminant(_21);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _22) -> [0_isize: bb9, 1_isize: bb18, 2_isize: bb27, 3_isize: bb36, 4_isize: bb45, 5_isize: bb54, 6_isize: bb63, 7_isize: bb72, 8_isize: bb81, otherwise: bb8]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb8: {
        _142 = &mut _2;                  // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _141 = &mut (*_142);             // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _140 = <__A as MapAccess>::next_value::<IgnoredAny>(move _141) -> [return: bb90, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(46)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<_::_serde::de::IgnoredAny>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _25 = &_3;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _24 = _25;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _23 = std::option::Option::<std::string::String>::is_some(move _24) -> [return: bb10, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        switchInt(move _23) -> [false: bb13, otherwise: bb11]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb11: {
        _26 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "id") -> [return: bb12, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
    }

    bb12: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _26; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb13: {
        _31 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _30 = &mut (*_31);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _29 = <__A as MapAccess>::next_value::<std::string::String>(move _30) -> [return: bb14, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:59:5: 59:7
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _32 = discriminant(_29);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _32) -> [0_isize: bb17, 1_isize: bb15, otherwise: bb16]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb15: {
        _34 = move ((_29 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _35 = move _34;                  // scope 14 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _35; // scope 14 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 14 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb16: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb17: {
        _33 = move ((_29 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _28 = move _33;                  // scope 13 at src/bin/toydb.rs:57:17: 57:28
        ((_27 as Some).0: std::string::String) = move _28; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_27) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_3) -> [return: bb191, unwind: bb190]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb18: {
        _38 = &_4;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _37 = _38;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _36 = std::option::Option::<HashMap<std::string::String, std::string::String>>::is_some(move _37) -> [return: bb19, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>) -> bool {std::option::Option::<std::collections::HashMap<std::string::String, std::string::String>>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        switchInt(move _36) -> [false: bb22, otherwise: bb20]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb20: {
        _39 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "peers") -> [return: bb21, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb21: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _39; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb22: {
        _44 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _43 = &mut (*_44);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _42 = <__A as MapAccess>::next_value::<HashMap<std::string::String, std::string::String>>(move _43) -> [return: bb23, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:60:5: 60:10
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::collections::HashMap<std::string::String, std::string::String>, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::collections::HashMap<std::string::String, std::string::String>>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _45 = discriminant(_42);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _45) -> [0_isize: bb26, 1_isize: bb24, otherwise: bb25]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb24: {
        _47 = move ((_42 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _48 = move _47;                  // scope 16 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _48; // scope 16 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 16 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb25: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb26: {
        _46 = move ((_42 as Ok).0: std::collections::HashMap<std::string::String, std::string::String>); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _41 = move _46;                  // scope 15 at src/bin/toydb.rs:57:17: 57:28
        ((_40 as Some).0: std::collections::HashMap<std::string::String, std::string::String>) = move _41; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_40) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_4) -> [return: bb193, unwind: bb192]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb27: {
        _51 = &_5;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _50 = _51;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _49 = std::option::Option::<std::string::String>::is_some(move _50) -> [return: bb28, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        switchInt(move _49) -> [false: bb31, otherwise: bb29]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb29: {
        _52 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "listen_sql") -> [return: bb30, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
    }

    bb30: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _52; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb31: {
        _57 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _56 = &mut (*_57);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _55 = <__A as MapAccess>::next_value::<std::string::String>(move _56) -> [return: bb32, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:61:5: 61:15
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        _58 = discriminant(_55);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _58) -> [0_isize: bb35, 1_isize: bb33, otherwise: bb34]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb33: {
        _60 = move ((_55 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _61 = move _60;                  // scope 18 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _61; // scope 18 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 18 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb34: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb35: {
        _59 = move ((_55 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _54 = move _59;                  // scope 17 at src/bin/toydb.rs:57:17: 57:28
        ((_53 as Some).0: std::string::String) = move _54; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_53) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_5) -> [return: bb195, unwind: bb194]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb36: {
        _64 = &_6;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _63 = _64;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _62 = std::option::Option::<std::string::String>::is_some(move _63) -> [return: bb37, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        switchInt(move _62) -> [false: bb40, otherwise: bb38]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb38: {
        _65 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "listen_raft") -> [return: bb39, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb39: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _65; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb40: {
        _70 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _69 = &mut (*_70);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _68 = <__A as MapAccess>::next_value::<std::string::String>(move _69) -> [return: bb41, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:62:5: 62:16
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        _71 = discriminant(_68);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _71) -> [0_isize: bb44, 1_isize: bb42, otherwise: bb43]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb42: {
        _73 = move ((_68 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _74 = move _73;                  // scope 20 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _74; // scope 20 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 20 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb43: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb44: {
        _72 = move ((_68 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _67 = move _72;                  // scope 19 at src/bin/toydb.rs:57:17: 57:28
        ((_66 as Some).0: std::string::String) = move _67; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_66) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_6) -> [return: bb197, unwind: bb196]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb45: {
        _77 = &_7;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _76 = _77;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _75 = std::option::Option::<std::string::String>::is_some(move _76) -> [return: bb46, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        switchInt(move _75) -> [false: bb49, otherwise: bb47]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb47: {
        _78 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "log_level") -> [return: bb48, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
    }

    bb48: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _78; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb49: {
        _83 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _82 = &mut (*_83);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _81 = <__A as MapAccess>::next_value::<std::string::String>(move _82) -> [return: bb50, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:63:5: 63:14
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        _84 = discriminant(_81);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _84) -> [0_isize: bb53, 1_isize: bb51, otherwise: bb52]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb51: {
        _86 = move ((_81 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _87 = move _86;                  // scope 22 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _87; // scope 22 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 22 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb52: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb53: {
        _85 = move ((_81 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _80 = move _85;                  // scope 21 at src/bin/toydb.rs:57:17: 57:28
        ((_79 as Some).0: std::string::String) = move _80; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_79) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_7) -> [return: bb199, unwind: bb198]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb54: {
        _90 = &_8;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _89 = _90;                       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _88 = std::option::Option::<std::string::String>::is_some(move _89) -> [return: bb55, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(34)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb55: {
        switchInt(move _88) -> [false: bb58, otherwise: bb56]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb56: {
        _91 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "data_dir") -> [return: bb57, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(35)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
    }

    bb57: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _91; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb58: {
        _96 = &mut _2;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _95 = &mut (*_96);               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _94 = <__A as MapAccess>::next_value::<std::string::String>(move _95) -> [return: bb59, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:64:5: 64:13
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb59: {
        _97 = discriminant(_94);         // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _97) -> [0_isize: bb62, 1_isize: bb60, otherwise: bb61]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb60: {
        _99 = move ((_94 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _100 = move _99;                 // scope 24 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _100; // scope 24 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 24 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb61: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb62: {
        _98 = move ((_94 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _93 = move _98;                  // scope 23 at src/bin/toydb.rs:57:17: 57:28
        ((_92 as Some).0: std::string::String) = move _93; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_92) = 1;           // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_8) -> [return: bb201, unwind: bb200]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb63: {
        _103 = &_9;                      // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _102 = _103;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _101 = std::option::Option::<bool>::is_some(move _102) -> [return: bb64, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(37)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb64: {
        switchInt(move _101) -> [false: bb67, otherwise: bb65]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb65: {
        _104 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "sync") -> [return: bb66, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(38)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
    }

    bb66: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _104; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb67: {
        _109 = &mut _2;                  // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _108 = &mut (*_109);             // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _107 = <__A as MapAccess>::next_value::<bool>(move _108) -> [return: bb68, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:65:5: 65:9
                                         // + user_ty: UserType(39)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<bool, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<bool>}, val: Value(Scalar(<ZST>)) }
    }

    bb68: {
        _110 = discriminant(_107);       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _110) -> [0_isize: bb71, 1_isize: bb69, otherwise: bb70]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb69: {
        _112 = move ((_107 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _113 = move _112;                // scope 26 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _113; // scope 26 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 26 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb70: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb71: {
        _111 = ((_107 as Ok).0: bool);   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _106 = _111;                     // scope 25 at src/bin/toydb.rs:57:17: 57:28
        ((_105 as Some).0: bool) = move _106; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_105) = 1;          // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _9 = move _105;                  // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb72: {
        _116 = &_10;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _115 = _116;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _114 = std::option::Option::<std::string::String>::is_some(move _115) -> [return: bb73, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(40)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb73: {
        switchInt(move _114) -> [false: bb76, otherwise: bb74]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb74: {
        _117 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "storage_raft") -> [return: bb75, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(41)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
    }

    bb75: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _117; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb76: {
        _122 = &mut _2;                  // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _121 = &mut (*_122);             // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _120 = <__A as MapAccess>::next_value::<std::string::String>(move _121) -> [return: bb77, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:66:5: 66:17
                                         // + user_ty: UserType(42)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb77: {
        _123 = discriminant(_120);       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _123) -> [0_isize: bb80, 1_isize: bb78, otherwise: bb79]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb78: {
        _125 = move ((_120 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _126 = move _125;                // scope 28 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _126; // scope 28 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 28 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb79: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb80: {
        _124 = move ((_120 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _119 = move _124;                // scope 27 at src/bin/toydb.rs:57:17: 57:28
        ((_118 as Some).0: std::string::String) = move _119; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_118) = 1;          // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_10) -> [return: bb203, unwind: bb202]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb81: {
        _129 = &_11;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _128 = _129;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _127 = std::option::Option::<std::string::String>::is_some(move _128) -> [return: bb82, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(43)
                                         // + literal: Const { ty: for<'r> fn(&'r std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(Scalar(<ZST>)) }
    }

    bb82: {
        switchInt(move _127) -> [false: bb85, otherwise: bb83]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb83: {
        _130 = <<__A as MapAccess>::Error as _serde::de::Error>::duplicate_field(const "storage_sql") -> [return: bb84, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(44)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as _::_serde::de::MapAccess>::Error {<<__A as _::_serde::de::MapAccess>::Error as _::_serde::de::Error>::duplicate_field}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb84: {
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _130; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb85: {
        _135 = &mut _2;                  // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _134 = &mut (*_135);             // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _133 = <__A as MapAccess>::next_value::<std::string::String>(move _134) -> [return: bb86, unwind: bb232]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:67:5: 67:16
                                         // + user_ty: UserType(45)
                                         // + literal: Const { ty: for<'r> fn(&'r mut __A) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {<__A as _::_serde::de::MapAccess>::next_value::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb86: {
        _136 = discriminant(_133);       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _136) -> [0_isize: bb89, 1_isize: bb87, otherwise: bb88]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb87: {
        _138 = move ((_133 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _139 = move _138;                // scope 30 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _139; // scope 30 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 30 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb88: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb89: {
        _137 = move ((_133 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _132 = move _137;                // scope 29 at src/bin/toydb.rs:57:17: 57:28
        ((_131 as Some).0: std::string::String) = move _132; // scope 9 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_131) = 1;          // scope 9 at src/bin/toydb.rs:57:17: 57:28
        drop(_11) -> [return: bb205, unwind: bb204]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb90: {
        _143 = discriminant(_140);       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _143) -> [0_isize: bb93, 1_isize: bb91, otherwise: bb92]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb91: {
        _145 = move ((_140 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _146 = move _145;                // scope 33 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _146; // scope 33 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 33 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb206;                   // scope 9 at no-location
    }

    bb92: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb93: {
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb94: {
        goto -> bb1;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb95: {
        _150 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "id") -> [return: bb98, unwind: bb235]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:59:5: 59:7
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
    }

    bb96: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb97: {
        _236 = const false;              // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _149 = move ((_3 as Some).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _147 = move _149;                // scope 35 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb102;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb98: {
        _151 = discriminant(_150);       // scope 9 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _151) -> [0_isize: bb101, 1_isize: bb99, otherwise: bb100]; // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb99: {
        _153 = move ((_150 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _154 = move _153;                // scope 37 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _154; // scope 37 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 37 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb210;                   // scope 9 at no-location
    }

    bb100: {
        unreachable;                     // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb101: {
        _152 = move ((_150 as Ok).0: std::string::String); // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _147 = move _152;                // scope 36 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb102;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb102: {
        _156 = discriminant(_4);         // scope 34 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _156) -> [0_isize: bb103, 1_isize: bb105, otherwise: bb104]; // scope 34 at src/bin/toydb.rs:57:17: 57:28
    }

    bb103: {
        _158 = _serde::__private::de::missing_field::<HashMap<std::string::String, std::string::String>, <__A as MapAccess>::Error>(const "peers") -> [return: bb106, unwind: bb180]; // scope 34 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:60:5: 60:10
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::collections::HashMap<std::string::String, std::string::String>, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::collections::HashMap<std::string::String, std::string::String>, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [112, 101, 101, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb104: {
        unreachable;                     // scope 34 at src/bin/toydb.rs:57:17: 57:28
    }

    bb105: {
        _235 = const false;              // scope 34 at src/bin/toydb.rs:57:17: 57:28
        _157 = move ((_4 as Some).0: std::collections::HashMap<std::string::String, std::string::String>); // scope 34 at src/bin/toydb.rs:57:17: 57:28
        _155 = move _157;                // scope 39 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb110;                   // scope 34 at src/bin/toydb.rs:57:27: 57:28
    }

    bb106: {
        _159 = discriminant(_158);       // scope 34 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _159) -> [0_isize: bb109, 1_isize: bb107, otherwise: bb108]; // scope 34 at src/bin/toydb.rs:57:17: 57:28
    }

    bb107: {
        _161 = move ((_158 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 34 at src/bin/toydb.rs:57:17: 57:28
        _162 = move _161;                // scope 41 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _162; // scope 41 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 41 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb172;                   // scope 34 at no-location
    }

    bb108: {
        unreachable;                     // scope 34 at src/bin/toydb.rs:57:17: 57:28
    }

    bb109: {
        _160 = move ((_158 as Ok).0: std::collections::HashMap<std::string::String, std::string::String>); // scope 34 at src/bin/toydb.rs:57:17: 57:28
        _155 = move _160;                // scope 40 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb110;                   // scope 34 at src/bin/toydb.rs:57:27: 57:28
    }

    bb110: {
        _164 = discriminant(_5);         // scope 38 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _164) -> [0_isize: bb111, 1_isize: bb113, otherwise: bb112]; // scope 38 at src/bin/toydb.rs:57:17: 57:28
    }

    bb111: {
        _166 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "listen_sql") -> [return: bb114, unwind: bb179]; // scope 38 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:61:5: 61:15
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1023], len: Size { raw: 10 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 10 }) }
    }

    bb112: {
        unreachable;                     // scope 38 at src/bin/toydb.rs:57:17: 57:28
    }

    bb113: {
        _234 = const false;              // scope 38 at src/bin/toydb.rs:57:17: 57:28
        _165 = move ((_5 as Some).0: std::string::String); // scope 38 at src/bin/toydb.rs:57:17: 57:28
        _163 = move _165;                // scope 43 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb118;                   // scope 38 at src/bin/toydb.rs:57:27: 57:28
    }

    bb114: {
        _167 = discriminant(_166);       // scope 38 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _167) -> [0_isize: bb117, 1_isize: bb115, otherwise: bb116]; // scope 38 at src/bin/toydb.rs:57:17: 57:28
    }

    bb115: {
        _169 = move ((_166 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 38 at src/bin/toydb.rs:57:17: 57:28
        _170 = move _169;                // scope 45 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _170; // scope 45 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 45 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb171;                   // scope 38 at no-location
    }

    bb116: {
        unreachable;                     // scope 38 at src/bin/toydb.rs:57:17: 57:28
    }

    bb117: {
        _168 = move ((_166 as Ok).0: std::string::String); // scope 38 at src/bin/toydb.rs:57:17: 57:28
        _163 = move _168;                // scope 44 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb118;                   // scope 38 at src/bin/toydb.rs:57:27: 57:28
    }

    bb118: {
        _172 = discriminant(_6);         // scope 42 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _172) -> [0_isize: bb119, 1_isize: bb121, otherwise: bb120]; // scope 42 at src/bin/toydb.rs:57:17: 57:28
    }

    bb119: {
        _174 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "listen_raft") -> [return: bb122, unwind: bb178]; // scope 42 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:62:5: 62:16
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 105, 115, 116, 101, 110, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb120: {
        unreachable;                     // scope 42 at src/bin/toydb.rs:57:17: 57:28
    }

    bb121: {
        _233 = const false;              // scope 42 at src/bin/toydb.rs:57:17: 57:28
        _173 = move ((_6 as Some).0: std::string::String); // scope 42 at src/bin/toydb.rs:57:17: 57:28
        _171 = move _173;                // scope 47 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb126;                   // scope 42 at src/bin/toydb.rs:57:27: 57:28
    }

    bb122: {
        _175 = discriminant(_174);       // scope 42 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _175) -> [0_isize: bb125, 1_isize: bb123, otherwise: bb124]; // scope 42 at src/bin/toydb.rs:57:17: 57:28
    }

    bb123: {
        _177 = move ((_174 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 42 at src/bin/toydb.rs:57:17: 57:28
        _178 = move _177;                // scope 49 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _178; // scope 49 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 49 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb170;                   // scope 42 at no-location
    }

    bb124: {
        unreachable;                     // scope 42 at src/bin/toydb.rs:57:17: 57:28
    }

    bb125: {
        _176 = move ((_174 as Ok).0: std::string::String); // scope 42 at src/bin/toydb.rs:57:17: 57:28
        _171 = move _176;                // scope 48 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb126;                   // scope 42 at src/bin/toydb.rs:57:27: 57:28
    }

    bb126: {
        _180 = discriminant(_7);         // scope 46 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _180) -> [0_isize: bb127, 1_isize: bb129, otherwise: bb128]; // scope 46 at src/bin/toydb.rs:57:17: 57:28
    }

    bb127: {
        _182 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "log_level") -> [return: bb130, unwind: bb177]; // scope 46 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:63:5: 63:14
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [108, 111, 103, 95, 108, 101, 118, 101, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
    }

    bb128: {
        unreachable;                     // scope 46 at src/bin/toydb.rs:57:17: 57:28
    }

    bb129: {
        _232 = const false;              // scope 46 at src/bin/toydb.rs:57:17: 57:28
        _181 = move ((_7 as Some).0: std::string::String); // scope 46 at src/bin/toydb.rs:57:17: 57:28
        _179 = move _181;                // scope 51 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb134;                   // scope 46 at src/bin/toydb.rs:57:27: 57:28
    }

    bb130: {
        _183 = discriminant(_182);       // scope 46 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _183) -> [0_isize: bb133, 1_isize: bb131, otherwise: bb132]; // scope 46 at src/bin/toydb.rs:57:17: 57:28
    }

    bb131: {
        _185 = move ((_182 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 46 at src/bin/toydb.rs:57:17: 57:28
        _186 = move _185;                // scope 53 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _186; // scope 53 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 53 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb169;                   // scope 46 at no-location
    }

    bb132: {
        unreachable;                     // scope 46 at src/bin/toydb.rs:57:17: 57:28
    }

    bb133: {
        _184 = move ((_182 as Ok).0: std::string::String); // scope 46 at src/bin/toydb.rs:57:17: 57:28
        _179 = move _184;                // scope 52 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb134;                   // scope 46 at src/bin/toydb.rs:57:27: 57:28
    }

    bb134: {
        _188 = discriminant(_8);         // scope 50 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _188) -> [0_isize: bb135, 1_isize: bb137, otherwise: bb136]; // scope 50 at src/bin/toydb.rs:57:17: 57:28
    }

    bb135: {
        _190 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "data_dir") -> [return: bb138, unwind: bb176]; // scope 50 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:64:5: 64:13
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [100, 97, 116, 97, 95, 100, 105, 114], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }
    }

    bb136: {
        unreachable;                     // scope 50 at src/bin/toydb.rs:57:17: 57:28
    }

    bb137: {
        _231 = const false;              // scope 50 at src/bin/toydb.rs:57:17: 57:28
        _189 = move ((_8 as Some).0: std::string::String); // scope 50 at src/bin/toydb.rs:57:17: 57:28
        _187 = move _189;                // scope 55 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb142;                   // scope 50 at src/bin/toydb.rs:57:27: 57:28
    }

    bb138: {
        _191 = discriminant(_190);       // scope 50 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _191) -> [0_isize: bb141, 1_isize: bb139, otherwise: bb140]; // scope 50 at src/bin/toydb.rs:57:17: 57:28
    }

    bb139: {
        _193 = move ((_190 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 50 at src/bin/toydb.rs:57:17: 57:28
        _194 = move _193;                // scope 57 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _194; // scope 57 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 57 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb168;                   // scope 50 at no-location
    }

    bb140: {
        unreachable;                     // scope 50 at src/bin/toydb.rs:57:17: 57:28
    }

    bb141: {
        _192 = move ((_190 as Ok).0: std::string::String); // scope 50 at src/bin/toydb.rs:57:17: 57:28
        _187 = move _192;                // scope 56 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb142;                   // scope 50 at src/bin/toydb.rs:57:27: 57:28
    }

    bb142: {
        _196 = discriminant(_9);         // scope 54 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _196) -> [0_isize: bb143, 1_isize: bb145, otherwise: bb144]; // scope 54 at src/bin/toydb.rs:57:17: 57:28
    }

    bb143: {
        _198 = _serde::__private::de::missing_field::<bool, <__A as MapAccess>::Error>(const "sync") -> [return: bb146, unwind: bb175]; // scope 54 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:65:5: 65:9
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<bool, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<bool, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 121, 110, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
    }

    bb144: {
        unreachable;                     // scope 54 at src/bin/toydb.rs:57:17: 57:28
    }

    bb145: {
        _197 = ((_9 as Some).0: bool);   // scope 54 at src/bin/toydb.rs:57:17: 57:28
        _195 = _197;                     // scope 59 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb150;                   // scope 54 at src/bin/toydb.rs:57:27: 57:28
    }

    bb146: {
        _199 = discriminant(_198);       // scope 54 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _199) -> [0_isize: bb149, 1_isize: bb147, otherwise: bb148]; // scope 54 at src/bin/toydb.rs:57:17: 57:28
    }

    bb147: {
        _201 = move ((_198 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 54 at src/bin/toydb.rs:57:17: 57:28
        _202 = move _201;                // scope 61 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _202; // scope 61 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 61 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb167;                   // scope 54 at no-location
    }

    bb148: {
        unreachable;                     // scope 54 at src/bin/toydb.rs:57:17: 57:28
    }

    bb149: {
        _200 = ((_198 as Ok).0: bool);   // scope 54 at src/bin/toydb.rs:57:17: 57:28
        _195 = _200;                     // scope 60 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb150;                   // scope 54 at src/bin/toydb.rs:57:27: 57:28
    }

    bb150: {
        _204 = discriminant(_10);        // scope 58 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _204) -> [0_isize: bb151, 1_isize: bb153, otherwise: bb152]; // scope 58 at src/bin/toydb.rs:57:17: 57:28
    }

    bb151: {
        _206 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "storage_raft") -> [return: bb154, unwind: bb175]; // scope 58 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:66:5: 66:17
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 114, 97, 102, 116], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
    }

    bb152: {
        unreachable;                     // scope 58 at src/bin/toydb.rs:57:17: 57:28
    }

    bb153: {
        _230 = const false;              // scope 58 at src/bin/toydb.rs:57:17: 57:28
        _205 = move ((_10 as Some).0: std::string::String); // scope 58 at src/bin/toydb.rs:57:17: 57:28
        _203 = move _205;                // scope 63 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb158;                   // scope 58 at src/bin/toydb.rs:57:27: 57:28
    }

    bb154: {
        _207 = discriminant(_206);       // scope 58 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _207) -> [0_isize: bb157, 1_isize: bb155, otherwise: bb156]; // scope 58 at src/bin/toydb.rs:57:17: 57:28
    }

    bb155: {
        _209 = move ((_206 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 58 at src/bin/toydb.rs:57:17: 57:28
        _210 = move _209;                // scope 65 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _210; // scope 65 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 65 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb167;                   // scope 58 at no-location
    }

    bb156: {
        unreachable;                     // scope 58 at src/bin/toydb.rs:57:17: 57:28
    }

    bb157: {
        _208 = move ((_206 as Ok).0: std::string::String); // scope 58 at src/bin/toydb.rs:57:17: 57:28
        _203 = move _208;                // scope 64 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb158;                   // scope 58 at src/bin/toydb.rs:57:27: 57:28
    }

    bb158: {
        _212 = discriminant(_11);        // scope 62 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _212) -> [0_isize: bb159, 1_isize: bb161, otherwise: bb160]; // scope 62 at src/bin/toydb.rs:57:17: 57:28
    }

    bb159: {
        _214 = _serde::__private::de::missing_field::<std::string::String, <__A as MapAccess>::Error>(const "storage_sql") -> [return: bb162, unwind: bb174]; // scope 62 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:67:5: 67:16
                                         // + literal: Const { ty: fn(&'static str) -> std::result::Result<std::string::String, <__A as _::_serde::de::MapAccess>::Error> {_::_serde::__private::de::missing_field::<std::string::String, <__A as _::_serde::de::MapAccess>::Error>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 111, 114, 97, 103, 101, 95, 115, 113, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2047], len: Size { raw: 11 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 11 }) }
    }

    bb160: {
        unreachable;                     // scope 62 at src/bin/toydb.rs:57:17: 57:28
    }

    bb161: {
        _229 = const false;              // scope 62 at src/bin/toydb.rs:57:17: 57:28
        _213 = move ((_11 as Some).0: std::string::String); // scope 62 at src/bin/toydb.rs:57:17: 57:28
        _211 = move _213;                // scope 67 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb166;                   // scope 62 at src/bin/toydb.rs:57:27: 57:28
    }

    bb162: {
        _215 = discriminant(_214);       // scope 62 at src/bin/toydb.rs:57:17: 57:28
        switchInt(move _215) -> [0_isize: bb165, 1_isize: bb163, otherwise: bb164]; // scope 62 at src/bin/toydb.rs:57:17: 57:28
    }

    bb163: {
        _217 = move ((_214 as Err).0: <__A as _::_serde::de::MapAccess>::Error); // scope 62 at src/bin/toydb.rs:57:17: 57:28
        _218 = move _217;                // scope 69 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Err).0: <__A as _::_serde::de::MapAccess>::Error) = move _218; // scope 69 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 1;            // scope 69 at src/bin/toydb.rs:57:17: 57:28
        drop(_203) -> [return: bb167, unwind: bb175]; // scope 58 at src/bin/toydb.rs:57:27: 57:28
    }

    bb164: {
        unreachable;                     // scope 62 at src/bin/toydb.rs:57:17: 57:28
    }

    bb165: {
        _216 = move ((_214 as Ok).0: std::string::String); // scope 62 at src/bin/toydb.rs:57:17: 57:28
        _211 = move _216;                // scope 68 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb166;                   // scope 62 at src/bin/toydb.rs:57:27: 57:28
    }

    bb166: {
        _220 = move _147;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _221 = move _155;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _222 = move _163;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _223 = move _171;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _224 = move _179;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _225 = move _187;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _226 = _195;                     // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _227 = move _203;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _228 = move _211;                // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.0: std::string::String) = move _220; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.1: std::collections::HashMap<std::string::String, std::string::String>) = move _221; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.2: std::string::String) = move _222; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.3: std::string::String) = move _223; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.4: std::string::String) = move _224; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.5: std::string::String) = move _225; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.6: bool) = move _226;      // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.7: std::string::String) = move _227; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        (_219.8: std::string::String) = move _228; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        ((_0 as Ok).0: Config) = move _219; // scope 66 at src/bin/toydb.rs:57:17: 57:28
        discriminant(_0) = 0;            // scope 66 at src/bin/toydb.rs:57:17: 57:28
        _229 = const false;              // scope 8 at src/bin/toydb.rs:57:27: 57:28
        _230 = const false;              // scope 7 at src/bin/toydb.rs:57:27: 57:28
        _231 = const false;              // scope 5 at src/bin/toydb.rs:57:27: 57:28
        _232 = const false;              // scope 4 at src/bin/toydb.rs:57:27: 57:28
        _233 = const false;              // scope 3 at src/bin/toydb.rs:57:27: 57:28
        _234 = const false;              // scope 2 at src/bin/toydb.rs:57:27: 57:28
        _235 = const false;              // scope 1 at src/bin/toydb.rs:57:27: 57:28
        _236 = const false;              // scope 0 at src/bin/toydb.rs:57:27: 57:28
        drop(_2) -> bb173;               // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb167: {
        drop(_187) -> [return: bb168, unwind: bb176]; // scope 50 at src/bin/toydb.rs:57:27: 57:28
    }

    bb168: {
        drop(_179) -> [return: bb169, unwind: bb177]; // scope 46 at src/bin/toydb.rs:57:27: 57:28
    }

    bb169: {
        drop(_171) -> [return: bb170, unwind: bb178]; // scope 42 at src/bin/toydb.rs:57:27: 57:28
    }

    bb170: {
        drop(_163) -> [return: bb171, unwind: bb179]; // scope 38 at src/bin/toydb.rs:57:27: 57:28
    }

    bb171: {
        drop(_155) -> [return: bb172, unwind: bb180]; // scope 34 at src/bin/toydb.rs:57:27: 57:28
    }

    bb172: {
        drop(_147) -> [return: bb210, unwind: bb235]; // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb173: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }

    bb174 (cleanup): {
        drop(_203) -> bb175;             // scope 58 at src/bin/toydb.rs:57:27: 57:28
    }

    bb175 (cleanup): {
        drop(_187) -> bb176;             // scope 50 at src/bin/toydb.rs:57:27: 57:28
    }

    bb176 (cleanup): {
        drop(_179) -> bb177;             // scope 46 at src/bin/toydb.rs:57:27: 57:28
    }

    bb177 (cleanup): {
        drop(_171) -> bb178;             // scope 42 at src/bin/toydb.rs:57:27: 57:28
    }

    bb178 (cleanup): {
        drop(_163) -> bb179;             // scope 38 at src/bin/toydb.rs:57:27: 57:28
    }

    bb179 (cleanup): {
        drop(_155) -> bb180;             // scope 34 at src/bin/toydb.rs:57:27: 57:28
    }

    bb180 (cleanup): {
        drop(_147) -> bb235;             // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb181 (cleanup): {
        _246 = discriminant(_10);        // scope 7 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _246) -> [1_isize: bb236, otherwise: bb182]; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb182 (cleanup): {
        _247 = discriminant(_8);         // scope 5 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _247) -> [1_isize: bb238, otherwise: bb183]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb183 (cleanup): {
        _248 = discriminant(_7);         // scope 4 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _248) -> [1_isize: bb240, otherwise: bb184]; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb184 (cleanup): {
        _249 = discriminant(_6);         // scope 3 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _249) -> [1_isize: bb242, otherwise: bb185]; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb185 (cleanup): {
        _250 = discriminant(_5);         // scope 2 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _250) -> [1_isize: bb244, otherwise: bb186]; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb186 (cleanup): {
        _251 = discriminant(_4);         // scope 1 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _251) -> [1_isize: bb246, otherwise: bb187]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb187 (cleanup): {
        _252 = discriminant(_3);         // scope 0 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _252) -> [1_isize: bb248, otherwise: bb188]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb188 (cleanup): {
        drop(_2) -> bb189;               // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb189 (cleanup): {
        resume;                          // scope 0 at src/bin/toydb.rs:57:17: 57:28
    }

    bb190 (cleanup): {
        _236 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _3 = move _27;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb191: {
        _236 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _3 = move _27;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb192 (cleanup): {
        _235 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _4 = move _40;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb193: {
        _235 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _4 = move _40;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb194 (cleanup): {
        _234 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _5 = move _53;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb195: {
        _234 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _5 = move _53;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb196 (cleanup): {
        _233 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _6 = move _66;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb197: {
        _233 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _6 = move _66;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb198 (cleanup): {
        _232 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _7 = move _79;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb199: {
        _232 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _7 = move _79;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb200 (cleanup): {
        _231 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _8 = move _92;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb201: {
        _231 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _8 = move _92;                   // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb202 (cleanup): {
        _230 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _10 = move _118;                 // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb203: {
        _230 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _10 = move _118;                 // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb204 (cleanup): {
        _229 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _11 = move _131;                 // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb232;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb205: {
        _229 = const true;               // scope 9 at src/bin/toydb.rs:57:17: 57:28
        _11 = move _131;                 // scope 9 at src/bin/toydb.rs:57:17: 57:28
        goto -> bb94;                    // scope 9 at src/bin/toydb.rs:57:17: 57:28
    }

    bb206: {
        goto -> bb210;                   // scope 9 at no-location
    }

    bb207: {
        _229 = const false;              // scope 8 at src/bin/toydb.rs:57:27: 57:28
        _238 = discriminant(_10);        // scope 7 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _238) -> [1_isize: bb212, otherwise: bb211]; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb208: {
        switchInt(_229) -> [false: bb207, otherwise: bb209]; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb209: {
        drop(((_11 as Some).0: std::string::String)) -> [return: bb207, unwind: bb181]; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb210: {
        _237 = discriminant(_11);        // scope 8 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _237) -> [1_isize: bb208, otherwise: bb207]; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb211: {
        _230 = const false;              // scope 7 at src/bin/toydb.rs:57:27: 57:28
        _239 = discriminant(_8);         // scope 5 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _239) -> [1_isize: bb215, otherwise: bb214]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb212: {
        switchInt(_230) -> [false: bb211, otherwise: bb213]; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb213: {
        drop(((_10 as Some).0: std::string::String)) -> [return: bb211, unwind: bb182]; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb214: {
        _231 = const false;              // scope 5 at src/bin/toydb.rs:57:27: 57:28
        _240 = discriminant(_7);         // scope 4 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _240) -> [1_isize: bb218, otherwise: bb217]; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb215: {
        switchInt(_231) -> [false: bb214, otherwise: bb216]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb216: {
        drop(((_8 as Some).0: std::string::String)) -> [return: bb214, unwind: bb183]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb217: {
        _232 = const false;              // scope 4 at src/bin/toydb.rs:57:27: 57:28
        _241 = discriminant(_6);         // scope 3 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _241) -> [1_isize: bb221, otherwise: bb220]; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb218: {
        switchInt(_232) -> [false: bb217, otherwise: bb219]; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb219: {
        drop(((_7 as Some).0: std::string::String)) -> [return: bb217, unwind: bb184]; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb220: {
        _233 = const false;              // scope 3 at src/bin/toydb.rs:57:27: 57:28
        _242 = discriminant(_5);         // scope 2 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _242) -> [1_isize: bb224, otherwise: bb223]; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb221: {
        switchInt(_233) -> [false: bb220, otherwise: bb222]; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb222: {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb220, unwind: bb185]; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb223: {
        _234 = const false;              // scope 2 at src/bin/toydb.rs:57:27: 57:28
        _243 = discriminant(_4);         // scope 1 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _243) -> [1_isize: bb227, otherwise: bb226]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb224: {
        switchInt(_234) -> [false: bb223, otherwise: bb225]; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb225: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb223, unwind: bb186]; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb226: {
        _235 = const false;              // scope 1 at src/bin/toydb.rs:57:27: 57:28
        _244 = discriminant(_3);         // scope 0 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _244) -> [1_isize: bb230, otherwise: bb229]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb227: {
        switchInt(_235) -> [false: bb226, otherwise: bb228]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb228: {
        drop(((_4 as Some).0: std::collections::HashMap<std::string::String, std::string::String>)) -> [return: bb226, unwind: bb187]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb229: {
        _236 = const false;              // scope 0 at src/bin/toydb.rs:57:27: 57:28
        drop(_2) -> bb173;               // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb230: {
        switchInt(_236) -> [false: bb229, otherwise: bb231]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb231: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb229, unwind: bb188]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb232 (cleanup): {
        goto -> bb235;                   // scope 9 at src/bin/toydb.rs:57:27: 57:28
    }

    bb233 (cleanup): {
        switchInt(_229) -> [false: bb181, otherwise: bb234]; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb234 (cleanup): {
        drop(((_11 as Some).0: std::string::String)) -> bb181; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb235 (cleanup): {
        _245 = discriminant(_11);        // scope 8 at src/bin/toydb.rs:57:27: 57:28
        switchInt(move _245) -> [1_isize: bb233, otherwise: bb181]; // scope 8 at src/bin/toydb.rs:57:27: 57:28
    }

    bb236 (cleanup): {
        switchInt(_230) -> [false: bb182, otherwise: bb237]; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb237 (cleanup): {
        drop(((_10 as Some).0: std::string::String)) -> bb182; // scope 7 at src/bin/toydb.rs:57:27: 57:28
    }

    bb238 (cleanup): {
        switchInt(_231) -> [false: bb183, otherwise: bb239]; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb239 (cleanup): {
        drop(((_8 as Some).0: std::string::String)) -> bb183; // scope 5 at src/bin/toydb.rs:57:27: 57:28
    }

    bb240 (cleanup): {
        switchInt(_232) -> [false: bb184, otherwise: bb241]; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb241 (cleanup): {
        drop(((_7 as Some).0: std::string::String)) -> bb184; // scope 4 at src/bin/toydb.rs:57:27: 57:28
    }

    bb242 (cleanup): {
        switchInt(_233) -> [false: bb185, otherwise: bb243]; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb243 (cleanup): {
        drop(((_6 as Some).0: std::string::String)) -> bb185; // scope 3 at src/bin/toydb.rs:57:27: 57:28
    }

    bb244 (cleanup): {
        switchInt(_234) -> [false: bb186, otherwise: bb245]; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb245 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> bb186; // scope 2 at src/bin/toydb.rs:57:27: 57:28
    }

    bb246 (cleanup): {
        switchInt(_235) -> [false: bb187, otherwise: bb247]; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb247 (cleanup): {
        drop(((_4 as Some).0: std::collections::HashMap<std::string::String, std::string::String>)) -> bb187; // scope 1 at src/bin/toydb.rs:57:27: 57:28
    }

    bb248 (cleanup): {
        switchInt(_236) -> [false: bb188, otherwise: bb249]; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }

    bb249 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> bb188; // scope 0 at src/bin/toydb.rs:57:27: 57:28
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@src/bin/toydb.rs:17:31: 55:2]>, _2: ResumeTy) -> GeneratorState<(), Result<(), toydb::error::Error>> {
    debug _task_context => _198;         // in scope 0 at src/bin/toydb.rs:17:31: 55:2
    let mut _0: std::ops::GeneratorState<(), std::result::Result<(), toydb::error::Error>>; // return place in scope 0 at src/bin/toydb.rs:17:31: 55:2
    let mut _3: clap::App;               // in scope 0 at src/bin/toydb.rs:18:16: 26:10
    let mut _4: clap::App;               // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 580:41
    let mut _5: clap::App;               // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 579:38
    let mut _6: clap::App;               // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 578:39
    let mut _7: clap::App;               // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 577:40
    let mut _8: clap::Arg;               // in scope 0 at src/bin/toydb.rs:20:13: 25:50
    let mut _9: clap::Arg;               // in scope 0 at src/bin/toydb.rs:20:13: 24:35
    let mut _10: clap::Arg;              // in scope 0 at src/bin/toydb.rs:20:13: 23:49
    let mut _11: clap::Arg;              // in scope 0 at src/bin/toydb.rs:20:13: 22:32
    let mut _12: clap::Arg;              // in scope 0 at src/bin/toydb.rs:20:13: 21:28
    let mut _13: clap::Arg;              // in scope 0 at src/bin/toydb.rs:20:13: 20:43
    let mut _14: &str;                   // in scope 0 at src/bin/toydb.rs:20:34: 20:42
    let _15: &str;                       // in scope 0 at src/bin/toydb.rs:20:34: 20:42
    let mut _16: &str;                   // in scope 0 at src/bin/toydb.rs:22:23: 22:31
    let _17: &str;                       // in scope 0 at src/bin/toydb.rs:22:23: 22:31
    let mut _18: &str;                   // in scope 0 at src/bin/toydb.rs:23:23: 23:48
    let _19: &str;                       // in scope 0 at src/bin/toydb.rs:23:23: 23:48
    let mut _20: &str;                   // in scope 0 at src/bin/toydb.rs:25:32: 25:49
    let _21: &str;                       // in scope 0 at src/bin/toydb.rs:25:32: 25:49
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, Config>; // in scope 0 at src/bin/toydb.rs:28:15: 28:61
    let mut _23: std::result::Result<Config, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:28:15: 28:60
    let mut _24: &str;                   // in scope 0 at src/bin/toydb.rs:28:27: 28:59
    let _25: &str;                       // in scope 0 at src/bin/toydb.rs:28:27: 28:59
    let mut _26: std::option::Option<&str>; // in scope 0 at src/bin/toydb.rs:28:27: 28:50
    let mut _27: &clap::ArgMatches;      // in scope 0 at src/bin/toydb.rs:28:27: 28:31
    let mut _28: isize;                  // in scope 0 at src/bin/toydb.rs:28:60: 28:61
    let mut _30: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:28:60: 28:61
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, log::ParseLevelError>, simplelog::LevelFilter>; // in scope 0 at src/bin/toydb.rs:30:20: 30:68
    let mut _33: std::result::Result<simplelog::LevelFilter, log::ParseLevelError>; // in scope 0 at src/bin/toydb.rs:30:20: 30:67
    let mut _34: &str;                   // in scope 0 at src/bin/toydb.rs:30:20: 30:33
    let _35: &str;                       // in scope 0 at src/bin/toydb.rs:30:20: 30:67
    let mut _36: &std::string::String;   // in scope 0 at src/bin/toydb.rs:30:20: 30:33
    let mut _37: isize;                  // in scope 0 at src/bin/toydb.rs:30:67: 30:68
    let mut _39: std::result::Result<std::convert::Infallible, log::ParseLevelError>; // in scope 0 at src/bin/toydb.rs:30:67: 30:68
    let mut _41: bool;                   // in scope 0 at src/bin/toydb.rs:32:8: 32:49
    let mut _42: &simplelog::LevelFilter; // in scope 0 at src/bin/toydb.rs:32:8: 32:16
    let mut _43: &simplelog::LevelFilter; // in scope 0 at src/bin/toydb.rs:32:20: 32:49
    let _44: &mut simplelog::ConfigBuilder; // in scope 0 at src/bin/toydb.rs:33:9: 33:48
    let mut _45: &mut simplelog::ConfigBuilder; // in scope 0 at src/bin/toydb.rs:33:9: 33:18
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, log::SetLoggerError>>; // in scope 0 at src/bin/toydb.rs:35:5: 35:64
    let mut _47: std::result::Result<(), log::SetLoggerError>; // in scope 0 at src/bin/toydb.rs:35:5: 35:63
    let mut _48: simplelog::LevelFilter; // in scope 0 at src/bin/toydb.rs:35:35: 35:43
    let mut _49: simplelog::Config;      // in scope 0 at src/bin/toydb.rs:35:45: 35:62
    let mut _50: &mut simplelog::ConfigBuilder; // in scope 0 at src/bin/toydb.rs:35:45: 35:54
    let mut _51: isize;                  // in scope 0 at src/bin/toydb.rs:35:63: 35:64
    let mut _53: std::result::Result<std::convert::Infallible, log::SetLoggerError>; // in scope 0 at src/bin/toydb.rs:35:63: 35:64
    let mut _56: &std::string::String;   // in scope 0 at src/bin/toydb.rs:37:37: 37:50
    let _57: &std::string::String;       // in scope 0 at src/bin/toydb.rs:37:37: 37:50
    let mut _59: std::boxed::Box<dyn toydb::storage::log::Store>; // in scope 0 at src/bin/toydb.rs:38:52: 42:6
    let mut _60: &str;                   // in scope 0 at src/bin/toydb.rs:38:58: 38:83
    let mut _61: &std::string::String;   // in scope 0 at src/bin/toydb.rs:38:58: 38:74
    let mut _62: bool;                   // in scope 0 at src/bin/toydb.rs:39:9: 39:17
    let mut _63: bool;                   // in scope 0 at src/bin/toydb.rs:39:20: 39:22
    let mut _64: bool;                   // in scope 0 at src/bin/toydb.rs:40:9: 40:17
    let mut _65: std::boxed::Box<toydb::storage::log::Hybrid>; // in scope 0 at src/bin/toydb.rs:39:26: 39:78
    let mut _66: toydb::storage::log::Hybrid; // in scope 0 at src/bin/toydb.rs:39:35: 39:77
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::storage::log::Hybrid>; // in scope 0 at src/bin/toydb.rs:39:35: 39:77
    let mut _68: std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:39:35: 39:76
    let mut _69: &std::path::Path;       // in scope 0 at src/bin/toydb.rs:39:61: 39:65
    let mut _70: bool;                   // in scope 0 at src/bin/toydb.rs:39:67: 39:75
    let mut _71: isize;                  // in scope 0 at src/bin/toydb.rs:39:76: 39:77
    let mut _73: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:39:76: 39:77
    let mut _75: std::boxed::Box<toydb::storage::log::Memory>; // in scope 0 at src/bin/toydb.rs:40:21: 40:58
    let mut _76: toydb::storage::log::Memory; // in scope 0 at src/bin/toydb.rs:40:30: 40:57
    let mut _78: toydb::error::Error;    // in scope 0 at src/bin/toydb.rs:41:28: 41:90
    let mut _79: std::string::String;    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:110:23: 113:6
    let mut _81: std::fmt::Arguments;    // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _82: [std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _83: (&&str,);               // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _84: &&str;                  // in scope 0 at src/bin/toydb.rs:41:84: 41:88
    let mut _86: std::fmt::ArgumentV1;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _87: &&str;                  // in scope 0 at src/bin/toydb.rs:41:84: 41:88
    let mut _88: for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/bin/toydb.rs:41:84: 41:88
    let mut _90: &[&str];                // in scope 0 at src/bin/toydb.rs:41:50: 41:82
    let mut _91: &[&str; 1];             // in scope 0 at src/bin/toydb.rs:41:50: 41:82
    let _92: &[&str; 1];                 // in scope 0 at src/bin/toydb.rs:41:50: 41:82
    let mut _93: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _94: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _96: std::boxed::Box<dyn toydb::storage::kv::Store>; // in scope 0 at src/bin/toydb.rs:43:50: 47:6
    let mut _97: &str;                   // in scope 0 at src/bin/toydb.rs:43:56: 43:80
    let mut _98: &std::string::String;   // in scope 0 at src/bin/toydb.rs:43:56: 43:71
    let mut _99: bool;                   // in scope 0 at src/bin/toydb.rs:44:9: 44:17
    let mut _100: bool;                  // in scope 0 at src/bin/toydb.rs:44:20: 44:22
    let mut _101: bool;                  // in scope 0 at src/bin/toydb.rs:45:9: 45:20
    let mut _102: std::boxed::Box<toydb::storage::kv::Memory>; // in scope 0 at src/bin/toydb.rs:44:26: 44:62
    let mut _103: toydb::storage::kv::Memory; // in scope 0 at src/bin/toydb.rs:44:35: 44:61
    let mut _104: std::boxed::Box<toydb::storage::kv::StdMemory>; // in scope 0 at src/bin/toydb.rs:45:24: 45:63
    let mut _105: toydb::storage::kv::StdMemory; // in scope 0 at src/bin/toydb.rs:45:33: 45:62
    let mut _107: toydb::error::Error;   // in scope 0 at src/bin/toydb.rs:46:28: 46:89
    let mut _108: std::string::String;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:110:23: 113:6
    let mut _110: std::fmt::Arguments;   // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _111: [std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _112: (&&str,);              // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _113: &&str;                 // in scope 0 at src/bin/toydb.rs:46:83: 46:87
    let mut _115: std::fmt::ArgumentV1;  // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _116: &&str;                 // in scope 0 at src/bin/toydb.rs:46:83: 46:87
    let mut _117: for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at src/bin/toydb.rs:46:83: 46:87
    let mut _119: &[&str];               // in scope 0 at src/bin/toydb.rs:46:50: 46:81
    let mut _120: &[&str; 1];            // in scope 0 at src/bin/toydb.rs:46:50: 46:81
    let _121: &[&str; 1];                // in scope 0 at src/bin/toydb.rs:46:50: 46:81
    let mut _122: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _123: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
    let mut _124: impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 53:17
    let mut _125: toydb::Server;         // in scope 0 at src/bin/toydb.rs:49:5: 52:16
    let mut _126: std::result::Result<toydb::Server, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _127: impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 51:51
    let mut _128: toydb::Server;         // in scope 0 at src/bin/toydb.rs:49:5: 50:16
    let mut _129: std::result::Result<toydb::Server, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _130: impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 49:59
    let mut _131: &str;                  // in scope 0 at src/bin/toydb.rs:49:17: 49:24
    let _132: &str;                      // in scope 0 at src/bin/toydb.rs:49:17: 49:24
    let mut _133: &std::string::String;  // in scope 0 at src/bin/toydb.rs:49:17: 49:24
    let _134: &std::string::String;      // in scope 0 at src/bin/toydb.rs:49:17: 49:24
    let mut _135: std::collections::HashMap<std::string::String, std::string::String>; // in scope 0 at src/bin/toydb.rs:49:26: 49:35
    let mut _136: std::boxed::Box<dyn toydb::storage::log::Store>; // in scope 0 at src/bin/toydb.rs:49:37: 49:47
    let mut _137: std::boxed::Box<dyn toydb::storage::log::Store>; // in scope 0 at src/bin/toydb.rs:49:37: 49:47
    let mut _138: std::boxed::Box<dyn toydb::storage::kv::Store>; // in scope 0 at src/bin/toydb.rs:49:49: 49:58
    let mut _139: std::boxed::Box<dyn toydb::storage::kv::Store>; // in scope 0 at src/bin/toydb.rs:49:49: 49:58
    let mut _140: std::task::Poll<std::result::Result<toydb::Server, toydb::error::Error>>; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _141: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _142: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _143: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _144: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _145: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _146: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _147: isize;                 // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _149: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _150: ();                    // in scope 0 at src/bin/toydb.rs:49:5: 50:15
    let mut _151: isize;                 // in scope 0 at src/bin/toydb.rs:50:15: 50:16
    let mut _153: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:50:15: 50:16
    let mut _155: &str;                  // in scope 0 at src/bin/toydb.rs:51:17: 51:32
    let _156: &str;                      // in scope 0 at src/bin/toydb.rs:51:17: 51:32
    let mut _157: &std::string::String;  // in scope 0 at src/bin/toydb.rs:51:17: 51:32
    let _158: &std::string::String;      // in scope 0 at src/bin/toydb.rs:51:17: 51:32
    let mut _159: &str;                  // in scope 0 at src/bin/toydb.rs:51:34: 51:50
    let _160: &str;                      // in scope 0 at src/bin/toydb.rs:51:34: 51:50
    let mut _161: &std::string::String;  // in scope 0 at src/bin/toydb.rs:51:34: 51:50
    let _162: &std::string::String;      // in scope 0 at src/bin/toydb.rs:51:34: 51:50
    let mut _163: std::task::Poll<std::result::Result<toydb::Server, toydb::error::Error>>; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _164: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _165: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _166: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _167: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _168: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _169: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _170: isize;                 // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _172: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _173: ();                    // in scope 0 at src/bin/toydb.rs:49:5: 52:15
    let mut _174: isize;                 // in scope 0 at src/bin/toydb.rs:52:15: 52:16
    let mut _176: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:52:15: 52:16
    let mut _178: std::task::Poll<std::result::Result<(), toydb::error::Error>>; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _179: std::pin::Pin<&mut impl std::future::Future>; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _180: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _181: &mut impl std::future::Future; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _182: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _183: &mut std::task::Context; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _184: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _185: isize;                 // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _187: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _188: ();                    // in scope 0 at src/bin/toydb.rs:49:5: 54:15
    let mut _192: bool;                  // in scope 0 at src/bin/toydb.rs:51:50: 51:51
    let mut _193: bool;                  // in scope 0 at src/bin/toydb.rs:55:1: 55:2
    let mut _194: bool;                  // in scope 0 at src/bin/toydb.rs:55:1: 55:2
    let mut _195: bool;                  // in scope 0 at src/bin/toydb.rs:55:1: 55:2
    let mut _196: bool;                  // in scope 0 at src/bin/toydb.rs:26:9: 26:10
    let mut _197: std::result::Result<(), toydb::error::Error>; // in scope 0 at src/bin/toydb.rs:17:31: 55:2
    let mut _198: std::future::ResumeTy; // in scope 0 at src/bin/toydb.rs:17:31: 55:2
    let mut _199: u32;                   // in scope 0 at src/bin/toydb.rs:17:31: 55:2
    scope 1 {
        debug opts => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches); // in scope 1 at src/bin/toydb.rs:18:9: 18:13
        let _29: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 1 at src/bin/toydb.rs:28:60: 28:61
        let _31: Config;                 // in scope 1 at src/bin/toydb.rs:28:15: 28:61
        scope 2 {
            debug cfg => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config); // in scope 2 at src/bin/toydb.rs:28:9: 28:12
            let _38: std::result::Result<std::convert::Infallible, log::ParseLevelError>; // in scope 2 at src/bin/toydb.rs:30:67: 30:68
            let _40: simplelog::LevelFilter; // in scope 2 at src/bin/toydb.rs:30:20: 30:68
            scope 7 {
                debug loglevel => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).2: simplelog::LevelFilter); // in scope 7 at src/bin/toydb.rs:30:9: 30:17
                scope 12 {
                    debug logconfig => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder); // in scope 12 at src/bin/toydb.rs:31:9: 31:22
                    let _52: std::result::Result<std::convert::Infallible, log::SetLoggerError>; // in scope 12 at src/bin/toydb.rs:35:63: 35:64
                    let _54: ();         // in scope 12 at src/bin/toydb.rs:35:5: 35:64
                    let _55: &std::path::Path; // in scope 12 at src/bin/toydb.rs:37:9: 37:13
                    let mut _191: &simplelog::LevelFilter; // in scope 12 at src/bin/toydb.rs:32:20: 32:49
                    scope 13 {
                        debug residual => _52; // in scope 13 at src/bin/toydb.rs:35:63: 35:64
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _54; // in scope 15 at src/bin/toydb.rs:35:5: 35:64
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug path => _55; // in scope 17 at src/bin/toydb.rs:37:9: 37:13
                        let _58: std::boxed::Box<dyn toydb::storage::log::Store>; // in scope 17 at src/bin/toydb.rs:38:9: 38:19
                        let _72: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 17 at src/bin/toydb.rs:39:76: 39:77
                        let _74: toydb::storage::log::Hybrid; // in scope 17 at src/bin/toydb.rs:39:35: 39:77
                        let _77: &str;   // in scope 17 at src/bin/toydb.rs:41:9: 41:13
                        scope 18 {
                            debug raft_store => _58; // in scope 18 at src/bin/toydb.rs:38:9: 38:19
                            let _95: std::boxed::Box<dyn toydb::storage::kv::Store>; // in scope 18 at src/bin/toydb.rs:43:9: 43:18
                            let _106: &str; // in scope 18 at src/bin/toydb.rs:46:9: 46:13
                            scope 28 {
                                debug sql_store => _95; // in scope 28 at src/bin/toydb.rs:43:9: 43:18
                                let _152: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 28 at src/bin/toydb.rs:50:15: 50:16
                                let _154: toydb::Server; // in scope 28 at src/bin/toydb.rs:49:5: 50:16
                                let _175: std::result::Result<std::convert::Infallible, toydb::error::Error>; // in scope 28 at src/bin/toydb.rs:52:15: 52:16
                                let _177: toydb::Server; // in scope 28 at src/bin/toydb.rs:49:5: 52:16
                                scope 34 {
                                    debug pinned => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).4: impl std::future::Future); // in scope 34 at src/bin/toydb.rs:49:5: 50:15
                                    let _148: std::result::Result<toydb::Server, toydb::error::Error>; // in scope 34 at src/bin/toydb.rs:49:5: 50:15
                                    scope 35 {
                                    }
                                    scope 36 {
                                        debug result => _148; // in scope 36 at src/bin/toydb.rs:49:5: 50:15
                                    }
                                }
                                scope 37 {
                                    debug residual => _152; // in scope 37 at src/bin/toydb.rs:50:15: 50:16
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _154; // in scope 39 at src/bin/toydb.rs:49:5: 50:16
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug pinned => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).5: impl std::future::Future); // in scope 41 at src/bin/toydb.rs:49:5: 52:15
                                    let _171: std::result::Result<toydb::Server, toydb::error::Error>; // in scope 41 at src/bin/toydb.rs:49:5: 52:15
                                    scope 42 {
                                    }
                                    scope 43 {
                                        debug result => _171; // in scope 43 at src/bin/toydb.rs:49:5: 52:15
                                    }
                                }
                                scope 44 {
                                    debug residual => _175; // in scope 44 at src/bin/toydb.rs:52:15: 52:16
                                    scope 45 {
                                    }
                                }
                                scope 46 {
                                    debug val => _177; // in scope 46 at src/bin/toydb.rs:49:5: 52:16
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug pinned => (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).6: impl std::future::Future); // in scope 48 at src/bin/toydb.rs:49:5: 54:15
                                    let _186: std::result::Result<(), toydb::error::Error>; // in scope 48 at src/bin/toydb.rs:49:5: 54:15
                                    scope 49 {
                                    }
                                    scope 50 {
                                        debug result => _186; // in scope 50 at src/bin/toydb.rs:49:5: 54:15
                                    }
                                }
                            }
                            scope 29 {
                                debug name => _106; // in scope 29 at src/bin/toydb.rs:46:9: 46:13
                                let _109: std::string::String; // in scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:13: 111:16
                                let _114: &&str; // in scope 29 at src/bin/toydb.rs:46:83: 46:87
                                let _118: &[std::fmt::ArgumentV1; 1]; // in scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                scope 30 {
                                    debug res => _109; // in scope 30 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:13: 111:16
                                }
                                scope 31 {
                                    debug arg0 => _114; // in scope 31 at src/bin/toydb.rs:46:83: 46:87
                                }
                                scope 32 {
                                    debug args => _118; // in scope 32 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                    scope 33 {
                                        let mut _190: &[&str; 1]; // in scope 33 at src/bin/toydb.rs:46:50: 46:81
                                    }
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _72; // in scope 19 at src/bin/toydb.rs:39:76: 39:77
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _74; // in scope 21 at src/bin/toydb.rs:39:35: 39:77
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug name => _77; // in scope 23 at src/bin/toydb.rs:41:9: 41:13
                            let _80: std::string::String; // in scope 23 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:13: 111:16
                            let _85: &&str; // in scope 23 at src/bin/toydb.rs:41:84: 41:88
                            let _89: &[std::fmt::ArgumentV1; 1]; // in scope 23 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                            scope 24 {
                                debug res => _80; // in scope 24 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:13: 111:16
                            }
                            scope 25 {
                                debug arg0 => _85; // in scope 25 at src/bin/toydb.rs:41:84: 41:88
                            }
                            scope 26 {
                                debug args => _89; // in scope 26 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                scope 27 {
                                    let mut _189: &[&str; 1]; // in scope 27 at src/bin/toydb.rs:41:50: 41:82
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _38;   // in scope 8 at src/bin/toydb.rs:30:67: 30:68
                scope 9 {
                }
            }
            scope 10 {
                debug val => _40;        // in scope 10 at src/bin/toydb.rs:30:20: 30:68
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _29;       // in scope 3 at src/bin/toydb.rs:28:60: 28:61
            scope 4 {
            }
        }
        scope 5 {
            debug val => _31;            // in scope 5 at src/bin/toydb.rs:28:15: 28:61
            scope 6 {
            }
        }
    }

    bb0: {
        _199 = discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))); // scope 0 at src/bin/toydb.rs:17:31: 55:2
        switchInt(move _199) -> [0_u32: bb1, 1_u32: bb280, 2_u32: bb279, 3_u32: bb276, 4_u32: bb277, 5_u32: bb278, otherwise: bb281]; // scope 0 at src/bin/toydb.rs:17:31: 55:2
    }

    bb1: {
        _198 = move _2;                  // scope 0 at src/bin/toydb.rs:17:31: 55:2
        _192 = const false;              // scope 0 at src/bin/toydb.rs:18:9: 18:13
        _194 = const false;              // scope 0 at src/bin/toydb.rs:18:9: 18:13
        _196 = const false;              // scope 0 at src/bin/toydb.rs:18:9: 18:13
        _193 = const false;              // scope 0 at src/bin/toydb.rs:18:9: 18:13
        _195 = const false;              // scope 0 at src/bin/toydb.rs:18:9: 18:13
        _7 = App::new::<&str>(const "toydb") -> [return: bb2, unwind: bb177]; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 577:40
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 577:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> clap::App {clap::App::new::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:546:9: 546:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb2: {
        _6 = App::version::<&str>(move _7, const "0.1.0") -> [return: bb3, unwind: bb177]; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 578:39
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:578:14: 578:21
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::version::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [48, 46, 49, 46, 48], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:439:9: 439:34
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [48, 46, 49, 46, 48], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb3: {
        _5 = App::author::<&str>(move _6, const "Erik Grinaker <erik@grinaker.org>") -> [return: bb4, unwind: bb177]; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 579:38
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:579:14: 579:20
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::author::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [69, 114, 105, 107, 32, 71, 114, 105, 110, 97, 107, 101, 114, 32, 60, 101, 114, 105, 107, 64, 103, 114, 105, 110, 97, 107, 101, 114, 46, 111, 114, 103, 62], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8589934591], len: Size { raw: 33 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 33 })
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:503:9: 503:34
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69, 114, 105, 107, 32, 71, 114, 105, 110, 97, 107, 101, 114, 32, 60, 101, 114, 105, 107, 64, 103, 114, 105, 110, 97, 107, 101, 114, 46, 111, 114, 103, 62], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8589934591], len: Size { raw: 33 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 33 }) }
    }

    bb4: {
        _4 = App::about::<&str>(move _5, const "A distributed SQL database") -> [return: bb5, unwind: bb177]; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:577:9: 580:41
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:580:14: 580:19
                                         // + literal: Const { ty: fn(clap::App, &str) -> clap::App {clap::App::about::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [65, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 83, 81, 76, 32, 100, 97, 116, 97, 98, 97, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 })
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:525:9: 525:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 83, 81, 76, 32, 100, 97, 116, 97, 98, 97, 115, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 }) }
    }

    bb5: {
        _196 = const true;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs:580:40: 580:41
        _15 = const "config";            // scope 0 at src/bin/toydb.rs:20:34: 20:42
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:20:34: 20:42
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _14 = _15;                       // scope 0 at src/bin/toydb.rs:20:34: 20:42
        _13 = Arg::with_name(move _14) -> [return: bb6, unwind: bb175]; // scope 0 at src/bin/toydb.rs:20:13: 20:43
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:20:13: 20:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> clap::Arg {clap::Arg::with_name}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _12 = Arg::short::<&str>(move _13, const "c") -> [return: bb7, unwind: bb175]; // scope 0 at src/bin/toydb.rs:20:13: 21:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:21:18: 21:23
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::short::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:21:24: 21:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
    }

    bb7: {
        _17 = const "config";            // scope 0 at src/bin/toydb.rs:22:23: 22:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:22:23: 22:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
        _16 = _17;                       // scope 0 at src/bin/toydb.rs:22:23: 22:31
        _11 = Arg::long(move _12, move _16) -> [return: bb8, unwind: bb173]; // scope 0 at src/bin/toydb.rs:20:13: 22:32
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:22:18: 22:22
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::long}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _19 = const "Configuration file path"; // scope 0 at src/bin/toydb.rs:23:23: 23:48
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 112, 97, 116, 104], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8388607], len: Size { raw: 23 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 23 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:23:23: 23:48
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 112, 97, 116, 104], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8388607], len: Size { raw: 23 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 23 }) }
        _18 = _19;                       // scope 0 at src/bin/toydb.rs:23:23: 23:48
        _10 = Arg::help(move _11, move _18) -> [return: bb9, unwind: bb171]; // scope 0 at src/bin/toydb.rs:20:13: 23:49
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:23:18: 23:22
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::help}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _9 = Arg::takes_value(move _10, const true) -> [return: bb10, unwind: bb171]; // scope 0 at src/bin/toydb.rs:20:13: 24:35
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:24:18: 24:29
                                         // + literal: Const { ty: fn(clap::Arg, bool) -> clap::Arg {clap::Arg::takes_value}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _21 = const "/etc/toydb.yaml";   // scope 0 at src/bin/toydb.rs:25:32: 25:49
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [47, 101, 116, 99, 47, 116, 111, 121, 100, 98, 46, 121, 97, 109, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [32767], len: Size { raw: 15 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 15 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:25:32: 25:49
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [47, 101, 116, 99, 47, 116, 111, 121, 100, 98, 46, 121, 97, 109, 108], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [32767], len: Size { raw: 15 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 15 }) }
        _20 = _21;                       // scope 0 at src/bin/toydb.rs:25:32: 25:49
        _8 = Arg::default_value(move _9, move _20) -> [return: bb11, unwind: bb169]; // scope 0 at src/bin/toydb.rs:20:13: 25:50
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:25:18: 25:31
                                         // + literal: Const { ty: fn(clap::Arg, &str) -> clap::Arg {clap::Arg::default_value}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:18:16: 26:10
        _3 = App::arg::<Arg>(move _4, move _8) -> [return: bb12, unwind: bb169]; // scope 0 at src/bin/toydb.rs:18:16: 26:10
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:19:10: 19:13
                                         // + literal: Const { ty: fn(clap::App, clap::Arg) -> clap::App {clap::App::arg::<clap::Arg>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches) = App::get_matches(move _3) -> [return: bb13, unwind: bb275]; // scope 0 at src/bin/toydb.rs:18:16: 27:23
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:27:10: 27:21
                                         // + literal: Const { ty: fn(clap::App) -> clap::ArgMatches {clap::App::get_matches}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _27 = &(((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches); // scope 1 at src/bin/toydb.rs:28:27: 28:31
        _26 = ArgMatches::value_of::<&str>(move _27, const "config") -> [return: bb14, unwind: bb168]; // scope 1 at src/bin/toydb.rs:28:27: 28:50
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:32: 28:40
                                         // + literal: Const { ty: for<'r> fn(&'r clap::ArgMatches, &str) -> std::option::Option<&'r str> {clap::ArgMatches::value_of::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:41: 28:49
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb14: {
        _25 = std::option::Option::<&str>::unwrap(move _26) -> [return: bb15, unwind: bb168]; // scope 1 at src/bin/toydb.rs:28:27: 28:59
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:51: 28:57
                                         // + literal: Const { ty: fn(std::option::Option<&str>) -> &str {std::option::Option::<&str>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _24 = _25;                       // scope 1 at src/bin/toydb.rs:28:27: 28:59
        _23 = Config::new(move _24) -> [return: bb16, unwind: bb168]; // scope 1 at src/bin/toydb.rs:28:15: 28:60
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:15: 28:26
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::result::Result<Config, toydb::error::Error> {Config::new}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _22 = <Result<Config, toydb::error::Error> as Try>::branch(move _23) -> [return: bb17, unwind: bb168]; // scope 1 at src/bin/toydb.rs:28:15: 28:61
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:15: 28:61
                                         // + literal: Const { ty: fn(std::result::Result<Config, toydb::error::Error>) -> std::ops::ControlFlow<<std::result::Result<Config, toydb::error::Error> as std::ops::Try>::Residual, <std::result::Result<Config, toydb::error::Error> as std::ops::Try>::Output> {<std::result::Result<Config, toydb::error::Error> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _28 = discriminant(_22);         // scope 1 at src/bin/toydb.rs:28:15: 28:61
        switchInt(move _28) -> [0_isize: bb18, 1_isize: bb20, otherwise: bb19]; // scope 1 at src/bin/toydb.rs:28:15: 28:61
    }

    bb18: {
        _31 = move ((_22 as Continue).0: Config); // scope 1 at src/bin/toydb.rs:28:15: 28:61
        _195 = const true;               // scope 6 at src/bin/toydb.rs:28:15: 28:61
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config) = move _31; // scope 6 at src/bin/toydb.rs:28:15: 28:61
        _36 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String); // scope 2 at src/bin/toydb.rs:30:20: 30:33
        _35 = <std::string::String as Deref>::deref(move _36) -> [return: bb22, unwind: bb166]; // scope 2 at src/bin/toydb.rs:30:20: 30:67
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:30:20: 30:67
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        unreachable;                     // scope 1 at src/bin/toydb.rs:28:15: 28:61
    }

    bb20: {
        _29 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, toydb::error::Error>); // scope 1 at src/bin/toydb.rs:28:60: 28:61
        _30 = move _29;                  // scope 4 at src/bin/toydb.rs:28:60: 28:61
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, toydb::error::Error>>>::from_residual(move _30) -> [return: bb21, unwind: bb167]; // scope 4 at src/bin/toydb.rs:28:15: 28:61
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:28:60: 28:61
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, toydb::error::Error>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, toydb::error::Error>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        goto -> bb128;                   // scope 1 at no-location
    }

    bb22: {
        _34 = _35;                       // scope 2 at src/bin/toydb.rs:30:20: 30:33
        _33 = core::str::<impl str>::parse::<LevelFilter>(move _34) -> [return: bb23, unwind: bb166]; // scope 2 at src/bin/toydb.rs:30:20: 30:67
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:30:34: 30:39
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::result::Result<simplelog::LevelFilter, <simplelog::LevelFilter as std::str::FromStr>::Err> {core::str::<impl str>::parse::<simplelog::LevelFilter>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _32 = <Result<LevelFilter, log::ParseLevelError> as Try>::branch(move _33) -> [return: bb24, unwind: bb166]; // scope 2 at src/bin/toydb.rs:30:20: 30:68
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:30:20: 30:68
                                         // + literal: Const { ty: fn(std::result::Result<simplelog::LevelFilter, log::ParseLevelError>) -> std::ops::ControlFlow<<std::result::Result<simplelog::LevelFilter, log::ParseLevelError> as std::ops::Try>::Residual, <std::result::Result<simplelog::LevelFilter, log::ParseLevelError> as std::ops::Try>::Output> {<std::result::Result<simplelog::LevelFilter, log::ParseLevelError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _37 = discriminant(_32);         // scope 2 at src/bin/toydb.rs:30:20: 30:68
        switchInt(move _37) -> [0_isize: bb25, 1_isize: bb27, otherwise: bb26]; // scope 2 at src/bin/toydb.rs:30:20: 30:68
    }

    bb25: {
        _40 = ((_32 as Continue).0: simplelog::LevelFilter); // scope 2 at src/bin/toydb.rs:30:20: 30:68
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).2: simplelog::LevelFilter) = _40; // scope 11 at src/bin/toydb.rs:30:20: 30:68
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder) = ConfigBuilder::new() -> [return: bb28, unwind: bb166]; // scope 7 at src/bin/toydb.rs:31:25: 31:56
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:31:25: 31:54
                                         // + literal: Const { ty: fn() -> simplelog::ConfigBuilder {simplelog::ConfigBuilder::new}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        unreachable;                     // scope 2 at src/bin/toydb.rs:30:20: 30:68
    }

    bb27: {
        _38 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, log::ParseLevelError>); // scope 2 at src/bin/toydb.rs:30:67: 30:68
        _39 = move _38;                  // scope 9 at src/bin/toydb.rs:30:67: 30:68
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, log::ParseLevelError>>>::from_residual(move _39) -> [return: bb282, unwind: bb166]; // scope 9 at src/bin/toydb.rs:30:20: 30:68
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:30:67: 30:68
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, log::ParseLevelError>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, log::ParseLevelError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _42 = &(((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).2: simplelog::LevelFilter); // scope 12 at src/bin/toydb.rs:32:8: 32:16
        _191 = const main::{closure#0}::promoted[2]; // scope 12 at src/bin/toydb.rs:32:20: 32:49
                                         // ty::Const
                                         // + ty: &simplelog::LevelFilter
                                         // + val: Unevaluated(main::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:32:20: 32:49
                                         // + literal: Const { ty: &simplelog::LevelFilter, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:41 ~ toydb[e000]::main::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[2]) }) }
        _43 = _191;                      // scope 12 at src/bin/toydb.rs:32:20: 32:49
        _41 = <LevelFilter as PartialEq>::ne(move _42, move _43) -> [return: bb29, unwind: bb165]; // scope 12 at src/bin/toydb.rs:32:8: 32:49
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:32:8: 32:49
                                         // + literal: Const { ty: for<'r, 's> fn(&'r simplelog::LevelFilter, &'s simplelog::LevelFilter) -> bool {<simplelog::LevelFilter as std::cmp::PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        switchInt(move _41) -> [false: bb32, otherwise: bb30]; // scope 12 at src/bin/toydb.rs:32:8: 32:49
    }

    bb30: {
        _45 = &mut (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder); // scope 12 at src/bin/toydb.rs:33:9: 33:18
        _44 = ConfigBuilder::add_filter_allow_str(move _45, const "toydb") -> [return: bb31, unwind: bb165]; // scope 12 at src/bin/toydb.rs:33:9: 33:48
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:33:19: 33:39
                                         // + literal: Const { ty: for<'r> fn(&'r mut simplelog::ConfigBuilder, &'static str) -> &'r mut simplelog::ConfigBuilder {simplelog::ConfigBuilder::add_filter_allow_str}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:33:40: 33:47
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [116, 111, 121, 100, 98], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb31: {
        goto -> bb33;                    // scope 12 at src/bin/toydb.rs:32:5: 34:6
    }

    bb32: {
        goto -> bb33;                    // scope 12 at src/bin/toydb.rs:32:5: 34:6
    }

    bb33: {
        _48 = (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).2: simplelog::LevelFilter); // scope 12 at src/bin/toydb.rs:35:35: 35:43
        _50 = &mut (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder); // scope 12 at src/bin/toydb.rs:35:45: 35:54
        _49 = ConfigBuilder::build(move _50) -> [return: bb34, unwind: bb165]; // scope 12 at src/bin/toydb.rs:35:45: 35:62
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:35:55: 35:60
                                         // + literal: Const { ty: for<'r> fn(&'r mut simplelog::ConfigBuilder) -> simplelog::Config {simplelog::ConfigBuilder::build}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _47 = SimpleLogger::init(move _48, move _49) -> [return: bb35, unwind: bb165]; // scope 12 at src/bin/toydb.rs:35:5: 35:63
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:35:5: 35:34
                                         // + literal: Const { ty: fn(simplelog::LevelFilter, simplelog::Config) -> std::result::Result<(), log::SetLoggerError> {simplelog::SimpleLogger::init}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _46 = <Result<(), log::SetLoggerError> as Try>::branch(move _47) -> [return: bb36, unwind: bb165]; // scope 12 at src/bin/toydb.rs:35:5: 35:64
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:35:5: 35:64
                                         // + literal: Const { ty: fn(std::result::Result<(), log::SetLoggerError>) -> std::ops::ControlFlow<<std::result::Result<(), log::SetLoggerError> as std::ops::Try>::Residual, <std::result::Result<(), log::SetLoggerError> as std::ops::Try>::Output> {<std::result::Result<(), log::SetLoggerError> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        _51 = discriminant(_46);         // scope 12 at src/bin/toydb.rs:35:5: 35:64
        switchInt(move _51) -> [0_isize: bb37, 1_isize: bb39, otherwise: bb38]; // scope 12 at src/bin/toydb.rs:35:5: 35:64
    }

    bb37: {
        _54 = ((_46 as Continue).0: ()); // scope 12 at src/bin/toydb.rs:35:5: 35:64
        _57 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String); // scope 12 at src/bin/toydb.rs:37:37: 37:50
        _56 = _57;                       // scope 12 at src/bin/toydb.rs:37:37: 37:50
        _55 = Path::new::<std::string::String>(move _56) -> [return: bb40, unwind: bb165]; // scope 12 at src/bin/toydb.rs:37:16: 37:51
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:37:16: 37:36
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r std::path::Path {std::path::Path::new::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        unreachable;                     // scope 12 at src/bin/toydb.rs:35:5: 35:64
    }

    bb39: {
        _52 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, log::SetLoggerError>); // scope 12 at src/bin/toydb.rs:35:63: 35:64
        _53 = move _52;                  // scope 14 at src/bin/toydb.rs:35:63: 35:64
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, log::SetLoggerError>>>::from_residual(move _53) -> [return: bb283, unwind: bb165]; // scope 14 at src/bin/toydb.rs:35:5: 35:64
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:35:63: 35:64
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, log::SetLoggerError>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, log::SetLoggerError>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        _61 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String); // scope 17 at src/bin/toydb.rs:38:58: 38:74
        _60 = std::string::String::as_str(move _61) -> [return: bb41, unwind: bb164]; // scope 17 at src/bin/toydb.rs:38:58: 38:83
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:38:75: 38:81
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r str {std::string::String::as_str}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        _62 = <str as PartialEq>::eq(_60, const "hybrid") -> [return: bb42, unwind: bb164]; // scope 17 at src/bin/toydb.rs:39:9: 39:17
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:9: 39:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:9: 39:17
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 121, 98, 114, 105, 100], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb42: {
        switchInt(move _62) -> [false: bb43, otherwise: bb48]; // scope 17 at src/bin/toydb.rs:39:9: 39:17
    }

    bb43: {
        _63 = <str as PartialEq>::eq(_60, const "") -> [return: bb44, unwind: bb164]; // scope 17 at src/bin/toydb.rs:39:20: 39:22
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:20: 39:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:20: 39:22
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
    }

    bb44: {
        switchInt(move _63) -> [false: bb45, otherwise: bb48]; // scope 17 at src/bin/toydb.rs:39:20: 39:22
    }

    bb45: {
        _64 = <str as PartialEq>::eq(_60, const "memory") -> [return: bb46, unwind: bb164]; // scope 17 at src/bin/toydb.rs:40:9: 40:17
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:40:9: 40:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:40:9: 40:17
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb46: {
        switchInt(move _64) -> [false: bb47, otherwise: bb56]; // scope 17 at src/bin/toydb.rs:40:9: 40:17
    }

    bb47: {
        _77 = _60;                       // scope 17 at src/bin/toydb.rs:41:9: 41:13
        _84 = &_77;                      // scope 23 at src/bin/toydb.rs:41:84: 41:88
        (_83.0: &&str) = move _84;       // scope 23 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _85 = (_83.0: &&str);            // scope 23 at src/bin/toydb.rs:41:84: 41:88
        _87 = _85;                       // scope 25 at src/bin/toydb.rs:41:84: 41:88
        _88 = <&str as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 25 at src/bin/toydb.rs:41:84: 41:88
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:41:84: 41:88
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&str as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _86 = ArgumentV1::new::<&str>(move _87, move _88) -> [return: bb59, unwind: bb164]; // scope 25 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str, for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        _69 = _55;                       // scope 17 at src/bin/toydb.rs:39:61: 39:65
        _70 = ((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).6: bool); // scope 17 at src/bin/toydb.rs:39:67: 39:75
        _68 = Hybrid::new(move _69, move _70) -> [return: bb49, unwind: bb163]; // scope 17 at src/bin/toydb.rs:39:35: 39:76
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:35: 39:60
                                         // + literal: Const { ty: for<'r> fn(&'r std::path::Path, bool) -> std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error> {toydb::storage::log::Hybrid::new}, val: Value(Scalar(<ZST>)) }
    }

    bb49: {
        _67 = <Result<Hybrid, toydb::error::Error> as Try>::branch(move _68) -> [return: bb50, unwind: bb163]; // scope 17 at src/bin/toydb.rs:39:35: 39:77
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:35: 39:77
                                         // + literal: Const { ty: fn(std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error>) -> std::ops::ControlFlow<<std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error> as std::ops::Try>::Residual, <std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error> as std::ops::Try>::Output> {<std::result::Result<toydb::storage::log::Hybrid, toydb::error::Error> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb50: {
        _71 = discriminant(_67);         // scope 17 at src/bin/toydb.rs:39:35: 39:77
        switchInt(move _71) -> [0_isize: bb51, 1_isize: bb53, otherwise: bb52]; // scope 17 at src/bin/toydb.rs:39:35: 39:77
    }

    bb51: {
        _74 = move ((_67 as Continue).0: toydb::storage::log::Hybrid); // scope 17 at src/bin/toydb.rs:39:35: 39:77
        _66 = move _74;                  // scope 22 at src/bin/toydb.rs:39:35: 39:77
        _65 = Box::<Hybrid>::new(move _66) -> [return: bb55, unwind: bb273]; // scope 17 at src/bin/toydb.rs:39:26: 39:78
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:26: 39:34
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(toydb::storage::log::Hybrid) -> std::boxed::Box<toydb::storage::log::Hybrid> {std::boxed::Box::<toydb::storage::log::Hybrid>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        unreachable;                     // scope 17 at src/bin/toydb.rs:39:35: 39:77
    }

    bb53: {
        _72 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, toydb::error::Error>); // scope 17 at src/bin/toydb.rs:39:76: 39:77
        _73 = move _72;                  // scope 20 at src/bin/toydb.rs:39:76: 39:77
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, toydb::error::Error>>>::from_residual(move _73) -> [return: bb54, unwind: bb273]; // scope 20 at src/bin/toydb.rs:39:35: 39:77
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:39:76: 39:77
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, toydb::error::Error>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, toydb::error::Error>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb54: {
        goto -> bb125;                   // scope 17 at no-location
    }

    bb55: {
        _59 = move _65 as std::boxed::Box<dyn toydb::storage::log::Store> (Pointer(Unsize)); // scope 17 at src/bin/toydb.rs:39:26: 39:78
        goto -> bb62;                    // scope 17 at src/bin/toydb.rs:39:77: 39:78
    }

    bb56: {
        _76 = toydb::storage::log::Memory::new() -> [return: bb57, unwind: bb164]; // scope 17 at src/bin/toydb.rs:40:30: 40:57
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:40:30: 40:55
                                         // + literal: Const { ty: fn() -> toydb::storage::log::Memory {toydb::storage::log::Memory::new}, val: Value(Scalar(<ZST>)) }
    }

    bb57: {
        _75 = Box::<toydb::storage::log::Memory>::new(move _76) -> [return: bb58, unwind: bb164]; // scope 17 at src/bin/toydb.rs:40:21: 40:58
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:40:21: 40:29
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(toydb::storage::log::Memory) -> std::boxed::Box<toydb::storage::log::Memory> {std::boxed::Box::<toydb::storage::log::Memory>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        _59 = move _75 as std::boxed::Box<dyn toydb::storage::log::Store> (Pointer(Unsize)); // scope 17 at src/bin/toydb.rs:40:21: 40:58
        goto -> bb62;                    // scope 17 at src/bin/toydb.rs:40:57: 40:58
    }

    bb59: {
        _82 = [move _86];                // scope 25 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _89 = &_82;                      // scope 23 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _189 = const main::{closure#0}::promoted[0]; // scope 27 at src/bin/toydb.rs:41:50: 41:82
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(main::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:41:50: 41:82
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:41 ~ toydb[e000]::main::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[0]) }) }
        _92 = _189;                      // scope 27 at src/bin/toydb.rs:41:50: 41:82
        _91 = _92;                       // scope 27 at src/bin/toydb.rs:41:50: 41:82
        _90 = move _91 as &[&str] (Pointer(Unsize)); // scope 27 at src/bin/toydb.rs:41:50: 41:82
        _94 = _89;                       // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _93 = move _94 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _81 = Arguments::new_v1(move _90, move _93) -> [return: bb60, unwind: bb164]; // scope 27 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb60: {
        _80 = format(move _81) -> [return: bb61, unwind: bb164]; // scope 23 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:19: 111:80
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:19: 111:38
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format}, val: Value(Scalar(<ZST>)) }
    }

    bb61: {
        _79 = move _80;                  // scope 24 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:112:9: 112:12
        ((_78 as Config).0: std::string::String) = move _79; // scope 23 at src/bin/toydb.rs:41:28: 41:90
        discriminant(_78) = 1;           // scope 23 at src/bin/toydb.rs:41:28: 41:90
        ((_197 as Err).0: toydb::error::Error) = move _78; // scope 23 at src/bin/toydb.rs:41:24: 41:91
        discriminant(_197) = 1;          // scope 23 at src/bin/toydb.rs:41:24: 41:91
        goto -> bb125;                   // scope 17 at no-location
    }

    bb62: {
        _194 = const true;               // scope 17 at src/bin/toydb.rs:38:52: 42:6
        _58 = move _59 as std::boxed::Box<dyn toydb::storage::log::Store> (Pointer(Unsize)); // scope 17 at src/bin/toydb.rs:38:52: 42:6
        _98 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String); // scope 18 at src/bin/toydb.rs:43:56: 43:71
        _97 = std::string::String::as_str(move _98) -> [return: bb63, unwind: bb162]; // scope 18 at src/bin/toydb.rs:43:56: 43:80
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:43:72: 43:78
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r str {std::string::String::as_str}, val: Value(Scalar(<ZST>)) }
    }

    bb63: {
        _99 = <str as PartialEq>::eq(_97, const "memory") -> [return: bb64, unwind: bb162]; // scope 18 at src/bin/toydb.rs:44:9: 44:17
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:9: 44:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:9: 44:17
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
    }

    bb64: {
        switchInt(move _99) -> [false: bb65, otherwise: bb70]; // scope 18 at src/bin/toydb.rs:44:9: 44:17
    }

    bb65: {
        _100 = <str as PartialEq>::eq(_97, const "") -> [return: bb66, unwind: bb162]; // scope 18 at src/bin/toydb.rs:44:20: 44:22
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:20: 44:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:20: 44:22
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
    }

    bb66: {
        switchInt(move _100) -> [false: bb67, otherwise: bb70]; // scope 18 at src/bin/toydb.rs:44:20: 44:22
    }

    bb67: {
        _101 = <str as PartialEq>::eq(_97, const "stdmemory") -> [return: bb68, unwind: bb162]; // scope 18 at src/bin/toydb.rs:45:9: 45:20
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:45:9: 45:20
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 100, 109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:45:9: 45:20
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 100, 109, 101, 109, 111, 114, 121], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
    }

    bb68: {
        switchInt(move _101) -> [false: bb69, otherwise: bb73]; // scope 18 at src/bin/toydb.rs:45:9: 45:20
    }

    bb69: {
        _106 = _97;                      // scope 18 at src/bin/toydb.rs:46:9: 46:13
        _113 = &_106;                    // scope 29 at src/bin/toydb.rs:46:83: 46:87
        (_112.0: &&str) = move _113;     // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _114 = (_112.0: &&str);          // scope 29 at src/bin/toydb.rs:46:83: 46:87
        _116 = _114;                     // scope 31 at src/bin/toydb.rs:46:83: 46:87
        _117 = <&str as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 31 at src/bin/toydb.rs:46:83: 46:87
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:46:83: 46:87
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&str as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _115 = ArgumentV1::new::<&str>(move _116, move _117) -> [return: bb76, unwind: bb162]; // scope 31 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b &str, for<'r, 's, 't0> fn(&'r &str, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb70: {
        _103 = toydb::storage::kv::Memory::new() -> [return: bb71, unwind: bb162]; // scope 18 at src/bin/toydb.rs:44:35: 44:61
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:35: 44:59
                                         // + literal: Const { ty: fn() -> toydb::storage::kv::Memory {toydb::storage::kv::Memory::new}, val: Value(Scalar(<ZST>)) }
    }

    bb71: {
        _102 = Box::<toydb::storage::kv::Memory>::new(move _103) -> [return: bb72, unwind: bb162]; // scope 18 at src/bin/toydb.rs:44:26: 44:62
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:44:26: 44:34
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(toydb::storage::kv::Memory) -> std::boxed::Box<toydb::storage::kv::Memory> {std::boxed::Box::<toydb::storage::kv::Memory>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb72: {
        _96 = move _102 as std::boxed::Box<dyn toydb::storage::kv::Store> (Pointer(Unsize)); // scope 18 at src/bin/toydb.rs:44:26: 44:62
        goto -> bb79;                    // scope 18 at src/bin/toydb.rs:44:61: 44:62
    }

    bb73: {
        _105 = StdMemory::new() -> [return: bb74, unwind: bb162]; // scope 18 at src/bin/toydb.rs:45:33: 45:62
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:45:33: 45:60
                                         // + literal: Const { ty: fn() -> toydb::storage::kv::StdMemory {toydb::storage::kv::StdMemory::new}, val: Value(Scalar(<ZST>)) }
    }

    bb74: {
        _104 = Box::<StdMemory>::new(move _105) -> [return: bb75, unwind: bb162]; // scope 18 at src/bin/toydb.rs:45:24: 45:63
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:45:24: 45:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(toydb::storage::kv::StdMemory) -> std::boxed::Box<toydb::storage::kv::StdMemory> {std::boxed::Box::<toydb::storage::kv::StdMemory>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb75: {
        _96 = move _104 as std::boxed::Box<dyn toydb::storage::kv::Store> (Pointer(Unsize)); // scope 18 at src/bin/toydb.rs:45:24: 45:63
        goto -> bb79;                    // scope 18 at src/bin/toydb.rs:45:62: 45:63
    }

    bb76: {
        _111 = [move _115];              // scope 31 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _118 = &_111;                    // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _190 = const main::{closure#0}::promoted[1]; // scope 33 at src/bin/toydb.rs:46:50: 46:81
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(main::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:46:50: 46:81
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:41 ~ toydb[e000]::main::{closure#0}), const_param_did: None }, substs_: Some([<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>]), promoted: Some(promoted[1]) }) }
        _121 = _190;                     // scope 33 at src/bin/toydb.rs:46:50: 46:81
        _120 = _121;                     // scope 33 at src/bin/toydb.rs:46:50: 46:81
        _119 = move _120 as &[&str] (Pointer(Unsize)); // scope 33 at src/bin/toydb.rs:46:50: 46:81
        _123 = _118;                     // scope 33 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _122 = move _123 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 33 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
        _110 = Arguments::new_v1(move _119, move _122) -> [return: bb77, unwind: bb162]; // scope 33 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:39: 111:79
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb77: {
        _109 = format(move _110) -> [return: bb78, unwind: bb162]; // scope 29 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:19: 111:80
                                         // mir::Constant
                                         // + span: /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:111:19: 111:38
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format}, val: Value(Scalar(<ZST>)) }
    }

    bb78: {
        _108 = move _109;                // scope 30 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:112:9: 112:12
        ((_107 as Config).0: std::string::String) = move _108; // scope 29 at src/bin/toydb.rs:46:28: 46:89
        discriminant(_107) = 1;          // scope 29 at src/bin/toydb.rs:46:28: 46:89
        ((_197 as Err).0: toydb::error::Error) = move _107; // scope 29 at src/bin/toydb.rs:46:24: 46:90
        discriminant(_197) = 1;          // scope 29 at src/bin/toydb.rs:46:24: 46:90
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        drop(_58) -> [return: bb125, unwind: bb164]; // scope 17 at src/bin/toydb.rs:55:1: 55:2
    }

    bb79: {
        _193 = const true;               // scope 18 at src/bin/toydb.rs:43:50: 47:6
        _95 = move _96 as std::boxed::Box<dyn toydb::storage::kv::Store> (Pointer(Unsize)); // scope 18 at src/bin/toydb.rs:43:50: 47:6
        _134 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String); // scope 28 at src/bin/toydb.rs:49:17: 49:24
        _133 = _134;                     // scope 28 at src/bin/toydb.rs:49:17: 49:24
        _132 = <std::string::String as Deref>::deref(move _133) -> [return: bb80, unwind: bb156]; // scope 28 at src/bin/toydb.rs:49:17: 49:24
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:17: 49:24
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb80: {
        _131 = _132;                     // scope 28 at src/bin/toydb.rs:49:17: 49:24
        _195 = const false;              // scope 28 at src/bin/toydb.rs:49:26: 49:35
        _135 = move ((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).1: std::collections::HashMap<std::string::String, std::string::String>); // scope 28 at src/bin/toydb.rs:49:26: 49:35
        _194 = const false;              // scope 28 at src/bin/toydb.rs:49:37: 49:47
        _137 = move _58;                 // scope 28 at src/bin/toydb.rs:49:37: 49:47
        _136 = move _137 as std::boxed::Box<dyn toydb::storage::log::Store> (Pointer(Unsize)); // scope 28 at src/bin/toydb.rs:49:37: 49:47
        _193 = const false;              // scope 28 at src/bin/toydb.rs:49:49: 49:58
        _139 = move _95;                 // scope 28 at src/bin/toydb.rs:49:49: 49:58
        _138 = move _139 as std::boxed::Box<dyn toydb::storage::kv::Store> (Pointer(Unsize)); // scope 28 at src/bin/toydb.rs:49:49: 49:58
        _130 = toydb::Server::new(move _131, move _135, move _136, move _138) -> [return: bb81, unwind: bb156]; // scope 28 at src/bin/toydb.rs:49:5: 49:59
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 49:16
                                         // + literal: Const { ty: for<'_> fn(&str, std::collections::HashMap<std::string::String, std::string::String>, std::boxed::Box<(dyn toydb::storage::log::Store + 'static)>, std::boxed::Box<(dyn toydb::storage::kv::Store + 'static)>) -> impl for<'_> std::future::Future {toydb::Server::new}, val: Value(Scalar(<ZST>)) }
    }

    bb81: {
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).4: impl std::future::Future) = move _130; // scope 28 at src/bin/toydb.rs:49:5: 50:15
        goto -> bb82;                    // scope 34 at src/bin/toydb.rs:49:5: 50:15
    }

    bb82: {
        _143 = &mut (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).4: impl std::future::Future); // scope 35 at src/bin/toydb.rs:49:5: 50:15
        _142 = &mut (*_143);             // scope 35 at src/bin/toydb.rs:49:5: 50:15
        _141 = Pin::<&mut impl Future>::new_unchecked(move _142) -> [return: bb83, unwind: bb152]; // scope 35 at src/bin/toydb.rs:49:5: 50:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 50:15
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb83: {
        _146 = _198;                     // scope 35 at src/bin/toydb.rs:49:5: 50:15
        _145 = get_context(move _146) -> [return: bb84, unwind: bb152]; // scope 35 at src/bin/toydb.rs:49:5: 50:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 50:15
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb84: {
        _144 = &mut (*_145);             // scope 35 at src/bin/toydb.rs:49:5: 50:15
        _140 = <impl Future as Future>::poll(move _141, move _144) -> [return: bb85, unwind: bb152]; // scope 35 at src/bin/toydb.rs:49:5: 50:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 50:15
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb85: {
        _147 = discriminant(_140);       // scope 34 at src/bin/toydb.rs:49:5: 50:15
        switchInt(move _147) -> [0_isize: bb88, 1_isize: bb86, otherwise: bb87]; // scope 34 at src/bin/toydb.rs:49:5: 50:15
    }

    bb86: {
        ((_0 as Yielded).0: ()) = move _150; // scope 34 at src/bin/toydb.rs:49:5: 50:15
        discriminant(_0) = 0;            // scope 34 at src/bin/toydb.rs:49:5: 50:15
        discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))) = 3; // scope 34 at src/bin/toydb.rs:49:5: 50:15
        return;                          // scope 34 at src/bin/toydb.rs:49:5: 50:15
    }

    bb87: {
        unreachable;                     // scope 34 at src/bin/toydb.rs:49:5: 50:15
    }

    bb88: {
        _148 = move ((_140 as Ready).0: std::result::Result<toydb::Server, toydb::error::Error>); // scope 34 at src/bin/toydb.rs:49:5: 50:15
        _129 = move _148;                // scope 36 at src/bin/toydb.rs:49:5: 50:15
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).4: impl std::future::Future)) -> [return: bb89, unwind: bb153]; // scope 28 at src/bin/toydb.rs:50:14: 50:15
    }

    bb89: {
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) = <Result<toydb::Server, toydb::error::Error> as Try>::branch(move _129) -> [return: bb90, unwind: bb153]; // scope 28 at src/bin/toydb.rs:49:5: 50:16
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 50:16
                                         // + literal: Const { ty: fn(std::result::Result<toydb::Server, toydb::error::Error>) -> std::ops::ControlFlow<<std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::Residual, <std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::Output> {<std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb90: {
        _151 = discriminant((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>)); // scope 28 at src/bin/toydb.rs:49:5: 50:16
        switchInt(move _151) -> [0_isize: bb91, 1_isize: bb93, otherwise: bb92]; // scope 28 at src/bin/toydb.rs:49:5: 50:16
    }

    bb91: {
        _154 = move (((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) as Continue).0: toydb::Server); // scope 28 at src/bin/toydb.rs:49:5: 50:16
        _192 = const true;               // scope 40 at src/bin/toydb.rs:49:5: 50:16
        _128 = move _154;                // scope 40 at src/bin/toydb.rs:49:5: 50:16
        _158 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String); // scope 28 at src/bin/toydb.rs:51:17: 51:32
        _157 = _158;                     // scope 28 at src/bin/toydb.rs:51:17: 51:32
        _156 = <std::string::String as Deref>::deref(move _157) -> [return: bb95, unwind: bb145]; // scope 28 at src/bin/toydb.rs:51:17: 51:32
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:51:17: 51:32
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb92: {
        unreachable;                     // scope 28 at src/bin/toydb.rs:49:5: 50:16
    }

    bb93: {
        _152 = move (((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) as Break).0: std::result::Result<std::convert::Infallible, toydb::error::Error>); // scope 28 at src/bin/toydb.rs:50:15: 50:16
        _153 = move _152;                // scope 38 at src/bin/toydb.rs:50:15: 50:16
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, toydb::error::Error>>>::from_residual(move _153) -> [return: bb94, unwind: bb149]; // scope 38 at src/bin/toydb.rs:49:5: 50:16
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:50:15: 50:16
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, toydb::error::Error>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, toydb::error::Error>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb94: {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> [return: bb124, unwind: bb150]; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb95: {
        _155 = _156;                     // scope 28 at src/bin/toydb.rs:51:17: 51:32
        _162 = &((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String); // scope 28 at src/bin/toydb.rs:51:34: 51:50
        _161 = _162;                     // scope 28 at src/bin/toydb.rs:51:34: 51:50
        _160 = <std::string::String as Deref>::deref(move _161) -> [return: bb96, unwind: bb141]; // scope 28 at src/bin/toydb.rs:51:34: 51:50
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:51:34: 51:50
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> &'r <std::string::String as std::ops::Deref>::Target {<std::string::String as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb96: {
        _159 = _160;                     // scope 28 at src/bin/toydb.rs:51:34: 51:50
        _192 = const false;              // scope 28 at src/bin/toydb.rs:49:5: 51:51
        _127 = toydb::Server::listen(move _128, move _155, move _159) -> [return: bb97, unwind: bb141]; // scope 28 at src/bin/toydb.rs:49:5: 51:51
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:51:10: 51:16
                                         // + literal: Const { ty: for<'_, '_> fn(toydb::Server, &str, &str) -> impl for<'_, '_> std::future::Future {toydb::Server::listen}, val: Value(Scalar(<ZST>)) }
    }

    bb97: {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).5: impl std::future::Future) = move _127; // scope 28 at src/bin/toydb.rs:49:5: 52:15
        goto -> bb98;                    // scope 41 at src/bin/toydb.rs:49:5: 52:15
    }

    bb98: {
        _166 = &mut (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).5: impl std::future::Future); // scope 42 at src/bin/toydb.rs:49:5: 52:15
        _165 = &mut (*_166);             // scope 42 at src/bin/toydb.rs:49:5: 52:15
        _164 = Pin::<&mut impl Future>::new_unchecked(move _165) -> [return: bb99, unwind: bb137]; // scope 42 at src/bin/toydb.rs:49:5: 52:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 52:15
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb99: {
        _169 = _198;                     // scope 42 at src/bin/toydb.rs:49:5: 52:15
        _168 = get_context(move _169) -> [return: bb100, unwind: bb137]; // scope 42 at src/bin/toydb.rs:49:5: 52:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 52:15
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb100: {
        _167 = &mut (*_168);             // scope 42 at src/bin/toydb.rs:49:5: 52:15
        _163 = <impl Future as Future>::poll(move _164, move _167) -> [return: bb101, unwind: bb137]; // scope 42 at src/bin/toydb.rs:49:5: 52:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 52:15
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb101: {
        _170 = discriminant(_163);       // scope 41 at src/bin/toydb.rs:49:5: 52:15
        switchInt(move _170) -> [0_isize: bb104, 1_isize: bb102, otherwise: bb103]; // scope 41 at src/bin/toydb.rs:49:5: 52:15
    }

    bb102: {
        ((_0 as Yielded).0: ()) = move _173; // scope 41 at src/bin/toydb.rs:49:5: 52:15
        discriminant(_0) = 0;            // scope 41 at src/bin/toydb.rs:49:5: 52:15
        discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))) = 4; // scope 41 at src/bin/toydb.rs:49:5: 52:15
        return;                          // scope 41 at src/bin/toydb.rs:49:5: 52:15
    }

    bb103: {
        unreachable;                     // scope 41 at src/bin/toydb.rs:49:5: 52:15
    }

    bb104: {
        _171 = move ((_163 as Ready).0: std::result::Result<toydb::Server, toydb::error::Error>); // scope 41 at src/bin/toydb.rs:49:5: 52:15
        _126 = move _171;                // scope 43 at src/bin/toydb.rs:49:5: 52:15
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).5: impl std::future::Future)) -> [return: bb105, unwind: bb138]; // scope 28 at src/bin/toydb.rs:52:14: 52:15
    }

    bb105: {
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) = <Result<toydb::Server, toydb::error::Error> as Try>::branch(move _126) -> [return: bb106, unwind: bb138]; // scope 28 at src/bin/toydb.rs:49:5: 52:16
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 52:16
                                         // + literal: Const { ty: fn(std::result::Result<toydb::Server, toydb::error::Error>) -> std::ops::ControlFlow<<std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::Residual, <std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::Output> {<std::result::Result<toydb::Server, toydb::error::Error> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }
    }

    bb106: {
        _174 = discriminant((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>)); // scope 28 at src/bin/toydb.rs:49:5: 52:16
        switchInt(move _174) -> [0_isize: bb107, 1_isize: bb109, otherwise: bb108]; // scope 28 at src/bin/toydb.rs:49:5: 52:16
    }

    bb107: {
        _177 = move (((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) as Continue).0: toydb::Server); // scope 28 at src/bin/toydb.rs:49:5: 52:16
        _125 = move _177;                // scope 47 at src/bin/toydb.rs:49:5: 52:16
        _124 = toydb::Server::serve(move _125) -> [return: bb111, unwind: bb134]; // scope 28 at src/bin/toydb.rs:49:5: 53:17
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:53:10: 53:15
                                         // + literal: Const { ty: fn(toydb::Server) -> impl std::future::Future {toydb::Server::serve}, val: Value(Scalar(<ZST>)) }
    }

    bb108: {
        unreachable;                     // scope 28 at src/bin/toydb.rs:49:5: 52:16
    }

    bb109: {
        _175 = move (((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, toydb::error::Error>, toydb::Server>) as Break).0: std::result::Result<std::convert::Infallible, toydb::error::Error>); // scope 28 at src/bin/toydb.rs:52:15: 52:16
        _176 = move _175;                // scope 45 at src/bin/toydb.rs:52:15: 52:16
        _197 = <Result<(), toydb::error::Error> as FromResidual<Result<Infallible, toydb::error::Error>>>::from_residual(move _176) -> [return: bb110, unwind: bb134]; // scope 45 at src/bin/toydb.rs:49:5: 52:16
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:52:15: 52:16
                                         // + literal: Const { ty: fn(std::result::Result<std::convert::Infallible, toydb::error::Error>) -> std::result::Result<(), toydb::error::Error> {<std::result::Result<(), toydb::error::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, toydb::error::Error>>>::from_residual}, val: Value(Scalar(<ZST>)) }
    }

    bb110: {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> [return: bb122, unwind: bb135]; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb111: {
        (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).6: impl std::future::Future) = move _124; // scope 28 at src/bin/toydb.rs:49:5: 54:15
        goto -> bb112;                   // scope 48 at src/bin/toydb.rs:49:5: 54:15
    }

    bb112: {
        _181 = &mut (((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).6: impl std::future::Future); // scope 49 at src/bin/toydb.rs:49:5: 54:15
        _180 = &mut (*_181);             // scope 49 at src/bin/toydb.rs:49:5: 54:15
        _179 = Pin::<&mut impl Future>::new_unchecked(move _180) -> [return: bb113, unwind: bb130]; // scope 49 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 54:15
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future) -> std::pin::Pin<&mut impl std::future::Future> {std::pin::Pin::<&mut impl std::future::Future>::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb113: {
        _184 = _198;                     // scope 49 at src/bin/toydb.rs:49:5: 54:15
        _183 = get_context(move _184) -> [return: bb114, unwind: bb130]; // scope 49 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 54:15
                                         // + literal: Const { ty: unsafe fn(std::future::ResumeTy) -> &mut std::task::Context {std::future::get_context}, val: Value(Scalar(<ZST>)) }
    }

    bb114: {
        _182 = &mut (*_183);             // scope 49 at src/bin/toydb.rs:49:5: 54:15
        _178 = <impl Future as Future>::poll(move _179, move _182) -> [return: bb115, unwind: bb130]; // scope 49 at src/bin/toydb.rs:49:5: 54:15
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:49:5: 54:15
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(std::pin::Pin<&'r mut impl std::future::Future>, &'s mut std::task::Context<'t0>) -> std::task::Poll<<impl std::future::Future as std::future::Future>::Output> {<impl std::future::Future as std::future::Future>::poll}, val: Value(Scalar(<ZST>)) }
    }

    bb115: {
        _185 = discriminant(_178);       // scope 48 at src/bin/toydb.rs:49:5: 54:15
        switchInt(move _185) -> [0_isize: bb118, 1_isize: bb116, otherwise: bb117]; // scope 48 at src/bin/toydb.rs:49:5: 54:15
    }

    bb116: {
        ((_0 as Yielded).0: ()) = move _188; // scope 48 at src/bin/toydb.rs:49:5: 54:15
        discriminant(_0) = 0;            // scope 48 at src/bin/toydb.rs:49:5: 54:15
        discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))) = 5; // scope 48 at src/bin/toydb.rs:49:5: 54:15
        return;                          // scope 48 at src/bin/toydb.rs:49:5: 54:15
    }

    bb117: {
        unreachable;                     // scope 48 at src/bin/toydb.rs:49:5: 54:15
    }

    bb118: {
        _186 = move ((_178 as Ready).0: std::result::Result<(), toydb::error::Error>); // scope 48 at src/bin/toydb.rs:49:5: 54:15
        _197 = move _186;                // scope 50 at src/bin/toydb.rs:49:5: 54:15
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).6: impl std::future::Future)) -> [return: bb119, unwind: bb131]; // scope 28 at src/bin/toydb.rs:54:14: 54:15
    }

    bb119: {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> [return: bb120, unwind: bb132]; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb120: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> [return: bb190, unwind: bb184]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb121: {
        goto -> bb129;                   // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb122: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> [return: bb203, unwind: bb197]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb123: {
        goto -> bb217;                   // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb124: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> [return: bb216, unwind: bb210]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb125: {
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        goto -> bb126;                   // scope 12 at no-location
    }

    bb126: {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> [return: bb127, unwind: bb166]; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb127: {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config)) -> [return: bb128, unwind: bb168]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb128: {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> [return: bb129, unwind: bb275]; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb129: {
        ((_0 as Complete).0: std::result::Result<(), toydb::error::Error>) = move _197; // scope 0 at src/bin/toydb.rs:55:2: 55:2
        discriminant(_0) = 1;            // scope 0 at src/bin/toydb.rs:55:2: 55:2
        discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))) = 1; // scope 0 at src/bin/toydb.rs:55:2: 55:2
        return;                          // scope 0 at src/bin/toydb.rs:55:2: 55:2
    }

    bb130 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#5).6: impl std::future::Future)) -> bb131; // scope 28 at src/bin/toydb.rs:54:14: 54:15
    }

    bb131 (cleanup): {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb132; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb132 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb223; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb133 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb230; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb134 (cleanup): {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb135; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb135 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb229; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb136 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb230; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb137 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#4).5: impl std::future::Future)) -> bb138; // scope 28 at src/bin/toydb.rs:52:14: 52:15
    }

    bb138 (cleanup): {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb139; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb139 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb236; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb140 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb256; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb141 (cleanup): {
        switchInt(_192) -> [false: bb142, otherwise: bb237]; // scope 28 at src/bin/toydb.rs:51:50: 51:51
    }

    bb142 (cleanup): {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb143; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb143 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb243; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb144 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb256; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb145 (cleanup): {
        drop(_128) -> bb146;             // scope 28 at src/bin/toydb.rs:51:50: 51:51
    }

    bb146 (cleanup): {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb147; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb147 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb249; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb148 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb256; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb149 (cleanup): {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb150; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb150 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb255; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb151 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb256; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb152 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).4: impl std::future::Future)) -> bb153; // scope 28 at src/bin/toydb.rs:50:14: 50:15
    }

    bb153 (cleanup): {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb154; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb154 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb262; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb155 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb161; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb156 (cleanup): {
        _192 = const false;              // scope 28 at src/bin/toydb.rs:51:50: 51:51
        switchInt(_193) -> [false: bb157, otherwise: bb263]; // scope 18 at src/bin/toydb.rs:55:1: 55:2
    }

    bb157 (cleanup): {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        switchInt(_194) -> [false: bb158, otherwise: bb264]; // scope 17 at src/bin/toydb.rs:55:1: 55:2
    }

    bb158 (cleanup): {
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb159; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb159 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).0: std::string::String)) -> bb271; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb160 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb161; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb161 (cleanup): {
        goto -> bb275;                   // scope 0 at no-location
    }

    bb162 (cleanup): {
        _193 = const false;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
        drop(_58) -> bb164;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
    }

    bb163 (cleanup): {
        goto -> bb164;                   // scope 17 at no-location
    }

    bb164 (cleanup): {
        _194 = const false;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
        goto -> bb165;                   // scope 17 at no-location
    }

    bb165 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).3: simplelog::ConfigBuilder)) -> bb166; // scope 7 at src/bin/toydb.rs:55:1: 55:2
    }

    bb166 (cleanup): {
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config)) -> bb168; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb167 (cleanup): {
        goto -> bb168;                   // scope 1 at src/bin/toydb.rs:28:61: 28:62
    }

    bb168 (cleanup): {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> bb275; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb169 (cleanup): {
        switchInt(_196) -> [false: bb170, otherwise: bb274]; // scope 0 at src/bin/toydb.rs:26:9: 26:10
    }

    bb170 (cleanup): {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        goto -> bb275;                   // scope 0 at no-location
    }

    bb171 (cleanup): {
        drop(_4) -> bb172;               // scope 0 at src/bin/toydb.rs:26:9: 26:10
    }

    bb172 (cleanup): {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        goto -> bb275;                   // scope 0 at no-location
    }

    bb173 (cleanup): {
        drop(_4) -> bb174;               // scope 0 at src/bin/toydb.rs:26:9: 26:10
    }

    bb174 (cleanup): {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        goto -> bb275;                   // scope 0 at no-location
    }

    bb175 (cleanup): {
        drop(_4) -> bb176;               // scope 0 at src/bin/toydb.rs:26:9: 26:10
    }

    bb176 (cleanup): {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        goto -> bb275;                   // scope 0 at no-location
    }

    bb177 (cleanup): {
        _196 = const false;              // scope 0 at src/bin/toydb.rs:26:9: 26:10
        goto -> bb275;                   // scope 0 at no-location
    }

    bb178: {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> [return: bb121, unwind: bb230]; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb179 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb133; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb180 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb179; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb181 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb180; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb182 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb181; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb183 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb182; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb184 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb183; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb185: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> [return: bb178, unwind: bb133]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb186: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> [return: bb185, unwind: bb179]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb187: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> [return: bb186, unwind: bb180]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb188: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> [return: bb187, unwind: bb181]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb189: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> [return: bb188, unwind: bb182]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb190: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> [return: bb189, unwind: bb183]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb191: {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> [return: bb123, unwind: bb230]; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb192 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb136; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb193 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb192; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb194 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb193; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb195 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb194; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb196 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb195; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb197 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb196; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb198: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> [return: bb191, unwind: bb136]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb199: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> [return: bb198, unwind: bb192]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb200: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> [return: bb199, unwind: bb193]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb201: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> [return: bb200, unwind: bb194]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb202: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> [return: bb201, unwind: bb195]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb203: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> [return: bb202, unwind: bb196]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb204: {
        _195 = const false;              // scope 1 at src/bin/toydb.rs:55:1: 55:2
        drop((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).0: clap::ArgMatches)) -> [return: bb217, unwind: bb256]; // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb205 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb151; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb206 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb205; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb207 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb206; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb208 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb207; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb209 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb208; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb210 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb209; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb211: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> [return: bb204, unwind: bb151]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb212: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> [return: bb211, unwind: bb205]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb213: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> [return: bb212, unwind: bb206]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb214: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> [return: bb213, unwind: bb207]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb215: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> [return: bb214, unwind: bb208]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb216: {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> [return: bb215, unwind: bb209]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb217: {
        goto -> bb129;                   // scope 0 at no-location
    }

    bb218 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb133; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb219 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb218; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb220 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb219; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb221 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb220; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb222 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb221; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb223 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb222; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb224 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb136; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb225 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb224; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb226 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb225; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb227 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb226; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb228 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb227; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb229 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb228; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb230 (cleanup): {
        goto -> bb256;                   // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb231 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb140; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb232 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb231; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb233 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb232; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb234 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb233; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb235 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb234; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb236 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb235; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb237 (cleanup): {
        drop(_128) -> bb142;             // scope 28 at src/bin/toydb.rs:51:50: 51:51
    }

    bb238 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb144; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb239 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb238; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb240 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb239; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb241 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb240; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb242 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb241; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb243 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb242; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb244 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb148; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb245 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb244; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb246 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb245; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb247 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb246; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb248 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb247; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb249 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb248; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb250 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb151; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb251 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb250; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb252 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb251; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb253 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb252; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb254 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb253; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb255 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb254; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb256 (cleanup): {
        goto -> bb161;                   // scope 0 at src/bin/toydb.rs:55:1: 55:2
    }

    bb257 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb155; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb258 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb257; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb259 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb258; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb260 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb259; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb261 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb260; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb262 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb261; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb263 (cleanup): {
        drop(_95) -> bb157;              // scope 18 at src/bin/toydb.rs:55:1: 55:2
    }

    bb264 (cleanup): {
        drop(_58) -> bb158;              // scope 17 at src/bin/toydb.rs:55:1: 55:2
    }

    bb265 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).8: std::string::String)) -> bb160; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb266 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).7: std::string::String)) -> bb265; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb267 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).5: std::string::String)) -> bb266; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb268 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).4: std::string::String)) -> bb267; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb269 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).3: std::string::String)) -> bb268; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb270 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).2: std::string::String)) -> bb269; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb271 (cleanup): {
        switchInt(_195) -> [false: bb270, otherwise: bb272]; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb272 (cleanup): {
        drop(((((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2])) as variant#3).1: Config).1: std::collections::HashMap<std::string::String, std::string::String>)) -> bb270; // scope 1 at src/bin/toydb.rs:55:1: 55:2
    }

    bb273 (cleanup): {
        goto -> bb163;                   // scope 17 at src/bin/toydb.rs:39:77: 39:78
    }

    bb274 (cleanup): {
        drop(_4) -> bb170;               // scope 0 at src/bin/toydb.rs:26:9: 26:10
    }

    bb275 (cleanup): {
        discriminant((*(_1.0: &mut [static generator@src/bin/toydb.rs:17:31: 55:2]))) = 2; // scope 0 at src/bin/toydb.rs:17:31: 55:2
        resume;                          // scope 0 at src/bin/toydb.rs:17:31: 55:2
    }

    bb276: {
        _149 = move _2;                  // scope 0 at src/bin/toydb.rs:17:31: 55:2
        _198 = move _149;                // scope 34 at src/bin/toydb.rs:49:5: 50:15
        goto -> bb82;                    // scope 34 at src/bin/toydb.rs:49:5: 50:15
    }

    bb277: {
        _172 = move _2;                  // scope 0 at src/bin/toydb.rs:17:31: 55:2
        _198 = move _172;                // scope 41 at src/bin/toydb.rs:49:5: 52:15
        goto -> bb98;                    // scope 41 at src/bin/toydb.rs:49:5: 52:15
    }

    bb278: {
        _187 = move _2;                  // scope 0 at src/bin/toydb.rs:17:31: 55:2
        _198 = move _187;                // scope 48 at src/bin/toydb.rs:49:5: 54:15
        goto -> bb112;                   // scope 48 at src/bin/toydb.rs:49:5: 54:15
    }

    bb279: {
        assert(const false, "`async fn` resumed after panicking") -> bb279; // scope 0 at src/bin/toydb.rs:17:31: 55:2
    }

    bb280: {
        assert(const false, "`async fn` resumed after completion") -> bb280; // scope 0 at src/bin/toydb.rs:17:31: 55:2
    }

    bb281: {
        unreachable;                     // scope 0 at src/bin/toydb.rs:17:31: 55:2
    }

    bb282: {
        goto -> bb127;                   // scope 9 at src/bin/toydb.rs:30:20: 30:68
    }

    bb283: {
        goto -> bb126;                   // scope 14 at src/bin/toydb.rs:35:5: 35:64
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src/bin/toydb.rs:41:50: 41:82
    let mut _1: [&str; 1];               // in scope 0 at src/bin/toydb.rs:41:50: 41:82

    bb0: {
        _1 = [const "Unknown Raft storage engine "]; // scope 0 at src/bin/toydb.rs:41:50: 41:82
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [85, 110, 107, 110, 111, 119, 110, 32, 82, 97, 102, 116, 32, 115, 116, 111, 114, 97, 103, 101, 32, 101, 110, 103, 105, 110, 101, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [268435455], len: Size { raw: 28 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 28 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:41:50: 41:82
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [85, 110, 107, 110, 111, 119, 110, 32, 82, 97, 102, 116, 32, 115, 116, 111, 114, 97, 103, 101, 32, 101, 110, 103, 105, 110, 101, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [268435455], len: Size { raw: 28 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 28 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:41:50: 41:82
        return;                          // scope 0 at src/bin/toydb.rs:41:50: 41:82
    }
}

promoted[1] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at src/bin/toydb.rs:46:50: 46:81
    let mut _1: [&str; 1];               // in scope 0 at src/bin/toydb.rs:46:50: 46:81

    bb0: {
        _1 = [const "Unknown SQL storage engine "]; // scope 0 at src/bin/toydb.rs:46:50: 46:81
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [85, 110, 107, 110, 111, 119, 110, 32, 83, 81, 76, 32, 115, 116, 111, 114, 97, 103, 101, 32, 101, 110, 103, 105, 110, 101, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [134217727], len: Size { raw: 27 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 27 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:46:50: 46:81
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [85, 110, 107, 110, 111, 119, 110, 32, 83, 81, 76, 32, 115, 116, 111, 114, 97, 103, 101, 32, 101, 110, 103, 105, 110, 101, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [134217727], len: Size { raw: 27 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 27 }) }
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:46:50: 46:81
        return;                          // scope 0 at src/bin/toydb.rs:46:50: 46:81
    }
}

promoted[2] in main::{closure#0}: &LevelFilter = {
    let mut _0: &simplelog::LevelFilter; // return place in scope 0 at src/bin/toydb.rs:32:20: 32:49
    let mut _1: simplelog::LevelFilter;  // in scope 0 at src/bin/toydb.rs:32:20: 32:49

    bb0: {
        discriminant(_1) = 4;            // scope 0 at src/bin/toydb.rs:32:20: 32:49
        _0 = &_1;                        // scope 0 at src/bin/toydb.rs:32:20: 32:49
        return;                          // scope 0 at src/bin/toydb.rs:32:20: 32:49
    }
}

fn _::<impl at src/bin/toydb.rs:57:17: 57:28>::deserialize::<impl at src/bin/toydb.rs:57:17: 57:28>::expecting(_1: &__Visitor, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    debug __formatter => _2;             // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _3: &mut std::fmt::Formatter; // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let mut _4: &str;                    // in scope 0 at src/bin/toydb.rs:57:17: 57:28
    let _5: &str;                        // in scope 0 at src/bin/toydb.rs:57:17: 57:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _5 = const "struct Config";      // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 116, 114, 117, 99, 116, 32, 67, 111, 110, 102, 105, 103], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _4 = _5;                         // scope 0 at src/bin/toydb.rs:57:17: 57:28
        _0 = Formatter::write_str(move _3, move _4) -> bb1; // scope 0 at src/bin/toydb.rs:57:17: 57:28
                                         // mir::Constant
                                         // + span: src/bin/toydb.rs:57:17: 57:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut std::fmt::Formatter, &'s str) -> std::result::Result<(), std::fmt::Error> {std::fmt::Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at src/bin/toydb.rs:57:28: 57:28
    }
}
