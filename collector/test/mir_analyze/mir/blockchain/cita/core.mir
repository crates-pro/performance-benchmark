// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:28:10: 28:17>::default() -> BlockFilter {
    let mut _0: filters::filterdb::BlockFilter; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:28:10: 28:17
    let mut _1: std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:31:5: 31:30

    bb0: {
        _1 = <HashMap<usize, u64> as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:31:5: 31:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:31:5: 31:30
                                         // + literal: Const { ty: fn() -> HashMap<usize, u64> {<HashMap<usize, u64> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = BlockFilter { data: move _1 }; // scope 0 at cita-chain/core/src/filters/filterdb.rs:28:10: 28:17
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:28:17: 28:17
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:34:1: 34:17>::is_filter(_1: &BlockFilter, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:35:18: 35:23
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:35:25: 35:27
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:35:39: 35:43
    let mut _3: &std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:36:9: 36:36
    let _4: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:36:32: 36:35

    bb0: {
        _3 = &((*_1).0: std::collections::HashMap<usize, u64>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:36:9: 36:36
        _4 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:36:32: 36:35
        _0 = HashMap::<usize, u64>::contains_key::<usize>(move _3, _4) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:36:9: 36:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:36:19: 36:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<usize, u64>, &'b usize) -> bool {HashMap::<usize, u64>::contains_key::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:37:6: 37:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:34:1: 34:17>::insert(_1: &mut BlockFilter, _2: usize, _3: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:39:15: 39:24
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:39:26: 39:28
    debug filter => _3;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:39:37: 39:43
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:39:50: 39:50
    let _4: std::option::Option<u64>;    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:40:9: 40:37
    let mut _5: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:40:9: 40:37

    bb0: {
        _5 = &mut ((*_1).0: std::collections::HashMap<usize, u64>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:40:9: 40:37
        _4 = HashMap::<usize, u64>::insert(move _5, _2, _3) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:40:9: 40:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:40:19: 40:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, u64>, usize, u64) -> std::option::Option<u64> {HashMap::<usize, u64>::insert}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:41:6: 41:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:34:1: 34:17>::remove(_1: &mut BlockFilter, _2: usize) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:43:15: 43:24
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:43:26: 43:28
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:43:37: 43:37
    let _3: std::option::Option<u64>;    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:44:9: 44:30
    let mut _4: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:44:9: 44:30
    let _5: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:44:26: 44:29

    bb0: {
        _4 = &mut ((*_1).0: std::collections::HashMap<usize, u64>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:44:9: 44:30
        _5 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:44:26: 44:29
        _3 = HashMap::<usize, u64>::remove::<usize>(move _4, _5) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:44:9: 44:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:44:19: 44:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut HashMap<usize, u64>, &'b usize) -> std::option::Option<u64> {HashMap::<usize, u64>::remove::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:45:6: 45:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:34:1: 34:17>::get(_1: &BlockFilter, _2: usize) -> std::option::Option<&u64> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:47:12: 47:17
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:47:19: 47:21
    let mut _0: std::option::Option<&u64>; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:47:33: 47:45
    let mut _3: &std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:48:9: 48:27
    let _4: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:48:23: 48:26

    bb0: {
        _3 = &((*_1).0: std::collections::HashMap<usize, u64>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:48:9: 48:27
        _4 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:48:23: 48:26
        _0 = HashMap::<usize, u64>::get::<usize>(move _3, _4) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:48:9: 48:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:48:19: 48:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<usize, u64>, &'b usize) -> std::option::Option<&'a u64> {HashMap::<usize, u64>::get::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:49:6: 49:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:52:10: 52:17>::default() -> LogsFilter {
    let mut _0: filters::filterdb::LogsFilter; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:52:10: 52:17
    let mut _1: std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:55:5: 55:33

    bb0: {
        _1 = <HashMap<usize, jsonrpc_types::rpc_types::Filter> as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:55:5: 55:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:55:5: 55:33
                                         // + literal: Const { ty: fn() -> HashMap<usize, jsonrpc_types::rpc_types::Filter> {<HashMap<usize, jsonrpc_types::rpc_types::Filter> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = LogsFilter { data: move _1 }; // scope 0 at cita-chain/core/src/filters/filterdb.rs:52:10: 52:17
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:52:17: 52:17
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:58:1: 58:16>::is_filter(_1: &LogsFilter, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:59:18: 59:23
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:59:25: 59:27
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:59:39: 59:43
    let mut _3: &std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:60:9: 60:36
    let _4: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:60:32: 60:35

    bb0: {
        _3 = &((*_1).0: std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:60:9: 60:36
        _4 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:60:32: 60:35
        _0 = HashMap::<usize, jsonrpc_types::rpc_types::Filter>::contains_key::<usize>(move _3, _4) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:60:9: 60:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:60:19: 60:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<usize, jsonrpc_types::rpc_types::Filter>, &'b usize) -> bool {HashMap::<usize, jsonrpc_types::rpc_types::Filter>::contains_key::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:61:6: 61:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:58:1: 58:16>::insert(_1: &mut LogsFilter, _2: usize, _3: jsonrpc_types::rpc_types::Filter) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:63:15: 63:24
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:63:26: 63:28
    debug filter => _3;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:63:37: 63:43
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:63:53: 63:53
    let _4: std::option::Option<jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:64:9: 64:37
    let mut _5: &mut std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:64:9: 64:37

    bb0: {
        _5 = &mut ((*_1).0: std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:64:9: 64:37
        _4 = HashMap::<usize, jsonrpc_types::rpc_types::Filter>::insert(move _5, _2, move _3) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:64:9: 64:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:64:19: 64:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, jsonrpc_types::rpc_types::Filter>, usize, jsonrpc_types::rpc_types::Filter) -> std::option::Option<jsonrpc_types::rpc_types::Filter> {HashMap::<usize, jsonrpc_types::rpc_types::Filter>::insert}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_4) -> bb2;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:64:37: 64:38
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:65:6: 65:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:58:1: 58:16>::remove(_1: &mut LogsFilter, _2: usize) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:67:15: 67:24
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:67:26: 67:28
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:67:37: 67:37
    let _3: std::option::Option<jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:68:9: 68:30
    let mut _4: &mut std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:68:9: 68:30
    let _5: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:68:26: 68:29

    bb0: {
        _4 = &mut ((*_1).0: std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:68:9: 68:30
        _5 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:68:26: 68:29
        _3 = HashMap::<usize, jsonrpc_types::rpc_types::Filter>::remove::<usize>(move _4, _5) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:68:9: 68:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:68:19: 68:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut HashMap<usize, jsonrpc_types::rpc_types::Filter>, &'b usize) -> std::option::Option<jsonrpc_types::rpc_types::Filter> {HashMap::<usize, jsonrpc_types::rpc_types::Filter>::remove::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:68:30: 68:31
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:69:6: 69:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:58:1: 58:16>::get(_1: &LogsFilter, _2: usize) -> std::option::Option<&jsonrpc_types::rpc_types::Filter> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:71:12: 71:17
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:71:19: 71:21
    let mut _0: std::option::Option<&jsonrpc_types::rpc_types::Filter>; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:71:33: 71:48
    let mut _3: &std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:72:9: 72:27
    let _4: &usize;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:72:23: 72:26

    bb0: {
        _3 = &((*_1).0: std::collections::HashMap<usize, jsonrpc_types::rpc_types::Filter>); // scope 0 at cita-chain/core/src/filters/filterdb.rs:72:9: 72:27
        _4 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:72:23: 72:26
        _0 = HashMap::<usize, jsonrpc_types::rpc_types::Filter>::get::<usize>(move _3, _4) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:72:9: 72:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:72:19: 72:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<usize, jsonrpc_types::rpc_types::Filter>, &'b usize) -> std::option::Option<&'a jsonrpc_types::rpc_types::Filter> {HashMap::<usize, jsonrpc_types::rpc_types::Filter>::get::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:73:6: 73:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:76:10: 76:17>::default() -> FilterDB {
    let mut _0: filters::filterdb::FilterDB; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:76:10: 76:17
    let mut _1: usize;                   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:79:5: 79:29
    let mut _2: std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:81:5: 81:37
    let mut _3: filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:83:5: 83:30
    let mut _4: filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:84:5: 84:28
    let mut _5: u32;                     // in scope 0 at cita-chain/core/src/filters/filterdb.rs:86:5: 86:18

    bb0: {
        _1 = <usize as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:79:5: 79:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:79:5: 79:29
                                         // + literal: Const { ty: fn() -> usize {<usize as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <HashMap<usize, u64> as Default>::default() -> bb2; // scope 0 at cita-chain/core/src/filters/filterdb.rs:81:5: 81:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:81:5: 81:37
                                         // + literal: Const { ty: fn() -> HashMap<usize, u64> {<HashMap<usize, u64> as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <BlockFilter as Default>::default() -> [return: bb3, unwind: bb8]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:83:5: 83:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:83:5: 83:30
                                         // + literal: Const { ty: fn() -> BlockFilter {<BlockFilter as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <LogsFilter as Default>::default() -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:84:5: 84:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:84:5: 84:28
                                         // + literal: Const { ty: fn() -> LogsFilter {<LogsFilter as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <u32 as Default>::default() -> [return: bb5, unwind: bb6]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:86:5: 86:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:86:5: 86:18
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = FilterDB { next_available_id: move _1, last_update: move _2, block_filter: move _3, logs_filter: move _4, lifetime: move _5 }; // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:10: 76:17
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:17: 76:17
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:16: 76:17
    }

    bb7 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:16: 76:17
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:16: 76:17
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:76:10: 76:17
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::new() -> FilterDB {
    let mut _0: filters::filterdb::FilterDB; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:90:21: 90:25
    let mut _1: filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:94:15: 94:33

    bb0: {
        _1 = <FilterDB as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:94:15: 94:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:94:15: 94:31
                                         // + literal: Const { ty: fn() -> FilterDB {<FilterDB as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = FilterDB { next_available_id: (_1.0: usize), last_update: move (_1.1: std::collections::HashMap<usize, u64>), block_filter: move (_1.2: filters::filterdb::BlockFilter), logs_filter: move (_1.3: filters::filterdb::LogsFilter), lifetime: const 60_u32 }; // scope 0 at cita-chain/core/src/filters/filterdb.rs:91:9: 95:10
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:96:6: 96:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::gen_id(_1: &mut FilterDB) -> usize {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:105:19: 105:28
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:107:13: 107:15
    let _2: ();                          // in scope 0 at cita-chain/core/src/filters/filterdb.rs:106:9: 106:21
    let mut _3: usize;                   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:108:34: 108:72
    let mut _4: usize;                   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:108:34: 108:56
    scope 1 {
        debug id => _0;                  // in scope 1 at cita-chain/core/src/filters/filterdb.rs:107:13: 107:15
    }

    bb0: {
        _2 = FilterDB::prune(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:106:9: 106:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:106:14: 106:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) {FilterDB::prune}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ((*_1).0: usize);           // scope 0 at cita-chain/core/src/filters/filterdb.rs:107:18: 107:40
        _4 = ((*_1).0: usize);           // scope 1 at cita-chain/core/src/filters/filterdb.rs:108:34: 108:56
        _3 = core::num::<impl usize>::wrapping_add(move _4, const 1_usize) -> bb2; // scope 1 at cita-chain/core/src/filters/filterdb.rs:108:34: 108:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:108:57: 108:69
                                         // + literal: Const { ty: fn(usize, usize) -> usize {core::num::<impl usize>::wrapping_add}, val: Value(<ZST>) }
    }

    bb2: {
        ((*_1).0: usize) = move _3;      // scope 1 at cita-chain/core/src/filters/filterdb.rs:108:9: 108:72
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:110:6: 110:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::gen_logs_filter(_1: &mut FilterDB, _2: usize, _3: jsonrpc_types::rpc_types::Filter) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:113:28: 113:37
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:113:39: 113:41
    debug filter => _3;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:113:50: 113:56
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:113:66: 113:66
    let _4: u64;                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:114:13: 114:16
    let _5: std::option::Option<u64>;    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:115:9: 115:41
    let mut _6: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:115:9: 115:41
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/filters/filterdb.rs:115:37: 115:40
    let _8: ();                          // in scope 0 at cita-chain/core/src/filters/filterdb.rs:116:9: 116:44
    let mut _9: &mut filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:116:9: 116:44
    let mut _10: jsonrpc_types::rpc_types::Filter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:116:37: 116:43
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:117:5: 117:6
    scope 1 {
        debug now => _4;                 // in scope 1 at cita-chain/core/src/filters/filterdb.rs:114:13: 114:16
    }

    bb0: {
        _11 = const false;               // scope 0 at cita-chain/core/src/filters/filterdb.rs:114:13: 114:16
        _11 = const true;                // scope 0 at cita-chain/core/src/filters/filterdb.rs:114:13: 114:16
        _4 = now() -> [return: bb1, unwind: bb6]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:114:19: 114:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:114:19: 114:22
                                         // + literal: Const { ty: fn() -> u64 {now}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut ((*_1).1: std::collections::HashMap<usize, u64>); // scope 1 at cita-chain/core/src/filters/filterdb.rs:115:9: 115:41
        _7 = _4;                         // scope 1 at cita-chain/core/src/filters/filterdb.rs:115:37: 115:40
        _5 = HashMap::<usize, u64>::insert(move _6, _2, move _7) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/core/src/filters/filterdb.rs:115:9: 115:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:115:26: 115:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, u64>, usize, u64) -> std::option::Option<u64> {HashMap::<usize, u64>::insert}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut ((*_1).3: filters::filterdb::LogsFilter); // scope 1 at cita-chain/core/src/filters/filterdb.rs:116:9: 116:44
        _11 = const false;               // scope 1 at cita-chain/core/src/filters/filterdb.rs:116:37: 116:43
        _10 = move _3;                   // scope 1 at cita-chain/core/src/filters/filterdb.rs:116:37: 116:43
        _8 = LogsFilter::insert(move _9, _2, move _10) -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/core/src/filters/filterdb.rs:116:9: 116:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:116:26: 116:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut LogsFilter, usize, jsonrpc_types::rpc_types::Filter) {LogsFilter::insert}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:117:6: 117:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:113:5: 117:6
    }

    bb5 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:117:5: 117:6
    }

    bb6 (cleanup): {
        switchInt(_11) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:117:5: 117:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::gen_block_filter(_1: &mut FilterDB, _2: usize, _3: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:120:29: 120:38
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:120:40: 120:42
    debug filter => _3;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:120:51: 120:57
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:120:64: 120:64
    let _4: u64;                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:121:13: 121:16
    let _5: std::option::Option<u64>;    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:122:9: 122:41
    let mut _6: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:122:9: 122:41
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/filters/filterdb.rs:122:37: 122:40
    let _8: ();                          // in scope 0 at cita-chain/core/src/filters/filterdb.rs:123:9: 123:45
    let mut _9: &mut filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:123:9: 123:45
    scope 1 {
        debug now => _4;                 // in scope 1 at cita-chain/core/src/filters/filterdb.rs:121:13: 121:16
    }

    bb0: {
        _4 = now() -> bb1;               // scope 0 at cita-chain/core/src/filters/filterdb.rs:121:19: 121:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:121:19: 121:22
                                         // + literal: Const { ty: fn() -> u64 {now}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut ((*_1).1: std::collections::HashMap<usize, u64>); // scope 1 at cita-chain/core/src/filters/filterdb.rs:122:9: 122:41
        _7 = _4;                         // scope 1 at cita-chain/core/src/filters/filterdb.rs:122:37: 122:40
        _5 = HashMap::<usize, u64>::insert(move _6, _2, move _7) -> bb2; // scope 1 at cita-chain/core/src/filters/filterdb.rs:122:9: 122:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:122:26: 122:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, u64>, usize, u64) -> std::option::Option<u64> {HashMap::<usize, u64>::insert}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut ((*_1).2: filters::filterdb::BlockFilter); // scope 1 at cita-chain/core/src/filters/filterdb.rs:123:9: 123:45
        _8 = BlockFilter::insert(move _9, _2, _3) -> bb3; // scope 1 at cita-chain/core/src/filters/filterdb.rs:123:9: 123:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:123:27: 123:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut BlockFilter, usize, u64) {BlockFilter::insert}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:124:6: 124:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::uninstall(_1: &mut FilterDB, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:127:22: 127:31
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:127:33: 127:35
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:127:47: 127:51
    let _3: ();                          // in scope 0 at cita-chain/core/src/filters/filterdb.rs:128:9: 128:21
    let mut _4: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:131:12: 131:30
    let mut _5: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:131:12: 131:30
    let _6: ();                          // in scope 0 at cita-chain/core/src/filters/filterdb.rs:132:13: 132:41
    let mut _7: &mut filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:132:13: 132:41
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:133:16: 133:39
    let mut _9: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:133:16: 133:39
    let _10: ();                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:134:17: 134:44
    let mut _11: &mut filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:134:17: 134:44

    bb0: {
        _3 = FilterDB::prune(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:128:9: 128:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:128:14: 128:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) {FilterDB::prune}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &(*_1);                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:131:12: 131:30
        _4 = FilterDB::is_filter(move _5, _2) -> bb2; // scope 0 at cita-chain/core/src/filters/filterdb.rs:131:12: 131:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:131:17: 131:26
                                         // + literal: Const { ty: for<'a> fn(&'a FilterDB, usize) -> bool {FilterDB::is_filter}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _4) -> [0: bb8, otherwise: bb3]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:131:12: 131:30
    }

    bb3: {
        _7 = &mut ((*_1).2: filters::filterdb::BlockFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:132:13: 132:41
        _6 = BlockFilter::remove(move _7, _2) -> bb4; // scope 0 at cita-chain/core/src/filters/filterdb.rs:132:13: 132:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:132:31: 132:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut BlockFilter, usize) {BlockFilter::remove}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &(*_1);                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:133:16: 133:39
        _8 = FilterDB::is_logs_filter(move _9, _2) -> bb5; // scope 0 at cita-chain/core/src/filters/filterdb.rs:133:16: 133:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:133:21: 133:35
                                         // + literal: Const { ty: for<'a> fn(&'a FilterDB, usize) -> bool {FilterDB::is_logs_filter}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _8) -> [0: bb7, otherwise: bb6]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:133:16: 133:39
    }

    bb6: {
        _11 = &mut ((*_1).3: filters::filterdb::LogsFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:134:17: 134:44
        _10 = LogsFilter::remove(move _11, _2) -> bb7; // scope 0 at cita-chain/core/src/filters/filterdb.rs:134:17: 134:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:134:34: 134:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut LogsFilter, usize) {LogsFilter::remove}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const true;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:137:13: 137:17
        goto -> bb9;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:131:9: 140:10
    }

    bb8: {
        _0 = const false;                // scope 0 at cita-chain/core/src/filters/filterdb.rs:139:13: 139:18
        goto -> bb9;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:131:9: 140:10
    }

    bb9: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:141:6: 141:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::prune(_1: &mut FilterDB) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:145:18: 145:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:145:29: 145:29
    let _2: u64;                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:146:13: 146:16
    let mut _3: std::collections::hash_map::Iter<'_, usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    let mut _4: std::collections::hash_map::Iter<'_, usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    let mut _5: &std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    let _6: std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:51
    let mut _7: &std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:51
    let mut _9: std::option::Option<(&usize, &u64)>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    let mut _10: &mut std::collections::hash_map::Iter<'_, usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    let mut _11: isize;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:147:9: 153:10
    let mut _14: bool;                   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:53
    let mut _15: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:29
    let mut _16: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:17: 148:20
    let mut _17: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:23: 148:28
    let mut _18: (u64, bool);            // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:29
    let mut _19: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:33: 148:53
    let mut _20: u32;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:148:33: 148:46
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _23: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _24: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _25: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _26: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _27: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _29: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _30: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: &[&str];                // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
    let mut _32: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _33: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _34: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
    let _36: &u64;                       // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
    let _37: u64;                        // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
    let mut _38: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:53: 149:56
    let mut _39: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:59: 149:64
    let mut _40: (u64, bool);            // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
    let _41: ();                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:150:17: 150:46
    let mut _42: &mut filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:150:17: 150:46
    let mut _43: usize;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:150:42: 150:45
    let _44: ();                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:151:17: 151:45
    let mut _45: &mut filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:151:17: 151:45
    let mut _46: usize;                  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:151:41: 151:44
    scope 1 {
        debug now => _2;                 // in scope 1 at cita-chain/core/src/filters/filterdb.rs:146:13: 146:16
        let mut _8: std::collections::hash_map::Iter<'_, usize, u64>; // in scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
        scope 2 {
            debug iter => _8;            // in scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
            let _12: &usize;             // in scope 2 at cita-chain/core/src/filters/filterdb.rs:147:14: 147:16
            let _13: &u64;               // in scope 2 at cita-chain/core/src/filters/filterdb.rs:147:18: 147:22
            scope 3 {
                debug id => _12;         // in scope 3 at cita-chain/core/src/filters/filterdb.rs:147:14: 147:16
                debug time => _13;       // in scope 3 at cita-chain/core/src/filters/filterdb.rs:147:18: 147:22
                let _21: log::Level;     // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                scope 4 {
                    debug lvl => _21;    // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _47: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _48: &[&str; 1]; // in scope 4 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
                    let mut _49: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
            }
        }
    }

    bb0: {
        _2 = now() -> bb1;               // scope 0 at cita-chain/core/src/filters/filterdb.rs:146:19: 146:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:146:19: 146:22
                                         // + literal: Const { ty: fn() -> u64 {now}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: std::collections::HashMap<usize, u64>); // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:51
        _6 = <HashMap<usize, u64> as Clone>::clone(move _7) -> bb2; // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:147:44: 147:49
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, u64>) -> HashMap<usize, u64> {<HashMap<usize, u64> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
        _4 = HashMap::<usize, u64>::iter(move _5) -> [return: bb3, unwind: bb26]; // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:147:52: 147:56
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, u64>) -> std::collections::hash_map::Iter<'a, usize, u64> {HashMap::<usize, u64>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <std::collections::hash_map::Iter<'_, usize, u64> as IntoIterator>::into_iter(move _4) -> [return: bb4, unwind: bb26]; // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, usize, u64>) -> <std::collections::hash_map::Iter<'_, usize, u64> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, usize, u64> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = move _3;                    // scope 1 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
        goto -> bb5;                     // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:9: 153:10
    }

    bb5: {
        _10 = &mut _8;                   // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
        _9 = <std::collections::hash_map::Iter<'_, usize, u64> as Iterator>::next(_10) -> [return: bb6, unwind: bb26]; // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, usize, u64>) -> std::option::Option<<std::collections::hash_map::Iter<'_, usize, u64> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, usize, u64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = discriminant(_9);          // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    }

    bb7: {
        _12 = (((_9 as Some).0: (&usize, &u64)).0: &usize); // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:14: 147:16
        _13 = (((_9 as Some).0: (&usize, &u64)).1: &u64); // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:18: 147:22
        _16 = _2;                        // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:17: 148:20
        _17 = (*_13);                    // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:23: 148:28
        _18 = CheckedSub(_16, _17);      // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:29
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, move _17) -> [success: bb10, unwind: bb26]; // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:29
    }

    bb8: {
        unreachable;                     // scope 2 at cita-chain/core/src/filters/filterdb.rs:147:27: 147:58
    }

    bb9: {
        drop(_6) -> bb25;                // scope 1 at cita-chain/core/src/filters/filterdb.rs:153:9: 153:10
    }

    bb10: {
        _15 = move (_18.0: u64);         // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:29
        _20 = ((*_1).4: u32);            // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:33: 148:46
        _19 = <u32 as Into<u64>>::into(move _20) -> [return: bb11, unwind: bb26]; // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:33: 148:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:148:47: 148:51
                                         // + literal: Const { ty: fn(u32) -> u64 {<u32 as Into<u64>>::into}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = Ge(move _15, move _19);    // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:53
        switchInt(move _14) -> [0: bb5, otherwise: bb12]; // scope 3 at cita-chain/core/src/filters/filterdb.rs:148:16: 148:53
    }

    bb12: {
        _21 = log::Level::Trace;         // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _24 = &_21;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _49 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FilterDB::prune, [], Some(promoted[2])) }
        _23 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _24, _49) -> [return: bb16, unwind: bb26]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb13: {
        _22 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb15;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        _26 = &_21;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _28 = log::max_level() -> [return: bb17, unwind: bb26]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _22) -> [0: bb23, otherwise: bb19]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        switchInt(move _23) -> [0: bb13, otherwise: bb14]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb17: {
        _27 = &_28;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _25 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _26, move _27) -> [return: bb18, unwind: bb26]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb18: {
        _22 = move _25;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb15;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb19: {
        _48 = const _;                   // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(FilterDB::prune, [], Some(promoted[1])) }
        _31 = _48 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
        _38 = _2;                        // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:53: 149:56
        _39 = (*_13);                    // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:59: 149:64
        _40 = CheckedSub(_38, _39);      // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
        assert(!move (_40.1: bool), "attempt to compute `{} - {}`, which would overflow", move _38, move _39) -> [success: bb20, unwind: bb26]; // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
    }

    bb20: {
        _37 = move (_40.0: u64);         // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
        _36 = &_37;                      // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
        _35 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_36) -> [return: bb21, unwind: bb26]; // scope 4 at cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:149:52: 149:65
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb21: {
        _34 = [move _35];                // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _33 = &_34;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _32 = _33 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb22, unwind: bb26]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = const _;                   // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FilterDB::prune, [], Some(promoted[0])) }
        _29 = log::__private_api_log(move _30, _21, _47) -> [return: bb28, unwind: bb26]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb23: {
        _42 = &mut ((*_1).2: filters::filterdb::BlockFilter); // scope 3 at cita-chain/core/src/filters/filterdb.rs:150:17: 150:46
        _43 = (*_12);                    // scope 3 at cita-chain/core/src/filters/filterdb.rs:150:42: 150:45
        _41 = BlockFilter::remove(move _42, move _43) -> [return: bb24, unwind: bb26]; // scope 3 at cita-chain/core/src/filters/filterdb.rs:150:17: 150:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:150:35: 150:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut BlockFilter, usize) {BlockFilter::remove}, val: Value(<ZST>) }
    }

    bb24: {
        _45 = &mut ((*_1).3: filters::filterdb::LogsFilter); // scope 3 at cita-chain/core/src/filters/filterdb.rs:151:17: 151:45
        _46 = (*_12);                    // scope 3 at cita-chain/core/src/filters/filterdb.rs:151:41: 151:44
        _44 = LogsFilter::remove(move _45, move _46) -> [return: bb29, unwind: bb26]; // scope 3 at cita-chain/core/src/filters/filterdb.rs:151:17: 151:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:151:34: 151:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut LogsFilter, usize) {LogsFilter::remove}, val: Value(<ZST>) }
    }

    bb25: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:154:6: 154:6
    }

    bb26 (cleanup): {
        drop(_6) -> bb27;                // scope 1 at cita-chain/core/src/filters/filterdb.rs:153:9: 153:10
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:145:5: 154:6
    }

    bb28: {
        goto -> bb23;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb29: {
        goto -> bb5;                     // scope 3 at cita-chain/core/src/filters/filterdb.rs:151:17: 151:45
    }
}

promoted[0] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::prune: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:17: 149:66
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:17: 149:66

    bb0: {
        _3 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/filterdb.rs"; // scope 0 at cita-chain/core/src/filters/filterdb.rs:149:17: 149:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:149:17: 149:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:149:17: 149:66
        _1 = (move _2, move _4, move _6, const 149_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::prune: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50

    bb0: {
        _1 = [const "Prune filter, time: "]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:149:24: 149:50
    }
}

promoted[2] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::prune: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_logs_filter(_1: &mut FilterDB, _2: usize) -> std::option::Option<&jsonrpc_types::rpc_types::Filter> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:158:28: 158:37
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:158:39: 158:41
    let mut _0: std::option::Option<&jsonrpc_types::rpc_types::Filter>; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:158:53: 158:68
    let _3: u64;                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:159:13: 159:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
    let _19: &std::option::Option<&jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
    let _20: std::option::Option<&jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
    let mut _21: &filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
    let _22: ();                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:161:9: 161:21
    let _23: std::option::Option<u64>;   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:162:9: 162:41
    let mut _24: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:162:9: 162:41
    let mut _25: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:162:37: 162:40
    let mut _26: &filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:163:9: 163:33
    scope 1 {
        debug now => _3;                 // in scope 1 at cita-chain/core/src/filters/filterdb.rs:159:13: 159:16
        let _4: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _4;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _27: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _28: &[&str; 1];     // in scope 2 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
            let mut _29: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _3 = now() -> bb1;               // scope 0 at cita-chain/core/src/filters/filterdb.rs:159:19: 159:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:159:19: 159:22
                                         // + literal: Const { ty: fn() -> u64 {now}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = log::Level::Trace;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _29 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FilterDB::get_logs_filter, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _29) -> bb5; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb3: {
        _9 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb6;   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _5) -> [0: bb12, otherwise: bb8]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        switchInt(move _6) -> [0: bb2, otherwise: bb3]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _10 = &_11;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb7; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _5 = move _8;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _28 = const _;                   // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(FilterDB::get_logs_filter, [], Some(promoted[1])) }
        _14 = _28 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
        _21 = &((*_1).3: filters::filterdb::LogsFilter); // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
        _20 = LogsFilter::get(move _21, _2) -> bb9; // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:160:58: 160:61
                                         // + literal: Const { ty: for<'a> fn(&'a LogsFilter, usize) -> std::option::Option<&'a jsonrpc_types::rpc_types::Filter> {LogsFilter::get}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = &_20;                      // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<std::option::Option<&jsonrpc_types::rpc_types::Filter>>(_19) -> bb10; // scope 2 at cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:160:41: 160:65
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::option::Option<&jsonrpc_types::rpc_types::Filter>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::option::Option<&jsonrpc_types::rpc_types::Filter>>}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = [move _18];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb11; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FilterDB::get_logs_filter, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _27) -> bb12; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = FilterDB::prune(_1) -> bb13; // scope 1 at cita-chain/core/src/filters/filterdb.rs:161:9: 161:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:161:14: 161:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) {FilterDB::prune}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = &mut ((*_1).1: std::collections::HashMap<usize, u64>); // scope 1 at cita-chain/core/src/filters/filterdb.rs:162:9: 162:41
        _25 = _3;                        // scope 1 at cita-chain/core/src/filters/filterdb.rs:162:37: 162:40
        _23 = HashMap::<usize, u64>::insert(move _24, _2, move _25) -> bb14; // scope 1 at cita-chain/core/src/filters/filterdb.rs:162:9: 162:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:162:26: 162:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, u64>, usize, u64) -> std::option::Option<u64> {HashMap::<usize, u64>::insert}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = &((*_1).3: filters::filterdb::LogsFilter); // scope 1 at cita-chain/core/src/filters/filterdb.rs:163:9: 163:33
        _0 = LogsFilter::get(move _26, _2) -> bb15; // scope 1 at cita-chain/core/src/filters/filterdb.rs:163:9: 163:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:163:26: 163:29
                                         // + literal: Const { ty: for<'a> fn(&'a LogsFilter, usize) -> std::option::Option<&'a jsonrpc_types::rpc_types::Filter> {LogsFilter::get}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:164:6: 164:6
    }
}

promoted[0] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_logs_filter: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:9: 160:66
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:9: 160:66

    bb0: {
        _3 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/filterdb.rs"; // scope 0 at cita-chain/core/src/filters/filterdb.rs:160:9: 160:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:160:9: 160:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:160:9: 160:66
        _1 = (move _2, move _4, move _6, const 160_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_logs_filter: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39

    bb0: {
        _1 = [const "Get logs filter: "]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:160:16: 160:39
    }
}

promoted[2] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_logs_filter: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_block_filter(_1: &mut FilterDB, _2: usize) -> std::option::Option<&u64> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:168:29: 168:38
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:168:40: 168:42
    let mut _0: std::option::Option<&u64>; // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:168:54: 168:66
    let _3: u64;                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:169:13: 169:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
    let _19: &std::option::Option<&u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
    let _20: std::option::Option<&u64>;  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
    let mut _21: &filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
    let _22: ();                         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:171:9: 171:21
    let _23: std::option::Option<u64>;   // in scope 0 at cita-chain/core/src/filters/filterdb.rs:172:9: 172:41
    let mut _24: &mut std::collections::HashMap<usize, u64>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:172:9: 172:41
    let mut _25: u64;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:172:37: 172:40
    let mut _26: &filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:173:9: 173:34
    scope 1 {
        debug now => _3;                 // in scope 1 at cita-chain/core/src/filters/filterdb.rs:169:13: 169:16
        let _4: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _4;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _27: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _28: &[&str; 1];     // in scope 2 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
            let mut _29: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _3 = now() -> bb1;               // scope 0 at cita-chain/core/src/filters/filterdb.rs:169:19: 169:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:169:19: 169:22
                                         // + literal: Const { ty: fn() -> u64 {now}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = log::Level::Trace;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _29 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FilterDB::get_block_filter, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _29) -> bb5; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb3: {
        _9 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb6;   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _5) -> [0: bb12, otherwise: bb8]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        switchInt(move _6) -> [0: bb2, otherwise: bb3]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _10 = &_11;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb7; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _5 = move _8;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _28 = const _;                   // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(FilterDB::get_block_filter, [], Some(promoted[1])) }
        _14 = _28 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
        _21 = &((*_1).2: filters::filterdb::BlockFilter); // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
        _20 = BlockFilter::get(move _21, _2) -> bb9; // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:170:60: 170:63
                                         // + literal: Const { ty: for<'a> fn(&'a BlockFilter, usize) -> std::option::Option<&'a u64> {BlockFilter::get}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = &_20;                      // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<std::option::Option<&u64>>(_19) -> bb10; // scope 2 at cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:170:42: 170:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::option::Option<&u64>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<std::option::Option<&u64>>}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = [move _18];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb11; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FilterDB::get_block_filter, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _27) -> bb12; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = FilterDB::prune(_1) -> bb13; // scope 1 at cita-chain/core/src/filters/filterdb.rs:171:9: 171:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:171:14: 171:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) {FilterDB::prune}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = &mut ((*_1).1: std::collections::HashMap<usize, u64>); // scope 1 at cita-chain/core/src/filters/filterdb.rs:172:9: 172:41
        _25 = _3;                        // scope 1 at cita-chain/core/src/filters/filterdb.rs:172:37: 172:40
        _23 = HashMap::<usize, u64>::insert(move _24, _2, move _25) -> bb14; // scope 1 at cita-chain/core/src/filters/filterdb.rs:172:9: 172:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:172:26: 172:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, u64>, usize, u64) -> std::option::Option<u64> {HashMap::<usize, u64>::insert}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = &((*_1).2: filters::filterdb::BlockFilter); // scope 1 at cita-chain/core/src/filters/filterdb.rs:173:9: 173:34
        _0 = BlockFilter::get(move _26, _2) -> bb15; // scope 1 at cita-chain/core/src/filters/filterdb.rs:173:9: 173:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:173:27: 173:30
                                         // + literal: Const { ty: for<'a> fn(&'a BlockFilter, usize) -> std::option::Option<&'a u64> {BlockFilter::get}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:174:6: 174:6
    }
}

promoted[0] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_block_filter: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:9: 170:68
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:9: 170:68

    bb0: {
        _3 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::filterdb"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/filterdb.rs"; // scope 0 at cita-chain/core/src/filters/filterdb.rs:170:9: 170:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:170:9: 170:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:170:9: 170:68
        _1 = (move _2, move _4, move _6, const 170_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_block_filter: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40

    bb0: {
        _1 = [const "Get block filter: "]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:170:16: 170:40
    }
}

promoted[2] in filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::get_block_filter: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::is_block_filter(_1: &FilterDB, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:178:28: 178:33
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:178:35: 178:37
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:178:49: 178:53
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:40
    let mut _4: &filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:40
    let mut _5: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:179:44: 179:75
    let mut _6: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:179:45: 179:75
    let mut _7: &filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:179:45: 179:75

    bb0: {
        _4 = &((*_1).2: filters::filterdb::BlockFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:40
        _3 = BlockFilter::is_filter(move _4, _2) -> bb4; // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:179:27: 179:36
                                         // + literal: Const { ty: for<'a> fn(&'a BlockFilter, usize) -> bool {BlockFilter::is_filter}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:75
        goto -> bb3;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:75
    }

    bb2: {
        _7 = &((*_1).3: filters::filterdb::LogsFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:45: 179:75
        _6 = LogsFilter::is_filter(move _7, _2) -> bb5; // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:45: 179:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:179:62: 179:71
                                         // + literal: Const { ty: for<'a> fn(&'a LogsFilter, usize) -> bool {LogsFilter::is_filter}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:180:6: 180:6
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:75
    }

    bb5: {
        _5 = Not(move _6);               // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:44: 179:75
        _0 = move _5;                    // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:75
        goto -> bb3;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:179:9: 179:75
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::is_logs_filter(_1: &FilterDB, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:183:27: 183:32
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:183:34: 183:36
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:183:48: 183:52
    let mut _3: &filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:184:9: 184:39

    bb0: {
        _3 = &((*_1).3: filters::filterdb::LogsFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:184:9: 184:39
        _0 = LogsFilter::is_filter(move _3, _2) -> bb1; // scope 0 at cita-chain/core/src/filters/filterdb.rs:184:9: 184:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:184:26: 184:35
                                         // + literal: Const { ty: for<'a> fn(&'a LogsFilter, usize) -> bool {LogsFilter::is_filter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:185:6: 185:6
    }
}

fn filterdb::<impl at cita-chain/core/src/filters/filterdb.rs:89:1: 89:14>::is_filter(_1: &FilterDB, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:188:22: 188:27
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/filterdb.rs:188:29: 188:31
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:188:43: 188:47
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:39
    let mut _4: &filters::filterdb::LogsFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:39
    let mut _5: bool;                    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:189:43: 189:74
    let mut _6: &filters::filterdb::BlockFilter; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:189:43: 189:74

    bb0: {
        _4 = &((*_1).3: filters::filterdb::LogsFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:39
        _3 = LogsFilter::is_filter(move _4, _2) -> bb4; // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:189:26: 189:35
                                         // + literal: Const { ty: for<'a> fn(&'a LogsFilter, usize) -> bool {LogsFilter::is_filter}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const true;                 // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:74
        goto -> bb3;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:74
    }

    bb2: {
        _6 = &((*_1).2: filters::filterdb::BlockFilter); // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:43: 189:74
        _5 = BlockFilter::is_filter(move _6, _2) -> bb5; // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:43: 189:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:189:61: 189:70
                                         // + literal: Const { ty: for<'a> fn(&'a BlockFilter, usize) -> bool {BlockFilter::is_filter}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:190:6: 190:6
    }

    bb4: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:74
    }

    bb5: {
        _0 = move _5;                    // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:74
        goto -> bb3;                     // scope 0 at cita-chain/core/src/filters/filterdb.rs:189:9: 189:74
    }
}

fn now() -> u64 {
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/filters/filterdb.rs:194:13: 194:16
    let mut _1: &std::time::Duration;    // in scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 198:19
    let _2: std::time::Duration;         // in scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 197:18
    let mut _3: std::result::Result<std::time::Duration, std::time::SystemTimeError>; // in scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 196:48
    let mut _4: &std::time::SystemTime;  // in scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 196:48
    let _5: std::time::SystemTime;       // in scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 195:22

    bb0: {
        _5 = SystemTime::now() -> bb1;   // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 195:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:195:5: 195:20
                                         // + literal: Const { ty: fn() -> SystemTime {SystemTime::now}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 196:48
        _3 = SystemTime::duration_since(move _4, const _) -> bb2; // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 196:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:196:10: 196:24
                                         // + literal: Const { ty: for<'a> fn(&'a SystemTime, SystemTime) -> Result<Duration, SystemTimeError> {SystemTime::duration_since}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:196:25: 196:47
                                         // + literal: Const { ty: SystemTime, val: Unevaluated(SystemTime::UNIX_EPOCH, [], None) }
    }

    bb2: {
        _2 = Result::<Duration, SystemTimeError>::unwrap(move _3) -> bb3; // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 197:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:197:10: 197:16
                                         // + literal: Const { ty: fn(Result<Duration, SystemTimeError>) -> Duration {Result::<Duration, SystemTimeError>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = &_2;                        // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 198:19
        _0 = Duration::as_secs(move _1) -> bb4; // scope 0 at cita-chain/core/src/filters/filterdb.rs:195:5: 198:19
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/filterdb.rs:198:10: 198:17
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u64 {Duration::as_secs}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/filters/filterdb.rs:199:2: 199:2
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:54:1: 54:28>::get_block_filter(_1: &chain::Chain, _2: usize) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:55:25: 55:30
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:55:32: 55:34
    let _3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:56:13: 56:21
    let mut _4: std::option::Option<&u64>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
    let mut _5: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
    let mut _6: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
    let mut _7: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
    let mut _8: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:65
    let mut _9: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
    let mut _10: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
    let _11: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
    let mut _12: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
    let mut _13: isize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:59:16: 59:34
    let mut _15: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:60:28: 60:41
    let _16: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:63:9: 63:23
    let mut _17: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:63:14: 63:22
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:65:5: 65:6
    scope 1 {
        debug filterdb => _3;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:56:13: 56:21
        let mut _0: u64;                 // return place in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:57:13: 57:29
        scope 2 {
            debug block_filter => _0;    // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:57:13: 57:29
            scope 3 {
                debug block_number => _14; // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:21: 59:33
                let _14: &u64;           // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:21: 59:33
            }
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:56:13: 56:21
        _18 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:56:24: 56:40
        _3 = chain::Chain::filter_db(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:56:24: 56:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:56:29: 56:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = core::num::<impl u64>::min_value() -> [return: bb2, unwind: bb15]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:57:32: 57:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:57:32: 57:54
                                         // + literal: Const { ty: fn() -> u64 {core::num::<impl u64>::min_value}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_3;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
        _11 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _12) -> [return: bb3, unwind: bb15]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _11;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
        _9 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _10) -> [return: bb4, unwind: bb15]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:59:46: 59:54
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _9) -> [return: bb5, unwind: bb15]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:59:57: 59:63
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = &mut _8;                    // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
        _6 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _7) -> [return: bb6, unwind: bb12]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = _6;                         // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
        _4 = FilterDB::get_block_filter(move _5, _2) -> [return: bb7, unwind: bb12]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:37: 59:86
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:59:66: 59:82
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize) -> std::option::Option<&'a u64> {FilterDB::get_block_filter}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = discriminant(_4);          // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:16: 59:34
        switchInt(move _13) -> [1: bb8, otherwise: bb9]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:16: 59:34
    }

    bb8: {
        _14 = ((_4 as Some).0: &u64);    // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:59:21: 59:33
        _15 = (*_14);                    // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:60:28: 60:41
        _0 = move _15;                   // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:60:13: 60:41
        goto -> bb9;                     // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:59:9: 61:10
    }

    bb9: {
        drop(_8) -> [return: bb10, unwind: bb15]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:61:9: 61:10
    }

    bb10: {
        _18 = const false;               // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:63:14: 63:22
        _17 = move _3;                   // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:63:14: 63:22
        _16 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _17) -> [return: bb11, unwind: bb15]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:63:9: 63:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:63:9: 63:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:65:5: 65:6
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:65:6: 65:6
    }

    bb12 (cleanup): {
        drop(_8) -> bb15;                // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:61:9: 61:10
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:55:5: 65:6
    }

    bb14 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:65:5: 65:6
    }

    bb15 (cleanup): {
        switchInt(_18) -> [0: bb13, otherwise: bb14]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:65:5: 65:6
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:54:1: 54:28>::get_logs_with_filter(_1: &chain::Chain, _2: jsonrpc_types::rpc_types::Filter, _3: u64) -> Vec<jsonrpc_types::rpc_types::Log> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:67:29: 67:34
    debug filter => _2;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:67:36: 67:42
    debug block_filter => _3;            // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:67:52: 67:64
    let mut _0: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:67:82: 67:90
    let mut _4: types::filter::Filter;   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:68:13: 68:23
    let mut _5: types::block_number::BlockTag; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:69:29: 69:59
    let mut _6: types::block_number::BlockTag; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:70:27: 70:53
    let mut _7: types::block_number::Tag; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:70:41: 70:52
    let mut _9: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:73
    let mut _10: std::iter::Map<std::vec::IntoIter<types::log::LocalizedLog>, fn(types::log::LocalizedLog) -> jsonrpc_types::rpc_types::Log {<types::log::LocalizedLog as std::convert::Into<jsonrpc_types::rpc_types::Log>>::into}>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:63
    let mut _11: std::vec::IntoIter<types::log::LocalizedLog>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:47
    let mut _12: std::vec::Vec<types::log::LocalizedLog>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:35
    let _13: &types::filter::Filter;     // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:73:27: 73:34
    scope 1 {
        debug filter => _4;              // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:68:13: 68:23
        let _8: std::option::Option<usize>; // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:71:13: 71:18
        scope 2 {
            debug limit => _8;           // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:71:13: 71:18
        }
    }

    bb0: {
        _4 = <jsonrpc_types::rpc_types::Filter as Into<types::filter::Filter>>::into(move _2) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:68:38: 68:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:68:45: 68:49
                                         // + literal: Const { ty: fn(jsonrpc_types::rpc_types::Filter) -> types::filter::Filter {<jsonrpc_types::rpc_types::Filter as Into<types::filter::Filter>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = types::block_number::BlockTag::Height(_3); // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:69:29: 69:59
        (_4.0: types::block_number::BlockTag) = move _5; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:69:9: 69:59
        _7 = const types::block_number::Tag::Latest; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:70:41: 70:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: types::block_number::Tag, val: Value(Scalar(0x00)) }
        _6 = types::block_number::BlockTag::Tag(move _7); // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:70:27: 70:53
        (_4.1: types::block_number::BlockTag) = move _6; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:70:9: 70:53
        _8 = (_4.4: std::option::Option<usize>); // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:71:21: 71:33
        _13 = &_4;                       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:73:27: 73:34
        _12 = chain::Chain::get_logs(_1, _13) -> [return: bb2, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:73:18: 73:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b types::filter::Filter) -> Vec<LocalizedLog> {chain::Chain::get_logs}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = <Vec<LocalizedLog> as IntoIterator>::into_iter(move _12) -> [return: bb3, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:73:36: 73:45
                                         // + literal: Const { ty: fn(Vec<LocalizedLog>) -> <Vec<LocalizedLog> as IntoIterator>::IntoIter {<Vec<LocalizedLog> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = <std::vec::IntoIter<LocalizedLog> as Iterator>::map::<jsonrpc_types::rpc_types::Log, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>(move _11, <LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into) -> [return: bb4, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:73:48: 73:51
                                         // + literal: Const { ty: fn(std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}) -> std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> {<std::vec::IntoIter<LocalizedLog> as Iterator>::map::<jsonrpc_types::rpc_types::Log, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:73:52: 73:62
                                         // + literal: Const { ty: fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = <std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> as Iterator>::collect::<Vec<jsonrpc_types::rpc_types::Log>>(move _10) -> [return: bb5, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:73:13: 73:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:73:64: 73:71
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}>) -> Vec<jsonrpc_types::rpc_types::Log> {<std::iter::Map<std::vec::IntoIter<LocalizedLog>, fn(LocalizedLog) -> jsonrpc_types::rpc_types::Log {<LocalizedLog as Into<jsonrpc_types::rpc_types::Log>>::into}> as Iterator>::collect::<Vec<jsonrpc_types::rpc_types::Log>>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = split_logs(move _9, _8) -> [return: bb6, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:72:9: 75:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:72:9: 72:19
                                         // + literal: Const { ty: fn(Vec<jsonrpc_types::rpc_types::Log>, std::option::Option<usize>) -> Vec<jsonrpc_types::rpc_types::Log> {split_logs}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:76:5: 76:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:76:6: 76:6
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:76:5: 76:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:67:5: 76:6
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::new_filter(_1: &chain::Chain, _2: jsonrpc_types::rpc_types::Filter) -> usize {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:80:19: 80:24
    debug filter => _2;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:80:26: 80:32
    let _3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:13: 81:21
    let mut _4: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
    let mut _5: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
    let mut _6: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
    let mut _7: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:46
    let mut _8: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
    let mut _9: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
    let _10: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
    let mut _11: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
    let _13: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
    let mut _14: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
    let mut _15: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
    let mut _16: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
    let mut _17: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:37
    let mut _18: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
    let mut _19: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
    let _20: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
    let mut _21: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
    let mut _22: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:54: 84:56
    let mut _23: jsonrpc_types::rpc_types::Filter; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:84:58: 84:64
    let _24: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
    let mut _25: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
    let mut _26: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
    let mut _27: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
    let mut _28: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 87:22
    let mut _29: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
    let mut _30: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
    let _31: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
    let mut _32: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
    let mut _33: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:88:31: 88:33
    let mut _34: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:88:35: 88:47
    let _35: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:89:9: 89:23
    let mut _36: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:89:14: 89:22
    let mut _37: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    let mut _38: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    scope 1 {
        debug filterdb => _3;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:81:13: 81:21
        let mut _0: usize;               // return place in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:13: 82:15
        scope 2 {
            debug id => _0;              // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:82:13: 82:15
            let _12: u64;                // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:83:13: 83:25
            scope 3 {
                debug block_number => _12; // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:83:13: 83:25
            }
        }
    }

    bb0: {
        _38 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:13: 81:21
        _37 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:13: 81:21
        _38 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:13: 81:21
        _3 = chain::Chain::filter_db(_1) -> [return: bb1, unwind: bb29]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:24: 81:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:81:29: 81:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _37 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:81:39: 81:40
        _11 = &_3;                       // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
        _10 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _11) -> [return: bb2, unwind: bb27]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
        _8 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _9) -> [return: bb3, unwind: bb27]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:82:27: 82:35
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _8) -> [return: bb4, unwind: bb27]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:82:38: 82:44
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = &mut _7;                    // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
        _5 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _6) -> [return: bb5, unwind: bb24]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = _5;                         // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
        _0 = FilterDB::gen_id(move _4) -> [return: bb6, unwind: bb24]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:18: 82:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:82:47: 82:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) -> usize {FilterDB::gen_id}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb27]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:55: 82:56
    }

    bb7: {
        _12 = chain::Chain::get_current_height(_1) -> [return: bb8, unwind: bb27]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:83:28: 83:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:83:33: 83:51
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = &_3;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
        _20 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _21) -> [return: bb9, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = _20;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
        _18 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _19) -> [return: bb10, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:84:18: 84:26
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _18) -> [return: bb11, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:84:29: 84:35
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _16 = &mut _17;                  // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
        _15 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _16) -> [return: bb12, unwind: bb23]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _14 = _15;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
        _22 = _0;                        // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:54: 84:56
        _38 = const false;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:58: 84:64
        _23 = move _2;                   // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:58: 84:64
        _13 = FilterDB::gen_logs_filter(move _14, move _22, move _23) -> [return: bb13, unwind: bb23]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:9: 84:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:84:38: 84:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize, jsonrpc_types::rpc_types::Filter) {FilterDB::gen_logs_filter}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_17) -> [return: bb14, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:65: 84:66
    }

    bb14: {
        _32 = &_3;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
        _31 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _32) -> [return: bb15, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _30 = _31;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
        _29 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _30) -> [return: bb16, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 86:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:86:14: 86:22
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb16: {
        _28 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _29) -> [return: bb17, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 87:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:87:14: 87:20
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = &mut _28;                  // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
        _26 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _27) -> [return: bb18, unwind: bb22]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb18: {
        _25 = _26;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
        _33 = _0;                        // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:88:31: 88:33
        _34 = _12;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:88:35: 88:47
        _24 = FilterDB::gen_block_filter(move _25, move _33, move _34) -> [return: bb19, unwind: bb22]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:85:9: 88:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:88:14: 88:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize, u64) {FilterDB::gen_block_filter}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_28) -> [return: bb20, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:88:48: 88:49
    }

    bb20: {
        _37 = const false;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:89:14: 89:22
        _36 = move _3;                   // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:89:14: 89:22
        _35 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _36) -> [return: bb21, unwind: bb27]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:89:9: 89:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:89:9: 89:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb21: {
        _37 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:6: 91:6
    }

    bb22 (cleanup): {
        drop(_28) -> bb27;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:88:48: 88:49
    }

    bb23 (cleanup): {
        drop(_17) -> bb27;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:84:65: 84:66
    }

    bb24 (cleanup): {
        drop(_7) -> bb27;                // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:82:55: 82:56
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:80:5: 91:6
    }

    bb26 (cleanup): {
        drop(_3) -> bb29;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    }

    bb27 (cleanup): {
        switchInt(_37) -> [0: bb29, otherwise: bb26]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    }

    bb28 (cleanup): {
        drop(_2) -> bb25;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    }

    bb29 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb28]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:91:5: 91:6
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::new_block_filter(_1: &chain::Chain) -> usize {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:93:25: 93:30
    let _2: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:94:13: 94:21
    let mut _4: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
    let mut _5: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
    let mut _6: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
    let mut _7: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:46
    let mut _8: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
    let mut _9: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
    let _10: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
    let mut _11: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
    let _12: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
    let mut _13: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
    let mut _14: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
    let mut _15: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
    let mut _16: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 99:22
    let mut _17: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
    let mut _18: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
    let _19: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
    let mut _20: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
    let mut _21: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:100:31: 100:33
    let mut _22: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:100:35: 100:47
    let _23: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:101:9: 101:23
    let mut _24: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:101:14: 101:22
    let mut _25: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:103:5: 103:6
    scope 1 {
        debug filterdb => _2;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:94:13: 94:21
        let _3: u64;                     // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:95:13: 95:25
        scope 2 {
            debug block_number => _3;    // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:95:13: 95:25
            let mut _0: usize;           // return place in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:13: 96:15
            scope 3 {
                debug id => _0;          // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:96:13: 96:15
            }
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:94:13: 94:21
        _25 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:94:24: 94:40
        _2 = chain::Chain::filter_db(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:94:24: 94:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:94:29: 94:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = chain::Chain::get_current_height(_1) -> [return: bb2, unwind: bb20]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:95:28: 95:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:95:33: 95:51
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_2;                       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
        _10 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb20]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
        _8 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _9) -> [return: bb4, unwind: bb20]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:96:27: 96:35
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _8) -> [return: bb5, unwind: bb20]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:96:38: 96:44
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = &mut _7;                    // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
        _5 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _6) -> [return: bb6, unwind: bb17]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = _5;                         // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
        _0 = FilterDB::gen_id(move _4) -> [return: bb7, unwind: bb17]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:18: 96:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:96:47: 96:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB) -> usize {FilterDB::gen_id}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb20]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:55: 96:56
    }

    bb8: {
        _20 = &_2;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
        _19 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _20) -> [return: bb9, unwind: bb20]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = _19;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
        _17 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _18) -> [return: bb10, unwind: bb20]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 98:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:98:14: 98:22
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _17) -> [return: bb11, unwind: bb20]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 99:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:99:14: 99:20
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = &mut _16;                  // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
        _14 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _15) -> [return: bb12, unwind: bb16]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _13 = _14;                       // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
        _21 = _0;                        // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:100:31: 100:33
        _22 = _3;                        // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:100:35: 100:47
        _12 = FilterDB::gen_block_filter(move _13, move _21, move _22) -> [return: bb13, unwind: bb16]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:97:9: 100:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:100:14: 100:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize, u64) {FilterDB::gen_block_filter}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_16) -> [return: bb14, unwind: bb20]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:100:48: 100:49
    }

    bb14: {
        _25 = const false;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:101:14: 101:22
        _24 = move _2;                   // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:101:14: 101:22
        _23 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _24) -> [return: bb15, unwind: bb20]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:101:9: 101:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:101:9: 101:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:103:5: 103:6
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:103:6: 103:6
    }

    bb16 (cleanup): {
        drop(_16) -> bb20;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:100:48: 100:49
    }

    bb17 (cleanup): {
        drop(_7) -> bb20;                // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:96:55: 96:56
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:93:5: 103:6
    }

    bb19 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:103:5: 103:6
    }

    bb20 (cleanup): {
        switchInt(_25) -> [0: bb18, otherwise: bb19]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:103:5: 103:6
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes(_1: &chain::Chain, _2: usize) -> std::option::Option<FilterChanges> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:105:27: 105:32
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:105:34: 105:36
    let mut _0: std::option::Option<jsonrpc_types::rpc_types::FilterChanges>; // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:105:48: 105:69
    let _3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:106:13: 106:21
    let mut _5: jsonrpc_types::rpc_types::FilterChanges; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:107:32: 107:52
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:12: 111:55
    let mut _9: bool;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
    let mut _10: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
    let _11: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
    let mut _12: &lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
    let _13: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:41
    let mut _14: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
    let mut _15: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
    let _16: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
    let mut _17: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
    let _18: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:112:13: 112:27
    let mut _19: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:112:18: 112:26
    let mut _20: std::option::Option<&jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
    let mut _21: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
    let mut _22: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
    let mut _23: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
    let mut _24: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:59
    let mut _25: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
    let mut _26: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
    let _27: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
    let mut _28: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
    let mut _29: isize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:117:16: 117:28
    let mut _32: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _33: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _34: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _35: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _36: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _37: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _38: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _39: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _40: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _41: &[&str];                // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
    let mut _42: std::option::Option<jsonrpc_types::rpc_types::FilterChanges>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:119:23: 121:15
    let mut _43: jsonrpc_types::rpc_types::FilterChanges; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:119:28: 121:14
    let mut _44: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:120:17: 120:72
    let mut _45: jsonrpc_types::rpc_types::Filter; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:120:43: 120:57
    let mut _46: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:120:59: 120:71
    let mut _47: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
    let mut _48: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
    let _49: &filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
    let mut _50: &lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
    let _51: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:40
    let mut _52: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
    let mut _53: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
    let _54: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
    let mut _55: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
    let mut _57: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _58: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _59: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _60: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _61: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _62: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _63: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _64: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _65: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _66: &[&str];                // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
    let mut _68: std::iter::FilterMap<std::ops::RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:26: 129:66
    let mut _69: std::ops::RangeInclusive<u64>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:26: 128:63
    let mut _70: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:45
    let mut _71: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:28: 128:40
    let mut _72: (u64, bool);            // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:45
    let mut _73: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:128:48: 128:62
    let mut _74: [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65
    let mut _75: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65
    let mut _77: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _78: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _79: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _80: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _81: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _82: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _83: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _84: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _85: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _86: &[&str];                // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
    let mut _87: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _88: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _89: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _90: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:50: 131:56
    let _91: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:50: 131:56
    let mut _92: std::option::Option<jsonrpc_types::rpc_types::FilterChanges>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:132:23: 134:15
    let mut _93: jsonrpc_types::rpc_types::FilterChanges; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:132:28: 134:14
    let mut _94: std::vec::Vec<jsonrpc_types::rpc_types::Data32>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:61
    let mut _95: std::iter::Map<std::vec::IntoIter<cita_types::H256>, fn(cita_types::H256) -> jsonrpc_types::rpc_types::Data32 {<cita_types::H256 as std::convert::Into<jsonrpc_types::rpc_types::Data32>>::into}>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:51
    let mut _96: std::vec::IntoIter<cita_types::H256>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:35
    let mut _97: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:23
    let _98: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
    let mut _99: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
    let mut _100: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
    let mut _101: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
    let mut _102: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 140:22
    let mut _103: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
    let mut _104: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
    let _105: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
    let mut _106: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
    let mut _107: u64;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:141:35: 141:49
    let _108: ();                        // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:142:9: 142:23
    let mut _109: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:142:14: 142:22
    let mut _119: bool;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:135:9: 135:10
    let mut _120: bool;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
    scope 1 {
        debug filterdb => _3;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:106:13: 106:21
        let mut _4: std::option::Option<jsonrpc_types::rpc_types::FilterChanges>; // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:107:13: 107:24
        scope 2 {
            debug changes => _4;         // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:107:13: 107:24
            let _6: u64;                 // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:108:13: 108:27
            scope 3 {
                debug current_number => _6; // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:108:13: 108:27
                let _7: u64;             // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:109:13: 109:25
                scope 4 {
                    debug block_filter => _7; // in scope 4 at cita-chain/core/src/filters/rpc_filter.rs:109:13: 109:25
                    let _56: log::Level; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _67: std::vec::Vec<cita_types::H256>; // in scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:17: 128:23
                    scope 5 {
                        debug filter => _30; // in scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:21: 117:27
                        let _30: &jsonrpc_types::rpc_types::Filter; // in scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:21: 117:27
                        let _31: log::Level; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 6 {
                            debug lvl => _31; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _116: &(&str, &str, &str, u32); // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _117: &[&str; 1]; // in scope 6 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
                            let mut _118: &log::LevelFilter; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                    scope 7 {
                        debug lvl => _56; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _113: &(&str, &str, &str, u32); // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _114: &[&str; 1]; // in scope 7 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
                        let mut _115: &log::LevelFilter; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 8 {
                        debug hashes => _67; // in scope 8 at cita-chain/core/src/filters/rpc_filter.rs:128:17: 128:23
                        let _76: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 9 {
                            debug lvl => _76; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _110: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _111: &[&str; 1]; // in scope 9 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
                            let mut _112: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _119 = const false;              // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:106:13: 106:21
        _120 = const false;              // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:106:13: 106:21
        _120 = const true;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:106:24: 106:40
        _3 = chain::Chain::filter_db(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:106:24: 106:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:106:29: 106:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = jsonrpc_types::rpc_types::FilterChanges::Empty; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:107:32: 107:52
        _4 = std::option::Option::<FilterChanges>::Some(move _5); // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:107:27: 107:53
        _6 = chain::Chain::get_current_height(_1) -> [return: bb2, unwind: bb82]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:108:30: 108:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:108:35: 108:53
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = <chain::Chain as FilterHelper>::get_block_filter(_1, _2) -> [return: bb3, unwind: bb82]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:109:28: 109:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:109:33: 109:49
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, usize) -> u64 {<chain::Chain as FilterHelper>::get_block_filter}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &_3;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
        _16 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _17) -> [return: bb4, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = _16;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
        _14 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _15) -> [return: bb5, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:111:22: 111:30
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _14) -> [return: bb6, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:111:33: 111:39
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_13;                      // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
        _11 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::deref(move _12) -> [return: bb7, unwind: bb81]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = _11;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
        _9 = FilterDB::is_filter(move _10, _2) -> [return: bb8, unwind: bb81]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:13: 111:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:111:42: 111:51
                                         // + literal: Const { ty: for<'a> fn(&'a FilterDB, usize) -> bool {FilterDB::is_filter}, val: Value(<ZST>) }
    }

    bb8: {
        _8 = Not(move _9);               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:12: 111:55
        drop(_13) -> [return: bb9, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:54: 111:55
    }

    bb9: {
        switchInt(move _8) -> [0: bb12, otherwise: bb10]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:12: 111:55
    }

    bb10: {
        _120 = const false;              // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:112:18: 112:26
        _19 = move _3;                   // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:112:18: 112:26
        _18 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _19) -> [return: bb11, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:112:13: 112:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:112:13: 112:17
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = move _4;                    // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:113:20: 113:27
        _120 = const false;              // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
        goto -> bb77;                    // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:6: 144:6
    }

    bb12: {
        _28 = &_3;                       // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
        _27 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _28) -> [return: bb13, unwind: bb82]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _26 = _27;                       // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
        _25 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _26) -> [return: bb14, unwind: bb82]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:117:40: 117:48
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _25) -> [return: bb15, unwind: bb82]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:117:51: 117:57
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = &mut _24;                  // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
        _22 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _23) -> [return: bb16, unwind: bb80]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb16: {
        _21 = _22;                       // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
        _20 = FilterDB::get_logs_filter(move _21, _2) -> [return: bb17, unwind: bb80]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:31: 117:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:117:60: 117:75
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize) -> std::option::Option<&'a jsonrpc_types::rpc_types::Filter> {FilterDB::get_logs_filter}, val: Value(<ZST>) }
    }

    bb17: {
        _29 = discriminant(_20);         // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:16: 117:28
        switchInt(move _29) -> [1: bb18, otherwise: bb32]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:16: 117:28
    }

    bb18: {
        _30 = ((_20 as Some).0: &jsonrpc_types::rpc_types::Filter); // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:117:21: 117:27
        _31 = log::Level::Trace;         // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _34 = &_31;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _118 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[8])) }
        _33 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _34, _118) -> [return: bb22, unwind: bb80]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = const false;               // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _36 = &_31;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _38 = log::max_level() -> [return: bb23, unwind: bb80]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _32) -> [0: bb27, otherwise: bb25]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb22: {
        switchInt(move _33) -> [0: bb19, otherwise: bb20]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _37 = &_38;                      // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _35 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _36, move _37) -> [return: bb24, unwind: bb80]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb24: {
        _32 = move _35;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        _117 = const _;                  // scope 6 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[7])) }
        _41 = _117 as &[&str] (Pointer(Unsize)); // scope 6 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
        _40 = Arguments::<'_>::new_const(move _41) -> [return: bb26, unwind: bb80]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb26: {
        _116 = const _;                  // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[6])) }
        _39 = log::__private_api_log(move _40, _31, _116) -> [return: bb88, unwind: bb80]; // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb27: {
        _45 = <jsonrpc_types::rpc_types::Filter as Clone>::clone(_30) -> [return: bb28, unwind: bb80]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:120:43: 120:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:120:50: 120:55
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_types::Filter) -> jsonrpc_types::rpc_types::Filter {<jsonrpc_types::rpc_types::Filter as Clone>::clone}, val: Value(<ZST>) }
    }

    bb28: {
        _46 = _7;                        // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:120:59: 120:71
        _44 = <chain::Chain as FilterHelper>::get_logs_with_filter(_1, move _45, move _46) -> [return: bb29, unwind: bb80]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:120:17: 120:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:120:22: 120:42
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, jsonrpc_types::rpc_types::Filter, u64) -> Vec<jsonrpc_types::rpc_types::Log> {<chain::Chain as FilterHelper>::get_logs_with_filter}, val: Value(<ZST>) }
    }

    bb29: {
        _43 = Logs(move _44);            // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:28: 121:14
        _42 = std::option::Option::<FilterChanges>::Some(move _43); // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:23: 121:15
        drop(_4) -> [return: bb30, unwind: bb31]; // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:13: 119:20
    }

    bb30: {
        _4 = move _42;                   // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:13: 119:20
        goto -> bb32;                    // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:117:9: 122:10
    }

    bb31 (cleanup): {
        _4 = move _42;                   // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:13: 119:20
        goto -> bb80;                    // scope 5 at cita-chain/core/src/filters/rpc_filter.rs:119:13: 119:20
    }

    bb32: {
        drop(_24) -> [return: bb33, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:122:10: 122:11
    }

    bb33: {
        _55 = &_3;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
        _54 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _55) -> [return: bb34, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb34: {
        _53 = _54;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
        _52 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _53) -> [return: bb35, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:125:21: 125:29
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb35: {
        _51 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _52) -> [return: bb36, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:125:32: 125:38
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb36: {
        _50 = &_51;                      // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
        _49 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::deref(move _50) -> [return: bb37, unwind: bb79]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _48 = _49;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
        _47 = FilterDB::is_block_filter(move _48, _2) -> [return: bb38, unwind: bb79]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:125:41: 125:56
                                         // + literal: Const { ty: for<'a> fn(&'a FilterDB, usize) -> bool {FilterDB::is_block_filter}, val: Value(<ZST>) }
    }

    bb38: {
        drop(_51) -> [return: bb39, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:59: 125:60
    }

    bb39: {
        switchInt(move _47) -> [0: bb69, otherwise: bb40]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:12: 125:60
    }

    bb40: {
        _56 = log::Level::Trace;         // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _59 = &_56;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _115 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[5])) }
        _58 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _59, _115) -> [return: bb44, unwind: bb82]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb41: {
        _57 = const false;               // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb43;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb42: {
        _61 = &_56;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _63 = log::max_level() -> [return: bb45, unwind: bb82]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb43: {
        switchInt(move _57) -> [0: bb49, otherwise: bb47]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb44: {
        switchInt(move _58) -> [0: bb41, otherwise: bb42]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        _62 = &_63;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _60 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _61, move _62) -> [return: bb46, unwind: bb82]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb46: {
        _57 = move _60;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb43;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb47: {
        _114 = const _;                  // scope 7 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[4])) }
        _66 = _114 as &[&str] (Pointer(Unsize)); // scope 7 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
        _65 = Arguments::<'_>::new_const(move _66) -> [return: bb48, unwind: bb82]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb48: {
        _113 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[3])) }
        _64 = log::__private_api_log(move _65, _56, _113) -> [return: bb89, unwind: bb82]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb49: {
        _71 = _7;                        // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:28: 128:40
        _72 = CheckedAdd(_71, const 1_u64); // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:45
        assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", move _71, const 1_u64) -> [success: bb50, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:45
    }

    bb50: {
        _70 = move (_72.0: u64);         // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:45
        _73 = _6;                        // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:48: 128:62
        _69 = RangeInclusive::<u64>::new(move _70, move _73) -> [return: bb51, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:26: 128:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:128:27: 128:62
                                         // + literal: Const { ty: fn(u64, u64) -> RangeInclusive<u64> {RangeInclusive::<u64>::new}, val: Value(<ZST>) }
    }

    bb51: {
        _75 = &_1;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65
        _74 = [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34] { self: move _75 }; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65
                                         // closure
                                         // + def_id: DefId(0:65 ~ core[3f1a]::filters::rpc_filter::{impl#1}::get_filter_changes::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> std::option::Option<cita_types::H256>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _68 = <RangeInclusive<u64> as Iterator>::filter_map::<H256, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]>(move _69, move _74) -> [return: bb52, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:26: 129:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:129:18: 129:28
                                         // + literal: Const { ty: fn(RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]) -> FilterMap<RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]> {<RangeInclusive<u64> as Iterator>::filter_map::<H256, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]>}, val: Value(<ZST>) }
    }

    bb52: {
        _67 = <FilterMap<RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]> as Iterator>::collect::<Vec<H256>>(move _68) -> [return: bb53, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:128:26: 130:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:130:18: 130:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(FilterMap<RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]>) -> Vec<H256> {<FilterMap<RangeInclusive<u64>, [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34]> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb53: {
        _119 = const true;               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:130:39: 130:40
        _76 = log::Level::Trace;         // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _79 = &_76;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _112 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[2])) }
        _78 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _79, _112) -> [return: bb57, unwind: bb85]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb54: {
        _77 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb56;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb55: {
        _81 = &_76;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _83 = log::max_level() -> [return: bb58, unwind: bb85]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb56: {
        switchInt(move _77) -> [0: bb63, otherwise: bb60]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        switchInt(move _78) -> [0: bb54, otherwise: bb55]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb58: {
        _82 = &_83;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _80 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _81, move _82) -> [return: bb59, unwind: bb85]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb59: {
        _77 = move _80;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb56;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb60: {
        _111 = const _;                  // scope 9 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[1])) }
        _86 = _111 as &[&str] (Pointer(Unsize)); // scope 9 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
        _91 = &_67;                      // scope 9 at cita-chain/core/src/filters/rpc_filter.rs:131:50: 131:56
        _90 = core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H256>>(_91) -> [return: bb61, unwind: bb85]; // scope 9 at cita-chain/core/src/filters/rpc_filter.rs:131:50: 131:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:131:50: 131:56
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b Vec<H256>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb61: {
        _89 = [move _90];                // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _88 = &_89;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _87 = _88 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _85 = Arguments::<'_>::new_v1(move _86, move _87) -> [return: bb62, unwind: bb85]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb62: {
        _110 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<chain::Chain as RpcFilter>::get_filter_changes, [], Some(promoted[0])) }
        _84 = log::__private_api_log(move _85, _76, _110) -> [return: bb90, unwind: bb85]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb63: {
        _119 = const false;              // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:23
        _97 = move _67;                  // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:23
        _96 = <Vec<H256> as IntoIterator>::into_iter(move _97) -> [return: bb64, unwind: bb85]; // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:133:24: 133:33
                                         // + literal: Const { ty: fn(Vec<H256>) -> <Vec<H256> as IntoIterator>::IntoIter {<Vec<H256> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb64: {
        _95 = <std::vec::IntoIter<H256> as Iterator>::map::<Data32, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}>(move _96, <H256 as Into<Data32>>::into) -> [return: bb65, unwind: bb85]; // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:133:36: 133:39
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H256>, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}) -> std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}> {<std::vec::IntoIter<H256> as Iterator>::map::<Data32, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:133:40: 133:50
                                         // + literal: Const { ty: fn(H256) -> Data32 {<H256 as Into<Data32>>::into}, val: Value(<ZST>) }
    }

    bb65: {
        _94 = <std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}> as Iterator>::collect::<Vec<Data32>>(move _95) -> [return: bb66, unwind: bb85]; // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:133:17: 133:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:133:52: 133:59
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}>) -> Vec<Data32> {<std::iter::Map<std::vec::IntoIter<H256>, fn(H256) -> Data32 {<H256 as Into<Data32>>::into}> as Iterator>::collect::<Vec<Data32>>}, val: Value(<ZST>) }
    }

    bb66: {
        _93 = Hashes(move _94);          // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:28: 134:14
        _92 = std::option::Option::<FilterChanges>::Some(move _93); // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:23: 134:15
        drop(_4) -> [return: bb67, unwind: bb68]; // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:13: 132:20
    }

    bb67: {
        _4 = move _92;                   // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:13: 132:20
        _119 = const false;              // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:135:9: 135:10
        goto -> bb69;                    // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:9: 135:10
    }

    bb68 (cleanup): {
        _4 = move _92;                   // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:13: 132:20
        goto -> bb85;                    // scope 8 at cita-chain/core/src/filters/rpc_filter.rs:132:13: 132:20
    }

    bb69: {
        _106 = &_3;                      // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
        _105 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _106) -> [return: bb70, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb70: {
        _104 = _105;                     // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
        _103 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _104) -> [return: bb71, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 139:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:139:14: 139:22
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb71: {
        _102 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _103) -> [return: bb72, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 140:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:140:14: 140:20
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb72: {
        _101 = &mut _102;                // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
        _100 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _101) -> [return: bb73, unwind: bb78]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb73: {
        _99 = _100;                      // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
        _107 = _6;                       // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:141:35: 141:49
        _98 = FilterDB::gen_block_filter(move _99, _2, move _107) -> [return: bb74, unwind: bb78]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:138:9: 141:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:141:14: 141:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize, u64) {FilterDB::gen_block_filter}, val: Value(<ZST>) }
    }

    bb74: {
        drop(_102) -> [return: bb75, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:141:50: 141:51
    }

    bb75: {
        _120 = const false;              // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:142:14: 142:22
        _109 = move _3;                  // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:142:14: 142:22
        _108 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _109) -> [return: bb76, unwind: bb82]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:142:9: 142:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:142:9: 142:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb76: {
        _0 = move _4;                    // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:143:9: 143:16
        _120 = const false;              // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
        goto -> bb77;                    // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:6: 144:6
    }

    bb77: {
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:6: 144:6
    }

    bb78 (cleanup): {
        drop(_102) -> bb82;              // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:141:50: 141:51
    }

    bb79 (cleanup): {
        drop(_51) -> bb82;               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:125:59: 125:60
    }

    bb80 (cleanup): {
        drop(_24) -> bb82;               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:122:10: 122:11
    }

    bb81 (cleanup): {
        drop(_13) -> bb82;               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:111:54: 111:55
    }

    bb82 (cleanup): {
        drop(_4) -> bb87;                // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
    }

    bb83 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:105:5: 144:6
    }

    bb84 (cleanup): {
        drop(_67) -> bb82;               // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:135:9: 135:10
    }

    bb85 (cleanup): {
        switchInt(_119) -> [0: bb82, otherwise: bb84]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:135:9: 135:10
    }

    bb86 (cleanup): {
        drop(_3) -> bb83;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
    }

    bb87 (cleanup): {
        switchInt(_120) -> [0: bb83, otherwise: bb86]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:144:5: 144:6
    }

    bb88: {
        goto -> bb27;                    // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb89: {
        goto -> bb49;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb90: {
        goto -> bb63;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:13: 131:57
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:13: 131:57

    bb0: {
        _3 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/rpc_filter.rs"; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:13: 131:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:131:13: 131:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:13: 131:57
        _1 = (move _2, move _4, move _6, const 131_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48

    bb0: {
        _1 = [const "Block filter changes: "]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:131:20: 131:48
    }
}

promoted[2] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:13: 126:49
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:13: 126:49

    bb0: {
        _3 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/rpc_filter.rs"; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:13: 126:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:126:13: 126:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:13: 126:49
        _1 = (move _2, move _4, move _6, const 126_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48

    bb0: {
        _1 = [const "Into filter changes: block"]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:126:20: 126:48
    }
}

promoted[5] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:13: 118:48
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:13: 118:48

    bb0: {
        _3 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::filters::rpc_filter"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/filters/rpc_filter.rs"; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:13: 118:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:118:13: 118:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:13: 118:48
        _1 = (move _2, move _4, move _6, const 118_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47

    bb0: {
        _1 = [const "Into filter changes: logs"]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:118:20: 118:47
    }
}

promoted[8] in rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_changes::{closure#0}(_1: &mut [closure@cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:34], _2: u64) -> std::option::Option<H256> {
    debug _id => _2;                     // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:30: 129:33
    debug self => (*((*_1).0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:105:28: 105:32
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:35: 129:35
    let mut _3: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65
    let mut _4: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:29: 129:65

    bb0: {
        _3 = deref_copy ((*_1).0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:35: 129:65
        _4 = deref_copy (*_3);           // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:35: 129:65
        _0 = chain::Chain::block_hash_by_height(_4, _2) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:35: 129:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:129:40: 129:60
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<H256> {chain::Chain::block_hash_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:129:65: 129:65
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::get_filter_logs(_1: &chain::Chain, _2: usize) -> std::option::Option<Vec<jsonrpc_types::rpc_types::Log>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:146:24: 146:29
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:146:31: 146:33
    let _3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:147:13: 147:21
    let mut _5: std::option::Option<&jsonrpc_types::rpc_types::Filter>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
    let mut _6: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
    let mut _7: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
    let mut _8: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
    let mut _9: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:54
    let mut _10: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
    let mut _11: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
    let _12: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
    let mut _13: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
    let mut _14: isize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:150:13: 150:25
    let mut _16: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:150:34: 150:89
    let mut _17: jsonrpc_types::rpc_types::Filter; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:150:60: 150:74
    let mut _18: u64;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:150:76: 150:88
    let _19: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:153:9: 153:23
    let mut _20: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:153:14: 153:22
    let mut _21: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:155:5: 155:6
    scope 1 {
        debug filterdb => _3;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:147:13: 147:21
        let _4: u64;                     // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:148:13: 148:25
        scope 2 {
            debug block_filter => _4;    // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:148:13: 148:25
            let mut _0: std::option::Option<std::vec::Vec<jsonrpc_types::rpc_types::Log>>; // return place in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:13: 149:17
            let _15: &jsonrpc_types::rpc_types::Filter; // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:150:18: 150:24
            scope 3 {
                debug logs => _0;        // in scope 3 at cita-chain/core/src/filters/rpc_filter.rs:149:13: 149:17
            }
            scope 4 {
                debug filter => _15;     // in scope 4 at cita-chain/core/src/filters/rpc_filter.rs:150:18: 150:24
            }
        }
    }

    bb0: {
        _21 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:147:13: 147:21
        _21 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:147:24: 147:40
        _3 = chain::Chain::filter_db(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:147:24: 147:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:147:29: 147:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <chain::Chain as FilterHelper>::get_block_filter(_1, _2) -> [return: bb2, unwind: bb19]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:148:28: 148:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:148:33: 148:49
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, usize) -> u64 {<chain::Chain as FilterHelper>::get_block_filter}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &_3;                       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
        _12 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _13) -> [return: bb3, unwind: bb19]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
        _10 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _11) -> [return: bb4, unwind: bb19]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:149:35: 149:43
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _10) -> [return: bb5, unwind: bb19]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:149:46: 149:52
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = &mut _9;                    // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
        _7 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _8) -> [return: bb6, unwind: bb16]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = _7;                         // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
        _5 = FilterDB::get_logs_filter(move _6, _2) -> [return: bb7, unwind: bb16]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:149:55: 149:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize) -> std::option::Option<&'a jsonrpc_types::rpc_types::Filter> {FilterDB::get_logs_filter}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_5);          // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:26: 149:74
        switchInt(move _14) -> [1: bb9, otherwise: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:149:20: 149:74
    }

    bb8: {
        _0 = std::option::Option::<Vec<jsonrpc_types::rpc_types::Log>>::None; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:151:18: 151:22
        goto -> bb12;                    // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:151:18: 151:22
    }

    bb9: {
        _15 = ((_5 as Some).0: &jsonrpc_types::rpc_types::Filter); // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:150:18: 150:24
        _17 = <jsonrpc_types::rpc_types::Filter as Clone>::clone(_15) -> [return: bb10, unwind: bb16]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:150:60: 150:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:150:67: 150:72
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_types::Filter) -> jsonrpc_types::rpc_types::Filter {<jsonrpc_types::rpc_types::Filter as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = _4;                        // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:150:76: 150:88
        _16 = <chain::Chain as FilterHelper>::get_logs_with_filter(_1, move _17, move _18) -> [return: bb11, unwind: bb16]; // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:150:34: 150:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:150:39: 150:59
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, jsonrpc_types::rpc_types::Filter, u64) -> Vec<jsonrpc_types::rpc_types::Log> {<chain::Chain as FilterHelper>::get_logs_with_filter}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = std::option::Option::<Vec<jsonrpc_types::rpc_types::Log>>::Some(move _16); // scope 4 at cita-chain/core/src/filters/rpc_filter.rs:150:29: 150:90
        goto -> bb12;                    // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:150:89: 150:90
    }

    bb12: {
        drop(_9) -> [return: bb13, unwind: bb15]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:152:10: 152:11
    }

    bb13: {
        _21 = const false;               // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:153:14: 153:22
        _20 = move _3;                   // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:153:14: 153:22
        _19 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _20) -> [return: bb14, unwind: bb15]; // scope 3 at cita-chain/core/src/filters/rpc_filter.rs:153:9: 153:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:153:9: 153:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb14: {
        _21 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:155:5: 155:6
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:155:6: 155:6
    }

    bb15 (cleanup): {
        drop(_0) -> bb19;                // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:155:5: 155:6
    }

    bb16 (cleanup): {
        drop(_9) -> bb19;                // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:152:10: 152:11
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:146:5: 155:6
    }

    bb18 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:155:5: 155:6
    }

    bb19 (cleanup): {
        switchInt(_21) -> [0: bb17, otherwise: bb18]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:155:5: 155:6
    }
}

fn rpc_filter::<impl at cita-chain/core/src/filters/rpc_filter.rs:79:1: 79:25>::uninstall_filter(_1: &chain::Chain, _2: usize) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:157:25: 157:30
    debug id => _2;                      // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:157:32: 157:34
    let _3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:158:13: 158:21
    let mut _4: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
    let mut _5: &mut filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
    let mut _6: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
    let mut _7: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:56
    let mut _8: std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
    let mut _9: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
    let _10: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
    let mut _11: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
    let _12: ();                         // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:160:9: 160:23
    let mut _13: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:160:14: 160:22
    let mut _14: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:162:5: 162:6
    scope 1 {
        debug filterdb => _3;            // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:158:13: 158:21
        let mut _0: bool;                // return place in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:13: 159:25
        scope 2 {
            debug uninstall_ok => _0;    // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:159:13: 159:25
        }
    }

    bb0: {
        _14 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:158:13: 158:21
        _14 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:158:24: 158:40
        _3 = chain::Chain::filter_db(_1) -> bb1; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:158:24: 158:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:158:29: 158:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {chain::Chain::filter_db}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_3;                       // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
        _10 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref(move _11) -> [return: bb2, unwind: bb12]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
        _8 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock(move _9) -> [return: bb3, unwind: bb12]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:159:37: 159:45
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> std::option::Option<lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, FilterDB>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::try_lock}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap(move _8) -> [return: bb4, unwind: bb12]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:159:48: 159:54
                                         // + literal: Const { ty: fn(std::option::Option<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>) -> lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> {std::option::Option::<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = &mut _7;                    // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
        _5 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut(move _6) -> [return: bb5, unwind: bb9]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, FilterDB> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = _5;                         // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
        _0 = FilterDB::uninstall(move _4, _2) -> [return: bb6, unwind: bb9]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:28: 159:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:159:57: 159:66
                                         // + literal: Const { ty: for<'a> fn(&'a mut FilterDB, usize) -> bool {FilterDB::uninstall}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb12]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:70: 159:71
    }

    bb7: {
        _14 = const false;               // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:160:14: 160:22
        _13 = move _3;                   // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:160:14: 160:22
        _12 = std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>(move _13) -> [return: bb8, unwind: bb12]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:160:9: 160:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:160:9: 160:13
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) {std::mem::drop::<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>>}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:162:5: 162:6
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:162:6: 162:6
    }

    bb9 (cleanup): {
        drop(_7) -> bb12;                // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:159:70: 159:71
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:157:5: 162:6
    }

    bb11 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:162:5: 162:6
    }

    bb12 (cleanup): {
        switchInt(_14) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:162:5: 162:6
    }
}

fn split_logs(_1: Vec<jsonrpc_types::rpc_types::Log>, _2: std::option::Option<usize>) -> Vec<jsonrpc_types::rpc_types::Log> {
    debug logs => _1;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:166:15: 166:23
    debug limit => _2;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:166:35: 166:40
    let mut _0: std::vec::Vec<jsonrpc_types::rpc_types::Log>; // return place in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:166:60: 166:68
    let _3: usize;                       // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:9: 167:12
    let mut _4: &std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:15: 167:25
    let mut _5: isize;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:9: 169:20
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:24: 169:36
    let mut _9: usize;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:24: 169:27
    let mut _10: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:31: 169:36
    let mut _11: &mut std::vec::Vec<jsonrpc_types::rpc_types::Log>; // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:40: 169:67
    let mut _12: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:66
    let mut _13: usize;                  // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:58
    let mut _14: (usize, bool);          // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:66
    let mut _15: bool;                   // in scope 0 at cita-chain/core/src/filters/rpc_filter.rs:172:1: 172:2
    scope 1 {
        debug len => _3;                 // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:167:9: 167:12
        let _6: usize;                   // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
        let _7: &usize;                  // in scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
        scope 2 {
            debug limit => _6;           // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
            debug limit => _7;           // in scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
        }
    }

    bb0: {
        _15 = const false;               // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:9: 167:12
        _15 = const true;                // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:9: 167:12
        _4 = &_1;                        // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:15: 167:25
        _3 = Vec::<jsonrpc_types::rpc_types::Log>::len(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:167:15: 167:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:167:20: 167:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<jsonrpc_types::rpc_types::Log>) -> usize {Vec::<jsonrpc_types::rpc_types::Log>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_2);           // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:168:11: 168:16
        switchInt(move _5) -> [1: bb3, otherwise: bb2]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:168:5: 168:16
    }

    bb2: {
        _15 = const false;               // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:170:14: 170:18
        _0 = move _1;                    // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:170:14: 170:18
        goto -> bb6;                     // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:170:14: 170:18
    }

    bb3: {
        _7 = &((_2 as Some).0: usize);   // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
        _9 = _3;                         // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:24: 169:27
        _10 = (*_7);                     // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:31: 169:36
        _8 = Ge(move _9, move _10);      // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:24: 169:36
        switchInt(move _8) -> [0: bb2, otherwise: bb4]; // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:24: 169:36
    }

    bb4: {
        _6 = ((_2 as Some).0: usize);    // scope 1 at cita-chain/core/src/filters/rpc_filter.rs:169:14: 169:19
        _11 = &mut _1;                   // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:40: 169:67
        _13 = _3;                        // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:58
        _14 = CheckedSub(_13, _6);       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:66
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, _6) -> [success: bb5, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:66
    }

    bb5: {
        _12 = move (_14.0: usize);       // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:55: 169:66
        _0 = Vec::<jsonrpc_types::rpc_types::Log>::split_off(move _11, move _12) -> [return: bb11, unwind: bb8]; // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:40: 169:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/filters/rpc_filter.rs:169:45: 169:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<jsonrpc_types::rpc_types::Log>, usize) -> Vec<jsonrpc_types::rpc_types::Log> {Vec::<jsonrpc_types::rpc_types::Log>::split_off}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(_15) -> [0: bb7, otherwise: bb10]; // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:172:1: 172:2
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:172:2: 172:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:172:1: 172:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:166:1: 172:2
    }

    bb10: {
        drop(_1) -> bb7;                 // scope 0 at cita-chain/core/src/filters/rpc_filter.rs:172:1: 172:2
    }

    bb11: {
        goto -> bb6;                     // scope 2 at cita-chain/core/src/filters/rpc_filter.rs:169:40: 169:67
    }
}

const VERSION: u32 = {
    let mut _0: u32;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:63:20: 63:23

    bb0: {
        _0 = const 0_u32;                // scope 0 at cita-chain/core/src/libchain/chain.rs:63:26: 63:27
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:63:1: 63:28
    }
}

const LOG_BLOOMS_LEVELS: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:64:26: 64:31

    bb0: {
        _0 = const 3_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:64:34: 64:35
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:64:1: 64:36
    }
}

const LOG_BLOOMS_ELEMENTS_PER_INDEX: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:65:38: 65:43

    bb0: {
        _0 = const 16_usize;             // scope 0 at cita-chain/core/src/libchain/chain.rs:65:46: 65:48
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:65:1: 65:49
    }
}

RelayInfo::dest_hasher::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:72:27: 72:28

    bb0: {
        _0 = const 4_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:72:27: 72:28
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:72:27: 72:28
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:67:10: 67:15>::fmt(_1: &RelayInfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
    let _4: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
    let _6: &cita_types::U256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
    let _7: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
    let _9: &cita_types::U256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
    let _10: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
    let _12: &cita_types::H160;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
    let _13: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
    let _15: &[u8; 4];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
    let _16: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
    let _18: &&u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
    let _19: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31

    bb0: {
        _3 = const "RelayInfo";          // scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:67:10: 67:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "from_chain_id";      // scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:69:5: 69:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: cita_types::U256); // scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
        _7 = const "to_chain_id";        // scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:70:5: 70:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
        _10 = const "dest_contract";     // scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:71:5: 71:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &((*_1).2: cita_types::H160); // scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
        _13 = const "dest_hasher";       // scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:72:5: 72:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = &((*_1).3: [u8; 4]);       // scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
        _16 = const "cross_chain_nonce"; // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:73:5: 73:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = &((*_1).4: u64);           // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
        _18 = &_19;                      // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
        _17 = _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
        _0 = Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:67:10: 67:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:67:10: 67:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h), &'i str, &'j (dyn Debug + 'j), &'k str, &'l (dyn Debug + 'l)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field5_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:67:15: 67:15
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:67:17: 67:22>::clone(_1: &RelayInfo) -> RelayInfo {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:67:17: 67:22
    let mut _0: libchain::chain::RelayInfo; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:67:17: 67:22
    let mut _2: cita_types::U256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
    let _3: &cita_types::U256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
    let mut _4: cita_types::U256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
    let _5: &cita_types::U256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
    let mut _6: cita_types::H160;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
    let _7: &cita_types::H160;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
    let mut _8: [u8; 4];                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
    let _9: &[u8; 4];                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
    let mut _10: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
    let _11: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31

    bb0: {
        _3 = &((*_1).0: cita_types::U256); // scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
        _2 = <U256 as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:69:5: 69:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:69:5: 69:28
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: cita_types::U256); // scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
        _4 = <U256 as Clone>::clone(_5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:70:5: 70:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:70:5: 70:26
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> U256 {<U256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_types::H160); // scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
        _6 = <H160 as Clone>::clone(_7) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:71:5: 71:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:71:5: 71:31
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> H160 {<H160 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: [u8; 4]);        // scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
        _8 = (*_9);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:72:5: 72:29
        _11 = &((*_1).4: u64);           // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
        _10 = (*_11);                    // scope 0 at cita-chain/core/src/libchain/chain.rs:73:5: 73:31
        _0 = RelayInfo { from_chain_id: move _2, to_chain_id: move _4, dest_contract: move _6, dest_hasher: move _8, cross_chain_nonce: move _10 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:67:17: 67:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:67:22: 67:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:76:10: 76:15>::fmt(_1: &TxProof, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let _4: &[&dyn std::fmt::Debug; 6];  // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let _5: [&dyn std::fmt::Debug; 6];   // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
    let _7: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let _9: &types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let _11: &cita_merklehash::Proof;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let _13: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let _15: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
    let _17: &&libproto::Proof;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
    let _18: &libproto::Proof;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
    let _19: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _20: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _21: &[&str; 6];             // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    scope 1 {
        debug names => _21;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        scope 2 {
            debug values => _3;          // in scope 2 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(<TxProof as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: types::transaction::SignedTransaction); // scope 1 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
        _9 = &((*_1).1: types::receipt::Receipt); // scope 1 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
        _11 = &((*_1).2: cita_merklehash::Proof); // scope 1 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
        _13 = &((*_1).3: types::header::Header); // scope 1 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
        _15 = &((*_1).4: types::header::Header); // scope 1 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
        _18 = &((*_1).5: libproto::Proof); // scope 1 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
        _17 = &_18;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        _4 = &_5;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        _19 = const "TxProof";           // scope 2 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> bb1; // scope 2 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:76:15: 76:15
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:76:10: 76:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _1: [&str; 6];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    let mut _2: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let mut _3: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let mut _4: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let mut _5: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let mut _8: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let mut _9: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let mut _10: &str;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
    let mut _11: &str;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31

    bb0: {
        _3 = const "receipt";            // scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:79:5: 79:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
        _5 = const "receipt_proof";      // scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:80:5: 80:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
        _7 = const "block_header";       // scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:81:5: 81:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
        _9 = const "next_proposal_header"; // scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:82:5: 82:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
        _11 = const "proposal_proof";    // scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:83:5: 83:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
        _1 = [const "tx", move _2, move _4, move _6, move _8, move _10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:78:5: 78:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:76:10: 76:15
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:76:17: 76:22>::clone(_1: &TxProof) -> TxProof {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:76:17: 76:22
    let mut _0: libchain::chain::TxProof; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:76:17: 76:22
    let mut _2: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
    let _3: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
    let mut _4: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let _5: &types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
    let mut _6: cita_merklehash::Proof;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let _7: &cita_merklehash::Proof;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
    let mut _8: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let _9: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
    let mut _10: types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let _11: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
    let mut _12: libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
    let _13: &libproto::Proof;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31

    bb0: {
        _3 = &((*_1).0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
        _2 = <types::transaction::SignedTransaction as Clone>::clone(_3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:78:5: 78:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:78:5: 78:26
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> types::transaction::SignedTransaction {<types::transaction::SignedTransaction as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
        _4 = <types::receipt::Receipt as Clone>::clone(_5) -> [return: bb2, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:79:5: 79:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:79:5: 79:21
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> types::receipt::Receipt {<types::receipt::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
        _6 = <cita_merklehash::Proof as Clone>::clone(_7) -> [return: bb3, unwind: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:80:5: 80:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:80:5: 80:42
                                         // + literal: Const { ty: for<'a> fn(&'a cita_merklehash::Proof) -> cita_merklehash::Proof {<cita_merklehash::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
        _8 = <Header as Clone>::clone(_9) -> [return: bb4, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:81:5: 81:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:81:5: 81:25
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).4: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
        _10 = <Header as Clone>::clone(_11) -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:82:5: 82:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:82:5: 82:33
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
        _12 = <libproto::Proof as Clone>::clone(_13) -> [return: bb6, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:83:5: 83:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:83:5: 83:31
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = TxProof { tx: move _2, receipt: move _4, receipt_proof: move _6, block_header: move _8, next_proposal_header: move _10, proposal_proof: move _12 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:76:17: 76:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:76:22: 76:22
    }

    bb7 (cleanup): {
        drop(_10) -> bb8;                // scope 0 at cita-chain/core/src/libchain/chain.rs:76:21: 76:22
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:76:21: 76:22
    }

    bb9 (cleanup): {
        drop(_6) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:76:21: 76:22
    }

    bb10 (cleanup): {
        drop(_4) -> bb11;                // scope 0 at cita-chain/core/src/libchain/chain.rs:76:21: 76:22
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:76:21: 76:22
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:76:17: 76:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:86:1: 86:27>::rlp_append(_1: &TxProof, _2: &mut RlpStream) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:87:19: 87:24
    debug s => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:87:26: 87:27
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:87:45: 87:45
    let _3: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:88:9: 88:24
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:89:9: 89:27
    let _5: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:89:18: 89:26
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:90:9: 90:32
    let _7: &types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:90:18: 90:31
    let _8: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:91:9: 91:38
    let _9: &cita_merklehash::Proof;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:91:18: 91:37
    let _10: &mut rlp::RlpStream;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:92:9: 92:37
    let _11: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:92:18: 92:36
    let _12: &mut rlp::RlpStream;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:93:9: 93:45
    let _13: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:93:18: 93:44
    let _14: &mut rlp::RlpStream;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:94:9: 94:39
    let _15: &libproto::Proof;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:94:18: 94:38

    bb0: {
        _3 = RlpStream::begin_list(_2, const 6_usize) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:88:9: 88:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:88:11: 88:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RlpStream, usize) -> &'a mut RlpStream {RlpStream::begin_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:89:18: 89:26
        _4 = RlpStream::append::<types::transaction::SignedTransaction>(_2, _5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:89:9: 89:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:89:11: 89:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b types::transaction::SignedTransaction) -> &'a mut RlpStream {RlpStream::append::<types::transaction::SignedTransaction>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:90:18: 90:31
        _6 = RlpStream::append::<types::receipt::Receipt>(_2, _7) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:90:9: 90:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:90:11: 90:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b types::receipt::Receipt) -> &'a mut RlpStream {RlpStream::append::<types::receipt::Receipt>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:91:18: 91:37
        _8 = RlpStream::append::<cita_merklehash::Proof>(_2, _9) -> bb4; // scope 0 at cita-chain/core/src/libchain/chain.rs:91:9: 91:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:91:11: 91:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b cita_merklehash::Proof) -> &'a mut RlpStream {RlpStream::append::<cita_merklehash::Proof>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &((*_1).3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:92:18: 92:36
        _10 = RlpStream::append::<Header>(_2, _11) -> bb5; // scope 0 at cita-chain/core/src/libchain/chain.rs:92:9: 92:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:92:11: 92:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b Header) -> &'a mut RlpStream {RlpStream::append::<Header>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &((*_1).4: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:93:18: 93:44
        _12 = RlpStream::append::<Header>(_2, _13) -> bb6; // scope 0 at cita-chain/core/src/libchain/chain.rs:93:9: 93:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:93:11: 93:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b Header) -> &'a mut RlpStream {RlpStream::append::<Header>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).5: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:94:18: 94:38
        _14 = RlpStream::append::<libproto::Proof>(_2, _15) -> bb7; // scope 0 at cita-chain/core/src/libchain/chain.rs:94:9: 94:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:94:11: 94:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b libproto::Proof) -> &'a mut RlpStream {RlpStream::append::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:95:6: 95:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:98:1: 98:27>::decode(_1: &UntrustedRlp<'_>) -> Result<TxProof, DecoderError> {
    debug r => _1;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:99:15: 99:16
    let mut _0: std::result::Result<libchain::chain::TxProof, rlp::DecoderError>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:99:36: 99:62
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, usize>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
    let mut _3: std::result::Result<usize, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:26
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:100:26: 100:27
    let _5: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:100:26: 100:27
    let _6: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
    let mut _7: rlp::DecoderError;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:101:24: 101:57
    let _8: libchain::chain::TxProof;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:103:13: 103:21
    let mut _9: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, types::transaction::SignedTransaction>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
    let mut _11: std::result::Result<types::transaction::SignedTransaction, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:28
    let mut _12: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:28: 104:29
    let _13: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:28: 104:29
    let _14: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
    let mut _15: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
    let mut _17: std::result::Result<types::receipt::Receipt, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:33
    let mut _18: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:33: 105:34
    let _19: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:33: 105:34
    let _20: types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
    let mut _21: cita_merklehash::Proof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, cita_merklehash::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
    let mut _23: std::result::Result<cita_merklehash::Proof, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:39
    let mut _24: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:39: 106:40
    let _25: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:39: 106:40
    let _26: cita_merklehash::Proof;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
    let mut _27: types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
    let mut _29: std::result::Result<types::header::Header, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:38
    let mut _30: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:38: 107:39
    let _31: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:38: 107:39
    let _32: types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
    let mut _33: types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
    let mut _35: std::result::Result<types::header::Header, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:46
    let mut _36: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:46: 108:47
    let _37: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:46: 108:47
    let _38: types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, rlp::DecoderError>, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
    let mut _40: std::result::Result<libproto::Proof, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:40
    let mut _41: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:109:40: 109:41
    let _42: std::result::Result<std::convert::Infallible, rlp::DecoderError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:109:40: 109:41
    let _43: libproto::Proof;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
    scope 1 {
        debug residual => _5;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:100:26: 100:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
        scope 4 {
        }
    }
    scope 5 {
        debug tx_proof => _8;            // in scope 5 at cita-chain/core/src/libchain/chain.rs:103:13: 103:21
    }
    scope 6 {
        debug residual => _13;           // in scope 6 at cita-chain/core/src/libchain/chain.rs:104:28: 104:29
        scope 7 {
        }
    }
    scope 8 {
        debug val => _14;                // in scope 8 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _19;           // in scope 10 at cita-chain/core/src/libchain/chain.rs:105:33: 105:34
        scope 11 {
        }
    }
    scope 12 {
        debug val => _20;                // in scope 12 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _25;           // in scope 14 at cita-chain/core/src/libchain/chain.rs:106:39: 106:40
        scope 15 {
        }
    }
    scope 16 {
        debug val => _26;                // in scope 16 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _31;           // in scope 18 at cita-chain/core/src/libchain/chain.rs:107:38: 107:39
        scope 19 {
        }
    }
    scope 20 {
        debug val => _32;                // in scope 20 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _37;           // in scope 22 at cita-chain/core/src/libchain/chain.rs:108:46: 108:47
        scope 23 {
        }
    }
    scope 24 {
        debug val => _38;                // in scope 24 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _42;           // in scope 26 at cita-chain/core/src/libchain/chain.rs:109:40: 109:41
        scope 27 {
        }
    }
    scope 28 {
        debug val => _43;                // in scope 28 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
        scope 29 {
        }
    }

    bb0: {
        _3 = UntrustedRlp::<'_>::item_count(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:100:14: 100:24
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>) -> Result<usize, DecoderError> {UntrustedRlp::<'_>::item_count}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<usize, DecoderError> as Try>::branch(move _3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:100:12: 100:27
                                         // + literal: Const { ty: fn(Result<usize, DecoderError>) -> ControlFlow<<Result<usize, DecoderError> as Try>::Residual, <Result<usize, DecoderError> as Try>::Output> {<Result<usize, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
    }

    bb3: {
        _6 = ((_2 as Continue).0: usize); // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
        switchInt(move _6) -> [6: bb7, otherwise: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:32
    }

    bb4: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
    }

    bb5: {
        _5 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:100:26: 100:27
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _5) -> bb53; // scope 2 at cita-chain/core/src/libchain/chain.rs:100:12: 100:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:100:26: 100:27
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = RlpIncorrectListLen;        // scope 0 at cita-chain/core/src/libchain/chain.rs:101:24: 101:57
        _0 = Result::<TxProof, DecoderError>::Err(move _7); // scope 0 at cita-chain/core/src/libchain/chain.rs:101:20: 101:58
        goto -> bb53;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:101:13: 101:58
    }

    bb7: {
        _11 = UntrustedRlp::<'_>::val_at::<types::transaction::SignedTransaction>(_1, const 0_usize) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:104:19: 104:25
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<types::transaction::SignedTransaction, DecoderError> {UntrustedRlp::<'_>::val_at::<types::transaction::SignedTransaction>}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = <Result<types::transaction::SignedTransaction, DecoderError> as Try>::branch(move _11) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:104:17: 104:29
                                         // + literal: Const { ty: fn(Result<types::transaction::SignedTransaction, DecoderError>) -> ControlFlow<<Result<types::transaction::SignedTransaction, DecoderError> as Try>::Residual, <Result<types::transaction::SignedTransaction, DecoderError> as Try>::Output> {<Result<types::transaction::SignedTransaction, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = discriminant(_10);         // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
        switchInt(move _12) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
    }

    bb10: {
        _14 = move ((_10 as Continue).0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
        _9 = move _14;                   // scope 9 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
        _17 = UntrustedRlp::<'_>::val_at::<types::receipt::Receipt>(_1, const 1_usize) -> [return: bb13, unwind: bb73]; // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:105:24: 105:30
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<types::receipt::Receipt, DecoderError> {UntrustedRlp::<'_>::val_at::<types::receipt::Receipt>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
    }

    bb12: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:104:28: 104:29
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _13) -> bb53; // scope 7 at cita-chain/core/src/libchain/chain.rs:104:17: 104:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:104:28: 104:29
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = <Result<types::receipt::Receipt, DecoderError> as Try>::branch(move _17) -> [return: bb14, unwind: bb73]; // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:105:22: 105:34
                                         // + literal: Const { ty: fn(Result<types::receipt::Receipt, DecoderError>) -> ControlFlow<<Result<types::receipt::Receipt, DecoderError> as Try>::Residual, <Result<types::receipt::Receipt, DecoderError> as Try>::Output> {<Result<types::receipt::Receipt, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _18 = discriminant(_16);         // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
        switchInt(move _18) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
    }

    bb15: {
        _20 = move ((_16 as Continue).0: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
        _15 = move _20;                  // scope 13 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
        _23 = UntrustedRlp::<'_>::val_at::<cita_merklehash::Proof>(_1, const 2_usize) -> [return: bb19, unwind: bb71]; // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:106:30: 106:36
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<cita_merklehash::Proof, DecoderError> {UntrustedRlp::<'_>::val_at::<cita_merklehash::Proof>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
    }

    bb17: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:105:33: 105:34
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _19) -> [return: bb18, unwind: bb72]; // scope 11 at cita-chain/core/src/libchain/chain.rs:105:22: 105:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:105:33: 105:34
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_9) -> bb53;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb19: {
        _22 = <Result<cita_merklehash::Proof, DecoderError> as Try>::branch(move _23) -> [return: bb20, unwind: bb71]; // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:106:28: 106:40
                                         // + literal: Const { ty: fn(Result<cita_merklehash::Proof, DecoderError>) -> ControlFlow<<Result<cita_merklehash::Proof, DecoderError> as Try>::Residual, <Result<cita_merklehash::Proof, DecoderError> as Try>::Output> {<Result<cita_merklehash::Proof, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb20: {
        _24 = discriminant(_22);         // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
        switchInt(move _24) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
    }

    bb21: {
        _26 = move ((_22 as Continue).0: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
        _21 = move _26;                  // scope 17 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
        _29 = UntrustedRlp::<'_>::val_at::<Header>(_1, const 3_usize) -> [return: bb25, unwind: bb68]; // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:107:29: 107:35
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<Header, DecoderError> {UntrustedRlp::<'_>::val_at::<Header>}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
    }

    bb23: {
        _25 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:106:39: 106:40
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _25) -> [return: bb24, unwind: bb69]; // scope 15 at cita-chain/core/src/libchain/chain.rs:106:28: 106:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:106:39: 106:40
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_15) -> [return: bb52, unwind: bb70]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb25: {
        _28 = <Result<Header, DecoderError> as Try>::branch(move _29) -> [return: bb26, unwind: bb68]; // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:107:27: 107:39
                                         // + literal: Const { ty: fn(Result<Header, DecoderError>) -> ControlFlow<<Result<Header, DecoderError> as Try>::Residual, <Result<Header, DecoderError> as Try>::Output> {<Result<Header, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb26: {
        _30 = discriminant(_28);         // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
        switchInt(move _30) -> [0: bb27, 1: bb29, otherwise: bb28]; // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
    }

    bb27: {
        _32 = move ((_28 as Continue).0: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
        _27 = move _32;                  // scope 21 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
        _35 = UntrustedRlp::<'_>::val_at::<Header>(_1, const 4_usize) -> [return: bb31, unwind: bb64]; // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:108:37: 108:43
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<Header, DecoderError> {UntrustedRlp::<'_>::val_at::<Header>}, val: Value(<ZST>) }
    }

    bb28: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
    }

    bb29: {
        _31 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:107:38: 107:39
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _31) -> [return: bb30, unwind: bb65]; // scope 19 at cita-chain/core/src/libchain/chain.rs:107:27: 107:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:107:38: 107:39
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_21) -> [return: bb50, unwind: bb66]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb31: {
        _34 = <Result<Header, DecoderError> as Try>::branch(move _35) -> [return: bb32, unwind: bb64]; // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:108:35: 108:47
                                         // + literal: Const { ty: fn(Result<Header, DecoderError>) -> ControlFlow<<Result<Header, DecoderError> as Try>::Residual, <Result<Header, DecoderError> as Try>::Output> {<Result<Header, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb32: {
        _36 = discriminant(_34);         // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
        switchInt(move _36) -> [0: bb33, 1: bb35, otherwise: bb34]; // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
    }

    bb33: {
        _38 = move ((_34 as Continue).0: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
        _33 = move _38;                  // scope 25 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
        _40 = UntrustedRlp::<'_>::val_at::<libproto::Proof>(_1, const 5_usize) -> [return: bb37, unwind: bb59]; // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:109:31: 109:37
                                         // + literal: Const { ty: for<'a> fn(&'a UntrustedRlp<'_>, usize) -> Result<libproto::Proof, DecoderError> {UntrustedRlp::<'_>::val_at::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb34: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
    }

    bb35: {
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:108:46: 108:47
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _37) -> [return: bb36, unwind: bb60]; // scope 23 at cita-chain/core/src/libchain/chain.rs:108:35: 108:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:108:46: 108:47
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb36: {
        drop(_27) -> [return: bb47, unwind: bb61]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb37: {
        _39 = <Result<libproto::Proof, DecoderError> as Try>::branch(move _40) -> [return: bb38, unwind: bb59]; // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:109:29: 109:41
                                         // + literal: Const { ty: fn(Result<libproto::Proof, DecoderError>) -> ControlFlow<<Result<libproto::Proof, DecoderError> as Try>::Residual, <Result<libproto::Proof, DecoderError> as Try>::Output> {<Result<libproto::Proof, DecoderError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb38: {
        _41 = discriminant(_39);         // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
        switchInt(move _41) -> [0: bb39, 1: bb41, otherwise: bb40]; // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
    }

    bb39: {
        _43 = move ((_39 as Continue).0: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
        _8 = TxProof { tx: move _9, receipt: move _15, receipt_proof: move _21, block_header: move _27, next_proposal_header: move _33, proposal_proof: move _43 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:103:24: 110:10
        _0 = Result::<TxProof, DecoderError>::Ok(move _8); // scope 5 at cita-chain/core/src/libchain/chain.rs:111:9: 111:21
        goto -> bb53;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:112:6: 112:6
    }

    bb40: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
    }

    bb41: {
        _42 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, rlp::DecoderError>); // scope 0 at cita-chain/core/src/libchain/chain.rs:109:40: 109:41
        _0 = <Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual(move _42) -> [return: bb42, unwind: bb54]; // scope 27 at cita-chain/core/src/libchain/chain.rs:109:29: 109:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:109:40: 109:41
                                         // + literal: Const { ty: fn(Result<Infallible, DecoderError>) -> Result<TxProof, DecoderError> {<Result<TxProof, DecoderError> as FromResidual<Result<Infallible, DecoderError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb42: {
        drop(_33) -> [return: bb43, unwind: bb55]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb43: {
        drop(_27) -> [return: bb44, unwind: bb56]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb44: {
        drop(_21) -> [return: bb45, unwind: bb57]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb45: {
        drop(_15) -> [return: bb46, unwind: bb58]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb46: {
        drop(_9) -> bb53;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb47: {
        drop(_21) -> [return: bb48, unwind: bb62]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb48: {
        drop(_15) -> [return: bb49, unwind: bb63]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb49: {
        drop(_9) -> bb53;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb50: {
        drop(_15) -> [return: bb51, unwind: bb67]; // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb51: {
        drop(_9) -> bb53;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb52: {
        drop(_9) -> bb53;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb53: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:112:6: 112:6
    }

    bb54 (cleanup): {
        drop(_33) -> bb55;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb55 (cleanup): {
        drop(_27) -> bb56;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb56 (cleanup): {
        drop(_21) -> bb57;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb57 (cleanup): {
        drop(_15) -> bb58;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb58 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb59 (cleanup): {
        drop(_33) -> bb60;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb60 (cleanup): {
        drop(_27) -> bb61;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb61 (cleanup): {
        drop(_21) -> bb62;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb62 (cleanup): {
        drop(_15) -> bb63;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb63 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb64 (cleanup): {
        drop(_27) -> bb65;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb65 (cleanup): {
        drop(_21) -> bb66;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb66 (cleanup): {
        drop(_15) -> bb67;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb67 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb68 (cleanup): {
        drop(_21) -> bb69;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb69 (cleanup): {
        drop(_15) -> bb70;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb70 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb71 (cleanup): {
        drop(_15) -> bb72;               // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb72 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb73 (cleanup): {
        drop(_9) -> bb74;                // scope 0 at cita-chain/core/src/libchain/chain.rs:110:9: 110:10
    }

    bb74 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:99:5: 112:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::from_bytes(_1: &[u8]) -> TxProof {
    debug bytes => _1;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:116:23: 116:28
    let mut _0: libchain::chain::TxProof; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:116:40: 116:44

    bb0: {
        _0 = rlp::decode::<TxProof>(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:117:9: 117:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:117:9: 117:20
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> TxProof {rlp::decode::<TxProof>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:118:6: 118:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify(_1: &TxProof, _2: &[H160]) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:120:19: 120:24
    debug authorities => _2;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:120:26: 120:37
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:120:54: 120:58
    let _3: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:122:13: 122:20
    let mut _4: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:122:23: 122:54
    let mut _5: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:123:12: 123:52
    let mut _6: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:123:12: 123:41
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:123:45: 123:52
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _10: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _11: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _13: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _14: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _15: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _16: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
    let mut _20: cita_merklehash::Proof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:130:13: 130:39
    let mut _21: &cita_merklehash::Proof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:130:13: 130:39
    let mut _22: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:131:12: 135:10
    let mut _23: &cita_merklehash::MerkleProof<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:131:12: 135:10
    let mut _24: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
    let _25: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
    let mut _26: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
    let mut _27: cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:69
    let mut _28: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:69
    let _29: std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:56
    let mut _30: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:45
    let mut _31: &types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:45
    let _32: types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:33
    let mut _33: &types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:133:13: 133:33
    let mut _35: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _36: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _37: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _38: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _39: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _40: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _41: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _42: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _43: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _44: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
    let mut _45: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:12: 141:89
    let mut _46: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:12: 141:45
    let _47: cita_types::H256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:12: 141:45
    let mut _48: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:12: 141:36
    let mut _49: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:12: 141:36
    let mut _50: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:49: 141:89
    let _51: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
    let mut _52: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
    let _53: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
    let mut _54: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
    let mut _56: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _57: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _58: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _59: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _60: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _61: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _62: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _63: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _64: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _65: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
    let mut _67: libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:146:42: 146:69
    let mut _68: &libproto::Proof;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:146:42: 146:69
    let mut _69: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:94
    let mut _70: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
    let _71: cita_types::H256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
    let mut _72: &libproto::BlockHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
    let _73: libproto::BlockHeader;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:57
    let mut _74: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:12: 148:57
    let mut _75: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:148:74: 148:94
    let mut _77: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _78: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _79: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _80: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _81: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _82: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _83: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _84: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _85: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _86: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
    let mut _87: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:12: 154:83
    let mut _88: &proof::BftProof;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:12: 154:83
    let mut _89: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:69
    let mut _90: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:65
    let mut _91: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
    let mut _92: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
    let _93: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
    let mut _94: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
    let mut _95: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:154:30: 154:69
    let mut _97: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _98: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _99: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _100: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _101: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _102: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _103: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _104: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _105: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _106: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
    scope 1 {
        debug tx_hash => _3;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:122:13: 122:20
        let _8: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _19: cita_merklehash::MerkleProof<cita_types::H256>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:129:13: 129:33
        scope 2 {
            debug lvl => _8;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _107: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _108: &[&str; 1];    // in scope 2 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
            let mut _109: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug receipt_merkle_proof => _19; // in scope 3 at cita-chain/core/src/libchain/chain.rs:129:13: 129:33
            let _34: log::Level;         // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _55: log::Level;         // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _66: proof::BftProof;    // in scope 3 at cita-chain/core/src/libchain/chain.rs:146:13: 146:24
            scope 4 {
                debug lvl => _34;        // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _110: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _111: &[&str; 1]; // in scope 4 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
                let mut _112: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 5 {
                debug lvl => _55;        // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _113: &(&str, &str, &str, u32); // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _114: &[&str; 1]; // in scope 5 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
                let mut _115: &log::LevelFilter; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 6 {
                debug third_proof => _66; // in scope 6 at cita-chain/core/src/libchain/chain.rs:146:13: 146:24
                let _76: log::Level;     // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let _96: log::Level;     // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                scope 7 {
                    debug lvl => _76;    // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _116: &(&str, &str, &str, u32); // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _117: &[&str; 1]; // in scope 7 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
                    let mut _118: &log::LevelFilter; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
                scope 8 {
                    debug lvl => _96;    // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _119: &(&str, &str, &str, u32); // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _120: &[&str; 1]; // in scope 8 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
                    let mut _121: &log::LevelFilter; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
            }
        }
    }

    bb0: {
        _4 = &((*_1).0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:122:23: 122:54
        _3 = types::transaction::SignedTransaction::calc_transaction_hash(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:122:23: 122:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:122:31: 122:52
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> H256 {types::transaction::SignedTransaction::calc_transaction_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &(((*_1).1: types::receipt::Receipt).6: cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:123:12: 123:41
        _7 = &_3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:123:45: 123:52
        _5 = <H256 as PartialEq>::eq(move _6, move _7) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:123:12: 123:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:123:12: 123:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at cita-chain/core/src/libchain/chain.rs:123:12: 123:52
    }

    bb3: {
        _21 = &((*_1).2: cita_merklehash::Proof); // scope 1 at cita-chain/core/src/libchain/chain.rs:130:13: 130:39
        _20 = <cita_merklehash::Proof as Clone>::clone(move _21) -> bb14; // scope 1 at cita-chain/core/src/libchain/chain.rs:130:13: 130:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:130:32: 130:37
                                         // + literal: Const { ty: for<'a> fn(&'a cita_merklehash::Proof) -> cita_merklehash::Proof {<cita_merklehash::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = log::Level::Warn;           // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _11 = &_8;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _109 = const _;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(TxProof::verify, [], Some(promoted[2])) }
        _10 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _11, _109) -> bb8; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _13 = &_8;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _15 = log::max_level() -> bb9;   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb13, otherwise: bb11]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        switchInt(move _10) -> [0: bb5, otherwise: bb6]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _14 = &_15;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _12 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _13, move _14) -> bb10; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _9 = move _12;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _108 = const _;                  // scope 2 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:125:19: 125:59
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(TxProof::verify, [], Some(promoted[1])) }
        _18 = _108 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
        _17 = Arguments::<'_>::new_const(move _18) -> bb12; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb12: {
        _107 = const _;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(TxProof::verify, [], Some(promoted[0])) }
        _16 = log::__private_api_log(move _17, _8, _107) -> bb13; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb13: {
        _0 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:126:20: 126:25
        goto -> bb86;                    // scope 1 at no-location
    }

    bb14: {
        _19 = <cita_merklehash::Proof as Into<MerkleProof<H256>>>::into(move _20) -> bb15; // scope 1 at cita-chain/core/src/libchain/chain.rs:130:13: 130:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:130:40: 130:44
                                         // + literal: Const { ty: fn(cita_merklehash::Proof) -> MerkleProof<H256> {<cita_merklehash::Proof as Into<MerkleProof<H256>>>::into}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = &_19;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:131:12: 135:10
        _26 = &((*_1).3: types::header::Header); // scope 3 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
        _25 = Header::receipts_root(move _26) -> [return: bb16, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:132:31: 132:44
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::receipts_root}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = _25;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:132:13: 132:46
        _33 = &((*_1).1: types::receipt::Receipt); // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:33
        _32 = <types::receipt::Receipt as Clone>::clone(move _33) -> [return: bb17, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:133:26: 133:31
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> types::receipt::Receipt {<types::receipt::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb17: {
        _31 = &_32;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:45
        _30 = <types::receipt::Receipt as Encodable>::rlp_bytes(move _31) -> [return: bb18, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:133:34: 133:43
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> elastic_array::ElasticArray1024<u8> {<types::receipt::Receipt as Encodable>::rlp_bytes}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = elastic_array::ElasticArray1024::<u8>::into_vec(move _30) -> [return: bb19, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:133:46: 133:54
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb19: {
        _28 = &_29;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:69
        _27 = <Vec<u8> as Hashable>::crypt_hash(move _28) -> [return: bb20, unwind: bb89]; // scope 3 at cita-chain/core/src/libchain/chain.rs:133:13: 133:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:133:57: 133:67
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb20: {
        _22 = MerkleProof::<H256>::verify::<for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>(move _23, move _24, move _27, merge) -> [return: bb21, unwind: bb89]; // scope 3 at cita-chain/core/src/libchain/chain.rs:131:12: 135:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:131:33: 131:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MerkleProof<H256>, &'b H256, H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}) -> bool {MerkleProof::<H256>::verify::<for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:134:13: 134:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_29) -> [return: bb22, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:135:9: 135:10
    }

    bb22: {
        drop(_32) -> [return: bb23, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:135:9: 135:10
    }

    bb23: {
        switchInt(move _22) -> [0: bb25, otherwise: bb24]; // scope 3 at cita-chain/core/src/libchain/chain.rs:131:12: 135:10
    }

    bb24: {
        _49 = &((*_1).3: types::header::Header); // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:36
        _48 = Header::hash(move _49) -> [return: bb35, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:141:30: 141:34
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb25: {
        _34 = log::Level::Warn;          // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _37 = &_34;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _112 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(TxProof::verify, [], Some(promoted[5])) }
        _36 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _37, _112) -> [return: bb29, unwind: bb91]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb26: {
        _35 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb28;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb27: {
        _39 = &_34;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _41 = log::max_level() -> [return: bb30, unwind: bb91]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _35) -> [0: bb34, otherwise: bb32]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb29: {
        switchInt(move _36) -> [0: bb26, otherwise: bb27]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb30: {
        _40 = &_41;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _38 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _39, move _40) -> [return: bb31, unwind: bb91]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb31: {
        _35 = move _38;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb28;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb32: {
        _111 = const _;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:137:19: 137:66
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(TxProof::verify, [], Some(promoted[4])) }
        _44 = _111 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
        _43 = Arguments::<'_>::new_const(move _44) -> [return: bb33, unwind: bb91]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb33: {
        _110 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(TxProof::verify, [], Some(promoted[3])) }
        _42 = log::__private_api_log(move _43, _34, _110) -> [return: bb93, unwind: bb91]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb34: {
        _0 = const false;                // scope 3 at cita-chain/core/src/libchain/chain.rs:138:20: 138:25
        goto -> bb85;                    // scope 3 at no-location
    }

    bb35: {
        _47 = std::option::Option::<H256>::unwrap(move _48) -> [return: bb36, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:141:37: 141:43
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb36: {
        _46 = &_47;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:45
        _54 = &((*_1).4: types::header::Header); // scope 3 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
        _53 = <Header as Deref>::deref(move _54) -> [return: bb37, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:141:50: 141:89
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _52 = _53;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
        _51 = OpenHeader::parent_hash(move _52) -> [return: bb38, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:50: 141:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:141:76: 141:87
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb38: {
        _50 = _51;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:141:49: 141:89
        _45 = <H256 as PartialEq>::eq(move _46, move _50) -> [return: bb39, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:141:12: 141:89
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _45) -> [0: bb41, otherwise: bb40]; // scope 3 at cita-chain/core/src/libchain/chain.rs:141:12: 141:89
    }

    bb40: {
        _68 = &((*_1).5: libproto::Proof); // scope 3 at cita-chain/core/src/libchain/chain.rs:146:42: 146:69
        _67 = <libproto::Proof as Clone>::clone(move _68) -> [return: bb51, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:146:42: 146:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:146:62: 146:67
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb41: {
        _55 = log::Level::Warn;          // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _58 = &_55;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _115 = const _;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(TxProof::verify, [], Some(promoted[8])) }
        _57 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _58, _115) -> [return: bb45, unwind: bb91]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _56 = const false;               // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _60 = &_55;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _62 = log::max_level() -> [return: bb46, unwind: bb91]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb44: {
        switchInt(move _56) -> [0: bb50, otherwise: bb48]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        switchInt(move _57) -> [0: bb42, otherwise: bb43]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb46: {
        _61 = &_62;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _59 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _60, move _61) -> [return: bb47, unwind: bb91]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb47: {
        _56 = move _59;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _114 = const _;                  // scope 5 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:143:19: 143:60
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(TxProof::verify, [], Some(promoted[7])) }
        _65 = _114 as &[&str] (Pointer(Unsize)); // scope 5 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
        _64 = Arguments::<'_>::new_const(move _65) -> [return: bb49, unwind: bb91]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb49: {
        _113 = const _;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(TxProof::verify, [], Some(promoted[6])) }
        _63 = log::__private_api_log(move _64, _55, _113) -> [return: bb94, unwind: bb91]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb50: {
        _0 = const false;                // scope 3 at cita-chain/core/src/libchain/chain.rs:144:20: 144:25
        goto -> bb85;                    // scope 3 at no-location
    }

    bb51: {
        _66 = <proof::BftProof as From<libproto::Proof>>::from(move _67) -> [return: bb52, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:146:27: 146:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:146:27: 146:41
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb52: {
        _74 = &((*_1).4: types::header::Header); // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:57
        _73 = Header::proposal_protobuf(move _74) -> [return: bb53, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:148:38: 148:55
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> libproto::BlockHeader {Header::proposal_protobuf}, val: Value(<ZST>) }
    }

    bb53: {
        _72 = &_73;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
        _71 = libproto::<impl libproto::BlockHeader>::crypt_hash(move _72) -> [return: bb54, unwind: bb87]; // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:148:58: 148:68
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::BlockHeader) -> H256 {libproto::<impl libproto::BlockHeader>::crypt_hash}, val: Value(<ZST>) }
    }

    bb54: {
        _70 = &_71;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:70
        _75 = &(_66.0: cita_types::H256); // scope 6 at cita-chain/core/src/libchain/chain.rs:148:74: 148:94
        _69 = <H256 as PartialEq>::eq(move _70, move _75) -> [return: bb55, unwind: bb87]; // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:94
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:148:12: 148:94
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb55: {
        drop(_73) -> [return: bb56, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:148:93: 148:94
    }

    bb56: {
        switchInt(move _69) -> [0: bb58, otherwise: bb57]; // scope 6 at cita-chain/core/src/libchain/chain.rs:148:12: 148:94
    }

    bb57: {
        _88 = &_66;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:154:12: 154:83
        _94 = &((*_1).3: types::header::Header); // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
        _93 = <Header as Deref>::deref(move _94) -> [return: bb68, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:154:30: 154:56
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb58: {
        _76 = log::Level::Warn;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _79 = &_76;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _118 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(TxProof::verify, [], Some(promoted[11])) }
        _78 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _79, _118) -> [return: bb62, unwind: bb88]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb59: {
        _77 = const false;               // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb61;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb60: {
        _81 = &_76;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _83 = log::max_level() -> [return: bb63, unwind: bb88]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb61: {
        switchInt(move _77) -> [0: bb67, otherwise: bb65]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb62: {
        switchInt(move _78) -> [0: bb59, otherwise: bb60]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb63: {
        _82 = &_83;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _80 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _81, move _82) -> [return: bb64, unwind: bb88]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb64: {
        _77 = move _80;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb61;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb65: {
        _117 = const _;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:150:19: 150:60
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(TxProof::verify, [], Some(promoted[10])) }
        _86 = _117 as &[&str] (Pointer(Unsize)); // scope 7 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
        _85 = Arguments::<'_>::new_const(move _86) -> [return: bb66, unwind: bb88]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb66: {
        _116 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(TxProof::verify, [], Some(promoted[9])) }
        _84 = log::__private_api_log(move _85, _76, _116) -> [return: bb95, unwind: bb88]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb67: {
        _0 = const false;                // scope 6 at cita-chain/core/src/libchain/chain.rs:151:20: 151:25
        goto -> bb84;                    // scope 6 at no-location
    }

    bb68: {
        _92 = _93;                       // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
        _91 = OpenHeader::number(move _92) -> [return: bb69, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:154:48: 154:54
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb69: {
        _90 = move _91 as usize (IntToInt); // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:65
        _95 = CheckedAdd(_90, const 1_usize); // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:69
        assert(!move (_95.1: bool), "attempt to compute `{} + {}`, which would overflow", move _90, const 1_usize) -> [success: bb70, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:69
    }

    bb70: {
        _89 = move (_95.0: usize);       // scope 6 at cita-chain/core/src/libchain/chain.rs:154:30: 154:69
        _87 = proof::BftProof::check(move _88, move _89, _2) -> [return: bb71, unwind: bb88]; // scope 6 at cita-chain/core/src/libchain/chain.rs:154:12: 154:83
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:154:24: 154:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a proof::BftProof, usize, &'b [H160]) -> bool {proof::BftProof::check}, val: Value(<ZST>) }
    }

    bb71: {
        switchInt(move _87) -> [0: bb73, otherwise: bb72]; // scope 6 at cita-chain/core/src/libchain/chain.rs:154:12: 154:83
    }

    bb72: {
        _0 = const true;                 // scope 6 at cita-chain/core/src/libchain/chain.rs:159:9: 159:13
        drop(_66) -> [return: bb83, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb73: {
        _96 = log::Level::Warn;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _99 = &_96;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _121 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(TxProof::verify, [], Some(promoted[14])) }
        _98 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _99, _121) -> [return: bb77, unwind: bb88]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb74: {
        _97 = const false;               // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb76;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb75: {
        _101 = &_96;                     // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _103 = log::max_level() -> [return: bb78, unwind: bb88]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb76: {
        switchInt(move _97) -> [0: bb82, otherwise: bb80]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb77: {
        switchInt(move _98) -> [0: bb74, otherwise: bb75]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb78: {
        _102 = &_103;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _100 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _101, move _102) -> [return: bb79, unwind: bb88]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb79: {
        _97 = move _100;                 // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb76;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb80: {
        _120 = const _;                  // scope 8 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:156:19: 156:75
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(TxProof::verify, [], Some(promoted[13])) }
        _106 = _120 as &[&str] (Pointer(Unsize)); // scope 8 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
        _105 = Arguments::<'_>::new_const(move _106) -> [return: bb81, unwind: bb88]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb81: {
        _119 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(TxProof::verify, [], Some(promoted[12])) }
        _104 = log::__private_api_log(move _105, _96, _119) -> [return: bb96, unwind: bb88]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb82: {
        _0 = const false;                // scope 6 at cita-chain/core/src/libchain/chain.rs:157:20: 157:25
        goto -> bb84;                    // scope 6 at no-location
    }

    bb83: {
        drop(_19) -> bb86;               // scope 1 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb84: {
        drop(_66) -> [return: bb85, unwind: bb91]; // scope 3 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb85: {
        drop(_19) -> bb86;               // scope 1 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb86: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:160:6: 160:6
    }

    bb87 (cleanup): {
        drop(_73) -> bb88;               // scope 6 at cita-chain/core/src/libchain/chain.rs:148:93: 148:94
    }

    bb88 (cleanup): {
        drop(_66) -> bb91;               // scope 3 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb89 (cleanup): {
        drop(_29) -> bb90;               // scope 3 at cita-chain/core/src/libchain/chain.rs:135:9: 135:10
    }

    bb90 (cleanup): {
        drop(_32) -> bb91;               // scope 3 at cita-chain/core/src/libchain/chain.rs:135:9: 135:10
    }

    bb91 (cleanup): {
        drop(_19) -> bb92;               // scope 1 at cita-chain/core/src/libchain/chain.rs:160:5: 160:6
    }

    bb92 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:120:5: 160:6
    }

    bb93: {
        goto -> bb34;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb94: {
        goto -> bb50;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb95: {
        goto -> bb67;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb96: {
        goto -> bb82;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:125:13: 125:60
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:125:13: 125:60

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:125:13: 125:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:125:13: 125:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:125:13: 125:60
        _1 = (move _2, move _4, move _6, const 125_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59

    bb0: {
        _1 = [const "txproof verify transaction_hash failed"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:125:19: 125:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:125:19: 125:59
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:137:13: 137:67
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:137:13: 137:67

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:137:13: 137:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:137:13: 137:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:137:13: 137:67
        _1 = (move _2, move _4, move _6, const 137_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66

    bb0: {
        _1 = [const "txproof verify receipt root merklehash failed"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:137:19: 137:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:137:19: 137:66
    }
}

promoted[5] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:143:13: 143:61
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:143:13: 143:61

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:143:13: 143:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:143:13: 143:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:143:13: 143:61
        _1 = (move _2, move _4, move _6, const 143_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60

    bb0: {
        _1 = [const "txproof verify block header hash failed"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:143:19: 143:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:143:19: 143:60
    }
}

promoted[8] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:150:13: 150:61
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:150:13: 150:61

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:150:13: 150:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:150:13: 150:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:150:13: 150:61
        _1 = (move _2, move _4, move _6, const 150_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60

    bb0: {
        _1 = [const "txproof verify next block header failed"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:150:19: 150:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:150:19: 150:60
    }
}

promoted[11] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[12] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:156:13: 156:76
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:156:13: 156:76

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:156:13: 156:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:156:13: 156:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:156:13: 156:76
        _1 = (move _2, move _4, move _6, const 156_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[13] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75

    bb0: {
        _1 = [const "txproof verify signatures for next block header failed"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:156:19: 156:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:156:19: 156:75
    }
}

promoted[14] in chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::verify: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_relay_info(_1: &TxProof) -> std::option::Option<RelayInfo> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:163:31: 163:36
    let mut _0: std::option::Option<libchain::chain::RelayInfo>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:163:41: 163:58
    let mut _2: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:164:12: 164:40
    let mut _3: &std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:164:12: 164:40
    let _4: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:167:13: 167:17
    let _5: &types::log::Log;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:167:21: 167:41
    let mut _6: &std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:167:21: 167:38
    let mut _7: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:174:12: 174:22
    let mut _9: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:177:28: 177:43
    let _10: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:177:28: 177:43
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:178:44: 178:64
    let mut _13: std::option::Option<&[u8]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:178:44: 178:55
    let mut _14: &mut std::slice::Chunks<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:178:44: 178:55
    let mut _16: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:179:42: 179:62
    let mut _17: std::option::Option<&[u8]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:179:42: 179:53
    let mut _18: &mut std::slice::Chunks<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:179:42: 179:53
    let mut _20: cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:180:47: 180:79
    let mut _21: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:180:58: 180:78
    let mut _22: std::option::Option<&[u8]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:180:58: 180:69
    let mut _23: &mut std::slice::Chunks<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:180:58: 180:69
    let mut _25: std::iter::Enumerate<std::iter::Take<std::slice::Iter<'_, u8>>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:83
    let mut _26: std::iter::Take<std::slice::Iter<'_, u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:71
    let mut _27: std::slice::Iter<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:63
    let mut _28: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:63
    let _29: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:56
    let mut _30: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:51
    let _31: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:51
    let mut _32: std::option::Option<&[u8]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:42
    let mut _33: &mut std::slice::Chunks<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:31: 181:42
    let mut _34: std::ops::RangeTo<usize>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:181:52: 181:55
    let mut _35: [u8; 4];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:182:17: 182:25
    let mut _37: &cita_types::U256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:188:37: 188:79
    let _38: cita_types::U256;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:188:37: 188:69
    let mut _39: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:188:48: 188:68
    let mut _40: std::option::Option<&[u8]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:188:48: 188:59
    let mut _41: &mut std::slice::Chunks<'_, u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:188:48: 188:59
    let mut _42: libchain::chain::RelayInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:189:18: 195:14
    let mut _43: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:190:17: 190:30
    let mut _44: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:191:17: 191:28
    let mut _45: cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:192:17: 192:30
    let mut _46: [u8; 4];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:193:17: 193:28
    let mut _47: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:194:17: 194:34
    scope 1 {
        debug data => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:167:13: 167:17
        let mut _8: std::slice::Chunks<'_, u8>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:177:17: 177:25
        scope 2 {
            debug iter => _8;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:177:17: 177:25
            let _11: cita_types::U256;   // in scope 2 at cita-chain/core/src/libchain/chain.rs:178:17: 178:30
            scope 3 {
                debug from_chain_id => _11; // in scope 3 at cita-chain/core/src/libchain/chain.rs:178:17: 178:30
                let _15: cita_types::U256; // in scope 3 at cita-chain/core/src/libchain/chain.rs:179:17: 179:28
                scope 4 {
                    debug to_chain_id => _15; // in scope 4 at cita-chain/core/src/libchain/chain.rs:179:17: 179:28
                    let _19: cita_types::H160; // in scope 4 at cita-chain/core/src/libchain/chain.rs:180:17: 180:30
                    scope 5 {
                        debug dest_contract => _19; // in scope 5 at cita-chain/core/src/libchain/chain.rs:180:17: 180:30
                        let _24: [u8; 4]; // in scope 5 at cita-chain/core/src/libchain/chain.rs:181:17: 181:28
                        scope 6 {
                            debug dest_hasher => _24; // in scope 6 at cita-chain/core/src/libchain/chain.rs:181:17: 181:28
                            let _36: u64; // in scope 6 at cita-chain/core/src/libchain/chain.rs:188:17: 188:34
                            scope 7 {
                                debug cross_chain_nonce => _36; // in scope 7 at cita-chain/core/src/libchain/chain.rs:188:17: 188:34
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &(((*_1).1: types::receipt::Receipt).3: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:164:12: 164:40
        _2 = Vec::<types::log::Log>::is_empty(move _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:164:12: 164:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:164:30: 164:38
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::log::Log>) -> bool {Vec::<types::log::Log>::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:164:12: 164:40
    }

    bb2: {
        _0 = std::option::Option::<RelayInfo>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:165:20: 165:24
        goto -> bb31;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:197:6: 197:6
    }

    bb3: {
        _6 = &(((*_1).1: types::receipt::Receipt).3: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:167:21: 167:38
        _5 = <Vec<types::log::Log> as Index<usize>>::index(move _6, const 0_usize) -> bb4; // scope 0 at cita-chain/core/src/libchain/chain.rs:167:21: 167:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:167:21: 167:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::log::Log>, usize) -> &'a <Vec<types::log::Log> as Index<usize>>::Output {<Vec<types::log::Log> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = &((*_5).2: std::vec::Vec<u8>); // scope 0 at cita-chain/core/src/libchain/chain.rs:167:20: 167:46
        _7 = Vec::<u8>::len(_4) -> bb5;  // scope 1 at cita-chain/core/src/libchain/chain.rs:174:12: 174:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:174:17: 174:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> usize {Vec::<u8>::len}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _7) -> [160: bb7, otherwise: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:174:12: 174:29
    }

    bb6: {
        _0 = std::option::Option::<RelayInfo>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:175:13: 175:17
        goto -> bb31;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:174:9: 196:10
    }

    bb7: {
        _10 = <Vec<u8> as Deref>::deref(_4) -> bb8; // scope 1 at cita-chain/core/src/libchain/chain.rs:177:28: 177:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:177:28: 177:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = _10;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:177:28: 177:43
        _8 = core::slice::<impl [u8]>::chunks(move _9, const 32_usize) -> bb9; // scope 1 at cita-chain/core/src/libchain/chain.rs:177:28: 177:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:177:33: 177:39
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], usize) -> Chunks<'a, u8> {core::slice::<impl [u8]>::chunks}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = &mut _8;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:178:44: 178:55
        _13 = <Chunks<'_, u8> as Iterator>::next(move _14) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:178:44: 178:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:178:49: 178:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chunks<'_, u8>) -> std::option::Option<<Chunks<'_, u8> as Iterator>::Item> {<Chunks<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = std::option::Option::<&[u8]>::unwrap(move _13) -> bb11; // scope 2 at cita-chain/core/src/libchain/chain.rs:178:44: 178:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:178:56: 178:62
                                         // + literal: Const { ty: fn(std::option::Option<&[u8]>) -> &[u8] {std::option::Option::<&[u8]>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _11 = <U256 as From<&[u8]>>::from(move _12) -> bb12; // scope 2 at cita-chain/core/src/libchain/chain.rs:178:33: 178:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:178:33: 178:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<U256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb12: {
        _18 = &mut _8;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:179:42: 179:53
        _17 = <Chunks<'_, u8> as Iterator>::next(move _18) -> bb13; // scope 3 at cita-chain/core/src/libchain/chain.rs:179:42: 179:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:179:47: 179:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chunks<'_, u8>) -> std::option::Option<<Chunks<'_, u8> as Iterator>::Item> {<Chunks<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = std::option::Option::<&[u8]>::unwrap(move _17) -> bb14; // scope 3 at cita-chain/core/src/libchain/chain.rs:179:42: 179:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:179:54: 179:60
                                         // + literal: Const { ty: fn(std::option::Option<&[u8]>) -> &[u8] {std::option::Option::<&[u8]>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = <U256 as From<&[u8]>>::from(move _16) -> bb15; // scope 3 at cita-chain/core/src/libchain/chain.rs:179:31: 179:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:179:31: 179:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<U256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = &mut _8;                   // scope 4 at cita-chain/core/src/libchain/chain.rs:180:58: 180:69
        _22 = <Chunks<'_, u8> as Iterator>::next(move _23) -> bb16; // scope 4 at cita-chain/core/src/libchain/chain.rs:180:58: 180:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:180:63: 180:67
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chunks<'_, u8>) -> std::option::Option<<Chunks<'_, u8> as Iterator>::Item> {<Chunks<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _21 = std::option::Option::<&[u8]>::unwrap(move _22) -> bb17; // scope 4 at cita-chain/core/src/libchain/chain.rs:180:58: 180:78
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:180:70: 180:76
                                         // + literal: Const { ty: fn(std::option::Option<&[u8]>) -> &[u8] {std::option::Option::<&[u8]>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _20 = <H256 as From<&[u8]>>::from(move _21) -> bb18; // scope 4 at cita-chain/core/src/libchain/chain.rs:180:47: 180:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:180:47: 180:57
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[u8]) -> H256 {<H256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb18: {
        _19 = <H160 as From<H256>>::from(move _20) -> bb19; // scope 4 at cita-chain/core/src/libchain/chain.rs:180:33: 180:80
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:180:33: 180:46
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(H256) -> H160 {<H160 as From<H256>>::from}, val: Value(<ZST>) }
    }

    bb19: {
        _33 = &mut _8;                   // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:42
        _32 = <Chunks<'_, u8> as Iterator>::next(move _33) -> bb20; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:36: 181:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chunks<'_, u8>) -> std::option::Option<<Chunks<'_, u8> as Iterator>::Item> {<Chunks<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _31 = std::option::Option::<&[u8]>::unwrap(move _32) -> bb21; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:43: 181:49
                                         // + literal: Const { ty: fn(std::option::Option<&[u8]>) -> &[u8] {std::option::Option::<&[u8]>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        _30 = _31;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:51
        _34 = const RangeTo::<usize> {{ end: 4_usize }}; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:52: 181:55
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000004)) }
        _29 = <[u8] as Index<RangeTo<usize>>>::index(move _30, move _34) -> bb22; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:31: 181:56
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeTo<usize>) -> &'a <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb22: {
        _28 = _29;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:63
        _27 = core::slice::<impl [u8]>::iter(move _28) -> bb23; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:57: 181:61
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb23: {
        _26 = <std::slice::Iter<'_, u8> as Iterator>::take(move _27, const 4_usize) -> bb24; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:64: 181:68
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u8>, usize) -> std::iter::Take<std::slice::Iter<'_, u8>> {<std::slice::Iter<'_, u8> as Iterator>::take}, val: Value(<ZST>) }
    }

    bb24: {
        _25 = <std::iter::Take<std::slice::Iter<'_, u8>> as Iterator>::enumerate(move _26) -> bb25; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 181:83
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:72: 181:81
                                         // + literal: Const { ty: fn(std::iter::Take<std::slice::Iter<'_, u8>>) -> Enumerate<std::iter::Take<std::slice::Iter<'_, u8>>> {<std::iter::Take<std::slice::Iter<'_, u8>> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb25: {
        _35 = [const 0_u8; 4];           // scope 5 at cita-chain/core/src/libchain/chain.rs:182:17: 182:25
        _24 = <Enumerate<std::iter::Take<std::slice::Iter<'_, u8>>> as Iterator>::fold::<[u8; 4], [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38]>(move _25, move _35, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38]) -> bb26; // scope 5 at cita-chain/core/src/libchain/chain.rs:181:31: 187:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:181:84: 181:88
                                         // + literal: Const { ty: fn(Enumerate<std::iter::Take<std::slice::Iter<'_, u8>>>, [u8; 4], [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38]) -> [u8; 4] {<Enumerate<std::iter::Take<std::slice::Iter<'_, u8>>> as Iterator>::fold::<[u8; 4], [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38], val: Value(<ZST>) }
    }

    bb26: {
        _41 = &mut _8;                   // scope 6 at cita-chain/core/src/libchain/chain.rs:188:48: 188:59
        _40 = <Chunks<'_, u8> as Iterator>::next(move _41) -> bb27; // scope 6 at cita-chain/core/src/libchain/chain.rs:188:48: 188:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:188:53: 188:57
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chunks<'_, u8>) -> std::option::Option<<Chunks<'_, u8> as Iterator>::Item> {<Chunks<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb27: {
        _39 = std::option::Option::<&[u8]>::unwrap(move _40) -> bb28; // scope 6 at cita-chain/core/src/libchain/chain.rs:188:48: 188:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:188:60: 188:66
                                         // + literal: Const { ty: fn(std::option::Option<&[u8]>) -> &[u8] {std::option::Option::<&[u8]>::unwrap}, val: Value(<ZST>) }
    }

    bb28: {
        _38 = <U256 as From<&[u8]>>::from(move _39) -> bb29; // scope 6 at cita-chain/core/src/libchain/chain.rs:188:37: 188:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:188:37: 188:47
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[u8]) -> U256 {<U256 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb29: {
        _37 = &_38;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:188:37: 188:79
        _36 = U256::low_u64(move _37) -> bb30; // scope 6 at cita-chain/core/src/libchain/chain.rs:188:37: 188:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:188:70: 188:77
                                         // + literal: Const { ty: for<'a> fn(&'a U256) -> u64 {U256::low_u64}, val: Value(<ZST>) }
    }

    bb30: {
        _43 = _11;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:190:17: 190:30
        _44 = _15;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:191:17: 191:28
        _45 = _19;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:192:17: 192:30
        _46 = _24;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:193:17: 193:28
        _47 = _36;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:194:17: 194:34
        _42 = RelayInfo { from_chain_id: move _43, to_chain_id: move _44, dest_contract: move _45, dest_hasher: move _46, cross_chain_nonce: move _47 }; // scope 7 at cita-chain/core/src/libchain/chain.rs:189:18: 195:14
        _0 = std::option::Option::<RelayInfo>::Some(move _42); // scope 7 at cita-chain/core/src/libchain/chain.rs:189:13: 195:15
        goto -> bb31;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:174:9: 196:10
    }

    bb31: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:197:6: 197:6
    }
}

chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_relay_info::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:182:23: 182:24

    bb0: {
        _0 = const 4_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:182:23: 182:24
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:182:23: 182:24
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_relay_info::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:183:17: 183:38], _2: [u8; 4], _3: (usize, &u8)) -> [u8; 4] {
    debug acc => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:183:18: 183:25
    let mut _0: [u8; 4];                 // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:183:39: 183:39
    let _4: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:183:28: 183:31
    let _5: &u8;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:183:33: 183:36
    let mut _6: u8;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:184:32: 184:36
    let mut _7: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:184:21: 184:29
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:184:21: 184:29
    scope 1 {
        debug idx => _4;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:183:28: 183:31
        debug val => _5;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:183:33: 183:36
    }

    bb0: {
        _4 = (_3.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:183:28: 183:31
        _5 = (_3.1: &u8);                // scope 0 at cita-chain/core/src/libchain/chain.rs:183:33: 183:36
        _6 = (*_5);                      // scope 1 at cita-chain/core/src/libchain/chain.rs:184:32: 184:36
        _7 = const 4_usize;              // scope 1 at cita-chain/core/src/libchain/chain.rs:184:21: 184:29
        _8 = Lt(_4, _7);                 // scope 1 at cita-chain/core/src/libchain/chain.rs:184:21: 184:29
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _4) -> bb1; // scope 1 at cita-chain/core/src/libchain/chain.rs:184:21: 184:29
    }

    bb1: {
        _2[_4] = move _6;                // scope 1 at cita-chain/core/src/libchain/chain.rs:184:21: 184:36
        _0 = _2;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:185:21: 185:24
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:186:18: 186:18
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_crosschain_data(_1: &TxProof, _2: H160, _3: [u8; 4], _4: u64, _5: U256, _6: &[H160]) -> std::option::Option<(H160, Vec<u8>)> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:203:9: 203:14
    debug my_contrac_addr => _2;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:204:9: 204:24
    debug my_hasher => _3;               // in scope 0 at cita-chain/core/src/libchain/chain.rs:205:9: 205:18
    debug my_cross_chain_nonce => _4;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:206:9: 206:29
    debug my_chain_id => _5;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:207:9: 207:20
    debug authorities => _6;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:208:9: 208:20
    let mut _0: std::option::Option<(cita_types::H160, std::vec::Vec<u8>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:209:10: 209:36
    let mut _7: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:210:12: 210:36
    let mut _8: std::option::Option<libchain::chain::RelayInfo>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:211:13: 211:38
    let mut _9: [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _10: &cita_types::U256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _11: &cita_types::H160;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _12: &[u8; 4];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _13: &u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _14: &&libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18

    bb0: {
        _7 = TxProof::verify(_1, _6) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:210:12: 210:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:210:17: 210:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TxProof, &'b [H160]) -> bool {TxProof::verify}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _7) -> [0: bb4, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:210:12: 210:36
    }

    bb2: {
        _8 = TxProof::extract_relay_info(_1) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:211:13: 211:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:211:18: 211:36
                                         // + literal: Const { ty: for<'a> fn(&'a TxProof) -> std::option::Option<RelayInfo> {TxProof::extract_relay_info}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &_5;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
        _11 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
        _12 = &_3;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
        _13 = &_4;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
        _14 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
        _9 = [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20] { my_chain_id: move _10, my_contrac_addr: move _11, my_hasher: move _12, my_cross_chain_nonce: move _13, self: move _14 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
                                         // closure
                                         // + def_id: DefId(0:178 ~ core[3f1a]::libchain::chain::{impl#2}::extract_crosschain_data::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((libchain::chain::RelayInfo,)) -> std::option::Option<(cita_types::H160, std::vec::Vec<u8>)>,
                                         //     (&cita_types::U256, &cita_types::H160, &[u8; 4], &u64, &&libchain::chain::TxProof),
                                         // ]
        _0 = std::option::Option::<RelayInfo>::and_then::<(H160, Vec<u8>), [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20]>(move _8, move _9) -> bb5; // scope 0 at cita-chain/core/src/libchain/chain.rs:211:13: 239:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:211:39: 211:47
                                         // + literal: Const { ty: fn(std::option::Option<RelayInfo>, [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20]) -> std::option::Option<(H160, Vec<u8>)> {std::option::Option::<RelayInfo>::and_then::<(H160, Vec<u8>), [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20]>}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = std::option::Option::<(H160, Vec<u8>)>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:241:13: 241:17
        goto -> bb5;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:210:9: 242:10
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:243:6: 243:6
    }
}

chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_crosschain_data::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:205:25: 205:26

    bb0: {
        _0 = const 4_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:205:25: 205:26
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:205:25: 205:26
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:115:1: 115:13>::extract_crosschain_data::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:212:17: 218:20], _2: RelayInfo) -> std::option::Option<(H160, Vec<u8>)> {
    debug my_chain_id => (*(_1.0: &cita_types::U256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:207:9: 207:20
    debug my_contrac_addr => (*(_1.1: &cita_types::H160)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:204:9: 204:24
    debug my_hasher => (*(_1.2: &[u8; 4])); // in scope 0 at cita-chain/core/src/libchain/chain.rs:205:9: 205:18
    debug my_cross_chain_nonce => (*(_1.3: &u64)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:206:9: 206:29
    debug self => (*(_1.4: &&libchain::chain::TxProof)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:203:10: 203:14
    let mut _0: std::option::Option<(cita_types::H160, std::vec::Vec<u8>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:218:21: 218:21
    let _3: cita_types::U256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:213:22: 213:33
    let _4: cita_types::H160;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:214:22: 214:35
    let _5: [u8; 4];                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:215:22: 215:33
    let _6: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:216:22: 216:39
    let mut _7: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
    let mut _9: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
    let mut _10: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:226:24: 226:50
    let mut _11: &cita_types::U256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:226:24: 226:35
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:227:28: 227:60
    let mut _13: &cita_types::H160;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:227:28: 227:41
    let mut _14: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:228:28: 228:52
    let mut _15: &[u8; 4];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:228:28: 228:39
    let mut _16: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:229:28: 229:69
    let mut _17: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:229:49: 229:69
    let mut _19: (&[u8], &[u8]);         // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
    let mut _20: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
    let _21: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
    let mut _22: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
    let _23: &types::transaction::Transaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:63
    let mut _24: &types::transaction::UnverifiedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
    let _25: &types::transaction::UnverifiedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:63
    let mut _26: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
    let mut _27: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:233:73: 233:83
    let mut _28: (cita_types::H160, std::vec::Vec<u8>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:234:30: 234:76
    let mut _29: cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:234:31: 234:48
    let mut _30: &cita_types::H160;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
    let mut _31: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
    let mut _32: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:234:50: 234:75
    let mut _33: &cita_types::U256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _34: &u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _35: &[u8; 4];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _36: &cita_types::H160;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _37: &&libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _38: &libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _39: &&libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    let mut _40: &libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:212:17: 238:18
    scope 1 {
        debug to_chain_id => _3;         // in scope 1 at cita-chain/core/src/libchain/chain.rs:213:22: 213:33
        debug dest_contract => _4;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:214:22: 214:35
        debug dest_hasher => _5;         // in scope 1 at cita-chain/core/src/libchain/chain.rs:215:22: 215:33
        debug cross_chain_nonce => _6;   // in scope 1 at cita-chain/core/src/libchain/chain.rs:216:22: 216:39
        let _18: &[u8];                  // in scope 1 at cita-chain/core/src/libchain/chain.rs:233:33: 233:47
        scope 2 {
            debug origin_tx_data => _18; // in scope 2 at cita-chain/core/src/libchain/chain.rs:233:33: 233:47
        }
    }

    bb0: {
        _3 = (_2.1: cita_types::U256);   // scope 0 at cita-chain/core/src/libchain/chain.rs:213:22: 213:33
        _4 = (_2.2: cita_types::H160);   // scope 0 at cita-chain/core/src/libchain/chain.rs:214:22: 214:35
        _5 = (_2.3: [u8; 4]);            // scope 0 at cita-chain/core/src/libchain/chain.rs:215:22: 215:33
        _6 = (_2.4: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:216:22: 216:39
        _11 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 226:35
        _33 = deref_copy (_1.0: &cita_types::U256); // scope 1 at cita-chain/core/src/libchain/chain.rs:226:39: 226:50
        _10 = <U256 as PartialEq>::eq(move _11, _33) -> bb10; // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 226:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:226:24: 226:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U256, &'b U256) -> bool {<U256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
        goto -> bb3;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
    }

    bb2: {
        _34 = deref_copy (_1.3: &u64);   // scope 1 at cita-chain/core/src/libchain/chain.rs:229:49: 229:69
        _17 = (*_34);                    // scope 1 at cita-chain/core/src/libchain/chain.rs:229:49: 229:69
        _16 = Eq(_6, move _17);          // scope 1 at cita-chain/core/src/libchain/chain.rs:229:28: 229:69
        _7 = move _16;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
        goto -> bb3;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
    }

    bb3: {
        switchInt(move _7) -> [0: bb20, otherwise: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
    }

    bb4: {
        _8 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
        goto -> bb6;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
    }

    bb5: {
        _15 = &_5;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:228:28: 228:39
        _35 = deref_copy (_1.2: &[u8; 4]); // scope 1 at cita-chain/core/src/libchain/chain.rs:228:43: 228:52
        _14 = <[u8; 4] as PartialEq>::eq(move _15, _35) -> bb12; // scope 1 at cita-chain/core/src/libchain/chain.rs:228:28: 228:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:228:28: 228:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 4], &'b [u8; 4]) -> bool {<[u8; 4] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 229:69
    }

    bb7: {
        _9 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
        goto -> bb9;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
    }

    bb8: {
        _13 = &_4;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:227:28: 227:41
        _36 = deref_copy (_1.1: &cita_types::H160); // scope 1 at cita-chain/core/src/libchain/chain.rs:227:45: 227:60
        _12 = <H160 as PartialEq>::eq(move _13, _36) -> bb11; // scope 1 at cita-chain/core/src/libchain/chain.rs:227:28: 227:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:227:28: 227:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b H160) -> bool {<H160 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        switchInt(move _9) -> [0: bb4, otherwise: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
    }

    bb10: {
        switchInt(move _10) -> [0: bb7, otherwise: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
    }

    bb11: {
        _9 = move _12;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
        goto -> bb9;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 227:60
    }

    bb12: {
        _8 = move _14;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
        goto -> bb6;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:226:24: 228:52
    }

    bb13: {
        _37 = deref_copy (_1.4: &&libchain::chain::TxProof); // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
        _38 = deref_copy (*_37);         // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
        _26 = &((*_38).0: types::transaction::SignedTransaction); // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
        _25 = <types::transaction::SignedTransaction as Deref>::deref(move _26) -> bb14; // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:233:51: 233:63
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> &'a <types::transaction::SignedTransaction as Deref>::Target {<types::transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = _25;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:58
        _23 = <types::transaction::UnverifiedTransaction as Deref>::deref(move _24) -> bb15; // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:233:51: 233:63
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::UnverifiedTransaction) -> &'a <types::transaction::UnverifiedTransaction as Deref>::Target {<types::transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _22 = &((*_23).5: std::vec::Vec<u8>); // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
        _21 = <Vec<u8> as Deref>::deref(move _22) -> bb16; // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:233:51: 233:84
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _20 = _21;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
        _27 = const 132_usize;           // scope 1 at cita-chain/core/src/libchain/chain.rs:233:73: 233:83
        _19 = core::slice::<impl [u8]>::split_at(move _20, move _27) -> bb17; // scope 1 at cita-chain/core/src/libchain/chain.rs:233:51: 233:84
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:233:64: 233:72
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], usize) -> (&'a [u8], &'a [u8]) {core::slice::<impl [u8]>::split_at}, val: Value(<ZST>) }
    }

    bb17: {
        _18 = (_19.1: &[u8]);            // scope 1 at cita-chain/core/src/libchain/chain.rs:233:33: 233:47
        _39 = deref_copy (_1.4: &&libchain::chain::TxProof); // scope 2 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
        _40 = deref_copy (*_39);         // scope 2 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
        _31 = &((*_40).0: types::transaction::SignedTransaction); // scope 2 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
        _30 = types::transaction::SignedTransaction::sender(move _31) -> bb18; // scope 2 at cita-chain/core/src/libchain/chain.rs:234:32: 234:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:234:40: 234:46
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> &'a H160 {types::transaction::SignedTransaction::sender}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = (*_30);                    // scope 2 at cita-chain/core/src/libchain/chain.rs:234:31: 234:48
        _32 = <[u8] as ToOwned>::to_owned(_18) -> bb19; // scope 2 at cita-chain/core/src/libchain/chain.rs:234:50: 234:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:234:65: 234:73
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> <[u8] as ToOwned>::Owned {<[u8] as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb19: {
        _28 = (move _29, move _32);      // scope 2 at cita-chain/core/src/libchain/chain.rs:234:30: 234:76
        _0 = std::option::Option::<(H160, Vec<u8>)>::Some(move _28); // scope 2 at cita-chain/core/src/libchain/chain.rs:234:25: 234:77
        goto -> bb21;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:226:21: 237:22
    }

    bb20: {
        _0 = std::option::Option::<(H160, Vec<u8>)>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:236:25: 236:29
        goto -> bb21;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:226:21: 237:22
    }

    bb21: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:238:18: 238:18
    }
}

BlockSource::CONSENSUS::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:248:17: 248:18

    bb0: {
        _0 = const 0_isize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:248:17: 248:18
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:248:17: 248:18
    }
}

BlockSource::NET::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:249:11: 249:12

    bb0: {
        _0 = const 1_isize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:249:11: 249:12
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:249:11: 249:12
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:246:10: 246:19>::eq(_1: &BlockSource, _2: &BlockSource) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
    debug other => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
    let _3: isize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        let _4: isize;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        scope 2 {
            debug __arg1_tag => _4;      // in scope 2 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        _4 = discriminant((*_2));        // scope 1 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        _0 = Eq(_3, _4);                 // scope 2 at cita-chain/core/src/libchain/chain.rs:246:10: 246:19
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:246:19: 246:19
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:246:21: 246:26>::clone(_1: &BlockSource) -> BlockSource {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    let mut _0: libchain::chain::BlockSource; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    let mut _2: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    }

    bb1: {
        _0 = const BlockSource::NET;     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: BlockSource, val: Value(Scalar(0x01)) }
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    }

    bb3: {
        _0 = const BlockSource::CONSENSUS; // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: BlockSource, val: Value(Scalar(0x00)) }
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:21: 246:26
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:246:26: 246:26
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:246:28: 246:33>::fmt(_1: &BlockSource, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    let mut _3: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    let _5: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    let _6: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    }

    bb1: {
        _6 = const "NET";                // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _6;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:32: 246:33
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
    }

    bb3: {
        _5 = const "CONSENSUS";          // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:246:32: 246:33
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> bb5; // scope 0 at cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:246:28: 246:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:246:33: 246:33
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:252:10: 252:15>::fmt(_1: &chain::Config, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
    let _4: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
    let _6: &&u8;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
    let _7: &u8;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22

    bb0: {
        _3 = const "Config";             // scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:10: 252:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "prooftype";          // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:254:5: 254:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &((*_1).0: u8);             // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        _6 = &_7;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:10: 252:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:10: 252:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:15: 252:15
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:252:17: 252:22>::clone(_1: &chain::Config) -> chain::Config {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:17: 252:22
    let mut _0: libchain::chain::Config; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:17: 252:22
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at cita-chain/core/src/libchain/chain.rs:252:17: 252:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:22: 252:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:252:30: 252:39>::eq(_1: &chain::Config, _2: &chain::Config) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:30: 252:39
    debug other => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:30: 252:39
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:30: 252:39
    let mut _3: u8;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
    let mut _4: u8;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        _4 = ((*_2).0: u8);              // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        _0 = Eq(move _3, move _4);       // scope 0 at cita-chain/core/src/libchain/chain.rs:254:5: 254:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:39: 252:39
    }
}

const _IMPL_DESERIALIZE_FOR_Config: () = {
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _0 = const ();                   // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize(_1: __D) -> Result<chain::Config, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::Config, <__D as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<__Visitor<'_>>(move _1, const "Config", const _, const __Visitor::<'_> {{ marker: PhantomData::<chain::Config>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], __Visitor<'_>) -> Result<<__Visitor<'_> as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_struct::<__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &[&str], val: Unevaluated(FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::expecting(_1: &__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __formatter => _2;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_u64(_1: __FieldVisitor, _2: u64) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __value => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _3: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: __E;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _5: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _6: &dyn libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _7: &&str;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _7 = const _;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _6 = _7 as &dyn libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _4 = <__E as _serde::de::Error>::invalid_value(move _5, move _6) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn Expected + 'b)) -> __E {<__E as _serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const __Field::__field0;    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _3); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb3: {
        _0 = Result::<__Field, __E>::Err(move _4); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _1: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _1 = const "field index 0 <= i < 1"; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_str(_1: __FieldVisitor, _2: &str) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __value => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _5: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "prooftype") -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb2: {
        _5 = const __Field::__ignore;    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _5); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb3: {
        _4 = const __Field::__field0;    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _4); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_bytes(_1: __FieldVisitor, _2: &[u8]) -> Result<__Field, __E> {
    debug self => const __FieldVisitor;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __value => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _3: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _5: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _6: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _7: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _3 = Len((*_2));                 // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _4 = const 9_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _5 = Eq(move _3, move _4);       // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _5) -> [0: bb10, otherwise: bb1]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [112: bb2, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [114: bb3, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [111: bb4, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [111: bb5, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [102: bb6, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [116: bb7, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [121: bb8, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [112: bb9, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [101: bb11, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb10: {
        _7 = const __Field::__ignore;    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x01)) }
        _0 = Result::<__Field, __E>::Ok(move _7); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb12;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb11: {
        _6 = const __Field::__field0;    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __Field, val: Value(Scalar(0x00)) }
        _0 = Result::<__Field, __E>::Ok(move _6); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb12;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb12: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize(_1: __D) -> Result<__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field, <__D as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>(move _1, const __FieldVisitor) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: fn(__D, __FieldVisitor) -> Result<<__FieldVisitor as Visitor<'_>>::Value, <__D as Deserializer<'_>>::Error> {<__D as Deserializer<'_>>::deserialize_identifier::<__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: __FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::expecting(_1: &__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __formatter => _2;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _3 = const "struct Config";      // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_seq(_1: __Visitor<'_>, _2: __A) -> Result<chain::Config, <__A as SeqAccess<'_>>::Error> {
    debug self => const __Visitor::<'_> {{ marker: PhantomData::<chain::Config>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __seq => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::Config, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _3: std::result::Result<std::option::Option<u8>, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: &mut __A;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _5: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _6: std::option::Option<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _7: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _8: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _9: u8;                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _10: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _11: &dyn libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _12: libchain::chain::Config; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _13: &&str;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _3 = <__A as SeqAccess<'_>>::next_element::<u8>(_4) -> [return: bb1, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:254:5: 254:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u8>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb9;                     // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u8>); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _8 = discriminant(_6);           // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb5: {
        _13 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &&str, val: Unevaluated(<__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _13 as &dyn libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _10 = <<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb7: {
        _9 = ((_6 as Some).0: u8);       // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _12 = chain::Config { prooftype: _9 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as SeqAccess<'_>>::Error>::Ok(move _12); // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        drop(_2) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb8: {
        _0 = Result::<chain::Config, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb9;                     // scope 0 at no-location
    }

    bb9: {
        drop(_2) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb10: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _1: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _1 = const "struct Config with 1 element"; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::deserialize::<impl at cita-chain/core/src/libchain/chain.rs:252:41: 252:52>::visit_map(_1: __Visitor<'_>, _2: __A) -> Result<chain::Config, <__A as MapAccess<'_>>::Error> {
    debug self => const __Visitor::<'_> {{ marker: PhantomData::<chain::Config>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    debug __map => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _0: std::result::Result<libchain::chain::Config, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _3: std::option::Option<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: std::result::Result<std::option::Option<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field>, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _5: &mut __A;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _6: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _9: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _11: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _13: &std::option::Option<u8>;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _14: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _15: std::option::Option<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _16: std::result::Result<u8, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _17: &mut __A;               // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _18: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _21: std::result::Result<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _22: &mut __A;               // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _23: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _26: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _28: std::result::Result<u8, <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _29: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _32: libchain::chain::Config; // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _33: u8;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        let _25: u8;                     // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        let _27: u8;                     // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        let _30: u8;                     // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        let _31: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        scope 2 {
            debug __key => _10;          // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _7: std::option::Option<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field>; // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _8: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _10: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field; // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _19: u8;                 // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _20: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            let _24: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            scope 3 {
                debug __val => _7;       // in scope 3 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
            scope 4 {
                debug __err => _8;       // in scope 4 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
            scope 5 {
                debug __val => _19;      // in scope 5 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
            scope 6 {
                debug __err => _20;      // in scope 6 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny; // in scope 8 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
            scope 9 {
                debug __err => _24;      // in scope 9 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
            }
        }
        scope 10 {
            debug __field0 => _25;       // in scope 10 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        }
        scope 11 {
            debug __field0 => _27;       // in scope 11 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        }
        scope 12 {
            debug __val => _30;          // in scope 12 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        }
        scope 13 {
            debug __err => _31;          // in scope 13 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        }
    }

    bb0: {
        _3 = std::option::Option::<u8>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb1;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb1: {
        _5 = &mut _2;                    // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _4 = <__A as MapAccess<'_>>::next_key::<__Field>(_5) -> [return: bb2, unwind: bb31]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_4);           // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Err(move _8); // scope 4 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb29;                    // scope 2 at no-location
    }

    bb4: {
        unreachable;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field>); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _9 = discriminant(_7);           // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _9) -> [1: bb7, otherwise: bb6]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb6: {
        _26 = discriminant(_3);          // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _26) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb7: {
        _10 = move ((_7 as Some).0: libchain::chain::_IMPL_DESERIALIZE_FOR_Config::<impl libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::Deserialize<'de> for libchain::chain::Config>::deserialize::__Field); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _11 = discriminant(_10);         // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _11) -> [0: bb9, otherwise: bb8]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb8: {
        _22 = &mut _2;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb18, unwind: bb31]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = &_3;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _12 = std::option::Option::<u8>::is_some(_13) -> [return: bb10, unwind: bb31]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u8>) -> bool {std::option::Option::<u8>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field(const "prooftype") -> [return: bb12, unwind: bb31]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Err(move _14); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb29;                    // scope 2 at no-location
    }

    bb13: {
        _17 = &mut _2;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _16 = <__A as MapAccess<'_>>::next_value::<u8>(_17) -> [return: bb14, unwind: bb31]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:254:5: 254:8
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u8, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u8>}, val: Value(<ZST>) }
    }

    bb14: {
        _18 = discriminant(_16);         // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _18) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Err(move _20); // scope 6 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb29;                    // scope 2 at no-location
    }

    bb16: {
        unreachable;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb17: {
        _19 = ((_16 as Ok).0: u8);       // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _15 = std::option::Option::<u8>::Some(_19); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _3 = move _15;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb1;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb18: {
        _23 = discriminant(_21);         // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _23) -> [0: bb1, 1: bb19, otherwise: bb20]; // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb19: {
        _24 = move ((_21 as Err).0: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Err(move _24); // scope 9 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb29;                    // scope 2 at no-location
    }

    bb20: {
        unreachable;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb21: {
        _28 = _serde::private::de::missing_field::<'_, u8, <__A as MapAccess<'_>>::Error>(const "prooftype") -> [return: bb24, unwind: bb31]; // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:254:5: 254:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<u8, <__A as MapAccess<'_>>::Error> {_serde::private::de::missing_field::<'_, u8, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        unreachable;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb23: {
        _27 = ((_3 as Some).0: u8);      // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _25 = _27;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb28;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb24: {
        _29 = discriminant(_28);         // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        switchInt(move _29) -> [0: bb27, 1: bb25, otherwise: bb26]; // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb25: {
        _31 = move ((_28 as Err).0: <__A as libchain::chain::_IMPL_DESERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Err(move _31); // scope 13 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb29;                    // scope 1 at no-location
    }

    bb26: {
        unreachable;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }

    bb27: {
        _30 = ((_28 as Ok).0: u8);       // scope 1 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _25 = _30;                       // scope 12 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        goto -> bb28;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb28: {
        _33 = _25;                       // scope 10 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _32 = chain::Config { prooftype: move _33 }; // scope 10 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = Result::<chain::Config, <__A as MapAccess<'_>>::Error>::Ok(move _32); // scope 10 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        drop(_2) -> bb30;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb29: {
        drop(_2) -> bb30;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb30: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:52: 252:52
    }

    bb31 (cleanup): {
        drop(_2) -> bb32;                // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

const FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _1: &[&str; 1];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _2: &[&str; 1];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let _3: [&str; 1];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _4: &[&str; 1];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        StorageLive(_2);                 // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _4 = const _;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _1 = &(*_2);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        StorageDead(_2);                 // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
        StorageDead(_1);                 // scope 0 at cita-chain/core/src/libchain/chain.rs:252:51: 252:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

promoted[0] in FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52

    bb0: {
        _1 = [const "prooftype"];        // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:252:41: 252:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:252:41: 252:52
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::default() -> chain::Config {
    let mut _0: libchain::chain::Config; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:258:25: 258:29

    bb0: {
        _0 = const chain::Config {{ prooftype: 2_u8 }}; // scope 0 at cita-chain/core/src/libchain/chain.rs:259:9: 259:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: chain::Config, val: Value(Scalar(0x02)) }
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:260:6: 260:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new(_1: &str) -> chain::Config {
    debug path => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:262:16: 262:20
    let mut _0: libchain::chain::Config; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:263:13: 263:14
    let mut _2: std::string::String;     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    let _3: usize;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
    let mut _4: std::result::Result<usize, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
    let mut _5: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
    let mut _6: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _7: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _8: std::result::Result<libchain::chain::Config, toml::de::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
    let mut _9: &str;                    // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _10: &str;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _11: &std::string::String;       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    scope 1 {
        debug c => _0;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:263:13: 263:14
    }
    scope 2 {
        debug buffer => _2;              // in scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    }

    bb0: {
        _2 = std::string::String::new() -> bb1; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:39
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:37
                                         // + literal: Const { ty: fn() -> std::string::String {std::string::String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = std::fs::File::open::<&str>(_1) -> [return: bb2, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Result<std::fs::File, std::io::Error> {std::fs::File::open::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _2;                    // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
        _6 = [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30] { buffer: move _7 }; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
                                         // closure
                                         // + def_id: DefId(0:467 ~ core[3f1a]::libchain::chain::{impl#3}::new::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::fs::File,)) -> std::result::Result<usize, std::io::Error>,
                                         //     (&mut std::string::String,),
                                         // ]
        _4 = Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>(move _5, move _6) -> [return: bb3, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:14: 54:22
                                         // + literal: Const { ty: fn(Result<std::fs::File, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]) -> Result<usize, std::io::Error> {Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>(move _4, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> [return: bb4, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:14: 55:28
                                         // + literal: Const { ty: fn(Result<usize, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> usize {Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_2;                       // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _10 = <std::string::String as Deref>::deref(_11) -> [return: bb5, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _8 = parse_config_from_buffer::<'_, chain::Config>(move _9) -> [return: bb6, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Result<chain::Config, toml::de::Error> {parse_config_from_buffer::<'_, chain::Config>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Result::<chain::Config, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>(move _8, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> [return: bb7, unwind: bb9]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 57:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:14: 57:28
                                         // + literal: Const { ty: fn(Result<chain::Config, toml::de::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> chain::Config {Result::<chain::Config, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], val: Value(<ZST>) }
    }

    bb7: {
        drop(_2) -> bb8;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb8: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:265:6: 265:6
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:262:5: 265:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new::{closure#0}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30], _2: std::fs::File) -> Result<usize, std::io::Error> {
    debug f => _2;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:24: 54:29
    debug buffer => (*(_1.0: &mut std::string::String)); // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:17: 52:23
    let mut _0: std::result::Result<usize, std::io::Error>; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:31
    let mut _3: &mut std::fs::File;      // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
    let mut _4: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60

    bb0: {
        _3 = &mut _2;                    // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
        _4 = deref_copy (_1.0: &mut std::string::String); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:48: 54:59
        _0 = <std::fs::File as std::io::Read>::read_to_string(move _3, _4) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:33: 54:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fs::File, &'b mut std::string::String) -> Result<usize, std::io::Error> {<std::fs::File as std::io::Read>::read_to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb2: {
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:60: 54:60
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new::{closure#1}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], _2: std::io::Error) -> usize {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:30: 55:33
    let mut _0: usize;                   // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:35: 55:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let _10: &std::io::Error;            // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Config::new::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:82
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _1 = [const "Error while loading config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new::{closure#2}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], _2: toml::de::Error) -> chain::Config {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:30: 57:33
    let mut _0: libchain::chain::Config; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:35: 57:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let _10: &toml::de::Error;           // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Config::new::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b toml::de::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:82
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:257:1: 257:12>::new::{closure#2}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _1 = [const "Error while parsing config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:268:1: 268:34>::blooms_at(_1: &chain::Chain, _2: &GroupPosition) -> std::option::Option<BloomGroup> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:269:18: 269:23
    debug position => _2;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:269:25: 269:33
    let mut _0: std::option::Option<types::bloomchain::group::BloomGroup>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:269:59: 269:77
    let _3: types::db_indexes::LogGroupPosition; // in scope 0 at cita-chain/core/src/libchain/chain.rs:270:13: 270:14
    let mut _4: types::bloomchain::group::GroupPosition; // in scope 0 at cita-chain/core/src/libchain/chain.rs:270:40: 270:56
    let mut _5: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:271:9: 273:29
    let mut _6: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
    let mut _7: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
    let _8: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
    let mut _9: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
    let mut _10: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:18: 272:52
    let mut _11: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
    let _12: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
    let _13: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
    let _14: std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:55: 272:68
    let mut _15: &types::db_indexes::LogGroupPosition; // in scope 0 at cita-chain/core/src/libchain/chain.rs:272:55: 272:68
    let mut _16: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:273:24: 273:28
    scope 1 {
        debug p => _3;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:270:13: 270:14
    }

    bb0: {
        _4 = <GroupPosition as Clone>::clone(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:270:40: 270:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:270:49: 270:54
                                         // + literal: Const { ty: for<'a> fn(&'a GroupPosition) -> GroupPosition {<GroupPosition as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <LogGroupPosition as From<GroupPosition>>::from(move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:270:17: 270:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:270:17: 270:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(GroupPosition) -> LogGroupPosition {<LogGroupPosition as From<GroupPosition>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
        _8 = <Arc<RocksDB> as Deref>::deref(move _9) -> bb3; // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:271:9: 272:69
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
        _10 = const std::option::Option::<DataCategory>::Some(Extra); // scope 1 at cita-chain/core/src/libchain/chain.rs:272:18: 272:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _15 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:272:55: 272:68
        _14 = <LogGroupPosition as DBIndex>::get_index(move _15) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:272:55: 272:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:272:57: 272:66
                                         // + literal: Const { ty: for<'a> fn(&'a LogGroupPosition) -> Vec<u8> {<LogGroupPosition as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &_14;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
        _12 = <Vec<u8> as Deref>::deref(_13) -> [return: bb5, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:272:54: 272:68
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _12;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:272:54: 272:68
        _6 = <RocksDB as Database>::get(move _7, move _10, move _11) -> [return: bb6, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 272:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:272:14: 272:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:273:24: 273:28
        _5 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _6, move _16) -> [return: bb7, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 273:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:273:14: 273:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = std::option::Option::<Vec<u8>>::map::<BloomGroup, [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26]>(move _5, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26]) -> [return: bb8, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:271:9: 277:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:274:14: 274:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26]) -> std::option::Option<BloomGroup> {std::option::Option::<Vec<u8>>::map::<BloomGroup, [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26], val: Value(<ZST>) }
    }

    bb8: {
        drop(_14) -> bb9;                // scope 0 at cita-chain/core/src/libchain/chain.rs:278:5: 278:6
    }

    bb9: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:278:6: 278:6
    }

    bb10 (cleanup): {
        drop(_14) -> bb11;               // scope 0 at cita-chain/core/src/libchain/chain.rs:278:5: 278:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:269:5: 278:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:268:1: 268:34>::blooms_at::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:274:18: 274:26], _2: Vec<u8>) -> BloomGroup {
    debug blooms => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:274:19: 274:25
    let mut _0: types::bloomchain::group::BloomGroup; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:274:27: 274:27
    let _3: types::log_blooms::LogBloomGroup; // in scope 0 at cita-chain/core/src/libchain/chain.rs:275:21: 275:22
    let mut _4: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
    let _5: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
    let _6: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
    let mut _7: types::log_blooms::LogBloomGroup; // in scope 0 at cita-chain/core/src/libchain/chain.rs:276:17: 276:18
    scope 1 {
        debug g => _3;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:275:21: 275:22
    }

    bb0: {
        _6 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
        _5 = <Vec<u8> as Deref>::deref(_6) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:275:52: 275:59
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:275:52: 275:59
        _3 = rlp::decode::<LogBloomGroup>(move _4) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:275:40: 275:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:275:40: 275:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> LogBloomGroup {rlp::decode::<LogBloomGroup>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = move _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:276:17: 276:18
        _0 = <LogBloomGroup as Into<BloomGroup>>::into(move _7) -> [return: bb3, unwind: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:276:17: 276:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:276:19: 276:23
                                         // + literal: Const { ty: fn(LogBloomGroup) -> BloomGroup {<LogBloomGroup as Into<BloomGroup>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:277:13: 277:14
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:277:14: 277:14
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:277:13: 277:14
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:274:18: 277:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:281:10: 281:15>::fmt(_1: &BlockInQueue, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let mut _3: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let _4: &types::block::OpenBlock;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    let _5: &str;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    let _7: &&types::block::OpenBlock;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    let _8: &types::block::OpenBlock;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
    let _9: &libproto::Proof;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    let _10: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    let _13: &&libproto::Proof;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    let _14: &(types::block::OpenBlock, std::option::Option<libproto::Proof>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    let _15: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    let _17: &&(types::block::OpenBlock, std::option::Option<libproto::Proof>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
        debug __self_1 => _9;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    }
    scope 3 {
        debug __self_0 => _14;           // in scope 3 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    }

    bb1: {
        _14 = &(((*_1) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
        _15 = const "SyncBlock";         // scope 3 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = &_14;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _15, move _16) -> bb5; // scope 3 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
    }

    bb3: {
        _4 = &(((*_1) as Proposal).0: types::block::OpenBlock); // scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
        _5 = const "Proposal";           // scope 1 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb5; // scope 1 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &(((*_1) as ConsensusBlock).0: types::block::OpenBlock); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
        _9 = &(((*_1) as ConsensusBlock).1: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
        _10 = const "ConsensusBlock";    // scope 2 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
        _13 = &_9;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _10, move _11, move _12) -> bb5; // scope 2 at cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:281:10: 281:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:281:15: 281:15
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:281:17: 281:22>::clone(_1: &BlockInQueue) -> BlockInQueue {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    let mut _2: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    let _3: &types::block::OpenBlock;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    let mut _4: types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    let _5: &types::block::OpenBlock;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
    let _6: &libproto::Proof;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    let mut _7: types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
    let mut _8: libproto::Proof;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    let _9: &(types::block::OpenBlock, std::option::Option<libproto::Proof>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    let mut _10: (types::block::OpenBlock, std::option::Option<libproto::Proof>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
    }
    scope 2 {
        debug __self_0 => _5;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
        debug __self_1 => _6;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
    }
    scope 3 {
        debug __self_0 => _9;            // in scope 3 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    }

    bb1: {
        _9 = &(((*_1) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
        _10 = <(OpenBlock, std::option::Option<libproto::Proof>) as Clone>::clone(_9) -> bb8; // scope 3 at cita-chain/core/src/libchain/chain.rs:285:15: 285:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:285:15: 285:46
                                         // + literal: Const { ty: for<'a> fn(&'a (OpenBlock, std::option::Option<libproto::Proof>)) -> (OpenBlock, std::option::Option<libproto::Proof>) {<(OpenBlock, std::option::Option<libproto::Proof>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    }

    bb3: {
        _3 = &(((*_1) as Proposal).0: types::block::OpenBlock); // scope 0 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
        _4 = <OpenBlock as Clone>::clone(_3) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:283:14: 283:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:283:14: 283:23
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> OpenBlock {<OpenBlock as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = BlockInQueue::Proposal(move _4); // scope 1 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
        goto -> bb9;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:281:21: 281:22
    }

    bb5: {
        _5 = &(((*_1) as ConsensusBlock).0: types::block::OpenBlock); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
        _6 = &(((*_1) as ConsensusBlock).1: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
        _7 = <OpenBlock as Clone>::clone(_5) -> bb6; // scope 2 at cita-chain/core/src/libchain/chain.rs:284:20: 284:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:284:20: 284:29
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> OpenBlock {<OpenBlock as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = <libproto::Proof as Clone>::clone(_6) -> [return: bb7, unwind: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:284:31: 284:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:284:31: 284:41
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = BlockInQueue::ConsensusBlock(move _7, move _8); // scope 2 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
        goto -> bb9;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:281:21: 281:22
    }

    bb8: {
        _0 = BlockInQueue::SyncBlock(move _10); // scope 3 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
        goto -> bb9;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:281:21: 281:22
    }

    bb9: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:281:22: 281:22
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 2 at cita-chain/core/src/libchain/chain.rs:281:21: 281:22
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:281:17: 281:22
    }
}

fn get_chain(_1: &RocksDB) -> std::option::Option<Header> {
    debug db => _1;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:318:18: 318:20
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:318:35: 318:49
    let _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:319:9: 319:12
    let mut _3: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:319:15: 324:25
    let mut _4: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:319:15: 323:10
    let mut _5: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:321:13: 321:47
    let mut _6: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
    let _7: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
    let _8: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
    let _9: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
    let mut _10: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
    let _11: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
    let mut _12: &std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
    let _13: std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
    let mut _14: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:324:20: 324:24
    let mut _15: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:327:12: 327:22
    let mut _18: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _20: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _22: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _23: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _24: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _25: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _26: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _27: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:53: 328:57
    let _32: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:53: 328:57
    let mut _34: &types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:329:24: 329:58
    let _35: types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:329:24: 329:46
    let mut _37: std::option::Option<std::option::Option<types::header::Header>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:330:22: 343:15
    let mut _38: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:330:22: 332:29
    let mut _39: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:330:22: 331:64
    let mut _40: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:331:18: 331:52
    let mut _41: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
    let _42: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
    let _43: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
    let mut _44: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:332:24: 332:28
    let mut _45: [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
    let mut _46: &&cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
    let mut _50: &types::db_indexes::CurrentHash; // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
    scope 1 {
        debug res => _2;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:319:9: 319:12
        scope 2 {
            debug hash => _16;           // in scope 2 at cita-chain/core/src/libchain/chain.rs:327:17: 327:21
            let _16: cita_types::H256;   // in scope 2 at cita-chain/core/src/libchain/chain.rs:327:17: 327:21
            let _17: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _33: std::vec::Vec<u8>;  // in scope 2 at cita-chain/core/src/libchain/chain.rs:329:13: 329:21
            scope 3 {
                debug lvl => _17;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _47: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _48: &[&str; 1]; // in scope 3 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
                let mut _49: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug hash_key => _33;   // in scope 4 at cita-chain/core/src/libchain/chain.rs:329:13: 329:21
                let _36: std::option::Option<types::header::Header>; // in scope 4 at cita-chain/core/src/libchain/chain.rs:330:13: 330:19
                scope 5 {
                    debug header => _36; // in scope 5 at cita-chain/core/src/libchain/chain.rs:330:13: 330:19
                }
            }
        }
    }

    bb0: {
        _5 = const std::option::Option::<DataCategory>::Some(Extra); // scope 0 at cita-chain/core/src/libchain/chain.rs:321:13: 321:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _50 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:322:14: 322:37
                                         // + literal: Const { ty: &CurrentHash, val: Unevaluated(get_chain, [], Some(promoted[3])) }
        _13 = <CurrentHash as DBIndex>::get_index(_50) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:322:26: 322:35
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentHash) -> Vec<u8> {<CurrentHash as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
        _11 = <Vec<u8> as Deref>::deref(move _12) -> [return: bb2, unwind: bb31]; // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:322:14: 322:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _11;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
        _9 = slice::<impl [u8]>::to_vec(move _10) -> [return: bb3, unwind: bb31]; // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:322:38: 322:44
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_9;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
        _7 = <Vec<u8> as Deref>::deref(_8) -> [return: bb4, unwind: bb30]; // scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:322:13: 322:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = _7;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:322:13: 322:46
        _4 = <RocksDB as Database>::get(_1, move _5, move _6) -> [return: bb5, unwind: bb30]; // scope 0 at cita-chain/core/src/libchain/chain.rs:319:15: 323:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:320:10: 320:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = std::option::Option::<Vec<u8>>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:324:20: 324:24
        _3 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _4, move _14) -> [return: bb6, unwind: bb30]; // scope 0 at cita-chain/core/src/libchain/chain.rs:319:15: 324:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:324:10: 324:19
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb6: {
        _2 = std::option::Option::<Vec<u8>>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17]) -> [return: bb7, unwind: bb30]; // scope 0 at cita-chain/core/src/libchain/chain.rs:319:15: 325:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:325:10: 325:13
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17]) -> std::option::Option<H256> {std::option::Option::<Vec<u8>>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17], val: Value(<ZST>) }
    }

    bb7: {
        drop(_9) -> [return: bb8, unwind: bb31]; // scope 0 at cita-chain/core/src/libchain/chain.rs:325:37: 325:38
    }

    bb8: {
        drop(_13) -> bb9;                // scope 0 at cita-chain/core/src/libchain/chain.rs:325:37: 325:38
    }

    bb9: {
        _15 = discriminant(_2);          // scope 2 at cita-chain/core/src/libchain/chain.rs:327:12: 327:22
        switchInt(move _15) -> [1: bb10, otherwise: bb27]; // scope 2 at cita-chain/core/src/libchain/chain.rs:327:12: 327:22
    }

    bb10: {
        _16 = ((_2 as Some).0: cita_types::H256); // scope 2 at cita-chain/core/src/libchain/chain.rs:327:17: 327:21
        _17 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _20 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _49 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(get_chain, [], Some(promoted[2])) }
        _19 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _20, _49) -> bb14; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb13;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        _22 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _24 = log::max_level() -> bb15;  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _18) -> [0: bb20, otherwise: bb17]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        switchInt(move _19) -> [0: bb11, otherwise: bb12]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        _23 = &_24;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _21 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _22, move _23) -> bb16; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = move _21;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb13;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb17: {
        _48 = const _;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:328:16: 328:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(get_chain, [], Some(promoted[1])) }
        _27 = _48 as &[&str] (Pointer(Unsize)); // scope 3 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
        _32 = &_16;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:328:53: 328:57
        _31 = core::fmt::ArgumentV1::<'_>::new_debug::<H256>(_32) -> bb18; // scope 3 at cita-chain/core/src/libchain/chain.rs:328:53: 328:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:328:53: 328:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<H256>}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = [move _31];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = &_30;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _28 = _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> bb19; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb19: {
        _47 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(get_chain, [], Some(promoted[0])) }
        _25 = log::__private_api_log(move _26, _17, _47) -> bb20; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb20: {
        _35 = Hash2BlockNumber(_16);     // scope 2 at cita-chain/core/src/libchain/chain.rs:329:24: 329:46
        _34 = &_35;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:329:24: 329:58
        _33 = <Hash2BlockNumber as DBIndex>::get_index(move _34) -> bb21; // scope 2 at cita-chain/core/src/libchain/chain.rs:329:24: 329:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:329:47: 329:56
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2BlockNumber) -> Vec<u8> {<Hash2BlockNumber as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb21: {
        _40 = const std::option::Option::<DataCategory>::Some(Extra); // scope 4 at cita-chain/core/src/libchain/chain.rs:331:18: 331:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _43 = &_33;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
        _42 = <Vec<u8> as Deref>::deref(_43) -> [return: bb22, unwind: bb29]; // scope 4 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:331:54: 331:63
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb22: {
        _41 = _42;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:331:54: 331:63
        _39 = <RocksDB as Database>::get(_1, move _40, move _41) -> [return: bb23, unwind: bb29]; // scope 4 at cita-chain/core/src/libchain/chain.rs:330:22: 331:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:331:14: 331:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb23: {
        _44 = std::option::Option::<Vec<u8>>::None; // scope 4 at cita-chain/core/src/libchain/chain.rs:332:24: 332:28
        _38 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _39, move _44) -> [return: bb24, unwind: bb29]; // scope 4 at cita-chain/core/src/libchain/chain.rs:330:22: 332:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:332:14: 332:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb24: {
        _46 = &_1;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
        _45 = [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21] { db: move _46 }; // scope 4 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
                                         // closure
                                         // + def_id: DefId(0:206 ~ core[3f1a]::libchain::chain::get_chain::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::vec::Vec<u8>,)) -> std::option::Option<types::header::Header>,
                                         //     (&&cita_db::RocksDB,),
                                         // ]
        _37 = std::option::Option::<Vec<u8>>::map::<std::option::Option<Header>, [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21]>(move _38, move _45) -> [return: bb25, unwind: bb29]; // scope 4 at cita-chain/core/src/libchain/chain.rs:330:22: 343:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:333:14: 333:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21]) -> std::option::Option<std::option::Option<Header>> {std::option::Option::<Vec<u8>>::map::<std::option::Option<Header>, [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21]>}, val: Value(<ZST>) }
    }

    bb25: {
        _36 = std::option::Option::<std::option::Option<Header>>::and_then::<Header, [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26]>(move _37, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26]) -> [return: bb26, unwind: bb29]; // scope 4 at cita-chain/core/src/libchain/chain.rs:330:22: 344:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:344:14: 344:22
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<Header>>, [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26]) -> std::option::Option<Header> {std::option::Option::<std::option::Option<Header>>::and_then::<Header, [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26], val: Value(<ZST>) }
    }

    bb26: {
        _0 = move _36;                   // scope 5 at cita-chain/core/src/libchain/chain.rs:345:16: 345:22
        drop(_33) -> bb28;               // scope 2 at cita-chain/core/src/libchain/chain.rs:346:5: 346:6
    }

    bb27: {
        _0 = std::option::Option::<Header>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:347:5: 347:9
        goto -> bb28;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:348:2: 348:2
    }

    bb28: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:348:2: 348:2
    }

    bb29 (cleanup): {
        drop(_33) -> bb32;               // scope 2 at cita-chain/core/src/libchain/chain.rs:346:5: 346:6
    }

    bb30 (cleanup): {
        drop(_9) -> bb31;                // scope 0 at cita-chain/core/src/libchain/chain.rs:325:37: 325:38
    }

    bb31 (cleanup): {
        drop(_13) -> bb32;               // scope 0 at cita-chain/core/src/libchain/chain.rs:325:37: 325:38
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:318:1: 348:2
    }
}

promoted[0] in get_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:9: 328:58
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:9: 328:58

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:328:9: 328:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:328:9: 328:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:328:9: 328:58
        _1 = (move _2, move _4, move _6, const 328_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in get_chain: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51

    bb0: {
        _1 = [const "Get block height from hash : "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:328:16: 328:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:328:16: 328:51
    }
}

promoted[2] in get_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in get_chain: &CurrentHash = {
    let mut _0: &types::db_indexes::CurrentHash; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
    let mut _1: types::db_indexes::CurrentHash; // in scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:25

    bb0: {
        _1 = CurrentHash;                // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:25
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:322:14: 322:37
    }
}

fn get_chain::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:325:14: 325:17], _2: Vec<u8>) -> H256 {
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:325:15: 325:16
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:325:18: 325:18
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:325:33: 325:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:325:33: 325:35
        _0 = rlp::decode::<H256>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:325:18: 325:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:325:18: 325:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H256 {rlp::decode::<H256>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:325:35: 325:36
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:325:36: 325:36
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:325:35: 325:36
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:325:14: 325:36
    }
}

fn get_chain::{closure#1}(_1: [closure@cita-chain/core/src/libchain/chain.rs:333:18: 333:21], _2: Vec<u8>) -> std::option::Option<Header> {
    debug n => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:333:19: 333:20
    debug db => (*(_1.0: &&cita_db::RocksDB)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:318:18: 318:20
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:333:22: 333:22
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:334:21: 334:27
    let mut _4: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
    let _5: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
    let _6: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _10: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _11: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _12: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _13: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _14: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _15: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:56: 335:62
    let _22: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:56: 335:62
    let mut _24: &types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:336:34: 336:72
    let _25: types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:336:34: 336:60
    let mut _26: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:336:53: 336:59
    let mut _27: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:17: 338:37
    let mut _28: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:17: 337:74
    let mut _29: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:24: 337:60
    let mut _30: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
    let _31: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
    let _32: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
    let mut _33: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:338:32: 338:36
    let mut _37: &&cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
    let mut _38: &cita_db::RocksDB;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
    scope 1 {
        debug height => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:334:21: 334:27
        let _7: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _23: std::vec::Vec<u8>;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:336:21: 336:31
        scope 2 {
            debug lvl => _7;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _34: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _35: &[&str; 1];     // in scope 2 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
            let mut _36: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug height_key => _23;     // in scope 3 at cita-chain/core/src/libchain/chain.rs:336:21: 336:31
        }
    }

    bb0: {
        _6 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
        _5 = <Vec<u8> as Deref>::deref(_6) -> [return: bb1, unwind: bb21]; // scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:334:52: 334:54
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:334:52: 334:54
        _3 = rlp::decode::<u64>(move _4) -> [return: bb2, unwind: bb21]; // scope 0 at cita-chain/core/src/libchain/chain.rs:334:30: 334:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:334:30: 334:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u64 {rlp::decode::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = log::Level::Trace;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _10 = &_7;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _36 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(get_chain::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _9 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _10, _36) -> [return: bb6, unwind: bb21]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        _12 = &_7;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _14 = log::max_level() -> [return: bb7, unwind: bb21]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _8) -> [0: bb12, otherwise: bb9]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _13 = &_14;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _11 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _12, move _13) -> [return: bb8, unwind: bb21]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb8: {
        _8 = move _11;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb5;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _35 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:335:24: 335:54
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(get_chain::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _17 = _35 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
        _22 = &_3;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:335:56: 335:62
        _21 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_22) -> [return: bb10, unwind: bb21]; // scope 2 at cita-chain/core/src/libchain/chain.rs:335:56: 335:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:335:56: 335:62
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = [move _21];                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = &_20;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _18 = _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb11, unwind: bb21]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _34 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(get_chain::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _15 = log::__private_api_log(move _16, _7, _34) -> [return: bb23, unwind: bb21]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = _3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:336:53: 336:59
        _25 = BlockNumber2Header(move _26); // scope 1 at cita-chain/core/src/libchain/chain.rs:336:34: 336:60
        _24 = &_25;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:336:34: 336:72
        _23 = <BlockNumber2Header as DBIndex>::get_index(move _24) -> [return: bb13, unwind: bb21]; // scope 1 at cita-chain/core/src/libchain/chain.rs:336:34: 336:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:336:61: 336:70
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Header) -> Vec<u8> {<BlockNumber2Header as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb13: {
        _37 = deref_copy (_1.0: &&cita_db::RocksDB); // scope 3 at cita-chain/core/src/libchain/chain.rs:337:17: 337:74
        _38 = deref_copy (*_37);         // scope 3 at cita-chain/core/src/libchain/chain.rs:337:17: 337:74
        _29 = const std::option::Option::<DataCategory>::Some(Headers); // scope 3 at cita-chain/core/src/libchain/chain.rs:337:24: 337:60
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x01)) }
        _32 = &_23;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
        _31 = <Vec<u8> as Deref>::deref(_32) -> [return: bb14, unwind: bb20]; // scope 3 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:337:62: 337:73
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _30 = _31;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:337:62: 337:73
        _28 = <RocksDB as Database>::get(_38, move _29, move _30) -> [return: bb15, unwind: bb20]; // scope 3 at cita-chain/core/src/libchain/chain.rs:337:17: 337:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:337:20: 337:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb15: {
        _33 = std::option::Option::<Vec<u8>>::None; // scope 3 at cita-chain/core/src/libchain/chain.rs:338:32: 338:36
        _27 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _28, move _33) -> [return: bb16, unwind: bb20]; // scope 3 at cita-chain/core/src/libchain/chain.rs:337:17: 338:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:338:22: 338:31
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = std::option::Option::<Vec<u8>>::map::<Header, [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31]>(move _27, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31]) -> [return: bb17, unwind: bb20]; // scope 3 at cita-chain/core/src/libchain/chain.rs:337:17: 342:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:339:22: 339:25
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31]) -> std::option::Option<Header> {std::option::Option::<Vec<u8>>::map::<Header, [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31], val: Value(<ZST>) }
    }

    bb17: {
        drop(_23) -> [return: bb18, unwind: bb21]; // scope 1 at cita-chain/core/src/libchain/chain.rs:343:13: 343:14
    }

    bb18: {
        drop(_2) -> bb19;                // scope 0 at cita-chain/core/src/libchain/chain.rs:343:13: 343:14
    }

    bb19: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:343:14: 343:14
    }

    bb20 (cleanup): {
        drop(_23) -> bb21;               // scope 1 at cita-chain/core/src/libchain/chain.rs:343:13: 343:14
    }

    bb21 (cleanup): {
        drop(_2) -> bb22;                // scope 0 at cita-chain/core/src/libchain/chain.rs:343:13: 343:14
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:333:18: 343:14
    }

    bb23: {
        goto -> bb12;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in get_chain::{closure#1}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:17: 335:63
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:17: 335:63

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:335:17: 335:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:335:17: 335:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:335:17: 335:63
        _1 = (move _2, move _4, move _6, const 335_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in get_chain::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54

    bb0: {
        _1 = [const "Get chain from height : "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:335:24: 335:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:335:24: 335:54
    }
}

promoted[2] in get_chain::{closure#1}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn get_chain::{closure#1}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:339:26: 339:31], _2: Vec<u8>) -> Header {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:339:27: 339:30
    let mut _0: types::header::Header;   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:340:29: 340:35
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
    scope 1 {
        debug header => _0;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:340:29: 340:35
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:340:58: 340:62
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:340:58: 340:62
        _0 = rlp::decode::<Header>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:340:46: 340:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:340:46: 340:57
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Header {rlp::decode::<Header>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:342:21: 342:22
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:342:22: 342:22
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:342:21: 342:22
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:339:26: 342:22
    }
}

fn get_chain::{closure#2}(_1: [closure@cita-chain/core/src/libchain/chain.rs:344:23: 344:26], _2: std::option::Option<Header>) -> std::option::Option<Header> {
    debug x => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:344:24: 344:25
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:344:27: 344:27

    bb0: {
        _0 = move _2;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:344:27: 344:28
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:344:28: 344:28
    }
}

fn get_chain_body_height(_1: &RocksDB) -> std::option::Option<u64> {
    debug db => _1;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:350:30: 350:32
    let mut _0: std::option::Option<u64>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:350:47: 350:66
    let mut _2: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:351:5: 355:21
    let mut _3: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:351:5: 354:6
    let mut _4: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:352:9: 352:43
    let mut _5: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
    let _6: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
    let _7: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
    let _8: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
    let mut _9: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:355:16: 355:20
    let mut _10: &types::db_indexes::CurrentHeight; // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35

    bb0: {
        _4 = const std::option::Option::<DataCategory>::Some(Extra); // scope 0 at cita-chain/core/src/libchain/chain.rs:352:9: 352:43
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _10 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:353:10: 353:35
                                         // + literal: Const { ty: &CurrentHeight, val: Unevaluated(get_chain_body_height, [], Some(promoted[0])) }
        _8 = <CurrentHeight as DBIndex>::get_index(_10) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:353:24: 353:33
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentHeight) -> Vec<u8> {<CurrentHeight as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
        _6 = <Vec<u8> as Deref>::deref(_7) -> [return: bb2, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:353:9: 353:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:353:9: 353:35
        _3 = <RocksDB as Database>::get(_1, move _4, move _5) -> [return: bb3, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:351:5: 354:6
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:351:8: 351:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = std::option::Option::<Vec<u8>>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:355:16: 355:20
        _2 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _3, move _9) -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:351:5: 355:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:355:6: 355:15
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = std::option::Option::<Vec<u8>>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15]>(move _2, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15]) -> [return: bb5, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:351:5: 359:7
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:356:6: 356:9
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15]) -> std::option::Option<u64> {std::option::Option::<Vec<u8>>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15], val: Value(<ZST>) }
    }

    bb5: {
        drop(_8) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:360:1: 360:2
    }

    bb6: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:360:2: 360:2
    }

    bb7 (cleanup): {
        drop(_8) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:360:1: 360:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:350:1: 360:2
    }
}

promoted[0] in get_chain_body_height: &CurrentHeight = {
    let mut _0: &types::db_indexes::CurrentHeight; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
    let mut _1: types::db_indexes::CurrentHeight; // in scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:23

    bb0: {
        _1 = CurrentHeight;              // scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:23
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:353:10: 353:35
    }
}

fn get_chain_body_height::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:356:10: 356:15], _2: Vec<u8>) -> u64 {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:356:11: 356:14
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:357:13: 357:25
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
    scope 1 {
        debug block_number => _0;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:357:13: 357:25
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:357:53: 357:57
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:357:53: 357:57
        _0 = rlp::decode::<u64>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:357:41: 357:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:357:41: 357:52
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u64 {rlp::decode::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:359:5: 359:6
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:359:6: 359:6
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:359:5: 359:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:356:10: 359:6
    }
}

fn contract_address(_1: &H160, _2: &U256) -> H160 {
    debug address => _1;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:362:25: 362:32
    debug nonce => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:362:44: 362:49
    let mut _0: cita_types::H160;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:362:61: 362:68
    let mut _3: rlp::RlpStream;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:363:9: 363:19
    let _4: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:364:5: 364:27
    let mut _5: &mut rlp::RlpStream;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:364:5: 364:27
    let _6: &mut rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:365:5: 365:25
    let mut _7: &mut rlp::RlpStream;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:365:5: 365:25
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:366:16: 366:41
    let mut _9: &std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:366:16: 366:41
    let _10: std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:366:16: 366:28
    let mut _11: rlp::RlpStream;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:366:16: 366:22
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
    scope 1 {
        debug stream => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:363:9: 363:19
    }

    bb0: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:363:9: 363:19
        _12 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:363:22: 363:44
        _3 = RlpStream::new_list(const 2_usize) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:363:22: 363:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:363:22: 363:41
                                         // + literal: Const { ty: fn(usize) -> RlpStream {RlpStream::new_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:364:5: 364:27
        _4 = RlpStream::append::<H160>(move _5, _1) -> [return: bb2, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:364:5: 364:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:364:12: 364:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b H160) -> &'a mut RlpStream {RlpStream::append::<H160>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:365:5: 365:25
        _6 = RlpStream::append::<U256>(move _7, _2) -> [return: bb3, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:365:5: 365:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:365:12: 365:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut RlpStream, &'b U256) -> &'a mut RlpStream {RlpStream::append::<U256>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:366:16: 366:22
        _11 = move _3;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:366:16: 366:22
        _10 = RlpStream::out(move _11) -> [return: bb4, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:366:16: 366:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:366:23: 366:26
                                         // + literal: Const { ty: fn(RlpStream) -> Vec<u8> {RlpStream::out}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:366:16: 366:41
        _8 = <Vec<u8> as Hashable>::crypt_hash(move _9) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:366:16: 366:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:366:29: 366:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = <H160 as From<H256>>::from(move _8) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:366:5: 366:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:366:5: 366:15
                                         // + literal: Const { ty: fn(H256) -> H160 {<H160 as From<H256>>::from}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
        drop(_10) -> bb7;                // scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:367:2: 367:2
    }

    bb8 (cleanup): {
        drop(_10) -> bb9;                // scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:362:1: 367:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:367:1: 367:2
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain(_1: Arc<RocksDB>, _2: chain::Config) -> chain::Chain {
    debug db => _1;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:370:23: 370:25
    debug chain_config => _2;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:370:41: 370:53
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:37: 371:49
    let _18: &libchain::chain::Config;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:37: 371:49
    let _19: types::bloomchain::Config;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:373:13: 373:26
    let mut _21: std::option::Option<types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:378:22: 378:37
    let _22: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:378:32: 378:36
    let _23: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:378:33: 378:36
    let mut _24: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:378:34: 378:36
    let mut _26: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _27: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _28: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _29: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _30: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _31: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _32: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _33: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _34: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _35: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
    let mut _36: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _37: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _38: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _39: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:44: 379:50
    let _40: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:44: 379:50
    let mut _42: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:380:47: 380:71
    let mut _43: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
    let mut _44: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
    let _45: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
    let mut _46: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
    let mut _48: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:382:31: 382:58
    let _49: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:382:53: 382:57
    let _50: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:382:54: 382:57
    let mut _51: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:382:55: 382:57
    let mut _52: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:382:16: 382:28
    let _54: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:383:13: 383:70
    let mut _55: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:383:13: 383:70
    let mut _56: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:383:36: 383:51
    let mut _57: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:383:53: 383:69
    let mut _59: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _60: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _61: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _62: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _63: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _64: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _65: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _66: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _67: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _68: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
    let mut _69: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _70: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _71: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _72: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:388:13: 388:29
    let _73: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:388:13: 388:29
    let mut _74: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:388:31: 388:45
    let _75: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:388:31: 388:45
    let mut _76: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:393:29: 393:56
    let mut _77: types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:393:41: 393:55
    let mut _78: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:393:41: 393:55
    let mut _79: std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:394:13: 394:27
    let mut _80: std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:395:13: 395:29
    let mut _81: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:396:24: 396:52
    let mut _82: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:396:36: 396:51
    let mut _83: std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:397:13: 397:15
    let mut _84: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:398:23: 398:60
    let mut _85: lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:398:32: 398:59
    let mut _86: filters::filterdb::FilterDB; // in scope 0 at cita-chain/core/src/libchain/chain.rs:398:43: 398:58
    let mut _87: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:399:20: 399:43
    let mut _88: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:399:32: 399:42
    let mut _89: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:400:25: 400:48
    let mut _90: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:400:37: 400:47
    let mut _91: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:403:29: 403:46
    let mut _92: std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:404:32: 404:76
    let mut _93: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:405:34: 405:74
    let mut _94: libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:405:46: 405:73
    let mut _95: std::sync::atomic::AtomicBool; // in scope 0 at cita-chain/core/src/libchain/chain.rs:406:26: 406:48
    let mut _96: u8;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:407:24: 407:46
    let mut _97: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:408:24: 408:52
    let mut _98: std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:408:36: 408:51
    let mut _99: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, bool>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:409:26: 409:44
    let mut _100: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:410:28: 410:45
    let mut _101: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:410:40: 410:44
    let mut _102: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:411:22: 411:39
    let mut _103: std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:411:34: 411:38
    let mut _104: std::option::Option<libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:414:36: 414:62
    let mut _105: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:414:36: 414:62
    let mut _106: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:414:16: 414:33
    let mut _108: std::option::Option<libproto::ProofType>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:415:43: 415:70
    let mut _109: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:415:43: 415:70
    let mut _110: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:415:25: 415:39
    let mut _111: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:415:20: 415:40
    let mut _113: libproto::Proof;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:416:44: 416:63
    let mut _114: &libproto::Proof;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:416:44: 416:63
    let _115: std::option::Option<libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
    let mut _116: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
    let mut _117: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
    let mut _118: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
    let mut _119: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 419:29
    let mut _120: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:417:17: 419:29
    let mut _121: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:420:29: 420:48
    let mut _122: usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:420:29: 420:41
    let mut _123: libproto::Proof;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:420:50: 420:61
    let mut _133: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    let mut _134: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    let mut _135: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    let mut _136: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _130: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _131: &[&str; 1];        // in scope 1 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
        let mut _132: &log::LevelFilter; // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug blooms_config => _19;      // in scope 2 at cita-chain/core/src/libchain/chain.rs:373:13: 373:26
        let _20: types::header::Header;  // in scope 2 at cita-chain/core/src/libchain/chain.rs:378:13: 378:19
        scope 3 {
            debug header => _20;         // in scope 3 at cita-chain/core/src/libchain/chain.rs:378:13: 378:19
            let _25: log::Level;         // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _41: std::sync::atomic::AtomicUsize; // in scope 3 at cita-chain/core/src/libchain/chain.rs:380:13: 380:27
            scope 4 {
                debug lvl => _25;        // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _127: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _128: &[&str; 1]; // in scope 4 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
                let mut _129: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 5 {
                debug current_height => _41; // in scope 5 at cita-chain/core/src/libchain/chain.rs:380:13: 380:27
                let _47: std::sync::atomic::AtomicUsize; // in scope 5 at cita-chain/core/src/libchain/chain.rs:381:13: 381:29
                scope 6 {
                    debug max_store_height => _47; // in scope 6 at cita-chain/core/src/libchain/chain.rs:381:13: 381:29
                    let mut _0: libchain::chain::Chain; // return place in scope 6 at cita-chain/core/src/libchain/chain.rs:391:13: 391:18
                    let _58: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    scope 7 {
                        debug height => _53; // in scope 7 at cita-chain/core/src/libchain/chain.rs:382:21: 382:27
                        let _53: u64;    // in scope 7 at cita-chain/core/src/libchain/chain.rs:382:21: 382:27
                    }
                    scope 8 {
                        debug lvl => _58; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _124: &(&str, &str, &str, u32); // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _125: &[&str; 2]; // in scope 8 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                        let mut _126: &log::LevelFilter; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 9 {
                        debug chain => _0; // in scope 9 at cita-chain/core/src/libchain/chain.rs:391:13: 391:18
                        scope 10 {
                            debug proto_proof => _107; // in scope 10 at cita-chain/core/src/libchain/chain.rs:414:21: 414:32
                            let _107: libproto::Proof; // in scope 10 at cita-chain/core/src/libchain/chain.rs:414:21: 414:32
                            scope 11 {
                                let _112: proof::BftProof; // in scope 11 at cita-chain/core/src/libchain/chain.rs:416:21: 416:26
                                scope 12 {
                                    debug proof => _112; // in scope 12 at cita-chain/core/src/libchain/chain.rs:416:21: 416:26
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _134 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _133 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _135 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _135 = const true;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _3 = log::Level::Info;           // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _132 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[8])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _132) -> [return: bb4, unwind: bb100]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb100]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb100]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _131 = const _;                  // scope 1 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:371:15: 371:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[7])) }
        _13 = _131 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
        _18 = &_2;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:371:37: 371:49
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<chain::Config>(_18) -> [return: bb8, unwind: bb100]; // scope 1 at cita-chain/core/src/libchain/chain.rs:371:37: 371:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:371:37: 371:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b chain::Config) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<chain::Config>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb100]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _130 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[6])) }
        _11 = log::__private_api_log(move _12, _3, _130) -> [return: bb101, unwind: bb100]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = types::bloomchain::Config { levels: const _, elements_per_index: const _ }; // scope 0 at cita-chain/core/src/libchain/chain.rs:373:29: 376:10
        _24 = &_1;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:378:34: 378:36
        _23 = <Arc<RocksDB> as Deref>::deref(move _24) -> [return: bb11, unwind: bb100]; // scope 2 at cita-chain/core/src/libchain/chain.rs:378:33: 378:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:378:33: 378:36
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = _23;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:378:32: 378:36
        _21 = get_chain(_22) -> [return: bb12, unwind: bb100]; // scope 2 at cita-chain/core/src/libchain/chain.rs:378:22: 378:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:378:22: 378:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB) -> std::option::Option<Header> {get_chain}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = std::option::Option::<Header>::unwrap_or_default(move _21) -> [return: bb13, unwind: bb100]; // scope 2 at cita-chain/core/src/libchain/chain.rs:378:22: 378:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:378:38: 378:55
                                         // + literal: Const { ty: fn(std::option::Option<Header>) -> Header {std::option::Option::<Header>::unwrap_or_default}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = log::Level::Debug;         // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _28 = &_25;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _129 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[5])) }
        _27 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _28, _129) -> [return: bb17, unwind: bb90]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb16;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        _30 = &_25;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _32 = log::max_level() -> [return: bb18, unwind: bb90]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb16: {
        switchInt(move _26) -> [0: bb23, otherwise: bb20]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb17: {
        switchInt(move _27) -> [0: bb14, otherwise: bb15]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb18: {
        _31 = &_32;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _29 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _30, move _31) -> [return: bb19, unwind: bb90]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb19: {
        _26 = move _29;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb16;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _128 = const _;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:379:16: 379:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[4])) }
        _35 = _128 as &[&str] (Pointer(Unsize)); // scope 4 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
        _40 = &_20;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:379:44: 379:50
        _39 = core::fmt::ArgumentV1::<'_>::new_debug::<Header>(_40) -> [return: bb21, unwind: bb90]; // scope 4 at cita-chain/core/src/libchain/chain.rs:379:44: 379:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:379:44: 379:50
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Header) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Header>}, val: Value(<ZST>) }
    }

    bb21: {
        _38 = [move _39];                // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _37 = &_38;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _36 = _37 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb22, unwind: bb90]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _127 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[3])) }
        _33 = log::__private_api_log(move _34, _25, _127) -> [return: bb102, unwind: bb90]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = &_20;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
        _45 = <Header as Deref>::deref(move _46) -> [return: bb24, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:380:47: 380:62
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _44 = _45;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
        _43 = OpenHeader::number(move _44) -> [return: bb25, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:380:47: 380:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:380:54: 380:60
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb25: {
        _42 = move _43 as usize (IntToInt); // scope 3 at cita-chain/core/src/libchain/chain.rs:380:47: 380:71
        _41 = AtomicUsize::new(move _42) -> [return: bb26, unwind: bb90]; // scope 3 at cita-chain/core/src/libchain/chain.rs:380:30: 380:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:380:30: 380:46
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb26: {
        _47 = AtomicUsize::new(const 0_usize) -> [return: bb27, unwind: bb90]; // scope 5 at cita-chain/core/src/libchain/chain.rs:381:32: 381:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:381:32: 381:48
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb27: {
        _51 = &_1;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:382:55: 382:57
        _50 = <Arc<RocksDB> as Deref>::deref(move _51) -> [return: bb28, unwind: bb90]; // scope 7 at cita-chain/core/src/libchain/chain.rs:382:54: 382:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:382:54: 382:57
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _49 = _50;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:382:53: 382:57
        _48 = get_chain_body_height(_49) -> [return: bb29, unwind: bb90]; // scope 7 at cita-chain/core/src/libchain/chain.rs:382:31: 382:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:382:31: 382:52
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB) -> std::option::Option<u64> {get_chain_body_height}, val: Value(<ZST>) }
    }

    bb29: {
        _52 = discriminant(_48);         // scope 7 at cita-chain/core/src/libchain/chain.rs:382:16: 382:28
        switchInt(move _52) -> [1: bb30, otherwise: bb31]; // scope 7 at cita-chain/core/src/libchain/chain.rs:382:16: 382:28
    }

    bb30: {
        _53 = ((_48 as Some).0: u64);    // scope 7 at cita-chain/core/src/libchain/chain.rs:382:21: 382:27
        _55 = &_47;                      // scope 7 at cita-chain/core/src/libchain/chain.rs:383:13: 383:70
        _56 = _53 as usize (IntToInt);   // scope 7 at cita-chain/core/src/libchain/chain.rs:383:36: 383:51
        _57 = const SeqCst;              // scope 7 at cita-chain/core/src/libchain/chain.rs:383:53: 383:69
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _54 = AtomicUsize::store(move _55, move _56, move _57) -> [return: bb103, unwind: bb90]; // scope 7 at cita-chain/core/src/libchain/chain.rs:383:13: 383:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:383:30: 383:35
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb31: {
        _58 = log::Level::Info;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _61 = &_58;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _126 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[2])) }
        _60 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _61, _126) -> [return: bb35, unwind: bb90]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb32: {
        _59 = const false;               // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb33: {
        _63 = &_58;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _65 = log::max_level() -> [return: bb36, unwind: bb90]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _59) -> [0: bb42, otherwise: bb38]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        switchInt(move _60) -> [0: bb32, otherwise: bb33]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb36: {
        _64 = &_65;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _62 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _63, move _64) -> [return: bb37, unwind: bb90]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb37: {
        _59 = move _62;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb38: {
        _125 = const _;                  // scope 8 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[1])) }
        _68 = _125 as &[&str] (Pointer(Unsize)); // scope 8 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
        _73 = &_47;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:388:13: 388:29
        _72 = core::fmt::ArgumentV1::<'_>::new_debug::<AtomicUsize>(_73) -> [return: bb39, unwind: bb90]; // scope 8 at cita-chain/core/src/libchain/chain.rs:388:13: 388:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:388:13: 388:29
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b AtomicUsize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<AtomicUsize>}, val: Value(<ZST>) }
    }

    bb39: {
        _75 = &_41;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:388:31: 388:45
        _74 = core::fmt::ArgumentV1::<'_>::new_debug::<AtomicUsize>(_75) -> [return: bb40, unwind: bb90]; // scope 8 at cita-chain/core/src/libchain/chain.rs:388:31: 388:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:388:31: 388:45
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b AtomicUsize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<AtomicUsize>}, val: Value(<ZST>) }
    }

    bb40: {
        _71 = [move _72, move _74];      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _70 = &_71;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _69 = _70 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _67 = Arguments::<'_>::new_v1(move _68, move _69) -> [return: bb41, unwind: bb90]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb41: {
        _124 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::init_chain, [], Some(promoted[0])) }
        _66 = log::__private_api_log(move _67, _58, _124) -> [return: bb104, unwind: bb90]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb42: {
        _78 = &_20;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:393:41: 393:55
        _77 = <Header as Clone>::clone(move _78) -> [return: bb43, unwind: bb90]; // scope 6 at cita-chain/core/src/libchain/chain.rs:393:41: 393:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:393:48: 393:53
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb43: {
        _76 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::new(move _77) -> [return: bb44, unwind: bb90]; // scope 6 at cita-chain/core/src/libchain/chain.rs:393:29: 393:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:393:29: 393:40
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Header) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::new}, val: Value(<ZST>) }
    }

    bb44: {
        _79 = move _41;                  // scope 6 at cita-chain/core/src/libchain/chain.rs:394:13: 394:27
        _80 = move _47;                  // scope 6 at cita-chain/core/src/libchain/chain.rs:395:13: 395:29
        _82 = BTreeMap::<u64, BlockInQueue>::new() -> [return: bb45, unwind: bb89]; // scope 6 at cita-chain/core/src/libchain/chain.rs:396:36: 396:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:396:36: 396:49
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn() -> BTreeMap<u64, BlockInQueue> {BTreeMap::<u64, BlockInQueue>::new}, val: Value(<ZST>) }
    }

    bb45: {
        _81 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::new(move _82) -> [return: bb46, unwind: bb89]; // scope 6 at cita-chain/core/src/libchain/chain.rs:396:24: 396:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:396:24: 396:35
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(BTreeMap<u64, BlockInQueue>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::new}, val: Value(<ZST>) }
    }

    bb46: {
        _135 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:397:13: 397:15
        _83 = move _1;                   // scope 6 at cita-chain/core/src/libchain/chain.rs:397:13: 397:15
        _86 = FilterDB::new() -> [return: bb47, unwind: bb87]; // scope 6 at cita-chain/core/src/libchain/chain.rs:398:43: 398:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:398:43: 398:56
                                         // + literal: Const { ty: fn() -> FilterDB {FilterDB::new}, val: Value(<ZST>) }
    }

    bb47: {
        _85 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::new(move _86) -> [return: bb48, unwind: bb87]; // scope 6 at cita-chain/core/src/libchain/chain.rs:398:32: 398:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:398:32: 398:42
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(FilterDB) -> lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, FilterDB>::new}, val: Value(<ZST>) }
    }

    bb48: {
        _84 = Arc::<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>::new(move _85) -> [return: bb49, unwind: bb87]; // scope 6 at cita-chain/core/src/libchain/chain.rs:398:23: 398:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:398:23: 398:31
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {Arc::<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>::new}, val: Value(<ZST>) }
    }

    bb49: {
        _88 = Vec::<H160>::new() -> [return: bb50, unwind: bb86]; // scope 6 at cita-chain/core/src/libchain/chain.rs:399:32: 399:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:399:32: 399:40
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn() -> Vec<H160> {Vec::<H160>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _87 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::new(move _88) -> [return: bb51, unwind: bb86]; // scope 6 at cita-chain/core/src/libchain/chain.rs:399:20: 399:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:399:20: 399:31
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(Vec<H160>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::new}, val: Value(<ZST>) }
    }

    bb51: {
        _90 = Vec::<H160>::new() -> [return: bb52, unwind: bb85]; // scope 6 at cita-chain/core/src/libchain/chain.rs:400:37: 400:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:400:37: 400:45
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn() -> Vec<H160> {Vec::<H160>::new}, val: Value(<ZST>) }
    }

    bb52: {
        _89 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::new(move _90) -> [return: bb53, unwind: bb85]; // scope 6 at cita-chain/core/src/libchain/chain.rs:400:25: 400:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:400:25: 400:36
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(Vec<H160>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::new}, val: Value(<ZST>) }
    }

    bb53: {
        _91 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::new(const 3000_u64) -> [return: bb54, unwind: bb84]; // scope 6 at cita-chain/core/src/libchain/chain.rs:403:29: 403:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:403:29: 403:40
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(u64) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::new}, val: Value(<ZST>) }
    }

    bb54: {
        _92 = AtomicUsize::new(const usize::MAX) -> [return: bb55, unwind: bb84]; // scope 6 at cita-chain/core/src/libchain/chain.rs:404:32: 404:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:404:32: 404:48
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb55: {
        _94 = AccountGasLimit::new() -> [return: bb56, unwind: bb84]; // scope 6 at cita-chain/core/src/libchain/chain.rs:405:46: 405:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:405:46: 405:71
                                         // + literal: Const { ty: fn() -> AccountGasLimit {AccountGasLimit::new}, val: Value(<ZST>) }
    }

    bb56: {
        _93 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::new(move _94) -> [return: bb57, unwind: bb84]; // scope 6 at cita-chain/core/src/libchain/chain.rs:405:34: 405:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:405:34: 405:45
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(AccountGasLimit) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::new}, val: Value(<ZST>) }
    }

    bb57: {
        _95 = AtomicBool::new(const false) -> [return: bb58, unwind: bb83]; // scope 6 at cita-chain/core/src/libchain/chain.rs:406:26: 406:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:406:26: 406:41
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb58: {
        _96 = (_2.0: u8);                // scope 6 at cita-chain/core/src/libchain/chain.rs:407:24: 407:46
        _98 = BTreeMap::<u64, libproto::Proof>::new() -> [return: bb59, unwind: bb83]; // scope 6 at cita-chain/core/src/libchain/chain.rs:408:36: 408:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:408:36: 408:49
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: fn() -> BTreeMap<u64, libproto::Proof> {BTreeMap::<u64, libproto::Proof>::new}, val: Value(<ZST>) }
    }

    bb59: {
        _97 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::new(move _98) -> [return: bb60, unwind: bb83]; // scope 6 at cita-chain/core/src/libchain/chain.rs:408:24: 408:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:408:24: 408:35
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(BTreeMap<u64, libproto::Proof>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::new}, val: Value(<ZST>) }
    }

    bb60: {
        _99 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, bool>::new(const false) -> [return: bb61, unwind: bb82]; // scope 6 at cita-chain/core/src/libchain/chain.rs:409:26: 409:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:409:26: 409:37
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(bool) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, bool> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, bool>::new}, val: Value(<ZST>) }
    }

    bb61: {
        _101 = std::option::Option::<H160>::None; // scope 6 at cita-chain/core/src/libchain/chain.rs:410:40: 410:44
        _100 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::new(move _101) -> [return: bb62, unwind: bb82]; // scope 6 at cita-chain/core/src/libchain/chain.rs:410:28: 410:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:410:28: 410:39
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(std::option::Option<H160>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::new}, val: Value(<ZST>) }
    }

    bb62: {
        _103 = std::option::Option::<u32>::None; // scope 6 at cita-chain/core/src/libchain/chain.rs:411:34: 411:38
        _102 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::new(move _103) -> [return: bb63, unwind: bb82]; // scope 6 at cita-chain/core/src/libchain/chain.rs:411:22: 411:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:411:22: 411:33
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::new}, val: Value(<ZST>) }
    }

    bb63: {
        _0 = chain::Chain { blooms_config: _19, current_header: move _76, current_height: move _79, max_store_height: move _80, block_map: move _81, proof_map: move _97, db: move _83, nodes: move _87, validators: move _89, block_interval: move _91, block_quota_limit: move _92, account_quota_limit: move _93, check_quota: move _95, filterdb: move _84, prooftype: move _96, is_snapshot: move _99, admin_address: move _100, version: move _102 }; // scope 6 at cita-chain/core/src/libchain/chain.rs:391:21: 412:10
        _105 = &_0;                      // scope 10 at cita-chain/core/src/libchain/chain.rs:414:36: 414:62
        _104 = chain::Chain::current_block_poof(move _105) -> [return: bb64, unwind: bb81]; // scope 10 at cita-chain/core/src/libchain/chain.rs:414:36: 414:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:414:42: 414:60
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> std::option::Option<libproto::Proof> {chain::Chain::current_block_poof}, val: Value(<ZST>) }
    }

    bb64: {
        _134 = const true;               // scope 10 at cita-chain/core/src/libchain/chain.rs:414:61: 414:62
        _106 = discriminant(_104);       // scope 10 at cita-chain/core/src/libchain/chain.rs:414:16: 414:33
        switchInt(move _106) -> [1: bb65, otherwise: bb96]; // scope 10 at cita-chain/core/src/libchain/chain.rs:414:16: 414:33
    }

    bb65: {
        _134 = const false;              // scope 10 at cita-chain/core/src/libchain/chain.rs:414:21: 414:32
        _133 = const true;               // scope 10 at cita-chain/core/src/libchain/chain.rs:414:21: 414:32
        _107 = move ((_104 as Some).0: libproto::Proof); // scope 10 at cita-chain/core/src/libchain/chain.rs:414:21: 414:32
        _109 = &_0;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:415:43: 415:70
        _108 = chain::Chain::get_chain_prooftype(move _109) -> [return: bb66, unwind: bb98]; // scope 11 at cita-chain/core/src/libchain/chain.rs:415:43: 415:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:415:49: 415:68
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> std::option::Option<ProofType> {chain::Chain::get_chain_prooftype}, val: Value(<ZST>) }
    }

    bb66: {
        _111 = discriminant(_108);       // scope 11 at cita-chain/core/src/libchain/chain.rs:415:20: 415:40
        switchInt(move _111) -> [1: bb67, otherwise: bb76]; // scope 11 at cita-chain/core/src/libchain/chain.rs:415:20: 415:40
    }

    bb67: {
        _110 = discriminant(((_108 as Some).0: libproto::ProofType)); // scope 11 at cita-chain/core/src/libchain/chain.rs:415:20: 415:40
        switchInt(move _110) -> [2: bb68, otherwise: bb76]; // scope 11 at cita-chain/core/src/libchain/chain.rs:415:20: 415:40
    }

    bb68: {
        _114 = &_107;                    // scope 11 at cita-chain/core/src/libchain/chain.rs:416:44: 416:63
        _113 = <libproto::Proof as Clone>::clone(move _114) -> [return: bb69, unwind: bb98]; // scope 11 at cita-chain/core/src/libchain/chain.rs:416:44: 416:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:416:56: 416:61
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb69: {
        _112 = <proof::BftProof as From<libproto::Proof>>::from(move _113) -> [return: bb70, unwind: bb98]; // scope 11 at cita-chain/core/src/libchain/chain.rs:416:29: 416:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:416:29: 416:43
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb70: {
        _120 = &(_0.5: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>); // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 419:29
        _119 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write(move _120) -> [return: bb71, unwind: bb80]; // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 419:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:419:22: 419:27
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write}, val: Value(<ZST>) }
    }

    bb71: {
        _118 = &mut _119;                // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
        _117 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut(move _118) -> [return: bb72, unwind: bb79]; // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:417:17: 420:62
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb72: {
        _116 = _117;                     // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
        _122 = (_112.1: usize);          // scope 12 at cita-chain/core/src/libchain/chain.rs:420:29: 420:41
        _121 = move _122 as u64 (IntToInt); // scope 12 at cita-chain/core/src/libchain/chain.rs:420:29: 420:48
        _133 = const false;              // scope 12 at cita-chain/core/src/libchain/chain.rs:420:50: 420:61
        _123 = move _107;                // scope 12 at cita-chain/core/src/libchain/chain.rs:420:50: 420:61
        _115 = BTreeMap::<u64, libproto::Proof>::insert(move _116, move _121, move _123) -> [return: bb73, unwind: bb79]; // scope 12 at cita-chain/core/src/libchain/chain.rs:417:17: 420:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:420:22: 420:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, libproto::Proof>, u64, libproto::Proof) -> std::option::Option<libproto::Proof> {BTreeMap::<u64, libproto::Proof>::insert}, val: Value(<ZST>) }
    }

    bb73: {
        drop(_115) -> [return: bb74, unwind: bb79]; // scope 12 at cita-chain/core/src/libchain/chain.rs:420:62: 420:63
    }

    bb74: {
        drop(_119) -> [return: bb75, unwind: bb80]; // scope 12 at cita-chain/core/src/libchain/chain.rs:420:62: 420:63
    }

    bb75: {
        drop(_112) -> [return: bb76, unwind: bb98]; // scope 11 at cita-chain/core/src/libchain/chain.rs:421:13: 421:14
    }

    bb76: {
        switchInt(_133) -> [0: bb77, otherwise: bb92]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb77: {
        _133 = const false;              // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
        goto -> bb96;                    // scope 9 at cita-chain/core/src/libchain/chain.rs:414:9: 422:10
    }

    bb78: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:424:6: 424:6
    }

    bb79 (cleanup): {
        drop(_119) -> bb80;              // scope 12 at cita-chain/core/src/libchain/chain.rs:420:62: 420:63
    }

    bb80 (cleanup): {
        drop(_112) -> bb98;              // scope 11 at cita-chain/core/src/libchain/chain.rs:421:13: 421:14
    }

    bb81 (cleanup): {
        drop(_0) -> bb90;                // scope 6 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    }

    bb82 (cleanup): {
        drop(_97) -> bb83;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb83 (cleanup): {
        drop(_93) -> bb84;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb84 (cleanup): {
        drop(_89) -> bb85;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb85 (cleanup): {
        drop(_87) -> bb86;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb86 (cleanup): {
        drop(_84) -> bb87;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb87 (cleanup): {
        drop(_83) -> bb88;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb88 (cleanup): {
        drop(_81) -> bb89;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb89 (cleanup): {
        drop(_76) -> bb90;               // scope 6 at cita-chain/core/src/libchain/chain.rs:412:9: 412:10
    }

    bb90 (cleanup): {
        drop(_20) -> bb100;              // scope 2 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    }

    bb91 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:370:5: 424:6
    }

    bb92: {
        drop(_107) -> [return: bb77, unwind: bb81]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb93: {
        _134 = const false;              // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
        drop(_20) -> [return: bb78, unwind: bb100]; // scope 2 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    }

    bb94: {
        switchInt(_134) -> [0: bb93, otherwise: bb95]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb95: {
        drop(((_104 as Some).0: libproto::Proof)) -> [return: bb93, unwind: bb81]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb96: {
        _136 = discriminant(_104);       // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
        switchInt(move _136) -> [1: bb94, otherwise: bb93]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb97 (cleanup): {
        drop(_107) -> bb81;              // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb98 (cleanup): {
        switchInt(_133) -> [0: bb81, otherwise: bb97]; // scope 9 at cita-chain/core/src/libchain/chain.rs:422:9: 422:10
    }

    bb99 (cleanup): {
        drop(_1) -> bb91;                // scope 0 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    }

    bb100 (cleanup): {
        switchInt(_135) -> [0: bb91, otherwise: bb99]; // scope 0 at cita-chain/core/src/libchain/chain.rs:424:5: 424:6
    }

    bb101: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb102: {
        goto -> bb23;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb103: {
        goto -> bb31;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:383:13: 383:70
    }

    bb104: {
        goto -> bb42;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:386:9: 389:10
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:386:9: 389:10

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:386:9: 389:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:386:9: 389:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:386:9: 389:10
        _1 = (move _2, move _4, move _6, const 386_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70

    bb0: {
        _1 = [const "get chain max_store_height : ", const "  current_height: "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:387:13: 387:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:387:13: 387:70
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:9: 379:51
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:9: 379:51

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:379:9: 379:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:379:9: 379:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:379:9: 379:51
        _1 = (move _2, move _4, move _6, const 379_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42

    bb0: {
        _1 = [const "get chain head is : "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:379:16: 379:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:379:16: 379:42
    }
}

promoted[5] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:9: 371:50
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:9: 371:50

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:371:9: 371:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:371:9: 371:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:371:9: 371:50
        _1 = (move _2, move _4, move _6, const 371_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35

    bb0: {
        _1 = [const "chain config: "];   // scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:371:15: 371:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:371:15: 371:35
    }
}

promoted[8] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::init_chain: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_number(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<u64> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:427:21: 427:26
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:427:28: 427:31
    let mut _0: std::option::Option<u64>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:427:46: 427:65
    let mut _3: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:431:27: 431:40
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:429:13: 429:37
    let _5: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:429:30: 429:36
    let _6: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:430:28: 430:32
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:432:48: 432:72
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:433:49: 433:74
    scope 1 {
        debug number => _5;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:429:30: 429:36
    }
    scope 2 {
        debug hash => _6;                // in scope 2 at cita-chain/core/src/libchain/chain.rs:430:28: 430:32
    }

    bb0: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/core/src/libchain/chain.rs:428:15: 428:18
        switchInt(move _4) -> [0: bb1, 1: bb4, 2: bb5, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:428:9: 428:18
    }

    bb1: {
        _3 = discriminant(((_2 as Tag).0: types::block_number::Tag)); // scope 0 at cita-chain/core/src/libchain/chain.rs:428:15: 428:18
        switchInt(move _3) -> [0: bb7, 1: bb6, 2: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:428:9: 428:18
    }

    bb2: {
        _8 = chain::Chain::get_pending_height(_1) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:433:49: 433:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:433:54: 433:72
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_pending_height}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:428:15: 428:18
    }

    bb4: {
        _5 = ((_2 as Height).0: u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:429:30: 429:36
        _0 = std::option::Option::<u64>::Some(_5); // scope 1 at cita-chain/core/src/libchain/chain.rs:429:41: 429:53
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:429:52: 429:53
    }

    bb5: {
        _6 = ((_2 as Hash).0: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:430:28: 430:32
        _0 = chain::Chain::block_height_by_hash(_1, _6) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:430:37: 430:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:430:42: 430:62
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<u64> {chain::Chain::block_height_by_hash}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = std::option::Option::<u64>::Some(const 0_u64); // scope 0 at cita-chain/core/src/libchain/chain.rs:431:45: 431:52
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:431:45: 431:52
    }

    bb7: {
        _7 = chain::Chain::get_latest_height(_1) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:432:48: 432:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:432:53: 432:70
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_latest_height}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = std::option::Option::<u64>::Some(move _7); // scope 0 at cita-chain/core/src/libchain/chain.rs:432:43: 432:73
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:432:72: 432:73
    }

    bb9: {
        _0 = std::option::Option::<u64>::Some(move _8); // scope 0 at cita-chain/core/src/libchain/chain.rs:433:44: 433:75
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:433:74: 433:75
    }

    bb10: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:435:6: 435:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_proof_with_height(_1: &chain::Chain, _2: u64) -> std::option::Option<libproto::Proof> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:437:34: 437:39
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:437:41: 437:47
    let mut _0: std::option::Option<libproto::Proof>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:437:57: 437:75
    let mut _3: std::option::Option<&libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
    let mut _4: &std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
    let _5: &std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
    let mut _6: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
    let _7: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:30
    let mut _8: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:30
    let _9: &u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:438:35: 438:42

    bb0: {
        _8 = &((*_1).5: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>); // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:30
        _7 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::read(move _8) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:438:24: 438:28
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
        _5 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::deref(move _6) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:438:9: 438:43
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
        _9 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:438:35: 438:42
        _3 = BTreeMap::<u64, libproto::Proof>::get::<u64>(move _4, _9) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:438:31: 438:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, libproto::Proof>, &'b u64) -> std::option::Option<&'a libproto::Proof> {BTreeMap::<u64, libproto::Proof>::get::<u64>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = std::option::Option::<&libproto::Proof>::cloned(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:438:9: 438:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:438:44: 438:50
                                         // + literal: Const { ty: fn(std::option::Option<&libproto::Proof>) -> std::option::Option<libproto::Proof> {std::option::Option::<&libproto::Proof>::cloned}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:439:5: 439:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:439:6: 439:6
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:439:5: 439:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:437:5: 439:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_proof_with_height(_1: &chain::Chain, _2: u64, _3: &libproto::Proof) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:441:34: 441:39
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:441:41: 441:47
    debug proof => _3;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:441:54: 441:59
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:441:74: 441:74
    let _4: std::option::Option<libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
    let mut _5: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
    let mut _6: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
    let mut _7: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
    let mut _8: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:31
    let mut _9: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:31
    let mut _10: libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:442:47: 442:60

    bb0: {
        _9 = &((*_1).5: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>); // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:31
        _8 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write(move _9) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:442:24: 442:29
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut _8;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
        _6 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:442:9: 442:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
        _10 = <libproto::Proof as Clone>::clone(_3) -> [return: bb3, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:442:47: 442:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:442:53: 442:58
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = BTreeMap::<u64, libproto::Proof>::insert(move _5, _2, move _10) -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:442:9: 442:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:442:32: 442:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, libproto::Proof>, u64, libproto::Proof) -> std::option::Option<libproto::Proof> {BTreeMap::<u64, libproto::Proof>::insert}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:442:61: 442:62
    }

    bb5: {
        drop(_8) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:442:61: 442:62
    }

    bb6: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:443:6: 443:6
    }

    bb7 (cleanup): {
        drop(_8) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:442:61: 442:62
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:441:5: 443:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::clean_proof_with_height(_1: &chain::Chain, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:445:36: 445:41
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:445:43: 445:49
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:445:56: 445:56
    let mut _3: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:446:13: 446:22
    let mut _4: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:446:25: 446:47
    let mut _6: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
    let mut _7: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
    let mut _8: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
    let _9: &u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:447:39: 447:46
    let mut _10: std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:448:18: 448:25
    let mut _11: &mut std::collections::BTreeMap<u64, libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
    let mut _12: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:448:10: 448:15
    let mut _13: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:448:24: 448:25
    scope 1 {
        debug guard => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:446:13: 446:22
        let _5: std::collections::BTreeMap<u64, libproto::Proof>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:447:13: 447:20
        scope 2 {
            debug new_map => _5;         // in scope 2 at cita-chain/core/src/libchain/chain.rs:447:13: 447:20
        }
    }

    bb0: {
        _13 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:446:13: 446:22
        _4 = &((*_1).5: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libproto::Proof>>); // scope 0 at cita-chain/core/src/libchain/chain.rs:446:25: 446:47
        _3 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:446:25: 446:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:446:40: 446:45
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>::write}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
        _7 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut(move _8) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:447:23: 447:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
        _9 = &_2;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:447:39: 447:46
        _5 = BTreeMap::<u64, libproto::Proof>::split_off::<u64>(move _6, _9) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:447:23: 447:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:447:29: 447:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut BTreeMap<u64, libproto::Proof>, &'b u64) -> BTreeMap<u64, libproto::Proof> {BTreeMap::<u64, libproto::Proof>::split_off::<u64>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:448:18: 448:25
        _10 = move _5;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:448:18: 448:25
        _12 = &mut _3;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:448:10: 448:15
        _11 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut(move _12) -> [return: bb4, unwind: bb11]; // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:448:9: 448:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, libproto::Proof>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        drop((*_11)) -> [return: bb5, unwind: bb6]; // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
    }

    bb5: {
        _13 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
        (*_11) = move _10;               // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
        _13 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:448:24: 448:25
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:449:5: 449:6
    }

    bb6 (cleanup): {
        _13 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
        (*_11) = move _10;               // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
        goto -> bb11;                    // scope 2 at cita-chain/core/src/libchain/chain.rs:448:9: 448:15
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:449:6: 449:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:449:5: 449:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:445:5: 449:6
    }

    bb10 (cleanup): {
        drop(_10) -> bb8;                // scope 2 at cita-chain/core/src/libchain/chain.rs:448:24: 448:25
    }

    bb11 (cleanup): {
        switchInt(_13) -> [0: bb8, otherwise: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:448:24: 448:25
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_height_by_hash(_1: &chain::Chain, _2: H256) -> std::option::Option<u64> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:451:33: 451:38
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:451:40: 451:44
    let mut _0: std::option::Option<u64>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:451:55: 451:74
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:452:13: 452:21
    let mut _4: &types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:452:24: 452:58
    let _5: types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:452:24: 452:46
    let mut _6: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:453:9: 455:29
    let mut _7: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:454:18: 454:52
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
    let _13: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
    let _14: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
    let mut _15: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:455:24: 455:28
    scope 1 {
        debug hash_key => _3;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:452:13: 452:21
    }

    bb0: {
        _5 = Hash2BlockNumber(_2);       // scope 0 at cita-chain/core/src/libchain/chain.rs:452:24: 452:46
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:452:24: 452:58
        _3 = <Hash2BlockNumber as DBIndex>::get_index(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:452:24: 452:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:452:47: 452:56
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2BlockNumber) -> Vec<u8> {<Hash2BlockNumber as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:453:9: 454:64
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
        _11 = const std::option::Option::<DataCategory>::Some(Extra); // scope 1 at cita-chain/core/src/libchain/chain.rs:454:18: 454:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
        _13 = <Vec<u8> as Deref>::deref(_14) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:454:54: 454:63
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:454:54: 454:63
        _7 = <RocksDB as Database>::get(move _8, move _11, move _12) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 454:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:454:14: 454:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:455:24: 455:28
        _6 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _7, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 455:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:455:14: 455:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23]) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:453:9: 456:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:456:14: 456:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23]) -> std::option::Option<u64> {std::option::Option::<Vec<u8>>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:457:5: 457:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:457:6: 457:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:457:5: 457:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:451:5: 457:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_height_by_hash::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:456:18: 456:23], _2: Vec<u8>) -> u64 {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:456:19: 456:22
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:456:24: 456:24
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:456:46: 456:50
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:456:46: 456:50
        _0 = rlp::decode::<u64>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:456:24: 456:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:456:24: 456:45
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u64 {rlp::decode::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:456:50: 456:51
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:456:51: 456:51
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:456:50: 456:51
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:456:18: 456:51
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config(_1: &chain::Chain, _2: &libproto::ExecutedResult) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:459:19: 459:24
    debug ret => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:459:26: 459:29
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:459:48: 459:48
    let _3: &libproto::ConsensusConfig;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
    let mut _5: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:461:21: 461:37
    let mut _7: std::iter::Map<std::slice::Iter<'_, std::vec::Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:462:35: 464:62
    let mut _8: std::slice::Iter<'_, std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:462:35: 463:20
    let mut _9: &[std::vec::Vec<u8>];    // in scope 0 at cita-chain/core/src/libchain/chain.rs:462:35: 463:20
    let mut _11: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:466:26: 466:47
    let mut _13: std::iter::Map<std::slice::Iter<'_, std::vec::Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:467:40: 469:62
    let mut _14: std::slice::Iter<'_, std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:467:40: 468:20
    let mut _15: &[std::vec::Vec<u8>];   // in scope 0 at cita-chain/core/src/libchain/chain.rs:467:40: 468:20
    let mut _17: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:471:30: 471:55
    let mut _19: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:472:23: 472:41
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _24: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _25: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _26: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _27: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _30: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _32: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _33: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:13: 475:18
    let _35: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:13: 475:18
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:20: 475:34
    let _37: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:20: 475:34
    let mut _38: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:36: 475:43
    let _39: &u32;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:475:36: 475:43
    let _40: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:478:9: 479:62
    let mut _41: &std::sync::atomic::AtomicBool; // in scope 0 at cita-chain/core/src/libchain/chain.rs:478:9: 479:62
    let mut _42: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:479:20: 479:42
    let mut _43: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:479:20: 479:42
    let mut _44: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:479:44: 479:61
    let _45: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:480:9: 481:76
    let mut _46: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:480:9: 481:76
    let mut _47: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:481:20: 481:57
    let mut _48: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:481:20: 481:48
    let mut _49: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:481:20: 481:48
    let mut _50: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:481:59: 481:75
    let mut _51: libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:45: 482:83
    let mut _52: &libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:45: 482:83
    let _53: &libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:45: 482:75
    let mut _54: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:45: 482:75
    let mut _55: &mut libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
    let mut _56: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
    let mut _57: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
    let mut _58: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
    let mut _59: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:31: 483:36
    let mut _60: &mut std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
    let mut _61: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
    let mut _62: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
    let mut _63: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
    let mut _64: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:36: 484:46
    let mut _65: &mut std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
    let mut _66: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
    let mut _67: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
    let mut _68: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
    let mut _69: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:485:40: 485:54
    let mut _70: &mut u64;               // in scope 0 at cita-chain/core/src/libchain/chain.rs:485:9: 485:37
    let mut _71: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
    let mut _72: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
    let mut _73: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
    let mut _74: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:39: 490:10
    let mut _75: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:42: 486:77
    let mut _76: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:42: 486:77
    let _77: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:42: 486:66
    let mut _78: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:42: 486:66
    let mut _79: cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:489:18: 489:57
    let mut _80: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:489:32: 489:56
    let mut _81: &libproto::ConsensusConfig; // in scope 0 at cita-chain/core/src/libchain/chain.rs:489:32: 489:56
    let mut _82: &mut std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:9: 486:36
    let mut _83: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
    let mut _84: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
    let mut _85: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
    let mut _86: std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:33: 491:46
    let mut _87: u32;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:38: 491:45
    let mut _88: &mut std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:9: 491:30
    let mut _89: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
    let mut _90: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
    let mut _91: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
    let mut _95: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:484:45: 484:46
    let mut _96: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:483:35: 483:36
    let mut _97: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
    let mut _98: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    let mut _99: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    scope 1 {
        debug conf => _3;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        let _4: &[std::vec::Vec<u8>];    // in scope 1 at cita-chain/core/src/libchain/chain.rs:461:13: 461:18
        scope 2 {
            debug nodes => _4;           // in scope 2 at cita-chain/core/src/libchain/chain.rs:461:13: 461:18
            let _6: std::vec::Vec<cita_types::H160>; // in scope 2 at cita-chain/core/src/libchain/chain.rs:462:13: 462:18
            scope 3 {
                debug nodes => _6;       // in scope 3 at cita-chain/core/src/libchain/chain.rs:462:13: 462:18
                let _10: &[std::vec::Vec<u8>]; // in scope 3 at cita-chain/core/src/libchain/chain.rs:466:13: 466:23
                scope 4 {
                    debug validators => _10; // in scope 4 at cita-chain/core/src/libchain/chain.rs:466:13: 466:23
                    let _12: std::vec::Vec<cita_types::H160>; // in scope 4 at cita-chain/core/src/libchain/chain.rs:467:13: 467:23
                    scope 5 {
                        debug validators => _12; // in scope 5 at cita-chain/core/src/libchain/chain.rs:467:13: 467:23
                        let _16: u64;    // in scope 5 at cita-chain/core/src/libchain/chain.rs:471:13: 471:27
                        scope 6 {
                            debug block_interval => _16; // in scope 6 at cita-chain/core/src/libchain/chain.rs:471:13: 471:27
                            let _18: u32; // in scope 6 at cita-chain/core/src/libchain/chain.rs:472:13: 472:20
                            scope 7 {
                                debug version => _18; // in scope 7 at cita-chain/core/src/libchain/chain.rs:472:13: 472:20
                                let _20: log::Level; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                scope 8 {
                                    debug lvl => _20; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    let mut _92: &(&str, &str, &str, u32); // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                    let mut _93: &[&str; 3]; // in scope 8 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                    let mut _94: &log::LevelFilter; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _97 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        _96 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        _95 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        _99 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        _98 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:460:13: 460:17
        _3 = libproto::ExecutedResult::get_config(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:460:20: 460:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:460:24: 460:34
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> &'a ConsensusConfig {libproto::ExecutedResult::get_config}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _3;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:461:21: 461:37
        _4 = ConsensusConfig::get_nodes(move _5) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:461:21: 461:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:461:26: 461:35
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a [Vec<u8>] {ConsensusConfig::get_nodes}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _4;                         // scope 2 at cita-chain/core/src/libchain/chain.rs:462:35: 463:20
        _8 = core::slice::<impl [Vec<u8>]>::iter(move _9) -> bb3; // scope 2 at cita-chain/core/src/libchain/chain.rs:462:35: 463:20
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:463:14: 463:18
                                         // + literal: Const { ty: for<'a> fn(&'a [Vec<u8>]) -> std::slice::Iter<'a, Vec<u8>> {core::slice::<impl [Vec<u8>]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]>(move _8, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]) -> bb4; // scope 2 at cita-chain/core/src/libchain/chain.rs:462:35: 464:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:464:14: 464:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]) -> std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]> {<std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27], val: Value(<ZST>) }
    }

    bb4: {
        _99 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:462:35: 465:23
        _6 = <std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]> as Iterator>::collect::<Vec<H160>>(move _7) -> bb5; // scope 2 at cita-chain/core/src/libchain/chain.rs:462:35: 465:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:465:14: 465:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]>) -> Vec<H160> {<std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27]> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _3;                        // scope 3 at cita-chain/core/src/libchain/chain.rs:466:26: 466:47
        _10 = ConsensusConfig::get_validators(move _11) -> [return: bb6, unwind: bb80]; // scope 3 at cita-chain/core/src/libchain/chain.rs:466:26: 466:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:466:31: 466:45
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a [Vec<u8>] {ConsensusConfig::get_validators}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _10;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:467:40: 468:20
        _14 = core::slice::<impl [Vec<u8>]>::iter(move _15) -> [return: bb7, unwind: bb80]; // scope 4 at cita-chain/core/src/libchain/chain.rs:467:40: 468:20
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:468:14: 468:18
                                         // + literal: Const { ty: for<'a> fn(&'a [Vec<u8>]) -> std::slice::Iter<'a, Vec<u8>> {core::slice::<impl [Vec<u8>]>::iter}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = <std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]>(move _14, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]) -> [return: bb8, unwind: bb80]; // scope 4 at cita-chain/core/src/libchain/chain.rs:467:40: 469:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:469:14: 469:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]) -> std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]> {<std::slice::Iter<'_, Vec<u8>> as Iterator>::map::<H160, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27], val: Value(<ZST>) }
    }

    bb8: {
        _12 = <std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]> as Iterator>::collect::<Vec<H160>>(move _13) -> [return: bb9, unwind: bb80]; // scope 4 at cita-chain/core/src/libchain/chain.rs:467:40: 470:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:470:14: 470:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]>) -> Vec<H160> {<std::iter::Map<std::slice::Iter<'_, Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27]> as Iterator>::collect::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb9: {
        _98 = const true;                // scope 4 at cita-chain/core/src/libchain/chain.rs:470:22: 470:23
        _17 = _3;                        // scope 5 at cita-chain/core/src/libchain/chain.rs:471:30: 471:55
        _16 = ConsensusConfig::get_block_interval(move _17) -> [return: bb10, unwind: bb78]; // scope 5 at cita-chain/core/src/libchain/chain.rs:471:30: 471:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:471:35: 471:53
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> u64 {ConsensusConfig::get_block_interval}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = _3;                        // scope 6 at cita-chain/core/src/libchain/chain.rs:472:23: 472:41
        _18 = ConsensusConfig::get_version(move _19) -> [return: bb11, unwind: bb78]; // scope 6 at cita-chain/core/src/libchain/chain.rs:472:23: 472:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:472:28: 472:39
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> u32 {ConsensusConfig::get_version}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = log::Level::Debug;         // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _23 = &_20;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _94 = const _;                   // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_config, [], Some(promoted[2])) }
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, _94) -> [return: bb15, unwind: bb78]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = const false;               // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _25 = &_20;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _27 = log::max_level() -> [return: bb16, unwind: bb78]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _21) -> [0: bb23, otherwise: bb18]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        switchInt(move _22) -> [0: bb12, otherwise: bb13]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _26 = &_27;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _24 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _25, move _26) -> [return: bb17, unwind: bb78]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb17: {
        _21 = move _24;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb14;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb18: {
        _93 = const _;                   // scope 8 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(chain::Chain::set_config, [], Some(promoted[1])) }
        _30 = _93 as &[&str] (Pointer(Unsize)); // scope 8 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
        _35 = &_6;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:475:13: 475:18
        _34 = core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H160>>(_35) -> [return: bb19, unwind: bb78]; // scope 8 at cita-chain/core/src/libchain/chain.rs:475:13: 475:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:475:13: 475:18
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Vec<H160>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Vec<H160>>}, val: Value(<ZST>) }
    }

    bb19: {
        _37 = &_16;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:475:20: 475:34
        _36 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_37) -> [return: bb20, unwind: bb78]; // scope 8 at cita-chain/core/src/libchain/chain.rs:475:20: 475:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:475:20: 475:34
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb20: {
        _39 = &_18;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:475:36: 475:43
        _38 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(_39) -> [return: bb21, unwind: bb78]; // scope 8 at cita-chain/core/src/libchain/chain.rs:475:36: 475:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:475:36: 475:43
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb21: {
        _33 = [move _34, move _36, move _38]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _32 = &_33;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _31 = _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb22, unwind: bb78]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _92 = const _;                   // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_config, [], Some(promoted[0])) }
        _28 = log::__private_api_log(move _29, _20, _92) -> [return: bb81, unwind: bb78]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb23: {
        _41 = &((*_1).12: std::sync::atomic::AtomicBool); // scope 7 at cita-chain/core/src/libchain/chain.rs:478:9: 479:62
        _43 = _3;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:479:20: 479:42
        _42 = ConsensusConfig::get_check_quota(move _43) -> [return: bb24, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:479:20: 479:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:479:25: 479:40
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> bool {ConsensusConfig::get_check_quota}, val: Value(<ZST>) }
    }

    bb24: {
        _44 = const Relaxed;             // scope 7 at cita-chain/core/src/libchain/chain.rs:479:44: 479:61
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _40 = AtomicBool::store(move _41, move _42, move _44) -> [return: bb25, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:478:9: 479:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:479:14: 479:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, std::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb25: {
        _46 = &((*_1).10: std::sync::atomic::AtomicUsize); // scope 7 at cita-chain/core/src/libchain/chain.rs:480:9: 481:76
        _49 = _3;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:481:20: 481:48
        _48 = ConsensusConfig::get_block_quota_limit(move _49) -> [return: bb26, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:481:20: 481:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:481:25: 481:46
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> u64 {ConsensusConfig::get_block_quota_limit}, val: Value(<ZST>) }
    }

    bb26: {
        _47 = move _48 as usize (IntToInt); // scope 7 at cita-chain/core/src/libchain/chain.rs:481:20: 481:57
        _50 = const SeqCst;              // scope 7 at cita-chain/core/src/libchain/chain.rs:481:59: 481:75
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _45 = AtomicUsize::store(move _46, move _47, move _50) -> [return: bb27, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:480:9: 481:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:481:14: 481:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb27: {
        _54 = _3;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:482:45: 482:75
        _53 = ConsensusConfig::get_account_quota_limit(move _54) -> [return: bb28, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:45: 482:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:482:50: 482:73
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a AccountGasLimit {ConsensusConfig::get_account_quota_limit}, val: Value(<ZST>) }
    }

    bb28: {
        _52 = _53;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:482:45: 482:83
        _51 = <AccountGasLimit as Clone>::clone(move _52) -> [return: bb29, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:45: 482:83
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:482:76: 482:81
                                         // + literal: Const { ty: for<'a> fn(&'a AccountGasLimit) -> AccountGasLimit {<AccountGasLimit as Clone>::clone}, val: Value(<ZST>) }
    }

    bb29: {
        _97 = const true;                // scope 7 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
        _58 = &((*_1).11: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>); // scope 7 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
        _57 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::write(move _58) -> [return: bb30, unwind: bb69]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:482:35: 482:40
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::write}, val: Value(<ZST>) }
    }

    bb30: {
        _56 = &mut _57;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:482:10: 482:42
        _55 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as DerefMut>::deref_mut(move _56) -> [return: bb31, unwind: bb76]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:482:9: 482:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb31: {
        drop((*_55)) -> [return: bb32, unwind: bb33]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
    }

    bb32: {
        _97 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
        (*_55) = move _51;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
        _97 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
        drop(_57) -> [return: bb34, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:83: 482:84
    }

    bb33 (cleanup): {
        _97 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
        (*_55) = move _51;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
        goto -> bb76;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:482:9: 482:42
    }

    bb34: {
        _99 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:31: 483:36
        _96 = const true;                // scope 7 at cita-chain/core/src/libchain/chain.rs:483:31: 483:36
        _59 = move _6;                   // scope 7 at cita-chain/core/src/libchain/chain.rs:483:31: 483:36
        _63 = &((*_1).7: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>); // scope 7 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
        _62 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::write(move _63) -> [return: bb35, unwind: bb67]; // scope 7 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:483:21: 483:26
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::write}, val: Value(<ZST>) }
    }

    bb35: {
        _61 = &mut _62;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:483:10: 483:28
        _60 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as DerefMut>::deref_mut(move _61) -> [return: bb36, unwind: bb74]; // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:483:9: 483:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb36: {
        drop((*_60)) -> [return: bb37, unwind: bb38]; // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
    }

    bb37: {
        _96 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
        (*_60) = move _59;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
        _96 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:35: 483:36
        drop(_62) -> [return: bb39, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:483:36: 483:37
    }

    bb38 (cleanup): {
        _96 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
        (*_60) = move _59;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
        goto -> bb74;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:483:9: 483:28
    }

    bb39: {
        _98 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:36: 484:46
        _95 = const true;                // scope 7 at cita-chain/core/src/libchain/chain.rs:484:36: 484:46
        _64 = move _12;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:484:36: 484:46
        _68 = &((*_1).8: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>); // scope 7 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
        _67 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::write(move _68) -> [return: bb40, unwind: bb65]; // scope 7 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:484:26: 484:31
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::write}, val: Value(<ZST>) }
    }

    bb40: {
        _66 = &mut _67;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:484:10: 484:33
        _65 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as DerefMut>::deref_mut(move _66) -> [return: bb41, unwind: bb72]; // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:484:9: 484:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb41: {
        drop((*_65)) -> [return: bb42, unwind: bb43]; // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
    }

    bb42: {
        _95 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
        (*_65) = move _64;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
        _95 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:45: 484:46
        drop(_67) -> [return: bb44, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:484:46: 484:47
    }

    bb43 (cleanup): {
        _95 = const false;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
        (*_65) = move _64;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
        goto -> bb72;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:484:9: 484:33
    }

    bb44: {
        _69 = _16;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:485:40: 485:54
        _73 = &((*_1).9: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>); // scope 7 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
        _72 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::write(move _73) -> [return: bb45, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:485:30: 485:35
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, u64> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::write}, val: Value(<ZST>) }
    }

    bb45: {
        _71 = &mut _72;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:485:10: 485:37
        _70 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as DerefMut>::deref_mut(move _71) -> [return: bb46, unwind: bb63]; // scope 7 at cita-chain/core/src/libchain/chain.rs:485:9: 485:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:485:9: 485:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb46: {
        (*_70) = move _69;               // scope 7 at cita-chain/core/src/libchain/chain.rs:485:9: 485:54
        drop(_72) -> [return: bb47, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:485:54: 485:55
    }

    bb47: {
        _78 = _3;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:486:42: 486:66
        _77 = ConsensusConfig::get_admin_address(move _78) -> [return: bb48, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:486:42: 486:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:486:47: 486:64
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a [u8] {ConsensusConfig::get_admin_address}, val: Value(<ZST>) }
    }

    bb48: {
        _76 = _77;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:486:42: 486:77
        _75 = core::slice::<impl [u8]>::is_empty(move _76) -> [return: bb49, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:486:42: 486:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:486:67: 486:75
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> bool {core::slice::<impl [u8]>::is_empty}, val: Value(<ZST>) }
    }

    bb49: {
        switchInt(move _75) -> [0: bb51, otherwise: bb50]; // scope 7 at cita-chain/core/src/libchain/chain.rs:486:42: 486:77
    }

    bb50: {
        _74 = std::option::Option::<H160>::None; // scope 7 at cita-chain/core/src/libchain/chain.rs:487:13: 487:17
        goto -> bb54;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:486:39: 490:10
    }

    bb51: {
        _81 = _3;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:489:32: 489:56
        _80 = ConsensusConfig::get_admin_address(move _81) -> [return: bb52, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:489:32: 489:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:489:37: 489:54
                                         // + literal: Const { ty: for<'a> fn(&'a ConsensusConfig) -> &'a [u8] {ConsensusConfig::get_admin_address}, val: Value(<ZST>) }
    }

    bb52: {
        _79 = <H160 as From<&[u8]>>::from(move _80) -> [return: bb53, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:489:18: 489:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:489:18: 489:31
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[u8]) -> H160 {<H160 as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb53: {
        _74 = std::option::Option::<H160>::Some(move _79); // scope 7 at cita-chain/core/src/libchain/chain.rs:489:13: 489:58
        goto -> bb54;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:486:39: 490:10
    }

    bb54: {
        _85 = &((*_1).16: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>); // scope 7 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
        _84 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::write(move _85) -> [return: bb55, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:486:29: 486:34
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::write}, val: Value(<ZST>) }
    }

    bb55: {
        _83 = &mut _84;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:486:10: 486:36
        _82 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as DerefMut>::deref_mut(move _83) -> [return: bb56, unwind: bb62]; // scope 7 at cita-chain/core/src/libchain/chain.rs:486:9: 486:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:486:9: 486:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb56: {
        (*_82) = move _74;               // scope 7 at cita-chain/core/src/libchain/chain.rs:486:9: 490:10
        drop(_84) -> [return: bb57, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:490:10: 490:11
    }

    bb57: {
        _87 = _18;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:491:38: 491:45
        _86 = std::option::Option::<u32>::Some(move _87); // scope 7 at cita-chain/core/src/libchain/chain.rs:491:33: 491:46
        _91 = &((*_1).17: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>); // scope 7 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
        _90 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::write(move _91) -> [return: bb58, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:491:23: 491:28
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::write}, val: Value(<ZST>) }
    }

    bb58: {
        _89 = &mut _90;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:491:10: 491:30
        _88 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as DerefMut>::deref_mut(move _89) -> [return: bb59, unwind: bb61]; // scope 7 at cita-chain/core/src/libchain/chain.rs:491:9: 491:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:491:9: 491:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb59: {
        (*_88) = move _86;               // scope 7 at cita-chain/core/src/libchain/chain.rs:491:9: 491:46
        drop(_90) -> [return: bb60, unwind: bb78]; // scope 7 at cita-chain/core/src/libchain/chain.rs:491:46: 491:47
    }

    bb60: {
        _98 = const false;               // scope 4 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
        _99 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:492:6: 492:6
    }

    bb61 (cleanup): {
        drop(_90) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:491:46: 491:47
    }

    bb62 (cleanup): {
        drop(_84) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:490:10: 490:11
    }

    bb63 (cleanup): {
        drop(_72) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:485:54: 485:55
    }

    bb64 (cleanup): {
        drop(_67) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:46: 484:47
    }

    bb65 (cleanup): {
        drop(_64) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:45: 484:46
    }

    bb66 (cleanup): {
        drop(_62) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:36: 483:37
    }

    bb67 (cleanup): {
        drop(_59) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:35: 483:36
    }

    bb68 (cleanup): {
        drop(_57) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:83: 482:84
    }

    bb69 (cleanup): {
        drop(_51) -> bb78;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
    }

    bb70 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:459:5: 492:6
    }

    bb71 (cleanup): {
        drop(_64) -> bb64;               // scope 7 at cita-chain/core/src/libchain/chain.rs:484:45: 484:46
    }

    bb72 (cleanup): {
        switchInt(_95) -> [0: bb64, otherwise: bb71]; // scope 7 at cita-chain/core/src/libchain/chain.rs:484:45: 484:46
    }

    bb73 (cleanup): {
        drop(_59) -> bb66;               // scope 7 at cita-chain/core/src/libchain/chain.rs:483:35: 483:36
    }

    bb74 (cleanup): {
        switchInt(_96) -> [0: bb66, otherwise: bb73]; // scope 7 at cita-chain/core/src/libchain/chain.rs:483:35: 483:36
    }

    bb75 (cleanup): {
        drop(_51) -> bb68;               // scope 7 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
    }

    bb76 (cleanup): {
        switchInt(_97) -> [0: bb68, otherwise: bb75]; // scope 7 at cita-chain/core/src/libchain/chain.rs:482:82: 482:83
    }

    bb77 (cleanup): {
        drop(_12) -> bb80;               // scope 4 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    }

    bb78 (cleanup): {
        switchInt(_98) -> [0: bb80, otherwise: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    }

    bb79 (cleanup): {
        drop(_6) -> bb70;                // scope 2 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    }

    bb80 (cleanup): {
        switchInt(_99) -> [0: bb70, otherwise: bb79]; // scope 2 at cita-chain/core/src/libchain/chain.rs:492:5: 492:6
    }

    bb81: {
        goto -> bb23;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:473:9: 476:10
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:473:9: 476:10

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:473:9: 476:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:473:9: 476:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:473:9: 476:10
        _1 = (move _2, move _4, move _6, const 473_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
    let mut _1: [&str; 3];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68

    bb0: {
        _1 = [const "consensus nodes ", const ", block_interval ", const ", version "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:474:13: 474:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:474:13: 474:68
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:464:18: 464:27], _2: &Vec<u8>) -> H160 {
    debug vecaddr => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:464:19: 464:26
    let mut _0: cita_types::H160;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:464:28: 464:28
    let _3: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:464:48: 464:60
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:464:49: 464:60

    bb0: {
        _4 = <Vec<u8> as Index<RangeFull>>::index(_2, const RangeFull) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:464:49: 464:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:464:49: 464:60
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as Index<RangeFull>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFull, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:464:48: 464:60
        _0 = H160::from_slice(_3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:464:28: 464:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:464:28: 464:47
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:464:61: 464:61
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_config::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:469:18: 469:27], _2: &Vec<u8>) -> H160 {
    debug vecaddr => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:469:19: 469:26
    let mut _0: cita_types::H160;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:469:28: 469:28
    let _3: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:469:48: 469:60
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:469:49: 469:60

    bb0: {
        _4 = <Vec<u8> as Index<RangeFull>>::index(_2, const RangeFull) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:469:49: 469:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:469:49: 469:60
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as Index<RangeFull>>::index}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: RangeFull, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:469:48: 469:60
        _0 = H160::from_slice(_3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:469:28: 469:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:469:28: 469:47
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> H160 {H160::from_slice}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:469:61: 469:61
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result(_1: &chain::Chain, _2: &libproto::ExecutedResult, _3: &OpenBlock) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:494:26: 494:31
    debug ret => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:494:33: 494:36
    debug block => _3;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:494:55: 494:60
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:494:74: 494:74
    let _4: &libproto::ExecutedInfo;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
    let mut _6: &libproto::ExecutedHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:496:22: 496:52
    let _7: &libproto::ExecutedHeader;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:496:22: 496:39
    let mut _8: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:496:22: 496:39
    let mut _10: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:497:40: 497:73
    let mut _11: &libproto::ExecutedHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:497:40: 497:73
    let _12: &libproto::ExecutedHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:497:40: 497:57
    let mut _13: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:497:40: 497:57
    let mut _15: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:498:49: 498:72
    let _16: &libproto::ExecutedInfo;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:498:49: 498:72
    let _17: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:498:74: 498:87
    let mut _19: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:499:27: 499:40
    let mut _20: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:499:27: 499:40
    let mut _22: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:501:41: 501:86
    let _23: &types::block::BlockBody;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:501:41: 501:53
    let mut _24: cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:501:74: 501:85
    let mut _26: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:502:74: 502:93
    let mut _27: &cita_types::Bloom;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:502:74: 502:93
    let mut _29: types::bloomchain::Config; // in scope 0 at cita-chain/core/src/libchain/chain.rs:505:46: 505:64
    let mut _30: &dyn types::bloomchain::group::BloomGroupDatabase; // in scope 0 at cita-chain/core/src/libchain/chain.rs:505:66: 505:70
    let mut _31: std::iter::Map<std::collections::hash_map::IntoIter<types::bloomchain::group::GroupPosition, types::bloomchain::group::BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:506:13: 512:61
    let mut _32: std::collections::hash_map::IntoIter<types::bloomchain::group::GroupPosition, types::bloomchain::group::BloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:506:13: 511:29
    let mut _33: std::collections::HashMap<types::bloomchain::group::GroupPosition, types::bloomchain::group::BloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:506:13: 510:18
    let mut _34: &types::bloomchain::group::BloomGroupChain<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:506:13: 510:18
    let mut _35: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:508:21: 508:47
    let mut _36: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:508:21: 508:27
    let mut _37: types::bloomchain::Bloom; // in scope 0 at cita-chain/core/src/libchain/chain.rs:509:21: 509:68
    let mut _38: [u8; 256];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:509:33: 509:67
    let mut _39: cita_types::Bloom;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:509:57: 509:66
    let mut _40: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:517:12: 517:43
    let mut _41: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:517:13: 517:43
    let mut _42: &[libproto::ReceiptWithOption]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:517:13: 517:43
    let _43: &[libproto::ReceiptWithOption]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:517:13: 517:32
    let mut _44: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:517:13: 517:32
    let mut _46: std::iter::Map<std::slice::Iter<'_, libproto::ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:518:42: 521:65
    let mut _47: std::slice::Iter<'_, libproto::ReceiptWithOption>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:518:42: 520:24
    let mut _48: &[libproto::ReceiptWithOption]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:518:42: 520:24
    let _49: &[libproto::ReceiptWithOption]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:518:42: 519:32
    let mut _50: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:518:42: 519:32
    let mut _52: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:523:53: 523:61
    let mut _54: &types::db_indexes::Hash2BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:524:28: 524:71
    let _55: types::db_indexes::Hash2BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:524:28: 524:59
    let mut _56: cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:524:47: 524:58
    let mut _57: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
    let mut _58: &cita_db::RocksDB;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
    let _59: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
    let mut _60: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
    let mut _61: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:526:17: 526:51
    let mut _62: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:527:17: 527:25
    let mut _63: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:528:17: 528:56
    let mut _64: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:528:17: 528:45
    let _65: &types::block_receipts::BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:528:29: 528:44
    let mut _66: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:533:12: 533:49
    let mut _67: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:533:13: 533:49
    let mut _68: &std::collections::HashMap<cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:533:13: 533:49
    let mut _69: std::collections::hash_map::Iter<'_, cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    let mut _70: std::collections::hash_map::Iter<'_, cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    let mut _71: &std::collections::HashMap<cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    let mut _73: std::option::Option<(&cita_types::H256, &types::transaction_index::TransactionIndex)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    let mut _74: &mut std::collections::hash_map::Iter<'_, cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    let mut _75: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:534:13: 541:14
    let mut _79: &types::db_indexes::Hash2TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:535:32: 535:69
    let _80: types::db_indexes::Hash2TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:535:32: 535:57
    let mut _81: cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:535:54: 535:56
    let mut _82: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
    let mut _83: &cita_db::RocksDB;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
    let _84: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
    let mut _85: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
    let mut _86: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:537:21: 537:55
    let mut _87: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:538:21: 538:29
    let mut _88: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:539:21: 539:46
    let mut _89: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:539:21: 539:35
    let mut _91: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _92: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _93: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _94: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _95: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _96: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _97: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _98: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _99: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _100: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
    let mut _101: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _102: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _103: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _104: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:54: 545:60
    let _105: &types::header::Header;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:54: 545:60
    let mut _107: &types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:546:26: 546:64
    let _108: types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:546:26: 546:52
    let mut _109: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:546:45: 546:51
    let mut _110: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
    let mut _111: &cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
    let _112: &cita_db::RocksDB;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
    let mut _113: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
    let mut _114: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:548:13: 548:49
    let mut _115: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:549:13: 549:23
    let mut _116: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:550:13: 550:44
    let mut _117: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:550:13: 550:33
    let _118: &types::header::Header;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:550:25: 550:32
    let mut _120: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
    let mut _121: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:12: 555:28
    let mut _122: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:12: 555:19
    let mut _123: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:22: 555:28
    let mut _124: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
    let mut _125: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:33: 555:39
    let mut _126: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:48: 555:60
    let mut _127: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:555:48: 555:55
    let mut _129: &types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:556:30: 556:66
    let _130: types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:556:30: 556:54
    let mut _131: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:556:47: 556:53
    let mut _132: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
    let mut _133: &cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
    let _134: &cita_db::RocksDB;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
    let mut _135: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
    let mut _136: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:558:17: 558:52
    let mut _137: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:559:17: 559:27
    let mut _138: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:560:17: 560:53
    let mut _139: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:560:17: 560:42
    let mut _140: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:560:29: 560:41
    let _141: &types::block::BlockBody;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:560:29: 560:41
    let mut _143: &types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:565:24: 565:65
    let _144: types::db_indexes::Hash2BlockNumber; // in scope 0 at cita-chain/core/src/libchain/chain.rs:565:24: 565:53
    let mut _145: cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:565:41: 565:52
    let mut _146: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
    let mut _147: &cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
    let _148: &cita_db::RocksDB;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
    let mut _149: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
    let mut _150: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:567:13: 567:47
    let mut _151: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:568:13: 568:21
    let mut _152: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:569:13: 569:44
    let mut _153: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:569:13: 569:33
    let _154: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:569:25: 569:32
    let mut _155: std::collections::hash_map::Iter<'_, types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    let mut _156: std::collections::hash_map::Iter<'_, types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    let mut _157: &std::collections::HashMap<types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    let mut _159: std::option::Option<(&types::db_indexes::LogGroupPosition, &types::log_blooms::LogBloomGroup)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    let mut _160: &mut std::collections::hash_map::Iter<'_, types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    let mut _161: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:573:9: 579:10
    let mut _164: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
    let mut _165: &cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
    let _166: &cita_db::RocksDB;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
    let mut _167: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
    let mut _168: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:575:17: 575:51
    let mut _169: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:576:17: 576:30
    let mut _170: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:577:17: 577:42
    let mut _171: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:577:17: 577:31
    let mut _172: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
    let mut _173: &cita_db::RocksDB;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
    let _174: &cita_db::RocksDB;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
    let mut _175: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
    let mut _176: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:583:13: 583:47
    let mut _177: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
    let mut _178: std::vec::Vec<u8>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:585:13: 585:49
    let mut _179: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:585:13: 585:38
    let _180: &cita_types::H256;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:585:25: 585:37
    let mut _181: types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:40: 588:46
    let mut _182: &mut types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
    let mut _183: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
    let mut _184: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
    let mut _185: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
    let _186: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:589:9: 589:69
    let mut _187: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:589:9: 589:69
    let mut _188: usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:589:35: 589:50
    let mut _189: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:589:35: 589:41
    let mut _190: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:589:52: 589:68
    let _191: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:590:9: 590:45
    let mut _192: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:590:38: 590:44
    let mut _197: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:588:45: 588:46
    let mut _198: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:586:9: 586:10
    let mut _199: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:578:13: 578:14
    let mut _200: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:570:9: 570:10
    let mut _201: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    let mut _202: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:561:13: 561:14
    let mut _203: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:562:9: 562:10
    let mut _204: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:551:9: 551:10
    let mut _205: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    let mut _206: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:540:17: 540:18
    let mut _207: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:541:13: 541:14
    let mut _208: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:529:13: 529:14
    let mut _209: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
    let mut _210: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    scope 1 {
        debug info => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        let _5: u64;                     // in scope 1 at cita-chain/core/src/libchain/chain.rs:496:13: 496:19
        scope 2 {
            debug number => _5;          // in scope 2 at cita-chain/core/src/libchain/chain.rs:496:13: 496:19
            let _9: cita_types::Bloom;   // in scope 2 at cita-chain/core/src/libchain/chain.rs:497:13: 497:22
            scope 3 {
                debug log_bloom => _9;   // in scope 3 at cita-chain/core/src/libchain/chain.rs:497:13: 497:22
                let _14: types::header::Header; // in scope 3 at cita-chain/core/src/libchain/chain.rs:498:13: 498:19
                scope 4 {
                    debug header => _14; // in scope 4 at cita-chain/core/src/libchain/chain.rs:498:13: 498:19
                    let _18: cita_types::H256; // in scope 4 at cita-chain/core/src/libchain/chain.rs:499:13: 499:24
                    scope 5 {
                        debug header_hash => _18; // in scope 5 at cita-chain/core/src/libchain/chain.rs:499:13: 499:24
                        let _21: std::collections::HashMap<cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 5 at cita-chain/core/src/libchain/chain.rs:501:13: 501:38
                        scope 6 {
                            debug block_transaction_indexes => _21; // in scope 6 at cita-chain/core/src/libchain/chain.rs:501:13: 501:38
                            let _25: std::collections::HashMap<types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:502:13: 502:26
                            let _28: types::bloomchain::group::BloomGroupChain<'_>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:505:17: 505:22
                            scope 7 {
                                debug blocks_blooms => _25; // in scope 7 at cita-chain/core/src/libchain/chain.rs:502:13: 502:26
                                let _45: std::vec::Vec<types::receipt::Receipt>; // in scope 7 at cita-chain/core/src/libchain/chain.rs:518:17: 518:25
                                let mut _72: std::collections::hash_map::Iter<'_, cita_types::H256, types::transaction_index::TransactionIndex>; // in scope 7 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                let _90: log::Level; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                let _106: std::vec::Vec<u8>; // in scope 7 at cita-chain/core/src/libchain/chain.rs:546:13: 546:23
                                scope 9 {
                                    debug receipts => _45; // in scope 9 at cita-chain/core/src/libchain/chain.rs:518:17: 518:25
                                    let _51: types::block_receipts::BlockReceipts; // in scope 9 at cita-chain/core/src/libchain/chain.rs:523:17: 523:31
                                    scope 10 {
                                        debug block_receipts => _51; // in scope 10 at cita-chain/core/src/libchain/chain.rs:523:17: 523:31
                                        let _53: std::vec::Vec<u8>; // in scope 10 at cita-chain/core/src/libchain/chain.rs:524:17: 524:25
                                        scope 11 {
                                            debug hash_key => _53; // in scope 11 at cita-chain/core/src/libchain/chain.rs:524:17: 524:25
                                            scope 12 {
                                            }
                                        }
                                    }
                                }
                                scope 13 {
                                    debug iter => _72; // in scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                    let _76: &cita_types::H256; // in scope 13 at cita-chain/core/src/libchain/chain.rs:534:18: 534:19
                                    let _77: &types::transaction_index::TransactionIndex; // in scope 13 at cita-chain/core/src/libchain/chain.rs:534:21: 534:22
                                    scope 14 {
                                        debug k => _76; // in scope 14 at cita-chain/core/src/libchain/chain.rs:534:18: 534:19
                                        debug v => _77; // in scope 14 at cita-chain/core/src/libchain/chain.rs:534:21: 534:22
                                        let _78: std::vec::Vec<u8>; // in scope 14 at cita-chain/core/src/libchain/chain.rs:535:21: 535:29
                                        scope 15 {
                                            debug hash_key => _78; // in scope 15 at cita-chain/core/src/libchain/chain.rs:535:21: 535:29
                                            scope 16 {
                                            }
                                        }
                                    }
                                }
                                scope 17 {
                                    debug lvl => _90; // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                    let mut _194: &(&str, &str, &str, u32); // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                    let mut _195: &[&str; 1]; // in scope 17 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
                                    let mut _196: &log::LevelFilter; // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                }
                                scope 18 {
                                    debug number_key => _106; // in scope 18 at cita-chain/core/src/libchain/chain.rs:546:13: 546:23
                                    scope 19 {
                                        let _119: u64; // in scope 19 at cita-chain/core/src/libchain/chain.rs:554:13: 554:20
                                        scope 20 {
                                            debug mheight => _119; // in scope 20 at cita-chain/core/src/libchain/chain.rs:554:13: 554:20
                                            let _128: std::vec::Vec<u8>; // in scope 20 at cita-chain/core/src/libchain/chain.rs:556:17: 556:27
                                            let _142: std::vec::Vec<u8>; // in scope 20 at cita-chain/core/src/libchain/chain.rs:565:13: 565:21
                                            scope 21 {
                                                debug number_key => _128; // in scope 21 at cita-chain/core/src/libchain/chain.rs:556:17: 556:27
                                                scope 22 {
                                                }
                                            }
                                            scope 23 {
                                                debug hash_key => _142; // in scope 23 at cita-chain/core/src/libchain/chain.rs:565:13: 565:21
                                                scope 24 {
                                                    let mut _158: std::collections::hash_map::Iter<'_, types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup>; // in scope 24 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                                    let mut _193: &types::db_indexes::CurrentHash; // in scope 24 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
                                                    scope 25 {
                                                        debug iter => _158; // in scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                                        let _162: &types::db_indexes::LogGroupPosition; // in scope 25 at cita-chain/core/src/libchain/chain.rs:573:14: 573:15
                                                        let _163: &types::log_blooms::LogBloomGroup; // in scope 25 at cita-chain/core/src/libchain/chain.rs:573:17: 573:18
                                                        scope 26 {
                                                            debug k => _162; // in scope 26 at cita-chain/core/src/libchain/chain.rs:573:14: 573:15
                                                            debug v => _163; // in scope 26 at cita-chain/core/src/libchain/chain.rs:573:17: 573:18
                                                            scope 27 {
                                                            }
                                                        }
                                                    }
                                                    scope 28 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 8 {
                                debug group => _28; // in scope 8 at cita-chain/core/src/libchain/chain.rs:505:17: 505:22
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _205 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _199 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _204 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _206 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _207 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _208 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _209 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _201 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _198 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _200 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _202 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _197 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _203 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _210 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:495:13: 495:17
        _4 = libproto::ExecutedResult::get_executed_info(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:495:20: 495:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:495:24: 495:41
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> &'a ExecutedInfo {libproto::ExecutedResult::get_executed_info}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _4;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:496:22: 496:39
        _7 = ExecutedInfo::get_header(move _8) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:496:22: 496:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:496:27: 496:37
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:496:22: 496:52
        _5 = ExecutedHeader::get_height(move _6) -> bb3; // scope 1 at cita-chain/core/src/libchain/chain.rs:496:22: 496:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:496:40: 496:50
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_height}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = _4;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:497:40: 497:57
        _12 = ExecutedInfo::get_header(move _13) -> bb4; // scope 2 at cita-chain/core/src/libchain/chain.rs:497:40: 497:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:497:45: 497:55
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _12;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:497:40: 497:73
        _10 = ExecutedHeader::get_log_bloom(move _11) -> bb5; // scope 2 at cita-chain/core/src/libchain/chain.rs:497:40: 497:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:497:58: 497:71
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> &'a [u8] {ExecutedHeader::get_log_bloom}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = <cita_types::Bloom as From<&[u8]>>::from(move _10) -> bb6; // scope 2 at cita-chain/core/src/libchain/chain.rs:497:25: 497:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:497:25: 497:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> cita_types::Bloom {<cita_types::Bloom as From<&[u8]>>::from}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = libproto::ExecutedResult::get_executed_info(_2) -> bb7; // scope 3 at cita-chain/core/src/libchain/chain.rs:498:49: 498:72
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:498:53: 498:70
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> &'a ExecutedInfo {libproto::ExecutedResult::get_executed_info}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = _16;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:498:49: 498:72
        _17 = &((*_3).0: types::header::OpenHeader); // scope 3 at cita-chain/core/src/libchain/chain.rs:498:74: 498:87
        _210 = const true;               // scope 3 at cita-chain/core/src/libchain/chain.rs:498:22: 498:88
        _14 = Header::from_executed_info(move _15, _17) -> bb8; // scope 3 at cita-chain/core/src/libchain/chain.rs:498:22: 498:88
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:498:22: 498:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ExecutedInfo, &'b OpenHeader) -> Header {Header::from_executed_info}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = &_14;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:499:27: 499:40
        _19 = Header::hash(move _20) -> [return: bb9, unwind: bb151]; // scope 4 at cita-chain/core/src/libchain/chain.rs:499:27: 499:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:499:34: 499:38
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = std::option::Option::<H256>::unwrap(move _19) -> [return: bb10, unwind: bb151]; // scope 4 at cita-chain/core/src/libchain/chain.rs:499:27: 499:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:499:41: 499:47
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = OpenBlock::body(_3) -> [return: bb11, unwind: bb151]; // scope 5 at cita-chain/core/src/libchain/chain.rs:501:41: 501:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:501:47: 501:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a types::block::BlockBody {OpenBlock::body}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = _23;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:501:41: 501:86
        _24 = _18;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:501:74: 501:85
        _21 = types::block::BlockBody::transaction_indexes(move _22, move _24) -> [return: bb12, unwind: bb151]; // scope 5 at cita-chain/core/src/libchain/chain.rs:501:41: 501:86
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:501:54: 501:73
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody, H256) -> HashMap<H256, TransactionIndex> {types::block::BlockBody::transaction_indexes}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = &_9;                       // scope 6 at cita-chain/core/src/libchain/chain.rs:502:74: 502:93
        _26 = cita_types::Bloom::is_zero(move _27) -> [return: bb13, unwind: bb122]; // scope 6 at cita-chain/core/src/libchain/chain.rs:502:74: 502:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:502:84: 502:91
                                         // + literal: Const { ty: for<'a> fn(&'a cita_types::Bloom) -> bool {cita_types::Bloom::is_zero}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _26) -> [0: bb15, otherwise: bb14]; // scope 6 at cita-chain/core/src/libchain/chain.rs:502:74: 502:93
    }

    bb14: {
        _25 = HashMap::<LogGroupPosition, LogBloomGroup>::new() -> [return: bb152, unwind: bb122]; // scope 6 at cita-chain/core/src/libchain/chain.rs:503:13: 503:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:503:13: 503:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> HashMap<LogGroupPosition, LogBloomGroup> {HashMap::<LogGroupPosition, LogBloomGroup>::new}, val: Value(<ZST>) }
    }

    bb15: {
        _29 = ((*_1).0: types::bloomchain::Config); // scope 6 at cita-chain/core/src/libchain/chain.rs:505:46: 505:64
        _30 = _1 as &dyn types::bloomchain::group::BloomGroupDatabase (Pointer(Unsize)); // scope 6 at cita-chain/core/src/libchain/chain.rs:505:66: 505:70
        _28 = BloomGroupChain::<'_>::new(move _29, move _30) -> [return: bb16, unwind: bb122]; // scope 6 at cita-chain/core/src/libchain/chain.rs:505:25: 505:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:505:25: 505:45
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(types::bloomchain::Config, &dyn BloomGroupDatabase) -> BloomGroupChain<'_> {BloomGroupChain::<'_>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &_28;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 510:18
        _36 = _5;                        // scope 8 at cita-chain/core/src/libchain/chain.rs:508:21: 508:27
        _35 = move _36 as usize (IntToInt); // scope 8 at cita-chain/core/src/libchain/chain.rs:508:21: 508:47
        _39 = _9;                        // scope 8 at cita-chain/core/src/libchain/chain.rs:509:57: 509:66
        _38 = <cita_types::Bloom as Into<[u8; 256]>>::into(move _39) -> [return: bb17, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:509:33: 509:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:509:33: 509:56
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(cita_types::Bloom) -> [u8; 256] {<cita_types::Bloom as Into<[u8; 256]>>::into}, val: Value(<ZST>) }
    }

    bb17: {
        _37 = <types::bloomchain::Bloom as From<[u8; 256]>>::from(move _38) -> [return: bb18, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:509:21: 509:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:509:21: 509:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn([u8; 256]) -> types::bloomchain::Bloom {<types::bloomchain::Bloom as From<[u8; 256]>>::from}, val: Value(<ZST>) }
    }

    bb18: {
        _33 = BloomGroupChain::<'_>::insert(move _34, move _35, move _37) -> [return: bb19, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 510:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:507:18: 507:24
                                         // + literal: Const { ty: for<'a> fn(&'a BloomGroupChain<'_>, usize, types::bloomchain::Bloom) -> HashMap<GroupPosition, BloomGroup> {BloomGroupChain::<'_>::insert}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = <HashMap<GroupPosition, BloomGroup> as IntoIterator>::into_iter(move _33) -> [return: bb20, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 511:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:511:18: 511:27
                                         // + literal: Const { ty: fn(HashMap<GroupPosition, BloomGroup>) -> <HashMap<GroupPosition, BloomGroup> as IntoIterator>::IntoIter {<HashMap<GroupPosition, BloomGroup> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb20: {
        _31 = <std::collections::hash_map::IntoIter<GroupPosition, BloomGroup> as Iterator>::map::<(LogGroupPosition, LogBloomGroup), [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]>(move _32, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]) -> [return: bb21, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 512:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:512:18: 512:21
                                         // + literal: Const { ty: fn(std::collections::hash_map::IntoIter<GroupPosition, BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]) -> std::iter::Map<std::collections::hash_map::IntoIter<GroupPosition, BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]> {<std::collections::hash_map::IntoIter<GroupPosition, BloomGroup> as Iterator>::map::<(LogGroupPosition, LogBloomGroup), [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25], val: Value(<ZST>) }
    }

    bb21: {
        _25 = <std::iter::Map<std::collections::hash_map::IntoIter<GroupPosition, BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]> as Iterator>::collect::<HashMap<LogGroupPosition, LogBloomGroup>>(move _31) -> [return: bb153, unwind: bb122]; // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 513:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:513:18: 513:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::collections::hash_map::IntoIter<GroupPosition, BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]>) -> HashMap<LogGroupPosition, LogBloomGroup> {<std::iter::Map<std::collections::hash_map::IntoIter<GroupPosition, BloomGroup>, [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25]> as Iterator>::collect::<HashMap<LogGroupPosition, LogBloomGroup>>}, val: Value(<ZST>) }
    }

    bb22: {
        _44 = _4;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:517:13: 517:32
        _43 = ExecutedInfo::get_receipts(move _44) -> [return: bb23, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:517:13: 517:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:517:18: 517:30
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a [ReceiptWithOption] {ExecutedInfo::get_receipts}, val: Value(<ZST>) }
    }

    bb23: {
        _42 = _43;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:517:13: 517:43
        _41 = core::slice::<impl [ReceiptWithOption]>::is_empty(move _42) -> [return: bb24, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:517:13: 517:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:517:33: 517:41
                                         // + literal: Const { ty: for<'a> fn(&'a [ReceiptWithOption]) -> bool {core::slice::<impl [ReceiptWithOption]>::is_empty}, val: Value(<ZST>) }
    }

    bb24: {
        _40 = Not(move _41);             // scope 7 at cita-chain/core/src/libchain/chain.rs:517:12: 517:43
        switchInt(move _40) -> [0: bb37, otherwise: bb25]; // scope 7 at cita-chain/core/src/libchain/chain.rs:517:12: 517:43
    }

    bb25: {
        _50 = _4;                        // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 519:32
        _49 = ExecutedInfo::get_receipts(move _50) -> [return: bb26, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 519:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:519:18: 519:30
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a [ReceiptWithOption] {ExecutedInfo::get_receipts}, val: Value(<ZST>) }
    }

    bb26: {
        _48 = _49;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 520:24
        _47 = core::slice::<impl [ReceiptWithOption]>::iter(move _48) -> [return: bb27, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 520:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:520:18: 520:22
                                         // + literal: Const { ty: for<'a> fn(&'a [ReceiptWithOption]) -> std::slice::Iter<'a, ReceiptWithOption> {core::slice::<impl [ReceiptWithOption]>::iter}, val: Value(<ZST>) }
    }

    bb27: {
        _46 = <std::slice::Iter<'_, ReceiptWithOption> as Iterator>::map::<types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]>(move _47, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]) -> [return: bb28, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 521:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:521:18: 521:21
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]) -> std::iter::Map<std::slice::Iter<'_, ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]> {<std::slice::Iter<'_, ReceiptWithOption> as Iterator>::map::<types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25], val: Value(<ZST>) }
    }

    bb28: {
        _45 = <std::iter::Map<std::slice::Iter<'_, ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]> as Iterator>::collect::<Vec<types::receipt::Receipt>>(move _46) -> [return: bb29, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:518:42: 522:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:522:18: 522:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]>) -> Vec<types::receipt::Receipt> {<std::iter::Map<std::slice::Iter<'_, ReceiptWithOption>, [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25]> as Iterator>::collect::<Vec<types::receipt::Receipt>>}, val: Value(<ZST>) }
    }

    bb29: {
        _52 = move _45;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:523:53: 523:61
        _51 = BlockReceipts::new(move _52) -> [return: bb30, unwind: bb121]; // scope 9 at cita-chain/core/src/libchain/chain.rs:523:34: 523:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:523:34: 523:52
                                         // + literal: Const { ty: fn(Vec<types::receipt::Receipt>) -> BlockReceipts {BlockReceipts::new}, val: Value(<ZST>) }
    }

    bb30: {
        _56 = _18;                       // scope 10 at cita-chain/core/src/libchain/chain.rs:524:47: 524:58
        _55 = Hash2BlockReceipts(move _56); // scope 10 at cita-chain/core/src/libchain/chain.rs:524:28: 524:59
        _54 = &_55;                      // scope 10 at cita-chain/core/src/libchain/chain.rs:524:28: 524:71
        _53 = <Hash2BlockReceipts as DBIndex>::get_index(move _54) -> [return: bb31, unwind: bb120]; // scope 10 at cita-chain/core/src/libchain/chain.rs:524:28: 524:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:524:60: 524:69
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2BlockReceipts) -> Vec<u8> {<Hash2BlockReceipts as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb31: {
        _209 = const true;               // scope 10 at cita-chain/core/src/libchain/chain.rs:524:70: 524:71
        _60 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 11 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
        _59 = <Arc<RocksDB> as Deref>::deref(move _60) -> [return: bb32, unwind: bb149]; // scope 11 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:525:21: 529:14
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb32: {
        _58 = _59;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
        _61 = const std::option::Option::<DataCategory>::Some(Extra); // scope 11 at cita-chain/core/src/libchain/chain.rs:526:17: 526:51
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _209 = const false;              // scope 11 at cita-chain/core/src/libchain/chain.rs:527:17: 527:25
        _208 = const true;               // scope 11 at cita-chain/core/src/libchain/chain.rs:527:17: 527:25
        _62 = move _53;                  // scope 11 at cita-chain/core/src/libchain/chain.rs:527:17: 527:25
        _65 = &_51;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:528:29: 528:44
        _64 = encode::<BlockReceipts>(_65) -> [return: bb33, unwind: bb147]; // scope 11 at cita-chain/core/src/libchain/chain.rs:528:17: 528:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:528:17: 528:28
                                         // + literal: Const { ty: for<'a> fn(&'a BlockReceipts) -> elastic_array::ElasticArray1024<u8> {encode::<BlockReceipts>}, val: Value(<ZST>) }
    }

    bb33: {
        _63 = elastic_array::ElasticArray1024::<u8>::into_vec(move _64) -> [return: bb34, unwind: bb147]; // scope 11 at cita-chain/core/src/libchain/chain.rs:528:17: 528:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:528:46: 528:54
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb34: {
        _208 = const false;              // scope 11 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
        _57 = <RocksDB as Database>::insert(move _58, move _61, move _62, move _63) -> [return: bb35, unwind: bb147]; // scope 11 at cita-chain/core/src/libchain/chain.rs:525:21: 529:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:525:29: 525:35
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb35: {
        _208 = const false;              // scope 11 at cita-chain/core/src/libchain/chain.rs:529:13: 529:14
        drop(_57) -> [return: bb36, unwind: bb149]; // scope 11 at cita-chain/core/src/libchain/chain.rs:529:14: 529:15
    }

    bb36: {
        _209 = const false;              // scope 10 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
        drop(_51) -> [return: bb37, unwind: bb121]; // scope 9 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
    }

    bb37: {
        _68 = &_21;                      // scope 7 at cita-chain/core/src/libchain/chain.rs:533:13: 533:49
        _67 = HashMap::<H256, TransactionIndex>::is_empty(move _68) -> [return: bb38, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:533:13: 533:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:533:39: 533:47
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<H256, TransactionIndex>) -> bool {HashMap::<H256, TransactionIndex>::is_empty}, val: Value(<ZST>) }
    }

    bb38: {
        _66 = Not(move _67);             // scope 7 at cita-chain/core/src/libchain/chain.rs:533:12: 533:49
        switchInt(move _66) -> [0: bb52, otherwise: bb39]; // scope 7 at cita-chain/core/src/libchain/chain.rs:533:12: 533:49
    }

    bb39: {
        _71 = &_21;                      // scope 7 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
        _70 = HashMap::<H256, TransactionIndex>::iter(move _71) -> [return: bb40, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:534:53: 534:57
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<H256, TransactionIndex>) -> std::collections::hash_map::Iter<'a, H256, TransactionIndex> {HashMap::<H256, TransactionIndex>::iter}, val: Value(<ZST>) }
    }

    bb40: {
        _69 = <std::collections::hash_map::Iter<'_, H256, TransactionIndex> as IntoIterator>::into_iter(move _70) -> [return: bb41, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, H256, TransactionIndex>) -> <std::collections::hash_map::Iter<'_, H256, TransactionIndex> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, H256, TransactionIndex> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb41: {
        _72 = move _69;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
        goto -> bb42;                    // scope 13 at cita-chain/core/src/libchain/chain.rs:534:13: 541:14
    }

    bb42: {
        _74 = &mut _72;                  // scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
        _73 = <std::collections::hash_map::Iter<'_, H256, TransactionIndex> as Iterator>::next(_74) -> [return: bb43, unwind: bb121]; // scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:534:27: 534:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, H256, TransactionIndex>) -> std::option::Option<<std::collections::hash_map::Iter<'_, H256, TransactionIndex> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, H256, TransactionIndex> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb43: {
        _75 = discriminant(_73);         // scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
        switchInt(move _75) -> [0: bb52, 1: bb44, otherwise: bb45]; // scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    }

    bb44: {
        _76 = (((_73 as Some).0: (&cita_types::H256, &types::transaction_index::TransactionIndex)).0: &cita_types::H256); // scope 13 at cita-chain/core/src/libchain/chain.rs:534:18: 534:19
        _77 = (((_73 as Some).0: (&cita_types::H256, &types::transaction_index::TransactionIndex)).1: &types::transaction_index::TransactionIndex); // scope 13 at cita-chain/core/src/libchain/chain.rs:534:21: 534:22
        _81 = (*_76);                    // scope 14 at cita-chain/core/src/libchain/chain.rs:535:54: 535:56
        _80 = Hash2TransactionIndex(move _81); // scope 14 at cita-chain/core/src/libchain/chain.rs:535:32: 535:57
        _79 = &_80;                      // scope 14 at cita-chain/core/src/libchain/chain.rs:535:32: 535:69
        _78 = <Hash2TransactionIndex as DBIndex>::get_index(move _79) -> [return: bb46, unwind: bb121]; // scope 14 at cita-chain/core/src/libchain/chain.rs:535:32: 535:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:535:58: 535:67
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2TransactionIndex) -> Vec<u8> {<Hash2TransactionIndex as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb45: {
        unreachable;                     // scope 13 at cita-chain/core/src/libchain/chain.rs:534:27: 534:59
    }

    bb46: {
        _207 = const true;               // scope 14 at cita-chain/core/src/libchain/chain.rs:535:68: 535:69
        _85 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 15 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
        _84 = <Arc<RocksDB> as Deref>::deref(move _85) -> [return: bb47, unwind: bb145]; // scope 15 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:536:25: 540:18
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb47: {
        _83 = _84;                       // scope 15 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
        _86 = const std::option::Option::<DataCategory>::Some(Extra); // scope 15 at cita-chain/core/src/libchain/chain.rs:537:21: 537:55
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _207 = const false;              // scope 15 at cita-chain/core/src/libchain/chain.rs:538:21: 538:29
        _206 = const true;               // scope 15 at cita-chain/core/src/libchain/chain.rs:538:21: 538:29
        _87 = move _78;                  // scope 15 at cita-chain/core/src/libchain/chain.rs:538:21: 538:29
        _89 = encode::<TransactionIndex>(_77) -> [return: bb48, unwind: bb143]; // scope 15 at cita-chain/core/src/libchain/chain.rs:539:21: 539:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:539:21: 539:32
                                         // + literal: Const { ty: for<'a> fn(&'a TransactionIndex) -> elastic_array::ElasticArray1024<u8> {encode::<TransactionIndex>}, val: Value(<ZST>) }
    }

    bb48: {
        _88 = elastic_array::ElasticArray1024::<u8>::into_vec(move _89) -> [return: bb49, unwind: bb143]; // scope 15 at cita-chain/core/src/libchain/chain.rs:539:21: 539:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:539:36: 539:44
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb49: {
        _206 = const false;              // scope 15 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
        _82 = <RocksDB as Database>::insert(move _83, move _86, move _87, move _88) -> [return: bb50, unwind: bb143]; // scope 15 at cita-chain/core/src/libchain/chain.rs:536:25: 540:18
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:536:33: 536:39
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb50: {
        _206 = const false;              // scope 15 at cita-chain/core/src/libchain/chain.rs:540:17: 540:18
        drop(_82) -> [return: bb51, unwind: bb145]; // scope 15 at cita-chain/core/src/libchain/chain.rs:540:18: 540:19
    }

    bb51: {
        _207 = const false;              // scope 14 at cita-chain/core/src/libchain/chain.rs:541:13: 541:14
        goto -> bb42;                    // scope 13 at cita-chain/core/src/libchain/chain.rs:534:13: 541:14
    }

    bb52: {
        _90 = log::Level::Trace;         // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _93 = &_90;                      // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _196 = const _;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_db_result, [], Some(promoted[3])) }
        _92 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _93, _196) -> [return: bb56, unwind: bb121]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb53: {
        _91 = const false;               // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb54: {
        _95 = &_90;                      // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _97 = log::max_level() -> [return: bb57, unwind: bb121]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb55: {
        switchInt(move _91) -> [0: bb62, otherwise: bb59]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb56: {
        switchInt(move _92) -> [0: bb53, otherwise: bb54]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        _96 = &_97;                      // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _94 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _95, move _96) -> [return: bb58, unwind: bb121]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb58: {
        _91 = move _94;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb59: {
        _195 = const _;                  // scope 17 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:545:16: 545:52
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::set_db_result, [], Some(promoted[2])) }
        _100 = _195 as &[&str] (Pointer(Unsize)); // scope 17 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
        _105 = &_14;                     // scope 17 at cita-chain/core/src/libchain/chain.rs:545:54: 545:60
        _104 = core::fmt::ArgumentV1::<'_>::new_debug::<Header>(_105) -> [return: bb60, unwind: bb121]; // scope 17 at cita-chain/core/src/libchain/chain.rs:545:54: 545:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:545:54: 545:60
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b Header) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Header>}, val: Value(<ZST>) }
    }

    bb60: {
        _103 = [move _104];              // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _102 = &_103;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _101 = _102 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _99 = Arguments::<'_>::new_v1(move _100, move _101) -> [return: bb61, unwind: bb121]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb61: {
        _194 = const _;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_db_result, [], Some(promoted[1])) }
        _98 = log::__private_api_log(move _99, _90, _194) -> [return: bb154, unwind: bb121]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb62: {
        _109 = _5;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:546:45: 546:51
        _108 = BlockNumber2Header(move _109); // scope 7 at cita-chain/core/src/libchain/chain.rs:546:26: 546:52
        _107 = &_108;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:546:26: 546:64
        _106 = <BlockNumber2Header as DBIndex>::get_index(move _107) -> [return: bb63, unwind: bb121]; // scope 7 at cita-chain/core/src/libchain/chain.rs:546:26: 546:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:546:53: 546:62
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Header) -> Vec<u8> {<BlockNumber2Header as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb63: {
        _205 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:546:63: 546:64
        _113 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 18 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
        _112 = <Arc<RocksDB> as Deref>::deref(move _113) -> [return: bb64, unwind: bb141]; // scope 18 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:547:17: 551:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb64: {
        _111 = _112;                     // scope 18 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
        _114 = const std::option::Option::<DataCategory>::Some(Headers); // scope 18 at cita-chain/core/src/libchain/chain.rs:548:13: 548:49
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x01)) }
        _205 = const false;              // scope 18 at cita-chain/core/src/libchain/chain.rs:549:13: 549:23
        _204 = const true;               // scope 18 at cita-chain/core/src/libchain/chain.rs:549:13: 549:23
        _115 = move _106;                // scope 18 at cita-chain/core/src/libchain/chain.rs:549:13: 549:23
        _118 = &_14;                     // scope 18 at cita-chain/core/src/libchain/chain.rs:550:25: 550:32
        _117 = encode::<Header>(_118) -> [return: bb65, unwind: bb139]; // scope 18 at cita-chain/core/src/libchain/chain.rs:550:13: 550:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:550:13: 550:24
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> elastic_array::ElasticArray1024<u8> {encode::<Header>}, val: Value(<ZST>) }
    }

    bb65: {
        _116 = elastic_array::ElasticArray1024::<u8>::into_vec(move _117) -> [return: bb66, unwind: bb139]; // scope 18 at cita-chain/core/src/libchain/chain.rs:550:13: 550:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:550:34: 550:42
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb66: {
        _204 = const false;              // scope 18 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
        _110 = <RocksDB as Database>::insert(move _111, move _114, move _115, move _116) -> [return: bb67, unwind: bb139]; // scope 18 at cita-chain/core/src/libchain/chain.rs:547:17: 551:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:547:25: 547:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb67: {
        _204 = const false;              // scope 18 at cita-chain/core/src/libchain/chain.rs:551:9: 551:10
        drop(_110) -> [return: bb68, unwind: bb141]; // scope 18 at cita-chain/core/src/libchain/chain.rs:551:10: 551:11
    }

    bb68: {
        _119 = chain::Chain::get_max_store_height(_1) -> [return: bb69, unwind: bb141]; // scope 19 at cita-chain/core/src/libchain/chain.rs:554:23: 554:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:554:28: 554:48
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_max_store_height}, val: Value(<ZST>) }
    }

    bb69: {
        _122 = _119;                     // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:19
        _123 = _5;                       // scope 20 at cita-chain/core/src/libchain/chain.rs:555:22: 555:28
        _121 = Lt(move _122, move _123); // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:28
        switchInt(move _121) -> [0: bb71, otherwise: bb70]; // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
    }

    bb70: {
        _120 = const true;               // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
        goto -> bb72;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
    }

    bb71: {
        _125 = _5;                       // scope 20 at cita-chain/core/src/libchain/chain.rs:555:33: 555:39
        switchInt(move _125) -> [0: bb74, otherwise: bb73]; // scope 20 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
    }

    bb72: {
        switchInt(move _120) -> [0: bb84, otherwise: bb76]; // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
    }

    bb73: {
        _124 = const false;              // scope 20 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
        goto -> bb75;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
    }

    bb74: {
        _127 = _119;                     // scope 20 at cita-chain/core/src/libchain/chain.rs:555:48: 555:55
        _126 = Eq(move _127, const 0_u64); // scope 20 at cita-chain/core/src/libchain/chain.rs:555:48: 555:60
        _124 = move _126;                // scope 20 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
        goto -> bb75;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:555:32: 555:61
    }

    bb75: {
        _120 = move _124;                // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
        goto -> bb72;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:555:12: 555:61
    }

    bb76: {
        _131 = _5;                       // scope 20 at cita-chain/core/src/libchain/chain.rs:556:47: 556:53
        _130 = BlockNumber2Body(move _131); // scope 20 at cita-chain/core/src/libchain/chain.rs:556:30: 556:54
        _129 = &_130;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:556:30: 556:66
        _128 = <BlockNumber2Body as DBIndex>::get_index(move _129) -> [return: bb77, unwind: bb141]; // scope 20 at cita-chain/core/src/libchain/chain.rs:556:30: 556:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:556:55: 556:64
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Body) -> Vec<u8> {<BlockNumber2Body as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb77: {
        _203 = const true;               // scope 20 at cita-chain/core/src/libchain/chain.rs:556:65: 556:66
        _135 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 21 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
        _134 = <Arc<RocksDB> as Deref>::deref(move _135) -> [return: bb78, unwind: bb137]; // scope 21 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:557:21: 561:14
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb78: {
        _133 = _134;                     // scope 21 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
        _136 = const std::option::Option::<DataCategory>::Some(Bodies); // scope 21 at cita-chain/core/src/libchain/chain.rs:558:17: 558:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x02)) }
        _203 = const false;              // scope 21 at cita-chain/core/src/libchain/chain.rs:559:17: 559:27
        _202 = const true;               // scope 21 at cita-chain/core/src/libchain/chain.rs:559:17: 559:27
        _137 = move _128;                // scope 21 at cita-chain/core/src/libchain/chain.rs:559:17: 559:27
        _141 = OpenBlock::body(_3) -> [return: bb79, unwind: bb135]; // scope 21 at cita-chain/core/src/libchain/chain.rs:560:29: 560:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:560:35: 560:39
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a types::block::BlockBody {OpenBlock::body}, val: Value(<ZST>) }
    }

    bb79: {
        _140 = _141;                     // scope 21 at cita-chain/core/src/libchain/chain.rs:560:29: 560:41
        _139 = encode::<types::block::BlockBody>(move _140) -> [return: bb80, unwind: bb135]; // scope 21 at cita-chain/core/src/libchain/chain.rs:560:17: 560:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:560:17: 560:28
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> elastic_array::ElasticArray1024<u8> {encode::<types::block::BlockBody>}, val: Value(<ZST>) }
    }

    bb80: {
        _138 = elastic_array::ElasticArray1024::<u8>::into_vec(move _139) -> [return: bb81, unwind: bb135]; // scope 21 at cita-chain/core/src/libchain/chain.rs:560:17: 560:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:560:43: 560:51
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb81: {
        _202 = const false;              // scope 21 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
        _132 = <RocksDB as Database>::insert(move _133, move _136, move _137, move _138) -> [return: bb82, unwind: bb135]; // scope 21 at cita-chain/core/src/libchain/chain.rs:557:21: 561:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:557:29: 557:35
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb82: {
        _202 = const false;              // scope 21 at cita-chain/core/src/libchain/chain.rs:561:13: 561:14
        drop(_132) -> [return: bb83, unwind: bb137]; // scope 21 at cita-chain/core/src/libchain/chain.rs:561:14: 561:15
    }

    bb83: {
        _203 = const false;              // scope 20 at cita-chain/core/src/libchain/chain.rs:562:9: 562:10
        goto -> bb84;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:555:9: 562:10
    }

    bb84: {
        _145 = _18;                      // scope 20 at cita-chain/core/src/libchain/chain.rs:565:41: 565:52
        _144 = Hash2BlockNumber(move _145); // scope 20 at cita-chain/core/src/libchain/chain.rs:565:24: 565:53
        _143 = &_144;                    // scope 20 at cita-chain/core/src/libchain/chain.rs:565:24: 565:65
        _142 = <Hash2BlockNumber as DBIndex>::get_index(move _143) -> [return: bb85, unwind: bb141]; // scope 20 at cita-chain/core/src/libchain/chain.rs:565:24: 565:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:565:54: 565:63
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2BlockNumber) -> Vec<u8> {<Hash2BlockNumber as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb85: {
        _201 = const true;               // scope 20 at cita-chain/core/src/libchain/chain.rs:565:64: 565:65
        _149 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 23 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
        _148 = <Arc<RocksDB> as Deref>::deref(move _149) -> [return: bb86, unwind: bb133]; // scope 23 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:566:17: 570:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb86: {
        _147 = _148;                     // scope 23 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
        _150 = const std::option::Option::<DataCategory>::Some(Extra); // scope 23 at cita-chain/core/src/libchain/chain.rs:567:13: 567:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _201 = const false;              // scope 23 at cita-chain/core/src/libchain/chain.rs:568:13: 568:21
        _200 = const true;               // scope 23 at cita-chain/core/src/libchain/chain.rs:568:13: 568:21
        _151 = move _142;                // scope 23 at cita-chain/core/src/libchain/chain.rs:568:13: 568:21
        _154 = &_5;                      // scope 23 at cita-chain/core/src/libchain/chain.rs:569:25: 569:32
        _153 = encode::<u64>(_154) -> [return: bb87, unwind: bb131]; // scope 23 at cita-chain/core/src/libchain/chain.rs:569:13: 569:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:569:13: 569:24
                                         // + literal: Const { ty: for<'a> fn(&'a u64) -> elastic_array::ElasticArray1024<u8> {encode::<u64>}, val: Value(<ZST>) }
    }

    bb87: {
        _152 = elastic_array::ElasticArray1024::<u8>::into_vec(move _153) -> [return: bb88, unwind: bb131]; // scope 23 at cita-chain/core/src/libchain/chain.rs:569:13: 569:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:569:34: 569:42
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb88: {
        _200 = const false;              // scope 23 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
        _146 = <RocksDB as Database>::insert(move _147, move _150, move _151, move _152) -> [return: bb89, unwind: bb131]; // scope 23 at cita-chain/core/src/libchain/chain.rs:566:17: 570:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:566:25: 566:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb89: {
        _200 = const false;              // scope 23 at cita-chain/core/src/libchain/chain.rs:570:9: 570:10
        drop(_146) -> [return: bb90, unwind: bb133]; // scope 23 at cita-chain/core/src/libchain/chain.rs:570:10: 570:11
    }

    bb90: {
        _157 = &_25;                     // scope 24 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
        _156 = HashMap::<LogGroupPosition, LogBloomGroup>::iter(move _157) -> [return: bb91, unwind: bb133]; // scope 24 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:573:37: 573:41
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<LogGroupPosition, LogBloomGroup>) -> std::collections::hash_map::Iter<'a, LogGroupPosition, LogBloomGroup> {HashMap::<LogGroupPosition, LogBloomGroup>::iter}, val: Value(<ZST>) }
    }

    bb91: {
        _155 = <std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as IntoIterator>::into_iter(move _156) -> [return: bb92, unwind: bb133]; // scope 24 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup>) -> <std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb92: {
        _158 = move _155;                // scope 24 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
        goto -> bb93;                    // scope 25 at cita-chain/core/src/libchain/chain.rs:573:9: 579:10
    }

    bb93: {
        _160 = &mut _158;                // scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
        _159 = <std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as Iterator>::next(_160) -> [return: bb94, unwind: bb133]; // scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:573:23: 573:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup>) -> std::option::Option<<std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, LogGroupPosition, LogBloomGroup> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb94: {
        _161 = discriminant(_159);       // scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
        switchInt(move _161) -> [0: bb97, 1: bb95, otherwise: bb96]; // scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    }

    bb95: {
        _162 = (((_159 as Some).0: (&types::db_indexes::LogGroupPosition, &types::log_blooms::LogBloomGroup)).0: &types::db_indexes::LogGroupPosition); // scope 25 at cita-chain/core/src/libchain/chain.rs:573:14: 573:15
        _163 = (((_159 as Some).0: (&types::db_indexes::LogGroupPosition, &types::log_blooms::LogBloomGroup)).1: &types::log_blooms::LogBloomGroup); // scope 25 at cita-chain/core/src/libchain/chain.rs:573:17: 573:18
        _167 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 26 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
        _166 = <Arc<RocksDB> as Deref>::deref(move _167) -> [return: bb98, unwind: bb133]; // scope 26 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:574:21: 578:14
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb96: {
        unreachable;                     // scope 25 at cita-chain/core/src/libchain/chain.rs:573:23: 573:43
    }

    bb97: {
        _175 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 24 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
        _174 = <Arc<RocksDB> as Deref>::deref(move _175) -> [return: bb103, unwind: bb133]; // scope 24 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:582:17: 586:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb98: {
        _165 = _166;                     // scope 26 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
        _168 = const std::option::Option::<DataCategory>::Some(Extra); // scope 26 at cita-chain/core/src/libchain/chain.rs:575:17: 575:51
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _169 = <LogGroupPosition as DBIndex>::get_index(_162) -> [return: bb99, unwind: bb133]; // scope 26 at cita-chain/core/src/libchain/chain.rs:576:17: 576:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:576:19: 576:28
                                         // + literal: Const { ty: for<'a> fn(&'a LogGroupPosition) -> Vec<u8> {<LogGroupPosition as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb99: {
        _199 = const true;               // scope 26 at cita-chain/core/src/libchain/chain.rs:576:29: 576:30
        _171 = encode::<LogBloomGroup>(_163) -> [return: bb100, unwind: bb129]; // scope 26 at cita-chain/core/src/libchain/chain.rs:577:17: 577:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:577:17: 577:28
                                         // + literal: Const { ty: for<'a> fn(&'a LogBloomGroup) -> elastic_array::ElasticArray1024<u8> {encode::<LogBloomGroup>}, val: Value(<ZST>) }
    }

    bb100: {
        _170 = elastic_array::ElasticArray1024::<u8>::into_vec(move _171) -> [return: bb101, unwind: bb129]; // scope 26 at cita-chain/core/src/libchain/chain.rs:577:17: 577:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:577:32: 577:40
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb101: {
        _199 = const false;              // scope 26 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
        _164 = <RocksDB as Database>::insert(move _165, move _168, move _169, move _170) -> [return: bb102, unwind: bb129]; // scope 26 at cita-chain/core/src/libchain/chain.rs:574:21: 578:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:574:29: 574:35
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb102: {
        _199 = const false;              // scope 26 at cita-chain/core/src/libchain/chain.rs:578:13: 578:14
        drop(_164) -> [return: bb93, unwind: bb133]; // scope 26 at cita-chain/core/src/libchain/chain.rs:578:14: 578:15
    }

    bb103: {
        _173 = _174;                     // scope 24 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
        _176 = const std::option::Option::<DataCategory>::Some(Extra); // scope 24 at cita-chain/core/src/libchain/chain.rs:583:13: 583:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _193 = const _;                  // scope 24 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:584:13: 584:36
                                         // + literal: Const { ty: &CurrentHash, val: Unevaluated(chain::Chain::set_db_result, [], Some(promoted[0])) }
        _177 = <CurrentHash as DBIndex>::get_index(_193) -> [return: bb104, unwind: bb133]; // scope 24 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:584:25: 584:34
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentHash) -> Vec<u8> {<CurrentHash as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb104: {
        _198 = const true;               // scope 24 at cita-chain/core/src/libchain/chain.rs:584:35: 584:36
        _180 = &_18;                     // scope 24 at cita-chain/core/src/libchain/chain.rs:585:25: 585:37
        _179 = encode::<H256>(_180) -> [return: bb105, unwind: bb127]; // scope 24 at cita-chain/core/src/libchain/chain.rs:585:13: 585:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:585:13: 585:24
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> elastic_array::ElasticArray1024<u8> {encode::<H256>}, val: Value(<ZST>) }
    }

    bb105: {
        _178 = elastic_array::ElasticArray1024::<u8>::into_vec(move _179) -> [return: bb106, unwind: bb127]; // scope 24 at cita-chain/core/src/libchain/chain.rs:585:13: 585:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:585:39: 585:47
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb106: {
        _198 = const false;              // scope 24 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
        _172 = <RocksDB as Database>::insert(move _173, move _176, move _177, move _178) -> [return: bb107, unwind: bb127]; // scope 24 at cita-chain/core/src/libchain/chain.rs:582:17: 586:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:582:25: 582:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb107: {
        _198 = const false;              // scope 24 at cita-chain/core/src/libchain/chain.rs:586:9: 586:10
        drop(_172) -> [return: bb108, unwind: bb133]; // scope 24 at cita-chain/core/src/libchain/chain.rs:586:10: 586:11
    }

    bb108: {
        _210 = const false;              // scope 28 at cita-chain/core/src/libchain/chain.rs:588:40: 588:46
        _197 = const true;               // scope 28 at cita-chain/core/src/libchain/chain.rs:588:40: 588:46
        _181 = move _14;                 // scope 28 at cita-chain/core/src/libchain/chain.rs:588:40: 588:46
        _185 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 28 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
        _184 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::write(move _185) -> [return: bb109, unwind: bb119]; // scope 28 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:588:30: 588:35
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::write}, val: Value(<ZST>) }
    }

    bb109: {
        _183 = &mut _184;                // scope 28 at cita-chain/core/src/libchain/chain.rs:588:10: 588:37
        _182 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as DerefMut>::deref_mut(move _183) -> [return: bb110, unwind: bb125]; // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:588:9: 588:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb110: {
        drop((*_182)) -> [return: bb111, unwind: bb112]; // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
    }

    bb111: {
        _197 = const false;              // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
        (*_182) = move _181;             // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
        _197 = const false;              // scope 28 at cita-chain/core/src/libchain/chain.rs:588:45: 588:46
        drop(_184) -> [return: bb113, unwind: bb133]; // scope 28 at cita-chain/core/src/libchain/chain.rs:588:46: 588:47
    }

    bb112 (cleanup): {
        _197 = const false;              // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
        (*_182) = move _181;             // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
        goto -> bb125;                   // scope 28 at cita-chain/core/src/libchain/chain.rs:588:9: 588:37
    }

    bb113: {
        _187 = &((*_1).2: std::sync::atomic::AtomicUsize); // scope 28 at cita-chain/core/src/libchain/chain.rs:589:9: 589:69
        _189 = _5;                       // scope 28 at cita-chain/core/src/libchain/chain.rs:589:35: 589:41
        _188 = move _189 as usize (IntToInt); // scope 28 at cita-chain/core/src/libchain/chain.rs:589:35: 589:50
        _190 = const SeqCst;             // scope 28 at cita-chain/core/src/libchain/chain.rs:589:52: 589:68
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _186 = AtomicUsize::store(move _187, move _188, move _190) -> [return: bb114, unwind: bb133]; // scope 28 at cita-chain/core/src/libchain/chain.rs:589:9: 589:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:589:29: 589:34
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb114: {
        _192 = _5;                       // scope 28 at cita-chain/core/src/libchain/chain.rs:590:38: 590:44
        _191 = chain::Chain::clean_proof_with_height(_1, move _192) -> [return: bb115, unwind: bb133]; // scope 28 at cita-chain/core/src/libchain/chain.rs:590:9: 590:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:590:14: 590:37
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) {chain::Chain::clean_proof_with_height}, val: Value(<ZST>) }
    }

    bb115: {
        _201 = const false;              // scope 20 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
        _205 = const false;              // scope 7 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
        drop(_25) -> [return: bb116, unwind: bb122]; // scope 6 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb116: {
        drop(_21) -> [return: bb117, unwind: bb151]; // scope 5 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb117: {
        _210 = const false;              // scope 3 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:591:6: 591:6
    }

    bb118 (cleanup): {
        drop(_184) -> bb133;             // scope 28 at cita-chain/core/src/libchain/chain.rs:588:46: 588:47
    }

    bb119 (cleanup): {
        drop(_181) -> bb133;             // scope 28 at cita-chain/core/src/libchain/chain.rs:588:45: 588:46
    }

    bb120 (cleanup): {
        drop(_51) -> bb121;              // scope 9 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
    }

    bb121 (cleanup): {
        drop(_25) -> bb122;              // scope 6 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb122 (cleanup): {
        drop(_21) -> bb151;              // scope 5 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb123 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:494:5: 591:6
    }

    bb124 (cleanup): {
        drop(_181) -> bb118;             // scope 28 at cita-chain/core/src/libchain/chain.rs:588:45: 588:46
    }

    bb125 (cleanup): {
        switchInt(_197) -> [0: bb118, otherwise: bb124]; // scope 28 at cita-chain/core/src/libchain/chain.rs:588:45: 588:46
    }

    bb126 (cleanup): {
        drop(_177) -> bb133;             // scope 24 at cita-chain/core/src/libchain/chain.rs:586:9: 586:10
    }

    bb127 (cleanup): {
        switchInt(_198) -> [0: bb133, otherwise: bb126]; // scope 24 at cita-chain/core/src/libchain/chain.rs:586:9: 586:10
    }

    bb128 (cleanup): {
        drop(_169) -> bb133;             // scope 26 at cita-chain/core/src/libchain/chain.rs:578:13: 578:14
    }

    bb129 (cleanup): {
        switchInt(_199) -> [0: bb133, otherwise: bb128]; // scope 26 at cita-chain/core/src/libchain/chain.rs:578:13: 578:14
    }

    bb130 (cleanup): {
        drop(_151) -> bb133;             // scope 23 at cita-chain/core/src/libchain/chain.rs:570:9: 570:10
    }

    bb131 (cleanup): {
        switchInt(_200) -> [0: bb133, otherwise: bb130]; // scope 23 at cita-chain/core/src/libchain/chain.rs:570:9: 570:10
    }

    bb132 (cleanup): {
        drop(_142) -> bb141;             // scope 20 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb133 (cleanup): {
        switchInt(_201) -> [0: bb141, otherwise: bb132]; // scope 20 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb134 (cleanup): {
        drop(_137) -> bb137;             // scope 21 at cita-chain/core/src/libchain/chain.rs:561:13: 561:14
    }

    bb135 (cleanup): {
        switchInt(_202) -> [0: bb137, otherwise: bb134]; // scope 21 at cita-chain/core/src/libchain/chain.rs:561:13: 561:14
    }

    bb136 (cleanup): {
        drop(_128) -> bb141;             // scope 20 at cita-chain/core/src/libchain/chain.rs:562:9: 562:10
    }

    bb137 (cleanup): {
        switchInt(_203) -> [0: bb141, otherwise: bb136]; // scope 20 at cita-chain/core/src/libchain/chain.rs:562:9: 562:10
    }

    bb138 (cleanup): {
        drop(_115) -> bb141;             // scope 18 at cita-chain/core/src/libchain/chain.rs:551:9: 551:10
    }

    bb139 (cleanup): {
        switchInt(_204) -> [0: bb141, otherwise: bb138]; // scope 18 at cita-chain/core/src/libchain/chain.rs:551:9: 551:10
    }

    bb140 (cleanup): {
        drop(_106) -> bb121;             // scope 7 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb141 (cleanup): {
        switchInt(_205) -> [0: bb121, otherwise: bb140]; // scope 7 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb142 (cleanup): {
        drop(_87) -> bb145;              // scope 15 at cita-chain/core/src/libchain/chain.rs:540:17: 540:18
    }

    bb143 (cleanup): {
        switchInt(_206) -> [0: bb145, otherwise: bb142]; // scope 15 at cita-chain/core/src/libchain/chain.rs:540:17: 540:18
    }

    bb144 (cleanup): {
        drop(_78) -> bb121;              // scope 14 at cita-chain/core/src/libchain/chain.rs:541:13: 541:14
    }

    bb145 (cleanup): {
        switchInt(_207) -> [0: bb121, otherwise: bb144]; // scope 14 at cita-chain/core/src/libchain/chain.rs:541:13: 541:14
    }

    bb146 (cleanup): {
        drop(_62) -> bb149;              // scope 11 at cita-chain/core/src/libchain/chain.rs:529:13: 529:14
    }

    bb147 (cleanup): {
        switchInt(_208) -> [0: bb149, otherwise: bb146]; // scope 11 at cita-chain/core/src/libchain/chain.rs:529:13: 529:14
    }

    bb148 (cleanup): {
        drop(_53) -> bb120;              // scope 10 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
    }

    bb149 (cleanup): {
        switchInt(_209) -> [0: bb120, otherwise: bb148]; // scope 10 at cita-chain/core/src/libchain/chain.rs:530:9: 530:10
    }

    bb150 (cleanup): {
        drop(_14) -> bb123;              // scope 3 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb151 (cleanup): {
        switchInt(_210) -> [0: bb123, otherwise: bb150]; // scope 3 at cita-chain/core/src/libchain/chain.rs:591:5: 591:6
    }

    bb152: {
        goto -> bb22;                    // scope 6 at cita-chain/core/src/libchain/chain.rs:503:13: 503:27
    }

    bb153: {
        goto -> bb22;                    // scope 8 at cita-chain/core/src/libchain/chain.rs:506:13: 513:27
    }

    bb154: {
        goto -> bb62;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result: &CurrentHash = {
    let mut _0: &types::db_indexes::CurrentHash; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
    let mut _1: types::db_indexes::CurrentHash; // in scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:24

    bb0: {
        _1 = CurrentHash;                // scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:24
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:584:13: 584:36
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:9: 545:61
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:9: 545:61

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:545:9: 545:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:545:9: 545:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:545:9: 545:61
        _1 = (move _2, move _4, move _6, const 545_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52

    bb0: {
        _1 = [const "Save ExecutedResult's header: "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:545:16: 545:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:545:16: 545:52
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:509:45: 509:48

    bb0: {
        _0 = const 256_usize;            // scope 0 at cita-chain/core/src/libchain/chain.rs:509:45: 509:48
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:509:45: 509:48
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:512:22: 512:25], _2: (GroupPosition, BloomGroup)) -> (LogGroupPosition, LogBloomGroup) {
    debug p => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:23: 512:24
    let mut _0: (types::db_indexes::LogGroupPosition, types::log_blooms::LogBloomGroup); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:512:26: 512:26
    let mut _3: types::db_indexes::LogGroupPosition; // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:27: 512:42
    let mut _4: types::bloomchain::group::GroupPosition; // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:38: 512:41
    let mut _5: types::log_blooms::LogBloomGroup; // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:44: 512:59
    let mut _6: types::bloomchain::group::BloomGroup; // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:55: 512:58
    let mut _7: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:512:59: 512:60

    bb0: {
        _7 = const false;                // scope 0 at cita-chain/core/src/libchain/chain.rs:512:27: 512:42
        _7 = const true;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:512:27: 512:42
        _4 = move (_2.0: types::bloomchain::group::GroupPosition); // scope 0 at cita-chain/core/src/libchain/chain.rs:512:38: 512:41
        _3 = <LogGroupPosition as From<GroupPosition>>::from(move _4) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:512:27: 512:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:512:27: 512:37
                                         // + literal: Const { ty: fn(GroupPosition) -> LogGroupPosition {<LogGroupPosition as From<GroupPosition>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const false;                // scope 0 at cita-chain/core/src/libchain/chain.rs:512:55: 512:58
        _6 = move (_2.1: types::bloomchain::group::BloomGroup); // scope 0 at cita-chain/core/src/libchain/chain.rs:512:55: 512:58
        _5 = <LogBloomGroup as From<BloomGroup>>::from(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:512:44: 512:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:512:44: 512:54
                                         // + literal: Const { ty: fn(BloomGroup) -> LogBloomGroup {<LogBloomGroup as From<BloomGroup>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at cita-chain/core/src/libchain/chain.rs:512:26: 512:60
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:512:60: 512:60
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:512:22: 512:60
    }

    bb4 (cleanup): {
        drop((_2.1: types::bloomchain::group::BloomGroup)) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:512:59: 512:60
    }

    bb5 (cleanup): {
        switchInt(_7) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:512:59: 512:60
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_db_result::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:521:22: 521:25], _2: &ReceiptWithOption) -> types::receipt::Receipt {
    debug r => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:521:23: 521:24
    let mut _0: types::receipt::Receipt; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:521:26: 521:26
    let mut _3: libproto::Receipt;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:63
    let mut _4: &libproto::Receipt;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:63
    let _5: &libproto::Receipt;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:55

    bb0: {
        _5 = ReceiptWithOption::get_receipt(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:521:42: 521:53
                                         // + literal: Const { ty: for<'a> fn(&'a ReceiptWithOption) -> &'a libproto::Receipt {ReceiptWithOption::get_receipt}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:63
        _3 = <libproto::Receipt as Clone>::clone(move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:521:40: 521:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:521:56: 521:61
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Receipt) -> libproto::Receipt {<libproto::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <types::receipt::Receipt as From<libproto::Receipt>>::from(move _3) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:521:26: 521:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:521:26: 521:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(libproto::Receipt) -> types::receipt::Receipt {<types::receipt::Receipt as From<libproto::Receipt>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:521:64: 521:64
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::broadcast_current_status(_1: &chain::Chain, _2: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:593:37: 593:42
    debug ctx_pub => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:593:44: 593:51
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:593:81: 593:81
    let _3: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:594:9: 594:52
    let _4: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:594:43: 594:51
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:595:9: 595:40
    let _6: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:595:31: 595:39
    let mut _7: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:594:43: 594:51
    let mut _8: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:595:31: 595:39

    bb0: {
        _4 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:594:43: 594:51
        _7 = deref_copy (*_4);           // scope 0 at cita-chain/core/src/libchain/chain.rs:594:43: 594:51
        _3 = chain::Chain::delivery_current_rich_status(_1, _7) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:594:9: 594:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:594:14: 594:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::delivery_current_rich_status}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:595:31: 595:39
        _8 = deref_copy (*_6);           // scope 0 at cita-chain/core/src/libchain/chain.rs:595:31: 595:39
        _5 = chain::Chain::broadcast_status(_1, _8) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:595:9: 595:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:595:14: 595:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_status}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:596:6: 596:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::signal_to_executor(_1: &chain::Chain, _2: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:598:31: 598:36
    debug ctx_pub => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:598:38: 598:45
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:598:75: 598:75
    let mut _3: libproto::StateSignal;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:599:13: 599:29
    let _4: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:600:9: 600:59
    let mut _5: &mut libproto::StateSignal; // in scope 0 at cita-chain/core/src/libchain/chain.rs:600:9: 600:59
    let mut _6: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:600:33: 600:58
    let mut _8: libproto::StateSignal;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:601:28: 601:40
    let _9: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:602:9: 607:22
    let mut _10: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:602:9: 606:15
    let mut _11: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:603:19: 606:14
    let mut _12: std::string::String;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:604:17: 604:58
    let mut _13: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _14: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _15: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _16: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:605:17: 605:40
    let mut _17: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:605:17: 605:31
    let mut _18: libproto::Message;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:605:17: 605:20
    let mut _19: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    let mut _20: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    scope 1 {
        debug state_signal => _3;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:599:13: 599:29
        let _7: libproto::Message;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:601:13: 601:16
        scope 2 {
            debug msg => _7;             // in scope 2 at cita-chain/core/src/libchain/chain.rs:601:13: 601:16
        }
    }

    bb0: {
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:599:13: 599:29
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:599:13: 599:29
        _20 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:599:32: 599:50
        _3 = libproto::StateSignal::new() -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:599:32: 599:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:599:32: 599:48
                                         // + literal: Const { ty: fn() -> libproto::StateSignal {libproto::StateSignal::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:600:9: 600:59
        _6 = chain::Chain::get_current_height(_1) -> [return: bb2, unwind: bb15]; // scope 1 at cita-chain/core/src/libchain/chain.rs:600:33: 600:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:600:38: 600:56
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = libproto::StateSignal::set_height(move _5, move _6) -> [return: bb3, unwind: bb15]; // scope 1 at cita-chain/core/src/libchain/chain.rs:600:9: 600:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:600:22: 600:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::StateSignal, u64) {libproto::StateSignal::set_height}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:601:28: 601:40
        _8 = move _3;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:601:28: 601:40
        _7 = <libproto::StateSignal as Into<Message>>::into(move _8) -> [return: bb4, unwind: bb15]; // scope 1 at cita-chain/core/src/libchain/chain.rs:601:28: 601:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:601:41: 601:45
                                         // + literal: Const { ty: fn(libproto::StateSignal) -> Message {<libproto::StateSignal as Into<Message>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = const true;                // scope 1 at cita-chain/core/src/libchain/chain.rs:601:46: 601:47
        _14 = const libproto::router::SubModules::Chain; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _15 = const libproto::router::MsgType::StateSignal; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x16)) }
        _13 = RoutingKey(move _14, move _15); // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _12 = <RoutingKey as Into<std::string::String>>::into(move _13) -> [return: bb5, unwind: bb13]; // scope 2 at cita-chain/core/src/libchain/chain.rs:604:17: 604:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:604:52: 604:56
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _19 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:605:17: 605:20
        _18 = move _7;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:605:17: 605:20
        _17 = <Message as libproto::TryInto<Vec<u8>>>::try_into(move _18) -> [return: bb6, unwind: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:605:17: 605:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:605:21: 605:29
                                         // + literal: Const { ty: fn(Message) -> Result<Vec<u8>, <Message as libproto::TryInto<Vec<u8>>>::Error> {<Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _17) -> [return: bb7, unwind: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:605:17: 605:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:605:32: 605:38
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = (move _12, move _16);      // scope 2 at cita-chain/core/src/libchain/chain.rs:603:19: 606:14
        _10 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_2, move _11) -> [return: bb8, unwind: bb13]; // scope 2 at cita-chain/core/src/libchain/chain.rs:602:9: 606:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:603:14: 603:18
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _10) -> [return: bb9, unwind: bb13]; // scope 2 at cita-chain/core/src/libchain/chain.rs:602:9: 607:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:607:14: 607:20
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:608:6: 608:6
    }

    bb10 (cleanup): {
        drop(_12) -> bb13;               // scope 2 at cita-chain/core/src/libchain/chain.rs:606:13: 606:14
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:598:5: 608:6
    }

    bb12 (cleanup): {
        drop(_7) -> bb15;                // scope 1 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    }

    bb13 (cleanup): {
        switchInt(_19) -> [0: bb15, otherwise: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    }

    bb14 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    }

    bb15 (cleanup): {
        switchInt(_20) -> [0: bb11, otherwise: bb14]; // scope 0 at cita-chain/core/src/libchain/chain.rs:608:5: 608:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result(_1: &chain::Chain, _2: &libproto::ExecutedResult, _3: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:610:32: 610:37
    debug ret => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:610:39: 610:42
    debug ctx_pub => _3;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:610:61: 610:68
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:610:98: 610:98
    let _4: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
    let _5: &libproto::ExecutedInfo;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:614:13: 614:17
    let mut _7: &libproto::ExecutedHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:615:22: 615:52
    let _8: &libproto::ExecutedHeader;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:615:22: 615:39
    let mut _9: &libproto::ExecutedInfo; // in scope 0 at cita-chain/core/src/libchain/chain.rs:615:22: 615:39
    let mut _10: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
    let mut _11: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:618:12: 618:18
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:618:27: 618:57
    let mut _13: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:618:27: 618:52
    let _15: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:620:13: 620:42
    let _16: &types::block::OpenBlock;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:620:37: 620:41
    let _18: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:13: 622:78
    let mut _19: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:43: 622:49
    let mut _20: &[cita_types::H256];    // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
    let _21: &[cita_types::H256];        // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
    let _22: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
    let _23: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:69: 622:77
    let _24: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:623:13: 623:52
    let _25: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:623:43: 623:51
    let mut _26: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:628:12: 628:47
    let mut _27: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:628:12: 628:18
    let mut _28: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:628:22: 628:47
    let mut _30: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:629:29: 632:38
    let _31: types::block::BlockBody;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:629:29: 631:26
    let mut _32: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:629:29: 630:65
    let mut _33: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:630:39: 630:64
    let _34: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:13: 633:91
    let mut _35: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:43: 633:68
    let mut _36: &[cita_types::H256];    // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
    let _37: &[cita_types::H256];        // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
    let _38: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
    let _39: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:82: 633:90
    let _40: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:634:13: 634:52
    let _41: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:634:43: 634:51
    let mut _44: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:642:29: 642:50
    let mut _45: std::option::Option<libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:30: 643:61
    let mut _46: std::option::Option<&libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
    let mut _47: &std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
    let _48: &std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
    let mut _49: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
    let _50: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:643:44: 643:51
    let mut _51: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:647:18: 647:56
    let mut _52: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:647:13: 647:57
    let mut _54: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
    let mut _55: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:20: 648:56
    let mut _56: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
    let mut _57: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
    let _58: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
    let mut _59: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
    let mut _60: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:60: 648:99
    let mut _61: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
    let _62: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
    let mut _63: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
    let _64: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
    let mut _65: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
    let _66: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:649:21: 649:53
    let _67: &&libproto::ExecutedResult; // in scope 0 at cita-chain/core/src/libchain/chain.rs:649:40: 649:44
    let _68: &types::block::OpenBlock;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:649:46: 649:52
    let mut _70: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:650:37: 650:70
    let _71: &types::block::BlockBody;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:650:37: 650:49
    let mut _72: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:650:37: 650:49
    let _73: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:21: 651:80
    let mut _74: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:51: 651:57
    let mut _75: &[cita_types::H256];    // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
    let _76: &[cita_types::H256];        // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
    let _77: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
    let _78: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:71: 651:79
    let _79: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:652:21: 652:60
    let _80: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:652:51: 652:59
    let mut _82: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _83: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _84: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _85: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _86: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _87: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _88: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _89: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _90: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _91: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
    let mut _92: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _93: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _94: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:63: 653:69
    let _96: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:63: 653:69
    let mut _99: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:657:20: 657:32
    let mut _100: &std::option::Option<libproto::Proof>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:657:20: 657:32
    let mut _102: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _103: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _104: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _105: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _106: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _107: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _108: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _109: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _110: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _111: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
    let mut _112: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _113: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _114: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _115: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let _116: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let _117: u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let mut _118: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let _119: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let mut _120: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
    let mut _122: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _123: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _124: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _125: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _126: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _127: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _128: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _129: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _130: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _131: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
    let mut _132: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _133: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _134: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _135: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let _136: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let _137: u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let mut _138: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let _139: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let mut _140: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
    let mut _141: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:662:20: 662:59
    let mut _142: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:662:20: 662:26
    let mut _143: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:662:30: 662:59
    let mut _144: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:662:30: 662:55
    let mut _145: (u64, bool);           // in scope 0 at cita-chain/core/src/libchain/chain.rs:662:30: 662:59
    let mut _146: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:24: 663:63
    let mut _147: &cita_types::H256;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
    let _148: &cita_types::H256;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
    let mut _149: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
    let _150: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
    let mut _151: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
    let _152: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:664:25: 664:57
    let _153: &&libproto::ExecutedResult; // in scope 0 at cita-chain/core/src/libchain/chain.rs:664:44: 664:48
    let _154: &types::block::OpenBlock;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:664:50: 664:56
    let mut _156: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:665:41: 665:74
    let _157: &types::block::BlockBody;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:665:41: 665:53
    let mut _158: &types::block::OpenBlock; // in scope 0 at cita-chain/core/src/libchain/chain.rs:665:41: 665:53
    let _159: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:25: 666:84
    let mut _160: u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:55: 666:61
    let mut _161: &[cita_types::H256];   // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
    let _162: &[cita_types::H256];       // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
    let _163: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
    let _164: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:75: 666:83
    let _165: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:667:25: 667:64
    let _166: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:667:55: 667:63
    let mut _168: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _169: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _170: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _171: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _172: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _173: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _174: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _175: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _176: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _177: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
    let mut _178: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _179: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _180: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _181: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:60: 668:66
    let _182: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:60: 668:66
    let _183: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:670:25: 670:47
    let _184: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:671:25: 671:64
    let _185: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:671:55: 671:63
    let _186: ();                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:674:21: 674:54
    let _187: &&pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:674:45: 674:53
    let mut _189: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _190: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _191: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _192: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _193: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _194: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _195: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _196: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _197: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _198: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
    let mut _199: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _200: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _201: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _202: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:677:25: 677:31
    let _203: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:677:25: 677:31
    let mut _204: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
    let _205: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
    let _206: u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
    let mut _208: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _209: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _210: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _211: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _212: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _213: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _214: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _215: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _216: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _217: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
    let mut _218: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _219: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _220: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _221: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:55: 683:61
    let _222: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:55: 683:61
    let mut _224: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:688:25: 688:47
    let mut _226: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
    let mut _227: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
    let mut _228: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
    let _229: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:689:39: 689:65
    let _230: u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:689:40: 689:65
    let mut _231: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:690:18: 690:25
    let mut _232: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
    let mut _233: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:690:10: 690:15
    let mut _252: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:622:69: 622:77
    let mut _253: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:623:43: 623:51
    let mut _254: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:633:82: 633:90
    let mut _255: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:634:43: 634:51
    let mut _256: &libproto::ExecutedResult; // in scope 0 at cita-chain/core/src/libchain/chain.rs:649:40: 649:44
    let mut _257: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:651:71: 651:79
    let mut _258: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:652:51: 652:59
    let mut _259: &libproto::ExecutedResult; // in scope 0 at cita-chain/core/src/libchain/chain.rs:664:44: 664:48
    let mut _260: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:666:75: 666:83
    let mut _261: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:667:55: 667:63
    let mut _262: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:671:55: 671:63
    let mut _263: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:674:45: 674:53
    let mut _264: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _265: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _266: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _267: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:690:24: 690:25
    let mut _268: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _269: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _270: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _271: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _272: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    let mut _273: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    scope 1 {
        debug info => _5;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:614:13: 614:17
        let _6: u64;                     // in scope 1 at cita-chain/core/src/libchain/chain.rs:615:13: 615:19
        scope 2 {
            debug number => _6;          // in scope 2 at cita-chain/core/src/libchain/chain.rs:615:13: 615:19
            let _14: types::block::OpenBlock; // in scope 2 at cita-chain/core/src/libchain/chain.rs:619:17: 619:20
            let _29: std::vec::Vec<cita_types::H256>; // in scope 2 at cita-chain/core/src/libchain/chain.rs:629:17: 629:26
            let _42: std::option::Option<libchain::chain::BlockInQueue>; // in scope 2 at cita-chain/core/src/libchain/chain.rs:639:13: 639:27
            scope 3 {
                debug blk => _14;        // in scope 3 at cita-chain/core/src/libchain/chain.rs:619:17: 619:20
                let _17: std::vec::Vec<cita_types::H256>; // in scope 3 at cita-chain/core/src/libchain/chain.rs:621:17: 621:32
                scope 4 {
                    debug block_tx_hashes => _17; // in scope 4 at cita-chain/core/src/libchain/chain.rs:621:17: 621:32
                }
            }
            scope 5 {
                debug tx_hashes => _29;  // in scope 5 at cita-chain/core/src/libchain/chain.rs:629:17: 629:26
            }
            scope 6 {
                debug block_in_queue => _42; // in scope 6 at cita-chain/core/src/libchain/chain.rs:639:13: 639:27
                let _43: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:642:17: 642:26
                let _53: types::block::OpenBlock; // in scope 6 at cita-chain/core/src/libchain/chain.rs:647:47: 647:52
                let _97: types::block::OpenBlock; // in scope 6 at cita-chain/core/src/libchain/chain.rs:656:43: 656:48
                let _98: std::option::Option<libproto::Proof>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:656:50: 656:52
                let _207: log::Level;    // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _223: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:688:13: 688:22
                scope 7 {
                    debug block_map => _43; // in scope 7 at cita-chain/core/src/libchain/chain.rs:642:17: 642:26
                }
                scope 8 {
                    debug block => _53;  // in scope 8 at cita-chain/core/src/libchain/chain.rs:647:47: 647:52
                    let _69: std::vec::Vec<cita_types::H256>; // in scope 8 at cita-chain/core/src/libchain/chain.rs:650:25: 650:34
                    scope 9 {
                        debug tx_hashes => _69; // in scope 9 at cita-chain/core/src/libchain/chain.rs:650:25: 650:34
                        let _81: log::Level; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 10 {
                            debug lvl => _81; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _234: &(&str, &str, &str, u32); // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _235: &[&str; 1]; // in scope 10 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
                            let mut _236: &log::LevelFilter; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                }
                scope 11 {
                    debug block => _97;  // in scope 11 at cita-chain/core/src/libchain/chain.rs:656:43: 656:48
                    debug op => _98;     // in scope 11 at cita-chain/core/src/libchain/chain.rs:656:50: 656:52
                    let _101: log::Level; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _121: log::Level; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _155: std::vec::Vec<cita_types::H256>; // in scope 11 at cita-chain/core/src/libchain/chain.rs:665:29: 665:38
                    let _188: log::Level; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    scope 12 {
                        debug lvl => _101; // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _246: &(&str, &str, &str, u32); // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _247: &[&str; 2]; // in scope 12 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                        let mut _248: &log::LevelFilter; // in scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 13 {
                        debug lvl => _121; // in scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _243: &(&str, &str, &str, u32); // in scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _244: &[&str; 1]; // in scope 13 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
                        let mut _245: &log::LevelFilter; // in scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 14 {
                        debug tx_hashes => _155; // in scope 14 at cita-chain/core/src/libchain/chain.rs:665:29: 665:38
                        let _167: log::Level; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 15 {
                            debug lvl => _167; // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _240: &(&str, &str, &str, u32); // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _241: &[&str; 1]; // in scope 15 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
                            let mut _242: &log::LevelFilter; // in scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                    scope 16 {
                        debug lvl => _188; // in scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _237: &(&str, &str, &str, u32); // in scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _238: &[&str; 2]; // in scope 16 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                        let mut _239: &log::LevelFilter; // in scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                }
                scope 17 {
                    debug lvl => _207;   // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _249: &(&str, &str, &str, u32); // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _250: &[&str; 2]; // in scope 17 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                    let mut _251: &log::LevelFilter; // in scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
                scope 18 {
                    debug guard => _223; // in scope 18 at cita-chain/core/src/libchain/chain.rs:688:13: 688:22
                    let _225: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 18 at cita-chain/core/src/libchain/chain.rs:689:13: 689:20
                    scope 19 {
                        debug new_map => _225; // in scope 19 at cita-chain/core/src/libchain/chain.rs:689:13: 689:20
                    }
                }
            }
        }
    }

    bb0: {
        _269 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _267 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _268 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _265 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _266 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _264 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
        _4 = chain::Chain::set_config(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:612:9: 612:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:612:14: 612:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b libproto::ExecutedResult) {chain::Chain::set_config}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = libproto::ExecutedResult::get_executed_info(_2) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:614:20: 614:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:614:24: 614:41
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::ExecutedResult) -> &'a ExecutedInfo {libproto::ExecutedResult::get_executed_info}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _5;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:615:22: 615:39
        _8 = ExecutedInfo::get_header(move _9) -> bb3; // scope 1 at cita-chain/core/src/libchain/chain.rs:615:22: 615:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:615:27: 615:37
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedInfo) -> &'a ExecutedHeader {ExecutedInfo::get_header}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:615:22: 615:52
        _6 = ExecutedHeader::get_height(move _7) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:615:22: 615:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:615:40: 615:50
                                         // + literal: Const { ty: for<'a> fn(&'a ExecutedHeader) -> u64 {ExecutedHeader::get_height}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _6;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:18
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
    }

    bb5: {
        _10 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
        goto -> bb7;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
    }

    bb6: {
        _13 = chain::Chain::get_current_height(_1) -> bb8; // scope 2 at cita-chain/core/src/libchain/chain.rs:618:27: 618:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:618:32: 618:50
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _10) -> [0: bb16, otherwise: bb9]; // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
    }

    bb8: {
        _12 = Eq(move _13, const 0_u64); // scope 2 at cita-chain/core/src/libchain/chain.rs:618:27: 618:57
        _10 = move _12;                  // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
        goto -> bb7;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:618:12: 618:57
    }

    bb9: {
        _14 = <OpenBlock as Default>::default() -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:619:23: 619:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:619:23: 619:41
                                         // + literal: Const { ty: fn() -> OpenBlock {<OpenBlock as Default>::default}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = &_14;                      // scope 3 at cita-chain/core/src/libchain/chain.rs:620:37: 620:41
        _15 = chain::Chain::set_db_result(_1, _2, _16) -> [return: bb11, unwind: bb161]; // scope 3 at cita-chain/core/src/libchain/chain.rs:620:13: 620:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:620:18: 620:31
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, &'b libproto::ExecutedResult, &'c OpenBlock) {chain::Chain::set_db_result}, val: Value(<ZST>) }
    }

    bb11: {
        _17 = Vec::<H256>::new() -> [return: bb12, unwind: bb161]; // scope 3 at cita-chain/core/src/libchain/chain.rs:621:35: 621:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:621:35: 621:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<H256> {Vec::<H256>::new}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = _6;                        // scope 4 at cita-chain/core/src/libchain/chain.rs:622:43: 622:49
        _22 = &_17;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
        _21 = <Vec<H256> as Deref>::deref(_22) -> [return: bb13, unwind: bb160]; // scope 4 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:622:51: 622:67
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = _21;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:622:51: 622:67
        _23 = &_3;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:622:69: 622:77
        _252 = deref_copy (*_23);        // scope 4 at cita-chain/core/src/libchain/chain.rs:622:69: 622:77
        _18 = chain::Chain::delivery_block_tx_hashes(_1, move _19, move _20, _252) -> [return: bb14, unwind: bb160]; // scope 4 at cita-chain/core/src/libchain/chain.rs:622:13: 622:78
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:622:18: 622:42
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, u64, &'b [H256], &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::delivery_block_tx_hashes}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = &_3;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:623:43: 623:51
        _253 = deref_copy (*_25);        // scope 4 at cita-chain/core/src/libchain/chain.rs:623:43: 623:51
        _24 = chain::Chain::broadcast_current_status(_1, _253) -> [return: bb15, unwind: bb160]; // scope 4 at cita-chain/core/src/libchain/chain.rs:623:13: 623:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:623:18: 623:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_current_status}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_17) -> [return: bb149, unwind: bb161]; // scope 3 at cita-chain/core/src/libchain/chain.rs:625:9: 625:10
    }

    bb16: {
        _27 = _6;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:628:12: 628:18
        _28 = chain::Chain::get_current_height(_1) -> bb17; // scope 2 at cita-chain/core/src/libchain/chain.rs:628:22: 628:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:628:27: 628:45
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = Le(move _27, move _28);    // scope 2 at cita-chain/core/src/libchain/chain.rs:628:12: 628:47
        switchInt(move _26) -> [0: bb28, otherwise: bb18]; // scope 2 at cita-chain/core/src/libchain/chain.rs:628:12: 628:47
    }

    bb18: {
        _33 = chain::Chain::get_current_height(_1) -> bb19; // scope 2 at cita-chain/core/src/libchain/chain.rs:630:39: 630:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:630:44: 630:62
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = chain::Chain::block_body_by_height(_1, move _33) -> bb20; // scope 2 at cita-chain/core/src/libchain/chain.rs:629:29: 630:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:630:18: 630:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb20: {
        _31 = std::option::Option::<types::block::BlockBody>::unwrap(move _32) -> bb21; // scope 2 at cita-chain/core/src/libchain/chain.rs:629:29: 631:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:631:18: 631:24
                                         // + literal: Const { ty: fn(std::option::Option<types::block::BlockBody>) -> types::block::BlockBody {std::option::Option::<types::block::BlockBody>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        _30 = &_31;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:629:29: 632:38
        _29 = types::block::BlockBody::transaction_hashes(move _30) -> [return: bb22, unwind: bb159]; // scope 2 at cita-chain/core/src/libchain/chain.rs:629:29: 632:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:632:18: 632:36
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_31) -> [return: bb23, unwind: bb158]; // scope 2 at cita-chain/core/src/libchain/chain.rs:632:38: 632:39
    }

    bb23: {
        _35 = chain::Chain::get_current_height(_1) -> [return: bb24, unwind: bb158]; // scope 5 at cita-chain/core/src/libchain/chain.rs:633:43: 633:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:633:48: 633:66
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb24: {
        _38 = &_29;                      // scope 5 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
        _37 = <Vec<H256> as Deref>::deref(_38) -> [return: bb25, unwind: bb158]; // scope 5 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:633:70: 633:80
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _36 = _37;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:633:70: 633:80
        _39 = &_3;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:633:82: 633:90
        _254 = deref_copy (*_39);        // scope 5 at cita-chain/core/src/libchain/chain.rs:633:82: 633:90
        _34 = chain::Chain::delivery_block_tx_hashes(_1, move _35, move _36, _254) -> [return: bb26, unwind: bb158]; // scope 5 at cita-chain/core/src/libchain/chain.rs:633:13: 633:91
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:633:18: 633:42
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, u64, &'b [H256], &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::delivery_block_tx_hashes}, val: Value(<ZST>) }
    }

    bb26: {
        _41 = &_3;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:634:43: 634:51
        _255 = deref_copy (*_41);        // scope 5 at cita-chain/core/src/libchain/chain.rs:634:43: 634:51
        _40 = chain::Chain::broadcast_current_status(_1, _255) -> [return: bb27, unwind: bb158]; // scope 5 at cita-chain/core/src/libchain/chain.rs:634:13: 634:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:634:18: 634:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_current_status}, val: Value(<ZST>) }
    }

    bb27: {
        drop(_29) -> bb150;              // scope 2 at cita-chain/core/src/libchain/chain.rs:636:9: 636:10
    }

    bb28: {
        _44 = &((*_1).4: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>); // scope 6 at cita-chain/core/src/libchain/chain.rs:642:29: 642:50
        _43 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::read(move _44) -> [return: bb29, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:642:29: 642:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:642:44: 642:48
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::read}, val: Value(<ZST>) }
    }

    bb29: {
        _49 = &_43;                      // scope 7 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
        _48 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::deref(move _49) -> [return: bb30, unwind: bb157]; // scope 7 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:643:30: 643:52
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _47 = _48;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
        _50 = &_6;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:643:44: 643:51
        _46 = BTreeMap::<u64, BlockInQueue>::get::<u64>(move _47, _50) -> [return: bb31, unwind: bb157]; // scope 7 at cita-chain/core/src/libchain/chain.rs:643:30: 643:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:643:40: 643:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<u64, BlockInQueue>, &'b u64) -> std::option::Option<&'a BlockInQueue> {BTreeMap::<u64, BlockInQueue>::get::<u64>}, val: Value(<ZST>) }
    }

    bb31: {
        _45 = std::option::Option::<&BlockInQueue>::cloned(move _46) -> [return: bb32, unwind: bb157]; // scope 7 at cita-chain/core/src/libchain/chain.rs:643:30: 643:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:643:53: 643:59
                                         // + literal: Const { ty: fn(std::option::Option<&BlockInQueue>) -> std::option::Option<BlockInQueue> {std::option::Option::<&BlockInQueue>::cloned}, val: Value(<ZST>) }
    }

    bb32: {
        _268 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        _269 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        _264 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        _265 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        _266 = const true;               // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        _42 = move _45;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:643:13: 643:27
        drop(_43) -> [return: bb33, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:644:9: 644:10
    }

    bb33: {
        _52 = discriminant(_42);         // scope 6 at cita-chain/core/src/libchain/chain.rs:646:15: 646:29
        switchInt(move _52) -> [1: bb35, otherwise: bb34]; // scope 6 at cita-chain/core/src/libchain/chain.rs:646:9: 646:29
    }

    bb34: {
        _207 = log::Level::Warn;         // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _210 = &_207;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _251 = const _;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[17])) }
        _209 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _210, _251) -> [return: bb134, unwind: bb191]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb35: {
        _51 = discriminant(((_42 as Some).0: libchain::chain::BlockInQueue)); // scope 6 at cita-chain/core/src/libchain/chain.rs:646:15: 646:29
        switchInt(move _51) -> [1: bb36, 2: bb64, otherwise: bb34]; // scope 6 at cita-chain/core/src/libchain/chain.rs:646:9: 646:29
    }

    bb36: {
        _266 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:647:47: 647:52
        _53 = move ((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).0: types::block::OpenBlock); // scope 6 at cita-chain/core/src/libchain/chain.rs:647:47: 647:52
        _59 = &_53;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
        _58 = <OpenBlock as Deref>::deref(move _59) -> [return: bb40, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:41: 648:55
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _54 = const false;               // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
        goto -> bb39;                    // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
    }

    bb38: {
        _65 = &_53;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
        _64 = <OpenBlock as Deref>::deref(move _65) -> [return: bb43, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:79: 648:98
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _54) -> [0: bb63, otherwise: bb46]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
    }

    bb40: {
        _57 = _58;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
        _56 = OpenHeader::number(move _57) -> [return: bb41, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:41: 648:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:47: 648:53
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb41: {
        _55 = chain::Chain::validate_height(_1, move _56) -> [return: bb42, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:25: 648:40
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> bool {chain::Chain::validate_height}, val: Value(<ZST>) }
    }

    bb42: {
        switchInt(move _55) -> [0: bb37, otherwise: bb38]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
    }

    bb43: {
        _63 = _64;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
        _62 = OpenHeader::parent_hash(move _63) -> [return: bb44, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:85: 648:96
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb44: {
        _61 = _62;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:648:79: 648:98
        _60 = chain::Chain::validate_hash(_1, move _61) -> [return: bb45, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:648:60: 648:99
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:648:65: 648:78
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b H256) -> bool {chain::Chain::validate_hash}, val: Value(<ZST>) }
    }

    bb45: {
        _54 = move _60;                  // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
        goto -> bb39;                    // scope 8 at cita-chain/core/src/libchain/chain.rs:648:20: 648:99
    }

    bb46: {
        _67 = &_2;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:649:40: 649:44
        _256 = deref_copy (*_67);        // scope 8 at cita-chain/core/src/libchain/chain.rs:649:40: 649:44
        _68 = &_53;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:649:46: 649:52
        _66 = chain::Chain::set_db_result(_1, _256, _68) -> [return: bb47, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:649:21: 649:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:649:26: 649:39
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, &'b libproto::ExecutedResult, &'c OpenBlock) {chain::Chain::set_db_result}, val: Value(<ZST>) }
    }

    bb47: {
        _72 = &_53;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:650:37: 650:49
        _71 = OpenBlock::body(move _72) -> [return: bb48, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:650:37: 650:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:650:43: 650:47
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a types::block::BlockBody {OpenBlock::body}, val: Value(<ZST>) }
    }

    bb48: {
        _70 = _71;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:650:37: 650:70
        _69 = types::block::BlockBody::transaction_hashes(move _70) -> [return: bb49, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:650:37: 650:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:650:50: 650:68
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb49: {
        _74 = _6;                        // scope 9 at cita-chain/core/src/libchain/chain.rs:651:51: 651:57
        _77 = &_69;                      // scope 9 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
        _76 = <Vec<H256> as Deref>::deref(_77) -> [return: bb50, unwind: bb155]; // scope 9 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:651:59: 651:69
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb50: {
        _75 = _76;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:651:59: 651:69
        _78 = &_3;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:651:71: 651:79
        _257 = deref_copy (*_78);        // scope 9 at cita-chain/core/src/libchain/chain.rs:651:71: 651:79
        _73 = chain::Chain::delivery_block_tx_hashes(_1, move _74, move _75, _257) -> [return: bb51, unwind: bb155]; // scope 9 at cita-chain/core/src/libchain/chain.rs:651:21: 651:80
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:651:26: 651:50
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, u64, &'b [H256], &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::delivery_block_tx_hashes}, val: Value(<ZST>) }
    }

    bb51: {
        _80 = &_3;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:652:51: 652:59
        _258 = deref_copy (*_80);        // scope 9 at cita-chain/core/src/libchain/chain.rs:652:51: 652:59
        _79 = chain::Chain::broadcast_current_status(_1, _258) -> [return: bb52, unwind: bb155]; // scope 9 at cita-chain/core/src/libchain/chain.rs:652:21: 652:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:652:26: 652:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_current_status}, val: Value(<ZST>) }
    }

    bb52: {
        _81 = log::Level::Debug;         // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _84 = &_81;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _236 = const _;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[2])) }
        _83 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _84, _236) -> [return: bb56, unwind: bb155]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb53: {
        _82 = const false;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb54: {
        _86 = &_81;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _88 = log::max_level() -> [return: bb57, unwind: bb155]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb55: {
        switchInt(move _82) -> [0: bb62, otherwise: bb59]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb56: {
        switchInt(move _83) -> [0: bb53, otherwise: bb54]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        _87 = &_88;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _85 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _86, move _87) -> [return: bb58, unwind: bb155]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb58: {
        _82 = move _85;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb59: {
        _235 = const _;                  // scope 10 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:653:28: 653:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[1])) }
        _91 = _235 as &[&str] (Pointer(Unsize)); // scope 10 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
        _96 = &_6;                       // scope 10 at cita-chain/core/src/libchain/chain.rs:653:63: 653:69
        _95 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_96) -> [return: bb60, unwind: bb155]; // scope 10 at cita-chain/core/src/libchain/chain.rs:653:63: 653:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:653:63: 653:69
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb60: {
        _94 = [move _95];                // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _93 = &_94;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _92 = _93 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _90 = Arguments::<'_>::new_v1(move _91, move _92) -> [return: bb61, unwind: bb155]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb61: {
        _234 = const _;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[0])) }
        _89 = log::__private_api_log(move _90, _81, _234) -> [return: bb192, unwind: bb155]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb62: {
        drop(_69) -> [return: bb63, unwind: bb156]; // scope 8 at cita-chain/core/src/libchain/chain.rs:654:17: 654:18
    }

    bb63: {
        drop(_53) -> [return: bb140, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:655:13: 655:14
    }

    bb64: {
        _265 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:656:43: 656:48
        _97 = move (((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).0: types::block::OpenBlock); // scope 6 at cita-chain/core/src/libchain/chain.rs:656:43: 656:48
        _264 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:656:50: 656:52
        _98 = move (((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).1: std::option::Option<libproto::Proof>); // scope 6 at cita-chain/core/src/libchain/chain.rs:656:50: 656:52
        _100 = &_98;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:657:20: 657:32
        _99 = std::option::Option::<libproto::Proof>::is_some(move _100) -> [return: bb65, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:657:20: 657:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:657:23: 657:30
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<libproto::Proof>) -> bool {std::option::Option::<libproto::Proof>::is_some}, val: Value(<ZST>) }
    }

    bb65: {
        switchInt(move _99) -> [0: bb78, otherwise: bb66]; // scope 11 at cita-chain/core/src/libchain/chain.rs:657:20: 657:32
    }

    bb66: {
        _101 = log::Level::Debug;        // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _104 = &_101;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _248 = const _;                  // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[14])) }
        _103 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _104, _248) -> [return: bb70, unwind: bb153]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb67: {
        _102 = const false;              // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb69;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb68: {
        _106 = &_101;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _108 = log::max_level() -> [return: bb71, unwind: bb153]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb69: {
        switchInt(move _102) -> [0: bb90, otherwise: bb73]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb70: {
        switchInt(move _103) -> [0: bb67, otherwise: bb68]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb71: {
        _107 = &_108;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _105 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _106, move _107) -> [return: bb72, unwind: bb153]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb72: {
        _102 = move _105;                // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb69;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb73: {
        _247 = const _;                  // scope 12 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[13])) }
        _111 = _247 as &[&str] (Pointer(Unsize)); // scope 12 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
        _120 = &_97;                     // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
        _119 = <OpenBlock as Deref>::deref(move _120) -> [return: bb74, unwind: bb153]; // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:59: 658:73
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb74: {
        _118 = _119;                     // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
        _117 = OpenHeader::number(move _118) -> [return: bb75, unwind: bb153]; // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:65: 658:71
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb75: {
        _116 = &_117;                    // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
        _115 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_116) -> [return: bb76, unwind: bb153]; // scope 12 at cita-chain/core/src/libchain/chain.rs:658:59: 658:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:59: 658:73
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb76: {
        _114 = [move _115];              // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _113 = &_114;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _112 = _113 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _110 = Arguments::<'_>::new_v1(move _111, move _112) -> [return: bb77, unwind: bb153]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb77: {
        _246 = const _;                  // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[12])) }
        _109 = log::__private_api_log(move _110, _101, _246) -> [return: bb193, unwind: bb153]; // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb78: {
        _121 = log::Level::Debug;        // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _124 = &_121;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _245 = const _;                  // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[11])) }
        _123 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _124, _245) -> [return: bb82, unwind: bb153]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb79: {
        _122 = const false;              // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb81;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb80: {
        _126 = &_121;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _128 = log::max_level() -> [return: bb83, unwind: bb153]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb81: {
        switchInt(move _122) -> [0: bb90, otherwise: bb85]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb82: {
        switchInt(move _123) -> [0: bb79, otherwise: bb80]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb83: {
        _127 = &_128;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _125 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _126, move _127) -> [return: bb84, unwind: bb153]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb84: {
        _122 = move _125;                // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb81;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb85: {
        _244 = const _;                  // scope 13 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:28: 660:60
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[10])) }
        _131 = _244 as &[&str] (Pointer(Unsize)); // scope 13 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
        _140 = &_97;                     // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
        _139 = <OpenBlock as Deref>::deref(move _140) -> [return: bb86, unwind: bb153]; // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:62: 660:76
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb86: {
        _138 = _139;                     // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
        _137 = OpenHeader::number(move _138) -> [return: bb87, unwind: bb153]; // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:68: 660:74
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb87: {
        _136 = &_137;                    // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
        _135 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_136) -> [return: bb88, unwind: bb153]; // scope 13 at cita-chain/core/src/libchain/chain.rs:660:62: 660:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:62: 660:76
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb88: {
        _134 = [move _135];              // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _133 = &_134;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _132 = _133 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _130 = Arguments::<'_>::new_v1(move _131, move _132) -> [return: bb89, unwind: bb153]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb89: {
        _243 = const _;                  // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[9])) }
        _129 = log::__private_api_log(move _130, _121, _243) -> [return: bb194, unwind: bb153]; // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb90: {
        _142 = _6;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:662:20: 662:26
        _144 = chain::Chain::get_current_height(_1) -> [return: bb91, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:662:30: 662:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:662:35: 662:53
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb91: {
        _145 = CheckedAdd(_144, const 1_u64); // scope 11 at cita-chain/core/src/libchain/chain.rs:662:30: 662:59
        assert(!move (_145.1: bool), "attempt to compute `{} + {}`, which would overflow", move _144, const 1_u64) -> [success: bb92, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:662:30: 662:59
    }

    bb92: {
        _143 = move (_145.0: u64);       // scope 11 at cita-chain/core/src/libchain/chain.rs:662:30: 662:59
        _141 = Eq(move _142, move _143); // scope 11 at cita-chain/core/src/libchain/chain.rs:662:20: 662:59
        switchInt(move _141) -> [0: bb116, otherwise: bb93]; // scope 11 at cita-chain/core/src/libchain/chain.rs:662:20: 662:59
    }

    bb93: {
        _151 = &_97;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
        _150 = <OpenBlock as Deref>::deref(move _151) -> [return: bb94, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:663:43: 663:62
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a <OpenBlock as Deref>::Target {<OpenBlock as Deref>::deref}, val: Value(<ZST>) }
    }

    bb94: {
        _149 = _150;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
        _148 = OpenHeader::parent_hash(move _149) -> [return: bb95, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:663:49: 663:60
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a H256 {OpenHeader::parent_hash}, val: Value(<ZST>) }
    }

    bb95: {
        _147 = _148;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:663:43: 663:62
        _146 = chain::Chain::validate_hash(_1, move _147) -> [return: bb96, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:663:24: 663:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:663:29: 663:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b H256) -> bool {chain::Chain::validate_hash}, val: Value(<ZST>) }
    }

    bb96: {
        switchInt(move _146) -> [0: bb114, otherwise: bb97]; // scope 11 at cita-chain/core/src/libchain/chain.rs:663:24: 663:63
    }

    bb97: {
        _153 = &_2;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:664:44: 664:48
        _259 = deref_copy (*_153);       // scope 11 at cita-chain/core/src/libchain/chain.rs:664:44: 664:48
        _154 = &_97;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:664:50: 664:56
        _152 = chain::Chain::set_db_result(_1, _259, _154) -> [return: bb98, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:664:25: 664:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:664:30: 664:43
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, &'b libproto::ExecutedResult, &'c OpenBlock) {chain::Chain::set_db_result}, val: Value(<ZST>) }
    }

    bb98: {
        _158 = &_97;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:665:41: 665:53
        _157 = OpenBlock::body(move _158) -> [return: bb99, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:665:41: 665:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:665:47: 665:51
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a types::block::BlockBody {OpenBlock::body}, val: Value(<ZST>) }
    }

    bb99: {
        _156 = _157;                     // scope 11 at cita-chain/core/src/libchain/chain.rs:665:41: 665:74
        _155 = types::block::BlockBody::transaction_hashes(move _156) -> [return: bb100, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:665:41: 665:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:665:54: 665:72
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb100: {
        _160 = _6;                       // scope 14 at cita-chain/core/src/libchain/chain.rs:666:55: 666:61
        _163 = &_155;                    // scope 14 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
        _162 = <Vec<H256> as Deref>::deref(_163) -> [return: bb101, unwind: bb152]; // scope 14 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:666:63: 666:73
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> &'a <Vec<H256> as Deref>::Target {<Vec<H256> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb101: {
        _161 = _162;                     // scope 14 at cita-chain/core/src/libchain/chain.rs:666:63: 666:73
        _164 = &_3;                      // scope 14 at cita-chain/core/src/libchain/chain.rs:666:75: 666:83
        _260 = deref_copy (*_164);       // scope 14 at cita-chain/core/src/libchain/chain.rs:666:75: 666:83
        _159 = chain::Chain::delivery_block_tx_hashes(_1, move _160, move _161, _260) -> [return: bb102, unwind: bb152]; // scope 14 at cita-chain/core/src/libchain/chain.rs:666:25: 666:84
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:666:30: 666:54
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a chain::Chain, u64, &'b [H256], &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::delivery_block_tx_hashes}, val: Value(<ZST>) }
    }

    bb102: {
        _166 = &_3;                      // scope 14 at cita-chain/core/src/libchain/chain.rs:667:55: 667:63
        _261 = deref_copy (*_166);       // scope 14 at cita-chain/core/src/libchain/chain.rs:667:55: 667:63
        _165 = chain::Chain::broadcast_current_status(_1, _261) -> [return: bb103, unwind: bb152]; // scope 14 at cita-chain/core/src/libchain/chain.rs:667:25: 667:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:667:30: 667:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_current_status}, val: Value(<ZST>) }
    }

    bb103: {
        _167 = log::Level::Debug;        // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _170 = &_167;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _242 = const _;                  // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[8])) }
        _169 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _170, _242) -> [return: bb107, unwind: bb152]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb104: {
        _168 = const false;              // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb106;                   // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb105: {
        _172 = &_167;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _174 = log::max_level() -> [return: bb108, unwind: bb152]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb106: {
        switchInt(move _168) -> [0: bb113, otherwise: bb110]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb107: {
        switchInt(move _169) -> [0: bb104, otherwise: bb105]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb108: {
        _173 = &_174;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _171 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _172, move _173) -> [return: bb109, unwind: bb152]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb109: {
        _168 = move _171;                // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb106;                   // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb110: {
        _241 = const _;                  // scope 15 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:668:32: 668:58
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[7])) }
        _177 = _241 as &[&str] (Pointer(Unsize)); // scope 15 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
        _182 = &_6;                      // scope 15 at cita-chain/core/src/libchain/chain.rs:668:60: 668:66
        _181 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_182) -> [return: bb111, unwind: bb152]; // scope 15 at cita-chain/core/src/libchain/chain.rs:668:60: 668:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:668:60: 668:66
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb111: {
        _180 = [move _181];              // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _179 = &_180;                    // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _178 = _179 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _176 = Arguments::<'_>::new_v1(move _177, move _178) -> [return: bb112, unwind: bb152]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb112: {
        _240 = const _;                  // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[6])) }
        _175 = log::__private_api_log(move _176, _167, _240) -> [return: bb195, unwind: bb152]; // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb113: {
        drop(_155) -> [return: bb129, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:669:21: 669:22
    }

    bb114: {
        _183 = chain::Chain::clear_block_map(_1) -> [return: bb115, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:670:25: 670:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:670:30: 670:45
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) {chain::Chain::clear_block_map}, val: Value(<ZST>) }
    }

    bb115: {
        _185 = &_3;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:671:55: 671:63
        _262 = deref_copy (*_185);       // scope 11 at cita-chain/core/src/libchain/chain.rs:671:55: 671:63
        _184 = chain::Chain::broadcast_current_status(_1, _262) -> [return: bb196, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:671:25: 671:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:671:30: 671:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::broadcast_current_status}, val: Value(<ZST>) }
    }

    bb116: {
        _187 = &_3;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:674:45: 674:53
        _263 = deref_copy (*_187);       // scope 11 at cita-chain/core/src/libchain/chain.rs:674:45: 674:53
        _186 = chain::Chain::signal_to_executor(_1, _263) -> [return: bb117, unwind: bb153]; // scope 11 at cita-chain/core/src/libchain/chain.rs:674:21: 674:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:674:26: 674:44
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {chain::Chain::signal_to_executor}, val: Value(<ZST>) }
    }

    bb117: {
        _188 = log::Level::Warn;         // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _191 = &_188;                    // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _239 = const _;                  // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[5])) }
        _190 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _191, _239) -> [return: bb121, unwind: bb153]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb118: {
        _189 = const false;              // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb120;                   // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb119: {
        _193 = &_188;                    // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _195 = log::max_level() -> [return: bb122, unwind: bb153]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb120: {
        switchInt(move _189) -> [0: bb129, otherwise: bb124]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb121: {
        switchInt(move _190) -> [0: bb118, otherwise: bb119]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb122: {
        _194 = &_195;                    // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _192 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _193, move _194) -> [return: bb123, unwind: bb153]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb123: {
        _189 = move _192;                // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb120;                   // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb124: {
        _238 = const _;                  // scope 16 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[4])) }
        _198 = _238 as &[&str] (Pointer(Unsize)); // scope 16 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
        _203 = &_6;                      // scope 16 at cita-chain/core/src/libchain/chain.rs:677:25: 677:31
        _202 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_203) -> [return: bb125, unwind: bb153]; // scope 16 at cita-chain/core/src/libchain/chain.rs:677:25: 677:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:677:25: 677:31
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb125: {
        _206 = chain::Chain::get_current_height(_1) -> [return: bb126, unwind: bb153]; // scope 16 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:678:30: 678:48
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb126: {
        _205 = &_206;                    // scope 16 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
        _204 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_205) -> [return: bb127, unwind: bb153]; // scope 16 at cita-chain/core/src/libchain/chain.rs:678:25: 678:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:678:25: 678:50
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb127: {
        _201 = [move _202, move _204];   // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _200 = &_201;                    // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _199 = _200 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _197 = Arguments::<'_>::new_v1(move _198, move _199) -> [return: bb128, unwind: bb153]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb128: {
        _237 = const _;                  // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[3])) }
        _196 = log::__private_api_log(move _197, _188, _237) -> [return: bb197, unwind: bb153]; // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb129: {
        drop(_98) -> [return: bb130, unwind: bb154]; // scope 6 at cita-chain/core/src/libchain/chain.rs:681:13: 681:14
    }

    bb130: {
        drop(_97) -> [return: bb140, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:681:13: 681:14
    }

    bb131: {
        _208 = const false;              // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb133;                   // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb132: {
        _212 = &_207;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _214 = log::max_level() -> [return: bb135, unwind: bb191]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb133: {
        switchInt(move _208) -> [0: bb140, otherwise: bb137]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb134: {
        switchInt(move _209) -> [0: bb131, otherwise: bb132]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb135: {
        _213 = &_214;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _211 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _212, move _213) -> [return: bb136, unwind: bb191]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb136: {
        _208 = move _211;                // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb133;                   // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb137: {
        _250 = const _;                  // scope 17 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[16])) }
        _217 = _250 as &[&str] (Pointer(Unsize)); // scope 17 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
        _222 = &_6;                      // scope 17 at cita-chain/core/src/libchain/chain.rs:683:55: 683:61
        _221 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_222) -> [return: bb138, unwind: bb191]; // scope 17 at cita-chain/core/src/libchain/chain.rs:683:55: 683:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:683:55: 683:61
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb138: {
        _220 = [move _221];              // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _219 = &_220;                    // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _218 = _219 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _216 = Arguments::<'_>::new_v1(move _217, move _218) -> [return: bb139, unwind: bb191]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb139: {
        _249 = const _;                  // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::set_executed_result, [], Some(promoted[15])) }
        _215 = log::__private_api_log(move _216, _207, _249) -> [return: bb198, unwind: bb191]; // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb140: {
        _224 = &((*_1).4: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>); // scope 6 at cita-chain/core/src/libchain/chain.rs:688:25: 688:47
        _223 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::write(move _224) -> [return: bb141, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:688:25: 688:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:688:40: 688:45
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::write}, val: Value(<ZST>) }
    }

    bb141: {
        _228 = &mut _223;                // scope 18 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
        _227 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut(move _228) -> [return: bb142, unwind: bb151]; // scope 18 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:689:23: 689:66
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb142: {
        _226 = _227;                     // scope 18 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
        _230 = chain::Chain::get_current_height(_1) -> [return: bb143, unwind: bb151]; // scope 18 at cita-chain/core/src/libchain/chain.rs:689:40: 689:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:689:45: 689:63
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb143: {
        _229 = &_230;                    // scope 18 at cita-chain/core/src/libchain/chain.rs:689:39: 689:65
        _225 = BTreeMap::<u64, BlockInQueue>::split_off::<u64>(move _226, _229) -> [return: bb144, unwind: bb151]; // scope 18 at cita-chain/core/src/libchain/chain.rs:689:23: 689:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:689:29: 689:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut BTreeMap<u64, BlockInQueue>, &'b u64) -> BTreeMap<u64, BlockInQueue> {BTreeMap::<u64, BlockInQueue>::split_off::<u64>}, val: Value(<ZST>) }
    }

    bb144: {
        _267 = const true;               // scope 19 at cita-chain/core/src/libchain/chain.rs:690:18: 690:25
        _231 = move _225;                // scope 19 at cita-chain/core/src/libchain/chain.rs:690:18: 690:25
        _233 = &mut _223;                // scope 19 at cita-chain/core/src/libchain/chain.rs:690:10: 690:15
        _232 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut(move _233) -> [return: bb145, unwind: bb178]; // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:690:9: 690:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb145: {
        drop((*_232)) -> [return: bb146, unwind: bb147]; // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
    }

    bb146: {
        _267 = const false;              // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
        (*_232) = move _231;             // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
        _267 = const false;              // scope 19 at cita-chain/core/src/libchain/chain.rs:690:24: 690:25
        drop(_223) -> [return: bb148, unwind: bb191]; // scope 6 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb147 (cleanup): {
        _267 = const false;              // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
        (*_232) = move _231;             // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
        goto -> bb178;                   // scope 19 at cita-chain/core/src/libchain/chain.rs:690:9: 690:15
    }

    bb148: {
        _271 = discriminant(_42);        // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        switchInt(move _271) -> [1: bb164, otherwise: bb163]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb149: {
        drop(_14) -> bb150;              // scope 2 at cita-chain/core/src/libchain/chain.rs:625:9: 625:10
    }

    bb150: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:691:6: 691:6
    }

    bb151 (cleanup): {
        drop(_223) -> bb191;             // scope 6 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb152 (cleanup): {
        drop(_155) -> bb153;             // scope 11 at cita-chain/core/src/libchain/chain.rs:669:21: 669:22
    }

    bb153 (cleanup): {
        drop(_98) -> bb154;              // scope 6 at cita-chain/core/src/libchain/chain.rs:681:13: 681:14
    }

    bb154 (cleanup): {
        drop(_97) -> bb191;              // scope 6 at cita-chain/core/src/libchain/chain.rs:681:13: 681:14
    }

    bb155 (cleanup): {
        drop(_69) -> bb156;              // scope 8 at cita-chain/core/src/libchain/chain.rs:654:17: 654:18
    }

    bb156 (cleanup): {
        drop(_53) -> bb191;              // scope 6 at cita-chain/core/src/libchain/chain.rs:655:13: 655:14
    }

    bb157 (cleanup): {
        drop(_43) -> bb191;              // scope 6 at cita-chain/core/src/libchain/chain.rs:644:9: 644:10
    }

    bb158 (cleanup): {
        drop(_29) -> bb162;              // scope 2 at cita-chain/core/src/libchain/chain.rs:636:9: 636:10
    }

    bb159 (cleanup): {
        drop(_31) -> bb162;              // scope 2 at cita-chain/core/src/libchain/chain.rs:632:38: 632:39
    }

    bb160 (cleanup): {
        drop(_17) -> bb161;              // scope 3 at cita-chain/core/src/libchain/chain.rs:625:9: 625:10
    }

    bb161 (cleanup): {
        drop(_14) -> bb162;              // scope 2 at cita-chain/core/src/libchain/chain.rs:625:9: 625:10
    }

    bb162 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:610:5: 691:6
    }

    bb163: {
        _268 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        _268 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        _269 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        _264 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        _265 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        _266 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        goto -> bb150;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:691:6: 691:6
    }

    bb164: {
        _270 = discriminant(((_42 as Some).0: libchain::chain::BlockInQueue)); // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        switchInt(move _270) -> [1: bb168, 2: bb170, otherwise: bb176]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb165: {
        _269 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        goto -> bb163;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb166 (cleanup): {
        drop(((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).1: libproto::Proof)) -> bb162; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb167: {
        drop(((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).1: libproto::Proof)) -> bb165; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb168: {
        switchInt(_266) -> [0: bb167, otherwise: bb169]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb169: {
        drop(((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).0: types::block::OpenBlock)) -> [return: bb167, unwind: bb166]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb170: {
        switchInt(_265) -> [0: bb173, otherwise: bb175]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb171 (cleanup): {
        switchInt(_264) -> [0: bb162, otherwise: bb172]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb172 (cleanup): {
        drop((((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).1: std::option::Option<libproto::Proof>)) -> bb162; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb173: {
        switchInt(_264) -> [0: bb165, otherwise: bb174]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb174: {
        drop((((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).1: std::option::Option<libproto::Proof>)) -> bb165; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb175: {
        drop((((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).0: types::block::OpenBlock)) -> [return: bb173, unwind: bb171]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb176: {
        drop(((_42 as Some).0: libchain::chain::BlockInQueue)) -> bb165; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb177 (cleanup): {
        drop(_231) -> bb151;             // scope 19 at cita-chain/core/src/libchain/chain.rs:690:24: 690:25
    }

    bb178 (cleanup): {
        switchInt(_267) -> [0: bb151, otherwise: bb177]; // scope 19 at cita-chain/core/src/libchain/chain.rs:690:24: 690:25
    }

    bb179 (cleanup): {
        switchInt(_269) -> [0: bb162, otherwise: bb189]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb180 (cleanup): {
        drop(((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).1: libproto::Proof)) -> bb162; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb181 (cleanup): {
        switchInt(_269) -> [0: bb162, otherwise: bb180]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb182 (cleanup): {
        switchInt(_266) -> [0: bb181, otherwise: bb183]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb183 (cleanup): {
        drop(((((_42 as Some).0: libchain::chain::BlockInQueue) as ConsensusBlock).0: types::block::OpenBlock)) -> bb181; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb184 (cleanup): {
        switchInt(_265) -> [0: bb185, otherwise: bb187]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb185 (cleanup): {
        switchInt(_264) -> [0: bb162, otherwise: bb186]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb186 (cleanup): {
        drop((((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).1: std::option::Option<libproto::Proof>)) -> bb162; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb187 (cleanup): {
        drop((((((_42 as Some).0: libchain::chain::BlockInQueue) as SyncBlock).0: (types::block::OpenBlock, std::option::Option<libproto::Proof>)).0: types::block::OpenBlock)) -> bb185; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb188 (cleanup): {
        drop(((_42 as Some).0: libchain::chain::BlockInQueue)) -> bb162; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb189 (cleanup): {
        _272 = discriminant(((_42 as Some).0: libchain::chain::BlockInQueue)); // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        switchInt(move _272) -> [1: bb182, 2: bb184, otherwise: bb188]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb190 (cleanup): {
        _273 = discriminant(_42);        // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
        switchInt(move _273) -> [1: bb179, otherwise: bb162]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb191 (cleanup): {
        switchInt(_268) -> [0: bb162, otherwise: bb190]; // scope 2 at cita-chain/core/src/libchain/chain.rs:691:5: 691:6
    }

    bb192: {
        goto -> bb62;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb193: {
        goto -> bb90;                    // scope 12 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb194: {
        goto -> bb90;                    // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb195: {
        goto -> bb113;                   // scope 15 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb196: {
        goto -> bb129;                   // scope 11 at cita-chain/core/src/libchain/chain.rs:671:25: 671:64
    }

    bb197: {
        goto -> bb129;                   // scope 16 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb198: {
        goto -> bb140;                   // scope 17 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:21: 653:70
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:21: 653:70

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:653:21: 653:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:653:21: 653:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:653:21: 653:70
        _1 = (move _2, move _4, move _6, const 653_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61

    bb0: {
        _1 = [const "executed set consensus block-"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:653:28: 653:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:653:28: 653:61
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:675:21: 679:22
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:675:21: 679:22

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:675:21: 679:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:675:21: 679:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:675:21: 679:22
        _1 = (move _2, move _4, move _6, const 675_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85

    bb0: {
        _1 = [const "executor'ret is not continous,ret num ", const " current height "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:676:25: 676:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:676:25: 676:85
    }
}

promoted[5] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:25: 668:67
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:25: 668:67

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:668:25: 668:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:668:25: 668:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:668:25: 668:67
        _1 = (move _2, move _4, move _6, const 668_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58

    bb0: {
        _1 = [const "finish sync blocks to "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:668:32: 668:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:668:32: 668:58
    }
}

promoted[8] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:21: 660:77
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:21: 660:77

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:660:21: 660:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:21: 660:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:660:21: 660:77
        _1 = (move _2, move _4, move _6, const 660_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60

    bb0: {
        _1 = [const "SyncBlock not has proof in  "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:660:28: 660:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:660:28: 660:60
    }
}

promoted[11] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[12] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:21: 658:74
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:21: 658:74

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:658:21: 658:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:21: 658:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:658:21: 658:74
        _1 = (move _2, move _4, move _6, const 658_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[13] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57

    bb0: {
        _1 = [const "SyncBlock has proof in  ", const " "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:658:28: 658:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:658:28: 658:57
    }
}

promoted[14] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[15] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:17: 683:62
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:17: 683:62

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:683:17: 683:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:683:17: 683:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:683:17: 683:62
        _1 = (move _2, move _4, move _6, const 683_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[16] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53

    bb0: {
        _1 = [const "block-", const " in queue is invalid"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:683:23: 683:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:683:23: 683:53
    }
}

promoted[17] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_executed_result: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<types::block::Block> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:694:18: 694:23
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:694:25: 694:28
    let mut _0: std::option::Option<types::block::Block>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:694:43: 694:56
    let mut _3: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:698:27: 698:40
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:696:13: 696:33
    let _5: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:696:28: 696:32
    let _6: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:697:30: 697:36
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:699:64: 699:88
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:700:65: 700:90
    scope 1 {
        debug hash => _5;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:696:28: 696:32
    }
    scope 2 {
        debug number => _6;              // in scope 2 at cita-chain/core/src/libchain/chain.rs:697:30: 697:36
    }

    bb0: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/core/src/libchain/chain.rs:695:15: 695:18
        switchInt(move _4) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:695:9: 695:18
    }

    bb1: {
        _3 = discriminant(((_2 as Tag).0: types::block_number::Tag)); // scope 0 at cita-chain/core/src/libchain/chain.rs:695:15: 695:18
        switchInt(move _3) -> [0: bb7, 1: bb6, 2: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:695:9: 695:18
    }

    bb2: {
        _8 = chain::Chain::get_pending_height(_1) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:700:65: 700:90
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:700:70: 700:88
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_pending_height}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:695:15: 695:18
    }

    bb4: {
        _5 = ((_2 as Hash).0: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:696:28: 696:32
        _0 = chain::Chain::block_by_hash(_1, _5) -> bb10; // scope 1 at cita-chain/core/src/libchain/chain.rs:696:37: 696:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:696:42: 696:55
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::Block> {chain::Chain::block_by_hash}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = ((_2 as Height).0: u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:697:30: 697:36
        _0 = chain::Chain::block_by_height(_1, _6) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:697:41: 697:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:697:46: 697:61
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = chain::Chain::block_by_height(_1, const 0_u64) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:698:45: 698:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:698:50: 698:65
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = chain::Chain::get_latest_height(_1) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:699:64: 699:88
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:699:69: 699:86
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_latest_height}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = chain::Chain::block_by_height(_1, move _7) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:699:43: 699:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:699:48: 699:63
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = chain::Chain::block_by_height(_1, move _8) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:700:44: 700:91
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:700:49: 700:64
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:702:6: 702:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_by_hash(_1: &chain::Chain, _2: H256) -> std::option::Option<types::block::Block> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:705:26: 705:31
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:705:33: 705:37
    let mut _0: std::option::Option<types::block::Block>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:705:48: 705:61
    let mut _3: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:706:9: 706:40
    let mut _4: [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50

    bb0: {
        _3 = chain::Chain::block_height_by_hash(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:706:9: 706:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:706:14: 706:34
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<u64> {chain::Chain::block_height_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50
        _4 = [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26] { self: move _5 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50
                                         // closure
                                         // + def_id: DefId(0:232 ~ core[3f1a]::libchain::chain::{impl#5}::block_by_hash::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((u64,)) -> std::option::Option<types::block::Block>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _0 = std::option::Option::<u64>::and_then::<types::block::Block, [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26]>(move _3, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:706:9: 707:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:707:14: 707:22
                                         // + literal: Const { ty: fn(std::option::Option<u64>, [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26]) -> std::option::Option<types::block::Block> {std::option::Option::<u64>::and_then::<types::block::Block, [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:708:6: 708:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_by_hash::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:707:23: 707:26], _2: u64) -> std::option::Option<types::block::Block> {
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:707:24: 707:25
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:705:27: 705:31
    let mut _0: std::option::Option<types::block::Block>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:707:27: 707:27
    let mut _3: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50
    let mut _4: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:707:23: 707:50

    bb0: {
        _3 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:707:27: 707:50
        _4 = deref_copy (*_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:707:27: 707:50
        _0 = chain::Chain::block_by_height(_4, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:707:27: 707:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:707:32: 707:47
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:707:50: 707:50
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_by_height(_1: &chain::Chain, _2: u64) -> std::option::Option<types::block::Block> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:711:28: 711:33
    debug number => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:711:35: 711:41
    let mut _0: std::option::Option<types::block::Block>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:711:59: 711:72
    let mut _3: (std::option::Option<types::header::Header>, std::option::Option<types::block::BlockBody>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
    let mut _4: std::option::Option<types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:713:13: 713:48
    let mut _5: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:714:13: 714:46
    let mut _6: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:716:23: 716:30
    let mut _7: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:716:14: 716:21
    let _8: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:716:19: 716:20
    let _9: types::block::BlockBody;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:716:28: 716:29
    let mut _10: types::block::Block;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:716:40: 716:68
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    let mut _13: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    let mut _14: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    let mut _15: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    scope 1 {
        debug h => _8;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:716:19: 716:20
        debug b => _9;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:716:28: 716:29
    }

    bb0: {
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        _4 = chain::Chain::block_header_by_height(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:713:13: 713:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:713:18: 713:40
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = chain::Chain::block_body_by_height(_1, _2) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:714:13: 714:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:714:18: 714:38
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        _12 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        _3 = (move _4, move _5);         // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        _7 = discriminant((_3.0: std::option::Option<types::header::Header>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        switchInt(move _7) -> [1: bb4, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:712:9: 715:10
    }

    bb3: {
        _0 = std::option::Option::<types::block::Block>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:717:18: 717:22
        goto -> bb17;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:717:18: 717:22
    }

    bb4: {
        _6 = discriminant((_3.1: std::option::Option<types::block::BlockBody>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:712:15: 715:10
        switchInt(move _6) -> [1: bb5, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:712:9: 715:10
    }

    bb5: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:716:19: 716:20
        _8 = move (((_3.0: std::option::Option<types::header::Header>) as Some).0: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:716:19: 716:20
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:716:28: 716:29
        _9 = move (((_3.1: std::option::Option<types::block::BlockBody>) as Some).0: types::block::BlockBody); // scope 0 at cita-chain/core/src/libchain/chain.rs:716:28: 716:29
        _10 = types::block::Block { header: move _8, body: move _9 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:716:40: 716:68
        _0 = std::option::Option::<types::block::Block>::Some(move _10); // scope 1 at cita-chain/core/src/libchain/chain.rs:716:35: 716:69
        goto -> bb17;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:715:9: 715:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:711:5: 719:6
    }

    bb8 (cleanup): {
        _13 = discriminant((_3.1: std::option::Option<types::block::BlockBody>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
        switchInt(move _13) -> [1: bb9, otherwise: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb7, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb10 (cleanup): {
        drop((((_3.1: std::option::Option<types::block::BlockBody>) as Some).0: types::block::BlockBody)) -> bb7; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb11: {
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:719:6: 719:6
    }

    bb12: {
        switchInt(_11) -> [0: bb11, otherwise: bb13]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb13: {
        drop((((_3.1: std::option::Option<types::block::BlockBody>) as Some).0: types::block::BlockBody)) -> bb11; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb14: {
        _14 = discriminant((_3.1: std::option::Option<types::block::BlockBody>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
        switchInt(move _14) -> [1: bb12, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb15: {
        switchInt(_12) -> [0: bb14, otherwise: bb16]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb16: {
        drop((((_3.0: std::option::Option<types::header::Header>) as Some).0: types::header::Header)) -> [return: bb14, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }

    bb17: {
        _15 = discriminant((_3.0: std::option::Option<types::header::Header>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
        switchInt(move _15) -> [1: bb15, otherwise: bb14]; // scope 0 at cita-chain/core/src/libchain/chain.rs:719:5: 719:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_header(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<Header> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:722:25: 722:30
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:722:32: 722:35
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:722:50: 722:64
    let mut _3: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:726:27: 726:40
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:724:13: 724:33
    let _5: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:724:28: 724:32
    let _6: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:725:30: 725:36
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:727:71: 727:95
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:728:72: 728:97
    scope 1 {
        debug hash => _5;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:724:28: 724:32
    }
    scope 2 {
        debug number => _6;              // in scope 2 at cita-chain/core/src/libchain/chain.rs:725:30: 725:36
    }

    bb0: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/core/src/libchain/chain.rs:723:15: 723:18
        switchInt(move _4) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:723:9: 723:18
    }

    bb1: {
        _3 = discriminant(((_2 as Tag).0: types::block_number::Tag)); // scope 0 at cita-chain/core/src/libchain/chain.rs:723:15: 723:18
        switchInt(move _3) -> [0: bb7, 1: bb6, 2: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:723:9: 723:18
    }

    bb2: {
        _8 = chain::Chain::get_pending_height(_1) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:728:72: 728:97
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:728:77: 728:95
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_pending_height}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:723:15: 723:18
    }

    bb4: {
        _5 = ((_2 as Hash).0: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:724:28: 724:32
        _0 = chain::Chain::block_header_by_hash(_1, _5) -> bb10; // scope 1 at cita-chain/core/src/libchain/chain.rs:724:37: 724:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:724:42: 724:62
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<Header> {chain::Chain::block_header_by_hash}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = ((_2 as Height).0: u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:725:30: 725:36
        _0 = chain::Chain::block_header_by_height(_1, _6) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:725:41: 725:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:725:46: 725:68
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = chain::Chain::block_header_by_height(_1, const 0_u64) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:726:45: 726:75
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:726:50: 726:72
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = chain::Chain::get_latest_height(_1) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:727:71: 727:95
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:727:76: 727:93
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_latest_height}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = chain::Chain::block_header_by_height(_1, move _7) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:727:43: 727:96
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:727:48: 727:70
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = chain::Chain::block_header_by_height(_1, move _8) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:728:44: 728:98
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:728:49: 728:71
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:730:6: 730:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_header_by_hash(_1: &chain::Chain, _2: H256) -> std::option::Option<Header> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:733:33: 733:38
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:733:40: 733:44
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:733:55: 733:69
    let _3: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:735:17: 735:23
    let mut _4: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:735:26: 735:52
    let mut _5: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:46
    let mut _6: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:38
    let _7: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:38
    let mut _8: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
    let mut _9: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
    let _10: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
    let mut _11: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
    let mut _12: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:736:42: 736:46
    let mut _13: types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
    let mut _14: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
    let _15: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
    let mut _16: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
    let mut _17: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:740:9: 740:40
    let mut _18: [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57
    let mut _19: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57
    scope 1 {
        debug header => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:735:17: 735:23
    }

    bb0: {
        _4 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:735:26: 735:52
        _3 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:735:26: 735:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:735:46: 735:50
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
        _10 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _11) -> [return: bb2, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:736:16: 736:29
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
        _8 = Header::hash(move _9) -> [return: bb3, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:736:23: 736:27
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = std::option::Option::<H256>::unwrap(move _8) -> [return: bb4, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:736:30: 736:36
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = &_7;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:38
        _12 = &_2;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:736:42: 736:46
        _5 = <H256 as PartialEq>::eq(move _6, move _12) -> [return: bb5, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:736:16: 736:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb9, otherwise: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:736:16: 736:46
    }

    bb6: {
        _16 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
        _15 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _16) -> [return: bb7, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:737:29: 737:43
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = _15;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
        _13 = <Header as Clone>::clone(move _14) -> [return: bb8, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/chain.rs:737:29: 737:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:737:36: 737:41
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = std::option::Option::<Header>::Some(move _13); // scope 1 at cita-chain/core/src/libchain/chain.rs:737:24: 737:44
        drop(_3) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:739:9: 739:10
    }

    bb9: {
        drop(_3) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:739:9: 739:10
    }

    bb10: {
        _17 = chain::Chain::block_height_by_hash(_1, _2) -> bb11; // scope 0 at cita-chain/core/src/libchain/chain.rs:740:9: 740:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:740:14: 740:34
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<u64> {chain::Chain::block_height_by_hash}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57
        _18 = [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26] { self: move _19 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57
                                         // closure
                                         // + def_id: DefId(0:236 ~ core[3f1a]::libchain::chain::{impl#5}::block_header_by_hash::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((u64,)) -> std::option::Option<types::header::Header>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _0 = std::option::Option::<u64>::and_then::<Header, [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26]>(move _17, move _18) -> bb12; // scope 0 at cita-chain/core/src/libchain/chain.rs:740:9: 741:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:741:14: 741:22
                                         // + literal: Const { ty: fn(std::option::Option<u64>, [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26]) -> std::option::Option<Header> {std::option::Option::<u64>::and_then::<Header, [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26]>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:742:6: 742:6
    }

    bb13 (cleanup): {
        drop(_3) -> bb14;                // scope 0 at cita-chain/core/src/libchain/chain.rs:739:9: 739:10
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:733:5: 742:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_header_by_hash::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:741:23: 741:26], _2: u64) -> std::option::Option<Header> {
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:741:24: 741:25
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:733:34: 733:38
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:741:27: 741:27
    let mut _3: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57
    let mut _4: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:741:23: 741:57

    bb0: {
        _3 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:741:27: 741:57
        _4 = deref_copy (*_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:741:27: 741:57
        _0 = chain::Chain::block_header_by_height(_4, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:741:27: 741:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:741:32: 741:54
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:741:57: 741:57
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_header_by_height(_1: &chain::Chain, _2: u64) -> std::option::Option<Header> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:744:31: 744:36
    debug number => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:744:38: 744:44
    let mut _0: std::option::Option<types::header::Header>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:744:62: 744:76
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:745:13: 745:23
    let mut _4: &types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:745:26: 745:64
    let _5: types::db_indexes::BlockNumber2Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:745:26: 745:52
    let mut _6: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:746:9: 748:29
    let mut _7: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:747:18: 747:54
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
    let _13: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
    let _14: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
    let mut _15: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:748:24: 748:28
    scope 1 {
        debug number_key => _3;          // in scope 1 at cita-chain/core/src/libchain/chain.rs:745:13: 745:23
    }

    bb0: {
        _5 = BlockNumber2Header(_2);     // scope 0 at cita-chain/core/src/libchain/chain.rs:745:26: 745:52
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:745:26: 745:64
        _3 = <BlockNumber2Header as DBIndex>::get_index(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:745:26: 745:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:745:53: 745:62
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Header) -> Vec<u8> {<BlockNumber2Header as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:746:9: 747:68
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
        _11 = const std::option::Option::<DataCategory>::Some(Headers); // scope 1 at cita-chain/core/src/libchain/chain.rs:747:18: 747:54
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x01)) }
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
        _13 = <Vec<u8> as Deref>::deref(_14) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:747:56: 747:67
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:747:56: 747:67
        _7 = <RocksDB as Database>::get(move _8, move _11, move _12) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 747:68
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:747:14: 747:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:748:24: 748:28
        _6 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _7, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 748:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:748:14: 748:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<Header, [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23]) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:746:9: 752:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:749:14: 749:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23]) -> std::option::Option<Header> {std::option::Option::<Vec<u8>>::map::<Header, [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:753:5: 753:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:753:6: 753:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:753:5: 753:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:744:5: 753:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_header_by_height::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:749:18: 749:23], _2: Vec<u8>) -> Header {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:749:19: 749:22
    let mut _0: types::header::Header;   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:750:21: 750:27
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
    scope 1 {
        debug header => _0;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:750:21: 750:27
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:750:50: 750:54
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:750:50: 750:54
        _0 = rlp::decode::<Header>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:750:38: 750:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:750:38: 750:49
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Header {rlp::decode::<Header>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:752:13: 752:14
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:752:14: 752:14
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:752:13: 752:14
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:749:18: 752:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_body(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<types::block::BlockBody> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:756:23: 756:28
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:756:30: 756:33
    let mut _0: std::option::Option<types::block::BlockBody>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:756:48: 756:65
    let mut _3: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:760:27: 760:40
    let mut _4: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:758:13: 758:33
    let _5: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:758:28: 758:32
    let _6: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:759:30: 759:36
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:761:69: 761:93
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:762:70: 762:95
    scope 1 {
        debug hash => _5;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:758:28: 758:32
    }
    scope 2 {
        debug number => _6;              // in scope 2 at cita-chain/core/src/libchain/chain.rs:759:30: 759:36
    }

    bb0: {
        _4 = discriminant(_2);           // scope 0 at cita-chain/core/src/libchain/chain.rs:757:15: 757:18
        switchInt(move _4) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:757:9: 757:18
    }

    bb1: {
        _3 = discriminant(((_2 as Tag).0: types::block_number::Tag)); // scope 0 at cita-chain/core/src/libchain/chain.rs:757:15: 757:18
        switchInt(move _3) -> [0: bb7, 1: bb6, 2: bb2, otherwise: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:757:9: 757:18
    }

    bb2: {
        _8 = chain::Chain::get_pending_height(_1) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:762:70: 762:95
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:762:75: 762:93
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_pending_height}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:757:15: 757:18
    }

    bb4: {
        _5 = ((_2 as Hash).0: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:758:28: 758:32
        _0 = chain::Chain::block_body_by_hash(_1, _5) -> bb10; // scope 1 at cita-chain/core/src/libchain/chain.rs:758:37: 758:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:758:42: 758:60
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_hash}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = ((_2 as Height).0: u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:759:30: 759:36
        _0 = chain::Chain::block_body_by_height(_1, _6) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:759:41: 759:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:759:46: 759:66
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = chain::Chain::block_body_by_height(_1, const 0_u64) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:760:45: 760:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:760:50: 760:70
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = chain::Chain::get_latest_height(_1) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:761:69: 761:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:761:74: 761:91
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_latest_height}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = chain::Chain::block_body_by_height(_1, move _7) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:761:43: 761:94
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:761:48: 761:68
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = chain::Chain::block_body_by_height(_1, move _8) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:762:44: 762:96
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:762:49: 762:69
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:764:6: 764:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_hash_by_height(_1: &chain::Chain, _2: u64) -> std::option::Option<H256> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:766:33: 766:38
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:766:40: 766:46
    let mut _0: std::option::Option<cita_types::H256>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:766:64: 766:76
    let mut _3: std::option::Option<types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:767:9: 767:44

    bb0: {
        _3 = chain::Chain::block_header_by_height(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:767:9: 767:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:767:14: 767:36
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<Header> {chain::Chain::block_header_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = std::option::Option::<Header>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23]) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:767:9: 768:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:768:14: 768:17
                                         // + literal: Const { ty: fn(std::option::Option<Header>, [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23]) -> std::option::Option<H256> {std::option::Option::<Header>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23], val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:769:6: 769:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_hash_by_height::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:768:18: 768:23], _2: Header) -> H256 {
    debug hdr => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:768:19: 768:22
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:24
    let mut _3: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:34
    let mut _4: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:34

    bb0: {
        _4 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:34
        _3 = Header::hash(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:768:28: 768:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = std::option::Option::<H256>::unwrap(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:768:24: 768:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:768:35: 768:41
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:768:42: 768:43
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:768:43: 768:43
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:768:42: 768:43
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:768:18: 768:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_body_by_hash(_1: &chain::Chain, _2: H256) -> std::option::Option<types::block::BlockBody> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:772:27: 772:32
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:772:34: 772:38
    let mut _0: std::option::Option<types::block::BlockBody>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:772:49: 772:66
    let mut _3: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:773:9: 773:40
    let mut _4: [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55

    bb0: {
        _3 = chain::Chain::block_height_by_hash(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:773:9: 773:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:773:14: 773:34
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<u64> {chain::Chain::block_height_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55
        _4 = [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26] { self: move _5 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55
                                         // closure
                                         // + def_id: DefId(0:243 ~ core[3f1a]::libchain::chain::{impl#5}::block_body_by_hash::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((u64,)) -> std::option::Option<types::block::BlockBody>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _0 = std::option::Option::<u64>::and_then::<types::block::BlockBody, [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26]>(move _3, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:773:9: 774:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:774:14: 774:22
                                         // + literal: Const { ty: fn(std::option::Option<u64>, [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26]) -> std::option::Option<types::block::BlockBody> {std::option::Option::<u64>::and_then::<types::block::BlockBody, [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:775:6: 775:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_body_by_hash::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:774:23: 774:26], _2: u64) -> std::option::Option<types::block::BlockBody> {
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:774:24: 774:25
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:772:28: 772:32
    let mut _0: std::option::Option<types::block::BlockBody>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:774:27: 774:27
    let mut _3: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55
    let mut _4: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:774:23: 774:55

    bb0: {
        _3 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:774:27: 774:55
        _4 = deref_copy (*_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:774:27: 774:55
        _0 = chain::Chain::block_body_by_height(_4, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:774:27: 774:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:774:32: 774:52
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:774:55: 774:55
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_body_by_height(_1: &chain::Chain, _2: u64) -> std::option::Option<types::block::BlockBody> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:778:29: 778:34
    debug number => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:778:36: 778:42
    let mut _0: std::option::Option<types::block::BlockBody>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:778:60: 778:77
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:779:13: 779:23
    let mut _4: &types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:779:26: 779:62
    let _5: types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:779:26: 779:50
    let mut _6: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:780:9: 782:29
    let mut _7: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:781:18: 781:53
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
    let _13: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
    let _14: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
    let mut _15: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:782:24: 782:28
    scope 1 {
        debug number_key => _3;          // in scope 1 at cita-chain/core/src/libchain/chain.rs:779:13: 779:23
    }

    bb0: {
        _5 = BlockNumber2Body(_2);       // scope 0 at cita-chain/core/src/libchain/chain.rs:779:26: 779:50
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:779:26: 779:62
        _3 = <BlockNumber2Body as DBIndex>::get_index(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:779:26: 779:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:779:51: 779:60
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Body) -> Vec<u8> {<BlockNumber2Body as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:780:9: 781:67
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
        _11 = const std::option::Option::<DataCategory>::Some(Bodies); // scope 1 at cita-chain/core/src/libchain/chain.rs:781:18: 781:53
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x02)) }
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
        _13 = <Vec<u8> as Deref>::deref(_14) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:781:55: 781:66
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:781:55: 781:66
        _7 = <RocksDB as Database>::get(move _8, move _11, move _12) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 781:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:781:14: 781:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:782:24: 782:28
        _6 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _7, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 782:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:782:14: 782:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<types::block::BlockBody, [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23]) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:780:9: 786:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:783:14: 783:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23]) -> std::option::Option<types::block::BlockBody> {std::option::Option::<Vec<u8>>::map::<types::block::BlockBody, [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:787:5: 787:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:787:6: 787:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:787:5: 787:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:778:5: 787:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_body_by_height::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:783:18: 783:23], _2: Vec<u8>) -> types::block::BlockBody {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:783:19: 783:22
    let mut _0: types::block::BlockBody; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:784:21: 784:25
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
    scope 1 {
        debug body => _0;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:784:21: 784:25
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:784:51: 784:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:784:51: 784:55
        _0 = rlp::decode::<types::block::BlockBody>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:784:39: 784:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:784:39: 784:50
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> types::block::BlockBody {rlp::decode::<types::block::BlockBody>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:786:13: 786:14
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:786:14: 786:14
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:786:13: 786:14
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:783:18: 786:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_tx_hashes(_1: &chain::Chain, _2: u64) -> std::option::Option<Vec<H256>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:790:28: 790:33
    debug number => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:790:35: 790:41
    let mut _0: std::option::Option<std::vec::Vec<cita_types::H256>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:790:59: 790:76
    let mut _3: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:791:9: 791:42

    bb0: {
        _3 = chain::Chain::block_body_by_height(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:791:9: 791:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:791:14: 791:34
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = std::option::Option::<types::block::BlockBody>::map::<Vec<H256>, [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24]) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:791:9: 792:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:792:14: 792:17
                                         // + literal: Const { ty: fn(std::option::Option<types::block::BlockBody>, [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24]) -> std::option::Option<Vec<H256>> {std::option::Option::<types::block::BlockBody>::map::<Vec<H256>, [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24], val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:793:6: 793:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_tx_hashes::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:792:18: 792:24], _2: types::block::BlockBody) -> Vec<H256> {
    debug body => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:792:19: 792:23
    let mut _0: std::vec::Vec<cita_types::H256>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:792:25: 792:25
    let mut _3: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:792:25: 792:50

    bb0: {
        _3 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:792:25: 792:50
        _0 = types::block::BlockBody::transaction_hashes(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:792:25: 792:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:792:30: 792:48
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:792:49: 792:50
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:792:50: 792:50
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:792:49: 792:50
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:792:18: 792:50
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction(_1: &chain::Chain, _2: H256) -> std::option::Option<types::transaction::SignedTransaction> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:796:24: 796:29
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:796:31: 796:35
    let mut _0: std::option::Option<types::transaction::SignedTransaction>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:796:57: 796:82
    let mut _3: std::option::Option<types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:9: 797:37
    let mut _4: [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10

    bb0: {
        _3 = chain::Chain::transaction_index(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:797:9: 797:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:797:14: 797:31
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<TransactionIndex> {chain::Chain::transaction_index}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10
        _4 = [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53] { self: move _5 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10
                                         // closure
                                         // + def_id: DefId(0:249 ~ core[3f1a]::libchain::chain::{impl#5}::transaction::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::transaction_index::TransactionIndex,)) -> std::option::Option<types::transaction::SignedTransaction>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _0 = std::option::Option::<TransactionIndex>::and_then::<types::transaction::SignedTransaction, [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53]>(move _3, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:797:9: 801:11
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:797:38: 797:46
                                         // + literal: Const { ty: fn(std::option::Option<TransactionIndex>, [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53]) -> std::option::Option<types::transaction::SignedTransaction> {std::option::Option::<TransactionIndex>::and_then::<types::transaction::SignedTransaction, [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:802:6: 802:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:797:47: 797:53], _2: TransactionIndex) -> std::option::Option<types::transaction::SignedTransaction> {
    debug addr => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:48: 797:52
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:796:25: 796:29
    let mut _0: std::option::Option<types::transaction::SignedTransaction>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:797:54: 797:54
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:798:17: 798:22
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10
    let mut _6: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:797:47: 801:10
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:798:17: 798:22
        let _4: cita_types::H256;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:799:17: 799:21
        scope 2 {
            debug hash => _4;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:799:17: 799:21
        }
    }

    bb0: {
        _3 = (_2.1: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:798:25: 798:35
        _4 = (_2.0: cita_types::H256);   // scope 1 at cita-chain/core/src/libchain/chain.rs:799:24: 799:39
        _5 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 2 at cita-chain/core/src/libchain/chain.rs:800:13: 800:53
        _6 = deref_copy (*_5);           // scope 2 at cita-chain/core/src/libchain/chain.rs:800:13: 800:53
        _0 = chain::Chain::transaction_by_address(_6, _4, _3) -> bb1; // scope 2 at cita-chain/core/src/libchain/chain.rs:800:13: 800:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:800:18: 800:40
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256, usize) -> std::option::Option<types::transaction::SignedTransaction> {chain::Chain::transaction_by_address}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:801:10: 801:10
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_index(_1: &chain::Chain, _2: H256) -> std::option::Option<TransactionIndex> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:805:26: 805:31
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:805:33: 805:37
    let mut _0: std::option::Option<types::transaction_index::TransactionIndex>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:805:59: 805:83
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:806:13: 806:21
    let mut _4: &types::db_indexes::Hash2TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:806:24: 806:63
    let _5: types::db_indexes::Hash2TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:806:24: 806:51
    let mut _6: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:807:9: 809:29
    let mut _7: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:808:18: 808:52
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
    let _13: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
    let _14: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
    let mut _15: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:809:24: 809:28
    scope 1 {
        debug hash_key => _3;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:806:13: 806:21
    }

    bb0: {
        _5 = Hash2TransactionIndex(_2);  // scope 0 at cita-chain/core/src/libchain/chain.rs:806:24: 806:51
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:806:24: 806:63
        _3 = <Hash2TransactionIndex as DBIndex>::get_index(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:806:24: 806:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:806:52: 806:61
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2TransactionIndex) -> Vec<u8> {<Hash2TransactionIndex as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:807:9: 808:64
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
        _11 = const std::option::Option::<DataCategory>::Some(Extra); // scope 1 at cita-chain/core/src/libchain/chain.rs:808:18: 808:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
        _13 = <Vec<u8> as Deref>::deref(_14) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:808:54: 808:63
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:808:54: 808:63
        _7 = <RocksDB as Database>::get(move _8, move _11, move _12) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 808:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:808:14: 808:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:809:24: 809:28
        _6 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _7, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 809:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:809:14: 809:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<TransactionIndex, [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23]) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:807:9: 813:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:810:14: 810:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23]) -> std::option::Option<TransactionIndex> {std::option::Option::<Vec<u8>>::map::<TransactionIndex, [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:814:5: 814:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:814:6: 814:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:814:5: 814:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:805:5: 814:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_index::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:810:18: 810:23], _2: Vec<u8>) -> TransactionIndex {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:810:19: 810:22
    let mut _0: types::transaction_index::TransactionIndex; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:811:21: 811:29
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
    scope 1 {
        debug tx_index => _0;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:811:21: 811:29
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:811:62: 811:66
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:811:62: 811:66
        _0 = rlp::decode::<TransactionIndex>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:811:50: 811:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:811:50: 811:61
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> TransactionIndex {rlp::decode::<TransactionIndex>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:813:13: 813:14
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:813:14: 813:14
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:813:13: 813:14
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:810:18: 813:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_by_address(_1: &chain::Chain, _2: H256, _3: usize) -> std::option::Option<types::transaction::SignedTransaction> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:817:31: 817:36
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:817:38: 817:42
    debug index => _3;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:817:50: 817:55
    let mut _0: std::option::Option<types::transaction::SignedTransaction>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:817:67: 817:92
    let mut _4: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:818:9: 818:38
    let mut _5: [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59
    let mut _6: &usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59

    bb0: {
        _4 = chain::Chain::block_body_by_hash(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:818:9: 818:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:818:14: 818:32
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_3;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59
        _5 = [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24] { index: move _6 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59
                                         // closure
                                         // + def_id: DefId(0:253 ~ core[3f1a]::libchain::chain::{impl#5}::transaction_by_address::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::BlockBody,)) -> types::transaction::SignedTransaction,
                                         //     (&usize,),
                                         // ]
        _0 = std::option::Option::<types::block::BlockBody>::map::<types::transaction::SignedTransaction, [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24]>(move _4, move _5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:818:9: 819:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:819:14: 819:17
                                         // + literal: Const { ty: fn(std::option::Option<types::block::BlockBody>, [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24]) -> std::option::Option<types::transaction::SignedTransaction> {std::option::Option::<types::block::BlockBody>::map::<types::transaction::SignedTransaction, [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:820:6: 820:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_by_address::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:819:18: 819:24], _2: types::block::BlockBody) -> types::transaction::SignedTransaction {
    debug body => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:19: 819:23
    debug index => (*(_1.0: &usize));    // in scope 0 at cita-chain/core/src/libchain/chain.rs:817:50: 817:55
    let mut _0: types::transaction::SignedTransaction; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:25
    let mut _3: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:59
    let _4: &[types::transaction::SignedTransaction]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:44
    let mut _5: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:44
    let _6: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:45: 819:50
    let mut _7: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:51
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:51
    let mut _9: &usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:44
        _4 = types::block::BlockBody::transactions(move _5) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:819:30: 819:42
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> &'a [types::transaction::SignedTransaction] {types::block::BlockBody::transactions}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = deref_copy (_1.0: &usize);  // scope 0 at cita-chain/core/src/libchain/chain.rs:819:45: 819:50
        _6 = (*_9);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:819:45: 819:50
        _7 = Len((*_4));                 // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:51
        _8 = Lt(_6, _7);                 // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:51
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:51
    }

    bb2: {
        _3 = &(*_4)[_6];                 // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:59
        _0 = <types::transaction::SignedTransaction as Clone>::clone(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:819:25: 819:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:819:52: 819:57
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> types::transaction::SignedTransaction {<types::transaction::SignedTransaction as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:819:58: 819:59
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:819:59: 819:59
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:819:58: 819:59
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:819:18: 819:59
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_hashes(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<Vec<H256>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:823:31: 823:36
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:823:38: 823:41
    let mut _0: std::option::Option<std::vec::Vec<cita_types::H256>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:823:56: 823:73
    let mut _3: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:824:9: 824:29

    bb0: {
        _3 = chain::Chain::block_body(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:824:9: 824:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:824:14: 824:24
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, types::block_number::BlockTag) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = std::option::Option::<types::block::BlockBody>::map::<Vec<H256>, [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40]) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:824:9: 824:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:824:30: 824:33
                                         // + literal: Const { ty: fn(std::option::Option<types::block::BlockBody>, [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40]) -> std::option::Option<Vec<H256>> {std::option::Option::<types::block::BlockBody>::map::<Vec<H256>, [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40], val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:825:6: 825:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_hashes::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:824:34: 824:40], _2: types::block::BlockBody) -> Vec<H256> {
    debug body => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:824:35: 824:39
    let mut _0: std::vec::Vec<cita_types::H256>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:824:41: 824:41
    let mut _3: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:824:41: 824:66

    bb0: {
        _3 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:824:41: 824:66
        _0 = types::block::BlockBody::transaction_hashes(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-chain/core/src/libchain/chain.rs:824:41: 824:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:824:46: 824:64
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:824:65: 824:66
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:824:66: 824:66
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:824:65: 824:66
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:824:34: 824:66
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::full_transaction(_1: &chain::Chain, _2: H256) -> std::option::Option<libproto::FullTransaction> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:828:29: 828:34
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:828:36: 828:40
    let mut _0: std::option::Option<libproto::FullTransaction>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:828:62: 828:85
    let mut _3: std::option::Option<types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:9: 829:37
    let mut _4: [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10

    bb0: {
        _3 = chain::Chain::transaction_index(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:829:9: 829:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:829:14: 829:31
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<TransactionIndex> {chain::Chain::transaction_index}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10
        _4 = [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53] { self: move _5 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10
                                         // closure
                                         // + def_id: DefId(0:257 ~ core[3f1a]::libchain::chain::{impl#5}::full_transaction::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::transaction_index::TransactionIndex,)) -> std::option::Option<libproto::FullTransaction>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _0 = std::option::Option::<TransactionIndex>::and_then::<libproto::FullTransaction, [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53]>(move _3, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:829:9: 842:11
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:829:38: 829:46
                                         // + literal: Const { ty: fn(std::option::Option<TransactionIndex>, [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53]) -> std::option::Option<libproto::FullTransaction> {std::option::Option::<TransactionIndex>::and_then::<libproto::FullTransaction, [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:843:6: 843:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::full_transaction::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:829:47: 829:53], _2: TransactionIndex) -> std::option::Option<libproto::FullTransaction> {
    debug addr => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:48: 829:52
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:828:30: 828:34
    let mut _0: std::option::Option<libproto::FullTransaction>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:829:54: 829:54
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:830:17: 830:22
    let mut _5: std::option::Option<types::block::Block>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:13: 832:37
    let mut _6: [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _7: &usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _8: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _9: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10
    let mut _10: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:829:47: 842:10
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:830:17: 830:22
        let _4: cita_types::H256;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:831:17: 831:21
        scope 2 {
            debug hash => _4;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:831:17: 831:21
        }
    }

    bb0: {
        _3 = (_2.1: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:830:25: 830:35
        _4 = (_2.0: cita_types::H256);   // scope 1 at cita-chain/core/src/libchain/chain.rs:831:24: 831:39
        _9 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 2 at cita-chain/core/src/libchain/chain.rs:832:13: 832:37
        _10 = deref_copy (*_9);          // scope 2 at cita-chain/core/src/libchain/chain.rs:832:13: 832:37
        _5 = chain::Chain::block_by_hash(_10, _4) -> bb1; // scope 2 at cita-chain/core/src/libchain/chain.rs:832:13: 832:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:832:18: 832:31
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::Block> {chain::Chain::block_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_3;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
        _8 = &_4;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
        _6 = [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49] { index: move _7, hash: move _8 }; // scope 2 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
                                         // closure
                                         // + def_id: DefId(0:258 ~ core[3f1a]::libchain::chain::{impl#5}::full_transaction::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::Block,)) -> libproto::FullTransaction,
                                         //     (&usize, &cita_types::H256),
                                         // ]
        _0 = std::option::Option::<types::block::Block>::map::<libproto::FullTransaction, [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49]>(move _5, move _6) -> bb2; // scope 2 at cita-chain/core/src/libchain/chain.rs:832:13: 841:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:832:38: 832:41
                                         // + literal: Const { ty: fn(std::option::Option<types::block::Block>, [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49]) -> std::option::Option<libproto::FullTransaction> {std::option::Option::<types::block::Block>::map::<libproto::FullTransaction, [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:842:10: 842:10
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::full_transaction::{closure#0}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:832:42: 832:49], _2: types::block::Block) -> libproto::FullTransaction {
    debug block => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:43: 832:48
    debug index => (*(_1.0: &usize));    // in scope 0 at cita-chain/core/src/libchain/chain.rs:830:17: 830:22
    debug hash => (*(_1.1: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:831:17: 831:21
    let _3: &[types::transaction::SignedTransaction]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:833:21: 833:33
    let mut _4: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:63
    let _5: &types::block::BlockBody;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:48
    let mut _6: &types::block::Block;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:48
    let mut _8: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:834:26: 834:56
    let _9: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:834:39: 834:44
    let mut _10: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:834:26: 834:45
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:834:26: 834:45
    let _12: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:836:17: 836:44
    let mut _13: &mut libproto::FullTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:836:17: 836:44
    let mut _14: libproto::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:836:41: 836:43
    let _15: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:17: 837:57
    let mut _16: &mut libproto::FullTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:17: 837:57
    let mut _17: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let mut _18: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let _19: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let mut _20: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let _21: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let mut _22: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
    let _23: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:838:17: 838:54
    let mut _24: &mut libproto::FullTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:838:17: 838:54
    let mut _25: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
    let mut _26: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
    let _27: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
    let _28: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:839:17: 839:48
    let mut _29: &mut libproto::FullTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:839:17: 839:48
    let mut _30: u32;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:839:35: 839:47
    let mut _31: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:839:35: 839:40
    let mut _32: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _33: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _34: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    let mut _35: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    scope 1 {
        debug transactions => _3;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:833:21: 833:33
        let _7: libproto::SignedTransaction; // in scope 1 at cita-chain/core/src/libchain/chain.rs:834:21: 834:23
        scope 2 {
            debug tx => _7;              // in scope 2 at cita-chain/core/src/libchain/chain.rs:834:21: 834:23
            let mut _0: libproto::FullTransaction; // return place in scope 2 at cita-chain/core/src/libchain/chain.rs:835:21: 835:32
            scope 3 {
                debug full_ts => _0;     // in scope 3 at cita-chain/core/src/libchain/chain.rs:835:21: 835:32
            }
        }
    }

    bb0: {
        _35 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:833:21: 833:33
        _6 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:48
        _5 = types::block::Block::body(move _6) -> [return: bb1, unwind: bb17]; // scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:833:42: 833:46
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a types::block::BlockBody {types::block::Block::body}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:63
        _3 = types::block::BlockBody::transactions(move _4) -> [return: bb2, unwind: bb17]; // scope 0 at cita-chain/core/src/libchain/chain.rs:833:36: 833:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:833:49: 833:61
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> &'a [types::transaction::SignedTransaction] {types::block::BlockBody::transactions}, val: Value(<ZST>) }
    }

    bb2: {
        _32 = deref_copy (_1.0: &usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:834:39: 834:44
        _9 = (*_32);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:834:39: 834:44
        _10 = Len((*_3));                // scope 1 at cita-chain/core/src/libchain/chain.rs:834:26: 834:45
        _11 = Lt(_9, _10);               // scope 1 at cita-chain/core/src/libchain/chain.rs:834:26: 834:45
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb3, unwind: bb17]; // scope 1 at cita-chain/core/src/libchain/chain.rs:834:26: 834:45
    }

    bb3: {
        _8 = &(*_3)[_9];                 // scope 1 at cita-chain/core/src/libchain/chain.rs:834:26: 834:56
        _7 = types::transaction::SignedTransaction::protobuf(move _8) -> [return: bb4, unwind: bb17]; // scope 1 at cita-chain/core/src/libchain/chain.rs:834:26: 834:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:834:46: 834:54
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> libproto::SignedTransaction {types::transaction::SignedTransaction::protobuf}, val: Value(<ZST>) }
    }

    bb4: {
        _35 = const true;                // scope 1 at cita-chain/core/src/libchain/chain.rs:834:55: 834:56
        _0 = libproto::FullTransaction::new() -> [return: bb5, unwind: bb20]; // scope 2 at cita-chain/core/src/libchain/chain.rs:835:35: 835:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:835:35: 835:55
                                         // + literal: Const { ty: fn() -> libproto::FullTransaction {libproto::FullTransaction::new}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &mut _0;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:836:17: 836:44
        _35 = const false;               // scope 3 at cita-chain/core/src/libchain/chain.rs:836:41: 836:43
        _14 = move _7;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:836:41: 836:43
        _12 = libproto::FullTransaction::set_transaction(move _13, move _14) -> [return: bb6, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:836:17: 836:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:836:25: 836:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::FullTransaction, libproto::SignedTransaction) {libproto::FullTransaction::set_transaction}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &mut _0;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:837:17: 837:57
        _22 = &_2;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
        _21 = <types::block::Block as Deref>::deref(move _22) -> [return: bb7, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:837:42: 837:56
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = _21;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
        _19 = <Header as Deref>::deref(move _20) -> [return: bb8, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:837:42: 837:56
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _19;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
        _17 = OpenHeader::number(move _18) -> [return: bb9, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:837:42: 837:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:837:48: 837:54
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = libproto::FullTransaction::set_block_number(move _16, move _17) -> [return: bb10, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:837:17: 837:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:837:25: 837:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::FullTransaction, u64) {libproto::FullTransaction::set_block_number}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = &mut _0;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:838:17: 838:54
        _33 = deref_copy (_1.1: &cita_types::H256); // scope 3 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
        _27 = <H256 as Deref>::deref(_33) -> [return: bb11, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:838:40: 838:53
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = _27;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
        _25 = slice::<impl [u8]>::to_vec(move _26) -> [return: bb12, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:838:40: 838:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:838:45: 838:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = libproto::FullTransaction::set_block_hash(move _24, move _25) -> [return: bb13, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:838:17: 838:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:838:25: 838:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::FullTransaction, Vec<u8>) {libproto::FullTransaction::set_block_hash}, val: Value(<ZST>) }
    }

    bb13: {
        _29 = &mut _0;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:839:17: 839:48
        _34 = deref_copy (_1.0: &usize); // scope 3 at cita-chain/core/src/libchain/chain.rs:839:35: 839:40
        _31 = (*_34);                    // scope 3 at cita-chain/core/src/libchain/chain.rs:839:35: 839:40
        _30 = move _31 as u32 (IntToInt); // scope 3 at cita-chain/core/src/libchain/chain.rs:839:35: 839:47
        _28 = libproto::FullTransaction::set_index(move _29, move _30) -> [return: bb14, unwind: bb16]; // scope 3 at cita-chain/core/src/libchain/chain.rs:839:17: 839:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:839:25: 839:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::FullTransaction, u32) {libproto::FullTransaction::set_index}, val: Value(<ZST>) }
    }

    bb14: {
        _35 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
        drop(_2) -> bb15;                // scope 0 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    }

    bb15: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:841:14: 841:14
    }

    bb16 (cleanup): {
        drop(_0) -> bb20;                // scope 2 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:832:42: 841:14
    }

    bb19 (cleanup): {
        drop(_7) -> bb17;                // scope 1 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    }

    bb20 (cleanup): {
        switchInt(_35) -> [0: bb17, otherwise: bb19]; // scope 1 at cita-chain/core/src/libchain/chain.rs:841:13: 841:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof(_1: &chain::Chain, _2: H256) -> std::option::Option<Vec<u8>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:34: 845:39
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:41: 845:45
    let mut _0: std::option::Option<std::vec::Vec<u8>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:845:67: 845:84
    let mut _3: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header, libproto::Proof)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 915:14
    let mut _4: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 900:15
    let mut _5: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 888:15
    let mut _6: std::option::Option<(usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 878:15
    let mut _7: std::option::Option<(usize, types::block::Block, types::block_receipts::BlockReceipts)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 854:15
    let mut _8: std::option::Option<(types::transaction_index::TransactionIndex, types::block::Block)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 850:15
    let mut _9: std::option::Option<types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 846:37
    let mut _10: [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14
    let mut _11: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14
    let mut _12: [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
    let mut _13: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
    let mut _14: [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
    let mut _15: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
    let mut _16: [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
    let mut _17: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
    let mut _18: [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
    let mut _19: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18

    bb0: {
        _9 = chain::Chain::transaction_index(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 846:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:846:14: 846:31
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<TransactionIndex> {chain::Chain::transaction_index}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14
        _10 = [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29] { self: move _11 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14
                                         // closure
                                         // + def_id: DefId(0:260 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::transaction_index::TransactionIndex,)) -> std::option::Option<(types::transaction_index::TransactionIndex, types::block::Block)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _8 = std::option::Option::<TransactionIndex>::and_then::<(TransactionIndex, types::block::Block), [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29]>(move _9, move _10) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 850:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:847:14: 847:22
                                         // + literal: Const { ty: fn(std::option::Option<TransactionIndex>, [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29]) -> std::option::Option<(TransactionIndex, types::block::Block)> {std::option::Option::<TransactionIndex>::and_then::<(TransactionIndex, types::block::Block), [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29]>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
        _12 = [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38] { self: move _13 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
                                         // closure
                                         // + def_id: DefId(0:262 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((types::transaction_index::TransactionIndex, types::block::Block),)) -> std::option::Option<(usize, types::block::Block, types::block_receipts::BlockReceipts)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _7 = std::option::Option::<(TransactionIndex, types::block::Block)>::and_then::<(usize, types::block::Block, BlockReceipts), [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38]>(move _8, move _12) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 854:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:851:14: 851:22
                                         // + literal: Const { ty: fn(std::option::Option<(TransactionIndex, types::block::Block)>, [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38]) -> std::option::Option<(usize, types::block::Block, BlockReceipts)> {std::option::Option::<(TransactionIndex, types::block::Block)>::and_then::<(usize, types::block::Block, BlockReceipts), [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38]>}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
        _14 = [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49] { hash: move _15 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
                                         // closure
                                         // + def_id: DefId(0:264 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((usize, types::block::Block, types::block_receipts::BlockReceipts),)) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>)>,
                                         //     (&cita_types::H256,),
                                         // ]
        _6 = std::option::Option::<(usize, types::block::Block, BlockReceipts)>::and_then::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49]>(move _7, move _14) -> bb4; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 878:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:855:14: 855:22
                                         // + literal: Const { ty: fn(std::option::Option<(usize, types::block::Block, BlockReceipts)>, [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49]) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)> {std::option::Option::<(usize, types::block::Block, BlockReceipts)>::and_then::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49]>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = std::option::Option::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header), [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63]) -> bb5; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 888:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:879:14: 879:22
                                         // + literal: Const { ty: fn(std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)>, [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)> {std::option::Option::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header), [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63], val: Value(<ZST>) }
    }

    bb5: {
        _17 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
        _16 = [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67] { self: move _17 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
                                         // closure
                                         // + def_id: DefId(0:271 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#4})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header),)) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _4 = std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header), [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67]>(move _5, move _16) -> bb6; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 900:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:889:14: 889:22
                                         // + literal: Const { ty: fn(std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)>, [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)> {std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header), [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67]>}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
        _18 = [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83] { self: move _19 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
                                         // closure
                                         // + def_id: DefId(0:273 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#5})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header),)) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header, libproto::Proof)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _3 = std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof), [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83]>(move _4, move _18) -> bb7; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 915:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:901:14: 901:22
                                         // + literal: Const { ty: fn(std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)>, [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)> {std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)>::and_then::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof), [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83]>}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19]) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:846:9: 936:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:916:14: 916:17
                                         // + literal: Const { ty: fn(std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)>, [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19]) -> std::option::Option<Vec<u8>> {std::option::Option::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19], val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:937:6: 937:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:847:23: 847:29], _2: TransactionIndex) -> std::option::Option<(TransactionIndex, types::block::Block)> {
    debug addr => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:24: 847:28
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:35: 845:39
    let mut _0: std::option::Option<(types::transaction_index::TransactionIndex, types::block::Block)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:847:30: 847:30
    let mut _3: std::option::Option<types::block::Block>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:848:17: 848:52
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:848:36: 848:51
    let mut _5: [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:849:26: 849:47
    let mut _6: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14
    let mut _7: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:23: 850:14

    bb0: {
        _6 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:848:17: 848:52
        _7 = deref_copy (*_6);           // scope 0 at cita-chain/core/src/libchain/chain.rs:848:17: 848:52
        _4 = (_2.0: cita_types::H256);   // scope 0 at cita-chain/core/src/libchain/chain.rs:848:36: 848:51
        _3 = chain::Chain::block_by_hash(_7, move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:848:17: 848:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:848:22: 848:35
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::Block> {chain::Chain::block_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33] { addr: move _2 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:849:26: 849:47
                                         // closure
                                         // + def_id: DefId(0:261 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::Block,)) -> (types::transaction_index::TransactionIndex, types::block::Block),
                                         //     (types::transaction_index::TransactionIndex,),
                                         // ]
        _0 = std::option::Option::<types::block::Block>::map::<(TransactionIndex, types::block::Block), [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33]>(move _3, move _5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:848:17: 849:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:849:22: 849:25
                                         // + literal: Const { ty: fn(std::option::Option<types::block::Block>, [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33]) -> std::option::Option<(TransactionIndex, types::block::Block)> {std::option::Option::<types::block::Block>::map::<(TransactionIndex, types::block::Block), [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:850:14: 850:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#0}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:849:26: 849:33], _2: types::block::Block) -> (TransactionIndex, types::block::Block) {
    debug block => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:849:27: 849:32
    debug addr => (_1.0: types::transaction_index::TransactionIndex); // in scope 0 at cita-chain/core/src/libchain/chain.rs:847:24: 847:28
    let mut _0: (types::transaction_index::TransactionIndex, types::block::Block); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:849:34: 849:34
    let mut _3: types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:849:35: 849:39

    bb0: {
        _3 = move (_1.0: types::transaction_index::TransactionIndex); // scope 0 at cita-chain/core/src/libchain/chain.rs:849:35: 849:39
        _0 = (move _3, move _2);         // scope 0 at cita-chain/core/src/libchain/chain.rs:849:34: 849:47
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:849:47: 849:47
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#1}(_1: [closure@cita-chain/core/src/libchain/chain.rs:851:23: 851:38], _2: (TransactionIndex, types::block::Block)) -> std::option::Option<(usize, types::block::Block, BlockReceipts)> {
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:35: 845:39
    let mut _0: std::option::Option<(usize, types::block::Block, types::block_receipts::BlockReceipts)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:851:39: 851:39
    let _3: types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:25: 851:29
    let _4: types::block::Block;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:31: 851:36
    let mut _5: std::option::Option<types::block_receipts::BlockReceipts>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:852:17: 852:53
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:852:37: 852:52
    let mut _7: [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66
    let mut _8: &types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66
    let mut _9: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
    let mut _10: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:854:13: 854:14
    scope 1 {
        debug addr => _3;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:851:25: 851:29
        debug block => _4;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:851:31: 851:36
    }

    bb0: {
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:851:25: 851:29
        _3 = move (_2.0: types::transaction_index::TransactionIndex); // scope 0 at cita-chain/core/src/libchain/chain.rs:851:25: 851:29
        _11 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:851:31: 851:36
        _4 = move (_2.1: types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:851:31: 851:36
        _9 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 1 at cita-chain/core/src/libchain/chain.rs:852:17: 852:53
        _10 = deref_copy (*_9);          // scope 1 at cita-chain/core/src/libchain/chain.rs:852:17: 852:53
        _6 = (_3.0: cita_types::H256);   // scope 1 at cita-chain/core/src/libchain/chain.rs:852:37: 852:52
        _5 = chain::Chain::block_receipts(_10, move _6) -> [return: bb1, unwind: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:852:17: 852:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:852:22: 852:36
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<BlockReceipts> {chain::Chain::block_receipts}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66
        _11 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66
        _7 = [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36] { addr: move _8, block: move _4 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66
                                         // closure
                                         // + def_id: DefId(0:263 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#1}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block_receipts::BlockReceipts,)) -> (usize, types::block::Block, types::block_receipts::BlockReceipts),
                                         //     (&types::transaction_index::TransactionIndex, types::block::Block),
                                         // ]
        _0 = std::option::Option::<BlockReceipts>::map::<(usize, types::block::Block, BlockReceipts), [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36]>(move _5, move _7) -> [return: bb2, unwind: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:852:17: 853:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:853:22: 853:25
                                         // + literal: Const { ty: fn(std::option::Option<BlockReceipts>, [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36]) -> std::option::Option<(usize, types::block::Block, BlockReceipts)> {std::option::Option::<BlockReceipts>::map::<(usize, types::block::Block, BlockReceipts), [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36]>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:854:13: 854:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:854:14: 854:14
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:851:23: 854:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:854:13: 854:14
    }

    bb5 (cleanup): {
        switchInt(_11) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:854:13: 854:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#1}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:853:26: 853:36], _2: BlockReceipts) -> (usize, types::block::Block, BlockReceipts) {
    debug receipts => _2;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:27: 853:35
    debug addr => (*(_1.0: &types::transaction_index::TransactionIndex)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:25: 851:29
    debug block => (_1.1: types::block::Block); // in scope 0 at cita-chain/core/src/libchain/chain.rs:851:31: 851:36
    let mut _0: (usize, types::block::Block, types::block_receipts::BlockReceipts); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:853:37: 853:37
    let mut _3: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:38: 853:48
    let mut _4: types::block::Block;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:50: 853:55
    let mut _5: &types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:853:26: 853:66

    bb0: {
        _5 = deref_copy (_1.0: &types::transaction_index::TransactionIndex); // scope 0 at cita-chain/core/src/libchain/chain.rs:853:38: 853:48
        _3 = ((*_5).1: usize);           // scope 0 at cita-chain/core/src/libchain/chain.rs:853:38: 853:48
        _4 = move (_1.1: types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:853:50: 853:55
        _0 = (move _3, move _4, move _2); // scope 0 at cita-chain/core/src/libchain/chain.rs:853:37: 853:66
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:853:66: 853:66
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#2}(_1: [closure@cita-chain/core/src/libchain/chain.rs:855:23: 855:49], _2: (usize, types::block::Block, BlockReceipts)) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)> {
    debug hash => (*(_1.0: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:41: 845:45
    let mut _0: std::option::Option<(usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:855:50: 855:50
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
    let _4: types::block::Block;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
    let _5: types::block_receipts::BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:39: 855:47
    let mut _6: std::option::Option<&types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:856:17: 865:23
    let mut _7: std::option::Option<&types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
    let mut _8: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
    let _9: &[types::receipt::Receipt];  // in scope 0 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
    let mut _10: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
    let mut _11: [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:859:31: 865:22
    let mut _12: [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _13: &types::block_receipts::BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _14: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _15: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
    let mut _16: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
        debug block => _4;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
        debug receipts => _5;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:855:39: 855:47
    }

    bb0: {
        _16 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
        _3 = (_2.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
        _16 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
        _4 = move (_2.1: types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
        _5 = move (_2.2: types::block_receipts::BlockReceipts); // scope 0 at cita-chain/core/src/libchain/chain.rs:855:39: 855:47
        _10 = &(_5.0: std::vec::Vec<types::receipt::Receipt>); // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
        _9 = <Vec<types::receipt::Receipt> as Deref>::deref(move _10) -> [return: bb1, unwind: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:856:17: 858:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
        _7 = core::slice::<impl [types::receipt::Receipt]>::get::<usize>(move _8, _3) -> [return: bb2, unwind: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 858:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:858:22: 858:25
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt], usize) -> std::option::Option<&'a <usize as SliceIndex<[types::receipt::Receipt]>>::Output> {core::slice::<impl [types::receipt::Receipt]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = deref_copy (_1.0: &cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:859:31: 865:22
        _11 = [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40] { hash: _15 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:859:31: 865:22
                                         // closure
                                         // + def_id: DefId(0:265 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#2}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((&types::receipt::Receipt,)) -> std::option::Option<&types::receipt::Receipt>,
                                         //     (&cita_types::H256,),
                                         // ]
        _6 = std::option::Option::<&types::receipt::Receipt>::and_then::<&types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40]>(move _7, move _11) -> [return: bb3, unwind: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 865:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:859:22: 859:30
                                         // + literal: Const { ty: fn(std::option::Option<&types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40]) -> std::option::Option<&types::receipt::Receipt> {std::option::Option::<&types::receipt::Receipt>::and_then::<&types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40]>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &_5;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
        _16 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
        _12 = [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40] { receipts: move _13, index: move _14, block: move _4 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
                                         // closure
                                         // + def_id: DefId(0:266 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#2}::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((&types::receipt::Receipt,)) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>)>,
                                         //     (&types::block_receipts::BlockReceipts, &usize, types::block::Block),
                                         // ]
        _0 = std::option::Option::<&types::receipt::Receipt>::and_then::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40]>(move _6, move _12) -> [return: bb4, unwind: bb6]; // scope 1 at cita-chain/core/src/libchain/chain.rs:856:17: 877:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:866:22: 866:30
                                         // + literal: Const { ty: fn(std::option::Option<&types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40]) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)> {std::option::Option::<&types::receipt::Receipt>::and_then::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40]>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
    }

    bb5: {
        _16 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:878:14: 878:14
    }

    bb6 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:855:23: 878:14
    }

    bb8 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
    }

    bb9 (cleanup): {
        switchInt(_16) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:878:13: 878:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#2}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:859:31: 859:40], _2: &types::receipt::Receipt) -> std::option::Option<&types::receipt::Receipt> {
    debug receipt => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:859:32: 859:39
    debug hash => (*(_1.0: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:41: 845:45
    let mut _0: std::option::Option<&types::receipt::Receipt>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:859:41: 859:41
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:860:28: 860:60
    let mut _4: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:860:28: 860:52
    let mut _5: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:859:31: 865:22

    bb0: {
        _4 = &((*_2).6: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:860:28: 860:52
        _5 = deref_copy (_1.0: &cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:860:56: 860:60
        _3 = <H256 as PartialEq>::eq(move _4, _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:860:28: 860:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:860:28: 860:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:860:28: 860:60
    }

    bb2: {
        _0 = std::option::Option::<&types::receipt::Receipt>::Some(_2); // scope 0 at cita-chain/core/src/libchain/chain.rs:861:29: 861:42
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:860:25: 864:26
    }

    bb3: {
        _0 = const std::option::Option::<&types::receipt::Receipt>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:863:29: 863:33
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<&types::receipt::Receipt>, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb4;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:860:25: 864:26
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:865:22: 865:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#2}::{closure#1}(_1: [closure@cita-chain/core/src/libchain/chain.rs:866:31: 866:40], _2: &types::receipt::Receipt) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)> {
    debug receipt => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:32: 866:39
    debug receipts => (*(_1.0: &types::block_receipts::BlockReceipts)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:39: 855:47
    debug index => (*(_1.1: &usize));    // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
    debug block => (_1.2: types::block::Block); // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
    let mut _0: std::option::Option<(usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:866:41: 866:41
    let mut _3: std::option::Option<cita_merklehash::MerkleProof<cita_types::H256>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
    let mut _4: &cita_merklehash::Tree<cita_types::H256, for<'a, 'b> fn(&'a cita_types::H256, &'b cita_types::H256) -> cita_types::H256 {cita_merklehash::merge}>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
    let _5: cita_merklehash::Tree<cita_types::H256, for<'a, 'b> fn(&'a cita_types::H256, &'b cita_types::H256) -> cita_types::H256 {cita_merklehash::merge}>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 874:26
    let mut _6: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 872:53
    let mut _7: std::iter::Map<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 871:80
    let mut _8: std::slice::Iter<'_, types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
    let mut _9: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
    let _10: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
    let mut _11: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
    let mut _12: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:875:51: 875:56
    let mut _13: [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
    let mut _14: &&types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
    let mut _15: &types::block_receipts::BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _16: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _17: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:877:21: 877:22

    bb0: {
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
        _18 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
        _15 = deref_copy (_1.0: &types::block_receipts::BlockReceipts); // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
        _11 = &((*_15).0: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
        _10 = <Vec<types::receipt::Receipt> as Deref>::deref(move _11) -> [return: bb1, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:868:29: 870:40
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
        _8 = core::slice::<impl [types::receipt::Receipt]>::iter(move _9) -> [return: bb2, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 870:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:870:34: 870:38
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt]) -> std::slice::Iter<'a, types::receipt::Receipt> {core::slice::<impl [types::receipt::Receipt]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = <std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]>(move _8, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]) -> [return: bb3, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 871:80
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:871:34: 871:37
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]) -> std::iter::Map<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]> {<std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::map::<H256, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41], val: Value(<ZST>) }
    }

    bb3: {
        _6 = <std::iter::Map<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]> as Iterator>::collect::<Vec<H256>>(move _7) -> [return: bb4, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:868:29: 872:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:872:34: 872:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]>) -> Vec<H256> {<std::iter::Map<std::slice::Iter<'_, types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41]> as Iterator>::collect::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = Tree::<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>::from_hashes(move _6, merge) -> [return: bb5, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 874:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:867:25: 867:59
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<H256>, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}) -> Tree<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}> {Tree::<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>::from_hashes}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:873:29: 873:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
        _16 = deref_copy (_1.1: &usize); // scope 0 at cita-chain/core/src/libchain/chain.rs:875:51: 875:56
        _12 = (*_16);                    // scope 0 at cita-chain/core/src/libchain/chain.rs:875:51: 875:56
        _3 = Tree::<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>::get_proof_by_input_index(move _4, move _12) -> [return: bb6, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 875:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:875:26: 875:50
                                         // + literal: Const { ty: for<'a> fn(&'a Tree<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>, usize) -> std::option::Option<MerkleProof<H256>> {Tree::<H256, for<'a, 'b> fn(&'a H256, &'b H256) -> H256 {merge}>::get_proof_by_input_index}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = deref_copy (_1.1: &usize); // scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
        _14 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
        _13 = [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45] { index: _17, block: move (_1.2: types::block::Block), receipt: move _14 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
                                         // closure
                                         // + def_id: DefId(0:268 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#2}::{closure#1}::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((cita_merklehash::MerkleProof<cita_types::H256>,)) -> (usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>),
                                         //     (&usize, types::block::Block, &&types::receipt::Receipt),
                                         // ]
        _0 = std::option::Option::<MerkleProof<H256>>::map::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45]>(move _3, move _13) -> [return: bb7, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:867:25: 876:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:876:26: 876:29
                                         // + literal: Const { ty: fn(std::option::Option<MerkleProof<H256>>, [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45]) -> std::option::Option<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)> {std::option::Option::<MerkleProof<H256>>::map::<(usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>), [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45]>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_5) -> [return: bb8, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:877:21: 877:22
    }

    bb8: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:877:22: 877:22
    }

    bb9 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:877:21: 877:22
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:866:31: 877:22
    }

    bb11 (cleanup): {
        drop((_1.2: types::block::Block)) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:877:21: 877:22
    }

    bb12 (cleanup): {
        switchInt(_18) -> [0: bb10, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:877:21: 877:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#2}::{closure#1}::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:871:38: 871:41], _2: &types::receipt::Receipt) -> H256 {
    debug r => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:871:39: 871:40
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:42
    let mut _3: &std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:79
    let _4: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:66
    let mut _5: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:55

    bb0: {
        _5 = <types::receipt::Receipt as Encodable>::rlp_bytes(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:871:44: 871:53
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> elastic_array::ElasticArray1024<u8> {<types::receipt::Receipt as Encodable>::rlp_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = elastic_array::ElasticArray1024::<u8>::into_vec(move _5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:871:56: 871:64
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:79
        _0 = <Vec<u8> as Hashable>::crypt_hash(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:871:42: 871:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:871:67: 871:77
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> H256 {<Vec<u8> as Hashable>::crypt_hash}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:871:78: 871:79
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:871:79: 871:79
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:871:78: 871:79
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:871:38: 871:79
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#2}::{closure#1}::{closure#1}(_1: [closure@cita-chain/core/src/libchain/chain.rs:876:30: 876:45], _2: MerkleProof<H256>) -> (usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>) {
    debug receipt_proof => _2;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:31: 876:44
    debug index => (*(_1.0: &usize));    // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:25: 855:30
    debug block => (_1.1: types::block::Block); // in scope 0 at cita-chain/core/src/libchain/chain.rs:855:32: 855:37
    debug receipt => (*(_1.2: &&types::receipt::Receipt)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:866:32: 866:39
    let mut _0: (usize, types::block::Block, types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:876:46: 876:46
    let mut _3: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:47: 876:52
    let mut _4: types::block::Block;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:54: 876:59
    let mut _5: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:61: 876:76
    let mut _6: cita_merklehash::MerkleProof<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:78: 876:91
    let mut _7: &usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
    let mut _8: &&types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
    let mut _9: &types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92

    bb0: {
        _7 = deref_copy (_1.0: &usize);  // scope 0 at cita-chain/core/src/libchain/chain.rs:876:47: 876:52
        _3 = (*_7);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:876:47: 876:52
        _4 = move (_1.1: types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:876:54: 876:59
        _8 = deref_copy (_1.2: &&types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:876:61: 876:76
        _9 = deref_copy (*_8);           // scope 0 at cita-chain/core/src/libchain/chain.rs:876:61: 876:76
        _5 = <types::receipt::Receipt as Clone>::clone(_9) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:876:61: 876:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:876:69: 876:74
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> types::receipt::Receipt {<types::receipt::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _2;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:876:78: 876:91
        _0 = (move _3, move _4, move _5, move _6); // scope 0 at cita-chain/core/src/libchain/chain.rs:876:46: 876:92
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:876:92: 876:92
    }

    bb2 (cleanup): {
        drop(_4) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:876:91: 876:92
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:876:91: 876:92
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:876:30: 876:92
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#3}(_1: [closure@cita-chain/core/src/libchain/chain.rs:879:23: 879:63], _2: (usize, types::block::Block, types::receipt::Receipt, MerkleProof<H256>)) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)> {
    let mut _0: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:879:64: 879:64
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:25: 879:30
    let _4: types::block::Block;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:32: 879:37
    let _5: types::receipt::Receipt;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:39: 879:46
    let _6: cita_merklehash::MerkleProof<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:48: 879:61
    let mut _7: std::option::Option<&types::transaction::SignedTransaction>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:55
    let mut _8: &[types::transaction::SignedTransaction]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:55
    let _9: &[types::transaction::SignedTransaction]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:44
    let mut _10: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:44
    let _11: &types::block::BlockBody;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:29
    let mut _12: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:17: 880:29
    let mut _13: [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
    let mut _14: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
    let mut _15: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    let mut _16: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:879:25: 879:30
        debug block => _4;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:879:32: 879:37
        debug receipt => _5;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:879:39: 879:46
        debug receipt_proof => _6;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:879:48: 879:61
    }

    bb0: {
        _16 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:879:25: 879:30
        _15 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:879:25: 879:30
        _3 = (_2.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:879:25: 879:30
        _4 = move (_2.1: types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:879:32: 879:37
        _16 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:879:39: 879:46
        _5 = move (_2.2: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:879:39: 879:46
        _15 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:879:48: 879:61
        _6 = move (_2.3: cita_merklehash::MerkleProof<cita_types::H256>); // scope 0 at cita-chain/core/src/libchain/chain.rs:879:48: 879:61
        _12 = &_4;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:29
        _11 = types::block::Block::body(move _12) -> [return: bb1, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:880:23: 880:27
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a types::block::BlockBody {types::block::Block::body}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = _11;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:44
        _9 = types::block::BlockBody::transactions(move _10) -> [return: bb2, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:880:30: 880:42
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> &'a [types::transaction::SignedTransaction] {types::block::BlockBody::transactions}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:55
        _7 = core::slice::<impl [types::transaction::SignedTransaction]>::get::<usize>(move _8, _3) -> [return: bb3, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 880:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:880:45: 880:48
                                         // + literal: Const { ty: for<'a> fn(&'a [types::transaction::SignedTransaction], usize) -> std::option::Option<&'a <usize as SliceIndex<[types::transaction::SignedTransaction]>>::Output> {core::slice::<impl [types::transaction::SignedTransaction]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &_4;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
        _16 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
        _15 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
        _13 = [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64] { receipt: move _5, receipt_proof: move _6, block: move _14 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
                                         // closure
                                         // + def_id: DefId(0:270 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#3}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((&types::transaction::SignedTransaction,)) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header),
                                         //     (types::receipt::Receipt, cita_merklehash::MerkleProof<cita_types::H256>, &types::block::Block),
                                         // ]
        _0 = std::option::Option::<&types::transaction::SignedTransaction>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header), [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64]>(move _7, move _13) -> [return: bb4, unwind: bb10]; // scope 1 at cita-chain/core/src/libchain/chain.rs:880:17: 887:19
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:880:56: 880:59
                                         // + literal: Const { ty: fn(std::option::Option<&types::transaction::SignedTransaction>, [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)> {std::option::Option::<&types::transaction::SignedTransaction>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header), [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64]>}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
        _16 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
        drop(_4) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:888:14: 888:14
    }

    bb6 (cleanup): {
        switchInt(_16) -> [0: bb7, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:879:23: 888:14
    }

    bb9 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }

    bb10 (cleanup): {
        switchInt(_15) -> [0: bb6, otherwise: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }

    bb11 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:888:13: 888:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#3}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:880:60: 880:64], _2: &types::transaction::SignedTransaction) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header) {
    debug tx => _2;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:61: 880:63
    debug receipt => (_1.0: types::receipt::Receipt); // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:39: 879:46
    debug receipt_proof => (_1.1: cita_merklehash::MerkleProof<cita_types::H256>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:48: 879:61
    debug block => (*(_1.2: &types::block::Block)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:879:32: 879:37
    let mut _0: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:880:65: 880:65
    let mut _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
    let mut _4: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:883:25: 883:32
    let mut _5: cita_merklehash::Proof;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:884:25: 884:45
    let mut _6: cita_merklehash::MerkleProof<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:884:25: 884:38
    let mut _7: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:47
    let mut _8: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:47
    let _9: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:39
    let mut _10: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18

    bb0: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
        _11 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
        _12 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
        _3 = <types::transaction::SignedTransaction as Clone>::clone(_2) -> [return: bb1, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:882:25: 882:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:882:28: 882:33
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> types::transaction::SignedTransaction {<types::transaction::SignedTransaction as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:883:25: 883:32
        _4 = move (_1.0: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:883:25: 883:32
        _11 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:884:25: 884:38
        _6 = move (_1.1: cita_merklehash::MerkleProof<cita_types::H256>); // scope 0 at cita-chain/core/src/libchain/chain.rs:884:25: 884:38
        _5 = <MerkleProof<H256> as Into<cita_merklehash::Proof>>::into(move _6) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:884:25: 884:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:884:39: 884:43
                                         // + literal: Const { ty: fn(MerkleProof<H256>) -> cita_merklehash::Proof {<MerkleProof<H256> as Into<cita_merklehash::Proof>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = deref_copy (_1.2: &types::block::Block); // scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:39
        _9 = types::block::Block::header(_10) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:885:31: 885:37
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a Header {types::block::Block::header}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:47
        _7 = <Header as Clone>::clone(move _8) -> [return: bb4, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:885:25: 885:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:885:40: 885:45
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {<Header as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = (move _3, move _4, move _5, move _7); // scope 0 at cita-chain/core/src/libchain/chain.rs:881:21: 886:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:887:18: 887:18
    }

    bb5 (cleanup): {
        drop(_5) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:886:21: 886:22
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:886:21: 886:22
    }

    bb7 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:886:21: 886:22
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:880:60: 887:18
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb8, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18
    }

    bb10 (cleanup): {
        drop((_1.1: cita_merklehash::MerkleProof<cita_types::H256>)) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18
    }

    bb11 (cleanup): {
        drop((_1.0: types::receipt::Receipt)) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18
    }

    bb12 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:887:17: 887:18
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#4}(_1: [closure@cita-chain/core/src/libchain/chain.rs:889:23: 889:67], _2: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header)) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)> {
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:35: 845:39
    let mut _0: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:889:68: 889:68
    let _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
    let _4: types::receipt::Receipt;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:29: 889:36
    let _5: cita_merklehash::Proof;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:38: 889:51
    let _6: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:53: 889:65
    let mut _7: std::option::Option<types::block::Block>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:17: 890:64
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:63
    let mut _9: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
    let mut _10: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
    let _11: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
    let mut _12: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
    let mut _13: (u64, bool);            // in scope 0 at cita-chain/core/src/libchain/chain.rs:890:38: 890:63
    let mut _14: [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
    let mut _15: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
    let mut _16: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
    let mut _17: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    let mut _19: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    let mut _20: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    scope 1 {
        debug tx => _3;                  // in scope 1 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        debug receipt => _4;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:889:29: 889:36
        debug receipt_proof => _5;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:889:38: 889:51
        debug block_header => _6;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:889:53: 889:65
    }

    bb0: {
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _17 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _20 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _3 = move (_2.0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
        _19 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:889:29: 889:36
        _4 = move (_2.1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:889:29: 889:36
        _18 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:889:38: 889:51
        _5 = move (_2.2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:889:38: 889:51
        _17 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:889:53: 889:65
        _6 = move (_2.3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:889:53: 889:65
        _15 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 1 at cita-chain/core/src/libchain/chain.rs:890:17: 890:64
        _16 = deref_copy (*_15);         // scope 1 at cita-chain/core/src/libchain/chain.rs:890:17: 890:64
        _12 = &_6;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
        _11 = <Header as Deref>::deref(move _12) -> [return: bb1, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:890:38: 890:59
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = _11;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
        _9 = OpenHeader::number(move _10) -> [return: bb2, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:890:51: 890:57
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = CheckedAdd(_9, const 1_u64); // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:63
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_u64) -> [success: bb3, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:63
    }

    bb3: {
        _8 = move (_13.0: u64);          // scope 1 at cita-chain/core/src/libchain/chain.rs:890:38: 890:63
        _7 = chain::Chain::block_by_height(_16, move _8) -> [return: bb4, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:890:17: 890:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:890:22: 890:37
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
        _19 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
        _18 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
        _17 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
        _14 = [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38] { tx: move _3, receipt: move _4, receipt_proof: move _5, block_header: move _6 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
                                         // closure
                                         // + def_id: DefId(0:272 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#4}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::Block,)) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header),
                                         //     (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header),
                                         // ]
        _0 = std::option::Option::<types::block::Block>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header), [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38]>(move _7, move _14) -> [return: bb5, unwind: bb11]; // scope 1 at cita-chain/core/src/libchain/chain.rs:890:17: 899:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:891:22: 891:25
                                         // + literal: Const { ty: fn(std::option::Option<types::block::Block>, [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)> {std::option::Option::<types::block::Block>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header), [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38]>}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:900:14: 900:14
    }

    bb6 (cleanup): {
        switchInt(_18) -> [0: bb7, otherwise: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb7 (cleanup): {
        switchInt(_19) -> [0: bb8, otherwise: bb13]; // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb8 (cleanup): {
        switchInt(_20) -> [0: bb9, otherwise: bb14]; // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:889:23: 900:14
    }

    bb10 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb11 (cleanup): {
        switchInt(_17) -> [0: bb6, otherwise: bb10]; // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb12 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb13 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }

    bb14 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:900:13: 900:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#4}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:891:26: 891:38], _2: types::block::Block) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header) {
    debug next_block => _2;              // in scope 0 at cita-chain/core/src/libchain/chain.rs:891:27: 891:37
    debug tx => (_1.0: types::transaction::SignedTransaction); // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:25: 889:27
    debug receipt => (_1.1: types::receipt::Receipt); // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:29: 889:36
    debug receipt_proof => (_1.2: cita_merklehash::Proof); // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:38: 889:51
    debug block_header => (_1.3: types::header::Header); // in scope 0 at cita-chain/core/src/libchain/chain.rs:889:53: 889:65
    let mut _0: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:891:39: 891:39
    let mut _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:893:29: 893:31
    let mut _4: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:894:29: 894:36
    let mut _5: cita_merklehash::Proof;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:895:29: 895:42
    let mut _6: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:896:29: 896:41
    let mut _7: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:59
    let mut _8: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:59
    let _9: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:48
    let mut _10: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:48

    bb0: {
        _3 = move (_1.0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:893:29: 893:31
        _4 = move (_1.1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:894:29: 894:36
        _5 = move (_1.2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:895:29: 895:42
        _6 = move (_1.3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:896:29: 896:41
        _10 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:48
        _9 = types::block::Block::header(move _10) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:897:40: 897:46
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a Header {types::block::Block::header}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:59
        _7 = Header::proposal(move _8) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:897:29: 897:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:897:49: 897:57
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> Header {Header::proposal}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _4, move _5, move _6, move _7); // scope 0 at cita-chain/core/src/libchain/chain.rs:892:25: 898:26
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:899:21: 899:22
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:899:22: 899:22
    }

    bb4 (cleanup): {
        drop(_6) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:898:25: 898:26
    }

    bb5 (cleanup): {
        drop(_5) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:898:25: 898:26
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:898:25: 898:26
    }

    bb7 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:898:25: 898:26
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:899:21: 899:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:891:26: 899:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#5}(_1: [closure@cita-chain/core/src/libchain/chain.rs:902:17: 902:83], _2: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header)) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)> {
    debug self => (*(_1.0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:845:35: 845:39
    let mut _0: std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header, libproto::Proof)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:902:84: 902:84
    let _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
    let _4: types::receipt::Receipt;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:23: 902:30
    let _5: cita_merklehash::Proof;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:32: 902:45
    let _6: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:47: 902:59
    let _7: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:61: 902:81
    let mut _8: std::option::Option<types::block::Block>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:21: 903:76
    let mut _9: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:75
    let mut _10: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
    let mut _11: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
    let _12: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
    let mut _13: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
    let mut _14: (u64, bool);            // in scope 0 at cita-chain/core/src/libchain/chain.rs:903:42: 903:75
    let mut _15: [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
    let mut _16: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
    let mut _17: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    let mut _19: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    let mut _20: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    let mut _21: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    let mut _22: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    scope 1 {
        debug tx => _3;                  // in scope 1 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        debug receipt => _4;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:902:23: 902:30
        debug receipt_proof => _5;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:902:32: 902:45
        debug block_header => _6;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:902:47: 902:59
        debug next_proposal_header => _7; // in scope 1 at cita-chain/core/src/libchain/chain.rs:902:61: 902:81
    }

    bb0: {
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _21 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _22 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _22 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _3 = move (_2.0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
        _21 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:902:23: 902:30
        _4 = move (_2.1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:902:23: 902:30
        _20 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:902:32: 902:45
        _5 = move (_2.2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:902:32: 902:45
        _19 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:902:47: 902:59
        _6 = move (_2.3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:902:47: 902:59
        _18 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:902:61: 902:81
        _7 = move (_2.4: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:902:61: 902:81
        _16 = deref_copy (_1.0: &&libchain::chain::Chain); // scope 1 at cita-chain/core/src/libchain/chain.rs:903:21: 903:76
        _17 = deref_copy (*_16);         // scope 1 at cita-chain/core/src/libchain/chain.rs:903:21: 903:76
        _13 = &_7;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
        _12 = <Header as Deref>::deref(move _13) -> [return: bb1, unwind: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:903:42: 903:71
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = _12;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
        _10 = OpenHeader::number(move _11) -> [return: bb2, unwind: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:903:63: 903:69
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = CheckedAdd(_10, const 1_u64); // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:75
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_u64) -> [success: bb3, unwind: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:75
    }

    bb3: {
        _9 = move (_14.0: u64);          // scope 1 at cita-chain/core/src/libchain/chain.rs:903:42: 903:75
        _8 = chain::Chain::block_by_height(_17, move _9) -> [return: bb4, unwind: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:903:21: 903:76
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:903:26: 903:41
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
        _21 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
        _20 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
        _19 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
        _18 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
        _15 = [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43] { tx: move _3, receipt: move _4, receipt_proof: move _5, block_header: move _6, next_proposal_header: move _7 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
                                         // closure
                                         // + def_id: DefId(0:274 ~ core[3f1a]::libchain::chain::{impl#5}::get_transaction_proof::{closure#5}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::Block,)) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header, libproto::Proof),
                                         //     (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header),
                                         // ]
        _0 = std::option::Option::<types::block::Block>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof), [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43]>(move _8, move _15) -> [return: bb5, unwind: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:903:21: 913:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:904:26: 904:29
                                         // + literal: Const { ty: fn(std::option::Option<types::block::Block>, [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43]) -> std::option::Option<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)> {std::option::Option::<types::block::Block>::map::<(types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof), [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43]>}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
        _21 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
        _22 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:914:18: 914:18
    }

    bb6 (cleanup): {
        switchInt(_19) -> [0: bb7, otherwise: bb13]; // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb7 (cleanup): {
        switchInt(_20) -> [0: bb8, otherwise: bb14]; // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb8 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb15]; // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb9 (cleanup): {
        switchInt(_22) -> [0: bb10, otherwise: bb16]; // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:902:17: 914:18
    }

    bb11 (cleanup): {
        drop(_7) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb12 (cleanup): {
        switchInt(_18) -> [0: bb6, otherwise: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb13 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb14 (cleanup): {
        drop(_5) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb15 (cleanup): {
        drop(_4) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }

    bb16 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:914:17: 914:18
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#5}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:904:30: 904:43], _2: types::block::Block) -> (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof) {
    debug third_block => _2;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:904:31: 904:42
    debug tx => (_1.0: types::transaction::SignedTransaction); // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:19: 902:21
    debug receipt => (_1.1: types::receipt::Receipt); // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:23: 902:30
    debug receipt_proof => (_1.2: cita_merklehash::Proof); // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:32: 902:45
    debug block_header => (_1.3: types::header::Header); // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:47: 902:59
    debug next_proposal_header => (_1.4: types::header::Header); // in scope 0 at cita-chain/core/src/libchain/chain.rs:902:61: 902:81
    let mut _0: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, types::header::Header, types::header::Header, libproto::Proof); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:904:44: 904:44
    let mut _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:906:33: 906:35
    let mut _4: types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:907:33: 907:40
    let mut _5: cita_merklehash::Proof;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:908:33: 908:46
    let mut _6: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:909:33: 909:45
    let mut _7: types::header::Header;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:910:33: 910:53
    let mut _8: libproto::Proof;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:69
    let mut _9: &libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:69
    let _10: &libproto::Proof;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
    let mut _11: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
    let _12: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
    let mut _13: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
    let _14: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:53
    let mut _15: &types::block::Block;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:53

    bb0: {
        _3 = move (_1.0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:906:33: 906:35
        _4 = move (_1.1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:907:33: 907:40
        _5 = move (_1.2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:908:33: 908:46
        _6 = move (_1.3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:909:33: 909:45
        _7 = move (_1.4: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:910:33: 910:53
        _15 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:53
        _14 = types::block::Block::header(move _15) -> [return: bb1, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:911:45: 911:51
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a Header {types::block::Block::header}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = _14;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
        _12 = <Header as Deref>::deref(move _13) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:911:33: 911:61
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _12;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
        _10 = OpenHeader::proof(move _11) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:911:54: 911:59
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:69
        _8 = <libproto::Proof as Clone>::clone(move _9) -> [return: bb4, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:911:33: 911:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:911:62: 911:67
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = (move _3, move _4, move _5, move _6, move _7, move _8); // scope 0 at cita-chain/core/src/libchain/chain.rs:905:29: 912:30
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:913:25: 913:26
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:913:26: 913:26
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:912:29: 912:30
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:912:29: 912:30
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:912:29: 912:30
    }

    bb9 (cleanup): {
        drop(_4) -> bb10;                // scope 0 at cita-chain/core/src/libchain/chain.rs:912:29: 912:30
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at cita-chain/core/src/libchain/chain.rs:912:29: 912:30
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:913:25: 913:26
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:904:30: 913:26
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_transaction_proof::{closure#6}(_1: [closure@cita-chain/core/src/libchain/chain.rs:917:17: 924:19], _2: (types::transaction::SignedTransaction, types::receipt::Receipt, cita_merklehash::Proof, Header, Header, libproto::Proof)) -> Vec<u8> {
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:924:20: 924:20
    let _3: types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:918:21: 918:23
    let _4: types::receipt::Receipt;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:919:21: 919:28
    let _5: cita_merklehash::Proof;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:920:21: 920:34
    let _6: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:921:21: 921:33
    let _7: types::header::Header;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:922:21: 922:41
    let _8: libproto::Proof;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:923:21: 923:35
    let mut _9: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:925:21: 933:33
    let mut _10: &libchain::chain::TxProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:925:21: 933:33
    let _11: libchain::chain::TxProof;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:925:21: 932:22
    scope 1 {
        debug tx => _3;                  // in scope 1 at cita-chain/core/src/libchain/chain.rs:918:21: 918:23
        debug receipt => _4;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:919:21: 919:28
        debug receipt_proof => _5;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:920:21: 920:34
        debug block_header => _6;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:921:21: 921:33
        debug next_proposal_header => _7; // in scope 1 at cita-chain/core/src/libchain/chain.rs:922:21: 922:41
        debug proposal_proof => _8;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:923:21: 923:35
    }

    bb0: {
        _3 = move (_2.0: types::transaction::SignedTransaction); // scope 0 at cita-chain/core/src/libchain/chain.rs:918:21: 918:23
        _4 = move (_2.1: types::receipt::Receipt); // scope 0 at cita-chain/core/src/libchain/chain.rs:919:21: 919:28
        _5 = move (_2.2: cita_merklehash::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:920:21: 920:34
        _6 = move (_2.3: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:921:21: 921:33
        _7 = move (_2.4: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:922:21: 922:41
        _8 = move (_2.5: libproto::Proof); // scope 0 at cita-chain/core/src/libchain/chain.rs:923:21: 923:35
        _11 = TxProof { tx: move _3, receipt: move _4, receipt_proof: move _5, block_header: move _6, next_proposal_header: move _7, proposal_proof: move _8 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:925:21: 932:22
        _10 = &_11;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:925:21: 933:33
        _9 = <TxProof as Encodable>::rlp_bytes(move _10) -> [return: bb1, unwind: bb4]; // scope 1 at cita-chain/core/src/libchain/chain.rs:925:21: 933:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:933:22: 933:31
                                         // + literal: Const { ty: for<'a> fn(&'a TxProof) -> elastic_array::ElasticArray1024<u8> {<TxProof as Encodable>::rlp_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = elastic_array::ElasticArray1024::<u8>::into_vec(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at cita-chain/core/src/libchain/chain.rs:925:21: 934:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:934:22: 934:30
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_11) -> bb3;                // scope 1 at cita-chain/core/src/libchain/chain.rs:935:17: 935:18
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:935:18: 935:18
    }

    bb4 (cleanup): {
        drop(_11) -> bb5;                // scope 1 at cita-chain/core/src/libchain/chain.rs:935:17: 935:18
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:917:17: 935:18
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_block_header_bytes(_1: &chain::Chain, _2: types::block_number::BlockTag) -> std::option::Option<Vec<u8>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:939:35: 939:40
    debug tag => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:939:42: 939:45
    let mut _0: std::option::Option<std::vec::Vec<u8>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:939:60: 939:75
    let mut _3: std::option::Option<types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:940:9: 940:31

    bb0: {
        _3 = chain::Chain::block_header(_1, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:940:9: 940:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:940:14: 940:26
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, types::block_number::BlockTag) -> std::option::Option<Header> {chain::Chain::block_header}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = std::option::Option::<Header>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39]>(move _3, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39]) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:940:9: 940:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:940:32: 940:35
                                         // + literal: Const { ty: fn(std::option::Option<Header>, [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39]) -> std::option::Option<Vec<u8>> {std::option::Option::<Header>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39], val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:941:6: 941:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_block_header_bytes::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:940:36: 940:39], _2: Header) -> Vec<u8> {
    debug x => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:940:37: 940:38
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:40
    let mut _3: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:53
    let mut _4: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:53

    bb0: {
        _4 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:53
        _3 = <Header as Encodable>::rlp_bytes(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:940:42: 940:51
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> elastic_array::ElasticArray1024<u8> {<Header as Encodable>::rlp_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = elastic_array::ElasticArray1024::<u8>::into_vec(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:940:40: 940:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:940:54: 940:62
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:940:63: 940:64
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:940:64: 940:64
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:940:63: 940:64
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:940:36: 940:64
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt(_1: &chain::Chain, _2: H256) -> std::option::Option<RichReceipt> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:943:29: 943:34
    debug tx_hash => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:943:36: 943:43
    let mut _0: std::option::Option<types::receipt::RichReceipt>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:943:65: 943:84
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:45: 944:52
    let _18: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:45: 944:52
    let mut _19: std::option::Option<types::transaction_index::TransactionIndex>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:945:42: 945:73
    let mut _20: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:945:16: 945:39
    let mut _24: std::option::Option<types::block_receipts::BlockReceipts>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:949:32: 949:63
    let mut _25: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:949:20: 949:29
    let _28: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:951:17: 951:48
    let mut _29: &mut std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:951:17: 951:48
    let mut _30: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:951:35: 951:47
    let mut _31: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:951:35: 951:47
    let mut _33: std::option::Option<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:953:36: 953:50
    let mut _34: &mut std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:953:36: 953:50
    let _35: &str;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:953:58: 953:92
    let mut _37: std::option::Option<&types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
    let mut _38: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
    let _39: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
    let mut _40: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
    let mut _41: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:63: 954:71
    let mut _43: std::slice::Iter<'_, types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
    let mut _44: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
    let _45: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
    let mut _46: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
    let mut _47: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:957:20: 957:60
    let mut _48: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:957:20: 957:49
    let mut _49: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:957:53: 957:60
    let mut _51: std::option::Option<types::transaction::SignedTransaction>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:958:31: 959:70
    let mut _53: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:961:40: 961:77
    let mut _55: &types::transaction::Action; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let mut _56: &types::transaction::Transaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let _57: &types::transaction::Transaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let mut _58: &types::transaction::UnverifiedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let _59: &types::transaction::UnverifiedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let mut _60: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
    let mut _61: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:963:25: 963:39
    let mut _62: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:963:43: 963:71
    let mut _63: &std::option::Option<types::errors::ReceiptError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:963:43: 963:71
    let mut _64: cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:964:34: 964:93
    let mut _65: &cita_types::H160;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
    let _66: &cita_types::H160;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
    let mut _67: &types::transaction::SignedTransaction; // in scope 0 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
    let _68: &cita_types::U256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:964:65: 964:92
    let mut _70: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:973:25: 973:37
    let mut _71: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:974:48: 974:71
    let mut _72: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:975:37: 975:79
    let mut _73: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:975:37: 975:60
    let mut _74: cita_types::U256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:975:63: 975:79
    let mut _75: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:976:25: 976:41
    let mut _76: std::vec::Vec<types::log::LocalizedLog>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:977:31: 990:39
    let mut _77: std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:977:31: 989:31
    let mut _78: std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:977:31: 980:41
    let mut _79: std::vec::IntoIter<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:977:31: 979:41
    let mut _80: std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:977:31: 978:34
    let mut _81: [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _82: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _83: &u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _84: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _85: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _86: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _87: cita_types::Bloom;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:991:36: 991:58
    let mut _88: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:992:37: 992:60
    let mut _89: std::option::Option<types::errors::ReceiptError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:993:32: 993:50
    let _90: log::Level;                 // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _91: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _92: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _93: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _94: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _95: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _96: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _97: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _98: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _99: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _100: &[&str];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
    let mut _101: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _102: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _103: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _104: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:50: 999:57
    let _105: &cita_types::H256;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:50: 999:57
    let mut _112: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
    let mut _113: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    let mut _114: isize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _109: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _110: &[&str; 1];        // in scope 1 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
        let mut _111: &log::LevelFilter; // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug transaction_index => _21;  // in scope 2 at cita-chain/core/src/libchain/chain.rs:945:21: 945:38
        let _21: types::transaction_index::TransactionIndex; // in scope 2 at cita-chain/core/src/libchain/chain.rs:945:21: 945:38
        let _22: cita_types::H256;       // in scope 2 at cita-chain/core/src/libchain/chain.rs:946:17: 946:27
        scope 3 {
            debug block_hash => _22;     // in scope 3 at cita-chain/core/src/libchain/chain.rs:946:17: 946:27
            let _23: usize;              // in scope 3 at cita-chain/core/src/libchain/chain.rs:947:17: 947:25
            scope 4 {
                debug tx_index => _23;   // in scope 4 at cita-chain/core/src/libchain/chain.rs:947:17: 947:25
                scope 5 {
                    debug res => _26;    // in scope 5 at cita-chain/core/src/libchain/chain.rs:949:25: 949:28
                    let _26: types::block_receipts::BlockReceipts; // in scope 5 at cita-chain/core/src/libchain/chain.rs:949:25: 949:28
                    let mut _27: std::vec::Vec<types::receipt::Receipt>; // in scope 5 at cita-chain/core/src/libchain/chain.rs:950:21: 950:33
                    scope 6 {
                        debug receipts => _27; // in scope 6 at cita-chain/core/src/libchain/chain.rs:950:21: 950:33
                        let _32: types::receipt::Receipt; // in scope 6 at cita-chain/core/src/libchain/chain.rs:953:21: 953:33
                        scope 7 {
                            debug last_receipt => _32; // in scope 7 at cita-chain/core/src/libchain/chain.rs:953:21: 953:33
                            let _36: cita_types::U256; // in scope 7 at cita-chain/core/src/libchain/chain.rs:954:21: 954:37
                            scope 8 {
                                debug prior_quota_used => _36; // in scope 8 at cita-chain/core/src/libchain/chain.rs:954:21: 954:37
                                let _42: usize; // in scope 8 at cita-chain/core/src/libchain/chain.rs:955:21: 955:39
                                scope 9 {
                                    debug log_position_block => _42; // in scope 9 at cita-chain/core/src/libchain/chain.rs:955:21: 955:39
                                    let _50: types::transaction::SignedTransaction; // in scope 9 at cita-chain/core/src/libchain/chain.rs:958:25: 958:28
                                    scope 10 {
                                        debug stx => _50; // in scope 10 at cita-chain/core/src/libchain/chain.rs:958:25: 958:28
                                        let _52: u64; // in scope 10 at cita-chain/core/src/libchain/chain.rs:961:25: 961:37
                                        scope 11 {
                                            debug block_number => _52; // in scope 11 at cita-chain/core/src/libchain/chain.rs:961:25: 961:37
                                            let _54: std::option::Option<cita_types::H160>; // in scope 11 at cita-chain/core/src/libchain/chain.rs:962:25: 962:41
                                            scope 12 {
                                                debug contract_address => _54; // in scope 12 at cita-chain/core/src/libchain/chain.rs:962:25: 962:41
                                                let _69: types::receipt::RichReceipt; // in scope 12 at cita-chain/core/src/libchain/chain.rs:969:25: 969:32
                                                scope 13 {
                                                    debug receipt => _69; // in scope 13 at cita-chain/core/src/libchain/chain.rs:969:25: 969:32
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 14 {
        debug lvl => _90;                // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _106: &(&str, &str, &str, u32); // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _107: &[&str; 1];        // in scope 14 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
        let mut _108: &log::LevelFilter; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _112 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _113 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _3 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _111 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[5])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _111) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> bb5;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _110 = const _;                  // scope 1 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:944:16: 944:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[4])) }
        _13 = _110 as &[&str] (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
        _18 = &_2;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:944:45: 944:52
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<H256>(_18) -> bb8; // scope 1 at cita-chain/core/src/libchain/chain.rs:944:45: 944:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:944:45: 944:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<H256>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _109 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[3])) }
        _11 = log::__private_api_log(move _12, _3, _109) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = chain::Chain::transaction_index(_1, _2) -> bb11; // scope 2 at cita-chain/core/src/libchain/chain.rs:945:42: 945:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:945:47: 945:64
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<TransactionIndex> {chain::Chain::transaction_index}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = discriminant(_19);         // scope 2 at cita-chain/core/src/libchain/chain.rs:945:16: 945:39
        switchInt(move _20) -> [1: bb12, otherwise: bb50]; // scope 2 at cita-chain/core/src/libchain/chain.rs:945:16: 945:39
    }

    bb12: {
        _21 = move ((_19 as Some).0: types::transaction_index::TransactionIndex); // scope 2 at cita-chain/core/src/libchain/chain.rs:945:21: 945:38
        _22 = (_21.0: cita_types::H256); // scope 2 at cita-chain/core/src/libchain/chain.rs:946:30: 946:58
        _23 = (_21.1: usize);            // scope 3 at cita-chain/core/src/libchain/chain.rs:947:28: 947:51
        _112 = const true;               // scope 5 at cita-chain/core/src/libchain/chain.rs:949:32: 949:63
        _24 = chain::Chain::block_receipts(_1, _22) -> bb13; // scope 5 at cita-chain/core/src/libchain/chain.rs:949:32: 949:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:949:37: 949:51
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<BlockReceipts> {chain::Chain::block_receipts}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = discriminant(_24);         // scope 5 at cita-chain/core/src/libchain/chain.rs:949:20: 949:29
        switchInt(move _25) -> [1: bb14, otherwise: bb49]; // scope 5 at cita-chain/core/src/libchain/chain.rs:949:20: 949:29
    }

    bb14: {
        _112 = const false;              // scope 5 at cita-chain/core/src/libchain/chain.rs:949:25: 949:28
        _26 = move ((_24 as Some).0: types::block_receipts::BlockReceipts); // scope 5 at cita-chain/core/src/libchain/chain.rs:949:25: 949:28
        _27 = move (_26.0: std::vec::Vec<types::receipt::Receipt>); // scope 5 at cita-chain/core/src/libchain/chain.rs:950:36: 950:48
        _29 = &mut _27;                  // scope 6 at cita-chain/core/src/libchain/chain.rs:951:17: 951:48
        _31 = CheckedAdd(_23, const 1_usize); // scope 6 at cita-chain/core/src/libchain/chain.rs:951:35: 951:47
        assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", _23, const 1_usize) -> [success: bb15, unwind: bb65]; // scope 6 at cita-chain/core/src/libchain/chain.rs:951:35: 951:47
    }

    bb15: {
        _30 = move (_31.0: usize);       // scope 6 at cita-chain/core/src/libchain/chain.rs:951:35: 951:47
        _28 = Vec::<types::receipt::Receipt>::truncate(move _29, move _30) -> [return: bb16, unwind: bb65]; // scope 6 at cita-chain/core/src/libchain/chain.rs:951:17: 951:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:951:26: 951:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<types::receipt::Receipt>, usize) {Vec::<types::receipt::Receipt>::truncate}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &mut _27;                  // scope 6 at cita-chain/core/src/libchain/chain.rs:953:36: 953:50
        _33 = Vec::<types::receipt::Receipt>::pop(move _34) -> [return: bb17, unwind: bb65]; // scope 6 at cita-chain/core/src/libchain/chain.rs:953:36: 953:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:953:45: 953:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<types::receipt::Receipt>) -> std::option::Option<types::receipt::Receipt> {Vec::<types::receipt::Receipt>::pop}, val: Value(<ZST>) }
    }

    bb17: {
        _35 = const "Current receipt is provided; qed"; // scope 6 at cita-chain/core/src/libchain/chain.rs:953:58: 953:92
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:953:58: 953:92
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = std::option::Option::<types::receipt::Receipt>::expect(move _33, _35) -> [return: bb18, unwind: bb65]; // scope 6 at cita-chain/core/src/libchain/chain.rs:953:36: 953:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:953:51: 953:57
                                         // + literal: Const { ty: for<'a> fn(std::option::Option<types::receipt::Receipt>, &'a str) -> types::receipt::Receipt {std::option::Option::<types::receipt::Receipt>::expect}, val: Value(<ZST>) }
    }

    bb18: {
        _113 = const true;               // scope 6 at cita-chain/core/src/libchain/chain.rs:953:92: 953:93
        _40 = &_27;                      // scope 7 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
        _39 = <Vec<types::receipt::Receipt> as Deref>::deref(move _40) -> [return: bb19, unwind: bb71]; // scope 7 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:954:40: 954:55
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _38 = _39;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
        _37 = core::slice::<impl [types::receipt::Receipt]>::last(move _38) -> [return: bb20, unwind: bb71]; // scope 7 at cita-chain/core/src/libchain/chain.rs:954:40: 954:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:954:49: 954:53
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt]) -> std::option::Option<&'a types::receipt::Receipt> {core::slice::<impl [types::receipt::Receipt]>::last}, val: Value(<ZST>) }
    }

    bb20: {
        _41 = <i32 as Into<U256>>::into(const 0_i32) -> [return: bb21, unwind: bb71]; // scope 7 at cita-chain/core/src/libchain/chain.rs:954:63: 954:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:954:65: 954:69
                                         // + literal: Const { ty: fn(i32) -> U256 {<i32 as Into<U256>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        _36 = std::option::Option::<&types::receipt::Receipt>::map_or::<U256, [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76]>(move _37, move _41, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76]) -> [return: bb22, unwind: bb71]; // scope 7 at cita-chain/core/src/libchain/chain.rs:954:40: 954:90
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:954:56: 954:62
                                         // + literal: Const { ty: fn(std::option::Option<&types::receipt::Receipt>, U256, [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76]) -> U256 {std::option::Option::<&types::receipt::Receipt>::map_or::<U256, [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76], val: Value(<ZST>) }
    }

    bb22: {
        _46 = &_27;                      // scope 8 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
        _45 = <Vec<types::receipt::Receipt> as Deref>::deref(move _46) -> [return: bb23, unwind: bb71]; // scope 8 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:955:42: 955:57
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _44 = _45;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
        _43 = core::slice::<impl [types::receipt::Receipt]>::iter(move _44) -> [return: bb24, unwind: bb71]; // scope 8 at cita-chain/core/src/libchain/chain.rs:955:42: 955:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:955:51: 955:55
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt]) -> std::slice::Iter<'a, types::receipt::Receipt> {core::slice::<impl [types::receipt::Receipt]>::iter}, val: Value(<ZST>) }
    }

    bb24: {
        _42 = <std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::fold::<usize, [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74]>(move _43, const 0_usize, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74]) -> [return: bb25, unwind: bb71]; // scope 8 at cita-chain/core/src/libchain/chain.rs:955:42: 955:94
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:955:58: 955:62
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, types::receipt::Receipt>, usize, [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74]) -> usize {<std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::fold::<usize, [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74], val: Value(<ZST>) }
    }

    bb25: {
        _48 = &(_32.6: cita_types::H256); // scope 9 at cita-chain/core/src/libchain/chain.rs:957:20: 957:49
        _49 = &_2;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:957:53: 957:60
        _47 = <H256 as PartialEq>::eq(move _48, move _49) -> [return: bb26, unwind: bb71]; // scope 9 at cita-chain/core/src/libchain/chain.rs:957:20: 957:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:957:20: 957:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _47) -> [0: bb47, otherwise: bb27]; // scope 9 at cita-chain/core/src/libchain/chain.rs:957:20: 957:60
    }

    bb27: {
        _51 = chain::Chain::transaction_by_address(_1, _22, _23) -> [return: bb28, unwind: bb71]; // scope 9 at cita-chain/core/src/libchain/chain.rs:958:31: 959:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:959:26: 959:48
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256, usize) -> std::option::Option<types::transaction::SignedTransaction> {chain::Chain::transaction_by_address}, val: Value(<ZST>) }
    }

    bb28: {
        _50 = std::option::Option::<types::transaction::SignedTransaction>::unwrap_or_default(move _51) -> [return: bb29, unwind: bb71]; // scope 9 at cita-chain/core/src/libchain/chain.rs:958:31: 960:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:960:26: 960:43
                                         // + literal: Const { ty: fn(std::option::Option<types::transaction::SignedTransaction>) -> types::transaction::SignedTransaction {std::option::Option::<types::transaction::SignedTransaction>::unwrap_or_default}, val: Value(<ZST>) }
    }

    bb29: {
        _53 = chain::Chain::block_height_by_hash(_1, _22) -> [return: bb30, unwind: bb64]; // scope 10 at cita-chain/core/src/libchain/chain.rs:961:40: 961:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:961:45: 961:65
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<u64> {chain::Chain::block_height_by_hash}, val: Value(<ZST>) }
    }

    bb30: {
        _52 = std::option::Option::<u64>::unwrap_or(move _53, const 0_u64) -> [return: bb31, unwind: bb64]; // scope 10 at cita-chain/core/src/libchain/chain.rs:961:40: 961:90
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:961:78: 961:87
                                         // + literal: Const { ty: fn(std::option::Option<u64>, u64) -> u64 {std::option::Option::<u64>::unwrap_or}, val: Value(<ZST>) }
    }

    bb31: {
        _60 = &_50;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
        _59 = <types::transaction::SignedTransaction as Deref>::deref(move _60) -> [return: bb32, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:962:51: 962:63
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> &'a <types::transaction::SignedTransaction as Deref>::Target {<types::transaction::SignedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb32: {
        _58 = _59;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
        _57 = <types::transaction::UnverifiedTransaction as Deref>::deref(move _58) -> [return: bb33, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:962:51: 962:63
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::UnverifiedTransaction) -> &'a <types::transaction::UnverifiedTransaction as Deref>::Target {<types::transaction::UnverifiedTransaction as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        _56 = _57;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
        _55 = types::transaction::Transaction::action(move _56) -> [return: bb34, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:962:51: 962:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:962:55: 962:61
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::Transaction) -> &'a Action {types::transaction::Transaction::action}, val: Value(<ZST>) }
    }

    bb34: {
        _61 = discriminant((*_55));      // scope 11 at cita-chain/core/src/libchain/chain.rs:962:50: 962:63
        switchInt(move _61) -> [1: bb36, otherwise: bb35]; // scope 11 at cita-chain/core/src/libchain/chain.rs:962:44: 962:63
    }

    bb35: {
        _54 = std::option::Option::<H160>::None; // scope 11 at cita-chain/core/src/libchain/chain.rs:966:30: 966:34
        goto -> bb41;                    // scope 11 at cita-chain/core/src/libchain/chain.rs:966:30: 966:34
    }

    bb36: {
        _63 = &(_32.4: std::option::Option<types::errors::ReceiptError>); // scope 11 at cita-chain/core/src/libchain/chain.rs:963:43: 963:71
        _62 = std::option::Option::<types::errors::ReceiptError>::is_none(move _63) -> [return: bb37, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:963:43: 963:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:963:62: 963:69
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<types::errors::ReceiptError>) -> bool {std::option::Option::<types::errors::ReceiptError>::is_none}, val: Value(<ZST>) }
    }

    bb37: {
        switchInt(move _62) -> [0: bb35, otherwise: bb38]; // scope 11 at cita-chain/core/src/libchain/chain.rs:963:43: 963:71
    }

    bb38: {
        _67 = &_50;                      // scope 11 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
        _66 = types::transaction::SignedTransaction::sender(move _67) -> [return: bb39, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:964:55: 964:61
                                         // + literal: Const { ty: for<'a> fn(&'a types::transaction::SignedTransaction) -> &'a H160 {types::transaction::SignedTransaction::sender}, val: Value(<ZST>) }
    }

    bb39: {
        _65 = _66;                       // scope 11 at cita-chain/core/src/libchain/chain.rs:964:51: 964:63
        _68 = &(_32.5: cita_types::U256); // scope 11 at cita-chain/core/src/libchain/chain.rs:964:65: 964:92
        _64 = contract_address(move _65, _68) -> [return: bb40, unwind: bb64]; // scope 11 at cita-chain/core/src/libchain/chain.rs:964:34: 964:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:964:34: 964:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H160, &'b U256) -> H160 {contract_address}, val: Value(<ZST>) }
    }

    bb40: {
        _54 = std::option::Option::<H160>::Some(move _64); // scope 11 at cita-chain/core/src/libchain/chain.rs:964:29: 964:94
        goto -> bb41;                    // scope 11 at cita-chain/core/src/libchain/chain.rs:965:25: 965:26
    }

    bb41: {
        _70 = _52;                       // scope 12 at cita-chain/core/src/libchain/chain.rs:973:25: 973:37
        _71 = (_32.1: cita_types::U256); // scope 12 at cita-chain/core/src/libchain/chain.rs:974:48: 974:71
        _73 = (_32.1: cita_types::U256); // scope 12 at cita-chain/core/src/libchain/chain.rs:975:37: 975:60
        _74 = _36;                       // scope 12 at cita-chain/core/src/libchain/chain.rs:975:63: 975:79
        _72 = <U256 as Sub>::sub(move _73, move _74) -> [return: bb42, unwind: bb64]; // scope 12 at cita-chain/core/src/libchain/chain.rs:975:37: 975:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:975:37: 975:79
                                         // + literal: Const { ty: fn(U256, U256) -> <U256 as Sub>::Output {<U256 as Sub>::sub}, val: Value(<ZST>) }
    }

    bb42: {
        _75 = _54;                       // scope 12 at cita-chain/core/src/libchain/chain.rs:976:25: 976:41
        _113 = const false;              // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 978:34
        _80 = move (_32.3: std::vec::Vec<types::log::Log>); // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 978:34
        _79 = <Vec<types::log::Log> as IntoIterator>::into_iter(move _80) -> [return: bb43, unwind: bb64]; // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 979:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:979:30: 979:39
                                         // + literal: Const { ty: fn(Vec<types::log::Log>) -> <Vec<types::log::Log> as IntoIterator>::IntoIter {<Vec<types::log::Log> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb43: {
        _78 = <std::vec::IntoIter<types::log::Log> as Iterator>::enumerate(move _79) -> [return: bb44, unwind: bb64]; // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 980:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:980:30: 980:39
                                         // + literal: Const { ty: fn(std::vec::IntoIter<types::log::Log>) -> Enumerate<std::vec::IntoIter<types::log::Log>> {<std::vec::IntoIter<types::log::Log> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb44: {
        _82 = &_22;                      // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
        _83 = &_52;                      // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
        _84 = &_2;                       // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
        _85 = &_23;                      // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
        _86 = &_42;                      // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
        _81 = [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44] { block_hash: move _82, block_number: move _83, tx_hash: move _84, tx_index: move _85, log_position_block: move _86 }; // scope 12 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
                                         // closure
                                         // + def_id: DefId(0:281 ~ core[3f1a]::libchain::chain::{impl#5}::get_rich_receipt::{closure#2})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((usize, types::log::Log),)) -> types::log::LocalizedLog,
                                         //     (&cita_types::H256, &u64, &cita_types::H256, &usize, &usize),
                                         // ]
        _77 = <Enumerate<std::vec::IntoIter<types::log::Log>> as Iterator>::map::<LocalizedLog, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]>(move _78, move _81) -> [return: bb45, unwind: bb64]; // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 989:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:981:30: 981:33
                                         // + literal: Const { ty: fn(Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]) -> std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]> {<Enumerate<std::vec::IntoIter<types::log::Log>> as Iterator>::map::<LocalizedLog, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]>}, val: Value(<ZST>) }
    }

    bb45: {
        _76 = <std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]> as Iterator>::collect::<Vec<LocalizedLog>>(move _77) -> [return: bb46, unwind: bb64]; // scope 12 at cita-chain/core/src/libchain/chain.rs:977:31: 990:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:990:30: 990:37
                                         // + literal: Const { ty: fn(std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]>) -> Vec<LocalizedLog> {<std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44]> as Iterator>::collect::<Vec<LocalizedLog>>}, val: Value(<ZST>) }
    }

    bb46: {
        _87 = (_32.2: cita_types::Bloom); // scope 12 at cita-chain/core/src/libchain/chain.rs:991:36: 991:58
        _88 = (_32.0: std::option::Option<cita_types::H256>); // scope 12 at cita-chain/core/src/libchain/chain.rs:992:37: 992:60
        _89 = (_32.4: std::option::Option<types::errors::ReceiptError>); // scope 12 at cita-chain/core/src/libchain/chain.rs:993:32: 993:50
        _69 = RichReceipt { transaction_hash: _2, transaction_index: _23, block_hash: _22, block_number: move _70, cumulative_quota_used: move _71, quota_used: move _72, contract_address: move _75, logs: move _76, log_bloom: move _87, state_root: move _88, error: move _89 }; // scope 12 at cita-chain/core/src/libchain/chain.rs:969:35: 994:22
        _0 = std::option::Option::<RichReceipt>::Some(move _69); // scope 13 at cita-chain/core/src/libchain/chain.rs:995:28: 995:41
        drop(_50) -> [return: bb61, unwind: bb71]; // scope 9 at cita-chain/core/src/libchain/chain.rs:996:17: 996:18
    }

    bb47: {
        drop(_32) -> [return: bb48, unwind: bb65]; // scope 6 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }

    bb48: {
        _113 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
        drop(_27) -> bb49;               // scope 5 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }

    bb49: {
        _114 = discriminant(_24);        // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
        switchInt(move _114) -> [1: bb68, otherwise: bb67]; // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
    }

    bb50: {
        _90 = log::Level::Info;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _93 = &_90;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _108 = const _;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[2])) }
        _92 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _93, _108) -> bb54; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb51: {
        _91 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb53;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb52: {
        _95 = &_90;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _97 = log::max_level() -> bb55;  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb53: {
        switchInt(move _91) -> [0: bb60, otherwise: bb57]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb54: {
        switchInt(move _92) -> [0: bb51, otherwise: bb52]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb55: {
        _96 = &_97;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _94 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _95, move _96) -> bb56; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb56: {
        _91 = move _94;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb53;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        _107 = const _;                  // scope 14 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:999:15: 999:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[1])) }
        _100 = _107 as &[&str] (Pointer(Unsize)); // scope 14 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
        _105 = &_2;                      // scope 14 at cita-chain/core/src/libchain/chain.rs:999:50: 999:57
        _104 = core::fmt::ArgumentV1::<'_>::new_debug::<H256>(_105) -> bb58; // scope 14 at cita-chain/core/src/libchain/chain.rs:999:50: 999:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:999:50: 999:57
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<H256>}, val: Value(<ZST>) }
    }

    bb58: {
        _103 = [move _104];              // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _102 = &_103;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _101 = _102 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _99 = Arguments::<'_>::new_v1(move _100, move _101) -> bb59; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb59: {
        _106 = const _;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::get_rich_receipt, [], Some(promoted[0])) }
        _98 = log::__private_api_log(move _99, _90, _106) -> bb60; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb60: {
        _0 = std::option::Option::<RichReceipt>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:1000:9: 1000:13
        goto -> bb63;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1001:6: 1001:6
    }

    bb61: {
        _113 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
        drop(_27) -> bb62;               // scope 5 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }

    bb62: {
        _112 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
        goto -> bb63;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1001:6: 1001:6
    }

    bb63: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1001:6: 1001:6
    }

    bb64 (cleanup): {
        drop(_50) -> bb71;               // scope 9 at cita-chain/core/src/libchain/chain.rs:996:17: 996:18
    }

    bb65 (cleanup): {
        drop(_27) -> bb66;               // scope 5 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }

    bb66 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:943:5: 1001:6
    }

    bb67: {
        _112 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
        goto -> bb50;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:945:9: 998:10
    }

    bb68: {
        switchInt(_112) -> [0: bb67, otherwise: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
    }

    bb69: {
        drop(((_24 as Some).0: types::block_receipts::BlockReceipts)) -> bb67; // scope 2 at cita-chain/core/src/libchain/chain.rs:998:9: 998:10
    }

    bb70 (cleanup): {
        drop((_32.3: std::vec::Vec<types::log::Log>)) -> bb65; // scope 6 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }

    bb71 (cleanup): {
        switchInt(_113) -> [0: bb65, otherwise: bb70]; // scope 6 at cita-chain/core/src/libchain/chain.rs:997:13: 997:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:9: 999:58
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:9: 999:58

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:999:9: 999:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:999:9: 999:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:999:9: 999:58
        _1 = (move _2, move _4, move _6, const 999_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48

    bb0: {
        _1 = [const "Get receipt by hash failed "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:999:15: 999:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:999:15: 999:48
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:9: 944:53
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:9: 944:53

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:944:9: 944:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:944:9: 944:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:944:9: 944:53
        _1 = (move _2, move _4, move _6, const 944_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43

    bb0: {
        _1 = [const "Get receipt by hash: "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:944:16: 944:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:944:16: 944:43
    }
}

promoted[5] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:954:73: 954:76], _2: &types::receipt::Receipt) -> U256 {
    debug r => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:954:74: 954:75
    let mut _0: cita_types::U256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:954:77: 954:77

    bb0: {
        _0 = ((*_2).1: cita_types::U256); // scope 0 at cita-chain/core/src/libchain/chain.rs:954:77: 954:89
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:954:89: 954:89
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:955:66: 955:74], _2: usize, _3: &types::receipt::Receipt) -> usize {
    debug acc => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:67: 955:70
    debug r => _3;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:72: 955:73
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:955:75: 955:75
    let mut _4: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:81: 955:93
    let mut _5: &std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:81: 955:93
    let mut _6: (usize, bool);           // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:75: 955:93

    bb0: {
        _5 = &((*_3).3: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:955:81: 955:93
        _4 = Vec::<types::log::Log>::len(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:955:81: 955:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:955:88: 955:91
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::log::Log>) -> usize {Vec::<types::log::Log>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = CheckedAdd(_2, _4);         // scope 0 at cita-chain/core/src/libchain/chain.rs:955:75: 955:93
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:955:75: 955:93
    }

    bb2: {
        _0 = move (_6.0: usize);         // scope 0 at cita-chain/core/src/libchain/chain.rs:955:75: 955:93
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:955:93: 955:93
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_rich_receipt::{closure#2}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:981:34: 981:44], _2: (usize, types::log::Log)) -> LocalizedLog {
    debug block_hash => (*((*_1).0: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:946:17: 946:27
    debug block_number => (*((*_1).1: &u64)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:961:25: 961:37
    debug tx_hash => (*((*_1).2: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:943:36: 943:43
    debug tx_index => (*((*_1).3: &usize)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:947:17: 947:25
    debug log_position_block => (*((*_1).4: &usize)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:955:21: 955:39
    let mut _0: types::log::LocalizedLog; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:981:45: 981:45
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:36: 981:37
    let _4: types::log::Log;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:39: 981:42
    let mut _5: types::log::Log;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:982:33: 982:36
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:983:33: 983:43
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:984:33: 984:45
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:985:51: 985:58
    let mut _9: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:986:52: 986:60
    let mut _10: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:988:44: 988:66
    let mut _11: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:988:44: 988:62
    let mut _12: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:988:44: 988:66
    let mut _13: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _14: &u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _15: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _16: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    let mut _17: &usize;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    scope 1 {
        debug i => _3;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:981:36: 981:37
        debug log => _4;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:981:39: 981:42
    }

    bb0: {
        _3 = (_2.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:981:36: 981:37
        _4 = move (_2.1: types::log::Log); // scope 0 at cita-chain/core/src/libchain/chain.rs:981:39: 981:42
        _5 = move _4;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:982:33: 982:36
        _13 = deref_copy ((*_1).0: &cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:983:33: 983:43
        _6 = (*_13);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:983:33: 983:43
        _14 = deref_copy ((*_1).1: &u64); // scope 1 at cita-chain/core/src/libchain/chain.rs:984:33: 984:45
        _7 = (*_14);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:984:33: 984:45
        _15 = deref_copy ((*_1).2: &cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:985:51: 985:58
        _8 = (*_15);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:985:51: 985:58
        _16 = deref_copy ((*_1).3: &usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:986:52: 986:60
        _9 = (*_16);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:986:52: 986:60
        _17 = deref_copy ((*_1).4: &usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:988:44: 988:62
        _11 = (*_17);                    // scope 1 at cita-chain/core/src/libchain/chain.rs:988:44: 988:62
        _12 = CheckedAdd(_11, _3);       // scope 1 at cita-chain/core/src/libchain/chain.rs:988:44: 988:66
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, _3) -> [success: bb1, unwind: bb2]; // scope 1 at cita-chain/core/src/libchain/chain.rs:988:44: 988:66
    }

    bb1: {
        _10 = move (_12.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:988:44: 988:66
        _0 = LocalizedLog { log: move _5, block_hash: move _6, block_number: move _7, transaction_hash: move _8, transaction_index: move _9, log_index: move _10, transaction_log_index: _3 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:981:45: 989:30
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:989:30: 989:30
    }

    bb2 (cleanup): {
        drop(_5) -> bb3;                 // scope 1 at cita-chain/core/src/libchain/chain.rs:989:29: 989:30
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:981:34: 989:30
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_current_height(_1: &chain::Chain) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1004:31: 1004:36
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1004:41: 1004:44
    let mut _2: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1005:9: 1005:51
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1005:9: 1005:51
    let mut _4: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1005:34: 1005:50

    bb0: {
        _3 = &((*_1).2: std::sync::atomic::AtomicUsize); // scope 0 at cita-chain/core/src/libchain/chain.rs:1005:9: 1005:51
        _4 = const SeqCst;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1005:34: 1005:50
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1005:9: 1005:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1005:29: 1005:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _2 as u64 (IntToInt);  // scope 0 at cita-chain/core/src/libchain/chain.rs:1005:9: 1005:58
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1006:6: 1006:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_pending_height(_1: &chain::Chain) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1009:31: 1009:36
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1009:41: 1009:44
    let mut _2: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
    let _3: &types::header::OpenHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
    let mut _4: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
    let _5: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
    let mut _6: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
    let _7: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:35
    let mut _8: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:35

    bb0: {
        _8 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:35
        _7 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _8) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1010:29: 1010:33
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
        _5 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _6) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
        _3 = <Header as Deref>::deref(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _3;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
        _0 = OpenHeader::number(move _2) -> [return: bb4, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1010:9: 1010:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1010:36: 1010:42
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1011:5: 1011:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1011:6: 1011:6
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1011:5: 1011:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1009:5: 1011:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_latest_height(_1: &chain::Chain) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1014:30: 1014:35
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1014:40: 1014:43
    let mut _2: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let mut _3: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let _4: &types::header::OpenHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let mut _5: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let _6: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let mut _7: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
    let _8: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:35
    let mut _9: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:35

    bb0: {
        _9 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:35
        _8 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _9) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1015:29: 1015:33
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
        _6 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
        _4 = <Header as Deref>::deref(move _5) -> [return: bb3, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
        _2 = OpenHeader::number(move _3) -> [return: bb4, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1015:36: 1015:42
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = core::num::<impl u64>::saturating_sub(move _2, const 1_u64) -> [return: bb5, unwind: bb7]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1015:9: 1015:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1015:45: 1015:59
                                         // + literal: Const { ty: fn(u64, u64) -> u64 {core::num::<impl u64>::saturating_sub}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_8) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1016:5: 1016:6
    }

    bb6: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1016:6: 1016:6
    }

    bb7 (cleanup): {
        drop(_8) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1016:5: 1016:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1014:5: 1016:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_current_hash(_1: &chain::Chain) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1019:29: 1019:34
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1019:39: 1019:43
    let mut _2: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
    let mut _3: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
    let _4: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
    let mut _5: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
    let _6: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:35
    let mut _7: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:35

    bb0: {
        _7 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:35
        _6 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _7) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1020:29: 1020:33
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
        _4 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
        _2 = Header::hash(move _3) -> [return: bb3, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1020:36: 1020:40
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = std::option::Option::<H256>::unwrap(move _2) -> [return: bb4, unwind: bb6]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1020:9: 1020:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1020:43: 1020:49
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_6) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1021:5: 1021:6
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1021:6: 1021:6
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1021:5: 1021:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1019:5: 1021:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_max_store_height(_1: &chain::Chain) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1024:33: 1024:38
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1024:43: 1024:46
    let mut _2: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1025:9: 1025:53
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1025:9: 1025:53
    let mut _4: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1025:36: 1025:52

    bb0: {
        _3 = &((*_1).3: std::sync::atomic::AtomicUsize); // scope 0 at cita-chain/core/src/libchain/chain.rs:1025:9: 1025:53
        _4 = const SeqCst;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1025:36: 1025:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1025:9: 1025:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1025:31: 1025:35
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _2 as u64 (IntToInt);  // scope 0 at cita-chain/core/src/libchain/chain.rs:1025:9: 1025:60
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1026:6: 1026:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_max_store_height(_1: &chain::Chain, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1029:33: 1029:38
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1029:40: 1029:46
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1029:53: 1029:53
    let _3: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1030:9: 1031:54
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1030:9: 1031:54
    let mut _5: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1031:20: 1031:35
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1031:37: 1031:53

    bb0: {
        _4 = &((*_1).3: std::sync::atomic::AtomicUsize); // scope 0 at cita-chain/core/src/libchain/chain.rs:1030:9: 1031:54
        _5 = _2 as usize (IntToInt);     // scope 0 at cita-chain/core/src/libchain/chain.rs:1031:20: 1031:35
        _6 = const SeqCst;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1031:37: 1031:53
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::store(move _4, move _5, move _6) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1030:9: 1031:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1031:14: 1031:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1032:6: 1032:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::current_state_root(_1: &chain::Chain) -> H256 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1035:31: 1035:36
    let mut _0: cita_types::H256;        // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1035:41: 1035:45
    let mut _2: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
    let mut _3: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
    let _4: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
    let mut _5: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
    let _6: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:36
    let mut _7: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:36

    bb0: {
        _7 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:36
        _6 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _7) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1036:30: 1036:34
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
        _4 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
        _2 = Header::state_root(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:10: 1036:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1036:37: 1036:47
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a H256 {Header::state_root}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (*_2);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1036:9: 1036:49
        drop(_6) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1037:5: 1037:6
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1037:6: 1037:6
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1037:5: 1037:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1035:5: 1037:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::current_block_poof(_1: &chain::Chain) -> std::option::Option<libproto::Proof> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1040:31: 1040:36
    let mut _0: std::option::Option<libproto::Proof>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1040:41: 1040:59
    let mut _2: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1046:29
    let mut _3: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
    let mut _4: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
    let _5: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
    let mut _6: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
    let mut _7: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1043:17: 1043:51
    let mut _8: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
    let _9: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
    let _10: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
    let _11: std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
    let mut _12: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1046:24: 1046:28
    let mut _13: &types::db_indexes::CurrentProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42

    bb0: {
        _6 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
        _5 = <Arc<RocksDB> as Deref>::deref(move _6) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
        _7 = const std::option::Option::<DataCategory>::Some(Extra); // scope 0 at cita-chain/core/src/libchain/chain.rs:1043:17: 1043:51
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _13 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
                                         // + literal: Const { ty: &CurrentProof, val: Unevaluated(chain::Chain::current_block_poof, [], Some(promoted[0])) }
        _11 = <CurrentProof as DBIndex>::get_index(_13) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1044:31: 1044:40
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentProof) -> Vec<u8> {<CurrentProof as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_11;                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
        _9 = <Vec<u8> as Deref>::deref(_10) -> [return: bb3, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:17: 1044:42
        _3 = <RocksDB as Database>::get(move _4, move _7, move _8) -> [return: bb4, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1045:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1042:14: 1042:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = std::option::Option::<Vec<u8>>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:1046:24: 1046:28
        _2 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _3, move _12) -> [return: bb5, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1046:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1046:14: 1046:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<libproto::Proof, [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23]>(move _2, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23]) -> [return: bb6, unwind: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1041:9: 1050:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1047:14: 1047:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23]) -> std::option::Option<libproto::Proof> {std::option::Option::<Vec<u8>>::map::<libproto::Proof, [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_11) -> bb7;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1051:5: 1051:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1051:6: 1051:6
    }

    bb8 (cleanup): {
        drop(_11) -> bb9;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1051:5: 1051:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1040:5: 1051:6
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::current_block_poof: &CurrentProof = {
    let mut _0: &types::db_indexes::CurrentProof; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
    let mut _1: types::db_indexes::CurrentProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:30

    bb0: {
        _1 = CurrentProof;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:30
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1044:18: 1044:42
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::current_block_poof::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1047:18: 1047:23], _2: Vec<u8>) -> libproto::Proof {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1047:19: 1047:22
    let mut _0: libproto::Proof;         // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1048:21: 1048:32
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
    scope 1 {
        debug proto_proof => _0;         // in scope 1 at cita-chain/core/src/libchain/chain.rs:1048:21: 1048:32
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1048:59: 1048:63
        _0 = rlp::decode::<libproto::Proof>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1048:47: 1048:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1048:47: 1048:58
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> libproto::Proof {rlp::decode::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1050:13: 1050:14
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1050:14: 1050:14
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1050:13: 1050:14
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1047:18: 1050:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::save_current_block_poof(_1: &chain::Chain, _2: &libproto::Proof) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1053:36: 1053:41
    debug proof => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1053:43: 1053:48
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1053:63: 1053:63
    let mut _3: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
    let mut _4: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
    let _5: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
    let mut _6: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
    let mut _7: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1055:13: 1055:47
    let mut _8: std::vec::Vec<u8>;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
    let mut _9: std::vec::Vec<u8>;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1057:13: 1057:42
    let mut _10: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1057:13: 1057:31
    let mut _11: &types::db_indexes::CurrentProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1058:9: 1058:10
    scope 1 {
    }

    bb0: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
        _6 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
        _5 = <Arc<RocksDB> as Deref>::deref(move _6) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
        _7 = const std::option::Option::<DataCategory>::Some(Extra); // scope 0 at cita-chain/core/src/libchain/chain.rs:1055:13: 1055:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _11 = const _;                   // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
                                         // + literal: Const { ty: &CurrentProof, val: Unevaluated(chain::Chain::save_current_block_poof, [], Some(promoted[0])) }
        _12 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
        _8 = <CurrentProof as DBIndex>::get_index(_11) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1056:26: 1056:35
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentProof) -> Vec<u8> {<CurrentProof as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = encode::<libproto::Proof>(_2) -> [return: bb3, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1057:13: 1057:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1057:13: 1057:24
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> elastic_array::ElasticArray1024<u8> {encode::<libproto::Proof>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = elastic_array::ElasticArray1024::<u8>::into_vec(move _10) -> [return: bb4, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1057:13: 1057:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1057:32: 1057:40
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
        _3 = <RocksDB as Database>::insert(move _4, move _7, move _8, move _9) -> [return: bb5, unwind: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1054:17: 1058:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1054:25: 1054:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1058:9: 1058:10
        drop(_3) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1058:10: 1058:11
    }

    bb6: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1059:6: 1059:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1053:5: 1059:6
    }

    bb8 (cleanup): {
        drop(_8) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1058:9: 1058:10
    }

    bb9 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb8]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1058:9: 1058:10
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::save_current_block_poof: &CurrentProof = {
    let mut _0: &types::db_indexes::CurrentProof; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
    let mut _1: types::db_indexes::CurrentProof; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:25

    bb0: {
        _1 = CurrentProof;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:25
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1056:13: 1056:37
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_chain_prooftype(_1: &chain::Chain) -> std::option::Option<ProofType> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1061:32: 1061:37
    let mut _0: std::option::Option<libproto::ProofType>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1061:42: 1061:59

    bb0: {
        switchInt(((*_1).14: u8)) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1062:9: 1062:29
    }

    bb1: {
        _0 = const std::option::Option::<ProofType>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:1066:18: 1066:22
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<ProofType>, val: Value(Scalar(0x03)) }
        goto -> bb5;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1066:18: 1066:22
    }

    bb2: {
        _0 = const std::option::Option::<ProofType>::Some(AuthorityRound); // scope 0 at cita-chain/core/src/libchain/chain.rs:1063:18: 1063:49
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<ProofType>, val: Value(Scalar(0x00)) }
        goto -> bb5;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1063:48: 1063:49
    }

    bb3: {
        _0 = const std::option::Option::<ProofType>::Some(libproto::ProofType::Raft); // scope 0 at cita-chain/core/src/libchain/chain.rs:1064:18: 1064:39
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<ProofType>, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1064:38: 1064:39
    }

    bb4: {
        _0 = const std::option::Option::<ProofType>::Some(libproto::ProofType::Bft); // scope 0 at cita-chain/core/src/libchain/chain.rs:1065:18: 1065:38
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<ProofType>, val: Value(Scalar(0x02)) }
        goto -> bb5;                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1065:37: 1065:38
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1068:6: 1068:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs(_1: &chain::Chain, _2: Vec<u64>, _3: F, _4: std::option::Option<usize>) -> Vec<LocalizedLog> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1071:9: 1071:14
    debug blocks => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1072:9: 1072:19
    debug matches => _3;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1073:9: 1073:16
    debug limit => _4;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1074:9: 1074:14
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
    let mut _6: &mut [u64];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
    let mut _7: &mut [u64];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
    let mut _8: &mut std::vec::Vec<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
    let mut _9: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1083:13: 1083:26
    let mut _10: std::iter::Take<std::iter::Filter<std::iter::FlatMap<std::iter::FilterMap<std::iter::FilterMap<std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, std::iter::FlatMap<std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>, std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1139:54
    let mut _11: std::iter::Filter<std::iter::FlatMap<std::iter::FilterMap<std::iter::FilterMap<std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, std::iter::FlatMap<std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>, std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1138:45
    let mut _12: std::iter::FlatMap<std::iter::FilterMap<std::iter::FilterMap<std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, std::iter::FlatMap<std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>, std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1137:15
    let mut _13: std::iter::FilterMap<std::iter::FilterMap<std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1094:15
    let mut _14: std::iter::FilterMap<std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1090:15
    let mut _15: std::iter::FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1086:95
    let mut _16: std::vec::IntoIter<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1085:25
    let mut _17: std::vec::Vec<u64>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1084:24: 1084:30
    let mut _18: [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94
    let mut _19: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94
    let mut _20: [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
    let mut _21: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
    let mut _22: [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
    let mut _23: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
    let mut _24: [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
    let mut _25: &mut usize;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
    let mut _26: [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:21: 1138:44
    let mut _27: &F;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:21: 1138:44
    let mut _28: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1139:19: 1139:53
    let _29: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
    let mut _30: &mut [types::log::LocalizedLog]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
    let mut _31: &mut [types::log::LocalizedLog]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
    let mut _32: &mut std::vec::Vec<types::log::LocalizedLog>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
    let mut _33: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1139:53: 1139:54
    let mut _34: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    scope 1 {
        debug log_index => _9;           // in scope 1 at cita-chain/core/src/libchain/chain.rs:1083:13: 1083:26
        let mut _0: std::vec::Vec<types::log::LocalizedLog>; // return place in scope 1 at cita-chain/core/src/libchain/chain.rs:1084:13: 1084:21
        scope 2 {
            debug logs => _0;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:1084:13: 1084:21
        }
    }

    bb0: {
        _33 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
        _34 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
        _34 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
        _8 = &mut _2;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
        _7 = <Vec<u64> as DerefMut>::deref_mut(move _8) -> [return: bb1, unwind: bb16]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u64>) -> &'a mut <Vec<u64> as Deref>::Target {<Vec<u64> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
        _5 = slice::<impl [u64]>::sort_by::<[closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30]) -> [return: bb2, unwind: bb16]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:9: 1081:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1081:16: 1081:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u64], [closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30]) {slice::<impl [u64]>::sort_by::<[closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30], val: Value(<ZST>) }
    }

    bb2: {
        _9 = const 0_usize;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1083:29: 1083:30
        _34 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1084:30
        _17 = move _2;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1084:30
        _16 = <Vec<u64> as IntoIterator>::into_iter(move _17) -> [return: bb3, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1085:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1085:14: 1085:23
                                         // + literal: Const { ty: fn(Vec<u64>) -> <Vec<u64> as IntoIterator>::IntoIter {<Vec<u64> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = &_1;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94
        _18 = [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33] { self: move _19 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94
                                         // closure
                                         // + def_id: DefId(0:296 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#1})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> std::option::Option<(u64, cita_types::H256)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _15 = <std::vec::IntoIter<u64> as Iterator>::filter_map::<(u64, H256), [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>(move _16, move _18) -> [return: bb4, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1086:95
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1086:14: 1086:24
                                         // + literal: Const { ty: fn(std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]) -> FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]> {<std::vec::IntoIter<u64> as Iterator>::filter_map::<(u64, H256), [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &_1;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
        _20 = [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41] { self: move _21 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
                                         // closure
                                         // + def_id: DefId(0:298 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#2})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn(((u64, cita_types::H256),)) -> std::option::Option<(u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _14 = <FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]> as Iterator>::filter_map::<(u64, H256, Vec<types::receipt::Receipt>), [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>(move _15, move _20) -> [return: bb5, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1090:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1087:14: 1087:24
                                         // + literal: Const { ty: fn(FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]) -> FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]> {<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]> as Iterator>::filter_map::<(u64, H256, Vec<types::receipt::Receipt>), [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>}, val: Value(<ZST>) }
    }

    bb5: {
        _23 = &_1;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
        _22 = [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51] { self: move _23 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
                                         // closure
                                         // + def_id: DefId(0:300 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#3})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn(((u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>),)) -> std::option::Option<(u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>, std::vec::Vec<cita_types::H256>)>,
                                         //     (&&libchain::chain::Chain,),
                                         // ]
        _13 = <FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]> as Iterator>::filter_map::<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>), [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>(move _14, move _22) -> [return: bb6, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1094:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1091:14: 1091:24
                                         // + literal: Const { ty: fn(FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]) -> FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]> {<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]> as Iterator>::filter_map::<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>), [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = &mut _9;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
        _24 = [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65] { log_index: move _25 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
                                         // closure
                                         // + def_id: DefId(0:302 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#4})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn(((u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>, std::vec::Vec<cita_types::H256>),)) -> std::iter::FlatMap<std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>, std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>,
                                         //     (&mut usize,),
                                         // ]
        _12 = <FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]> as Iterator>::flat_map::<FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>(move _13, move _24) -> [return: bb7, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1137:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1095:14: 1095:22
                                         // + literal: Const { ty: fn(FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]) -> FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]> {<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]> as Iterator>::flat_map::<FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>}, val: Value(<ZST>) }
    }

    bb7: {
        _27 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1138:21: 1138:44
        _26 = [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26] { matches: move _27 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1138:21: 1138:44
                                         // closure
                                         // + def_id: DefId(0:307 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#5})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a types::log::LocalizedLog,)) -> bool,
                                         //     (&F,),
                                         // ]
        _11 = <FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]> as Iterator>::filter::<[closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>(move _12, move _26) -> [return: bb8, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1138:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1138:14: 1138:20
                                         // + literal: Const { ty: fn(FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]) -> std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]> {<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]> as Iterator>::filter::<[closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = const true;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1138:44: 1138:45
        _28 = std::option::Option::<usize>::unwrap_or(_4, const _) -> [return: bb9, unwind: bb19]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1139:19: 1139:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1139:25: 1139:34
                                         // + literal: Const { ty: fn(std::option::Option<usize>, usize) -> usize {std::option::Option::<usize>::unwrap_or}, val: Value(<ZST>) }
    }

    bb9: {
        _33 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1139:54
        _10 = <std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]> as Iterator>::take(move _11, move _28) -> [return: bb10, unwind: bb19]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1139:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1139:14: 1139:18
                                         // + literal: Const { ty: fn(std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>, usize) -> std::iter::Take<std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>> {<std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]> as Iterator>::take}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1139:53: 1139:54
        _0 = <std::iter::Take<std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>> as Iterator>::collect::<Vec<LocalizedLog>>(move _10) -> [return: bb11, unwind: bb16]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1084:24: 1140:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1140:14: 1140:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Take<std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>>) -> Vec<LocalizedLog> {<std::iter::Take<std::iter::Filter<FlatMap<FilterMap<FilterMap<FilterMap<std::vec::IntoIter<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33]>, [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41]>, [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51]>, FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>, [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65]>, [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26]>> as Iterator>::collect::<Vec<LocalizedLog>>}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = &mut _0;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
        _31 = <Vec<LocalizedLog> as DerefMut>::deref_mut(move _32) -> [return: bb12, unwind: bb15]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<LocalizedLog>) -> &'a mut <Vec<LocalizedLog> as Deref>::Target {<Vec<LocalizedLog> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _30 = _31;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
        _29 = core::slice::<impl [LocalizedLog]>::reverse(move _30) -> [return: bb13, unwind: bb15]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1141:9: 1141:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1141:14: 1141:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut [LocalizedLog]) {core::slice::<impl [LocalizedLog]>::reverse}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_3) -> [return: bb14, unwind: bb21]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    }

    bb14: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1143:6: 1143:6
    }

    bb15 (cleanup): {
        drop(_0) -> bb16;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    }

    bb16 (cleanup): {
        drop(_3) -> bb21;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1070:5: 1143:6
    }

    bb18 (cleanup): {
        drop(_11) -> bb16;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1139:53: 1139:54
    }

    bb19 (cleanup): {
        switchInt(_33) -> [0: bb16, otherwise: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1139:53: 1139:54
    }

    bb20 (cleanup): {
        drop(_2) -> bb17;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    }

    bb21 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb20]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1143:5: 1143:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1081:24: 1081:30], _2: &u64, _3: &u64) -> std::cmp::Ordering {
    debug a => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:25: 1081:26
    debug b => _3;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:28: 1081:29
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1081:31: 1081:31

    bb0: {
        _0 = <u64 as Ord>::cmp(_3, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:31: 1081:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1081:33: 1081:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u64, &'b u64) -> std::cmp::Ordering {<u64 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1081:39: 1081:39
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1086:25: 1086:33], _2: u64) -> std::option::Option<(u64, H256)> {
    debug number => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:26: 1086:32
    debug self => (*((*_1).0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1071:10: 1071:14
    let mut _0: std::option::Option<(u64, cita_types::H256)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:34
    let mut _3: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:67
    let mut _4: [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:72: 1086:93
    let mut _5: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:72: 1086:93
    let mut _6: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94
    let mut _7: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:25: 1086:94

    bb0: {
        _6 = deref_copy ((*_1).0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:67
        _7 = deref_copy (*_6);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:67
        _3 = chain::Chain::block_hash_by_height(_7, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:67
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1086:39: 1086:59
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<H256> {chain::Chain::block_hash_by_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:72: 1086:93
        _4 = [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78] { number: move _5 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:72: 1086:93
                                         // closure
                                         // + def_id: DefId(0:297 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#1}::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn((cita_types::H256,)) -> (u64, cita_types::H256),
                                         //     (&u64,),
                                         // ]
        _0 = std::option::Option::<H256>::map::<(u64, H256), [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78]>(move _3, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:34: 1086:94
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1086:68: 1086:71
                                         // + literal: Const { ty: fn(std::option::Option<H256>, [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78]) -> std::option::Option<(u64, H256)> {std::option::Option::<H256>::map::<(u64, H256), [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:94: 1086:94
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#1}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1086:72: 1086:78], _2: H256) -> (u64, H256) {
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:73: 1086:77
    debug number => (*(_1.0: &u64));     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:26: 1086:32
    let mut _0: (u64, cita_types::H256); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:79: 1086:79
    let mut _3: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:80: 1086:86
    let mut _4: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1086:72: 1086:93

    bb0: {
        _4 = deref_copy (_1.0: &u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:80: 1086:86
        _3 = (*_4);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:80: 1086:86
        _0 = (move _3, _2);              // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:79: 1086:93
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1086:93: 1086:93
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#2}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1087:25: 1087:41], _2: (u64, H256)) -> std::option::Option<(u64, H256, Vec<types::receipt::Receipt>)> {
    debug self => (*((*_1).0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1071:10: 1071:14
    let mut _0: std::option::Option<(u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:42: 1087:42
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:27: 1087:33
    let _4: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:35: 1087:39
    let mut _5: std::option::Option<types::block_receipts::BlockReceipts>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1088:17: 1088:42
    let mut _6: [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
    let mut _7: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
    let mut _8: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
    let mut _9: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
    let mut _10: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:25: 1090:14
    scope 1 {
        debug number => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1087:27: 1087:33
        debug hash => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:1087:35: 1087:39
    }

    bb0: {
        _3 = (_2.0: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:1087:27: 1087:33
        _4 = (_2.1: cita_types::H256);   // scope 0 at cita-chain/core/src/libchain/chain.rs:1087:35: 1087:39
        _9 = deref_copy ((*_1).0: &&libchain::chain::Chain); // scope 1 at cita-chain/core/src/libchain/chain.rs:1088:17: 1088:42
        _10 = deref_copy (*_9);          // scope 1 at cita-chain/core/src/libchain/chain.rs:1088:17: 1088:42
        _5 = chain::Chain::block_receipts(_10, _4) -> bb1; // scope 1 at cita-chain/core/src/libchain/chain.rs:1088:17: 1088:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1088:22: 1088:36
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<BlockReceipts> {chain::Chain::block_receipts}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
        _8 = &_4;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
        _6 = [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29] { number: move _7, hash: move _8 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
                                         // closure
                                         // + def_id: DefId(0:299 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#2}::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn((types::block_receipts::BlockReceipts,)) -> (u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>),
                                         //     (&u64, &cita_types::H256),
                                         // ]
        _0 = std::option::Option::<BlockReceipts>::map::<(u64, H256, Vec<types::receipt::Receipt>), [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29]>(move _5, move _6) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:1088:17: 1089:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1089:22: 1089:25
                                         // + literal: Const { ty: fn(std::option::Option<BlockReceipts>, [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29]) -> std::option::Option<(u64, H256, Vec<types::receipt::Receipt>)> {std::option::Option::<BlockReceipts>::map::<(u64, H256, Vec<types::receipt::Receipt>), [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1090:14: 1090:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#2}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1089:26: 1089:29], _2: BlockReceipts) -> (u64, H256, Vec<types::receipt::Receipt>) {
    debug r => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:27: 1089:28
    debug number => (*(_1.0: &u64));     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:27: 1087:33
    debug hash => (*(_1.1: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1087:35: 1087:39
    let mut _0: (u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:30: 1089:30
    let mut _3: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:31: 1089:37
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:39: 1089:43
    let mut _5: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:45: 1089:55
    let mut _6: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1089:26: 1089:56

    bb0: {
        _6 = deref_copy (_1.0: &u64);    // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:31: 1089:37
        _3 = (*_6);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:31: 1089:37
        _7 = deref_copy (_1.1: &cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:39: 1089:43
        _4 = (*_7);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:39: 1089:43
        _5 = move (_2.0: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:45: 1089:55
        _0 = (move _3, move _4, move _5); // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:30: 1089:56
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1089:56: 1089:56
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#3}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1091:25: 1091:51], _2: (u64, H256, Vec<types::receipt::Receipt>)) -> std::option::Option<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>)> {
    debug self => (*((*_1).0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1071:10: 1071:14
    let mut _0: std::option::Option<(u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>, std::vec::Vec<cita_types::H256>)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:52: 1091:52
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:27: 1091:33
    let _4: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:35: 1091:39
    let _5: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:41: 1091:49
    let mut _6: std::option::Option<types::block::BlockBody>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1092:17: 1092:46
    let mut _7: [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    let mut _8: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    let mut _9: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    let mut _10: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
    let mut _11: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
    let mut _12: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1094:13: 1094:14
    scope 1 {
        debug number => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1091:27: 1091:33
        debug hash => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:1091:35: 1091:39
        debug receipts => _5;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:1091:41: 1091:49
    }

    bb0: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:27: 1091:33
        _3 = (_2.0: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:27: 1091:33
        _4 = (_2.1: cita_types::H256);   // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:35: 1091:39
        _12 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:41: 1091:49
        _5 = move (_2.2: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:41: 1091:49
        _10 = deref_copy ((*_1).0: &&libchain::chain::Chain); // scope 1 at cita-chain/core/src/libchain/chain.rs:1092:17: 1092:46
        _11 = deref_copy (*_10);         // scope 1 at cita-chain/core/src/libchain/chain.rs:1092:17: 1092:46
        _6 = chain::Chain::block_body_by_hash(_11, _4) -> [return: bb1, unwind: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1092:17: 1092:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1092:22: 1092:40
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<types::block::BlockBody> {chain::Chain::block_body_by_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
        _9 = &_4;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
        _12 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
        _7 = [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33] { number: move _8, hash: move _9, receipts: move _5 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
                                         // closure
                                         // + def_id: DefId(0:301 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#3}::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn((types::block::BlockBody,)) -> (u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>, std::vec::Vec<cita_types::H256>),
                                         //     (&u64, &cita_types::H256, std::vec::Vec<types::receipt::Receipt>),
                                         // ]
        _0 = std::option::Option::<types::block::BlockBody>::map::<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>), [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33]>(move _6, move _7) -> [return: bb2, unwind: bb5]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1092:17: 1093:83
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1093:22: 1093:25
                                         // + literal: Const { ty: fn(std::option::Option<types::block::BlockBody>, [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33]) -> std::option::Option<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>)> {std::option::Option::<types::block::BlockBody>::map::<(u64, H256, Vec<types::receipt::Receipt>, Vec<H256>), [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33]>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1094:13: 1094:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1094:14: 1094:14
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1091:25: 1094:14
    }

    bb4 (cleanup): {
        drop(_5) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1094:13: 1094:14
    }

    bb5 (cleanup): {
        switchInt(_12) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1094:13: 1094:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#3}::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1093:26: 1093:33], _2: types::block::BlockBody) -> (u64, H256, Vec<types::receipt::Receipt>, Vec<H256>) {
    debug number => (*(_1.0: &u64));     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:27: 1091:33
    debug hash => (*(_1.1: &cita_types::H256)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:35: 1091:39
    debug receipts => (_1.2: std::vec::Vec<types::receipt::Receipt>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1091:41: 1091:49
    let mut _0: (u64, cita_types::H256, std::vec::Vec<types::receipt::Receipt>, std::vec::Vec<cita_types::H256>); // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:34: 1093:34
    let _3: &types::block::BlockBody;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:27: 1093:32
    let mut _4: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:35: 1093:41
    let mut _5: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:43: 1093:47
    let mut _6: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:49: 1093:57
    let mut _7: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:59: 1093:81
    let mut _8: &u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    let mut _9: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    scope 1 {
        debug b => _3;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:1093:27: 1093:32
    }

    bb0: {
        _3 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1093:27: 1093:32
        _8 = deref_copy (_1.0: &u64);    // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:35: 1093:41
        _4 = (*_8);                      // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:35: 1093:41
        _9 = deref_copy (_1.1: &cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:43: 1093:47
        _5 = (*_9);                      // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:43: 1093:47
        _6 = move (_1.2: std::vec::Vec<types::receipt::Receipt>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:49: 1093:57
        _7 = types::block::BlockBody::transaction_hashes(_3) -> [return: bb1, unwind: bb3]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:59: 1093:81
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1093:61: 1093:79
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> Vec<H256> {types::block::BlockBody::transaction_hashes}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = (move _4, move _5, move _6, move _7); // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:34: 1093:82
        drop(_2) -> bb2;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1093:81: 1093:82
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1093:82: 1093:82
    }

    bb3 (cleanup): {
        drop(_6) -> bb4;                 // scope 1 at cita-chain/core/src/libchain/chain.rs:1093:81: 1093:82
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1093:81: 1093:82
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1093:26: 1093:82
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1095:23: 1095:65], _2: (u64, H256, Vec<types::receipt::Receipt>, Vec<H256>)) -> FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]> {
    debug log_index => (*((*_1).0: &mut usize)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1083:17: 1083:26
    let mut _0: std::iter::FlatMap<std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>, std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:66: 1095:66
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
    let _4: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:33: 1095:37
    let mut _5: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:39: 1095:51
    let mut _6: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:53: 1095:63
    let mut _7: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:50
    let mut _8: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:34
    let mut _9: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:34
    let mut _10: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1096:38: 1096:50
    let mut _11: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1096:38: 1096:50
    let mut _13: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _15: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _16: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _17: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _18: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _19: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _20: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _21: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _22: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
    let mut _23: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _24: &[core::fmt::ArgumentV1<'_>; 4]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _25: [core::fmt::ArgumentV1<'_>; 4]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _26: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1099:25: 1099:31
    let _27: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1099:25: 1099:31
    let mut _28: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1100:25: 1100:29
    let _29: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1100:25: 1100:29
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
    let _31: &usize;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
    let _32: usize;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
    let mut _33: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
    let _35: &usize;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
    let _36: usize;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
    let mut _37: &std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
    let _38: !;                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:68:9: 68:77
    let mut _39: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1106:29: 1108:70
    let mut _40: std::slice::Iter<'_, types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
    let mut _41: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
    let _42: &[types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
    let mut _43: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
    let mut _45: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1110:36: 1110:50
    let _46: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
    let mut _47: &mut [cita_types::H256]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
    let mut _48: &mut [cita_types::H256]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
    let mut _49: &mut std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
    let _50: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
    let mut _51: &mut [types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
    let mut _52: &mut [types::receipt::Receipt]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
    let mut _53: &mut std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
    let mut _54: std::iter::Enumerate<std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1113:17: 1117:33
    let mut _55: std::iter::Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<cita_types::H256>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1113:17: 1116:33
    let mut _56: std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1113:17: 1115:49
    let mut _57: std::vec::IntoIter<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1113:17: 1114:33
    let mut _58: std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1113:17: 1113:25
    let mut _59: std::vec::Vec<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1116:26: 1116:32
    let mut _60: [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:31: 1136:22
    let mut _64: &mut usize;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
    let mut _65: &mut usize;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
    let mut _66: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    let mut _67: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    scope 1 {
        debug number => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
        debug hash => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:1095:33: 1095:37
        debug receipts => _5;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:1095:39: 1095:51
        debug hashes => _6;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1095:53: 1095:63
        let _12: log::Level;             // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _44: usize;                  // in scope 1 at cita-chain/core/src/libchain/chain.rs:1110:21: 1110:33
        scope 2 {
            debug lvl => _12;            // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _61: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _62: &[&str; 5];     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
            let mut _63: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug receipts_len => _44;   // in scope 3 at cita-chain/core/src/libchain/chain.rs:1110:21: 1110:33
        }
    }

    bb0: {
        _67 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
        _66 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
        _3 = (_2.0: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
        _4 = (_2.1: cita_types::H256);   // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:33: 1095:37
        _67 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:39: 1095:51
        _5 = move (_2.2: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:39: 1095:51
        _66 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:53: 1095:63
        _6 = move (_2.3: std::vec::Vec<cita_types::H256>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:53: 1095:63
        _9 = &_5;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:34
        _8 = Vec::<types::receipt::Receipt>::len(move _9) -> [return: bb1, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:34
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1096:29: 1096:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> usize {Vec::<types::receipt::Receipt>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_6;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:38: 1096:50
        _10 = Vec::<H256>::len(move _11) -> [return: bb2, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:38: 1096:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1096:45: 1096:48
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> usize {Vec::<H256>::len}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Ne(move _8, move _10);      // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:50
        switchInt(move _7) -> [0: bb19, otherwise: bb3]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1096:20: 1096:50
    }

    bb3: {
        _12 = log::Level::Warn;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _15 = &_12;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _63 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::logs::{closure#4}, [F, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _14 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _15, _63) -> [return: bb7, unwind: bb36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb6;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _17 = &_12;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _19 = log::max_level() -> [return: bb8, unwind: bb36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _13) -> [0: bb18, otherwise: bb10]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        switchInt(move _14) -> [0: bb4, otherwise: bb5]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _18 = &_19;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _16 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _17, move _18) -> [return: bb9, unwind: bb36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = move _16;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb6;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _62 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &[&str; 5], val: Unevaluated(chain::Chain::logs::{closure#4}, [F, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _22 = _62 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
        _27 = &_3;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1099:25: 1099:31
        _26 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_27) -> [return: bb11, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1099:25: 1099:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1099:25: 1099:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = &_4;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1100:25: 1100:29
        _28 = core::fmt::ArgumentV1::<'_>::new_display::<H256>(_29) -> [return: bb12, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1100:25: 1100:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1100:25: 1100:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<H256>}, val: Value(<ZST>) }
    }

    bb12: {
        _33 = &_5;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
        _32 = Vec::<types::receipt::Receipt>::len(move _33) -> [return: bb13, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1101:34: 1101:37
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> usize {Vec::<types::receipt::Receipt>::len}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = &_32;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_31) -> [return: bb14, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1101:25: 1101:39
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _37 = &_6;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
        _36 = Vec::<H256>::len(move _37) -> [return: bb15, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1102:32: 1102:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H256>) -> usize {Vec::<H256>::len}, val: Value(<ZST>) }
    }

    bb15: {
        _35 = &_36;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
        _34 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_35) -> [return: bb16, unwind: bb36]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1102:25: 1102:37
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb16: {
        _25 = [move _26, move _28, move _30, move _34]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _24 = &_25;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _23 = _24 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb17, unwind: bb36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _61 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::logs::{closure#4}, [F, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _20 = log::__private_api_log(move _21, _12, _61) -> [return: bb38, unwind: bb36]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = core::panicking::panic(const "internal error: entered unreachable code") -> bb36; // scope 1 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _43 = &_5;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
        _42 = <Vec<types::receipt::Receipt> as Deref>::deref(move _43) -> [return: bb20, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> &'a <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _41 = _42;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
        _40 = core::slice::<impl [types::receipt::Receipt]>::iter(move _41) -> [return: bb21, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:29: 1107:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1107:22: 1107:26
                                         // + literal: Const { ty: for<'a> fn(&'a [types::receipt::Receipt]) -> std::slice::Iter<'a, types::receipt::Receipt> {core::slice::<impl [types::receipt::Receipt]>::iter}, val: Value(<ZST>) }
    }

    bb21: {
        _39 = <std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::fold::<usize, [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44]>(move _40, const 0_usize, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44]) -> [return: bb22, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:29: 1108:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1108:22: 1108:26
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, types::receipt::Receipt>, usize, [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44]) -> usize {<std::slice::Iter<'_, types::receipt::Receipt> as Iterator>::fold::<usize, [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44], val: Value(<ZST>) }
    }

    bb22: {
        _64 = deref_copy ((*_1).0: &mut usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:17: 1108:70
        (*_64) = move _39;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1106:17: 1108:70
        _45 = &_5;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1110:36: 1110:50
        _44 = Vec::<types::receipt::Receipt>::len(move _45) -> [return: bb23, unwind: bb36]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1110:36: 1110:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1110:45: 1110:48
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>) -> usize {Vec::<types::receipt::Receipt>::len}, val: Value(<ZST>) }
    }

    bb23: {
        _49 = &mut _6;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
        _48 = <Vec<H256> as DerefMut>::deref_mut(move _49) -> [return: bb24, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<H256>) -> &'a mut <Vec<H256> as Deref>::Target {<Vec<H256> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb24: {
        _47 = _48;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
        _46 = core::slice::<impl [H256]>::reverse(move _47) -> [return: bb25, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1111:17: 1111:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1111:24: 1111:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut [H256]) {core::slice::<impl [H256]>::reverse}, val: Value(<ZST>) }
    }

    bb25: {
        _53 = &mut _5;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
        _52 = <Vec<types::receipt::Receipt> as DerefMut>::deref_mut(move _53) -> [return: bb26, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<types::receipt::Receipt>) -> &'a mut <Vec<types::receipt::Receipt> as Deref>::Target {<Vec<types::receipt::Receipt> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb26: {
        _51 = _52;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
        _50 = core::slice::<impl [types::receipt::Receipt]>::reverse(move _51) -> [return: bb27, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1112:17: 1112:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1112:26: 1112:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut [types::receipt::Receipt]) {core::slice::<impl [types::receipt::Receipt]>::reverse}, val: Value(<ZST>) }
    }

    bb27: {
        _67 = const false;               // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1113:25
        _58 = move _5;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1113:25
        _57 = <Vec<types::receipt::Receipt> as IntoIterator>::into_iter(move _58) -> [return: bb28, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1114:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1114:22: 1114:31
                                         // + literal: Const { ty: fn(Vec<types::receipt::Receipt>) -> <Vec<types::receipt::Receipt> as IntoIterator>::IntoIter {<Vec<types::receipt::Receipt> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb28: {
        _56 = <std::vec::IntoIter<types::receipt::Receipt> as Iterator>::map::<Vec<types::log::Log>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>(move _57, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]) -> [return: bb29, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1115:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1115:22: 1115:25
                                         // + literal: Const { ty: fn(std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]) -> std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]> {<std::vec::IntoIter<types::receipt::Receipt> as Iterator>::map::<Vec<types::log::Log>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35], val: Value(<ZST>) }
    }

    bb29: {
        _66 = const false;               // scope 3 at cita-chain/core/src/libchain/chain.rs:1116:26: 1116:32
        _59 = move _6;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1116:26: 1116:32
        _55 = <std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]> as Iterator>::zip::<Vec<H256>>(move _56, move _59) -> [return: bb30, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1116:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1116:22: 1116:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, Vec<H256>) -> Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, <Vec<H256> as IntoIterator>::IntoIter> {<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]> as Iterator>::zip::<Vec<H256>>}, val: Value(<ZST>) }
    }

    bb30: {
        _54 = <Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>> as Iterator>::enumerate(move _55) -> [return: bb31, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1117:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1117:22: 1117:31
                                         // + literal: Const { ty: fn(Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>) -> Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>> {<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb31: {
        _65 = deref_copy ((*_1).0: &mut usize); // scope 3 at cita-chain/core/src/libchain/chain.rs:1118:31: 1136:22
        _60 = [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66] { log_index: (*_65), hash: _4, number: _3, receipts_len: _44 }; // scope 3 at cita-chain/core/src/libchain/chain.rs:1118:31: 1136:22
                                         // closure
                                         // + def_id: DefId(0:305 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#4}::{closure#2})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn(((usize, (std::vec::Vec<types::log::Log>, cita_types::H256)),)) -> std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>,
                                         //     (usize, cita_types::H256, u64, usize),
                                         // ]
        _0 = <Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>> as Iterator>::flat_map::<std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>(move _54, move _60) -> [return: bb32, unwind: bb36]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1113:17: 1136:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1118:22: 1118:30
                                         // + literal: Const { ty: fn(Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]) -> FlatMap<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>>, std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]> {<Enumerate<Zip<std::iter::Map<std::vec::IntoIter<types::receipt::Receipt>, [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35]>, std::vec::IntoIter<H256>>> as Iterator>::flat_map::<std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>, [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66]>}, val: Value(<ZST>) }
    }

    bb32: {
        _66 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
        _67 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:14: 1137:14
    }

    bb33 (cleanup): {
        switchInt(_67) -> [0: bb34, otherwise: bb37]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1095:23: 1137:14
    }

    bb35 (cleanup): {
        drop(_6) -> bb33;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    }

    bb36 (cleanup): {
        switchInt(_66) -> [0: bb33, otherwise: bb35]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    }

    bb37 (cleanup): {
        drop(_5) -> bb34;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1137:13: 1137:14
    }

    bb38: {
        goto -> bb18;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1097:21: 1103:22
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1097:21: 1103:22

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1097:21: 1103:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1097:21: 1103:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1097:21: 1103:22
        _1 = (move _2, move _4, move _6, const 1097_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}: &[&str; 5] = {
    let mut _0: &[&str; 5];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
    let mut _1: [&str; 5];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118

    bb0: {
        _1 = [const "Block ", const " (", const ") has different number of receipts (", const ") to transactions (", const "). Database corrupt?"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1098:25: 1098:118
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1108:30: 1108:44], _2: usize, _3: &types::receipt::Receipt) -> usize {
    debug sum => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:31: 1108:34
    debug receipt => _3;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:36: 1108:43
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:45: 1108:45
    let mut _4: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:51: 1108:69
    let mut _5: &std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:51: 1108:69
    let mut _6: (usize, bool);           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1108:45: 1108:69

    bb0: {
        _5 = &((*_3).3: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:51: 1108:69
        _4 = Vec::<types::log::Log>::len(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:51: 1108:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1108:64: 1108:67
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::log::Log>) -> usize {Vec::<types::log::Log>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = CheckedAdd(_2, _4);         // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:45: 1108:69
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:45: 1108:69
    }

    bb2: {
        _0 = move (_6.0: usize);         // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:45: 1108:69
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1108:69: 1108:69
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1115:26: 1115:35], _2: types::receipt::Receipt) -> Vec<types::log::Log> {
    debug receipt => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1115:27: 1115:34
    let mut _0: std::vec::Vec<types::log::Log>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1115:36: 1115:36

    bb0: {
        _0 = move (_2.3: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1115:36: 1115:48
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1115:48: 1115:48
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}::{closure#2}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1118:31: 1118:66], _2: (usize, (Vec<types::log::Log>, H256))) -> std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]> {
    debug log_index => ((*_1).0: usize); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1083:17: 1083:26
    debug hash => ((*_1).1: cita_types::H256); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:33: 1095:37
    debug number => ((*_1).2: u64);      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
    debug receipts_len => ((*_1).3: usize); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1110:21: 1110:33
    let mut _0: std::iter::Map<std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:67: 1118:67
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:38: 1118:43
    let mut _4: std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:46: 1118:54
    let _5: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:56: 1118:63
    let mut _8: &std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1120:42: 1120:52
    let mut _9: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1121:38: 1121:48
    let mut _10: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1121:25: 1121:48
    let _11: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
    let mut _12: &mut [types::log::Log]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
    let mut _13: &mut [types::log::Log]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
    let mut _14: &mut std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
    let mut _15: std::iter::Enumerate<std::vec::IntoIter<types::log::Log>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:53
    let mut _16: std::vec::IntoIter<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:41
    let mut _17: std::vec::Vec<types::log::Log>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:29
    let mut _18: [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:58: 1135:26
    let mut _19: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1136:21: 1136:22
    scope 1 {
        debug index => _3;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:1118:38: 1118:43
        debug logs => _4;                // in scope 1 at cita-chain/core/src/libchain/chain.rs:1118:46: 1118:54
        debug tx_hash => _5;             // in scope 1 at cita-chain/core/src/libchain/chain.rs:1118:56: 1118:63
        let _6: usize;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:1119:29: 1119:46
        scope 2 {
            debug current_log_index => _6; // in scope 2 at cita-chain/core/src/libchain/chain.rs:1119:29: 1119:46
            let _7: usize;               // in scope 2 at cita-chain/core/src/libchain/chain.rs:1120:29: 1120:39
            scope 3 {
                debug no_of_logs => _7;  // in scope 3 at cita-chain/core/src/libchain/chain.rs:1120:29: 1120:39
            }
        }
    }

    bb0: {
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:46: 1118:54
        _19 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:46: 1118:54
        _4 = move ((_2.1: (std::vec::Vec<types::log::Log>, cita_types::H256)).0: std::vec::Vec<types::log::Log>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:46: 1118:54
        _5 = ((_2.1: (std::vec::Vec<types::log::Log>, cita_types::H256)).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:56: 1118:63
        _3 = (_2.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:38: 1118:43
        _6 = ((*_1).0: usize);           // scope 1 at cita-chain/core/src/libchain/chain.rs:1119:49: 1119:58
        _8 = &_4;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:1120:42: 1120:52
        _7 = Vec::<types::log::Log>::len(move _8) -> [return: bb1, unwind: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1120:42: 1120:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1120:47: 1120:50
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::log::Log>) -> usize {Vec::<types::log::Log>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _7;                         // scope 3 at cita-chain/core/src/libchain/chain.rs:1121:38: 1121:48
        _10 = CheckedSub(((*_1).0: usize), _9); // scope 3 at cita-chain/core/src/libchain/chain.rs:1121:25: 1121:48
        assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: usize), move _9) -> [success: bb2, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1121:25: 1121:48
    }

    bb2: {
        ((*_1).0: usize) = move (_10.0: usize); // scope 3 at cita-chain/core/src/libchain/chain.rs:1121:25: 1121:48
        _14 = &mut _4;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
        _13 = <Vec<types::log::Log> as DerefMut>::deref_mut(move _14) -> [return: bb3, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<types::log::Log>) -> &'a mut <Vec<types::log::Log> as Deref>::Target {<Vec<types::log::Log> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 3 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
        _11 = core::slice::<impl [types::log::Log]>::reverse(move _12) -> [return: bb4, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1123:25: 1123:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1123:30: 1123:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut [types::log::Log]) {core::slice::<impl [types::log::Log]>::reverse}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = const false;               // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:29
        _17 = move _4;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:29
        _16 = <Vec<types::log::Log> as IntoIterator>::into_iter(move _17) -> [return: bb5, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1124:30: 1124:39
                                         // + literal: Const { ty: fn(Vec<types::log::Log>) -> <Vec<types::log::Log> as IntoIterator>::IntoIter {<Vec<types::log::Log> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = <std::vec::IntoIter<types::log::Log> as Iterator>::enumerate(move _16) -> [return: bb6, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:25: 1124:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1124:42: 1124:51
                                         // + literal: Const { ty: fn(std::vec::IntoIter<types::log::Log>) -> Enumerate<std::vec::IntoIter<types::log::Log>> {<std::vec::IntoIter<types::log::Log> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73] { hash: ((*_1).1: cita_types::H256), number: ((*_1).2: u64), tx_hash: _5, receipts_len: ((*_1).3: usize), index: _3, no_of_logs: _7, current_log_index: _6 }; // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:58: 1135:26
                                         // closure
                                         // + def_id: DefId(0:306 ~ core[3f1a]::libchain::chain::{impl#5}::logs::{closure#4}::{closure#2}::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn(((usize, types::log::Log),)) -> types::log::LocalizedLog,
                                         //     (cita_types::H256, u64, cita_types::H256, usize, usize, usize, usize),
                                         // ]
        _0 = <Enumerate<std::vec::IntoIter<types::log::Log>> as Iterator>::map::<LocalizedLog, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>(move _15, move _18) -> [return: bb7, unwind: bb10]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1124:25: 1135:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1124:54: 1124:57
                                         // + literal: Const { ty: fn(Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]) -> std::iter::Map<Enumerate<std::vec::IntoIter<types::log::Log>>, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]> {<Enumerate<std::vec::IntoIter<types::log::Log>> as Iterator>::map::<LocalizedLog, [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73]>}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1136:21: 1136:22
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1136:22: 1136:22
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1118:31: 1136:22
    }

    bb9 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1136:21: 1136:22
    }

    bb10 (cleanup): {
        switchInt(_19) -> [0: bb8, otherwise: bb9]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1136:21: 1136:22
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#4}::{closure#2}::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1124:58: 1124:73], _2: (usize, types::log::Log)) -> LocalizedLog {
    debug hash => ((*_1).0: cita_types::H256); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:33: 1095:37
    debug number => ((*_1).1: u64);      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1095:25: 1095:31
    debug tx_hash => ((*_1).2: cita_types::H256); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:56: 1118:63
    debug receipts_len => ((*_1).3: usize); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1110:21: 1110:33
    debug index => ((*_1).4: usize);     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1118:38: 1118:43
    debug no_of_logs => ((*_1).5: usize); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1120:29: 1120:39
    debug current_log_index => ((*_1).6: usize); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1119:29: 1119:46
    let mut _0: types::log::LocalizedLog; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:74: 1124:74
    let _3: usize;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:65: 1124:66
    let _4: types::log::Log;             // in scope 0 at cita-chain/core/src/libchain/chain.rs:1124:68: 1124:71
    let mut _5: types::log::Log;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1126:33: 1126:36
    let mut _6: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1127:45: 1127:49
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1128:47: 1128:53
    let mut _8: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1129:51: 1129:58
    let mut _9: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:76
    let mut _10: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:72
    let mut _11: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:64
    let mut _12: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:67: 1131:72
    let mut _13: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:72
    let mut _14: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:76
    let mut _15: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:74
    let mut _16: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:70
    let mut _17: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:66
    let mut _18: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:70
    let mut _19: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:74
    let mut _20: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:69
    let mut _21: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:65
    let mut _22: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:61
    let mut _23: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:65
    let mut _24: (usize, bool);          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:69
    scope 1 {
        debug i => _3;                   // in scope 1 at cita-chain/core/src/libchain/chain.rs:1124:65: 1124:66
        debug log => _4;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:1124:68: 1124:71
    }

    bb0: {
        _3 = (_2.0: usize);              // scope 0 at cita-chain/core/src/libchain/chain.rs:1124:65: 1124:66
        _4 = move (_2.1: types::log::Log); // scope 0 at cita-chain/core/src/libchain/chain.rs:1124:68: 1124:71
        _5 = move _4;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1126:33: 1126:36
        _6 = ((*_1).0: cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:1127:45: 1127:49
        _7 = ((*_1).1: u64);             // scope 1 at cita-chain/core/src/libchain/chain.rs:1128:47: 1128:53
        _8 = ((*_1).2: cita_types::H256); // scope 1 at cita-chain/core/src/libchain/chain.rs:1129:51: 1129:58
        _11 = ((*_1).3: usize);          // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:64
        _12 = ((*_1).4: usize);          // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:67: 1131:72
        _13 = CheckedSub(_11, _12);      // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:72
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, move _12) -> [success: bb1, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:72
    }

    bb1: {
        _10 = move (_13.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:72
        _14 = CheckedSub(_10, const 1_usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:76
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, const 1_usize) -> [success: bb2, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:76
    }

    bb2: {
        _9 = move (_14.0: usize);        // scope 1 at cita-chain/core/src/libchain/chain.rs:1131:52: 1131:76
        _17 = ((*_1).5: usize);          // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:66
        _18 = CheckedSub(_17, _3);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:70
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, _3) -> [success: bb3, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:70
    }

    bb3: {
        _16 = move (_18.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:70
        _19 = CheckedSub(_16, const 1_usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:74
        assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, const 1_usize) -> [success: bb4, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:74
    }

    bb4: {
        _15 = move (_19.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1132:56: 1132:74
        _22 = ((*_1).6: usize);          // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:61
        _23 = CheckedSub(_22, _3);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:65
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _22, _3) -> [success: bb5, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:65
    }

    bb5: {
        _21 = move (_23.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:65
        _24 = CheckedSub(_21, const 1_usize); // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:69
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _21, const 1_usize) -> [success: bb6, unwind: bb7]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:69
    }

    bb6: {
        _20 = move (_24.0: usize);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1133:44: 1133:69
        _0 = LocalizedLog { log: move _5, block_hash: move _6, block_number: move _7, transaction_hash: move _8, transaction_index: move _9, log_index: move _20, transaction_log_index: move _15 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1125:29: 1134:30
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1135:26: 1135:26
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 1 at cita-chain/core/src/libchain/chain.rs:1134:29: 1134:30
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1124:58: 1135:26
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::logs::{closure#5}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1138:21: 1138:26], _2: &LocalizedLog) -> bool {
    debug log => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:22: 1138:25
    debug matches => (*((*_1).0: &F));   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1073:9: 1073:16
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:27: 1138:27
    let mut _3: (&types::log::Log,);     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:27: 1138:44
    let _4: &types::log::Log;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:35: 1138:43
    let mut _5: &F;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1138:21: 1138:44

    bb0: {
        _5 = deref_copy ((*_1).0: &F);   // scope 0 at cita-chain/core/src/libchain/chain.rs:1138:27: 1138:34
        _4 = &((*_2).0: types::log::Log); // scope 0 at cita-chain/core/src/libchain/chain.rs:1138:35: 1138:43
        _3 = (_4,);                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1138:27: 1138:44
        _0 = <F as Fn<(&types::log::Log,)>>::call(_5, move _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1138:27: 1138:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1138:27: 1138:34
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (&types::log::Log,)) -> <F as FnOnce<(&types::log::Log,)>>::Output {<F as Fn<(&types::log::Log,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1138:44: 1138:44
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::blocks_with_bloom(_1: &chain::Chain, _2: &cita_types::Bloom, _3: u64, _4: u64) -> Vec<u64> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1147:9: 1147:14
    debug bloom => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1148:9: 1148:14
    debug from_block => _3;              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1149:9: 1149:19
    debug to_block => _4;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1150:9: 1150:17
    let mut _0: std::vec::Vec<u64>;      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1151:10: 1151:26
    let _5: std::ops::Range<usize>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1152:13: 1152:18
    let mut _6: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1152:21: 1152:51
    let mut _7: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1152:53: 1152:81
    let mut _8: std::iter::Map<std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:9: 1156:39
    let mut _9: std::vec::IntoIter<usize>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:9: 1155:25
    let mut _10: std::vec::Vec<usize>;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:9: 1154:79
    let mut _11: &types::bloomchain::group::BloomGroupChain<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:9: 1154:79
    let _12: types::bloomchain::group::BloomGroupChain<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:9: 1153:55
    let mut _13: types::bloomchain::Config; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:30: 1153:48
    let mut _14: &dyn types::bloomchain::group::BloomGroupDatabase; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1153:50: 1153:54
    let _15: &std::ops::Range<usize>;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:25: 1154:31
    let _16: &types::bloomchain::Bloom;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:33: 1154:78
    let _17: types::bloomchain::Bloom;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:34: 1154:78
    let mut _18: [u8; 256];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:46: 1154:77
    let mut _19: cita_types::Bloom;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:70: 1154:76
    scope 1 {
        debug range => _5;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:1152:13: 1152:18
    }

    bb0: {
        _6 = _3 as usize (IntToInt);     // scope 0 at cita-chain/core/src/libchain/chain.rs:1152:21: 1152:51
        _7 = _4 as usize (IntToInt);     // scope 0 at cita-chain/core/src/libchain/chain.rs:1152:53: 1152:81
        _5 = std::ops::Range::<usize> { start: move _6, end: move _7 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:1152:21: 1152:81
        _13 = ((*_1).0: types::bloomchain::Config); // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:30: 1153:48
        _14 = _1 as &dyn types::bloomchain::group::BloomGroupDatabase (Pointer(Unsize)); // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:50: 1153:54
        _12 = BloomGroupChain::<'_>::new(move _13, move _14) -> bb1; // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1153:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1153:9: 1153:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(types::bloomchain::Config, &dyn BloomGroupDatabase) -> BloomGroupChain<'_> {BloomGroupChain::<'_>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_12;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1154:79
        _15 = &_5;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1154:25: 1154:31
        _19 = (*_2);                     // scope 1 at cita-chain/core/src/libchain/chain.rs:1154:70: 1154:76
        _18 = <cita_types::Bloom as Into<[u8; 256]>>::into(move _19) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:1154:46: 1154:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1154:46: 1154:69
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(cita_types::Bloom) -> [u8; 256] {<cita_types::Bloom as Into<[u8; 256]>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = <types::bloomchain::Bloom as From<[u8; 256]>>::from(move _18) -> bb3; // scope 1 at cita-chain/core/src/libchain/chain.rs:1154:34: 1154:78
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1154:34: 1154:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([u8; 256]) -> types::bloomchain::Bloom {<types::bloomchain::Bloom as From<[u8; 256]>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &_17;                      // scope 1 at cita-chain/core/src/libchain/chain.rs:1154:33: 1154:78
        _10 = BloomGroupChain::<'_>::with_bloom(move _11, _15, _16) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1154:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1154:14: 1154:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a BloomGroupChain<'_>, &'b std::ops::Range<usize>, &'c types::bloomchain::Bloom) -> Vec<usize> {BloomGroupChain::<'_>::with_bloom}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = <Vec<usize> as IntoIterator>::into_iter(move _10) -> bb5; // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1155:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1155:14: 1155:23
                                         // + literal: Const { ty: fn(Vec<usize>) -> <Vec<usize> as IntoIterator>::IntoIter {<Vec<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = <std::vec::IntoIter<usize> as Iterator>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]>(move _9, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]) -> bb6; // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1156:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1156:14: 1156:17
                                         // + literal: Const { ty: fn(std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]) -> std::iter::Map<std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]> {<std::vec::IntoIter<usize> as Iterator>::map::<u64, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21], val: Value(<ZST>) }
    }

    bb6: {
        _0 = <std::iter::Map<std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]> as Iterator>::collect::<Vec<u64>>(move _8) -> bb7; // scope 1 at cita-chain/core/src/libchain/chain.rs:1153:9: 1157:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1157:14: 1157:21
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]>) -> Vec<u64> {<std::iter::Map<std::vec::IntoIter<usize>, [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21]> as Iterator>::collect::<Vec<u64>>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1158:6: 1158:6
    }
}

chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::blocks_with_bloom::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1154:58: 1154:61

    bb0: {
        _0 = const 256_usize;            // scope 0 at cita-chain/core/src/libchain/chain.rs:1154:58: 1154:61
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1154:58: 1154:61
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::blocks_with_bloom::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1156:18: 1156:21], _2: usize) -> u64 {
    debug b => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1156:19: 1156:20
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1156:22: 1156:22

    bb0: {
        _0 = _2 as u64 (IntToInt);       // scope 0 at cita-chain/core/src/libchain/chain.rs:1156:22: 1156:38
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1156:38: 1156:38
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::blocks_with_bloom_by_id(_1: &chain::Chain, _2: &cita_types::Bloom, _3: types::block_number::BlockTag, _4: types::block_number::BlockTag) -> std::option::Option<Vec<u64>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1162:9: 1162:14
    debug bloom => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1163:9: 1163:14
    debug from_block => _3;              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1164:9: 1164:19
    debug to_block => _4;                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1165:9: 1165:17
    let mut _0: std::option::Option<std::vec::Vec<u64>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1166:10: 1166:34
    let mut _5: (std::option::Option<u64>, std::option::Option<u64>, std::option::Option<u64>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1167:15: 1171:10
    let mut _6: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1168:13: 1168:42
    let mut _7: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1169:13: 1169:40
    let mut _8: std::option::Option<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1170:13: 1170:59
    let mut _9: types::block_number::BlockTag; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1170:31: 1170:58
    let mut _10: types::block_number::Tag; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1170:45: 1170:57
    let mut _11: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:36: 1172:49
    let mut _12: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:26: 1172:34
    let mut _13: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:14: 1172:24
    let _14: u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:19: 1172:23
    let _15: u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:31: 1172:33
    let _16: u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1172:41: 1172:48
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1173:30: 1173:42
    let mut _19: std::vec::Vec<u64>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1174:22: 1174:62
    let mut _20: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1174:58: 1174:61
    scope 1 {
        debug from => _14;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:1172:19: 1172:23
        debug to => _15;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:1172:31: 1172:33
        debug pending => _16;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:1172:41: 1172:48
        let _17: u64;                    // in scope 1 at cita-chain/core/src/libchain/chain.rs:1173:21: 1173:24
        scope 2 {
            debug end => _17;            // in scope 2 at cita-chain/core/src/libchain/chain.rs:1173:21: 1173:24
        }
    }

    bb0: {
        _6 = chain::Chain::block_number(_1, _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1168:13: 1168:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1168:18: 1168:30
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, types::block_number::BlockTag) -> std::option::Option<u64> {chain::Chain::block_number}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = chain::Chain::block_number(_1, _4) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1169:13: 1169:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1169:18: 1169:30
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, types::block_number::BlockTag) -> std::option::Option<u64> {chain::Chain::block_number}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const types::block_number::Tag::Pending; // scope 0 at cita-chain/core/src/libchain/chain.rs:1170:45: 1170:57
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: types::block_number::Tag, val: Value(Scalar(0x02)) }
        _9 = types::block_number::BlockTag::Tag(move _10); // scope 0 at cita-chain/core/src/libchain/chain.rs:1170:31: 1170:58
        _8 = chain::Chain::block_number(_1, move _9) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:1170:13: 1170:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1170:18: 1170:30
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, types::block_number::BlockTag) -> std::option::Option<u64> {chain::Chain::block_number}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = (move _6, move _7, move _8); // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:15: 1171:10
        _13 = discriminant((_5.0: std::option::Option<u64>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:15: 1171:10
        switchInt(move _13) -> [1: bb5, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:9: 1171:10
    }

    bb4: {
        _0 = std::option::Option::<Vec<u64>>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:1176:18: 1176:22
        goto -> bb12;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1176:18: 1176:22
    }

    bb5: {
        _12 = discriminant((_5.1: std::option::Option<u64>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:15: 1171:10
        switchInt(move _12) -> [1: bb6, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:9: 1171:10
    }

    bb6: {
        _11 = discriminant((_5.2: std::option::Option<u64>)); // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:15: 1171:10
        switchInt(move _11) -> [1: bb7, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1167:9: 1171:10
    }

    bb7: {
        _14 = (((_5.0: std::option::Option<u64>) as Some).0: u64); // scope 0 at cita-chain/core/src/libchain/chain.rs:1172:19: 1172:23
        _15 = (((_5.1: std::option::Option<u64>) as Some).0: u64); // scope 0 at cita-chain/core/src/libchain/chain.rs:1172:31: 1172:33
        _16 = (((_5.2: std::option::Option<u64>) as Some).0: u64); // scope 0 at cita-chain/core/src/libchain/chain.rs:1172:41: 1172:48
        _18 = Gt(_15, _16);              // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:30: 1173:42
        switchInt(move _18) -> [0: bb9, otherwise: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:30: 1173:42
    }

    bb8: {
        _17 = _16;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:45: 1173:52
        goto -> bb10;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:27: 1173:66
    }

    bb9: {
        _17 = _15;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:62: 1173:64
        goto -> bb10;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1173:27: 1173:66
    }

    bb10: {
        _20 = _17;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1174:58: 1174:61
        _19 = chain::Chain::blocks_with_bloom(_1, _2, _14, move _20) -> bb11; // scope 2 at cita-chain/core/src/libchain/chain.rs:1174:22: 1174:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1174:27: 1174:44
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b cita_types::Bloom, u64, u64) -> Vec<u64> {chain::Chain::blocks_with_bloom}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = std::option::Option::<Vec<u64>>::Some(move _19); // scope 2 at cita-chain/core/src/libchain/chain.rs:1174:17: 1174:63
        goto -> bb12;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1175:13: 1175:14
    }

    bb12: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1178:6: 1178:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_logs(_1: &chain::Chain, _2: &types::filter::Filter) -> Vec<LocalizedLog> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:21: 1180:26
    debug filter => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:28: 1180:34
    let mut _0: std::vec::Vec<types::log::LocalizedLog>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:48: 1180:65
    let _3: std::vec::Vec<u64>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:13: 1181:19
    let mut _4: std::collections::hash_set::IntoIter<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1190:25
    let mut _5: std::collections::HashSet<u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1189:39
    let mut _6: std::iter::FlatMap<std::iter::FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, std::vec::Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1187:29
    let mut _7: std::iter::FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1186:15
    let mut _8: std::slice::Iter<'_, cita_types::Bloom>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
    let mut _9: &[cita_types::Bloom];    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
    let _10: &[cita_types::Bloom];       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
    let mut _11: &std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
    let _12: std::vec::Vec<cita_types::Bloom>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1182:26
    let mut _13: [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _14: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _15: &&types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _16: std::vec::Vec<u64>;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:19: 1193:25
    let mut _17: [closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56
    let mut _18: &&types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56
    let mut _19: std::option::Option<usize>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:58: 1193:70
    let mut _20: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1194:5: 1194:6
    scope 1 {
        debug blocks => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1181:13: 1181:19
    }

    bb0: {
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:13: 1181:19
        _12 = types::filter::Filter::zip_blooms(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1182:26
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1182:14: 1182:24
                                         // + literal: Const { ty: for<'a> fn(&'a types::filter::Filter) -> Vec<cita_types::Bloom> {types::filter::Filter::zip_blooms}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_12;                      // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
        _10 = <Vec<cita_types::Bloom> as Deref>::deref(move _11) -> [return: bb2, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<cita_types::Bloom>) -> &'a <Vec<cita_types::Bloom> as Deref>::Target {<Vec<cita_types::Bloom> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
        _8 = core::slice::<impl [cita_types::Bloom]>::iter(move _9) -> [return: bb3, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1183:20
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1183:14: 1183:18
                                         // + literal: Const { ty: for<'a> fn(&'a [cita_types::Bloom]) -> std::slice::Iter<'a, cita_types::Bloom> {core::slice::<impl [cita_types::Bloom]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &_1;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
        _15 = &_2;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
        _13 = [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32] { self: move _14, filter: move _15 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
                                         // closure
                                         // + def_id: DefId(0:313 ~ core[3f1a]::libchain::chain::{impl#5}::get_logs::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&cita_types::Bloom,)) -> std::option::Option<std::vec::Vec<u64>>,
                                         //     (&&libchain::chain::Chain, &&types::filter::Filter),
                                         // ]
        _7 = <std::slice::Iter<'_, cita_types::Bloom> as Iterator>::filter_map::<Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>(move _8, move _13) -> [return: bb4, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1186:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1184:14: 1184:24
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]) -> FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]> {<std::slice::Iter<'_, cita_types::Bloom> as Iterator>::filter_map::<Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]> as Iterator>::flat_map::<Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]>(move _7, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]) -> [return: bb5, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1187:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1187:14: 1187:22
                                         // + literal: Const { ty: fn(FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]) -> FlatMap<FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]> {<FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]> as Iterator>::flat_map::<Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26], val: Value(<ZST>) }
    }

    bb5: {
        _5 = <FlatMap<FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]> as Iterator>::collect::<HashSet<u64>>(move _6) -> [return: bb6, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1189:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1189:14: 1189:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(FlatMap<FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]>) -> HashSet<u64> {<FlatMap<FilterMap<std::slice::Iter<'_, cita_types::Bloom>, [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32]>, Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26]> as Iterator>::collect::<HashSet<u64>>}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = <HashSet<u64> as IntoIterator>::into_iter(move _5) -> [return: bb7, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1190:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1190:14: 1190:23
                                         // + literal: Const { ty: fn(HashSet<u64>) -> <HashSet<u64> as IntoIterator>::IntoIter {<HashSet<u64> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _3 = <std::collections::hash_set::IntoIter<u64> as Iterator>::collect::<Vec<u64>>(move _4) -> [return: bb8, unwind: bb11]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1181:22: 1191:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1191:14: 1191:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::collections::hash_set::IntoIter<u64>) -> Vec<u64> {<std::collections::hash_set::IntoIter<u64> as Iterator>::collect::<Vec<u64>>}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1191:34: 1191:35
        drop(_12) -> [return: bb9, unwind: bb14]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1191:35: 1191:36
    }

    bb9: {
        _20 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:19: 1193:25
        _16 = move _3;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:19: 1193:25
        _18 = &_2;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56
        _17 = [closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34] { filter: move _18 }; // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56
                                         // closure
                                         // + def_id: DefId(0:315 ~ core[3f1a]::libchain::chain::{impl#5}::get_logs::{closure#2})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a types::log::Log,)) -> bool,
                                         //     (&&types::filter::Filter,),
                                         // ]
        _19 = ((*_2).4: std::option::Option<usize>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:58: 1193:70
        _0 = chain::Chain::logs::<[closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34]>(_1, move _16, move _17, move _19) -> [return: bb10, unwind: bb14]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1193:9: 1193:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1193:14: 1193:18
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, Vec<u64>, [closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34], std::option::Option<usize>) -> Vec<LocalizedLog> {chain::Chain::logs::<[closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34]>}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1194:5: 1194:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1194:6: 1194:6
    }

    bb11 (cleanup): {
        drop(_12) -> bb12;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1191:35: 1191:36
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1180:5: 1194:6
    }

    bb13 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1194:5: 1194:6
    }

    bb14 (cleanup): {
        switchInt(_20) -> [0: bb12, otherwise: bb13]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1194:5: 1194:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_logs::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1184:25: 1184:32], _2: &cita_types::Bloom) -> std::option::Option<Vec<u64>> {
    debug bloom => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:26: 1184:31
    debug self => (*((*_1).0: &&libchain::chain::Chain)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:22: 1180:26
    debug filter => (*((*_1).1: &&types::filter::Filter)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:28: 1180:34
    let mut _0: std::option::Option<std::vec::Vec<u64>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:33: 1184:33
    let mut _3: types::block_number::BlockTag; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1185:53: 1185:70
    let mut _4: types::block_number::BlockTag; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1185:72: 1185:87
    let mut _5: &&libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _6: &libchain::chain::Chain; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _7: &&types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _8: &types::filter::Filter;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _9: &&types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14
    let mut _10: &types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1184:25: 1186:14

    bb0: {
        _5 = deref_copy ((*_1).0: &&libchain::chain::Chain); // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:17: 1185:88
        _6 = deref_copy (*_5);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:17: 1185:88
        _7 = deref_copy ((*_1).1: &&types::filter::Filter); // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:53: 1185:70
        _8 = deref_copy (*_7);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:53: 1185:70
        _3 = ((*_8).0: types::block_number::BlockTag); // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:53: 1185:70
        _9 = deref_copy ((*_1).1: &&types::filter::Filter); // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:72: 1185:87
        _10 = deref_copy (*_9);          // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:72: 1185:87
        _4 = ((*_10).1: types::block_number::BlockTag); // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:72: 1185:87
        _0 = chain::Chain::blocks_with_bloom_by_id(_6, _2, move _3, move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1185:17: 1185:88
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1185:22: 1185:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chain::Chain, &'b cita_types::Bloom, types::block_number::BlockTag, types::block_number::BlockTag) -> std::option::Option<Vec<u64>> {chain::Chain::blocks_with_bloom_by_id}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1186:14: 1186:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_logs::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1187:23: 1187:26], _2: Vec<u64>) -> Vec<u64> {
    debug m => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1187:24: 1187:25
    let mut _0: std::vec::Vec<u64>;      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1187:27: 1187:27

    bb0: {
        _0 = move _2;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1187:27: 1187:28
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1187:28: 1187:28
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_logs::{closure#2}(_1: &[closure@cita-chain/core/src/libchain/chain.rs:1193:27: 1193:34], _2: &types::log::Log) -> bool {
    debug entry => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:28: 1193:33
    debug filter => (*((*_1).0: &&types::filter::Filter)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1180:28: 1180:34
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:35: 1193:35
    let mut _3: &&types::filter::Filter; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56
    let mut _4: &types::filter::Filter;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1193:27: 1193:56

    bb0: {
        _3 = deref_copy ((*_1).0: &&types::filter::Filter); // scope 0 at cita-chain/core/src/libchain/chain.rs:1193:35: 1193:56
        _4 = deref_copy (*_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1193:35: 1193:56
        _0 = types::filter::Filter::matches(_4, _2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1193:35: 1193:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1193:42: 1193:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a types::filter::Filter, &'b types::log::Log) -> bool {types::filter::Filter::matches}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1193:56: 1193:56
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes(_1: &chain::Chain, _2: u64, _3: &[H256], _4: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1198:9: 1198:14
    debug block_height => _2;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1199:9: 1199:21
    debug tx_hashes => _3;               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1200:9: 1200:18
    debug ctx_pub => _4;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1201:9: 1201:16
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1202:7: 1202:7
    let _5: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1203:13: 1203:26
    let mut _7: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1204:27: 1204:46
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
    let mut _9: &std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
    let _10: &std::option::Option<u32>;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
    let mut _11: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
    let mut _13: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _14: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _15: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _16: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _17: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _18: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _19: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _20: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _21: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _22: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
    let _24: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1210:9: 1210:49
    let mut _25: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1210:9: 1210:49
    let _26: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1212:13: 1212:86
    let mut _27: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1212:13: 1212:86
    let mut _28: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1212:45: 1212:85
    let mut _29: &std::sync::atomic::AtomicBool; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1212:45: 1212:85
    let mut _30: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1212:67: 1212:84
    let _31: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1213:13: 1214:93
    let mut _32: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1213:13: 1214:93
    let mut _33: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:92
    let mut _34: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:85
    let mut _35: &std::sync::atomic::AtomicUsize; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:85
    let mut _36: std::sync::atomic::Ordering; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1214:68: 1214:84
    let _37: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:13: 1215:93
    let mut _38: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:13: 1215:93
    let mut _39: libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
    let mut _40: &libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
    let _41: &libproto::AccountGasLimit; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
    let mut _42: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
    let _43: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:84
    let mut _44: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:84
    let _45: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1216:13: 1221:14
    let mut _46: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1216:13: 1221:14
    let mut _47: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1220:46
    let mut _48: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
    let mut _49: std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
    let mut _50: &std::option::Option<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
    let mut _51: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
    let _52: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1218:28
    let mut _53: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1217:17: 1218:28
    let _54: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:13: 1222:62
    let mut _55: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:13: 1222:62
    let mut _56: u32;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
    let mut _57: std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
    let mut _58: &std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
    let mut _59: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
    let mut _61: std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
    let mut _63: std::option::Option<&cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
    let mut _64: &mut std::slice::Iter<'_, cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
    let mut _65: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1226:9: 1228:10
    let _67: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1227:13: 1227:59
    let mut _68: &mut std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1227:13: 1227:59
    let mut _69: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
    let mut _70: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
    let _71: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
    let _72: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1229:9: 1229:62
    let mut _73: &mut libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1229:9: 1229:62
    let mut _74: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1229:39: 1229:61
    let mut _75: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1229:39: 1229:54
    let mut _77: libproto::BlockTxHashes; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1230:28: 1230:43
    let _78: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1232:9: 1237:22
    let mut _79: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1232:9: 1236:15
    let mut _80: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1232:9: 1236:15
    let mut _81: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1233:19: 1236:14
    let mut _82: std::string::String;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1234:17: 1234:60
    let mut _83: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _84: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _85: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _86: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:40
    let mut _87: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:31
    let mut _88: libproto::Message;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:20
    let mut _90: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _91: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _92: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _93: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _94: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _95: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _96: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _97: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _98: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _99: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
    let mut _100: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _101: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _102: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _103: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:61: 1238:73
    let _104: &u64;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:61: 1238:73
    let mut _111: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    let mut _112: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    let mut _113: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    scope 1 {
        debug ctx_pub_clone => _5;       // in scope 1 at cita-chain/core/src/libchain/chain.rs:1203:13: 1203:26
        let _6: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:1204:13: 1204:24
        scope 2 {
            debug version_opt => _6;     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1204:13: 1204:24
            let _12: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _23: libproto::BlockTxHashes; // in scope 2 at cita-chain/core/src/libchain/chain.rs:1209:13: 1209:32
            scope 3 {
                debug lvl => _12;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _108: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _109: &[&str; 1]; // in scope 3 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
                let mut _110: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug block_tx_hashes => _23; // in scope 4 at cita-chain/core/src/libchain/chain.rs:1209:13: 1209:32
                let mut _60: std::vec::Vec<std::vec::Vec<u8>>; // in scope 4 at cita-chain/core/src/libchain/chain.rs:1225:13: 1225:32
                scope 5 {
                    debug tx_hashes_in_u8 => _60; // in scope 5 at cita-chain/core/src/libchain/chain.rs:1225:13: 1225:32
                    let mut _62: std::slice::Iter<'_, cita_types::H256>; // in scope 5 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                    let _76: libproto::Message; // in scope 5 at cita-chain/core/src/libchain/chain.rs:1230:13: 1230:16
                    scope 6 {
                        debug iter => _62; // in scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                        let _66: &cita_types::H256; // in scope 6 at cita-chain/core/src/libchain/chain.rs:1226:13: 1226:28
                        scope 7 {
                            debug tx_hash_in_h256 => _66; // in scope 7 at cita-chain/core/src/libchain/chain.rs:1226:13: 1226:28
                        }
                    }
                    scope 8 {
                        debug msg => _76; // in scope 8 at cita-chain/core/src/libchain/chain.rs:1230:13: 1230:16
                        let _89: log::Level; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        scope 9 {
                            debug lvl => _89; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let mut _105: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                            let mut _106: &[&str; 1]; // in scope 9 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
                            let mut _107: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _111 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1203:13: 1203:26
        _112 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1203:13: 1203:26
        _113 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1203:13: 1203:26
        _5 = <pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone(_4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1203:29: 1203:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1203:37: 1203:42
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> {<pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).17: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1204:27: 1204:46
        _6 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::read(move _7) -> [return: bb2, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1204:27: 1204:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1204:40: 1204:44
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::read}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_6;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
        _10 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
        _8 = std::option::Option::<u32>::is_none(move _9) -> [return: bb4, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1205:24: 1205:31
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u32>) -> bool {std::option::Option::<u32>::is_none}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _8) -> [0: bb15, otherwise: bb5]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1205:12: 1205:33
    }

    bb5: {
        _12 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _15 = &_12;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _110 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[5])) }
        _14 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _15, _110) -> [return: bb9, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _17 = &_12;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _19 = log::max_level() -> [return: bb10, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _13) -> [0: bb14, otherwise: bb12]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        switchInt(move _14) -> [0: bb6, otherwise: bb7]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _18 = &_19;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _16 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _17, move _18) -> [return: bb11, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = move _16;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb8;                     // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        _109 = const _;                  // scope 3 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[4])) }
        _22 = _109 as &[&str] (Pointer(Unsize)); // scope 3 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb13, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb13: {
        _108 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[3])) }
        _20 = log::__private_api_log(move _21, _12, _108) -> [return: bb78, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_6) -> [return: bb64, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb15: {
        _23 = libproto::BlockTxHashes::new() -> [return: bb16, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1209:35: 1209:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1209:35: 1209:53
                                         // + literal: Const { ty: fn() -> libproto::BlockTxHashes {libproto::BlockTxHashes::new}, val: Value(<ZST>) }
    }

    bb16: {
        _113 = const true;               // scope 4 at cita-chain/core/src/libchain/chain.rs:1210:9: 1210:49
        _25 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1210:9: 1210:49
        _24 = libproto::BlockTxHashes::set_height(move _25, _2) -> [return: bb17, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1210:9: 1210:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1210:25: 1210:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, u64) {libproto::BlockTxHashes::set_height}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1212:13: 1212:86
        _29 = &((*_1).12: std::sync::atomic::AtomicBool); // scope 4 at cita-chain/core/src/libchain/chain.rs:1212:45: 1212:85
        _30 = const Relaxed;             // scope 4 at cita-chain/core/src/libchain/chain.rs:1212:67: 1212:84
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _28 = AtomicBool::load(move _29, move _30) -> [return: bb18, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1212:45: 1212:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1212:62: 1212:66
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, std::sync::atomic::Ordering) -> bool {AtomicBool::load}, val: Value(<ZST>) }
    }

    bb18: {
        _26 = libproto::BlockTxHashes::set_check_quota(move _27, move _28) -> [return: bb19, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1212:13: 1212:86
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1212:29: 1212:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, bool) {libproto::BlockTxHashes::set_check_quota}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1213:13: 1214:93
        _35 = &((*_1).10: std::sync::atomic::AtomicUsize); // scope 4 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:85
        _36 = const SeqCst;              // scope 4 at cita-chain/core/src/libchain/chain.rs:1214:68: 1214:84
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _34 = AtomicUsize::load(move _35, move _36) -> [return: bb20, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1214:63: 1214:67
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb20: {
        _33 = move _34 as u64 (IntToInt); // scope 4 at cita-chain/core/src/libchain/chain.rs:1214:40: 1214:92
        _31 = libproto::BlockTxHashes::set_block_quota_limit(move _32, move _33) -> [return: bb21, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1213:13: 1214:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1214:18: 1214:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, u64) {libproto::BlockTxHashes::set_block_quota_limit}, val: Value(<ZST>) }
    }

    bb21: {
        _38 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:13: 1215:93
        _44 = &((*_1).11: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, libproto::AccountGasLimit>); // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:84
        _43 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::read(move _44) -> [return: bb22, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:84
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1215:78: 1215:82
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>::read}, val: Value(<ZST>) }
    }

    bb22: {
        _42 = &_43;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
        _41 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as Deref>::deref(move _42) -> [return: bb23, unwind: bb68]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, AccountGasLimit> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _40 = _41;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
        _39 = <AccountGasLimit as Clone>::clone(move _40) -> [return: bb24, unwind: bb68]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:53: 1215:92
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1215:85: 1215:90
                                         // + literal: Const { ty: for<'a> fn(&'a AccountGasLimit) -> AccountGasLimit {<AccountGasLimit as Clone>::clone}, val: Value(<ZST>) }
    }

    bb24: {
        _37 = libproto::BlockTxHashes::set_account_quota_limit(move _38, move _39) -> [return: bb25, unwind: bb68]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:13: 1215:93
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1215:29: 1215:52
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, AccountGasLimit) {libproto::BlockTxHashes::set_account_quota_limit}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_43) -> [return: bb26, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:93: 1215:94
    }

    bb26: {
        _46 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1216:13: 1221:14
        _53 = &((*_1).16: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<cita_types::H160>>); // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1218:28
        _52 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::read(move _53) -> [return: bb27, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1218:28
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1218:22: 1218:26
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>::read}, val: Value(<ZST>) }
    }

    bb27: {
        _51 = &_52;                      // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
        _50 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as Deref>::deref(move _51) -> [return: bb28, unwind: bb67]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<H160>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _49 = (*_50);                    // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
        _48 = std::option::Option::<H160>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33]>(move _49, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33]) -> [return: bb29, unwind: bb67]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1219:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1219:22: 1219:25
                                         // + literal: Const { ty: fn(std::option::Option<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33]) -> std::option::Option<Vec<u8>> {std::option::Option::<H160>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33], val: Value(<ZST>) }
    }

    bb29: {
        _47 = std::option::Option::<Vec<u8>>::unwrap_or_else::<fn() -> Vec<u8> {Vec::<u8>::new}>(move _48, Vec::<u8>::new) -> [return: bb30, unwind: bb67]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1217:17: 1220:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1220:22: 1220:36
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, fn() -> Vec<u8> {Vec::<u8>::new}) -> Vec<u8> {std::option::Option::<Vec<u8>>::unwrap_or_else::<fn() -> Vec<u8> {Vec::<u8>::new}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1220:37: 1220:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb30: {
        _45 = libproto::BlockTxHashes::set_admin_address(move _46, move _47) -> [return: bb31, unwind: bb67]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1216:13: 1221:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1216:29: 1216:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, Vec<u8>) {libproto::BlockTxHashes::set_admin_address}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_52) -> [return: bb32, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1221:14: 1221:15
    }

    bb32: {
        _55 = &mut _23;                  // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:13: 1222:62
        _59 = &_6;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
        _58 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref(move _59) -> [return: bb33, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        _57 = (*_58);                    // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
        _56 = std::option::Option::<u32>::unwrap(move _57) -> [return: bb34, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:41: 1222:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1222:53: 1222:59
                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> u32 {std::option::Option::<u32>::unwrap}, val: Value(<ZST>) }
    }

    bb34: {
        _54 = libproto::BlockTxHashes::set_version(move _55, move _56) -> [return: bb35, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1222:13: 1222:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1222:29: 1222:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, u32) {libproto::BlockTxHashes::set_version}, val: Value(<ZST>) }
    }

    bb35: {
        _60 = Vec::<Vec<u8>>::new() -> [return: bb36, unwind: bb77]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1225:35: 1225:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1225:35: 1225:43
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<Vec<u8>> {Vec::<Vec<u8>>::new}, val: Value(<ZST>) }
    }

    bb36: {
        _112 = const true;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1226:9: 1228:10
        _61 = <&[H256] as IntoIterator>::into_iter(_3) -> [return: bb37, unwind: bb75]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                                         // + literal: Const { ty: fn(&[H256]) -> <&[H256] as IntoIterator>::IntoIter {<&[H256] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb37: {
        _62 = move _61;                  // scope 5 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
        goto -> bb38;                    // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:9: 1228:10
    }

    bb38: {
        _64 = &mut _62;                  // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
        _63 = <std::slice::Iter<'_, H256> as Iterator>::next(_64) -> [return: bb39, unwind: bb75]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, H256>) -> std::option::Option<<std::slice::Iter<'_, H256> as Iterator>::Item> {<std::slice::Iter<'_, H256> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb39: {
        _65 = discriminant(_63);         // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
        switchInt(move _65) -> [0: bb42, 1: bb40, otherwise: bb41]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
    }

    bb40: {
        _66 = ((_63 as Some).0: &cita_types::H256); // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:13: 1226:28
        _68 = &mut _60;                  // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:13: 1227:59
        _71 = <H256 as Deref>::deref(_66) -> [return: bb43, unwind: bb75]; // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb41: {
        unreachable;                     // scope 6 at cita-chain/core/src/libchain/chain.rs:1226:32: 1226:41
    }

    bb42: {
        _73 = &mut _23;                  // scope 5 at cita-chain/core/src/libchain/chain.rs:1229:9: 1229:62
        _112 = const false;              // scope 5 at cita-chain/core/src/libchain/chain.rs:1229:39: 1229:54
        _75 = move _60;                  // scope 5 at cita-chain/core/src/libchain/chain.rs:1229:39: 1229:54
        _74 = <Vec<Vec<u8>> as Into<protobuf::repeated::RepeatedField<Vec<u8>>>>::into(move _75) -> [return: bb45, unwind: bb75]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1229:39: 1229:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1229:55: 1229:59
                                         // + literal: Const { ty: fn(Vec<Vec<u8>>) -> protobuf::repeated::RepeatedField<Vec<u8>> {<Vec<Vec<u8>> as Into<protobuf::repeated::RepeatedField<Vec<u8>>>>::into}, val: Value(<ZST>) }
    }

    bb43: {
        _70 = _71;                       // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
        _69 = slice::<impl [u8]>::to_vec(move _70) -> [return: bb44, unwind: bb75]; // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:34: 1227:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1227:50: 1227:56
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb44: {
        _67 = Vec::<Vec<u8>>::push(move _68, move _69) -> [return: bb79, unwind: bb75]; // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:13: 1227:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1227:29: 1227:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Vec<u8>>, Vec<u8>) {Vec::<Vec<u8>>::push}, val: Value(<ZST>) }
    }

    bb45: {
        _72 = libproto::BlockTxHashes::set_tx_hashes(move _73, move _74) -> [return: bb46, unwind: bb75]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1229:9: 1229:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1229:25: 1229:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::BlockTxHashes, protobuf::repeated::RepeatedField<Vec<u8>>) {libproto::BlockTxHashes::set_tx_hashes}, val: Value(<ZST>) }
    }

    bb46: {
        _113 = const false;              // scope 5 at cita-chain/core/src/libchain/chain.rs:1230:28: 1230:43
        _77 = move _23;                  // scope 5 at cita-chain/core/src/libchain/chain.rs:1230:28: 1230:43
        _76 = <libproto::BlockTxHashes as Into<Message>>::into(move _77) -> [return: bb47, unwind: bb75]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1230:28: 1230:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1230:44: 1230:48
                                         // + literal: Const { ty: fn(libproto::BlockTxHashes) -> Message {<libproto::BlockTxHashes as Into<Message>>::into}, val: Value(<ZST>) }
    }

    bb47: {
        _111 = const true;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1230:49: 1230:50
        _80 = &_5;                       // scope 8 at cita-chain/core/src/libchain/chain.rs:1232:9: 1236:15
        _84 = const libproto::router::SubModules::Chain; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _85 = const libproto::router::MsgType::BlockTxHashes; // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x0c)) }
        _83 = RoutingKey(move _84, move _85); // scope 8 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _82 = <RoutingKey as Into<std::string::String>>::into(move _83) -> [return: bb48, unwind: bb73]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1234:17: 1234:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1234:54: 1234:58
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb48: {
        _111 = const false;              // scope 8 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:20
        _88 = move _76;                  // scope 8 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:20
        _87 = <Message as libproto::TryInto<Vec<u8>>>::try_into(move _88) -> [return: bb49, unwind: bb66]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1235:21: 1235:29
                                         // + literal: Const { ty: fn(Message) -> Result<Vec<u8>, <Message as libproto::TryInto<Vec<u8>>>::Error> {<Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb49: {
        _86 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _87) -> [return: bb50, unwind: bb66]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1235:17: 1235:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1235:32: 1235:38
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb50: {
        _81 = (move _82, move _86);      // scope 8 at cita-chain/core/src/libchain/chain.rs:1233:19: 1236:14
        _79 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _80, move _81) -> [return: bb51, unwind: bb73]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1232:9: 1236:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1233:14: 1233:18
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb51: {
        _78 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _79) -> [return: bb52, unwind: bb73]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1232:9: 1237:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1237:14: 1237:20
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb52: {
        _89 = log::Level::Trace;         // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _92 = &_89;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _107 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[2])) }
        _91 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _92, _107) -> [return: bb56, unwind: bb73]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb53: {
        _90 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb54: {
        _94 = &_89;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _96 = log::max_level() -> [return: bb57, unwind: bb73]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb55: {
        switchInt(move _90) -> [0: bb62, otherwise: bb59]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb56: {
        switchInt(move _91) -> [0: bb53, otherwise: bb54]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        _95 = &_96;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _93 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _94, move _95) -> [return: bb58, unwind: bb73]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb58: {
        _90 = move _93;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb55;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb59: {
        _106 = const _;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[1])) }
        _99 = _106 as &[&str] (Pointer(Unsize)); // scope 9 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
        _104 = &_2;                      // scope 9 at cita-chain/core/src/libchain/chain.rs:1238:61: 1238:73
        _103 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_104) -> [return: bb60, unwind: bb73]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1238:61: 1238:73
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1238:61: 1238:73
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb60: {
        _102 = [move _103];              // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _101 = &_102;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _100 = _101 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _98 = Arguments::<'_>::new_v1(move _99, move _100) -> [return: bb61, unwind: bb73]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb61: {
        _105 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::delivery_block_tx_hashes, [], Some(promoted[0])) }
        _97 = log::__private_api_log(move _98, _89, _105) -> [return: bb80, unwind: bb73]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb62: {
        _111 = const false;              // scope 5 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
        _112 = const false;              // scope 4 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
        _113 = const false;              // scope 2 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
        drop(_6) -> [return: bb63, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb63: {
        drop(_5) -> bb65;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb64: {
        drop(_5) -> bb65;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb65: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1239:6: 1239:6
    }

    bb66 (cleanup): {
        drop(_82) -> bb73;               // scope 8 at cita-chain/core/src/libchain/chain.rs:1236:13: 1236:14
    }

    bb67 (cleanup): {
        drop(_52) -> bb77;               // scope 4 at cita-chain/core/src/libchain/chain.rs:1221:14: 1221:15
    }

    bb68 (cleanup): {
        drop(_43) -> bb77;               // scope 4 at cita-chain/core/src/libchain/chain.rs:1215:93: 1215:94
    }

    bb69 (cleanup): {
        drop(_6) -> bb70;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb70 (cleanup): {
        drop(_5) -> bb71;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb71 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1197:5: 1239:6
    }

    bb72 (cleanup): {
        drop(_76) -> bb75;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb73 (cleanup): {
        switchInt(_111) -> [0: bb75, otherwise: bb72]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb74 (cleanup): {
        drop(_60) -> bb77;               // scope 4 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb75 (cleanup): {
        switchInt(_112) -> [0: bb77, otherwise: bb74]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb76 (cleanup): {
        drop(_23) -> bb69;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb77 (cleanup): {
        switchInt(_113) -> [0: bb69, otherwise: bb76]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1239:5: 1239:6
    }

    bb78: {
        goto -> bb14;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb79: {
        goto -> bb38;                    // scope 7 at cita-chain/core/src/libchain/chain.rs:1227:13: 1227:59
    }

    bb80: {
        goto -> bb62;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:9: 1238:74
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:9: 1238:74

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1238:9: 1238:74
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1238:9: 1238:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1238:9: 1238:74
        _1 = (move _2, move _4, move _6, const 1238_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59

    bb0: {
        _1 = [const "delivery block's tx hashes for height: "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1238:16: 1238:59
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1206:13: 1206:71
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1206:13: 1206:71

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1206:13: 1206:71
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1206:13: 1206:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1206:13: 1206:71
        _1 = (move _2, move _4, move _6, const 1206_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70

    bb0: {
        _1 = [const "delivery_block_tx_hashes : version is not ready!"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1206:20: 1206:70
    }
}

promoted[5] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_block_tx_hashes::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1219:26: 1219:33], _2: H160) -> Vec<u8> {
    debug admin => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1219:27: 1219:32
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:34
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
    let mut _5: &cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
        _4 = <H160 as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
        _0 = slice::<impl [u8]>::to_vec(move _3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1219:34: 1219:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1219:40: 1219:46
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1219:48: 1219:48
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status(_1: &chain::Chain, _2: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1243:41: 1243:46
    debug ctx_pub => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1243:48: 1243:55
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1243:85: 1243:85
    let _3: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
    let _4: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1244:23: 1244:50
    let mut _5: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
    let _6: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
    let mut _7: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
    let mut _9: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1245:27: 1245:46
    let mut _10: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
    let mut _11: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
    let mut _12: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
    let _13: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
    let mut _14: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
    let _15: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:29
    let mut _16: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:29
    let mut _17: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
    let mut _18: &std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
    let _19: &std::option::Option<u32>;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
    let mut _20: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _23: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _24: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _25: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _26: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _27: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _29: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _30: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
    let mut _33: std::option::Option<cita_types::H256>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1251:28: 1251:41
    let mut _35: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
    let _36: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
    let mut _38: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
    let _39: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
    let mut _40: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
    let _41: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:52
    let mut _42: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:52
    let mut _44: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
    let _45: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
    let mut _46: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
    let _47: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:62
    let mut _48: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:62
    let mut _50: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1255:30: 1255:56
    let _52: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1258:9: 1258:54
    let mut _53: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1258:9: 1258:54
    let mut _54: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
    let mut _55: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
    let mut _56: &[u8; 32];              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
    let _57: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1259:9: 1259:47
    let mut _58: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1259:9: 1259:47
    let mut _59: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1259:32: 1259:46
    let _60: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:9: 1260:91
    let mut _61: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:9: 1260:91
    let mut _62: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:90
    let mut _63: std::iter::Map<std::vec::IntoIter<cita_types::H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:80
    let mut _64: std::vec::IntoIter<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:48
    let mut _65: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:36
    let _66: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:9: 1261:89
    let mut _67: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:9: 1261:89
    let mut _68: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:88
    let mut _69: std::iter::Map<std::vec::IntoIter<cita_types::H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:78
    let mut _70: std::vec::IntoIter<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:58
    let mut _71: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:46
    let _72: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1262:9: 1262:50
    let mut _73: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1262:9: 1262:50
    let mut _74: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1262:34: 1262:49
    let mut _75: &u64;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1262:34: 1262:49
    let mut _76: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1262:35: 1262:49
    let _77: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:9: 1263:54
    let mut _78: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:9: 1263:54
    let mut _79: u32;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
    let mut _80: std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
    let mut _81: &std::option::Option<u32>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
    let mut _82: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
    let mut _84: libproto::RichStatus;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1265:28: 1265:39
    let _85: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1266:9: 1271:22
    let mut _86: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1266:9: 1270:15
    let mut _87: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1267:19: 1270:14
    let mut _88: std::string::String;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1268:17: 1268:57
    let mut _89: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _90: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _91: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _92: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:40
    let mut _93: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:31
    let mut _94: libproto::Message;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:20
    let mut _98: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    let mut _99: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    let mut _100: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    let mut _101: bool;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    scope 1 {
        debug header => _3;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
        let _8: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:1245:13: 1245:24
        scope 2 {
            debug version_opt => _8;     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1245:13: 1245:24
            let _21: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _32: cita_types::H256;   // in scope 2 at cita-chain/core/src/libchain/chain.rs:1251:13: 1251:25
            scope 3 {
                debug lvl => _21;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _95: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _96: &[&str; 1]; // in scope 3 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
                let mut _97: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug current_hash => _32; // in scope 4 at cita-chain/core/src/libchain/chain.rs:1251:13: 1251:25
                let _34: u64;            // in scope 4 at cita-chain/core/src/libchain/chain.rs:1252:13: 1252:27
                scope 5 {
                    debug current_height => _34; // in scope 5 at cita-chain/core/src/libchain/chain.rs:1252:13: 1252:27
                    let _37: std::vec::Vec<cita_types::H160>; // in scope 5 at cita-chain/core/src/libchain/chain.rs:1253:13: 1253:18
                    scope 6 {
                        debug nodes => _37; // in scope 6 at cita-chain/core/src/libchain/chain.rs:1253:13: 1253:18
                        let _43: std::vec::Vec<cita_types::H160>; // in scope 6 at cita-chain/core/src/libchain/chain.rs:1254:13: 1254:23
                        scope 7 {
                            debug validators => _43; // in scope 7 at cita-chain/core/src/libchain/chain.rs:1254:13: 1254:23
                            let _49: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>; // in scope 7 at cita-chain/core/src/libchain/chain.rs:1255:13: 1255:27
                            scope 8 {
                                debug block_interval => _49; // in scope 8 at cita-chain/core/src/libchain/chain.rs:1255:13: 1255:27
                                let mut _51: libproto::RichStatus; // in scope 8 at cita-chain/core/src/libchain/chain.rs:1257:13: 1257:28
                                scope 9 {
                                    debug rich_status => _51; // in scope 9 at cita-chain/core/src/libchain/chain.rs:1257:13: 1257:28
                                    let _83: libproto::Message; // in scope 9 at cita-chain/core/src/libchain/chain.rs:1265:13: 1265:16
                                    scope 10 {
                                        debug msg => _83; // in scope 10 at cita-chain/core/src/libchain/chain.rs:1265:13: 1265:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _100 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
        _99 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
        _98 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
        _101 = const false;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:13: 1244:19
        _7 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
        _6 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _7) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1244:44: 1244:48
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:24: 1244:50
        _4 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _5) -> [return: bb2, unwind: bb70]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:23: 1244:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1244:23: 1244:50
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1244:22: 1244:50
        _9 = &((*_1).17: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1245:27: 1245:46
        _8 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::read(move _9) -> [return: bb3, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1245:27: 1245:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1245:40: 1245:44
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>::read}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &((*_1).7: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>); // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:29
        _15 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read(move _16) -> [return: bb7, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1247:23: 1247:27
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
        goto -> bb6;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
    }

    bb5: {
        _20 = &_8;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
        _19 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref(move _20) -> [return: bb11, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _10) -> [0: bb23, otherwise: bb13]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
    }

    bb7: {
        _14 = &_15;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
        _13 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref(move _14) -> [return: bb8, unwind: bb68]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = _13;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
        _11 = Vec::<H160>::is_empty(move _12) -> [return: bb9, unwind: bb68]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1247:30: 1247:38
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> bool {Vec::<H160>::is_empty}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:39: 1247:40
    }

    bb10: {
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
    }

    bb11: {
        _18 = _19;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
        _17 = std::option::Option::<u32>::is_none(move _18) -> [return: bb12, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:44: 1247:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1247:56: 1247:63
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u32>) -> bool {std::option::Option::<u32>::is_none}, val: Value(<ZST>) }
    }

    bb12: {
        _10 = move _17;                  // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
        goto -> bb6;                     // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:12: 1247:65
    }

    bb13: {
        _21 = log::Level::Trace;         // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _24 = &_21;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _97 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::delivery_current_rich_status, [], Some(promoted[2])) }
        _23 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _24, _97) -> [return: bb17, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb16;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        _26 = &_21;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _28 = log::max_level() -> [return: bb18, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb16: {
        switchInt(move _22) -> [0: bb22, otherwise: bb20]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb17: {
        switchInt(move _23) -> [0: bb14, otherwise: bb15]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb18: {
        _27 = &_28;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _25 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _26, move _27) -> [return: bb19, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb19: {
        _22 = move _25;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb16;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _96 = const _;                   // scope 3 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(chain::Chain::delivery_current_rich_status, [], Some(promoted[1])) }
        _31 = _96 as &[&str] (Pointer(Unsize)); // scope 3 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
        _30 = Arguments::<'_>::new_const(move _31) -> [return: bb21, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb21: {
        _95 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::delivery_current_rich_status, [], Some(promoted[0])) }
        _29 = log::__private_api_log(move _30, _21, _95) -> [return: bb80, unwind: bb69]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_8) -> [return: bb62, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb23: {
        _33 = Header::hash(_3) -> [return: bb24, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1251:28: 1251:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1251:35: 1251:39
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> std::option::Option<H256> {Header::hash}, val: Value(<ZST>) }
    }

    bb24: {
        _32 = std::option::Option::<H256>::unwrap(move _33) -> [return: bb25, unwind: bb69]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1251:28: 1251:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1251:42: 1251:48
                                         // + literal: Const { ty: fn(std::option::Option<H256>) -> H256 {std::option::Option::<H256>::unwrap}, val: Value(<ZST>) }
    }

    bb25: {
        _36 = <Header as Deref>::deref(_3) -> [return: bb26, unwind: bb69]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        _35 = _36;                       // scope 4 at cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
        _34 = OpenHeader::number(move _35) -> [return: bb27, unwind: bb69]; // scope 4 at cita-chain/core/src/libchain/chain.rs:1252:30: 1252:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1252:37: 1252:43
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb27: {
        _42 = &((*_1).7: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>); // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:52
        _41 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read(move _42) -> [return: bb28, unwind: bb69]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1253:46: 1253:50
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read}, val: Value(<ZST>) }
    }

    bb28: {
        _40 = &_41;                      // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
        _39 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref(move _40) -> [return: bb29, unwind: bb67]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _38 = _39;                       // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
        _37 = <Vec<H160> as Clone>::clone(move _38) -> [return: bb30, unwind: bb67]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:35: 1253:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1253:53: 1253:58
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> Vec<H160> {<Vec<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb30: {
        _101 = const true;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:59: 1253:60
        drop(_41) -> [return: bb31, unwind: bb79]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:60: 1253:61
    }

    bb31: {
        _48 = &((*_1).8: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::vec::Vec<cita_types::H160>>); // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:62
        _47 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read(move _48) -> [return: bb32, unwind: bb79]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1254:56: 1254:60
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Vec<H160>>::read}, val: Value(<ZST>) }
    }

    bb32: {
        _46 = &_47;                      // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
        _45 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref(move _46) -> [return: bb33, unwind: bb66]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Vec<H160>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb33: {
        _44 = _45;                       // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
        _43 = <Vec<H160> as Clone>::clone(move _44) -> [return: bb34, unwind: bb66]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:40: 1254:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1254:63: 1254:68
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> Vec<H160> {<Vec<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb34: {
        _100 = const true;               // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:69: 1254:70
        drop(_47) -> [return: bb35, unwind: bb77]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:70: 1254:71
    }

    bb35: {
        _50 = &((*_1).9: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>); // scope 7 at cita-chain/core/src/libchain/chain.rs:1255:30: 1255:56
        _49 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::read(move _50) -> [return: bb36, unwind: bb77]; // scope 7 at cita-chain/core/src/libchain/chain.rs:1255:30: 1255:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1255:50: 1255:54
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, u64>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, u64> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, u64>::read}, val: Value(<ZST>) }
    }

    bb36: {
        _51 = libproto::RichStatus::new() -> [return: bb37, unwind: bb65]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1257:31: 1257:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1257:31: 1257:51
                                         // + literal: Const { ty: fn() -> libproto::RichStatus {libproto::RichStatus::new}, val: Value(<ZST>) }
    }

    bb37: {
        _99 = const true;                // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:9: 1258:54
        _53 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:9: 1258:54
        _56 = &(_32.0: [u8; 32]);        // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
        _55 = move _56 as &[u8] (Pointer(Unsize)); // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
        _54 = slice::<impl [u8]>::to_vec(move _55) -> [return: bb38, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:30: 1258:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1258:45: 1258:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb38: {
        _52 = libproto::RichStatus::set_hash(move _53, move _54) -> [return: bb39, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1258:9: 1258:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1258:21: 1258:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, Vec<u8>) {libproto::RichStatus::set_hash}, val: Value(<ZST>) }
    }

    bb39: {
        _58 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1259:9: 1259:47
        _59 = _34;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:1259:32: 1259:46
        _57 = libproto::RichStatus::set_height(move _58, move _59) -> [return: bb40, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1259:9: 1259:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1259:21: 1259:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, u64) {libproto::RichStatus::set_height}, val: Value(<ZST>) }
    }

    bb40: {
        _61 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:9: 1260:91
        _101 = const false;              // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:36
        _65 = move _37;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:36
        _64 = <Vec<H160> as IntoIterator>::into_iter(move _65) -> [return: bb41, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:37: 1260:46
                                         // + literal: Const { ty: fn(Vec<H160>) -> <Vec<H160> as IntoIterator>::IntoIter {<Vec<H160> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb41: {
        _63 = <std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]>(move _64, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]) -> [return: bb42, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:80
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:49: 1260:52
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]) -> std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]> {<std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62], val: Value(<ZST>) }
    }

    bb42: {
        _62 = <std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>(move _63) -> [return: bb43, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:31: 1260:90
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:81: 1260:88
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]>) -> protobuf::repeated::RepeatedField<Vec<u8>> {<std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>}, val: Value(<ZST>) }
    }

    bb43: {
        _60 = libproto::RichStatus::set_nodes(move _61, move _62) -> [return: bb44, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1260:9: 1260:91
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:21: 1260:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, protobuf::repeated::RepeatedField<Vec<u8>>) {libproto::RichStatus::set_nodes}, val: Value(<ZST>) }
    }

    bb44: {
        _67 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:9: 1261:89
        _100 = const false;              // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:46
        _71 = move _43;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:46
        _70 = <Vec<H160> as IntoIterator>::into_iter(move _71) -> [return: bb45, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:58
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:47: 1261:56
                                         // + literal: Const { ty: fn(Vec<H160>) -> <Vec<H160> as IntoIterator>::IntoIter {<Vec<H160> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb45: {
        _69 = <std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]>(move _70, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]) -> [return: bb46, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:78
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:59: 1261:62
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]) -> std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]> {<std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66], val: Value(<ZST>) }
    }

    bb46: {
        _68 = <std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>(move _69) -> [return: bb47, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:36: 1261:88
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:79: 1261:86
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]>) -> protobuf::repeated::RepeatedField<Vec<u8>> {<std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>}, val: Value(<ZST>) }
    }

    bb47: {
        _66 = libproto::RichStatus::set_validators(move _67, move _68) -> [return: bb48, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1261:9: 1261:89
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:21: 1261:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, protobuf::repeated::RepeatedField<Vec<u8>>) {libproto::RichStatus::set_validators}, val: Value(<ZST>) }
    }

    bb48: {
        _73 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1262:9: 1262:50
        _76 = &_49;                      // scope 9 at cita-chain/core/src/libchain/chain.rs:1262:35: 1262:49
        _75 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as Deref>::deref(move _76) -> [return: bb49, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1262:34: 1262:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1262:34: 1262:49
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, u64> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb49: {
        _74 = (*_75);                    // scope 9 at cita-chain/core/src/libchain/chain.rs:1262:34: 1262:49
        _72 = libproto::RichStatus::set_interval(move _73, move _74) -> [return: bb50, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1262:9: 1262:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1262:21: 1262:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, u64) {libproto::RichStatus::set_interval}, val: Value(<ZST>) }
    }

    bb50: {
        _78 = &mut _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:9: 1263:54
        _82 = &_8;                       // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
        _81 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref(move _82) -> [return: bb51, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::option::Option<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb51: {
        _80 = (*_81);                    // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
        _79 = std::option::Option::<u32>::unwrap(move _80) -> [return: bb52, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:33: 1263:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1263:45: 1263:51
                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> u32 {std::option::Option::<u32>::unwrap}, val: Value(<ZST>) }
    }

    bb52: {
        _77 = libproto::RichStatus::set_version(move _78, move _79) -> [return: bb53, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1263:9: 1263:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1263:21: 1263:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, u32) {libproto::RichStatus::set_version}, val: Value(<ZST>) }
    }

    bb53: {
        _99 = const false;               // scope 9 at cita-chain/core/src/libchain/chain.rs:1265:28: 1265:39
        _84 = move _51;                  // scope 9 at cita-chain/core/src/libchain/chain.rs:1265:28: 1265:39
        _83 = <libproto::RichStatus as Into<Message>>::into(move _84) -> [return: bb54, unwind: bb75]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1265:28: 1265:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1265:40: 1265:44
                                         // + literal: Const { ty: fn(libproto::RichStatus) -> Message {<libproto::RichStatus as Into<Message>>::into}, val: Value(<ZST>) }
    }

    bb54: {
        _98 = const true;                // scope 9 at cita-chain/core/src/libchain/chain.rs:1265:45: 1265:46
        _90 = const libproto::router::SubModules::Chain; // scope 10 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _91 = const libproto::router::MsgType::RichStatus; // scope 10 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x06)) }
        _89 = RoutingKey(move _90, move _91); // scope 10 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _88 = <RoutingKey as Into<std::string::String>>::into(move _89) -> [return: bb55, unwind: bb73]; // scope 10 at cita-chain/core/src/libchain/chain.rs:1268:17: 1268:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1268:51: 1268:55
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb55: {
        _98 = const false;               // scope 10 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:20
        _94 = move _83;                  // scope 10 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:20
        _93 = <Message as libproto::TryInto<Vec<u8>>>::try_into(move _94) -> [return: bb56, unwind: bb64]; // scope 10 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:31
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1269:21: 1269:29
                                         // + literal: Const { ty: fn(Message) -> Result<Vec<u8>, <Message as libproto::TryInto<Vec<u8>>>::Error> {<Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb56: {
        _92 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _93) -> [return: bb57, unwind: bb64]; // scope 10 at cita-chain/core/src/libchain/chain.rs:1269:17: 1269:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1269:32: 1269:38
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb57: {
        _87 = (move _88, move _92);      // scope 10 at cita-chain/core/src/libchain/chain.rs:1267:19: 1270:14
        _86 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_2, move _87) -> [return: bb58, unwind: bb73]; // scope 10 at cita-chain/core/src/libchain/chain.rs:1266:9: 1270:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1267:14: 1267:18
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb58: {
        _85 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _86) -> [return: bb59, unwind: bb73]; // scope 10 at cita-chain/core/src/libchain/chain.rs:1266:9: 1271:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1271:14: 1271:20
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb59: {
        _98 = const false;               // scope 9 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
        _99 = const false;               // scope 8 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
        drop(_49) -> [return: bb60, unwind: bb77]; // scope 7 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb60: {
        _100 = const false;              // scope 6 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
        _101 = const false;              // scope 5 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
        drop(_8) -> [return: bb61, unwind: bb70]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb61: {
        drop(_6) -> bb63;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb62: {
        drop(_6) -> bb63;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb63: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1272:6: 1272:6
    }

    bb64 (cleanup): {
        drop(_88) -> bb73;               // scope 10 at cita-chain/core/src/libchain/chain.rs:1270:13: 1270:14
    }

    bb65 (cleanup): {
        drop(_49) -> bb77;               // scope 7 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb66 (cleanup): {
        drop(_47) -> bb79;               // scope 6 at cita-chain/core/src/libchain/chain.rs:1254:70: 1254:71
    }

    bb67 (cleanup): {
        drop(_41) -> bb69;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1253:60: 1253:61
    }

    bb68 (cleanup): {
        drop(_15) -> bb69;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1247:39: 1247:40
    }

    bb69 (cleanup): {
        drop(_8) -> bb70;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb70 (cleanup): {
        drop(_6) -> bb71;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb71 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1243:5: 1272:6
    }

    bb72 (cleanup): {
        drop(_83) -> bb75;               // scope 9 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb73 (cleanup): {
        switchInt(_98) -> [0: bb75, otherwise: bb72]; // scope 9 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb74 (cleanup): {
        drop(_51) -> bb65;               // scope 8 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb75 (cleanup): {
        switchInt(_99) -> [0: bb65, otherwise: bb74]; // scope 8 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb76 (cleanup): {
        drop(_43) -> bb79;               // scope 6 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb77 (cleanup): {
        switchInt(_100) -> [0: bb79, otherwise: bb76]; // scope 6 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb78 (cleanup): {
        drop(_37) -> bb69;               // scope 5 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb79 (cleanup): {
        switchInt(_101) -> [0: bb69, otherwise: bb78]; // scope 5 at cita-chain/core/src/libchain/chain.rs:1272:5: 1272:6
    }

    bb80: {
        goto -> bb22;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1248:13: 1248:88
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1248:13: 1248:88

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1248:13: 1248:88
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1248:13: 1248:88
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1248:13: 1248:88
        _1 = (move _2, move _4, move _6, const 1248_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
    let mut _1: [&str; 1];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87

    bb0: {
        _1 = [const "delivery_current_rich_status : node list or version is not ready!"]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1248:20: 1248:87
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1260:53: 1260:62], _2: H160) -> Vec<u8> {
    debug address => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:54: 1260:61
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:63
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
    let mut _5: &cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
        _4 = <H160 as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
        _0 = slice::<impl [u8]>::to_vec(move _3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1260:63: 1260:79
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1260:71: 1260:77
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1260:79: 1260:79
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::delivery_current_rich_status::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1261:63: 1261:66], _2: H160) -> Vec<u8> {
    debug a => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:64: 1261:65
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:67
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
    let mut _5: &cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
        _4 = <H160 as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
        _0 = slice::<impl [u8]>::to_vec(move _3) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1261:67: 1261:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1261:69: 1261:75
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1261:77: 1261:77
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_receipts(_1: &chain::Chain, _2: H256) -> std::option::Option<BlockReceipts> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1275:27: 1275:32
    debug hash => _2;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1275:34: 1275:38
    let mut _0: std::option::Option<types::block_receipts::BlockReceipts>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1275:49: 1275:70
    let _3: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1276:13: 1276:21
    let mut _4: &types::db_indexes::Hash2BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1276:24: 1276:60
    let _5: types::db_indexes::Hash2BlockReceipts; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1276:24: 1276:48
    let mut _6: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1277:9: 1279:29
    let mut _7: std::result::Result<std::option::Option<std::vec::Vec<u8>>, cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1278:18: 1278:52
    let mut _12: &[u8];                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
    let _13: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
    let _14: &std::vec::Vec<u8>;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
    let mut _15: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1279:24: 1279:28
    scope 1 {
        debug hash_key => _3;            // in scope 1 at cita-chain/core/src/libchain/chain.rs:1276:13: 1276:21
    }

    bb0: {
        _5 = Hash2BlockReceipts(_2);     // scope 0 at cita-chain/core/src/libchain/chain.rs:1276:24: 1276:48
        _4 = &_5;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1276:24: 1276:60
        _3 = <Hash2BlockReceipts as DBIndex>::get_index(move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1276:24: 1276:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1276:49: 1276:58
                                         // + literal: Const { ty: for<'a> fn(&'a Hash2BlockReceipts) -> Vec<u8> {<Hash2BlockReceipts as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
        _11 = const std::option::Option::<DataCategory>::Some(Extra); // scope 1 at cita-chain/core/src/libchain/chain.rs:1278:18: 1278:52
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _14 = &_3;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
        _13 = <Vec<u8> as Deref>::deref(_14) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1278:54: 1278:63
        _7 = <RocksDB as Database>::get(move _8, move _11, move _12) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1278:64
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1278:14: 1278:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RocksDB, std::option::Option<DataCategory>, &'b [u8]) -> Result<std::option::Option<Vec<u8>>, DatabaseError> {<RocksDB as Database>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = std::option::Option::<Vec<u8>>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:1279:24: 1279:28
        _6 = Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or(move _7, move _15) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1279:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1279:14: 1279:23
                                         // + literal: Const { ty: fn(Result<std::option::Option<Vec<u8>>, DatabaseError>, std::option::Option<Vec<u8>>) -> std::option::Option<Vec<u8>> {Result::<std::option::Option<Vec<u8>>, DatabaseError>::unwrap_or}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = std::option::Option::<Vec<u8>>::map::<BlockReceipts, [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23]>(move _6, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23]) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1277:9: 1283:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1280:14: 1280:17
                                         // + literal: Const { ty: fn(std::option::Option<Vec<u8>>, [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23]) -> std::option::Option<BlockReceipts> {std::option::Option::<Vec<u8>>::map::<BlockReceipts, [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23], val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1284:5: 1284:6
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1284:6: 1284:6
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1284:5: 1284:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1275:5: 1284:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::block_receipts::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1280:18: 1280:23], _2: Vec<u8>) -> BlockReceipts {
    debug res => _2;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1280:19: 1280:22
    let mut _0: types::block_receipts::BlockReceipts; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1281:21: 1281:35
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
    let _5: &std::vec::Vec<u8>;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
    scope 1 {
        debug block_receipts => _0;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:1281:21: 1281:35
    }

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1281:65: 1281:69
        _0 = rlp::decode::<BlockReceipts>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1281:53: 1281:70
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1281:53: 1281:64
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> BlockReceipts {rlp::decode::<BlockReceipts>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1283:13: 1283:14
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1283:14: 1283:14
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1283:13: 1283:14
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1280:18: 1283:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_receipt(_1: &chain::Chain, _2: &TransactionIndex) -> std::option::Option<types::receipt::Receipt> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1287:32: 1287:37
    debug address => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1287:39: 1287:46
    let mut _0: std::option::Option<types::receipt::Receipt>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1287:70: 1287:85
    let mut _3: std::option::Option<types::block_receipts::BlockReceipts>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1288:9: 1288:48
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1288:29: 1288:47
    let mut _5: [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55
    let mut _6: &&types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55

    bb0: {
        _4 = ((*_2).0: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/chain.rs:1288:29: 1288:47
        _3 = chain::Chain::block_receipts(_1, move _4) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1288:9: 1288:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1288:14: 1288:28
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, H256) -> std::option::Option<BlockReceipts> {chain::Chain::block_receipts}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55
        _5 = [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21] { address: move _6 }; // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55
                                         // closure
                                         // + def_id: DefId(0:324 ~ core[3f1a]::libchain::chain::{impl#5}::transaction_receipt::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((types::block_receipts::BlockReceipts,)) -> types::receipt::Receipt,
                                         //     (&&types::transaction_index::TransactionIndex,),
                                         // ]
        _0 = std::option::Option::<BlockReceipts>::map::<types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21]>(move _3, move _5) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1288:9: 1289:56
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1289:14: 1289:17
                                         // + literal: Const { ty: fn(std::option::Option<BlockReceipts>, [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21]) -> std::option::Option<types::receipt::Receipt> {std::option::Option::<BlockReceipts>::map::<types::receipt::Receipt, [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1290:6: 1290:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::transaction_receipt::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1289:18: 1289:21], _2: BlockReceipts) -> types::receipt::Receipt {
    debug r => _2;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:19: 1289:20
    debug address => (*(_1.0: &&types::transaction_index::TransactionIndex)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1287:39: 1287:46
    let mut _0: types::receipt::Receipt; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:22
    let mut _3: &types::receipt::Receipt; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:55
    let _4: &types::receipt::Receipt;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:47
    let mut _5: &std::vec::Vec<types::receipt::Receipt>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:32
    let mut _6: usize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:33: 1289:46
    let mut _7: &&types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55
    let mut _8: &types::transaction_index::TransactionIndex; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55

    bb0: {
        _5 = &(_2.0: std::vec::Vec<types::receipt::Receipt>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:32
        _7 = deref_copy (_1.0: &&types::transaction_index::TransactionIndex); // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:33: 1289:46
        _8 = deref_copy (*_7);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:33: 1289:46
        _6 = ((*_8).1: usize);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:33: 1289:46
        _4 = <Vec<types::receipt::Receipt> as Index<usize>>::index(move _5, move _6) -> [return: bb1, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:47
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1289:22: 1289:47
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<types::receipt::Receipt>, usize) -> &'a <Vec<types::receipt::Receipt> as Index<usize>>::Output {<Vec<types::receipt::Receipt> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:55
        _0 = <types::receipt::Receipt as Clone>::clone(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:22: 1289:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1289:48: 1289:53
                                         // + literal: Const { ty: for<'a> fn(&'a types::receipt::Receipt) -> types::receipt::Receipt {<types::receipt::Receipt as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:54: 1289:55
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:55: 1289:55
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:54: 1289:55
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1289:18: 1289:55
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::current_status(_1: &chain::Chain) -> status::Status {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1293:23: 1293:28
    let mut _0: libchain::status::Status; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1294:13: 1294:23
    let _2: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1295:9: 1295:49
    let mut _3: &mut libchain::status::Status; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1295:9: 1295:49
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1295:25: 1295:48
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1296:9: 1296:53
    let mut _6: &mut libchain::status::Status; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1296:9: 1296:53
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1296:27: 1296:52
    scope 1 {
        debug status => _0;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1294:13: 1294:23
    }

    bb0: {
        _0 = <status::Status as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1294:26: 1294:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1294:26: 1294:41
                                         // + literal: Const { ty: fn() -> status::Status {<status::Status as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1295:9: 1295:49
        _4 = chain::Chain::get_current_hash(_1) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:1295:25: 1295:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1295:30: 1295:46
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> H256 {chain::Chain::get_current_hash}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = status::Status::set_hash(move _3, move _4) -> bb3; // scope 1 at cita-chain/core/src/libchain/chain.rs:1295:9: 1295:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1295:16: 1295:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut status::Status, H256) {status::Status::set_hash}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1296:9: 1296:53
        _7 = chain::Chain::get_current_height(_1) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:1296:27: 1296:52
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1296:32: 1296:50
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = status::Status::set_number(move _6, move _7) -> bb5; // scope 1 at cita-chain/core/src/libchain/chain.rs:1296:9: 1296:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1296:16: 1296:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut status::Status, u64) {status::Status::set_number}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1298:6: 1298:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_hash(_1: &chain::Chain, _2: &H256) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1300:26: 1300:31
    debug block_hash => _2;              // in scope 0 at cita-chain/core/src/libchain/chain.rs:1300:33: 1300:43
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1300:55: 1300:59
    let _3: cita_types::H256;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1301:13: 1301:25
    let mut _4: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1302:12: 1302:39
    let mut _5: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1302:12: 1302:24
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _10: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _11: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _12: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _13: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _14: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _16: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _18: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _19: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1307:17: 1307:29
    let _21: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1307:17: 1307:29
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1307:31: 1307:41
    let _23: &&cita_types::H256;         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1307:31: 1307:41
    scope 1 {
        debug current_hash => _3;        // in scope 1 at cita-chain/core/src/libchain/chain.rs:1301:13: 1301:25
        let _6: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _6;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _24: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _25: &[&str; 2];     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
            let mut _26: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _3 = chain::Chain::get_current_hash(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1301:28: 1301:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1301:33: 1301:49
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> H256 {chain::Chain::get_current_hash}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1302:12: 1302:24
        _4 = <H256 as PartialEq>::eq(move _5, _2) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:1302:12: 1302:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1302:12: 1302:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1302:12: 1302:39
    }

    bb3: {
        _0 = const true;                 // scope 1 at cita-chain/core/src/libchain/chain.rs:1303:13: 1303:17
        goto -> bb16;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1302:9: 1310:10
    }

    bb4: {
        _6 = log::Level::Warn;           // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _9 = &_6;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _26 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::validate_hash, [], Some(promoted[2])) }
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, _26) -> bb8; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _11 = &_6;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _13 = log::max_level() -> bb9;   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _7) -> [0: bb15, otherwise: bb11]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        switchInt(move _8) -> [0: bb5, otherwise: bb6]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _12 = &_13;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _10 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _11, move _12) -> bb10; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _7 = move _10;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _25 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::validate_hash, [], Some(promoted[1])) }
        _16 = _25 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
        _21 = &_3;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1307:17: 1307:29
        _20 = core::fmt::ArgumentV1::<'_>::new_debug::<H256>(_21) -> bb12; // scope 2 at cita-chain/core/src/libchain/chain.rs:1307:17: 1307:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1307:17: 1307:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<H256>}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = &_2;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1307:31: 1307:41
        _22 = core::fmt::ArgumentV1::<'_>::new_debug::<&H256>(_23) -> bb13; // scope 2 at cita-chain/core/src/libchain/chain.rs:1307:31: 1307:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1307:31: 1307:41
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &H256) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&H256>}, val: Value(<ZST>) }
    }

    bb13: {
        _19 = [move _20, move _22];      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _18 = &_19;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _17 = _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> bb14; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::validate_hash, [], Some(promoted[0])) }
        _14 = log::__private_api_log(move _15, _6, _24) -> bb15; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb15: {
        _0 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1309:13: 1309:18
        goto -> bb16;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1302:9: 1310:10
    }

    bb16: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1311:6: 1311:6
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_hash: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1305:13: 1308:14
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1305:13: 1308:14

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1305:13: 1308:14
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1305:13: 1308:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1305:13: 1308:14
        _1 = (move _2, move _4, move _6, const 1305_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_hash: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85

    bb0: {
        _1 = [const "Hash is not right, validate_hash current_hash ", const " block_hash "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1306:17: 1306:85
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_hash: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_height(_1: &chain::Chain, _2: u64) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1313:28: 1313:33
    debug block_number => _2;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1313:35: 1313:47
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1313:57: 1313:61
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1314:13: 1314:27
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1317:13: 1317:27
    let _19: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1317:13: 1317:27
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1318:13: 1318:25
    let _21: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1318:13: 1318:25
    let mut _22: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:27
    let mut _23: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:23
    let mut _24: (u64, bool);            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:27
    scope 1 {
        debug current_height => _3;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:1314:13: 1314:27
        let _4: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 2 {
            debug lvl => _4;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _25: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _26: &[&str; 2];     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
            let mut _27: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }

    bb0: {
        _3 = chain::Chain::get_current_height(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1314:30: 1314:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1314:35: 1314:53
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = log::Level::Trace;          // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _27 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::validate_height, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _27) -> bb5; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb3: {
        _9 = &_4;                        // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb6;   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _5) -> [0: bb12, otherwise: bb8]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        switchInt(move _6) -> [0: bb2, otherwise: bb3]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _10 = &_11;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb7; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _5 = move _8;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb4;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _26 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::validate_height, [], Some(promoted[1])) }
        _14 = _26 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
        _19 = &_3;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1317:13: 1317:27
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_19) -> bb9; // scope 2 at cita-chain/core/src/libchain/chain.rs:1317:13: 1317:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1317:13: 1317:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = &_2;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1318:13: 1318:25
        _20 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(_21) -> bb10; // scope 2 at cita-chain/core/src/libchain/chain.rs:1318:13: 1318:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1318:13: 1318:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = [move _18, move _20];      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb11; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::validate_height, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _25) -> bb12; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = _3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:23
        _24 = CheckedAdd(_23, const 1_u64); // scope 1 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:27
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _23, const 1_u64) -> bb13; // scope 1 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:27
    }

    bb13: {
        _22 = move (_24.0: u64);         // scope 1 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:27
        _0 = Eq(move _22, _2);           // scope 1 at cita-chain/core/src/libchain/chain.rs:1320:9: 1320:43
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1321:6: 1321:6
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_height: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1315:9: 1319:10
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1315:9: 1319:10

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1315:9: 1319:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1315:9: 1319:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1315:9: 1319:10
        _1 = (move _2, move _4, move _6, const 1315_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_height: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82

    bb0: {
        _1 = [const "validate_height current_height ", const " need validate block_number "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1316:13: 1316:82
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::validate_height: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_block_proof_height(_1: &chain::Chain, _2: &types::block::Block) -> usize {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1324:35: 1324:40
    debug block => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1324:42: 1324:47
    let mut _0: usize;                   // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1324:60: 1324:65
    let mut _3: std::option::Option<libproto::ProofType>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
    let mut _4: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
    let _5: &types::header::OpenHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
    let mut _6: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
    let _7: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
    let mut _8: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1326:18: 1326:32
    let mut _9: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1326:13: 1326:33
    let _10: proof::BftProof;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:21: 1327:26
    let mut _11: libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:65
    let mut _12: &libproto::Proof;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:65
    let _13: &libproto::Proof;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
    let mut _14: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
    let _15: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
    let mut _16: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
    let _17: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
    let mut _18: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1329:20: 1329:53
    let mut _19: usize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1329:20: 1329:32
    let mut _20: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
    let mut _21: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
    let _22: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
    let mut _23: &types::header::Header; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
    let _24: &types::header::Header;     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
    scope 1 {
        debug proof => _10;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1327:21: 1327:26
    }

    bb0: {
        _7 = <types::block::Block as Deref>::deref(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
        _5 = <Header as Deref>::deref(move _6) -> bb2; // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
        _3 = OpenHeader::proof_type(move _4) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1325:21: 1325:31
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> std::option::Option<ProofType> {OpenHeader::proof_type}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_3);           // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
        switchInt(move _9) -> [1: bb5, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:9: 1325:33
    }

    bb4: {
        _24 = <types::block::Block as Deref>::deref(_2) -> bb14; // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = discriminant(((_3 as Some).0: libproto::ProofType)); // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:15: 1325:33
        switchInt(move _8) -> [2: bb6, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1325:9: 1325:33
    }

    bb6: {
        _17 = <types::block::Block as Deref>::deref(_2) -> bb7; // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::Block) -> &'a <types::block::Block as Deref>::Target {<types::block::Block as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _17;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
        _15 = <Header as Deref>::deref(move _16) -> bb8; // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = _15;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
        _13 = OpenHeader::proof(move _14) -> bb9; // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:57
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1327:50: 1327:55
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = _13;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:65
        _11 = <libproto::Proof as Clone>::clone(move _12) -> bb10; // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:44: 1327:65
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1327:58: 1327:63
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _10 = <proof::BftProof as From<libproto::Proof>>::from(move _11) -> bb11; // scope 0 at cita-chain/core/src/libchain/chain.rs:1327:29: 1327:66
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1327:29: 1327:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(libproto::Proof) -> proof::BftProof {<proof::BftProof as From<libproto::Proof>>::from}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = (_10.1: usize);            // scope 1 at cita-chain/core/src/libchain/chain.rs:1329:20: 1329:32
        _18 = Eq(move _19, const _);     // scope 1 at cita-chain/core/src/libchain/chain.rs:1329:20: 1329:53
        switchInt(move _18) -> [0: bb13, otherwise: bb12]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1329:20: 1329:53
    }

    bb12: {
        _0 = const 0_usize;              // scope 1 at cita-chain/core/src/libchain/chain.rs:1330:28: 1330:29
        drop(_10) -> bb17;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1333:13: 1333:14
    }

    bb13: {
        _0 = (_10.1: usize);             // scope 1 at cita-chain/core/src/libchain/chain.rs:1332:17: 1332:29
        drop(_10) -> bb17;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1333:13: 1333:14
    }

    bb14: {
        _23 = _24;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
        _22 = <Header as Deref>::deref(move _23) -> bb15; // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _21 = _22;                       // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
        _20 = OpenHeader::number(move _21) -> bb16; // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1334:24: 1334:30
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> u64 {OpenHeader::number}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = move _20 as usize (IntToInt); // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:18: 1334:41
        goto -> bb17;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1334:40: 1334:41
    }

    bb17: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1336:6: 1336:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_block_proof_by_height(_1: &chain::Chain, _2: u64) -> std::option::Option<libproto::Proof> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1339:38: 1339:43
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1339:45: 1339:51
    let mut _0: std::option::Option<libproto::Proof>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1339:61: 1339:79
    let mut _3: std::option::Option<libproto::ProofType>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let mut _4: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let _5: &types::header::OpenHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let mut _6: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let _7: &types::header::Header;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let mut _8: &lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
    let _9: lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:41
    let mut _10: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:41
    let mut _11: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1341:18: 1341:32
    let mut _12: isize;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1341:13: 1341:33
    let mut _13: std::option::Option<types::block::Block>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1343:17: 1343:49
    let mut _14: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1343:38: 1343:48
    let mut _15: (u64, bool);            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1343:38: 1343:48

    bb0: {
        _10 = &((*_1).1: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, types::header::Header>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:41
        _9 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read(move _10) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1340:35: 1340:39
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, Header>) -> lock_api::rwlock::RwLockReadGuard<'a, parking_lot::raw_rwlock::RawRwLock, Header> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, Header>::read}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
        _7 = <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref(move _8) -> [return: bb2, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header>) -> &'a <lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::Target {<lock_api::rwlock::RwLockReadGuard<'_, parking_lot::raw_rwlock::RawRwLock, Header> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
        _5 = <Header as Deref>::deref(move _6) -> [return: bb3, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _5;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
        _3 = OpenHeader::proof_type(move _4) -> [return: bb4, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1340:42: 1340:52
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> std::option::Option<ProofType> {OpenHeader::proof_type}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_3);          // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
        switchInt(move _12) -> [1: bb6, otherwise: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:9: 1340:54
    }

    bb5: {
        _0 = std::option::Option::<libproto::Proof>::None; // scope 0 at cita-chain/core/src/libchain/chain.rs:1346:18: 1346:22
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1346:18: 1346:22
    }

    bb6: {
        _11 = discriminant(((_3 as Some).0: libproto::ProofType)); // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:15: 1340:54
        switchInt(move _11) -> [2: bb7, otherwise: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1340:9: 1340:54
    }

    bb7: {
        _15 = CheckedAdd(_2, const 1_u64); // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:38: 1343:48
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_u64) -> [success: bb8, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:38: 1343:48
    }

    bb8: {
        _14 = move (_15.0: u64);         // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:38: 1343:48
        _13 = chain::Chain::block_by_height(_1, move _14) -> [return: bb9, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:17: 1343:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1343:22: 1343:37
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) -> std::option::Option<types::block::Block> {chain::Chain::block_by_height}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = std::option::Option::<types::block::Block>::map::<libproto::Proof, [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33]>(move _13, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33]) -> [return: bb14, unwind: bb12]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:17: 1344:63
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1344:22: 1344:25
                                         // + literal: Const { ty: fn(std::option::Option<types::block::Block>, [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33]) -> std::option::Option<libproto::Proof> {std::option::Option::<types::block::Block>::map::<libproto::Proof, [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33], val: Value(<ZST>) }
    }

    bb10: {
        drop(_9) -> bb11;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1348:5: 1348:6
    }

    bb11: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1348:6: 1348:6
    }

    bb12 (cleanup): {
        drop(_9) -> bb13;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1348:5: 1348:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1339:5: 1348:6
    }

    bb14: {
        goto -> bb10;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1343:17: 1344:63
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::get_block_proof_by_height::{closure#0}(_1: [closure@cita-chain/core/src/libchain/chain.rs:1344:26: 1344:33], _2: types::block::Block) -> libproto::Proof {
    debug block => _2;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:27: 1344:32
    let mut _0: libproto::Proof;         // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:34
    let mut _3: &libproto::Proof;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:62
    let _4: &libproto::Proof;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
    let mut _5: &types::header::OpenHeader; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
    let _6: &types::header::OpenHeader;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
    let mut _7: &types::header::Header;  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54

    bb0: {
        _7 = &(_2.0: types::header::Header); // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
        _6 = <Header as Deref>::deref(move _7) -> [return: bb1, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
                                         // + literal: Const { ty: for<'a> fn(&'a Header) -> &'a <Header as Deref>::Target {<Header as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
        _4 = OpenHeader::proof(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1344:47: 1344:52
                                         // + literal: Const { ty: for<'a> fn(&'a OpenHeader) -> &'a libproto::Proof {OpenHeader::proof}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:62
        _0 = <libproto::Proof as Clone>::clone(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:34: 1344:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1344:55: 1344:60
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Proof) -> libproto::Proof {<libproto::Proof as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:61: 1344:62
    }

    bb4: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:62: 1344:62
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:61: 1344:62
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1344:26: 1344:62
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::broadcast_status(_1: &chain::Chain, _2: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1351:29: 1351:34
    debug ctx_pub => _2;                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1351:36: 1351:43
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1351:73: 1351:73
    let mut _3: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1352:12: 1352:39
    let _4: libproto::Status;            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1355:13: 1355:19
    let mut _5: &libchain::status::Status; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:54
    let _6: libchain::status::Status;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:43
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _10: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _11: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _12: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _13: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _14: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _15: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: &[&str];                // in scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _19: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _20: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
    let _22: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
    let _23: u64;                        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
    let mut _24: &libproto::Status;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
    let _26: &std::string::String;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
    let _27: std::string::String;        // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
    let mut _28: &&[u8];                 // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
    let _29: &[u8];                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:30
    let mut _30: &libproto::Status;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:30
    let mut _32: libproto::Status;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1361:33: 1361:39
    let _33: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1362:9: 1367:22
    let mut _34: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1362:9: 1366:15
    let mut _35: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1363:19: 1366:14
    let mut _36: std::string::String;    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1364:17: 1364:53
    let mut _37: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _38: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _39: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _40: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:45
    let mut _41: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:36
    let mut _42: libproto::Message;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:25
    let mut _46: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    let mut _47: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    scope 1 {
        debug status => _4;              // in scope 1 at cita-chain/core/src/libchain/chain.rs:1355:13: 1355:19
        let _7: log::Level;              // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let _31: libproto::Message;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:1361:13: 1361:21
        scope 2 {
            debug lvl => _7;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _43: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _44: &[&str; 2];     // in scope 2 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
            let mut _45: &log::LevelFilter; // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
        scope 3 {
            debug sync_msg => _31;       // in scope 3 at cita-chain/core/src/libchain/chain.rs:1361:13: 1361:21
        }
    }

    bb0: {
        _47 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1352:9: 1354:10
        _46 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1352:9: 1354:10
        _3 = chain::Chain::get_max_store_height(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1352:12: 1352:39
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1352:17: 1352:37
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_max_store_height}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb26, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1352:12: 1352:44
    }

    bb2: {
        _6 = chain::Chain::current_status(_1) -> bb3; // scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:43
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1355:27: 1355:41
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> status::Status {chain::Chain::current_status}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &_6;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:54
        _47 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:54
        _4 = status::Status::protobuf(move _5) -> bb4; // scope 0 at cita-chain/core/src/libchain/chain.rs:1355:22: 1355:54
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1355:44: 1355:52
                                         // + literal: Const { ty: for<'a> fn(&'a status::Status) -> libproto::Status {status::Status::protobuf}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = log::Level::Info;           // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _10 = &_7;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _45 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(chain::Chain::broadcast_status, [], Some(promoted[2])) }
        _9 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _10, _45) -> [return: bb8, unwind: bb33]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = const false;                // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb6: {
        _12 = &_7;                       // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _14 = log::max_level() -> [return: bb9, unwind: bb33]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _8) -> [0: bb19, otherwise: bb11]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        switchInt(move _9) -> [0: bb5, otherwise: bb6]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _13 = &_14;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _11 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _12, move _13) -> [return: bb10, unwind: bb33]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _8 = move _11;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb7;                     // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _44 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chain::Chain::broadcast_status, [], Some(promoted[1])) }
        _17 = _44 as &[&str] (Pointer(Unsize)); // scope 2 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
        _24 = &_4;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
        _23 = libproto::Status::get_height(move _24) -> [return: bb12, unwind: bb33]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1358:20: 1358:30
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Status) -> u64 {libproto::Status::get_height}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = &_23;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
        _21 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(_22) -> [return: bb13, unwind: bb33]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1358:13: 1358:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb13: {
        _30 = &_4;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:30
        _29 = libproto::Status::get_hash(move _30) -> [return: bb14, unwind: bb33]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:30
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1359:20: 1359:28
                                         // + literal: Const { ty: for<'a> fn(&'a libproto::Status) -> &'a [u8] {libproto::Status::get_hash}, val: Value(<ZST>) }
    }

    bb14: {
        _28 = &_29;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
        _27 = <&[u8] as cita_types::traits::LowerHex>::lower_hex(move _28) -> [return: bb15, unwind: bb33]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1359:31: 1359:40
                                         // + literal: Const { ty: for<'a> fn(&'a &[u8]) -> std::string::String {<&[u8] as cita_types::traits::LowerHex>::lower_hex}, val: Value(<ZST>) }
    }

    bb15: {
        _26 = &_27;                      // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_26) -> [return: bb16, unwind: bb28]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1359:13: 1359:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb16: {
        _20 = [move _21, move _25];      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = &_20;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _18 = _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb17, unwind: bb28]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _43 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(chain::Chain::broadcast_status, [], Some(promoted[0])) }
        _15 = log::__private_api_log(move _16, _7, _43) -> [return: bb18, unwind: bb28]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_27) -> [return: bb19, unwind: bb33]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb19: {
        _47 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1361:33: 1361:39
        _32 = move _4;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:1361:33: 1361:39
        _31 = <libproto::Status as Into<Message>>::into(move _32) -> [return: bb20, unwind: bb33]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1361:33: 1361:46
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1361:40: 1361:44
                                         // + literal: Const { ty: fn(libproto::Status) -> Message {<libproto::Status as Into<Message>>::into}, val: Value(<ZST>) }
    }

    bb20: {
        _46 = const true;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1361:45: 1361:46
        _38 = const libproto::router::SubModules::Chain; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _39 = const libproto::router::MsgType::Status; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x05)) }
        _37 = RoutingKey(move _38, move _39); // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _36 = <RoutingKey as Into<std::string::String>>::into(move _37) -> [return: bb21, unwind: bb31]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1364:17: 1364:53
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1364:47: 1364:51
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        _46 = const false;               // scope 3 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:25
        _42 = move _31;                  // scope 3 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:25
        _41 = <Message as libproto::TryInto<Vec<u8>>>::try_into(move _42) -> [return: bb22, unwind: bb27]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1365:26: 1365:34
                                         // + literal: Const { ty: fn(Message) -> Result<Vec<u8>, <Message as libproto::TryInto<Vec<u8>>>::Error> {<Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb22: {
        _40 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _41) -> [return: bb23, unwind: bb27]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1365:17: 1365:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1365:37: 1365:43
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb23: {
        _35 = (move _36, move _40);      // scope 3 at cita-chain/core/src/libchain/chain.rs:1363:19: 1366:14
        _34 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_2, move _35) -> [return: bb24, unwind: bb31]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1362:9: 1366:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1363:14: 1363:18
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb24: {
        _33 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _34) -> [return: bb25, unwind: bb31]; // scope 3 at cita-chain/core/src/libchain/chain.rs:1362:9: 1367:22
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1367:14: 1367:20
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb25: {
        _46 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
        _47 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
        goto -> bb26;                    // scope 0 at cita-chain/core/src/libchain/chain.rs:1368:6: 1368:6
    }

    bb26: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1368:6: 1368:6
    }

    bb27 (cleanup): {
        drop(_36) -> bb31;               // scope 3 at cita-chain/core/src/libchain/chain.rs:1366:13: 1366:14
    }

    bb28 (cleanup): {
        drop(_27) -> bb33;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:41:14: 41:15
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1351:5: 1368:6
    }

    bb30 (cleanup): {
        drop(_31) -> bb33;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    }

    bb31 (cleanup): {
        switchInt(_46) -> [0: bb33, otherwise: bb30]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    }

    bb32 (cleanup): {
        drop(_4) -> bb29;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    }

    bb33 (cleanup): {
        switchInt(_47) -> [0: bb29, otherwise: bb32]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1368:5: 1368:6
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::broadcast_status: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1356:9: 1360:10
    let mut _7: &str;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1356:9: 1360:10

    bb0: {
        _3 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "core::libchain::chain"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-chain/core/src/libchain/chain.rs"; // scope 0 at cita-chain/core/src/libchain/chain.rs:1356:9: 1360:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1356:9: 1360:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-chain/core/src/libchain/chain.rs:1356:9: 1360:10
        _1 = (move _2, move _4, move _6, const 1356_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::broadcast_status: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
    let mut _1: [&str; 2];               // in scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50

    bb0: {
        _1 = [const "new chain status height ", const ", hash "]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1357:13: 1357:50
    }
}

promoted[2] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::broadcast_status: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_block_body(_1: &chain::Chain, _2: u64, _3: &OpenBlock) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1370:27: 1370:32
    debug height => _2;                  // in scope 0 at cita-chain/core/src/libchain/chain.rs:1370:34: 1370:40
    debug block => _3;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1370:55: 1370:60
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1370:74: 1370:74
    let _4: std::vec::Vec<u8>;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1372:13: 1372:23
    let mut _5: &types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:62
    let _6: types::db_indexes::BlockNumber2Body; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:50
    let mut _7: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
    let mut _8: &cita_db::RocksDB;       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
    let _9: &cita_db::RocksDB;           // in scope 0 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
    let mut _10: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
    let mut _11: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1374:13: 1374:48
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1375:13: 1375:23
    let mut _13: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1376:13: 1376:49
    let mut _14: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1376:13: 1376:38
    let mut _15: &types::block::BlockBody; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1376:25: 1376:37
    let _16: &types::block::BlockBody;   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1376:25: 1376:37
    let mut _17: std::result::Result<(), cita_db::DatabaseError>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
    let mut _18: &cita_db::RocksDB;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
    let _19: &cita_db::RocksDB;          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
    let mut _20: &std::sync::Arc<cita_db::RocksDB>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
    let mut _21: std::option::Option<cita_db::DataCategory>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1381:13: 1381:47
    let mut _22: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
    let mut _23: std::vec::Vec<u8>;      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1383:13: 1383:44
    let mut _24: elastic_array::ElasticArray1024<u8>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1383:13: 1383:33
    let _25: &u64;                       // in scope 0 at cita-chain/core/src/libchain/chain.rs:1383:25: 1383:32
    let mut _27: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1384:9: 1384:10
    let mut _28: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1377:9: 1377:10
    let mut _29: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1385:5: 1385:6
    scope 1 {
        debug height_key => _4;          // in scope 1 at cita-chain/core/src/libchain/chain.rs:1372:13: 1372:23
        scope 2 {
            let mut _26: &types::db_indexes::CurrentHeight; // in scope 2 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
            scope 3 {
            }
        }
    }

    bb0: {
        _29 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:13: 1372:23
        _27 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:13: 1372:23
        _28 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:13: 1372:23
        _6 = BlockNumber2Body(_2);       // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:50
        _5 = &_6;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:62
        _29 = const true;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:62
        _4 = <BlockNumber2Body as DBIndex>::get_index(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1372:26: 1372:62
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1372:51: 1372:60
                                         // + literal: Const { ty: for<'a> fn(&'a BlockNumber2Body) -> Vec<u8> {<BlockNumber2Body as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
        _9 = <Arc<RocksDB> as Deref>::deref(move _10) -> [return: bb2, unwind: bb20]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
        _11 = const std::option::Option::<DataCategory>::Some(Bodies); // scope 1 at cita-chain/core/src/libchain/chain.rs:1374:13: 1374:48
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x02)) }
        _29 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1375:13: 1375:23
        _28 = const true;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1375:13: 1375:23
        _12 = move _4;                   // scope 1 at cita-chain/core/src/libchain/chain.rs:1375:13: 1375:23
        _16 = OpenBlock::body(_3) -> [return: bb3, unwind: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1376:25: 1376:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1376:31: 1376:35
                                         // + literal: Const { ty: for<'a> fn(&'a OpenBlock) -> &'a types::block::BlockBody {OpenBlock::body}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = _16;                       // scope 1 at cita-chain/core/src/libchain/chain.rs:1376:25: 1376:37
        _14 = encode::<types::block::BlockBody>(move _15) -> [return: bb4, unwind: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1376:13: 1376:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1376:13: 1376:24
                                         // + literal: Const { ty: for<'a> fn(&'a types::block::BlockBody) -> elastic_array::ElasticArray1024<u8> {encode::<types::block::BlockBody>}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = elastic_array::ElasticArray1024::<u8>::into_vec(move _14) -> [return: bb5, unwind: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1376:13: 1376:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1376:39: 1376:47
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
        _7 = <RocksDB as Database>::insert(move _8, move _11, move _12, move _13) -> [return: bb6, unwind: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1373:17: 1377:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1373:25: 1373:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb6: {
        _28 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1377:9: 1377:10
        drop(_7) -> [return: bb7, unwind: bb20]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1377:10: 1377:11
    }

    bb7: {
        _20 = &((*_1).6: std::sync::Arc<cita_db::RocksDB>); // scope 2 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
        _19 = <Arc<RocksDB> as Deref>::deref(move _20) -> [return: bb8, unwind: bb20]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RocksDB>) -> &'a <Arc<RocksDB> as Deref>::Target {<Arc<RocksDB> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _19;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
        _21 = const std::option::Option::<DataCategory>::Some(Extra); // scope 2 at cita-chain/core/src/libchain/chain.rs:1381:13: 1381:47
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::option::Option<DataCategory>, val: Value(Scalar(0x03)) }
        _26 = const _;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
                                         // + literal: Const { ty: &CurrentHeight, val: Unevaluated(chain::Chain::set_block_body, [], Some(promoted[0])) }
        _22 = <CurrentHeight as DBIndex>::get_index(_26) -> [return: bb9, unwind: bb20]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1382:27: 1382:36
                                         // + literal: Const { ty: for<'a> fn(&'a CurrentHeight) -> Vec<u8> {<CurrentHeight as DBIndex>::get_index}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:1382:37: 1382:38
        _25 = &_2;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1383:25: 1383:32
        _24 = encode::<u64>(_25) -> [return: bb10, unwind: bb16]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1383:13: 1383:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1383:13: 1383:24
                                         // + literal: Const { ty: for<'a> fn(&'a u64) -> elastic_array::ElasticArray1024<u8> {encode::<u64>}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = elastic_array::ElasticArray1024::<u8>::into_vec(move _24) -> [return: bb11, unwind: bb16]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1383:13: 1383:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1383:34: 1383:42
                                         // + literal: Const { ty: fn(elastic_array::ElasticArray1024<u8>) -> Vec<u8> {elastic_array::ElasticArray1024::<u8>::into_vec}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
        _17 = <RocksDB as Database>::insert(move _18, move _21, move _22, move _23) -> [return: bb12, unwind: bb16]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1380:17: 1384:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1380:25: 1380:31
                                         // + literal: Const { ty: for<'a> fn(&'a RocksDB, std::option::Option<DataCategory>, Vec<u8>, Vec<u8>) -> Result<(), DatabaseError> {<RocksDB as Database>::insert}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1384:9: 1384:10
        drop(_17) -> [return: bb13, unwind: bb20]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1384:10: 1384:11
    }

    bb13: {
        _29 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1385:5: 1385:6
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1385:6: 1385:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1370:5: 1385:6
    }

    bb15 (cleanup): {
        drop(_22) -> bb20;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1384:9: 1384:10
    }

    bb16 (cleanup): {
        switchInt(_27) -> [0: bb20, otherwise: bb15]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1384:9: 1384:10
    }

    bb17 (cleanup): {
        drop(_12) -> bb20;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1377:9: 1377:10
    }

    bb18 (cleanup): {
        switchInt(_28) -> [0: bb20, otherwise: bb17]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1377:9: 1377:10
    }

    bb19 (cleanup): {
        drop(_4) -> bb14;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1385:5: 1385:6
    }

    bb20 (cleanup): {
        switchInt(_29) -> [0: bb14, otherwise: bb19]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1385:5: 1385:6
    }
}

promoted[0] in chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::set_block_body: &CurrentHeight = {
    let mut _0: &types::db_indexes::CurrentHeight; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
    let mut _1: types::db_indexes::CurrentHeight; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:26

    bb0: {
        _1 = CurrentHeight;              // scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:26
        _0 = &_1;                        // scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1382:13: 1382:38
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::compare_status(_1: &chain::Chain, _2: &status::Status) -> (u64, u64) {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1387:27: 1387:32
    debug st => _2;                      // in scope 0 at cita-chain/core/src/libchain/chain.rs:1387:34: 1387:36
    let mut _0: (u64, u64);              // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1387:50: 1387:60
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1388:13: 1388:27
    let mut _4: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1389:12: 1389:40
    let mut _5: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1389:12: 1389:23
    let mut _6: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1389:26: 1389:40
    let mut _7: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:32
    let mut _8: u64;                     // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:28
    let mut _9: (u64, bool);             // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:32
    let mut _10: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:62
    let mut _11: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:45
    let mut _12: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:48: 1390:62
    let mut _13: (u64, bool);            // in scope 0 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:62
    scope 1 {
        debug current_height => _3;      // in scope 1 at cita-chain/core/src/libchain/chain.rs:1388:13: 1388:27
    }

    bb0: {
        _3 = chain::Chain::get_current_height(_1) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1388:30: 1388:55
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1388:35: 1388:53
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = status::Status::number(_2) -> bb2; // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:12: 1389:23
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1389:15: 1389:21
                                         // + literal: Const { ty: for<'a> fn(&'a status::Status) -> u64 {status::Status::number}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _3;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:26: 1389:40
        _4 = Gt(move _5, move _6);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:12: 1389:40
        switchInt(move _4) -> [0: bb7, otherwise: bb3]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:12: 1389:40
    }

    bb3: {
        _8 = _3;                         // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:28
        _9 = CheckedAdd(_8, const 1_u64); // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:32
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_u64) -> bb4; // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:32
    }

    bb4: {
        _7 = move (_9.0: u64);           // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:14: 1390:32
        _11 = status::Status::number(_2) -> bb5; // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:45
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1390:37: 1390:43
                                         // + literal: Const { ty: for<'a> fn(&'a status::Status) -> u64 {status::Status::number}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _3;                        // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:48: 1390:62
        _13 = CheckedSub(_11, _12);      // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:62
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, move _12) -> bb6; // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:62
    }

    bb6: {
        _10 = move (_13.0: u64);         // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:34: 1390:62
        _0 = (move _7, move _10);        // scope 1 at cita-chain/core/src/libchain/chain.rs:1390:13: 1390:63
        goto -> bb8;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:9: 1393:10
    }

    bb7: {
        _0 = const (0_u64, 0_u64);       // scope 1 at cita-chain/core/src/libchain/chain.rs:1392:13: 1392:19
        goto -> bb8;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:1389:9: 1393:10
    }

    bb8: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1394:6: 1394:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::filter_db(_1: &chain::Chain) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1396:22: 1396:27
    let mut _0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1396:32: 1396:52
    let _2: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1397:20: 1397:34

    bb0: {
        _2 = &((*_1).13: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, filters::filterdb::FilterDB>>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1397:20: 1397:34
        _0 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Clone>::clone(_2) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1397:9: 1397:35
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1397:9: 1397:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, FilterDB>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1398:6: 1398:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::clear_block_map(_1: &chain::Chain) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1401:28: 1401:33
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1401:35: 1401:35
    let mut _2: lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1402:13: 1402:26
    let mut _3: &lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1402:29: 1402:51
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1413:15
    let mut _6: std::iter::FilterMap<std::collections::btree_map::IntoIter<u64, libchain::chain::BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1410:15
    let mut _7: std::collections::btree_map::IntoIter<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1406:25
    let mut _8: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
    let mut _9: &std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
    let _10: &std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
    let mut _11: &lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
    let mut _12: [closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37]; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:23: 1413:14
    let mut _13: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:23: 1413:14
    let mut _14: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1414:22: 1414:35
    let mut _15: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
    let mut _16: &mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1414:10: 1414:19
    let _17: ();                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1415:9: 1415:61
    let mut _18: u64;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1415:35: 1415:60
    let mut _19: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1414:34: 1414:35
    let mut _20: bool;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
    scope 1 {
        debug block_map => _2;           // in scope 1 at cita-chain/core/src/libchain/chain.rs:1402:13: 1402:26
        let mut _4: std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 1 at cita-chain/core/src/libchain/chain.rs:1403:13: 1403:30
        scope 2 {
            debug new_block_map => _4;   // in scope 2 at cita-chain/core/src/libchain/chain.rs:1403:13: 1403:30
        }
    }

    bb0: {
        _20 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1402:13: 1402:26
        _19 = const false;               // scope 0 at cita-chain/core/src/libchain/chain.rs:1402:13: 1402:26
        _3 = &((*_1).4: lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>>); // scope 0 at cita-chain/core/src/libchain/chain.rs:1402:29: 1402:51
        _2 = lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::write(move _3) -> bb1; // scope 0 at cita-chain/core/src/libchain/chain.rs:1402:29: 1402:51
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1402:44: 1402:49
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLock<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> lock_api::rwlock::RwLockWriteGuard<'a, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> {lock_api::rwlock::RwLock::<parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>::write}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = BTreeMap::<u64, BlockInQueue>::new() -> [return: bb2, unwind: bb14]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1403:62: 1403:77
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1403:62: 1403:75
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> BTreeMap<u64, BlockInQueue> {BTreeMap::<u64, BlockInQueue>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1413:15
        _11 = &_2;                       // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
        _10 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> &'a <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
        _8 = <BTreeMap<u64, BlockInQueue> as Clone>::clone(move _9) -> [return: bb4, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1405:21
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1405:14: 1405:19
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<u64, BlockInQueue>) -> BTreeMap<u64, BlockInQueue> {<BTreeMap<u64, BlockInQueue> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <BTreeMap<u64, BlockInQueue> as IntoIterator>::into_iter(move _8) -> [return: bb5, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1406:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1406:14: 1406:23
                                         // + literal: Const { ty: fn(BTreeMap<u64, BlockInQueue>) -> <BTreeMap<u64, BlockInQueue> as IntoIterator>::IntoIter {<BTreeMap<u64, BlockInQueue> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <std::collections::btree_map::IntoIter<u64, BlockInQueue> as Iterator>::filter_map::<(u64, BlockInQueue), [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]>(move _7, const ZeroSized: [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]) -> [return: bb6, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1410:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1407:14: 1407:24
                                         // + literal: Const { ty: fn(std::collections::btree_map::IntoIter<u64, BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]) -> FilterMap<std::collections::btree_map::IntoIter<u64, BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]> {<std::collections::btree_map::IntoIter<u64, BlockInQueue> as Iterator>::filter_map::<(u64, BlockInQueue), [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39], val: Value(<ZST>) }
    }

    bb6: {
        _13 = &mut _4;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1411:23: 1413:14
        _12 = [closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37] { new_block_map: move _13 }; // scope 2 at cita-chain/core/src/libchain/chain.rs:1411:23: 1413:14
                                         // closure
                                         // + def_id: DefId(0:337 ~ core[3f1a]::libchain::chain::{impl#5}::clear_block_map::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((u64, libchain::chain::BlockInQueue),)),
                                         //     (&mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>,),
                                         // ]
        _5 = <FilterMap<std::collections::btree_map::IntoIter<u64, BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]> as Iterator>::for_each::<[closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37]>(move _6, move _12) -> [return: bb7, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1404:9: 1413:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1411:14: 1411:22
                                         // + literal: Const { ty: fn(FilterMap<std::collections::btree_map::IntoIter<u64, BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]>, [closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37]) {<FilterMap<std::collections::btree_map::IntoIter<u64, BlockInQueue>, [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39]> as Iterator>::for_each::<[closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37]>}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:22: 1414:35
        _19 = const true;                // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:22: 1414:35
        _14 = move _4;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:22: 1414:35
        _16 = &mut _2;                   // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:10: 1414:19
        _15 = <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut(move _16) -> [return: bb8, unwind: bb17]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>>) -> &'a mut <lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as Deref>::Target {<lock_api::rwlock::RwLockWriteGuard<'_, parking_lot::raw_rwlock::RawRwLock, BTreeMap<u64, BlockInQueue>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb8: {
        drop((*_15)) -> [return: bb9, unwind: bb10]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
    }

    bb9: {
        _19 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
        (*_15) = move _14;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
        _19 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:34: 1414:35
        _18 = chain::Chain::get_current_height(_1) -> [return: bb11, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1415:35: 1415:60
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1415:40: 1415:58
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain) -> u64 {chain::Chain::get_current_height}, val: Value(<ZST>) }
    }

    bb10 (cleanup): {
        _19 = const false;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
        (*_15) = move _14;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
        goto -> bb17;                    // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:9: 1414:19
    }

    bb11: {
        _17 = chain::Chain::set_max_store_height(_1, move _18) -> [return: bb12, unwind: bb19]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1415:9: 1415:61
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1415:14: 1415:34
                                         // + literal: Const { ty: for<'a> fn(&'a chain::Chain, u64) {chain::Chain::set_max_store_height}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = const false;               // scope 1 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
        drop(_2) -> bb13;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
    }

    bb13: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1416:6: 1416:6
    }

    bb14 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1401:5: 1416:6
    }

    bb16 (cleanup): {
        drop(_14) -> bb19;               // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:34: 1414:35
    }

    bb17 (cleanup): {
        switchInt(_19) -> [0: bb19, otherwise: bb16]; // scope 2 at cita-chain/core/src/libchain/chain.rs:1414:34: 1414:35
    }

    bb18 (cleanup): {
        drop(_4) -> bb14;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
    }

    bb19 (cleanup): {
        switchInt(_20) -> [0: bb14, otherwise: bb18]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1416:5: 1416:6
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::clear_block_map::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1407:25: 1407:39], _2: (u64, BlockInQueue)) -> std::option::Option<(u64, BlockInQueue)> {
    let mut _0: std::option::Option<(u64, libchain::chain::BlockInQueue)>; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1407:40: 1407:40
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1407:27: 1407:30
    let _4: libchain::chain::BlockInQueue; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1407:32: 1407:37
    let mut _5: isize;                   // in scope 0 at cita-chain/core/src/libchain/chain.rs:1408:17: 1408:43
    let mut _6: (u64, libchain::chain::BlockInQueue); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1409:27: 1409:39
    let mut _7: libchain::chain::BlockInQueue; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1409:33: 1409:38
    let mut _8: bool;                    // in scope 0 at cita-chain/core/src/libchain/chain.rs:1410:13: 1410:14
    scope 1 {
        debug key => _3;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:1407:27: 1407:30
        debug value => _4;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:1407:32: 1407:37
    }

    bb0: {
        _8 = const false;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1407:27: 1407:30
        _3 = (_2.0: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:1407:27: 1407:30
        _8 = const true;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1407:32: 1407:37
        _4 = move (_2.1: libchain::chain::BlockInQueue); // scope 0 at cita-chain/core/src/libchain/chain.rs:1407:32: 1407:37
        _5 = discriminant(_4);           // scope 1 at cita-chain/core/src/libchain/chain.rs:1407:46: 1407:51
        switchInt(move _5) -> [2: bb2, otherwise: bb1]; // scope 1 at cita-chain/core/src/libchain/chain.rs:1407:40: 1407:51
    }

    bb1: {
        _8 = const false;                // scope 1 at cita-chain/core/src/libchain/chain.rs:1409:33: 1409:38
        _7 = move _4;                    // scope 1 at cita-chain/core/src/libchain/chain.rs:1409:33: 1409:38
        _6 = (_3, move _7);              // scope 1 at cita-chain/core/src/libchain/chain.rs:1409:27: 1409:39
        _0 = std::option::Option::<(u64, BlockInQueue)>::Some(move _6); // scope 1 at cita-chain/core/src/libchain/chain.rs:1409:22: 1409:40
        goto -> bb5;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:1409:39: 1409:40
    }

    bb2: {
        _0 = std::option::Option::<(u64, BlockInQueue)>::None; // scope 1 at cita-chain/core/src/libchain/chain.rs:1408:47: 1408:51
        goto -> bb5;                     // scope 1 at cita-chain/core/src/libchain/chain.rs:1408:47: 1408:51
    }

    bb3: {
        _8 = const false;                // scope 0 at cita-chain/core/src/libchain/chain.rs:1410:13: 1410:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1410:14: 1410:14
    }

    bb4: {
        drop(_4) -> bb3;                 // scope 0 at cita-chain/core/src/libchain/chain.rs:1410:13: 1410:14
    }

    bb5: {
        switchInt(_8) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-chain/core/src/libchain/chain.rs:1410:13: 1410:14
    }
}

fn chain::<impl at cita-chain/core/src/libchain/chain.rs:369:1: 369:11>::clear_block_map::{closure#1}(_1: &mut [closure@cita-chain/core/src/libchain/chain.rs:1411:23: 1411:37], _2: (u64, BlockInQueue)) -> () {
    debug new_block_map => (*((*_1).0: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>)); // in scope 0 at cita-chain/core/src/libchain/chain.rs:1403:17: 1403:30
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:38: 1411:38
    let _3: u64;                         // in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:25: 1411:28
    let _4: libchain::chain::BlockInQueue; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:30: 1411:35
    let _5: std::option::Option<libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1412:17: 1412:49
    let mut _6: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>; // in scope 0 at cita-chain/core/src/libchain/chain.rs:1411:23: 1413:14
    scope 1 {
        debug key => _3;                 // in scope 1 at cita-chain/core/src/libchain/chain.rs:1411:25: 1411:28
        debug value => _4;               // in scope 1 at cita-chain/core/src/libchain/chain.rs:1411:30: 1411:35
    }

    bb0: {
        _3 = (_2.0: u64);                // scope 0 at cita-chain/core/src/libchain/chain.rs:1411:25: 1411:28
        _4 = move (_2.1: libchain::chain::BlockInQueue); // scope 0 at cita-chain/core/src/libchain/chain.rs:1411:30: 1411:35
        _6 = deref_copy ((*_1).0: &mut std::collections::BTreeMap<u64, libchain::chain::BlockInQueue>); // scope 1 at cita-chain/core/src/libchain/chain.rs:1412:17: 1412:49
        _5 = BTreeMap::<u64, BlockInQueue>::insert(_6, _3, move _4) -> bb1; // scope 1 at cita-chain/core/src/libchain/chain.rs:1412:17: 1412:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/chain.rs:1412:31: 1412:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<u64, BlockInQueue>, u64, BlockInQueue) -> std::option::Option<BlockInQueue> {BTreeMap::<u64, BlockInQueue>::insert}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_5) -> bb2;                 // scope 1 at cita-chain/core/src/libchain/chain.rs:1412:49: 1412:50
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:1413:14: 1413:14
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:18:10: 18:19>::eq(_1: &rich_status::RichStatus, _2: &rich_status::RichStatus) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:10: 18:19
    debug other => _2;                   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:10: 18:19
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:10: 18:19
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _4: bool;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _5: u64;                     // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _6: u64;                     // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _7: bool;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _8: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _9: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _10: bool;                   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let mut _11: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let mut _12: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24

    bb0: {
        _5 = ((*_1).0: u64);             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _6 = ((*_2).0: u64);             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _4 = Eq(move _5, move _6);       // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        goto -> bb3;                     // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    }

    bb2: {
        _11 = &((*_1).2: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _12 = &((*_2).2: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _10 = <Vec<H160> as PartialEq>::eq(move _11, move _12) -> bb8; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<H160>, &'b Vec<H160>) -> bool {<Vec<H160> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:19: 18:19
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        goto -> bb6;                     // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    }

    bb5: {
        _8 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        _9 = &((*_2).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        _7 = <H256 as PartialEq>::eq(move _8, move _9) -> bb7; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    }

    bb7: {
        _3 = move _7;                    // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        goto -> bb6;                     // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    }

    bb8: {
        _0 = move _10;                   // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        goto -> bb3;                     // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:18:21: 18:26>::clone(_1: &rich_status::RichStatus) -> rich_status::RichStatus {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:21: 18:26
    let mut _0: libchain::rich_status::RichStatus; // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:21: 18:26
    let mut _2: u64;                     // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let _3: &u64;                        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _6: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let _7: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24

    bb0: {
        _3 = &((*_1).0: u64);            // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _2 = (*_3);                      // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _5 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        _4 = <H256 as Clone>::clone(_5) -> bb1; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).2: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _6 = <Vec<H160> as Clone>::clone(_7) -> bb2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> Vec<H160> {<Vec<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = rich_status::RichStatus { number: move _2, hash: move _4, nodes: move _6 }; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:21: 18:26
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:26: 18:26
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33>::fmt(_1: &rich_status::RichStatus, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
    let _4: &str;                        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let _6: &u64;                        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let _7: &str;                        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let _9: &cita_types::H256;           // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let _10: &str;                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let _12: &&std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
    let _13: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24

    bb0: {
        _3 = const "RichStatus";         // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "number";             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u64);            // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
        _7 = const "hash";               // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
        _10 = const "nodes";             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: std::vec::Vec<cita_types::H160>); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _12 = &_13;                      // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:18:28: 18:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:33: 18:33
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:18:35: 18:42>::default() -> rich_status::RichStatus {
    let mut _0: libchain::rich_status::RichStatus; // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:35: 18:42
    let mut _1: u64;                     // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
    let mut _2: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
    let mut _3: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24

    bb0: {
        _1 = <u64 as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:20:5: 20:16
                                         // + literal: Const { ty: fn() -> u64 {<u64 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <H256 as Default>::default() -> bb2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:21:5: 21:15
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Vec<H160> as Default>::default() -> bb3; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:22:5: 22:24
                                         // + literal: Const { ty: fn() -> Vec<H160> {<Vec<H160> as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = rich_status::RichStatus { number: move _1, hash: move _2, nodes: move _3 }; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:35: 18:42
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:18:42: 18:42
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::hash(_1: &rich_status::RichStatus) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:26:17: 26:22
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:27:9: 27:19

    bb0: {
        _0 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/rich_status.rs:27:9: 27:19
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:28:6: 28:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::number(_1: &rich_status::RichStatus) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:30:19: 30:24
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:30:29: 30:32

    bb0: {
        _0 = ((*_1).0: u64);             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:31:9: 31:20
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:32:6: 32:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::set_hash(_1: &mut rich_status::RichStatus, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:34:21: 34:30
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:34:32: 34:33
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:34:41: 34:41

    bb0: {
        ((*_1).1: cita_types::H256) = _2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:35:9: 35:22
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:36:6: 36:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::set_number(_1: &mut rich_status::RichStatus, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:38:23: 38:32
    debug n => _2;                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:38:34: 38:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:38:42: 38:42

    bb0: {
        ((*_1).0: u64) = _2;             // scope 0 at cita-chain/core/src/libchain/rich_status.rs:39:9: 39:24
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:40:6: 40:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::set_nodes(_1: &mut rich_status::RichStatus, _2: Vec<H160>) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:42:22: 42:31
    debug nodes => _2;                   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:42:33: 42:38
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:42:54: 42:54

    bb0: {
        drop(((*_1).2: std::vec::Vec<cita_types::H160>)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:43:9: 43:19
    }

    bb1: {
        ((*_1).2: std::vec::Vec<cita_types::H160>) = move _2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:43:9: 43:19
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:44:6: 44:6
    }

    bb2 (cleanup): {
        ((*_1).2: std::vec::Vec<cita_types::H160>) = move _2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:43:9: 43:19
        resume;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:42:5: 44:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::protobuf(_1: &rich_status::RichStatus) -> libproto::RichStatus {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:46:21: 46:26
    let mut _0: libproto::RichStatus;    // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:47:13: 47:19
    let _2: ();                          // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:48:9: 48:37
    let mut _3: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:48:9: 48:37
    let mut _4: u64;                     // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:48:23: 48:36
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:9: 49:42
    let mut _6: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:9: 49:42
    let mut _7: std::vec::Vec<u8>;       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
    let mut _8: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
    let _9: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
    let mut _10: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:32
    let _12: ();                         // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:50:9: 56:10
    let mut _13: &mut libproto::RichStatus; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:50:9: 56:10
    let mut _14: protobuf::repeated::RepeatedField<std::vec::Vec<u8>>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:51:13: 55:27
    let mut _15: std::iter::Map<std::vec::IntoIter<cita_types::H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:51:13: 54:49
    let mut _16: std::vec::IntoIter<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:51:13: 53:29
    let mut _17: std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:51:13: 52:25
    let mut _18: &std::vec::Vec<cita_types::H160>; // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:51:13: 52:25
    scope 1 {
        debug ps => _0;                  // in scope 1 at cita-chain/core/src/libchain/rich_status.rs:47:13: 47:19
    }

    bb0: {
        _0 = libproto::RichStatus::new() -> bb1; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:47:22: 47:44
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:47:22: 47:42
                                         // + literal: Const { ty: fn() -> libproto::RichStatus {libproto::RichStatus::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/rich_status.rs:48:9: 48:37
        _4 = rich_status::RichStatus::number(_1) -> [return: bb2, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:48:23: 48:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:48:28: 48:34
                                         // + literal: Const { ty: for<'a> fn(&'a rich_status::RichStatus) -> u64 {rich_status::RichStatus::number}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = libproto::RichStatus::set_height(move _3, move _4) -> [return: bb3, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:48:9: 48:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:48:12: 48:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, u64) {libproto::RichStatus::set_height}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:9: 49:42
        _11 = rich_status::RichStatus::hash(_1) -> [return: bb4, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:49:26: 49:30
                                         // + literal: Const { ty: for<'a> fn(&'a rich_status::RichStatus) -> &'a H256 {rich_status::RichStatus::hash}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = _11;                       // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
        _9 = <H256 as Deref>::deref(move _10) -> [return: bb5, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
        _7 = slice::<impl [u8]>::to_vec(move _8) -> [return: bb6, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:21: 49:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:49:33: 49:39
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = libproto::RichStatus::set_hash(move _6, move _7) -> [return: bb7, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:49:9: 49:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:49:12: 49:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, Vec<u8>) {libproto::RichStatus::set_hash}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &mut _0;                   // scope 1 at cita-chain/core/src/libchain/rich_status.rs:50:9: 56:10
        _18 = &((*_1).2: std::vec::Vec<cita_types::H160>); // scope 1 at cita-chain/core/src/libchain/rich_status.rs:51:13: 52:25
        _17 = <Vec<H160> as Clone>::clone(move _18) -> [return: bb8, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:51:13: 52:25
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:52:18: 52:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<H160>) -> Vec<H160> {<Vec<H160> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = <Vec<H160> as IntoIterator>::into_iter(move _17) -> [return: bb9, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:51:13: 53:29
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:53:18: 53:27
                                         // + literal: Const { ty: fn(Vec<H160>) -> <Vec<H160> as IntoIterator>::IntoIter {<Vec<H160> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = <std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]>(move _16, const ZeroSized: [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]) -> [return: bb10, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:51:13: 54:49
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:54:18: 54:21
                                         // + literal: Const { ty: fn(std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]) -> std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]> {<std::vec::IntoIter<H160> as Iterator>::map::<Vec<u8>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31], val: Value(<ZST>) }
    }

    bb10: {
        _14 = <std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>(move _15) -> [return: bb11, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:51:13: 55:27
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:55:18: 55:25
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]>) -> protobuf::repeated::RepeatedField<Vec<u8>> {<std::iter::Map<std::vec::IntoIter<H160>, [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31]> as Iterator>::collect::<protobuf::repeated::RepeatedField<Vec<u8>>>}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = libproto::RichStatus::set_nodes(move _13, move _14) -> [return: bb12, unwind: bb13]; // scope 1 at cita-chain/core/src/libchain/rich_status.rs:50:9: 56:10
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:50:12: 50:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::RichStatus, protobuf::repeated::RepeatedField<Vec<u8>>) {libproto::RichStatus::set_nodes}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:58:6: 58:6
    }

    bb13 (cleanup): {
        drop(_0) -> bb14;                // scope 0 at cita-chain/core/src/libchain/rich_status.rs:58:5: 58:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:46:5: 58:6
    }
}

fn rich_status::<impl at cita-chain/core/src/libchain/rich_status.rs:25:1: 25:16>::protobuf::{closure#0}(_1: &mut [closure@cita-chain/core/src/libchain/rich_status.rs:54:22: 54:31], _2: H160) -> Vec<u8> {
    debug address => _2;                 // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:23: 54:30
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:32
    let mut _3: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
    let _4: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
    let mut _5: &cita_types::H160;       // in scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48

    bb0: {
        _5 = &_2;                        // scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
        _4 = <H160 as Deref>::deref(move _5) -> bb1; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
                                         // + literal: Const { ty: for<'a> fn(&'a H160) -> &'a <H160 as Deref>::Target {<H160 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
        _0 = slice::<impl [u8]>::to_vec(move _3) -> bb2; // scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:32: 54:48
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/rich_status.rs:54:40: 54:46
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-chain/core/src/libchain/rich_status.rs:54:48: 54:48
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:18:10: 18:19>::eq(_1: &status::Status, _2: &status::Status) -> bool {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:18:10: 18:19
    debug other => _2;                   // in scope 0 at cita-chain/core/src/libchain/status.rs:18:10: 18:19
    let mut _0: bool;                    // return place in scope 0 at cita-chain/core/src/libchain/status.rs:18:10: 18:19
    let mut _3: bool;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _4: u64;                     // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _5: u64;                     // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _6: bool;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let mut _7: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let mut _8: &cita_types::H256;       // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15

    bb0: {
        _4 = ((*_1).0: u64);             // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _5 = ((*_2).0: u64);             // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _3 = Eq(move _4, move _5);       // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    }

    bb1: {
        _0 = const false;                // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        goto -> bb3;                     // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    }

    bb2: {
        _7 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _8 = &((*_2).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _6 = <H256 as PartialEq>::eq(move _7, move _8) -> bb4; // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H256, &'b H256) -> bool {<H256 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:18:19: 18:19
    }

    bb4: {
        _0 = move _6;                    // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        goto -> bb3;                     // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:18:21: 18:26>::clone(_1: &status::Status) -> status::Status {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:18:21: 18:26
    let mut _0: libchain::status::Status; // return place in scope 0 at cita-chain/core/src/libchain/status.rs:18:21: 18:26
    let mut _2: u64;                     // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let _3: &u64;                        // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _4: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let _5: &cita_types::H256;           // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15

    bb0: {
        _3 = &((*_1).0: u64);            // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _2 = (*_3);                      // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _5 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _4 = <H256 as Clone>::clone(_5) -> bb1; // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> H256 {<H256 as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = status::Status { number: move _2, hash: move _4 }; // scope 0 at cita-chain/core/src/libchain/status.rs:18:21: 18:26
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:18:26: 18:26
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:18:28: 18:33>::fmt(_1: &status::Status, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
    debug f => _2;                       // in scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
    let _3: &str;                        // in scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
    let _4: &str;                        // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let _6: &u64;                        // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let _7: &str;                        // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let _9: &&cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
    let _10: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15

    bb0: {
        _3 = const "Status";             // scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:18:28: 18:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "number";             // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:20:5: 20:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: u64);            // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
        _7 = const "hash";               // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _9 = &_10;                       // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-chain/core/src/libchain/status.rs:18:28: 18:33
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:18:28: 18:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:18:33: 18:33
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:18:35: 18:42>::default() -> status::Status {
    let mut _0: libchain::status::Status; // return place in scope 0 at cita-chain/core/src/libchain/status.rs:18:35: 18:42
    let mut _1: u64;                     // in scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
    let mut _2: cita_types::H256;        // in scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15

    bb0: {
        _1 = <u64 as Default>::default() -> bb1; // scope 0 at cita-chain/core/src/libchain/status.rs:20:5: 20:16
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:20:5: 20:16
                                         // + literal: Const { ty: fn() -> u64 {<u64 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <H256 as Default>::default() -> bb2; // scope 0 at cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:21:5: 21:15
                                         // + literal: Const { ty: fn() -> H256 {<H256 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = status::Status { number: move _1, hash: move _2 }; // scope 0 at cita-chain/core/src/libchain/status.rs:18:35: 18:42
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:18:42: 18:42
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:24:1: 24:12>::hash(_1: &status::Status) -> &H256 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:25:17: 25:22
    let mut _0: &cita_types::H256;       // return place in scope 0 at cita-chain/core/src/libchain/status.rs:26:9: 26:19

    bb0: {
        _0 = &((*_1).1: cita_types::H256); // scope 0 at cita-chain/core/src/libchain/status.rs:26:9: 26:19
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:27:6: 27:6
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:24:1: 24:12>::number(_1: &status::Status) -> u64 {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:29:19: 29:24
    let mut _0: u64;                     // return place in scope 0 at cita-chain/core/src/libchain/status.rs:29:29: 29:32

    bb0: {
        _0 = ((*_1).0: u64);             // scope 0 at cita-chain/core/src/libchain/status.rs:30:9: 30:20
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:31:6: 31:6
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:24:1: 24:12>::set_hash(_1: &mut status::Status, _2: H256) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:33:21: 33:30
    debug h => _2;                       // in scope 0 at cita-chain/core/src/libchain/status.rs:33:32: 33:33
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/status.rs:33:41: 33:41

    bb0: {
        ((*_1).1: cita_types::H256) = _2; // scope 0 at cita-chain/core/src/libchain/status.rs:34:9: 34:22
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:35:6: 35:6
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:24:1: 24:12>::set_number(_1: &mut status::Status, _2: u64) -> () {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:37:23: 37:32
    debug n => _2;                       // in scope 0 at cita-chain/core/src/libchain/status.rs:37:34: 37:35
    let mut _0: ();                      // return place in scope 0 at cita-chain/core/src/libchain/status.rs:37:42: 37:42

    bb0: {
        ((*_1).0: u64) = _2;             // scope 0 at cita-chain/core/src/libchain/status.rs:38:9: 38:24
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:39:6: 39:6
    }
}

fn status::<impl at cita-chain/core/src/libchain/status.rs:24:1: 24:12>::protobuf(_1: &status::Status) -> libproto::Status {
    debug self => _1;                    // in scope 0 at cita-chain/core/src/libchain/status.rs:41:21: 41:26
    let mut _0: libproto::Status;        // return place in scope 0 at cita-chain/core/src/libchain/status.rs:42:13: 42:19
    let _2: ();                          // in scope 0 at cita-chain/core/src/libchain/status.rs:43:9: 43:37
    let mut _3: &mut libproto::Status;   // in scope 0 at cita-chain/core/src/libchain/status.rs:43:9: 43:37
    let mut _4: u64;                     // in scope 0 at cita-chain/core/src/libchain/status.rs:43:23: 43:36
    let _5: ();                          // in scope 0 at cita-chain/core/src/libchain/status.rs:44:9: 44:42
    let mut _6: &mut libproto::Status;   // in scope 0 at cita-chain/core/src/libchain/status.rs:44:9: 44:42
    let mut _7: std::vec::Vec<u8>;       // in scope 0 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
    let mut _8: &[u8];                   // in scope 0 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
    let _9: &[u8];                       // in scope 0 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
    let mut _10: &cita_types::H256;      // in scope 0 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
    let _11: &cita_types::H256;          // in scope 0 at cita-chain/core/src/libchain/status.rs:44:21: 44:32
    scope 1 {
        debug ps => _0;                  // in scope 1 at cita-chain/core/src/libchain/status.rs:42:13: 42:19
    }

    bb0: {
        _0 = libproto::Status::new() -> bb1; // scope 0 at cita-chain/core/src/libchain/status.rs:42:22: 42:40
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:42:22: 42:38
                                         // + literal: Const { ty: fn() -> libproto::Status {libproto::Status::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/status.rs:43:9: 43:37
        _4 = status::Status::number(_1) -> [return: bb2, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:43:23: 43:36
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:43:28: 43:34
                                         // + literal: Const { ty: for<'a> fn(&'a status::Status) -> u64 {status::Status::number}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = libproto::Status::set_height(move _3, move _4) -> [return: bb3, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:43:9: 43:37
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:43:12: 43:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Status, u64) {libproto::Status::set_height}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _0;                    // scope 1 at cita-chain/core/src/libchain/status.rs:44:9: 44:42
        _11 = status::Status::hash(_1) -> [return: bb4, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:44:21: 44:32
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:44:26: 44:30
                                         // + literal: Const { ty: for<'a> fn(&'a status::Status) -> &'a H256 {status::Status::hash}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = _11;                       // scope 1 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
        _9 = <H256 as Deref>::deref(move _10) -> [return: bb5, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:44:21: 44:41
                                         // + literal: Const { ty: for<'a> fn(&'a H256) -> &'a <H256 as Deref>::Target {<H256 as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = _9;                         // scope 1 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
        _7 = slice::<impl [u8]>::to_vec(move _8) -> [return: bb6, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:44:21: 44:41
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:44:33: 44:39
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = libproto::Status::set_hash(move _6, move _7) -> [return: bb7, unwind: bb8]; // scope 1 at cita-chain/core/src/libchain/status.rs:44:9: 44:42
                                         // mir::Constant
                                         // + span: cita-chain/core/src/libchain/status.rs:44:12: 44:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Status, Vec<u8>) {libproto::Status::set_hash}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at cita-chain/core/src/libchain/status.rs:46:6: 46:6
    }

    bb8 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at cita-chain/core/src/libchain/status.rs:46:5: 46:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-chain/core/src/libchain/status.rs:41:5: 46:6
    }
}

fn BlockInQueue::Proposal(_1: OpenBlock) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13

    bb0: {
        _0 = BlockInQueue::Proposal(move _1); // scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13
    }
}

// MIR FOR CTFE
fn BlockInQueue::Proposal(_1: OpenBlock) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13

    bb0: {
        _0 = BlockInQueue::Proposal(move _1); // scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:283:5: 283:13
    }
}

fn BlockInQueue::ConsensusBlock(_1: OpenBlock, _2: libproto::Proof) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19

    bb0: {
        _0 = BlockInQueue::ConsensusBlock(move _1, move _2); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19
    }
}

// MIR FOR CTFE
fn BlockInQueue::ConsensusBlock(_1: OpenBlock, _2: libproto::Proof) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19

    bb0: {
        _0 = BlockInQueue::ConsensusBlock(move _1, move _2); // scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:284:5: 284:19
    }
}

fn BlockInQueue::SyncBlock(_1: (OpenBlock, std::option::Option<libproto::Proof>)) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14

    bb0: {
        _0 = BlockInQueue::SyncBlock(move _1); // scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14
    }
}

// MIR FOR CTFE
fn BlockInQueue::SyncBlock(_1: (OpenBlock, std::option::Option<libproto::Proof>)) -> BlockInQueue {
    let mut _0: libchain::chain::BlockInQueue; // return place in scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14

    bb0: {
        _0 = BlockInQueue::SyncBlock(move _1); // scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14
        return;                          // scope 0 at cita-chain/core/src/libchain/chain.rs:285:5: 285:14
    }
}
